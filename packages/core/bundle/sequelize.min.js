(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('node:util'), require('node:buffer'), require('node:crypto'), require('node:assert'), require('node:async_hooks'), require('node:path'), require('node:url'), require('fs'), require('path'), require('os'), require('util'), require('stream'), require('events'), require('node:fs')) :
	typeof define === 'function' && define.amd ? define(['exports', 'node:util', 'node:buffer', 'node:crypto', 'node:assert', 'node:async_hooks', 'node:path', 'node:url', 'fs', 'path', 'os', 'util', 'stream', 'events', 'node:fs'], factory) :
	(global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.Sequelize = {}, global.require$$0$1, global.require$$0$2, global.require$$0$3, global.require$$0$4, global.require$$0$5, global.require$$0$7, global.require$$1, global.require$$0$6, global.require$$0$8, global.require$$2, global.require$$0$9, global.require$$0$a, global.require$$0$b, global.require$$0$c));
})(this, (function (exports, require$$0$1, require$$0$2, require$$0$3, require$$0$4, require$$0$5, require$$0$7, require$$1, require$$0$6, require$$0$8, require$$2, require$$0$9, require$$0$a, require$$0$b, require$$0$c) { 'use strict';

	var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

	function getDefaultExportFromCjs (x) {
		return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
	}

	function getAugmentedNamespace(n) {
	  if (n.__esModule) return n;
	  var f = n.default;
		if (typeof f == "function") {
			var a = function a () {
				if (this instanceof a) {
					var args = [null];
					args.push.apply(args, arguments);
					var Ctor = Function.bind.apply(f, args);
					return new Ctor();
				}
				return f.apply(this, arguments);
			};
			a.prototype = f.prototype;
	  } else a = {};
	  Object.defineProperty(a, '__esModule', {value: true});
		Object.keys(n).forEach(function (k) {
			var d = Object.getOwnPropertyDescriptor(n, k);
			Object.defineProperty(a, k, d.get ? d : {
				enumerable: true,
				get: function () {
					return n[k];
				}
			});
		});
		return a;
	}

	var lib$2 = {exports: {}};

	/** Detect free variable `global` from Node.js. */

	var freeGlobal$1 = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;

	var _freeGlobal = freeGlobal$1;

	var freeGlobal = _freeGlobal;

	/** Detect free variable `self`. */
	var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

	/** Used as a reference to the global object. */
	var root$5 = freeGlobal || freeSelf || Function('return this')();

	var _root = root$5;

	var root$4 = _root;

	/** Built-in value references. */
	var Symbol$5 = root$4.Symbol;

	var _Symbol = Symbol$5;

	var Symbol$4 = _Symbol;

	/** Used for built-in method references. */
	var objectProto$7 = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty$7 = objectProto$7.hasOwnProperty;

	/**
	 * Used to resolve the
	 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var nativeObjectToString$1 = objectProto$7.toString;

	/** Built-in value references. */
	var symToStringTag$1 = Symbol$4 ? Symbol$4.toStringTag : undefined;

	/**
	 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @returns {string} Returns the raw `toStringTag`.
	 */
	function getRawTag$1(value) {
	  var isOwn = hasOwnProperty$7.call(value, symToStringTag$1),
	      tag = value[symToStringTag$1];

	  try {
	    value[symToStringTag$1] = undefined;
	    var unmasked = true;
	  } catch (e) {}

	  var result = nativeObjectToString$1.call(value);
	  if (unmasked) {
	    if (isOwn) {
	      value[symToStringTag$1] = tag;
	    } else {
	      delete value[symToStringTag$1];
	    }
	  }
	  return result;
	}

	var _getRawTag = getRawTag$1;

	/** Used for built-in method references. */

	var objectProto$6 = Object.prototype;

	/**
	 * Used to resolve the
	 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var nativeObjectToString = objectProto$6.toString;

	/**
	 * Converts `value` to a string using `Object.prototype.toString`.
	 *
	 * @private
	 * @param {*} value The value to convert.
	 * @returns {string} Returns the converted string.
	 */
	function objectToString$1(value) {
	  return nativeObjectToString.call(value);
	}

	var _objectToString = objectToString$1;

	var Symbol$3 = _Symbol,
	    getRawTag = _getRawTag,
	    objectToString = _objectToString;

	/** `Object#toString` result references. */
	var nullTag = '[object Null]',
	    undefinedTag = '[object Undefined]';

	/** Built-in value references. */
	var symToStringTag = Symbol$3 ? Symbol$3.toStringTag : undefined;

	/**
	 * The base implementation of `getTag` without fallbacks for buggy environments.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @returns {string} Returns the `toStringTag`.
	 */
	function baseGetTag$3(value) {
	  if (value == null) {
	    return value === undefined ? undefinedTag : nullTag;
	  }
	  return (symToStringTag && symToStringTag in Object(value))
	    ? getRawTag(value)
	    : objectToString(value);
	}

	var _baseGetTag = baseGetTag$3;

	/**
	 * Creates a unary function that invokes `func` with its argument transformed.
	 *
	 * @private
	 * @param {Function} func The function to wrap.
	 * @param {Function} transform The argument transform.
	 * @returns {Function} Returns the new function.
	 */

	function overArg$1(func, transform) {
	  return function(arg) {
	    return func(transform(arg));
	  };
	}

	var _overArg = overArg$1;

	var overArg = _overArg;

	/** Built-in value references. */
	var getPrototype$1 = overArg(Object.getPrototypeOf, Object);

	var _getPrototype = getPrototype$1;

	/**
	 * Checks if `value` is object-like. A value is object-like if it's not `null`
	 * and has a `typeof` result of "object".
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	 * @example
	 *
	 * _.isObjectLike({});
	 * // => true
	 *
	 * _.isObjectLike([1, 2, 3]);
	 * // => true
	 *
	 * _.isObjectLike(_.noop);
	 * // => false
	 *
	 * _.isObjectLike(null);
	 * // => false
	 */

	function isObjectLike$4(value) {
	  return value != null && typeof value == 'object';
	}

	var isObjectLike_1 = isObjectLike$4;

	var baseGetTag$2 = _baseGetTag,
	    getPrototype = _getPrototype,
	    isObjectLike$3 = isObjectLike_1;

	/** `Object#toString` result references. */
	var objectTag$2 = '[object Object]';

	/** Used for built-in method references. */
	var funcProto$2 = Function.prototype,
	    objectProto$5 = Object.prototype;

	/** Used to resolve the decompiled source of functions. */
	var funcToString$2 = funcProto$2.toString;

	/** Used to check objects for own properties. */
	var hasOwnProperty$6 = objectProto$5.hasOwnProperty;

	/** Used to infer the `Object` constructor. */
	var objectCtorString = funcToString$2.call(Object);

	/**
	 * Checks if `value` is a plain object, that is, an object created by the
	 * `Object` constructor or one with a `[[Prototype]]` of `null`.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.8.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 * }
	 *
	 * _.isPlainObject(new Foo);
	 * // => false
	 *
	 * _.isPlainObject([1, 2, 3]);
	 * // => false
	 *
	 * _.isPlainObject({ 'x': 0, 'y': 0 });
	 * // => true
	 *
	 * _.isPlainObject(Object.create(null));
	 * // => true
	 */
	function isPlainObject$1(value) {
	  if (!isObjectLike$3(value) || baseGetTag$2(value) != objectTag$2) {
	    return false;
	  }
	  var proto = getPrototype(value);
	  if (proto === null) {
	    return true;
	  }
	  var Ctor = hasOwnProperty$6.call(proto, 'constructor') && proto.constructor;
	  return typeof Ctor == 'function' && Ctor instanceof Ctor &&
	    funcToString$2.call(Ctor) == objectCtorString;
	}

	var isPlainObject_1 = isPlainObject$1;

	var dist = {};

	Object.defineProperty(dist, "__esModule", { value: true });
	dist.retryAsPromised = dist.TimeoutError = void 0;
	let TimeoutError$2 = class TimeoutError extends Error {
	    constructor(message, previousError) {
	        super(message);
	        this.name = "TimeoutError";
	        this.previous = previousError;
	    }
	};
	dist.TimeoutError = TimeoutError$2;
	function matches$1(match, err) {
	    if (typeof match === 'function') {
	        try {
	            if (err instanceof match)
	                return true;
	        }
	        catch (_) {
	            return !!match(err);
	        }
	    }
	    if (match === err.toString())
	        return true;
	    if (match === err.message)
	        return true;
	    return match instanceof RegExp
	        && (match.test(err.message) || match.test(err.toString()));
	}
	function retryAsPromised(callback, optionsInput) {
	    if (!callback || !optionsInput) {
	        throw new Error('retry-as-promised must be passed a callback and a options set');
	    }
	    optionsInput = (typeof optionsInput === "number" ? { max: optionsInput } : optionsInput);
	    const options = {
	        $current: "$current" in optionsInput ? optionsInput.$current : 1,
	        max: optionsInput.max,
	        timeout: optionsInput.timeout || undefined,
	        match: optionsInput.match ? Array.isArray(optionsInput.match) ? optionsInput.match : [optionsInput.match] : [],
	        backoffBase: optionsInput.backoffBase === undefined ? 100 : optionsInput.backoffBase,
	        backoffExponent: optionsInput.backoffExponent || 1.1,
	        report: optionsInput.report,
	        name: optionsInput.name || callback.name || 'unknown'
	    };
	    if (options.match && !Array.isArray(options.match))
	        options.match = [options.match];
	    if (options.report)
	        options.report('Trying ' + options.name + ' #' + options.$current + ' at ' + new Date().toLocaleTimeString(), options);
	    return new Promise(function (resolve, reject) {
	        let timeout;
	        let backoffTimeout;
	        let lastError;
	        if (options.timeout) {
	            timeout = setTimeout(function () {
	                if (backoffTimeout)
	                    clearTimeout(backoffTimeout);
	                reject(new TimeoutError$2(options.name + ' timed out', lastError));
	            }, options.timeout);
	        }
	        Promise.resolve(callback({ current: options.$current }))
	            .then(resolve)
	            .then(function () {
	            if (timeout)
	                clearTimeout(timeout);
	            if (backoffTimeout)
	                clearTimeout(backoffTimeout);
	        })
	            .catch(function (err) {
	            if (timeout)
	                clearTimeout(timeout);
	            if (backoffTimeout)
	                clearTimeout(backoffTimeout);
	            lastError = err;
	            if (options.report)
	                options.report((err && err.toString()) || err, options, err);
	            // Should not retry if max has been reached
	            var shouldRetry = options.$current < options.max;
	            if (!shouldRetry)
	                return reject(err);
	            shouldRetry = options.match.length === 0 || options.match.some(function (match) {
	                return matches$1(match, err);
	            });
	            if (!shouldRetry)
	                return reject(err);
	            var retryDelay = options.backoffBase * Math.pow(options.backoffExponent, options.$current - 1);
	            // Do some accounting
	            options.$current++;
	            if (options.report)
	                options.report(`Retrying ${options.name} (${options.$current})`, options);
	            if (retryDelay) {
	                // Use backoff function to ease retry rate
	                if (options.report)
	                    options.report(`Delaying retry of ${options.name} by ${retryDelay}`, options);
	                backoffTimeout = setTimeout(function () {
	                    retryAsPromised(callback, options)
	                        .then(resolve)
	                        .catch(reject);
	                }, retryDelay);
	            }
	            else {
	                retryAsPromised(callback, options)
	                    .then(resolve)
	                    .catch(reject);
	            }
	        });
	    });
	}
	dist.retryAsPromised = retryAsPromised;
	dist.default = retryAsPromised;

	var __defProp$18 = Object.defineProperty;
	var __getOwnPropDesc$18 = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames$18 = Object.getOwnPropertyNames;
	var __hasOwnProp$18 = Object.prototype.hasOwnProperty;
	var __export$18 = (target, all) => {
	  for (var name in all)
	    __defProp$18(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps$18 = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames$18(from))
	      if (!__hasOwnProp$18.call(to, key) && key !== except)
	        __defProp$18(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc$18(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS$18 = (mod) => __copyProps$18(__defProp$18({}, "__esModule", { value: true }), mod);
	var deprecations_exports = {};
	__export$18(deprecations_exports, {
	  alwaysQuoteIdentifiers: () => alwaysQuoteIdentifiers,
	  columnToAttribute: () => columnToAttribute,
	  doNotUseRealDataType: () => doNotUseRealDataType,
	  fieldToColumn: () => fieldToColumn,
	  hooksReworked: () => hooksReworked,
	  movedSequelizeParam: () => movedSequelizeParam,
	  noDoubleNestedGroup: () => noDoubleNestedGroup,
	  noModelDropSchema: () => noModelDropSchema,
	  noModelTableName: () => noModelTableName,
	  noNewModel: () => noNewModel,
	  noOpCol: () => noOpCol,
	  noSchemaDelimiterParameter: () => noSchemaDelimiterParameter,
	  noSchemaParameter: () => noSchemaParameter,
	  noSequelizeDataType: () => noSequelizeDataType,
	  noSqlJson: () => noSqlJson,
	  noTrueLogging: () => noTrueLogging,
	  schemaRenamedToWithSchema: () => schemaRenamedToWithSchema,
	  scopeRenamedToWithScope: () => scopeRenamedToWithScope,
	  unsupportedEngine: () => unsupportedEngine,
	  useErrorCause: () => useErrorCause
	});
	var deprecations = __toCommonJS$18(deprecations_exports);
	var import_node_util$4 = require$$0$1;
	const noop$4 = () => {
	};
	const noTrueLogging = (0, import_node_util$4.deprecate)(noop$4, "The logging-option should be either a function or false. Default: console.log", "SEQUELIZE0002");
	const noDoubleNestedGroup = (0, import_node_util$4.deprecate)(noop$4, "Passing a double nested nested array to `group` is unsupported and will be removed in v6.", "SEQUELIZE0005");
	const unsupportedEngine = (0, import_node_util$4.deprecate)(noop$4, "This database engine version is not supported, please update your database server. More information https://github.com/sequelize/sequelize/blob/main/ENGINE.md", "SEQUELIZE0006");
	const useErrorCause = (0, import_node_util$4.deprecate)(noop$4, 'The "parent" and "original" properties in Sequelize errors have been replaced with the native "cause" property. Use that one instead.', "SEQUELIZE0007");
	const scopeRenamedToWithScope = (0, import_node_util$4.deprecate)(noop$4, "Model.scope has been renamed to Model.withScope, and Model.unscoped has been renamed to Model.withoutScope", "SEQUELIZE0008");
	const schemaRenamedToWithSchema = (0, import_node_util$4.deprecate)(noop$4, "Model.schema has been renamed to Model.withSchema", "SEQUELIZE0009");
	const noSequelizeDataType = (0, import_node_util$4.deprecate)(noop$4, `Accessing DataTypes on the Sequelize constructor is deprecated. Use the DataTypes object instead.
e.g, instead of using Sequelize.STRING, use DataTypes.STRING`, "SEQUELIZE0010");
	const noModelDropSchema = (0, import_node_util$4.deprecate)(noop$4, "Do not use Model.dropSchema. Use Sequelize#dropSchema or QueryInterface#dropSchema instead", "SEQUELIZE0011");
	const movedSequelizeParam = (0, import_node_util$4.deprecate)(noop$4, 'The "sequelize" instance has been moved from the second parameter bag to the first parameter bag in "beforeAssociate" and "afterAssociate" hooks', "SEQUELIZE0012");
	const hooksReworked = (0, import_node_util$4.deprecate)(noop$4, 'Sequelize Hooks methods, such as addHook, runHooks, beforeFind, and afterSync\u2026 are deprecated in favor of using the methods available through "sequelize.hooks", "Sequelize.hooks" and "YourModel.hooks".', "SEQUELIZE0013");
	const doNotUseRealDataType = (0, import_node_util$4.deprecate)(noop$4, "Sequelize 7 has normalized its FLOAT & DOUBLE data types, and made REAL redundant. FLOAT is now always an IEEE-754 single precision floating point, and DOUBLE a double-precision one. Use either instead of REAL.", "SEQUELIZE0014");
	const noSchemaParameter = (0, import_node_util$4.deprecate)(noop$4, "The schema parameter in QueryInterface#describeTable has been deprecated, use a TableNameWithSchema object to specify the schema or set the schema globally in the options.", "SEQUELIZE0015");
	const noSchemaDelimiterParameter = (0, import_node_util$4.deprecate)(noop$4, "The schemaDelimiter parameter in QueryInterface#describeTable has been deprecated, use a TableNameWithSchema object to specify the schemaDelimiter.", "SEQUELIZE0016");
	const columnToAttribute = (0, import_node_util$4.deprecate)(noop$4, "The @Column decorator has been renamed to @Attribute.", "SEQUELIZE0017");
	const fieldToColumn = (0, import_node_util$4.deprecate)(noop$4, 'The "field" option in attribute definitions has been renamed to "columnName".', "SEQUELIZE0018");
	const noModelTableName = (0, import_node_util$4.deprecate)(noop$4, "Model.tableName has been replaced with the more complete Model.modelDefinition.table, or Model.table", "SEQUELIZE0019");
	const noNewModel = (0, import_node_util$4.deprecate)(noop$4, `Do not use "new YourModel()" to instantiate a model. Use "YourModel.build()" instead. The previous option is being removed to resolve a conflict with class properties. See https://github.com/sequelize/sequelize/issues/14300#issuecomment-1355188077 for more information.`, "SEQUELIZE0020");
	const noOpCol = (0, import_node_util$4.deprecate)(noop$4, "Do not use Op.col, use col(), attribute(), or identifier() instead. Read more about these in the Raw Queries guide in the sequelize docs.", "SEQUELIZE0021");
	const noSqlJson = (0, import_node_util$4.deprecate)(noop$4, 'The json() function used to generate JSON queries is deprecated. All of its features are available through where(), attribute() or jsonPath(). Some of its features have been removed but can be replicated using the "sql" tag. See our Sequelize 7 upgrade guide.', "SEQUELIZE0022");
	const alwaysQuoteIdentifiers = (0, import_node_util$4.deprecate)(noop$4, 'Setting "quoteIdentifiers" to false is unsafe and it will be removed in v8.', "SEQUELIZE0023");

	var __defProp$17 = Object.defineProperty;
	var __getOwnPropDesc$17 = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames$17 = Object.getOwnPropertyNames;
	var __hasOwnProp$17 = Object.prototype.hasOwnProperty;
	var __export$17 = (target, all) => {
	  for (var name in all)
	    __defProp$17(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps$17 = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames$17(from))
	      if (!__hasOwnProp$17.call(to, key) && key !== except)
	        __defProp$17(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc$17(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS$17 = (mod) => __copyProps$17(__defProp$17({}, "__esModule", { value: true }), mod);
	var base_error_exports = {};
	__export$17(base_error_exports, {
	  BaseError: () => BaseError
	});
	var baseError = __toCommonJS$17(base_error_exports);
	var import_deprecations$7 = deprecations;
	const supportsErrorCause = (() => {
	  const err = new Error("Dummy 1", { cause: new Error("Dummy 2") });
	  return "cause" in err;
	})();
	class BaseError extends Error {
	  /**
	   * @deprecated use {@link cause}.
	   */
	  get parent() {
	    (0, import_deprecations$7.useErrorCause)();
	    return this.cause;
	  }
	  /**
	   * @deprecated use {@link cause}.
	   */
	  get original() {
	    (0, import_deprecations$7.useErrorCause)();
	    return this.cause;
	  }
	  constructor(message, options) {
	    super(supportsErrorCause ? message : addCause(message, options == null ? void 0 : options.cause), options);
	    this.name = "SequelizeBaseError";
	    if (!supportsErrorCause && (options == null ? void 0 : options.cause)) {
	      this.cause = options.cause;
	    }
	  }
	}
	function addCause(message = "", cause) {
	  let out = message;
	  if (cause) {
	    out += `
Caused by: ${getErrorMessage(cause)}`;
	  }
	  return out;
	}
	function getErrorMessage(error) {
	  if (error instanceof Error) {
	    return error.message;
	  }
	  return String(error);
	}

	var __defProp$16 = Object.defineProperty;
	var __getOwnPropDesc$16 = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames$16 = Object.getOwnPropertyNames;
	var __hasOwnProp$16 = Object.prototype.hasOwnProperty;
	var __export$16 = (target, all) => {
	  for (var name in all)
	    __defProp$16(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps$16 = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames$16(from))
	      if (!__hasOwnProp$16.call(to, key) && key !== except)
	        __defProp$16(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc$16(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS$16 = (mod) => __copyProps$16(__defProp$16({}, "__esModule", { value: true }), mod);
	var database_error_exports = {};
	__export$16(database_error_exports, {
	  DatabaseError: () => DatabaseError
	});
	var databaseError = __toCommonJS$16(database_error_exports);
	var import_base_error$d = baseError;
	class DatabaseError extends import_base_error$d.BaseError {
	  sql;
	  parameters;
	  /**
	   * @param parent The database specific error which triggered this one
	   */
	  constructor(parent) {
	    super(parent.message, { cause: parent });
	    this.name = "SequelizeDatabaseError";
	    this.sql = parent.sql;
	    this.parameters = parent.parameters ?? {};
	  }
	}

	var __defProp$15 = Object.defineProperty;
	var __getOwnPropDesc$15 = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames$15 = Object.getOwnPropertyNames;
	var __hasOwnProp$15 = Object.prototype.hasOwnProperty;
	var __export$15 = (target, all) => {
	  for (var name in all)
	    __defProp$15(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps$15 = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames$15(from))
	      if (!__hasOwnProp$15.call(to, key) && key !== except)
	        __defProp$15(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc$15(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS$15 = (mod) => __copyProps$15(__defProp$15({}, "__esModule", { value: true }), mod);
	var aggregate_error_exports = {};
	__export$15(aggregate_error_exports, {
	  AggregateError: () => AggregateError$1
	});
	var aggregateError = __toCommonJS$15(aggregate_error_exports);
	var import_base_error$c = baseError;
	let AggregateError$1 = class AggregateError extends import_base_error$c.BaseError {
	  /** the aggregated errors that occurred */
	  errors;
	  constructor(errors) {
	    super();
	    this.errors = errors;
	    this.name = "AggregateError";
	  }
	  toString() {
	    const message = `AggregateError of:
${this.errors.map((error) => error === this ? "[Circular AggregateError]" : error instanceof AggregateError ? String(error).replace(/\n$/, "").replaceAll(/^/gm, "  ") : String(error).replaceAll(/^/gm, "    ").slice(2)).join("\n")}
`;
	    return message;
	  }
	};

	var __defProp$14 = Object.defineProperty;
	var __getOwnPropDesc$14 = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames$14 = Object.getOwnPropertyNames;
	var __hasOwnProp$14 = Object.prototype.hasOwnProperty;
	var __export$14 = (target, all) => {
	  for (var name in all)
	    __defProp$14(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps$14 = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames$14(from))
	      if (!__hasOwnProp$14.call(to, key) && key !== except)
	        __defProp$14(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc$14(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS$14 = (mod) => __copyProps$14(__defProp$14({}, "__esModule", { value: true }), mod);
	var association_error_exports = {};
	__export$14(association_error_exports, {
	  AssociationError: () => AssociationError
	});
	var associationError = __toCommonJS$14(association_error_exports);
	var import_base_error$b = baseError;
	class AssociationError extends import_base_error$b.BaseError {
	  constructor(message, options) {
	    super(message, options);
	    this.name = "SequelizeAssociationError";
	  }
	}

	var __defProp$13 = Object.defineProperty;
	var __getOwnPropDesc$13 = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames$13 = Object.getOwnPropertyNames;
	var __hasOwnProp$13 = Object.prototype.hasOwnProperty;
	var __export$13 = (target, all) => {
	  for (var name in all)
	    __defProp$13(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps$13 = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames$13(from))
	      if (!__hasOwnProp$13.call(to, key) && key !== except)
	        __defProp$13(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc$13(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS$13 = (mod) => __copyProps$13(__defProp$13({}, "__esModule", { value: true }), mod);
	var bulk_record_error_exports = {};
	__export$13(bulk_record_error_exports, {
	  BulkRecordError: () => BulkRecordError
	});
	var bulkRecordError = __toCommonJS$13(bulk_record_error_exports);
	var import_base_error$a = baseError;
	class BulkRecordError extends import_base_error$a.BaseError {
	  errors;
	  record;
	  constructor(error, record, options) {
	    super(error.message, options);
	    this.name = "SequelizeBulkRecordError";
	    this.errors = error;
	    this.record = record;
	  }
	}

	var __defProp$12 = Object.defineProperty;
	var __getOwnPropDesc$12 = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames$12 = Object.getOwnPropertyNames;
	var __hasOwnProp$12 = Object.prototype.hasOwnProperty;
	var __export$12 = (target, all) => {
	  for (var name in all)
	    __defProp$12(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps$12 = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames$12(from))
	      if (!__hasOwnProp$12.call(to, key) && key !== except)
	        __defProp$12(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc$12(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS$12 = (mod) => __copyProps$12(__defProp$12({}, "__esModule", { value: true }), mod);
	var connection_error_exports = {};
	__export$12(connection_error_exports, {
	  ConnectionError: () => ConnectionError
	});
	var connectionError = __toCommonJS$12(connection_error_exports);
	var import_base_error$9 = baseError;
	class ConnectionError extends import_base_error$9.BaseError {
	  constructor(parent) {
	    super(parent ? parent.message : "", { cause: parent });
	    this.name = "SequelizeConnectionError";
	  }
	}

	var __defProp$11 = Object.defineProperty;
	var __getOwnPropDesc$11 = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames$11 = Object.getOwnPropertyNames;
	var __hasOwnProp$11 = Object.prototype.hasOwnProperty;
	var __export$11 = (target, all) => {
	  for (var name in all)
	    __defProp$11(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps$11 = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames$11(from))
	      if (!__hasOwnProp$11.call(to, key) && key !== except)
	        __defProp$11(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc$11(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS$11 = (mod) => __copyProps$11(__defProp$11({}, "__esModule", { value: true }), mod);
	var eager_loading_error_exports = {};
	__export$11(eager_loading_error_exports, {
	  EagerLoadingError: () => EagerLoadingError
	});
	var eagerLoadingError = __toCommonJS$11(eager_loading_error_exports);
	var import_base_error$8 = baseError;
	class EagerLoadingError extends import_base_error$8.BaseError {
	  constructor(message, options) {
	    super(message, options);
	    this.name = "SequelizeEagerLoadingError";
	  }
	}

	var __defProp$10 = Object.defineProperty;
	var __getOwnPropDesc$10 = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames$10 = Object.getOwnPropertyNames;
	var __hasOwnProp$10 = Object.prototype.hasOwnProperty;
	var __export$10 = (target, all) => {
	  for (var name in all)
	    __defProp$10(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps$10 = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames$10(from))
	      if (!__hasOwnProp$10.call(to, key) && key !== except)
	        __defProp$10(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc$10(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS$10 = (mod) => __copyProps$10(__defProp$10({}, "__esModule", { value: true }), mod);
	var empty_result_error_exports = {};
	__export$10(empty_result_error_exports, {
	  EmptyResultError: () => EmptyResultError
	});
	var emptyResultError = __toCommonJS$10(empty_result_error_exports);
	var import_base_error$7 = baseError;
	class EmptyResultError extends import_base_error$7.BaseError {
	  constructor(message, options) {
	    super(message, options);
	    this.name = "SequelizeEmptyResultError";
	  }
	}

	var __defProp$$ = Object.defineProperty;
	var __getOwnPropDesc$$ = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames$$ = Object.getOwnPropertyNames;
	var __hasOwnProp$$ = Object.prototype.hasOwnProperty;
	var __export$$ = (target, all) => {
	  for (var name in all)
	    __defProp$$(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps$$ = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames$$(from))
	      if (!__hasOwnProp$$.call(to, key) && key !== except)
	        __defProp$$(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc$$(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS$$ = (mod) => __copyProps$$(__defProp$$({}, "__esModule", { value: true }), mod);
	var instance_error_exports = {};
	__export$$(instance_error_exports, {
	  InstanceError: () => InstanceError
	});
	var instanceError = __toCommonJS$$(instance_error_exports);
	var import_base_error$6 = baseError;
	class InstanceError extends import_base_error$6.BaseError {
	  constructor(message, options) {
	    super(message, options);
	    this.name = "SequelizeInstanceError";
	  }
	}

	var __defProp$_ = Object.defineProperty;
	var __getOwnPropDesc$_ = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames$_ = Object.getOwnPropertyNames;
	var __hasOwnProp$_ = Object.prototype.hasOwnProperty;
	var __export$_ = (target, all) => {
	  for (var name in all)
	    __defProp$_(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps$_ = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames$_(from))
	      if (!__hasOwnProp$_.call(to, key) && key !== except)
	        __defProp$_(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc$_(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS$_ = (mod) => __copyProps$_(__defProp$_({}, "__esModule", { value: true }), mod);
	var optimistic_lock_error_exports = {};
	__export$_(optimistic_lock_error_exports, {
	  OptimisticLockError: () => OptimisticLockError
	});
	var optimisticLockError = __toCommonJS$_(optimistic_lock_error_exports);
	var import_base_error$5 = baseError;
	class OptimisticLockError extends import_base_error$5.BaseError {
	  modelName;
	  values;
	  where;
	  constructor(options, errorOptions) {
	    const message = (options == null ? void 0 : options.message) || `Attempting to update a stale model instance: ${options == null ? void 0 : options.modelName}`;
	    super(message, errorOptions);
	    this.name = "SequelizeOptimisticLockError";
	    this.modelName = options == null ? void 0 : options.modelName;
	    this.values = options == null ? void 0 : options.values;
	    this.where = options == null ? void 0 : options.where;
	  }
	}

	var __defProp$Z = Object.defineProperty;
	var __getOwnPropDesc$Z = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames$Z = Object.getOwnPropertyNames;
	var __hasOwnProp$Z = Object.prototype.hasOwnProperty;
	var __export$Z = (target, all) => {
	  for (var name in all)
	    __defProp$Z(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps$Z = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames$Z(from))
	      if (!__hasOwnProp$Z.call(to, key) && key !== except)
	        __defProp$Z(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc$Z(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS$Z = (mod) => __copyProps$Z(__defProp$Z({}, "__esModule", { value: true }), mod);
	var query_error_exports = {};
	__export$Z(query_error_exports, {
	  QueryError: () => QueryError
	});
	var queryError = __toCommonJS$Z(query_error_exports);
	var import_base_error$4 = baseError;
	class QueryError extends import_base_error$4.BaseError {
	  constructor(message, options) {
	    super(message, options);
	    this.name = "SequelizeQueryError";
	  }
	}

	var __defProp$Y = Object.defineProperty;
	var __getOwnPropDesc$Y = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames$Y = Object.getOwnPropertyNames;
	var __hasOwnProp$Y = Object.prototype.hasOwnProperty;
	var __export$Y = (target, all) => {
	  for (var name in all)
	    __defProp$Y(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps$Y = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames$Y(from))
	      if (!__hasOwnProp$Y.call(to, key) && key !== except)
	        __defProp$Y(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc$Y(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS$Y = (mod) => __copyProps$Y(__defProp$Y({}, "__esModule", { value: true }), mod);
	var sequelize_scope_error_exports = {};
	__export$Y(sequelize_scope_error_exports, {
	  SequelizeScopeError: () => SequelizeScopeError
	});
	var sequelizeScopeError = __toCommonJS$Y(sequelize_scope_error_exports);
	var import_base_error$3 = baseError;
	class SequelizeScopeError extends import_base_error$3.BaseError {
	  constructor(message, options) {
	    super(message, options);
	    this.name = "SequelizeScopeError";
	  }
	}

	var __defProp$X = Object.defineProperty;
	var __getOwnPropDesc$X = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames$X = Object.getOwnPropertyNames;
	var __hasOwnProp$X = Object.prototype.hasOwnProperty;
	var __export$X = (target, all) => {
	  for (var name in all)
	    __defProp$X(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps$X = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames$X(from))
	      if (!__hasOwnProp$X.call(to, key) && key !== except)
	        __defProp$X(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc$X(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS$X = (mod) => __copyProps$X(__defProp$X({}, "__esModule", { value: true }), mod);
	var validation_error_exports = {};
	__export$X(validation_error_exports, {
	  ValidationError: () => ValidationError,
	  ValidationErrorItem: () => ValidationErrorItem,
	  ValidationErrorItemOrigin: () => ValidationErrorItemOrigin,
	  ValidationErrorItemType: () => ValidationErrorItemType
	});
	var validationError = __toCommonJS$X(validation_error_exports);
	var import_base_error$2 = baseError;
	var ValidationErrorItemType = /* @__PURE__ */ ((ValidationErrorItemType2) => {
	  ValidationErrorItemType2["notNull violation"] = "CORE";
	  ValidationErrorItemType2["unique violation"] = "DB";
	  ValidationErrorItemType2["Validation error"] = "FUNCTION";
	  return ValidationErrorItemType2;
	})(ValidationErrorItemType || {});
	var ValidationErrorItemOrigin = /* @__PURE__ */ ((ValidationErrorItemOrigin2) => {
	  ValidationErrorItemOrigin2["CORE"] = "CORE";
	  ValidationErrorItemOrigin2["DB"] = "DB";
	  ValidationErrorItemOrigin2["FUNCTION"] = "FUNCTION";
	  ValidationErrorItemOrigin2["DATATYPE"] = "DATATYPE";
	  return ValidationErrorItemOrigin2;
	})(ValidationErrorItemOrigin || {});
	class ValidationErrorItem extends Error {
	  /**
	   * @deprecated Will be removed in v7
	   */
	  static TypeStringMap = ValidationErrorItemType;
	  /**
	   * @deprecated Will be removed in v7
	   */
	  static Origins = ValidationErrorItemOrigin;
	  /**
	   * The type/origin of the validation error
	   */
	  type;
	  /**
	   * The field that triggered the validation error
	   */
	  path;
	  /**
	   * The value that generated the error
	   */
	  value;
	  origin;
	  /**
	   * The DAO instance that caused the validation error
	   */
	  instance;
	  /**
	   * A validation "key", used for identification
	   */
	  validatorKey;
	  /**
	   * Property name of the BUILT-IN validator function that caused the validation error (e.g. "in" or "len"), if applicable
	   */
	  validatorName;
	  /**
	   * Parameters used with the BUILT-IN validator function, if applicable
	   */
	  validatorArgs;
	  static throwDataTypeValidationError(message) {
	    throw new ValidationErrorItem(message, "Validation error", "DATATYPE" /* DATATYPE */);
	  }
	  /**
	   * Creates a new ValidationError item. Instances of this class are included in the `ValidationError.errors` property.
	   *
	   * @param message An error message
	   * @param type The type/origin of the validation error
	   * @param path The field that triggered the validation error
	   * @param value The value that generated the error
	   * @param instance the DAO instance that caused the validation error
	   * @param validatorKey a validation "key", used for identification
	   * @param fnName property name of the BUILT-IN validator function that caused the validation error (e.g. "in" or "len"), if applicable
	   * @param fnArgs parameters used with the BUILT-IN validator function, if applicable
	   */
	  constructor(message, type, path, value, instance, validatorKey, fnName, fnArgs) {
	    super(message);
	    this.type = null;
	    this.path = path || null;
	    this.value = value ?? null;
	    this.origin = null;
	    this.instance = instance || null;
	    this.validatorKey = validatorKey || null;
	    this.validatorName = fnName || null;
	    this.validatorArgs = fnArgs || [];
	    if (type) {
	      if (this.isValidationErrorItemOrigin(type)) {
	        this.origin = type;
	      } else {
	        const realType = ValidationErrorItemType[type];
	        if (realType && ValidationErrorItemOrigin[realType]) {
	          this.origin = realType;
	          this.type = type;
	        }
	      }
	    }
	  }
	  isValidationErrorItemOrigin(origin) {
	    return ValidationErrorItemOrigin[origin] !== void 0;
	  }
	  /**
	   * return a lowercase, trimmed string "key" that identifies the validator.
	   *
	   * Note: the string will be empty if the instance has neither a valid `validatorKey` property nor a valid `validatorName` property
	   *
	   * @param useTypeAsNS controls whether the returned value is "namespace",
	   *                    this parameter is ignored if the validator's `type` is not one of ValidationErrorItem.Origins
	   * @param NSSeparator a separator string for concatenating the namespace, must be not be empty,
	   *                    defaults to "." (fullstop). only used and validated if useTypeAsNS is TRUE.
	   * @throws {Error}    thrown if NSSeparator is found to be invalid.
	   */
	  getValidatorKey(useTypeAsNS, NSSeparator) {
	    const useTANS = useTypeAsNS === void 0 || Boolean(useTypeAsNS);
	    const NSSep = NSSeparator === void 0 ? "." : NSSeparator;
	    const type = this.origin;
	    const key = this.validatorKey || this.validatorName;
	    const useNS = useTANS && type && ValidationErrorItemOrigin[type];
	    if (useNS && (typeof NSSep !== "string" || NSSep.length === 0)) {
	      throw new Error("Invalid namespace separator given, must be a non-empty string");
	    }
	    if (!(typeof key === "string" && key.length > 0)) {
	      return "";
	    }
	    return (useNS ? [this.origin, key].join(NSSep) : key).toLowerCase().trim();
	  }
	}
	class ValidationError extends import_base_error$2.BaseError {
	  /** Array of ValidationErrorItem objects describing the validation errors */
	  errors;
	  constructor(message, errors = [], options = {}) {
	    super(message, options);
	    this.name = "SequelizeValidationError";
	    this.errors = errors;
	    if (message) {
	      this.message = message;
	    } else if (this.errors.length > 0 && this.errors[0].message) {
	      this.message = this.errors.map(
	        (err) => `${err.type || err.origin}: ${err.message}`
	      ).join(",\n");
	    }
	  }
	  /**
	   * Gets all validation error items for the path / field specified.
	   *
	   * @param path The path to be checked for error items
	   *
	   * @returns Validation error items for the specified path
	   */
	  get(path) {
	    const out = [];
	    for (const error of this.errors) {
	      if (error.path === path) {
	        out.push(error);
	      }
	    }
	    return out;
	  }
	}

	var __defProp$W = Object.defineProperty;
	var __getOwnPropDesc$W = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames$W = Object.getOwnPropertyNames;
	var __hasOwnProp$W = Object.prototype.hasOwnProperty;
	var __export$W = (target, all) => {
	  for (var name in all)
	    __defProp$W(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps$W = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames$W(from))
	      if (!__hasOwnProp$W.call(to, key) && key !== except)
	        __defProp$W(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc$W(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS$W = (mod) => __copyProps$W(__defProp$W({}, "__esModule", { value: true }), mod);
	var access_denied_error_exports = {};
	__export$W(access_denied_error_exports, {
	  AccessDeniedError: () => AccessDeniedError
	});
	var accessDeniedError = __toCommonJS$W(access_denied_error_exports);
	var import_connection_error$8 = connectionError;
	class AccessDeniedError extends import_connection_error$8.ConnectionError {
	  constructor(cause) {
	    super(cause);
	    this.name = "SequelizeAccessDeniedError";
	  }
	}

	var __defProp$V = Object.defineProperty;
	var __getOwnPropDesc$V = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames$V = Object.getOwnPropertyNames;
	var __hasOwnProp$V = Object.prototype.hasOwnProperty;
	var __export$V = (target, all) => {
	  for (var name in all)
	    __defProp$V(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps$V = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames$V(from))
	      if (!__hasOwnProp$V.call(to, key) && key !== except)
	        __defProp$V(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc$V(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS$V = (mod) => __copyProps$V(__defProp$V({}, "__esModule", { value: true }), mod);
	var connection_acquire_timeout_error_exports = {};
	__export$V(connection_acquire_timeout_error_exports, {
	  ConnectionAcquireTimeoutError: () => ConnectionAcquireTimeoutError
	});
	var connectionAcquireTimeoutError = __toCommonJS$V(connection_acquire_timeout_error_exports);
	var import_connection_error$7 = connectionError;
	class ConnectionAcquireTimeoutError extends import_connection_error$7.ConnectionError {
	  constructor(cause) {
	    super(cause);
	    this.name = "SequelizeConnectionAcquireTimeoutError";
	  }
	}

	var __defProp$U = Object.defineProperty;
	var __getOwnPropDesc$U = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames$U = Object.getOwnPropertyNames;
	var __hasOwnProp$U = Object.prototype.hasOwnProperty;
	var __export$U = (target, all) => {
	  for (var name in all)
	    __defProp$U(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps$U = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames$U(from))
	      if (!__hasOwnProp$U.call(to, key) && key !== except)
	        __defProp$U(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc$U(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS$U = (mod) => __copyProps$U(__defProp$U({}, "__esModule", { value: true }), mod);
	var connection_refused_error_exports = {};
	__export$U(connection_refused_error_exports, {
	  ConnectionRefusedError: () => ConnectionRefusedError
	});
	var connectionRefusedError = __toCommonJS$U(connection_refused_error_exports);
	var import_connection_error$6 = connectionError;
	class ConnectionRefusedError extends import_connection_error$6.ConnectionError {
	  constructor(cause) {
	    super(cause);
	    this.name = "SequelizeConnectionRefusedError";
	  }
	}

	var __defProp$T = Object.defineProperty;
	var __getOwnPropDesc$T = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames$T = Object.getOwnPropertyNames;
	var __hasOwnProp$T = Object.prototype.hasOwnProperty;
	var __export$T = (target, all) => {
	  for (var name in all)
	    __defProp$T(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps$T = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames$T(from))
	      if (!__hasOwnProp$T.call(to, key) && key !== except)
	        __defProp$T(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc$T(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS$T = (mod) => __copyProps$T(__defProp$T({}, "__esModule", { value: true }), mod);
	var connection_timed_out_error_exports = {};
	__export$T(connection_timed_out_error_exports, {
	  ConnectionTimedOutError: () => ConnectionTimedOutError
	});
	var connectionTimedOutError = __toCommonJS$T(connection_timed_out_error_exports);
	var import_connection_error$5 = connectionError;
	class ConnectionTimedOutError extends import_connection_error$5.ConnectionError {
	  constructor(cause) {
	    super(cause);
	    this.name = "SequelizeConnectionTimedOutError";
	  }
	}

	var __defProp$S = Object.defineProperty;
	var __getOwnPropDesc$S = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames$S = Object.getOwnPropertyNames;
	var __hasOwnProp$S = Object.prototype.hasOwnProperty;
	var __export$S = (target, all) => {
	  for (var name in all)
	    __defProp$S(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps$S = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames$S(from))
	      if (!__hasOwnProp$S.call(to, key) && key !== except)
	        __defProp$S(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc$S(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS$S = (mod) => __copyProps$S(__defProp$S({}, "__esModule", { value: true }), mod);
	var host_not_found_error_exports = {};
	__export$S(host_not_found_error_exports, {
	  HostNotFoundError: () => HostNotFoundError
	});
	var hostNotFoundError = __toCommonJS$S(host_not_found_error_exports);
	var import_connection_error$4 = connectionError;
	class HostNotFoundError extends import_connection_error$4.ConnectionError {
	  constructor(cause) {
	    super(cause);
	    this.name = "SequelizeHostNotFoundError";
	  }
	}

	var __defProp$R = Object.defineProperty;
	var __getOwnPropDesc$R = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames$R = Object.getOwnPropertyNames;
	var __hasOwnProp$R = Object.prototype.hasOwnProperty;
	var __export$R = (target, all) => {
	  for (var name in all)
	    __defProp$R(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps$R = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames$R(from))
	      if (!__hasOwnProp$R.call(to, key) && key !== except)
	        __defProp$R(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc$R(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS$R = (mod) => __copyProps$R(__defProp$R({}, "__esModule", { value: true }), mod);
	var host_not_reachable_error_exports = {};
	__export$R(host_not_reachable_error_exports, {
	  HostNotReachableError: () => HostNotReachableError
	});
	var hostNotReachableError = __toCommonJS$R(host_not_reachable_error_exports);
	var import_connection_error$3 = connectionError;
	class HostNotReachableError extends import_connection_error$3.ConnectionError {
	  constructor(cause) {
	    super(cause);
	    this.name = "SequelizeHostNotReachableError";
	  }
	}

	var __defProp$Q = Object.defineProperty;
	var __getOwnPropDesc$Q = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames$Q = Object.getOwnPropertyNames;
	var __hasOwnProp$Q = Object.prototype.hasOwnProperty;
	var __export$Q = (target, all) => {
	  for (var name in all)
	    __defProp$Q(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps$Q = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames$Q(from))
	      if (!__hasOwnProp$Q.call(to, key) && key !== except)
	        __defProp$Q(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc$Q(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS$Q = (mod) => __copyProps$Q(__defProp$Q({}, "__esModule", { value: true }), mod);
	var invalid_connection_error_exports = {};
	__export$Q(invalid_connection_error_exports, {
	  InvalidConnectionError: () => InvalidConnectionError
	});
	var invalidConnectionError = __toCommonJS$Q(invalid_connection_error_exports);
	var import_connection_error$2 = connectionError;
	class InvalidConnectionError extends import_connection_error$2.ConnectionError {
	  constructor(cause) {
	    super(cause);
	    this.name = "SequelizeInvalidConnectionError";
	  }
	}

	var __defProp$P = Object.defineProperty;
	var __getOwnPropDesc$P = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames$P = Object.getOwnPropertyNames;
	var __hasOwnProp$P = Object.prototype.hasOwnProperty;
	var __export$P = (target, all) => {
	  for (var name in all)
	    __defProp$P(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps$P = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames$P(from))
	      if (!__hasOwnProp$P.call(to, key) && key !== except)
	        __defProp$P(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc$P(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS$P = (mod) => __copyProps$P(__defProp$P({}, "__esModule", { value: true }), mod);
	var exclusion_constraint_error_exports = {};
	__export$P(exclusion_constraint_error_exports, {
	  ExclusionConstraintError: () => ExclusionConstraintError
	});
	var exclusionConstraintError = __toCommonJS$P(exclusion_constraint_error_exports);
	var import_deprecations$6 = deprecations;
	var import_database_error$4 = databaseError;
	class ExclusionConstraintError extends import_database_error$4.DatabaseError {
	  constraint;
	  fields;
	  table;
	  constructor(options = {}) {
	    if ("parent" in options) {
	      (0, import_deprecations$6.useErrorCause)();
	    }
	    const parent = options.cause ?? options.parent ?? { sql: "", name: "", message: "" };
	    super(parent);
	    this.message = options.message || parent.message;
	    this.name = "SequelizeExclusionConstraintError";
	    this.constraint = options.constraint;
	    this.fields = options.fields;
	    this.table = options.table;
	  }
	}

	var __defProp$O = Object.defineProperty;
	var __getOwnPropDesc$O = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames$O = Object.getOwnPropertyNames;
	var __hasOwnProp$O = Object.prototype.hasOwnProperty;
	var __export$O = (target, all) => {
	  for (var name in all)
	    __defProp$O(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps$O = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames$O(from))
	      if (!__hasOwnProp$O.call(to, key) && key !== except)
	        __defProp$O(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc$O(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS$O = (mod) => __copyProps$O(__defProp$O({}, "__esModule", { value: true }), mod);
	var foreign_key_constraint_error_exports = {};
	__export$O(foreign_key_constraint_error_exports, {
	  ForeignKeyConstraintError: () => ForeignKeyConstraintError,
	  RelationshipType: () => RelationshipType
	});
	var foreignKeyConstraintError = __toCommonJS$O(foreign_key_constraint_error_exports);
	var import_deprecations$5 = deprecations;
	var import_database_error$3 = databaseError;
	var RelationshipType = /* @__PURE__ */ ((RelationshipType2) => {
	  RelationshipType2["parent"] = "parent";
	  RelationshipType2["child"] = "child";
	  return RelationshipType2;
	})(RelationshipType || {});
	class ForeignKeyConstraintError extends import_database_error$3.DatabaseError {
	  table;
	  fields;
	  value;
	  index;
	  reltype;
	  constructor(options = {}) {
	    if ("parent" in options) {
	      (0, import_deprecations$5.useErrorCause)();
	    }
	    const parent = options.cause ?? options.parent ?? { sql: "", name: "", message: "" };
	    super(parent);
	    this.name = "SequelizeForeignKeyConstraintError";
	    this.fields = options.fields;
	    this.table = options.table;
	    this.value = options.value;
	    this.index = options.index;
	    this.reltype = options.reltype;
	  }
	}

	var __defProp$N = Object.defineProperty;
	var __getOwnPropDesc$N = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames$N = Object.getOwnPropertyNames;
	var __hasOwnProp$N = Object.prototype.hasOwnProperty;
	var __export$N = (target, all) => {
	  for (var name in all)
	    __defProp$N(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps$N = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames$N(from))
	      if (!__hasOwnProp$N.call(to, key) && key !== except)
	        __defProp$N(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc$N(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS$N = (mod) => __copyProps$N(__defProp$N({}, "__esModule", { value: true }), mod);
	var timeout_error_exports = {};
	__export$N(timeout_error_exports, {
	  TimeoutError: () => TimeoutError$1
	});
	var timeoutError = __toCommonJS$N(timeout_error_exports);
	var import_database_error$2 = databaseError;
	let TimeoutError$1 = class TimeoutError extends import_database_error$2.DatabaseError {
	  constructor(parent) {
	    super(parent);
	    this.name = "SequelizeTimeoutError";
	  }
	};

	var __defProp$M = Object.defineProperty;
	var __getOwnPropDesc$M = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames$M = Object.getOwnPropertyNames;
	var __hasOwnProp$M = Object.prototype.hasOwnProperty;
	var __export$M = (target, all) => {
	  for (var name in all)
	    __defProp$M(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps$M = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames$M(from))
	      if (!__hasOwnProp$M.call(to, key) && key !== except)
	        __defProp$M(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc$M(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS$M = (mod) => __copyProps$M(__defProp$M({}, "__esModule", { value: true }), mod);
	var unknown_constraint_error_exports = {};
	__export$M(unknown_constraint_error_exports, {
	  UnknownConstraintError: () => UnknownConstraintError
	});
	var unknownConstraintError = __toCommonJS$M(unknown_constraint_error_exports);
	var import_deprecations$4 = deprecations;
	var import_database_error$1 = databaseError;
	class UnknownConstraintError extends import_database_error$1.DatabaseError {
	  constraint;
	  fields;
	  table;
	  constructor(options = {}) {
	    if ("parent" in options) {
	      (0, import_deprecations$4.useErrorCause)();
	    }
	    const parent = options.cause ?? options.parent ?? { sql: "", name: "", message: "" };
	    super(parent);
	    this.name = "SequelizeUnknownConstraintError";
	    this.constraint = options.constraint;
	    this.fields = options.fields;
	    this.table = options.table;
	  }
	}

	var __defProp$L = Object.defineProperty;
	var __getOwnPropDesc$L = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames$L = Object.getOwnPropertyNames;
	var __hasOwnProp$L = Object.prototype.hasOwnProperty;
	var __export$L = (target, all) => {
	  for (var name in all)
	    __defProp$L(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps$L = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames$L(from))
	      if (!__hasOwnProp$L.call(to, key) && key !== except)
	        __defProp$L(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc$L(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS$L = (mod) => __copyProps$L(__defProp$L({}, "__esModule", { value: true }), mod);
	var unique_constraint_error_exports = {};
	__export$L(unique_constraint_error_exports, {
	  UniqueConstraintError: () => UniqueConstraintError
	});
	var uniqueConstraintError = __toCommonJS$L(unique_constraint_error_exports);
	var import_deprecations$3 = deprecations;
	var import_validation_error$1 = validationError;
	class UniqueConstraintError extends import_validation_error$1.ValidationError {
	  fields;
	  sql;
	  constructor(options = {}) {
	    if ("parent" in options) {
	      (0, import_deprecations$3.useErrorCause)();
	    }
	    const parent = options.cause ?? options.parent ?? { sql: "", name: "", message: "" };
	    const message = options.message || parent.message || "Validation Error";
	    const errors = options.errors ?? [];
	    super(message, errors, { cause: parent });
	    this.name = "SequelizeUniqueConstraintError";
	    this.fields = options.fields ?? {};
	    this.sql = parent.sql;
	  }
	}

	var __defProp$K = Object.defineProperty;
	var __getOwnPropDesc$K = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames$K = Object.getOwnPropertyNames;
	var __hasOwnProp$K = Object.prototype.hasOwnProperty;
	var __export$K = (target, all) => {
	  for (var name in all)
	    __defProp$K(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps$K = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames$K(from))
	      if (!__hasOwnProp$K.call(to, key) && key !== except)
	        __defProp$K(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc$K(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS$K = (mod) => __copyProps$K(__defProp$K({}, "__esModule", { value: true }), mod);
	var async_queue_exports = {};
	__export$K(async_queue_exports, {
	  AsyncQueue: () => AsyncQueue,
	  AsyncQueueError: () => AsyncQueueError
	});
	var asyncQueue = __toCommonJS$K(async_queue_exports);
	var import_base_error$1 = baseError;
	var import_connection_error$1 = connectionError;
	class AsyncQueueError extends import_base_error$1.BaseError {
	  constructor(message) {
	    super(message);
	    this.name = "SequelizeAsyncQueueError";
	  }
	}
	class AsyncQueue {
	  previous;
	  closed;
	  rejectCurrent;
	  constructor() {
	    this.previous = Promise.resolve();
	    this.closed = false;
	    this.rejectCurrent = () => {
	    };
	  }
	  close() {
	    this.closed = true;
	    this.rejectCurrent(
	      new import_connection_error$1.ConnectionError(
	        new AsyncQueueError(
	          "the connection was closed before this query could finish executing"
	        )
	      )
	    );
	  }
	  async enqueue(asyncFunction) {
	    return new Promise((resolve, reject) => {
	      this.previous = this.previous.then(async () => {
	        this.rejectCurrent = reject;
	        if (this.closed) {
	          return reject(
	            new import_connection_error$1.ConnectionError(
	              new AsyncQueueError(
	                "the connection was closed before this query could be executed"
	              )
	            )
	          );
	        }
	        return asyncFunction().then(resolve, reject);
	      });
	    });
	  }
	}

	var __defProp$J = Object.defineProperty;
	var __getOwnPropDesc$J = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames$J = Object.getOwnPropertyNames;
	var __hasOwnProp$J = Object.prototype.hasOwnProperty;
	var __export$J = (target, all) => {
	  for (var name in all)
	    __defProp$J(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps$J = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames$J(from))
	      if (!__hasOwnProp$J.call(to, key) && key !== except)
	        __defProp$J(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc$J(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS$J = (mod) => __copyProps$J(__defProp$J({}, "__esModule", { value: true }), mod);
	var errors_exports = {};
	__export$J(errors_exports, {
	  AccessDeniedError: () => import_access_denied_error.AccessDeniedError,
	  AggregateError: () => import_aggregate_error.AggregateError,
	  AssociationError: () => import_association_error.AssociationError,
	  AsyncQueueError: () => import_async_queue.AsyncQueueError,
	  BaseError: () => import_base_error.BaseError,
	  BulkRecordError: () => import_bulk_record_error.BulkRecordError,
	  ConnectionAcquireTimeoutError: () => import_connection_acquire_timeout_error.ConnectionAcquireTimeoutError,
	  ConnectionError: () => import_connection_error.ConnectionError,
	  ConnectionRefusedError: () => import_connection_refused_error.ConnectionRefusedError,
	  ConnectionTimedOutError: () => import_connection_timed_out_error.ConnectionTimedOutError,
	  DatabaseError: () => import_database_error.DatabaseError,
	  EagerLoadingError: () => import_eager_loading_error.EagerLoadingError,
	  EmptyResultError: () => import_empty_result_error.EmptyResultError,
	  ExclusionConstraintError: () => import_exclusion_constraint_error.ExclusionConstraintError,
	  ForeignKeyConstraintError: () => import_foreign_key_constraint_error.ForeignKeyConstraintError,
	  HostNotFoundError: () => import_host_not_found_error.HostNotFoundError,
	  HostNotReachableError: () => import_host_not_reachable_error.HostNotReachableError,
	  InstanceError: () => import_instance_error.InstanceError,
	  InvalidConnectionError: () => import_invalid_connection_error.InvalidConnectionError,
	  OptimisticLockError: () => import_optimistic_lock_error.OptimisticLockError,
	  QueryError: () => import_query_error.QueryError,
	  SequelizeScopeError: () => import_sequelize_scope_error.SequelizeScopeError,
	  TimeoutError: () => import_timeout_error.TimeoutError,
	  UniqueConstraintError: () => import_unique_constraint_error.UniqueConstraintError,
	  UnknownConstraintError: () => import_unknown_constraint_error.UnknownConstraintError,
	  ValidationError: () => import_validation_error.ValidationError,
	  ValidationErrorItem: () => import_validation_error.ValidationErrorItem,
	  ValidationErrorItemOrigin: () => import_validation_error.ValidationErrorItemOrigin,
	  ValidationErrorItemType: () => import_validation_error.ValidationErrorItemType
	});
	var errors = __toCommonJS$J(errors_exports);
	var import_base_error = baseError;
	var import_database_error = databaseError;
	var import_aggregate_error = aggregateError;
	var import_association_error = associationError;
	var import_bulk_record_error = bulkRecordError;
	var import_connection_error = connectionError;
	var import_eager_loading_error = eagerLoadingError;
	var import_empty_result_error = emptyResultError;
	var import_instance_error = instanceError;
	var import_optimistic_lock_error = optimisticLockError;
	var import_query_error = queryError;
	var import_sequelize_scope_error = sequelizeScopeError;
	var import_validation_error = validationError;
	var import_access_denied_error = accessDeniedError;
	var import_connection_acquire_timeout_error = connectionAcquireTimeoutError;
	var import_connection_refused_error = connectionRefusedError;
	var import_connection_timed_out_error = connectionTimedOutError;
	var import_host_not_found_error = hostNotFoundError;
	var import_host_not_reachable_error = hostNotReachableError;
	var import_invalid_connection_error = invalidConnectionError;
	var import_exclusion_constraint_error = exclusionConstraintError;
	var import_foreign_key_constraint_error = foreignKeyConstraintError;
	var import_timeout_error = timeoutError;
	var import_unknown_constraint_error = unknownConstraintError;
	var import_unique_constraint_error = uniqueConstraintError;
	var import_async_queue = asyncQueue;

	var dayjs_min = {exports: {}};

	(function (module, exports) {
		!function(t,e){module.exports=e();}(commonjsGlobal,(function(){var t=1e3,e=6e4,n=36e5,r="millisecond",i="second",s="minute",u="hour",a="day",o="week",f="month",h="quarter",c="year",d="date",l="Invalid Date",$=/^(\d{4})[-/]?(\d{1,2})?[-/]?(\d{0,2})[Tt\s]*(\d{1,2})?:?(\d{1,2})?:?(\d{1,2})?[.:]?(\d+)?$/,y=/\[([^\]]+)]|Y{1,4}|M{1,4}|D{1,2}|d{1,4}|H{1,2}|h{1,2}|a|A|m{1,2}|s{1,2}|Z{1,2}|SSS/g,M={name:"en",weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),ordinal:function(t){var e=["th","st","nd","rd"],n=t%100;return "["+t+(e[(n-20)%10]||e[n]||e[0])+"]"}},m=function(t,e,n){var r=String(t);return !r||r.length>=e?t:""+Array(e+1-r.length).join(n)+t},v={s:m,z:function(t){var e=-t.utcOffset(),n=Math.abs(e),r=Math.floor(n/60),i=n%60;return (e<=0?"+":"-")+m(r,2,"0")+":"+m(i,2,"0")},m:function t(e,n){if(e.date()<n.date())return -t(n,e);var r=12*(n.year()-e.year())+(n.month()-e.month()),i=e.clone().add(r,f),s=n-i<0,u=e.clone().add(r+(s?-1:1),f);return +(-(r+(n-i)/(s?i-u:u-i))||0)},a:function(t){return t<0?Math.ceil(t)||0:Math.floor(t)},p:function(t){return {M:f,y:c,w:o,d:a,D:d,h:u,m:s,s:i,ms:r,Q:h}[t]||String(t||"").toLowerCase().replace(/s$/,"")},u:function(t){return void 0===t}},g="en",D={};D[g]=M;var p=function(t){return t instanceof _},S=function t(e,n,r){var i;if(!e)return g;if("string"==typeof e){var s=e.toLowerCase();D[s]&&(i=s),n&&(D[s]=n,i=s);var u=e.split("-");if(!i&&u.length>1)return t(u[0])}else {var a=e.name;D[a]=e,i=a;}return !r&&i&&(g=i),i||!r&&g},w=function(t,e){if(p(t))return t.clone();var n="object"==typeof e?e:{};return n.date=t,n.args=arguments,new _(n)},O=v;O.l=S,O.i=p,O.w=function(t,e){return w(t,{locale:e.$L,utc:e.$u,x:e.$x,$offset:e.$offset})};var _=function(){function M(t){this.$L=S(t.locale,null,!0),this.parse(t);}var m=M.prototype;return m.parse=function(t){this.$d=function(t){var e=t.date,n=t.utc;if(null===e)return new Date(NaN);if(O.u(e))return new Date;if(e instanceof Date)return new Date(e);if("string"==typeof e&&!/Z$/i.test(e)){var r=e.match($);if(r){var i=r[2]-1||0,s=(r[7]||"0").substring(0,3);return n?new Date(Date.UTC(r[1],i,r[3]||1,r[4]||0,r[5]||0,r[6]||0,s)):new Date(r[1],i,r[3]||1,r[4]||0,r[5]||0,r[6]||0,s)}}return new Date(e)}(t),this.$x=t.x||{},this.init();},m.init=function(){var t=this.$d;this.$y=t.getFullYear(),this.$M=t.getMonth(),this.$D=t.getDate(),this.$W=t.getDay(),this.$H=t.getHours(),this.$m=t.getMinutes(),this.$s=t.getSeconds(),this.$ms=t.getMilliseconds();},m.$utils=function(){return O},m.isValid=function(){return !(this.$d.toString()===l)},m.isSame=function(t,e){var n=w(t);return this.startOf(e)<=n&&n<=this.endOf(e)},m.isAfter=function(t,e){return w(t)<this.startOf(e)},m.isBefore=function(t,e){return this.endOf(e)<w(t)},m.$g=function(t,e,n){return O.u(t)?this[e]:this.set(n,t)},m.unix=function(){return Math.floor(this.valueOf()/1e3)},m.valueOf=function(){return this.$d.getTime()},m.startOf=function(t,e){var n=this,r=!!O.u(e)||e,h=O.p(t),l=function(t,e){var i=O.w(n.$u?Date.UTC(n.$y,e,t):new Date(n.$y,e,t),n);return r?i:i.endOf(a)},$=function(t,e){return O.w(n.toDate()[t].apply(n.toDate("s"),(r?[0,0,0,0]:[23,59,59,999]).slice(e)),n)},y=this.$W,M=this.$M,m=this.$D,v="set"+(this.$u?"UTC":"");switch(h){case c:return r?l(1,0):l(31,11);case f:return r?l(1,M):l(0,M+1);case o:var g=this.$locale().weekStart||0,D=(y<g?y+7:y)-g;return l(r?m-D:m+(6-D),M);case a:case d:return $(v+"Hours",0);case u:return $(v+"Minutes",1);case s:return $(v+"Seconds",2);case i:return $(v+"Milliseconds",3);default:return this.clone()}},m.endOf=function(t){return this.startOf(t,!1)},m.$set=function(t,e){var n,o=O.p(t),h="set"+(this.$u?"UTC":""),l=(n={},n[a]=h+"Date",n[d]=h+"Date",n[f]=h+"Month",n[c]=h+"FullYear",n[u]=h+"Hours",n[s]=h+"Minutes",n[i]=h+"Seconds",n[r]=h+"Milliseconds",n)[o],$=o===a?this.$D+(e-this.$W):e;if(o===f||o===c){var y=this.clone().set(d,1);y.$d[l]($),y.init(),this.$d=y.set(d,Math.min(this.$D,y.daysInMonth())).$d;}else l&&this.$d[l]($);return this.init(),this},m.set=function(t,e){return this.clone().$set(t,e)},m.get=function(t){return this[O.p(t)]()},m.add=function(r,h){var d,l=this;r=Number(r);var $=O.p(h),y=function(t){var e=w(l);return O.w(e.date(e.date()+Math.round(t*r)),l)};if($===f)return this.set(f,this.$M+r);if($===c)return this.set(c,this.$y+r);if($===a)return y(1);if($===o)return y(7);var M=(d={},d[s]=e,d[u]=n,d[i]=t,d)[$]||1,m=this.$d.getTime()+r*M;return O.w(m,this)},m.subtract=function(t,e){return this.add(-1*t,e)},m.format=function(t){var e=this,n=this.$locale();if(!this.isValid())return n.invalidDate||l;var r=t||"YYYY-MM-DDTHH:mm:ssZ",i=O.z(this),s=this.$H,u=this.$m,a=this.$M,o=n.weekdays,f=n.months,h=function(t,n,i,s){return t&&(t[n]||t(e,r))||i[n].slice(0,s)},c=function(t){return O.s(s%12||12,t,"0")},d=n.meridiem||function(t,e,n){var r=t<12?"AM":"PM";return n?r.toLowerCase():r},$={YY:String(this.$y).slice(-2),YYYY:O.s(this.$y,4,"0"),M:a+1,MM:O.s(a+1,2,"0"),MMM:h(n.monthsShort,a,f,3),MMMM:h(f,a),D:this.$D,DD:O.s(this.$D,2,"0"),d:String(this.$W),dd:h(n.weekdaysMin,this.$W,o,2),ddd:h(n.weekdaysShort,this.$W,o,3),dddd:o[this.$W],H:String(s),HH:O.s(s,2,"0"),h:c(1),hh:c(2),a:d(s,u,!0),A:d(s,u,!1),m:String(u),mm:O.s(u,2,"0"),s:String(this.$s),ss:O.s(this.$s,2,"0"),SSS:O.s(this.$ms,3,"0"),Z:i};return r.replace(y,(function(t,e){return e||$[t]||i.replace(":","")}))},m.utcOffset=function(){return 15*-Math.round(this.$d.getTimezoneOffset()/15)},m.diff=function(r,d,l){var $,y=O.p(d),M=w(r),m=(M.utcOffset()-this.utcOffset())*e,v=this-M,g=O.m(this,M);return g=($={},$[c]=g/12,$[f]=g,$[h]=g/3,$[o]=(v-m)/6048e5,$[a]=(v-m)/864e5,$[u]=v/n,$[s]=v/e,$[i]=v/t,$)[y]||v,l?g:O.a(g)},m.daysInMonth=function(){return this.endOf(f).$D},m.$locale=function(){return D[this.$L]},m.locale=function(t,e){if(!t)return this.$L;var n=this.clone(),r=S(t,e,!0);return r&&(n.$L=r),n},m.clone=function(){return O.w(this.$d,this)},m.toDate=function(){return new Date(this.valueOf())},m.toJSON=function(){return this.isValid()?this.toISOString():null},m.toISOString=function(){return this.$d.toISOString()},m.toString=function(){return this.$d.toUTCString()},M}(),T=_.prototype;return w.prototype=T,[["$ms",r],["$s",i],["$m",s],["$H",u],["$W",a],["$M",f],["$y",c],["$D",d]].forEach((function(t){T[t[1]]=function(e){return this.$g(e,t[0],t[1])};})),w.extend=function(t,e){return t.$i||(t(e,_,w),t.$i=!0),w},w.locale=S,w.isDayjs=p,w.unix=function(t){return w(1e3*t)},w.en=D[g],w.Ls=D,w.p={},w})); 
	} (dayjs_min));

	var dayjs_minExports = dayjs_min.exports;

	/**
	 * This method returns the first argument it receives.
	 *
	 * @static
	 * @since 0.1.0
	 * @memberOf _
	 * @category Util
	 * @param {*} value Any value.
	 * @returns {*} Returns `value`.
	 * @example
	 *
	 * var object = { 'a': 1 };
	 *
	 * console.log(_.identity(object) === object);
	 * // => true
	 */

	function identity$4(value) {
	  return value;
	}

	var identity_1 = identity$4;

	/**
	 * Removes all key-value entries from the list cache.
	 *
	 * @private
	 * @name clear
	 * @memberOf ListCache
	 */

	var _listCacheClear;
	var hasRequired_listCacheClear;

	function require_listCacheClear () {
		if (hasRequired_listCacheClear) return _listCacheClear;
		hasRequired_listCacheClear = 1;
		function listCacheClear() {
		  this.__data__ = [];
		  this.size = 0;
		}

		_listCacheClear = listCacheClear;
		return _listCacheClear;
	}

	/**
	 * Performs a
	 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	 * comparison between two values to determine if they are equivalent.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to compare.
	 * @param {*} other The other value to compare.
	 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	 * @example
	 *
	 * var object = { 'a': 1 };
	 * var other = { 'a': 1 };
	 *
	 * _.eq(object, object);
	 * // => true
	 *
	 * _.eq(object, other);
	 * // => false
	 *
	 * _.eq('a', 'a');
	 * // => true
	 *
	 * _.eq('a', Object('a'));
	 * // => false
	 *
	 * _.eq(NaN, NaN);
	 * // => true
	 */

	var eq_1$1;
	var hasRequiredEq$1;

	function requireEq$1 () {
		if (hasRequiredEq$1) return eq_1$1;
		hasRequiredEq$1 = 1;
		function eq(value, other) {
		  return value === other || (value !== value && other !== other);
		}

		eq_1$1 = eq;
		return eq_1$1;
	}

	var _assocIndexOf;
	var hasRequired_assocIndexOf;

	function require_assocIndexOf () {
		if (hasRequired_assocIndexOf) return _assocIndexOf;
		hasRequired_assocIndexOf = 1;
		var eq = requireEq$1();

		/**
		 * Gets the index at which the `key` is found in `array` of key-value pairs.
		 *
		 * @private
		 * @param {Array} array The array to inspect.
		 * @param {*} key The key to search for.
		 * @returns {number} Returns the index of the matched value, else `-1`.
		 */
		function assocIndexOf(array, key) {
		  var length = array.length;
		  while (length--) {
		    if (eq(array[length][0], key)) {
		      return length;
		    }
		  }
		  return -1;
		}

		_assocIndexOf = assocIndexOf;
		return _assocIndexOf;
	}

	var _listCacheDelete;
	var hasRequired_listCacheDelete;

	function require_listCacheDelete () {
		if (hasRequired_listCacheDelete) return _listCacheDelete;
		hasRequired_listCacheDelete = 1;
		var assocIndexOf = require_assocIndexOf();

		/** Used for built-in method references. */
		var arrayProto = Array.prototype;

		/** Built-in value references. */
		var splice = arrayProto.splice;

		/**
		 * Removes `key` and its value from the list cache.
		 *
		 * @private
		 * @name delete
		 * @memberOf ListCache
		 * @param {string} key The key of the value to remove.
		 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
		 */
		function listCacheDelete(key) {
		  var data = this.__data__,
		      index = assocIndexOf(data, key);

		  if (index < 0) {
		    return false;
		  }
		  var lastIndex = data.length - 1;
		  if (index == lastIndex) {
		    data.pop();
		  } else {
		    splice.call(data, index, 1);
		  }
		  --this.size;
		  return true;
		}

		_listCacheDelete = listCacheDelete;
		return _listCacheDelete;
	}

	var _listCacheGet;
	var hasRequired_listCacheGet;

	function require_listCacheGet () {
		if (hasRequired_listCacheGet) return _listCacheGet;
		hasRequired_listCacheGet = 1;
		var assocIndexOf = require_assocIndexOf();

		/**
		 * Gets the list cache value for `key`.
		 *
		 * @private
		 * @name get
		 * @memberOf ListCache
		 * @param {string} key The key of the value to get.
		 * @returns {*} Returns the entry value.
		 */
		function listCacheGet(key) {
		  var data = this.__data__,
		      index = assocIndexOf(data, key);

		  return index < 0 ? undefined : data[index][1];
		}

		_listCacheGet = listCacheGet;
		return _listCacheGet;
	}

	var _listCacheHas;
	var hasRequired_listCacheHas;

	function require_listCacheHas () {
		if (hasRequired_listCacheHas) return _listCacheHas;
		hasRequired_listCacheHas = 1;
		var assocIndexOf = require_assocIndexOf();

		/**
		 * Checks if a list cache value for `key` exists.
		 *
		 * @private
		 * @name has
		 * @memberOf ListCache
		 * @param {string} key The key of the entry to check.
		 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
		 */
		function listCacheHas(key) {
		  return assocIndexOf(this.__data__, key) > -1;
		}

		_listCacheHas = listCacheHas;
		return _listCacheHas;
	}

	var _listCacheSet;
	var hasRequired_listCacheSet;

	function require_listCacheSet () {
		if (hasRequired_listCacheSet) return _listCacheSet;
		hasRequired_listCacheSet = 1;
		var assocIndexOf = require_assocIndexOf();

		/**
		 * Sets the list cache `key` to `value`.
		 *
		 * @private
		 * @name set
		 * @memberOf ListCache
		 * @param {string} key The key of the value to set.
		 * @param {*} value The value to set.
		 * @returns {Object} Returns the list cache instance.
		 */
		function listCacheSet(key, value) {
		  var data = this.__data__,
		      index = assocIndexOf(data, key);

		  if (index < 0) {
		    ++this.size;
		    data.push([key, value]);
		  } else {
		    data[index][1] = value;
		  }
		  return this;
		}

		_listCacheSet = listCacheSet;
		return _listCacheSet;
	}

	var _ListCache;
	var hasRequired_ListCache;

	function require_ListCache () {
		if (hasRequired_ListCache) return _ListCache;
		hasRequired_ListCache = 1;
		var listCacheClear = require_listCacheClear(),
		    listCacheDelete = require_listCacheDelete(),
		    listCacheGet = require_listCacheGet(),
		    listCacheHas = require_listCacheHas(),
		    listCacheSet = require_listCacheSet();

		/**
		 * Creates an list cache object.
		 *
		 * @private
		 * @constructor
		 * @param {Array} [entries] The key-value pairs to cache.
		 */
		function ListCache(entries) {
		  var index = -1,
		      length = entries == null ? 0 : entries.length;

		  this.clear();
		  while (++index < length) {
		    var entry = entries[index];
		    this.set(entry[0], entry[1]);
		  }
		}

		// Add methods to `ListCache`.
		ListCache.prototype.clear = listCacheClear;
		ListCache.prototype['delete'] = listCacheDelete;
		ListCache.prototype.get = listCacheGet;
		ListCache.prototype.has = listCacheHas;
		ListCache.prototype.set = listCacheSet;

		_ListCache = ListCache;
		return _ListCache;
	}

	var _stackClear;
	var hasRequired_stackClear;

	function require_stackClear () {
		if (hasRequired_stackClear) return _stackClear;
		hasRequired_stackClear = 1;
		var ListCache = require_ListCache();

		/**
		 * Removes all key-value entries from the stack.
		 *
		 * @private
		 * @name clear
		 * @memberOf Stack
		 */
		function stackClear() {
		  this.__data__ = new ListCache;
		  this.size = 0;
		}

		_stackClear = stackClear;
		return _stackClear;
	}

	/**
	 * Removes `key` and its value from the stack.
	 *
	 * @private
	 * @name delete
	 * @memberOf Stack
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */

	var _stackDelete;
	var hasRequired_stackDelete;

	function require_stackDelete () {
		if (hasRequired_stackDelete) return _stackDelete;
		hasRequired_stackDelete = 1;
		function stackDelete(key) {
		  var data = this.__data__,
		      result = data['delete'](key);

		  this.size = data.size;
		  return result;
		}

		_stackDelete = stackDelete;
		return _stackDelete;
	}

	/**
	 * Gets the stack value for `key`.
	 *
	 * @private
	 * @name get
	 * @memberOf Stack
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */

	var _stackGet;
	var hasRequired_stackGet;

	function require_stackGet () {
		if (hasRequired_stackGet) return _stackGet;
		hasRequired_stackGet = 1;
		function stackGet(key) {
		  return this.__data__.get(key);
		}

		_stackGet = stackGet;
		return _stackGet;
	}

	/**
	 * Checks if a stack value for `key` exists.
	 *
	 * @private
	 * @name has
	 * @memberOf Stack
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */

	var _stackHas;
	var hasRequired_stackHas;

	function require_stackHas () {
		if (hasRequired_stackHas) return _stackHas;
		hasRequired_stackHas = 1;
		function stackHas(key) {
		  return this.__data__.has(key);
		}

		_stackHas = stackHas;
		return _stackHas;
	}

	/**
	 * Checks if `value` is the
	 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
	 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
	 * @example
	 *
	 * _.isObject({});
	 * // => true
	 *
	 * _.isObject([1, 2, 3]);
	 * // => true
	 *
	 * _.isObject(_.noop);
	 * // => true
	 *
	 * _.isObject(null);
	 * // => false
	 */

	function isObject$a(value) {
	  var type = typeof value;
	  return value != null && (type == 'object' || type == 'function');
	}

	var isObject_1 = isObject$a;

	var baseGetTag$1 = _baseGetTag,
	    isObject$9 = isObject_1;

	/** `Object#toString` result references. */
	var asyncTag = '[object AsyncFunction]',
	    funcTag$1 = '[object Function]',
	    genTag = '[object GeneratorFunction]',
	    proxyTag = '[object Proxy]';

	/**
	 * Checks if `value` is classified as a `Function` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
	 * @example
	 *
	 * _.isFunction(_);
	 * // => true
	 *
	 * _.isFunction(/abc/);
	 * // => false
	 */
	function isFunction$4(value) {
	  if (!isObject$9(value)) {
	    return false;
	  }
	  // The use of `Object#toString` avoids issues with the `typeof` operator
	  // in Safari 9 which returns 'object' for typed arrays and other constructors.
	  var tag = baseGetTag$1(value);
	  return tag == funcTag$1 || tag == genTag || tag == asyncTag || tag == proxyTag;
	}

	var isFunction_1 = isFunction$4;

	var root$3 = _root;

	/** Used to detect overreaching core-js shims. */
	var coreJsData$1 = root$3['__core-js_shared__'];

	var _coreJsData = coreJsData$1;

	var coreJsData = _coreJsData;

	/** Used to detect methods masquerading as native. */
	var maskSrcKey = (function() {
	  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
	  return uid ? ('Symbol(src)_1.' + uid) : '';
	}());

	/**
	 * Checks if `func` has its source masked.
	 *
	 * @private
	 * @param {Function} func The function to check.
	 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
	 */
	function isMasked$1(func) {
	  return !!maskSrcKey && (maskSrcKey in func);
	}

	var _isMasked = isMasked$1;

	/** Used for built-in method references. */

	var funcProto$1 = Function.prototype;

	/** Used to resolve the decompiled source of functions. */
	var funcToString$1 = funcProto$1.toString;

	/**
	 * Converts `func` to its source code.
	 *
	 * @private
	 * @param {Function} func The function to convert.
	 * @returns {string} Returns the source code.
	 */
	function toSource$1(func) {
	  if (func != null) {
	    try {
	      return funcToString$1.call(func);
	    } catch (e) {}
	    try {
	      return (func + '');
	    } catch (e) {}
	  }
	  return '';
	}

	var _toSource = toSource$1;

	var isFunction$3 = isFunction_1,
	    isMasked = _isMasked,
	    isObject$8 = isObject_1,
	    toSource = _toSource;

	/**
	 * Used to match `RegExp`
	 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
	 */
	var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

	/** Used to detect host constructors (Safari). */
	var reIsHostCtor = /^\[object .+?Constructor\]$/;

	/** Used for built-in method references. */
	var funcProto = Function.prototype,
	    objectProto$4 = Object.prototype;

	/** Used to resolve the decompiled source of functions. */
	var funcToString = funcProto.toString;

	/** Used to check objects for own properties. */
	var hasOwnProperty$5 = objectProto$4.hasOwnProperty;

	/** Used to detect if a method is native. */
	var reIsNative = RegExp('^' +
	  funcToString.call(hasOwnProperty$5).replace(reRegExpChar, '\\$&')
	  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
	);

	/**
	 * The base implementation of `_.isNative` without bad shim checks.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a native function,
	 *  else `false`.
	 */
	function baseIsNative$1(value) {
	  if (!isObject$8(value) || isMasked(value)) {
	    return false;
	  }
	  var pattern = isFunction$3(value) ? reIsNative : reIsHostCtor;
	  return pattern.test(toSource(value));
	}

	var _baseIsNative = baseIsNative$1;

	/**
	 * Gets the value at `key` of `object`.
	 *
	 * @private
	 * @param {Object} [object] The object to query.
	 * @param {string} key The key of the property to get.
	 * @returns {*} Returns the property value.
	 */

	function getValue$1(object, key) {
	  return object == null ? undefined : object[key];
	}

	var _getValue = getValue$1;

	var baseIsNative = _baseIsNative,
	    getValue = _getValue;

	/**
	 * Gets the native function at `key` of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {string} key The key of the method to get.
	 * @returns {*} Returns the function if it's native, else `undefined`.
	 */
	function getNative$2(object, key) {
	  var value = getValue(object, key);
	  return baseIsNative(value) ? value : undefined;
	}

	var _getNative = getNative$2;

	var _Map;
	var hasRequired_Map;

	function require_Map () {
		if (hasRequired_Map) return _Map;
		hasRequired_Map = 1;
		var getNative = _getNative,
		    root = _root;

		/* Built-in method references that are verified to be native. */
		var Map = getNative(root, 'Map');

		_Map = Map;
		return _Map;
	}

	var getNative$1 = _getNative;

	/* Built-in method references that are verified to be native. */
	var nativeCreate$5 = getNative$1(Object, 'create');

	var _nativeCreate = nativeCreate$5;

	var nativeCreate$4 = _nativeCreate;

	/**
	 * Removes all key-value entries from the hash.
	 *
	 * @private
	 * @name clear
	 * @memberOf Hash
	 */
	function hashClear$1() {
	  this.__data__ = nativeCreate$4 ? nativeCreate$4(null) : {};
	  this.size = 0;
	}

	var _hashClear = hashClear$1;

	/**
	 * Removes `key` and its value from the hash.
	 *
	 * @private
	 * @name delete
	 * @memberOf Hash
	 * @param {Object} hash The hash to modify.
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */

	function hashDelete$1(key) {
	  var result = this.has(key) && delete this.__data__[key];
	  this.size -= result ? 1 : 0;
	  return result;
	}

	var _hashDelete = hashDelete$1;

	var nativeCreate$3 = _nativeCreate;

	/** Used to stand-in for `undefined` hash values. */
	var HASH_UNDEFINED$2 = '__lodash_hash_undefined__';

	/** Used for built-in method references. */
	var objectProto$3 = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty$4 = objectProto$3.hasOwnProperty;

	/**
	 * Gets the hash value for `key`.
	 *
	 * @private
	 * @name get
	 * @memberOf Hash
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */
	function hashGet$1(key) {
	  var data = this.__data__;
	  if (nativeCreate$3) {
	    var result = data[key];
	    return result === HASH_UNDEFINED$2 ? undefined : result;
	  }
	  return hasOwnProperty$4.call(data, key) ? data[key] : undefined;
	}

	var _hashGet = hashGet$1;

	var nativeCreate$2 = _nativeCreate;

	/** Used for built-in method references. */
	var objectProto$2 = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty$3 = objectProto$2.hasOwnProperty;

	/**
	 * Checks if a hash value for `key` exists.
	 *
	 * @private
	 * @name has
	 * @memberOf Hash
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function hashHas$1(key) {
	  var data = this.__data__;
	  return nativeCreate$2 ? (data[key] !== undefined) : hasOwnProperty$3.call(data, key);
	}

	var _hashHas = hashHas$1;

	var nativeCreate$1 = _nativeCreate;

	/** Used to stand-in for `undefined` hash values. */
	var HASH_UNDEFINED$1 = '__lodash_hash_undefined__';

	/**
	 * Sets the hash `key` to `value`.
	 *
	 * @private
	 * @name set
	 * @memberOf Hash
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns the hash instance.
	 */
	function hashSet$1(key, value) {
	  var data = this.__data__;
	  this.size += this.has(key) ? 0 : 1;
	  data[key] = (nativeCreate$1 && value === undefined) ? HASH_UNDEFINED$1 : value;
	  return this;
	}

	var _hashSet = hashSet$1;

	var hashClear = _hashClear,
	    hashDelete = _hashDelete,
	    hashGet = _hashGet,
	    hashHas = _hashHas,
	    hashSet = _hashSet;

	/**
	 * Creates a hash object.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [entries] The key-value pairs to cache.
	 */
	function Hash$1(entries) {
	  var index = -1,
	      length = entries == null ? 0 : entries.length;

	  this.clear();
	  while (++index < length) {
	    var entry = entries[index];
	    this.set(entry[0], entry[1]);
	  }
	}

	// Add methods to `Hash`.
	Hash$1.prototype.clear = hashClear;
	Hash$1.prototype['delete'] = hashDelete;
	Hash$1.prototype.get = hashGet;
	Hash$1.prototype.has = hashHas;
	Hash$1.prototype.set = hashSet;

	var _Hash = Hash$1;

	var Hash = _Hash,
	    ListCache = require_ListCache(),
	    Map$1 = require_Map();

	/**
	 * Removes all key-value entries from the map.
	 *
	 * @private
	 * @name clear
	 * @memberOf MapCache
	 */
	function mapCacheClear$1() {
	  this.size = 0;
	  this.__data__ = {
	    'hash': new Hash,
	    'map': new (Map$1 || ListCache),
	    'string': new Hash
	  };
	}

	var _mapCacheClear = mapCacheClear$1;

	/**
	 * Checks if `value` is suitable for use as unique object key.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
	 */

	function isKeyable$1(value) {
	  var type = typeof value;
	  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
	    ? (value !== '__proto__')
	    : (value === null);
	}

	var _isKeyable = isKeyable$1;

	var isKeyable = _isKeyable;

	/**
	 * Gets the data for `map`.
	 *
	 * @private
	 * @param {Object} map The map to query.
	 * @param {string} key The reference key.
	 * @returns {*} Returns the map data.
	 */
	function getMapData$4(map, key) {
	  var data = map.__data__;
	  return isKeyable(key)
	    ? data[typeof key == 'string' ? 'string' : 'hash']
	    : data.map;
	}

	var _getMapData = getMapData$4;

	var getMapData$3 = _getMapData;

	/**
	 * Removes `key` and its value from the map.
	 *
	 * @private
	 * @name delete
	 * @memberOf MapCache
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */
	function mapCacheDelete$1(key) {
	  var result = getMapData$3(this, key)['delete'](key);
	  this.size -= result ? 1 : 0;
	  return result;
	}

	var _mapCacheDelete = mapCacheDelete$1;

	var getMapData$2 = _getMapData;

	/**
	 * Gets the map value for `key`.
	 *
	 * @private
	 * @name get
	 * @memberOf MapCache
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */
	function mapCacheGet$1(key) {
	  return getMapData$2(this, key).get(key);
	}

	var _mapCacheGet = mapCacheGet$1;

	var getMapData$1 = _getMapData;

	/**
	 * Checks if a map value for `key` exists.
	 *
	 * @private
	 * @name has
	 * @memberOf MapCache
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function mapCacheHas$1(key) {
	  return getMapData$1(this, key).has(key);
	}

	var _mapCacheHas = mapCacheHas$1;

	var getMapData = _getMapData;

	/**
	 * Sets the map `key` to `value`.
	 *
	 * @private
	 * @name set
	 * @memberOf MapCache
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns the map cache instance.
	 */
	function mapCacheSet$1(key, value) {
	  var data = getMapData(this, key),
	      size = data.size;

	  data.set(key, value);
	  this.size += data.size == size ? 0 : 1;
	  return this;
	}

	var _mapCacheSet = mapCacheSet$1;

	var mapCacheClear = _mapCacheClear,
	    mapCacheDelete = _mapCacheDelete,
	    mapCacheGet = _mapCacheGet,
	    mapCacheHas = _mapCacheHas,
	    mapCacheSet = _mapCacheSet;

	/**
	 * Creates a map cache object to store key-value pairs.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [entries] The key-value pairs to cache.
	 */
	function MapCache$2(entries) {
	  var index = -1,
	      length = entries == null ? 0 : entries.length;

	  this.clear();
	  while (++index < length) {
	    var entry = entries[index];
	    this.set(entry[0], entry[1]);
	  }
	}

	// Add methods to `MapCache`.
	MapCache$2.prototype.clear = mapCacheClear;
	MapCache$2.prototype['delete'] = mapCacheDelete;
	MapCache$2.prototype.get = mapCacheGet;
	MapCache$2.prototype.has = mapCacheHas;
	MapCache$2.prototype.set = mapCacheSet;

	var _MapCache = MapCache$2;

	var _stackSet;
	var hasRequired_stackSet;

	function require_stackSet () {
		if (hasRequired_stackSet) return _stackSet;
		hasRequired_stackSet = 1;
		var ListCache = require_ListCache(),
		    Map = require_Map(),
		    MapCache = _MapCache;

		/** Used as the size to enable large array optimizations. */
		var LARGE_ARRAY_SIZE = 200;

		/**
		 * Sets the stack `key` to `value`.
		 *
		 * @private
		 * @name set
		 * @memberOf Stack
		 * @param {string} key The key of the value to set.
		 * @param {*} value The value to set.
		 * @returns {Object} Returns the stack cache instance.
		 */
		function stackSet(key, value) {
		  var data = this.__data__;
		  if (data instanceof ListCache) {
		    var pairs = data.__data__;
		    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
		      pairs.push([key, value]);
		      this.size = ++data.size;
		      return this;
		    }
		    data = this.__data__ = new MapCache(pairs);
		  }
		  data.set(key, value);
		  this.size = data.size;
		  return this;
		}

		_stackSet = stackSet;
		return _stackSet;
	}

	var _Stack;
	var hasRequired_Stack;

	function require_Stack () {
		if (hasRequired_Stack) return _Stack;
		hasRequired_Stack = 1;
		var ListCache = require_ListCache(),
		    stackClear = require_stackClear(),
		    stackDelete = require_stackDelete(),
		    stackGet = require_stackGet(),
		    stackHas = require_stackHas(),
		    stackSet = require_stackSet();

		/**
		 * Creates a stack cache object to store key-value pairs.
		 *
		 * @private
		 * @constructor
		 * @param {Array} [entries] The key-value pairs to cache.
		 */
		function Stack(entries) {
		  var data = this.__data__ = new ListCache(entries);
		  this.size = data.size;
		}

		// Add methods to `Stack`.
		Stack.prototype.clear = stackClear;
		Stack.prototype['delete'] = stackDelete;
		Stack.prototype.get = stackGet;
		Stack.prototype.has = stackHas;
		Stack.prototype.set = stackSet;

		_Stack = Stack;
		return _Stack;
	}

	/** Used to stand-in for `undefined` hash values. */

	var HASH_UNDEFINED = '__lodash_hash_undefined__';

	/**
	 * Adds `value` to the array cache.
	 *
	 * @private
	 * @name add
	 * @memberOf SetCache
	 * @alias push
	 * @param {*} value The value to cache.
	 * @returns {Object} Returns the cache instance.
	 */
	function setCacheAdd$1(value) {
	  this.__data__.set(value, HASH_UNDEFINED);
	  return this;
	}

	var _setCacheAdd = setCacheAdd$1;

	/**
	 * Checks if `value` is in the array cache.
	 *
	 * @private
	 * @name has
	 * @memberOf SetCache
	 * @param {*} value The value to search for.
	 * @returns {number} Returns `true` if `value` is found, else `false`.
	 */

	function setCacheHas$1(value) {
	  return this.__data__.has(value);
	}

	var _setCacheHas = setCacheHas$1;

	var MapCache$1 = _MapCache,
	    setCacheAdd = _setCacheAdd,
	    setCacheHas = _setCacheHas;

	/**
	 *
	 * Creates an array cache object to store unique values.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [values] The values to cache.
	 */
	function SetCache$2(values) {
	  var index = -1,
	      length = values == null ? 0 : values.length;

	  this.__data__ = new MapCache$1;
	  while (++index < length) {
	    this.add(values[index]);
	  }
	}

	// Add methods to `SetCache`.
	SetCache$2.prototype.add = SetCache$2.prototype.push = setCacheAdd;
	SetCache$2.prototype.has = setCacheHas;

	var _SetCache = SetCache$2;

	/**
	 * A specialized version of `_.some` for arrays without support for iteratee
	 * shorthands.
	 *
	 * @private
	 * @param {Array} [array] The array to iterate over.
	 * @param {Function} predicate The function invoked per iteration.
	 * @returns {boolean} Returns `true` if any element passes the predicate check,
	 *  else `false`.
	 */

	function arraySome$1(array, predicate) {
	  var index = -1,
	      length = array == null ? 0 : array.length;

	  while (++index < length) {
	    if (predicate(array[index], index, array)) {
	      return true;
	    }
	  }
	  return false;
	}

	var _arraySome = arraySome$1;

	/**
	 * Checks if a `cache` value for `key` exists.
	 *
	 * @private
	 * @param {Object} cache The cache to query.
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */

	function cacheHas$2(cache, key) {
	  return cache.has(key);
	}

	var _cacheHas = cacheHas$2;

	var SetCache$1 = _SetCache,
	    arraySome = _arraySome,
	    cacheHas$1 = _cacheHas;

	/** Used to compose bitmasks for value comparisons. */
	var COMPARE_PARTIAL_FLAG$5 = 1,
	    COMPARE_UNORDERED_FLAG$3 = 2;

	/**
	 * A specialized version of `baseIsEqualDeep` for arrays with support for
	 * partial deep comparisons.
	 *
	 * @private
	 * @param {Array} array The array to compare.
	 * @param {Array} other The other array to compare.
	 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
	 * @param {Function} customizer The function to customize comparisons.
	 * @param {Function} equalFunc The function to determine equivalents of values.
	 * @param {Object} stack Tracks traversed `array` and `other` objects.
	 * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
	 */
	function equalArrays$2(array, other, bitmask, customizer, equalFunc, stack) {
	  var isPartial = bitmask & COMPARE_PARTIAL_FLAG$5,
	      arrLength = array.length,
	      othLength = other.length;

	  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
	    return false;
	  }
	  // Check that cyclic values are equal.
	  var arrStacked = stack.get(array);
	  var othStacked = stack.get(other);
	  if (arrStacked && othStacked) {
	    return arrStacked == other && othStacked == array;
	  }
	  var index = -1,
	      result = true,
	      seen = (bitmask & COMPARE_UNORDERED_FLAG$3) ? new SetCache$1 : undefined;

	  stack.set(array, other);
	  stack.set(other, array);

	  // Ignore non-index properties.
	  while (++index < arrLength) {
	    var arrValue = array[index],
	        othValue = other[index];

	    if (customizer) {
	      var compared = isPartial
	        ? customizer(othValue, arrValue, index, other, array, stack)
	        : customizer(arrValue, othValue, index, array, other, stack);
	    }
	    if (compared !== undefined) {
	      if (compared) {
	        continue;
	      }
	      result = false;
	      break;
	    }
	    // Recursively compare arrays (susceptible to call stack limits).
	    if (seen) {
	      if (!arraySome(other, function(othValue, othIndex) {
	            if (!cacheHas$1(seen, othIndex) &&
	                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
	              return seen.push(othIndex);
	            }
	          })) {
	        result = false;
	        break;
	      }
	    } else if (!(
	          arrValue === othValue ||
	            equalFunc(arrValue, othValue, bitmask, customizer, stack)
	        )) {
	      result = false;
	      break;
	    }
	  }
	  stack['delete'](array);
	  stack['delete'](other);
	  return result;
	}

	var _equalArrays = equalArrays$2;

	var root$2 = _root;

	/** Built-in value references. */
	var Uint8Array$2 = root$2.Uint8Array;

	var _Uint8Array = Uint8Array$2;

	/**
	 * Converts `map` to its key-value pairs.
	 *
	 * @private
	 * @param {Object} map The map to convert.
	 * @returns {Array} Returns the key-value pairs.
	 */

	function mapToArray$1(map) {
	  var index = -1,
	      result = Array(map.size);

	  map.forEach(function(value, key) {
	    result[++index] = [key, value];
	  });
	  return result;
	}

	var _mapToArray = mapToArray$1;

	/**
	 * Converts `set` to an array of its values.
	 *
	 * @private
	 * @param {Object} set The set to convert.
	 * @returns {Array} Returns the values.
	 */

	function setToArray$3(set) {
	  var index = -1,
	      result = Array(set.size);

	  set.forEach(function(value) {
	    result[++index] = value;
	  });
	  return result;
	}

	var _setToArray = setToArray$3;

	var Symbol$2 = _Symbol,
	    Uint8Array$1 = _Uint8Array,
	    eq$3 = requireEq$1(),
	    equalArrays$1 = _equalArrays,
	    mapToArray = _mapToArray,
	    setToArray$2 = _setToArray;

	/** Used to compose bitmasks for value comparisons. */
	var COMPARE_PARTIAL_FLAG$4 = 1,
	    COMPARE_UNORDERED_FLAG$2 = 2;

	/** `Object#toString` result references. */
	var boolTag$1 = '[object Boolean]',
	    dateTag$1 = '[object Date]',
	    errorTag$1 = '[object Error]',
	    mapTag$1 = '[object Map]',
	    numberTag$1 = '[object Number]',
	    regexpTag$1 = '[object RegExp]',
	    setTag$1 = '[object Set]',
	    stringTag$1 = '[object String]',
	    symbolTag = '[object Symbol]';

	var arrayBufferTag$1 = '[object ArrayBuffer]',
	    dataViewTag$1 = '[object DataView]';

	/** Used to convert symbols to primitives and strings. */
	var symbolProto$1 = Symbol$2 ? Symbol$2.prototype : undefined,
	    symbolValueOf = symbolProto$1 ? symbolProto$1.valueOf : undefined;

	/**
	 * A specialized version of `baseIsEqualDeep` for comparing objects of
	 * the same `toStringTag`.
	 *
	 * **Note:** This function only supports comparing values with tags of
	 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
	 *
	 * @private
	 * @param {Object} object The object to compare.
	 * @param {Object} other The other object to compare.
	 * @param {string} tag The `toStringTag` of the objects to compare.
	 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
	 * @param {Function} customizer The function to customize comparisons.
	 * @param {Function} equalFunc The function to determine equivalents of values.
	 * @param {Object} stack Tracks traversed `object` and `other` objects.
	 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	 */
	function equalByTag$1(object, other, tag, bitmask, customizer, equalFunc, stack) {
	  switch (tag) {
	    case dataViewTag$1:
	      if ((object.byteLength != other.byteLength) ||
	          (object.byteOffset != other.byteOffset)) {
	        return false;
	      }
	      object = object.buffer;
	      other = other.buffer;

	    case arrayBufferTag$1:
	      if ((object.byteLength != other.byteLength) ||
	          !equalFunc(new Uint8Array$1(object), new Uint8Array$1(other))) {
	        return false;
	      }
	      return true;

	    case boolTag$1:
	    case dateTag$1:
	    case numberTag$1:
	      // Coerce booleans to `1` or `0` and dates to milliseconds.
	      // Invalid dates are coerced to `NaN`.
	      return eq$3(+object, +other);

	    case errorTag$1:
	      return object.name == other.name && object.message == other.message;

	    case regexpTag$1:
	    case stringTag$1:
	      // Coerce regexes to strings and treat strings, primitives and objects,
	      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
	      // for more details.
	      return object == (other + '');

	    case mapTag$1:
	      var convert = mapToArray;

	    case setTag$1:
	      var isPartial = bitmask & COMPARE_PARTIAL_FLAG$4;
	      convert || (convert = setToArray$2);

	      if (object.size != other.size && !isPartial) {
	        return false;
	      }
	      // Assume cyclic values are equal.
	      var stacked = stack.get(object);
	      if (stacked) {
	        return stacked == other;
	      }
	      bitmask |= COMPARE_UNORDERED_FLAG$2;

	      // Recursively compare objects (susceptible to call stack limits).
	      stack.set(object, other);
	      var result = equalArrays$1(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
	      stack['delete'](object);
	      return result;

	    case symbolTag:
	      if (symbolValueOf) {
	        return symbolValueOf.call(object) == symbolValueOf.call(other);
	      }
	  }
	  return false;
	}

	var _equalByTag = equalByTag$1;

	/**
	 * Appends the elements of `values` to `array`.
	 *
	 * @private
	 * @param {Array} array The array to modify.
	 * @param {Array} values The values to append.
	 * @returns {Array} Returns `array`.
	 */

	var _arrayPush;
	var hasRequired_arrayPush;

	function require_arrayPush () {
		if (hasRequired_arrayPush) return _arrayPush;
		hasRequired_arrayPush = 1;
		function arrayPush(array, values) {
		  var index = -1,
		      length = values.length,
		      offset = array.length;

		  while (++index < length) {
		    array[offset + index] = values[index];
		  }
		  return array;
		}

		_arrayPush = arrayPush;
		return _arrayPush;
	}

	/**
	 * Checks if `value` is classified as an `Array` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
	 * @example
	 *
	 * _.isArray([1, 2, 3]);
	 * // => true
	 *
	 * _.isArray(document.body.children);
	 * // => false
	 *
	 * _.isArray('abc');
	 * // => false
	 *
	 * _.isArray(_.noop);
	 * // => false
	 */

	var isArray$7 = Array.isArray;

	var isArray_1 = isArray$7;

	var _baseGetAllKeys;
	var hasRequired_baseGetAllKeys;

	function require_baseGetAllKeys () {
		if (hasRequired_baseGetAllKeys) return _baseGetAllKeys;
		hasRequired_baseGetAllKeys = 1;
		var arrayPush = require_arrayPush(),
		    isArray = isArray_1;

		/**
		 * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
		 * `keysFunc` and `symbolsFunc` to get the enumerable property names and
		 * symbols of `object`.
		 *
		 * @private
		 * @param {Object} object The object to query.
		 * @param {Function} keysFunc The function to get the keys of `object`.
		 * @param {Function} symbolsFunc The function to get the symbols of `object`.
		 * @returns {Array} Returns the array of property names and symbols.
		 */
		function baseGetAllKeys(object, keysFunc, symbolsFunc) {
		  var result = keysFunc(object);
		  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
		}

		_baseGetAllKeys = baseGetAllKeys;
		return _baseGetAllKeys;
	}

	/**
	 * A specialized version of `_.filter` for arrays without support for
	 * iteratee shorthands.
	 *
	 * @private
	 * @param {Array} [array] The array to iterate over.
	 * @param {Function} predicate The function invoked per iteration.
	 * @returns {Array} Returns the new filtered array.
	 */

	var _arrayFilter;
	var hasRequired_arrayFilter;

	function require_arrayFilter () {
		if (hasRequired_arrayFilter) return _arrayFilter;
		hasRequired_arrayFilter = 1;
		function arrayFilter(array, predicate) {
		  var index = -1,
		      length = array == null ? 0 : array.length,
		      resIndex = 0,
		      result = [];

		  while (++index < length) {
		    var value = array[index];
		    if (predicate(value, index, array)) {
		      result[resIndex++] = value;
		    }
		  }
		  return result;
		}

		_arrayFilter = arrayFilter;
		return _arrayFilter;
	}

	/**
	 * This method returns a new empty array.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.13.0
	 * @category Util
	 * @returns {Array} Returns the new empty array.
	 * @example
	 *
	 * var arrays = _.times(2, _.stubArray);
	 *
	 * console.log(arrays);
	 * // => [[], []]
	 *
	 * console.log(arrays[0] === arrays[1]);
	 * // => false
	 */

	var stubArray_1;
	var hasRequiredStubArray;

	function requireStubArray () {
		if (hasRequiredStubArray) return stubArray_1;
		hasRequiredStubArray = 1;
		function stubArray() {
		  return [];
		}

		stubArray_1 = stubArray;
		return stubArray_1;
	}

	var _getSymbols;
	var hasRequired_getSymbols;

	function require_getSymbols () {
		if (hasRequired_getSymbols) return _getSymbols;
		hasRequired_getSymbols = 1;
		var arrayFilter = require_arrayFilter(),
		    stubArray = requireStubArray();

		/** Used for built-in method references. */
		var objectProto = Object.prototype;

		/** Built-in value references. */
		var propertyIsEnumerable = objectProto.propertyIsEnumerable;

		/* Built-in method references for those with the same name as other `lodash` methods. */
		var nativeGetSymbols = Object.getOwnPropertySymbols;

		/**
		 * Creates an array of the own enumerable symbols of `object`.
		 *
		 * @private
		 * @param {Object} object The object to query.
		 * @returns {Array} Returns the array of symbols.
		 */
		var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
		  if (object == null) {
		    return [];
		  }
		  object = Object(object);
		  return arrayFilter(nativeGetSymbols(object), function(symbol) {
		    return propertyIsEnumerable.call(object, symbol);
		  });
		};

		_getSymbols = getSymbols;
		return _getSymbols;
	}

	/**
	 * The base implementation of `_.times` without support for iteratee shorthands
	 * or max array length checks.
	 *
	 * @private
	 * @param {number} n The number of times to invoke `iteratee`.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array} Returns the array of results.
	 */

	var _baseTimes;
	var hasRequired_baseTimes;

	function require_baseTimes () {
		if (hasRequired_baseTimes) return _baseTimes;
		hasRequired_baseTimes = 1;
		function baseTimes(n, iteratee) {
		  var index = -1,
		      result = Array(n);

		  while (++index < n) {
		    result[index] = iteratee(index);
		  }
		  return result;
		}

		_baseTimes = baseTimes;
		return _baseTimes;
	}

	var _baseIsArguments;
	var hasRequired_baseIsArguments;

	function require_baseIsArguments () {
		if (hasRequired_baseIsArguments) return _baseIsArguments;
		hasRequired_baseIsArguments = 1;
		var baseGetTag = _baseGetTag,
		    isObjectLike = isObjectLike_1;

		/** `Object#toString` result references. */
		var argsTag = '[object Arguments]';

		/**
		 * The base implementation of `_.isArguments`.
		 *
		 * @private
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
		 */
		function baseIsArguments(value) {
		  return isObjectLike(value) && baseGetTag(value) == argsTag;
		}

		_baseIsArguments = baseIsArguments;
		return _baseIsArguments;
	}

	var isArguments_1;
	var hasRequiredIsArguments;

	function requireIsArguments () {
		if (hasRequiredIsArguments) return isArguments_1;
		hasRequiredIsArguments = 1;
		var baseIsArguments = require_baseIsArguments(),
		    isObjectLike = isObjectLike_1;

		/** Used for built-in method references. */
		var objectProto = Object.prototype;

		/** Used to check objects for own properties. */
		var hasOwnProperty = objectProto.hasOwnProperty;

		/** Built-in value references. */
		var propertyIsEnumerable = objectProto.propertyIsEnumerable;

		/**
		 * Checks if `value` is likely an `arguments` object.
		 *
		 * @static
		 * @memberOf _
		 * @since 0.1.0
		 * @category Lang
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
		 *  else `false`.
		 * @example
		 *
		 * _.isArguments(function() { return arguments; }());
		 * // => true
		 *
		 * _.isArguments([1, 2, 3]);
		 * // => false
		 */
		var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
		  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&
		    !propertyIsEnumerable.call(value, 'callee');
		};

		isArguments_1 = isArguments;
		return isArguments_1;
	}

	var isBuffer$2 = {exports: {}};

	/**
	 * This method returns `false`.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.13.0
	 * @category Util
	 * @returns {boolean} Returns `false`.
	 * @example
	 *
	 * _.times(2, _.stubFalse);
	 * // => [false, false]
	 */

	var stubFalse_1;
	var hasRequiredStubFalse;

	function requireStubFalse () {
		if (hasRequiredStubFalse) return stubFalse_1;
		hasRequiredStubFalse = 1;
		function stubFalse() {
		  return false;
		}

		stubFalse_1 = stubFalse;
		return stubFalse_1;
	}

	isBuffer$2.exports;

	var hasRequiredIsBuffer;

	function requireIsBuffer () {
		if (hasRequiredIsBuffer) return isBuffer$2.exports;
		hasRequiredIsBuffer = 1;
		(function (module, exports) {
			var root = _root,
			    stubFalse = requireStubFalse();

			/** Detect free variable `exports`. */
			var freeExports = exports && !exports.nodeType && exports;

			/** Detect free variable `module`. */
			var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;

			/** Detect the popular CommonJS extension `module.exports`. */
			var moduleExports = freeModule && freeModule.exports === freeExports;

			/** Built-in value references. */
			var Buffer = moduleExports ? root.Buffer : undefined;

			/* Built-in method references for those with the same name as other `lodash` methods. */
			var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;

			/**
			 * Checks if `value` is a buffer.
			 *
			 * @static
			 * @memberOf _
			 * @since 4.3.0
			 * @category Lang
			 * @param {*} value The value to check.
			 * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
			 * @example
			 *
			 * _.isBuffer(new Buffer(2));
			 * // => true
			 *
			 * _.isBuffer(new Uint8Array(2));
			 * // => false
			 */
			var isBuffer = nativeIsBuffer || stubFalse;

			module.exports = isBuffer; 
		} (isBuffer$2, isBuffer$2.exports));
		return isBuffer$2.exports;
	}

	/** Used as references for various `Number` constants. */

	var MAX_SAFE_INTEGER = 9007199254740991;

	/** Used to detect unsigned integer values. */
	var reIsUint = /^(?:0|[1-9]\d*)$/;

	/**
	 * Checks if `value` is a valid array-like index.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
	 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
	 */
	function isIndex$3(value, length) {
	  var type = typeof value;
	  length = length == null ? MAX_SAFE_INTEGER : length;

	  return !!length &&
	    (type == 'number' ||
	      (type != 'symbol' && reIsUint.test(value))) &&
	        (value > -1 && value % 1 == 0 && value < length);
	}

	var _isIndex = isIndex$3;

	/** Used as references for various `Number` constants. */

	var isLength_1;
	var hasRequiredIsLength$1;

	function requireIsLength$1 () {
		if (hasRequiredIsLength$1) return isLength_1;
		hasRequiredIsLength$1 = 1;
		var MAX_SAFE_INTEGER = 9007199254740991;

		/**
		 * Checks if `value` is a valid array-like length.
		 *
		 * **Note:** This method is loosely based on
		 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
		 *
		 * @static
		 * @memberOf _
		 * @since 4.0.0
		 * @category Lang
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
		 * @example
		 *
		 * _.isLength(3);
		 * // => true
		 *
		 * _.isLength(Number.MIN_VALUE);
		 * // => false
		 *
		 * _.isLength(Infinity);
		 * // => false
		 *
		 * _.isLength('3');
		 * // => false
		 */
		function isLength(value) {
		  return typeof value == 'number' &&
		    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
		}

		isLength_1 = isLength;
		return isLength_1;
	}

	var baseGetTag = _baseGetTag,
	    isLength$2 = requireIsLength$1(),
	    isObjectLike$2 = isObjectLike_1;

	/** `Object#toString` result references. */
	var argsTag$1 = '[object Arguments]',
	    arrayTag$1 = '[object Array]',
	    boolTag = '[object Boolean]',
	    dateTag = '[object Date]',
	    errorTag = '[object Error]',
	    funcTag = '[object Function]',
	    mapTag = '[object Map]',
	    numberTag = '[object Number]',
	    objectTag$1 = '[object Object]',
	    regexpTag = '[object RegExp]',
	    setTag = '[object Set]',
	    stringTag = '[object String]',
	    weakMapTag = '[object WeakMap]';

	var arrayBufferTag = '[object ArrayBuffer]',
	    dataViewTag = '[object DataView]',
	    float32Tag = '[object Float32Array]',
	    float64Tag = '[object Float64Array]',
	    int8Tag = '[object Int8Array]',
	    int16Tag = '[object Int16Array]',
	    int32Tag = '[object Int32Array]',
	    uint8Tag = '[object Uint8Array]',
	    uint8ClampedTag = '[object Uint8ClampedArray]',
	    uint16Tag = '[object Uint16Array]',
	    uint32Tag = '[object Uint32Array]';

	/** Used to identify `toStringTag` values of typed arrays. */
	var typedArrayTags = {};
	typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
	typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
	typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
	typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
	typedArrayTags[uint32Tag] = true;
	typedArrayTags[argsTag$1] = typedArrayTags[arrayTag$1] =
	typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
	typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
	typedArrayTags[errorTag] = typedArrayTags[funcTag] =
	typedArrayTags[mapTag] = typedArrayTags[numberTag] =
	typedArrayTags[objectTag$1] = typedArrayTags[regexpTag] =
	typedArrayTags[setTag] = typedArrayTags[stringTag] =
	typedArrayTags[weakMapTag] = false;

	/**
	 * The base implementation of `_.isTypedArray` without Node.js optimizations.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
	 */
	function baseIsTypedArray$1(value) {
	  return isObjectLike$2(value) &&
	    isLength$2(value.length) && !!typedArrayTags[baseGetTag(value)];
	}

	var _baseIsTypedArray = baseIsTypedArray$1;

	/**
	 * The base implementation of `_.unary` without support for storing metadata.
	 *
	 * @private
	 * @param {Function} func The function to cap arguments for.
	 * @returns {Function} Returns the new capped function.
	 */

	var _baseUnary;
	var hasRequired_baseUnary;

	function require_baseUnary () {
		if (hasRequired_baseUnary) return _baseUnary;
		hasRequired_baseUnary = 1;
		function baseUnary(func) {
		  return function(value) {
		    return func(value);
		  };
		}

		_baseUnary = baseUnary;
		return _baseUnary;
	}

	var _nodeUtil = {exports: {}};

	_nodeUtil.exports;

	var hasRequired_nodeUtil;

	function require_nodeUtil () {
		if (hasRequired_nodeUtil) return _nodeUtil.exports;
		hasRequired_nodeUtil = 1;
		(function (module, exports) {
			var freeGlobal = _freeGlobal;

			/** Detect free variable `exports`. */
			var freeExports = exports && !exports.nodeType && exports;

			/** Detect free variable `module`. */
			var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;

			/** Detect the popular CommonJS extension `module.exports`. */
			var moduleExports = freeModule && freeModule.exports === freeExports;

			/** Detect free variable `process` from Node.js. */
			var freeProcess = moduleExports && freeGlobal.process;

			/** Used to access faster Node.js helpers. */
			var nodeUtil = (function() {
			  try {
			    // Use `util.types` for Node.js 10+.
			    var types = freeModule && freeModule.require && freeModule.require('util').types;

			    if (types) {
			      return types;
			    }

			    // Legacy `process.binding('util')` for Node.js < 10.
			    return freeProcess && freeProcess.binding && freeProcess.binding('util');
			  } catch (e) {}
			}());

			module.exports = nodeUtil; 
		} (_nodeUtil, _nodeUtil.exports));
		return _nodeUtil.exports;
	}

	var baseIsTypedArray = _baseIsTypedArray,
	    baseUnary = require_baseUnary(),
	    nodeUtil = require_nodeUtil();

	/* Node.js helper references. */
	var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

	/**
	 * Checks if `value` is classified as a typed array.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
	 * @example
	 *
	 * _.isTypedArray(new Uint8Array);
	 * // => true
	 *
	 * _.isTypedArray([]);
	 * // => false
	 */
	var isTypedArray$4 = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

	var isTypedArray_1 = isTypedArray$4;

	var _arrayLikeKeys;
	var hasRequired_arrayLikeKeys;

	function require_arrayLikeKeys () {
		if (hasRequired_arrayLikeKeys) return _arrayLikeKeys;
		hasRequired_arrayLikeKeys = 1;
		var baseTimes = require_baseTimes(),
		    isArguments = requireIsArguments(),
		    isArray = isArray_1,
		    isBuffer = requireIsBuffer(),
		    isIndex = _isIndex,
		    isTypedArray = isTypedArray_1;

		/** Used for built-in method references. */
		var objectProto = Object.prototype;

		/** Used to check objects for own properties. */
		var hasOwnProperty = objectProto.hasOwnProperty;

		/**
		 * Creates an array of the enumerable property names of the array-like `value`.
		 *
		 * @private
		 * @param {*} value The value to query.
		 * @param {boolean} inherited Specify returning inherited property names.
		 * @returns {Array} Returns the array of property names.
		 */
		function arrayLikeKeys(value, inherited) {
		  var isArr = isArray(value),
		      isArg = !isArr && isArguments(value),
		      isBuff = !isArr && !isArg && isBuffer(value),
		      isType = !isArr && !isArg && !isBuff && isTypedArray(value),
		      skipIndexes = isArr || isArg || isBuff || isType,
		      result = skipIndexes ? baseTimes(value.length, String) : [],
		      length = result.length;

		  for (var key in value) {
		    if ((inherited || hasOwnProperty.call(value, key)) &&
		        !(skipIndexes && (
		           // Safari 9 has enumerable `arguments.length` in strict mode.
		           key == 'length' ||
		           // Node.js 0.10 has enumerable non-index properties on buffers.
		           (isBuff && (key == 'offset' || key == 'parent')) ||
		           // PhantomJS 2 has enumerable non-index properties on typed arrays.
		           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
		           // Skip index properties.
		           isIndex(key, length)
		        ))) {
		      result.push(key);
		    }
		  }
		  return result;
		}

		_arrayLikeKeys = arrayLikeKeys;
		return _arrayLikeKeys;
	}

	/** Used for built-in method references. */

	var _isPrototype;
	var hasRequired_isPrototype;

	function require_isPrototype () {
		if (hasRequired_isPrototype) return _isPrototype;
		hasRequired_isPrototype = 1;
		var objectProto = Object.prototype;

		/**
		 * Checks if `value` is likely a prototype object.
		 *
		 * @private
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
		 */
		function isPrototype(value) {
		  var Ctor = value && value.constructor,
		      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

		  return value === proto;
		}

		_isPrototype = isPrototype;
		return _isPrototype;
	}

	var _nativeKeys;
	var hasRequired_nativeKeys;

	function require_nativeKeys () {
		if (hasRequired_nativeKeys) return _nativeKeys;
		hasRequired_nativeKeys = 1;
		var overArg = _overArg;

		/* Built-in method references for those with the same name as other `lodash` methods. */
		var nativeKeys = overArg(Object.keys, Object);

		_nativeKeys = nativeKeys;
		return _nativeKeys;
	}

	var _baseKeys;
	var hasRequired_baseKeys;

	function require_baseKeys () {
		if (hasRequired_baseKeys) return _baseKeys;
		hasRequired_baseKeys = 1;
		var isPrototype = require_isPrototype(),
		    nativeKeys = require_nativeKeys();

		/** Used for built-in method references. */
		var objectProto = Object.prototype;

		/** Used to check objects for own properties. */
		var hasOwnProperty = objectProto.hasOwnProperty;

		/**
		 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
		 *
		 * @private
		 * @param {Object} object The object to query.
		 * @returns {Array} Returns the array of property names.
		 */
		function baseKeys(object) {
		  if (!isPrototype(object)) {
		    return nativeKeys(object);
		  }
		  var result = [];
		  for (var key in Object(object)) {
		    if (hasOwnProperty.call(object, key) && key != 'constructor') {
		      result.push(key);
		    }
		  }
		  return result;
		}

		_baseKeys = baseKeys;
		return _baseKeys;
	}

	var isArrayLike_1;
	var hasRequiredIsArrayLike;

	function requireIsArrayLike () {
		if (hasRequiredIsArrayLike) return isArrayLike_1;
		hasRequiredIsArrayLike = 1;
		var isFunction = isFunction_1,
		    isLength = requireIsLength$1();

		/**
		 * Checks if `value` is array-like. A value is considered array-like if it's
		 * not a function and has a `value.length` that's an integer greater than or
		 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
		 *
		 * @static
		 * @memberOf _
		 * @since 4.0.0
		 * @category Lang
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
		 * @example
		 *
		 * _.isArrayLike([1, 2, 3]);
		 * // => true
		 *
		 * _.isArrayLike(document.body.children);
		 * // => true
		 *
		 * _.isArrayLike('abc');
		 * // => true
		 *
		 * _.isArrayLike(_.noop);
		 * // => false
		 */
		function isArrayLike(value) {
		  return value != null && isLength(value.length) && !isFunction(value);
		}

		isArrayLike_1 = isArrayLike;
		return isArrayLike_1;
	}

	var keys_1;
	var hasRequiredKeys;

	function requireKeys () {
		if (hasRequiredKeys) return keys_1;
		hasRequiredKeys = 1;
		var arrayLikeKeys = require_arrayLikeKeys(),
		    baseKeys = require_baseKeys(),
		    isArrayLike = requireIsArrayLike();

		/**
		 * Creates an array of the own enumerable property names of `object`.
		 *
		 * **Note:** Non-object values are coerced to objects. See the
		 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
		 * for more details.
		 *
		 * @static
		 * @since 0.1.0
		 * @memberOf _
		 * @category Object
		 * @param {Object} object The object to query.
		 * @returns {Array} Returns the array of property names.
		 * @example
		 *
		 * function Foo() {
		 *   this.a = 1;
		 *   this.b = 2;
		 * }
		 *
		 * Foo.prototype.c = 3;
		 *
		 * _.keys(new Foo);
		 * // => ['a', 'b'] (iteration order is not guaranteed)
		 *
		 * _.keys('hi');
		 * // => ['0', '1']
		 */
		function keys(object) {
		  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
		}

		keys_1 = keys;
		return keys_1;
	}

	var _getAllKeys;
	var hasRequired_getAllKeys;

	function require_getAllKeys () {
		if (hasRequired_getAllKeys) return _getAllKeys;
		hasRequired_getAllKeys = 1;
		var baseGetAllKeys = require_baseGetAllKeys(),
		    getSymbols = require_getSymbols(),
		    keys = requireKeys();

		/**
		 * Creates an array of own enumerable property names and symbols of `object`.
		 *
		 * @private
		 * @param {Object} object The object to query.
		 * @returns {Array} Returns the array of property names and symbols.
		 */
		function getAllKeys(object) {
		  return baseGetAllKeys(object, keys, getSymbols);
		}

		_getAllKeys = getAllKeys;
		return _getAllKeys;
	}

	var getAllKeys = require_getAllKeys();

	/** Used to compose bitmasks for value comparisons. */
	var COMPARE_PARTIAL_FLAG$3 = 1;

	/** Used for built-in method references. */
	var objectProto$1 = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty$2 = objectProto$1.hasOwnProperty;

	/**
	 * A specialized version of `baseIsEqualDeep` for objects with support for
	 * partial deep comparisons.
	 *
	 * @private
	 * @param {Object} object The object to compare.
	 * @param {Object} other The other object to compare.
	 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
	 * @param {Function} customizer The function to customize comparisons.
	 * @param {Function} equalFunc The function to determine equivalents of values.
	 * @param {Object} stack Tracks traversed `object` and `other` objects.
	 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	 */
	function equalObjects$1(object, other, bitmask, customizer, equalFunc, stack) {
	  var isPartial = bitmask & COMPARE_PARTIAL_FLAG$3,
	      objProps = getAllKeys(object),
	      objLength = objProps.length,
	      othProps = getAllKeys(other),
	      othLength = othProps.length;

	  if (objLength != othLength && !isPartial) {
	    return false;
	  }
	  var index = objLength;
	  while (index--) {
	    var key = objProps[index];
	    if (!(isPartial ? key in other : hasOwnProperty$2.call(other, key))) {
	      return false;
	    }
	  }
	  // Check that cyclic values are equal.
	  var objStacked = stack.get(object);
	  var othStacked = stack.get(other);
	  if (objStacked && othStacked) {
	    return objStacked == other && othStacked == object;
	  }
	  var result = true;
	  stack.set(object, other);
	  stack.set(other, object);

	  var skipCtor = isPartial;
	  while (++index < objLength) {
	    key = objProps[index];
	    var objValue = object[key],
	        othValue = other[key];

	    if (customizer) {
	      var compared = isPartial
	        ? customizer(othValue, objValue, key, other, object, stack)
	        : customizer(objValue, othValue, key, object, other, stack);
	    }
	    // Recursively compare objects (susceptible to call stack limits).
	    if (!(compared === undefined
	          ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
	          : compared
	        )) {
	      result = false;
	      break;
	    }
	    skipCtor || (skipCtor = key == 'constructor');
	  }
	  if (result && !skipCtor) {
	    var objCtor = object.constructor,
	        othCtor = other.constructor;

	    // Non `Object` object instances with different constructors are not equal.
	    if (objCtor != othCtor &&
	        ('constructor' in object && 'constructor' in other) &&
	        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
	          typeof othCtor == 'function' && othCtor instanceof othCtor)) {
	      result = false;
	    }
	  }
	  stack['delete'](object);
	  stack['delete'](other);
	  return result;
	}

	var _equalObjects = equalObjects$1;

	var _DataView;
	var hasRequired_DataView;

	function require_DataView () {
		if (hasRequired_DataView) return _DataView;
		hasRequired_DataView = 1;
		var getNative = _getNative,
		    root = _root;

		/* Built-in method references that are verified to be native. */
		var DataView = getNative(root, 'DataView');

		_DataView = DataView;
		return _DataView;
	}

	var _Promise;
	var hasRequired_Promise;

	function require_Promise () {
		if (hasRequired_Promise) return _Promise;
		hasRequired_Promise = 1;
		var getNative = _getNative,
		    root = _root;

		/* Built-in method references that are verified to be native. */
		var Promise = getNative(root, 'Promise');

		_Promise = Promise;
		return _Promise;
	}

	var getNative = _getNative,
	    root$1 = _root;

	/* Built-in method references that are verified to be native. */
	var Set$2 = getNative(root$1, 'Set');

	var _Set = Set$2;

	var _WeakMap;
	var hasRequired_WeakMap;

	function require_WeakMap () {
		if (hasRequired_WeakMap) return _WeakMap;
		hasRequired_WeakMap = 1;
		var getNative = _getNative,
		    root = _root;

		/* Built-in method references that are verified to be native. */
		var WeakMap = getNative(root, 'WeakMap');

		_WeakMap = WeakMap;
		return _WeakMap;
	}

	var _getTag;
	var hasRequired_getTag;

	function require_getTag () {
		if (hasRequired_getTag) return _getTag;
		hasRequired_getTag = 1;
		var DataView = require_DataView(),
		    Map = require_Map(),
		    Promise = require_Promise(),
		    Set = _Set,
		    WeakMap = require_WeakMap(),
		    baseGetTag = _baseGetTag,
		    toSource = _toSource;

		/** `Object#toString` result references. */
		var mapTag = '[object Map]',
		    objectTag = '[object Object]',
		    promiseTag = '[object Promise]',
		    setTag = '[object Set]',
		    weakMapTag = '[object WeakMap]';

		var dataViewTag = '[object DataView]';

		/** Used to detect maps, sets, and weakmaps. */
		var dataViewCtorString = toSource(DataView),
		    mapCtorString = toSource(Map),
		    promiseCtorString = toSource(Promise),
		    setCtorString = toSource(Set),
		    weakMapCtorString = toSource(WeakMap);

		/**
		 * Gets the `toStringTag` of `value`.
		 *
		 * @private
		 * @param {*} value The value to query.
		 * @returns {string} Returns the `toStringTag`.
		 */
		var getTag = baseGetTag;

		// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
		if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
		    (Map && getTag(new Map) != mapTag) ||
		    (Promise && getTag(Promise.resolve()) != promiseTag) ||
		    (Set && getTag(new Set) != setTag) ||
		    (WeakMap && getTag(new WeakMap) != weakMapTag)) {
		  getTag = function(value) {
		    var result = baseGetTag(value),
		        Ctor = result == objectTag ? value.constructor : undefined,
		        ctorString = Ctor ? toSource(Ctor) : '';

		    if (ctorString) {
		      switch (ctorString) {
		        case dataViewCtorString: return dataViewTag;
		        case mapCtorString: return mapTag;
		        case promiseCtorString: return promiseTag;
		        case setCtorString: return setTag;
		        case weakMapCtorString: return weakMapTag;
		      }
		    }
		    return result;
		  };
		}

		_getTag = getTag;
		return _getTag;
	}

	var Stack$2 = require_Stack(),
	    equalArrays = _equalArrays,
	    equalByTag = _equalByTag,
	    equalObjects = _equalObjects,
	    getTag = require_getTag(),
	    isArray$6 = isArray_1,
	    isBuffer$1 = requireIsBuffer(),
	    isTypedArray$3 = isTypedArray_1;

	/** Used to compose bitmasks for value comparisons. */
	var COMPARE_PARTIAL_FLAG$2 = 1;

	/** `Object#toString` result references. */
	var argsTag = '[object Arguments]',
	    arrayTag = '[object Array]',
	    objectTag = '[object Object]';

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty$1 = objectProto.hasOwnProperty;

	/**
	 * A specialized version of `baseIsEqual` for arrays and objects which performs
	 * deep comparisons and tracks traversed objects enabling objects with circular
	 * references to be compared.
	 *
	 * @private
	 * @param {Object} object The object to compare.
	 * @param {Object} other The other object to compare.
	 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
	 * @param {Function} customizer The function to customize comparisons.
	 * @param {Function} equalFunc The function to determine equivalents of values.
	 * @param {Object} [stack] Tracks traversed `object` and `other` objects.
	 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	 */
	function baseIsEqualDeep$1(object, other, bitmask, customizer, equalFunc, stack) {
	  var objIsArr = isArray$6(object),
	      othIsArr = isArray$6(other),
	      objTag = objIsArr ? arrayTag : getTag(object),
	      othTag = othIsArr ? arrayTag : getTag(other);

	  objTag = objTag == argsTag ? objectTag : objTag;
	  othTag = othTag == argsTag ? objectTag : othTag;

	  var objIsObj = objTag == objectTag,
	      othIsObj = othTag == objectTag,
	      isSameTag = objTag == othTag;

	  if (isSameTag && isBuffer$1(object)) {
	    if (!isBuffer$1(other)) {
	      return false;
	    }
	    objIsArr = true;
	    objIsObj = false;
	  }
	  if (isSameTag && !objIsObj) {
	    stack || (stack = new Stack$2);
	    return (objIsArr || isTypedArray$3(object))
	      ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
	      : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
	  }
	  if (!(bitmask & COMPARE_PARTIAL_FLAG$2)) {
	    var objIsWrapped = objIsObj && hasOwnProperty$1.call(object, '__wrapped__'),
	        othIsWrapped = othIsObj && hasOwnProperty$1.call(other, '__wrapped__');

	    if (objIsWrapped || othIsWrapped) {
	      var objUnwrapped = objIsWrapped ? object.value() : object,
	          othUnwrapped = othIsWrapped ? other.value() : other;

	      stack || (stack = new Stack$2);
	      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
	    }
	  }
	  if (!isSameTag) {
	    return false;
	  }
	  stack || (stack = new Stack$2);
	  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
	}

	var _baseIsEqualDeep = baseIsEqualDeep$1;

	var baseIsEqualDeep = _baseIsEqualDeep,
	    isObjectLike$1 = isObjectLike_1;

	/**
	 * The base implementation of `_.isEqual` which supports partial comparisons
	 * and tracks traversed objects.
	 *
	 * @private
	 * @param {*} value The value to compare.
	 * @param {*} other The other value to compare.
	 * @param {boolean} bitmask The bitmask flags.
	 *  1 - Unordered comparison
	 *  2 - Partial comparison
	 * @param {Function} [customizer] The function to customize comparisons.
	 * @param {Object} [stack] Tracks traversed `value` and `other` objects.
	 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	 */
	function baseIsEqual$3(value, other, bitmask, customizer, stack) {
	  if (value === other) {
	    return true;
	  }
	  if (value == null || other == null || (!isObjectLike$1(value) && !isObjectLike$1(other))) {
	    return value !== value && other !== other;
	  }
	  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual$3, stack);
	}

	var _baseIsEqual = baseIsEqual$3;

	var baseIsEqual$2 = _baseIsEqual;

	/**
	 * Performs a deep comparison between two values to determine if they are
	 * equivalent.
	 *
	 * **Note:** This method supports comparing arrays, array buffers, booleans,
	 * date objects, error objects, maps, numbers, `Object` objects, regexes,
	 * sets, strings, symbols, and typed arrays. `Object` objects are compared
	 * by their own, not inherited, enumerable properties. Functions and DOM
	 * nodes are compared by strict equality, i.e. `===`.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to compare.
	 * @param {*} other The other value to compare.
	 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	 * @example
	 *
	 * var object = { 'a': 1 };
	 * var other = { 'a': 1 };
	 *
	 * _.isEqual(object, other);
	 * // => true
	 *
	 * object === other;
	 * // => false
	 */
	function isEqual$1(value, other) {
	  return baseIsEqual$2(value, other);
	}

	var isEqual_1 = isEqual$1;

	/**
	 * A specialized version of `_.map` for arrays without support for iteratee
	 * shorthands.
	 *
	 * @private
	 * @param {Array} [array] The array to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array} Returns the new mapped array.
	 */

	var _arrayMap;
	var hasRequired_arrayMap;

	function require_arrayMap () {
		if (hasRequired_arrayMap) return _arrayMap;
		hasRequired_arrayMap = 1;
		function arrayMap(array, iteratee) {
		  var index = -1,
		      length = array == null ? 0 : array.length,
		      result = Array(length);

		  while (++index < length) {
		    result[index] = iteratee(array[index], index, array);
		  }
		  return result;
		}

		_arrayMap = arrayMap;
		return _arrayMap;
	}

	var Stack$1 = require_Stack(),
	    baseIsEqual$1 = _baseIsEqual;

	/** Used to compose bitmasks for value comparisons. */
	var COMPARE_PARTIAL_FLAG$1 = 1,
	    COMPARE_UNORDERED_FLAG$1 = 2;

	/**
	 * The base implementation of `_.isMatch` without support for iteratee shorthands.
	 *
	 * @private
	 * @param {Object} object The object to inspect.
	 * @param {Object} source The object of property values to match.
	 * @param {Array} matchData The property names, values, and compare flags to match.
	 * @param {Function} [customizer] The function to customize comparisons.
	 * @returns {boolean} Returns `true` if `object` is a match, else `false`.
	 */
	function baseIsMatch$1(object, source, matchData, customizer) {
	  var index = matchData.length,
	      length = index,
	      noCustomizer = !customizer;

	  if (object == null) {
	    return !length;
	  }
	  object = Object(object);
	  while (index--) {
	    var data = matchData[index];
	    if ((noCustomizer && data[2])
	          ? data[1] !== object[data[0]]
	          : !(data[0] in object)
	        ) {
	      return false;
	    }
	  }
	  while (++index < length) {
	    data = matchData[index];
	    var key = data[0],
	        objValue = object[key],
	        srcValue = data[1];

	    if (noCustomizer && data[2]) {
	      if (objValue === undefined && !(key in object)) {
	        return false;
	      }
	    } else {
	      var stack = new Stack$1;
	      if (customizer) {
	        var result = customizer(objValue, srcValue, key, object, source, stack);
	      }
	      if (!(result === undefined
	            ? baseIsEqual$1(srcValue, objValue, COMPARE_PARTIAL_FLAG$1 | COMPARE_UNORDERED_FLAG$1, customizer, stack)
	            : result
	          )) {
	        return false;
	      }
	    }
	  }
	  return true;
	}

	var _baseIsMatch = baseIsMatch$1;

	var isObject$7 = isObject_1;

	/**
	 * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` if suitable for strict
	 *  equality comparisons, else `false`.
	 */
	function isStrictComparable$2(value) {
	  return value === value && !isObject$7(value);
	}

	var _isStrictComparable = isStrictComparable$2;

	var isStrictComparable$1 = _isStrictComparable,
	    keys$2 = requireKeys();

	/**
	 * Gets the property names, values, and compare flags of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the match data of `object`.
	 */
	function getMatchData$1(object) {
	  var result = keys$2(object),
	      length = result.length;

	  while (length--) {
	    var key = result[length],
	        value = object[key];

	    result[length] = [key, value, isStrictComparable$1(value)];
	  }
	  return result;
	}

	var _getMatchData = getMatchData$1;

	/**
	 * A specialized version of `matchesProperty` for source values suitable
	 * for strict equality comparisons, i.e. `===`.
	 *
	 * @private
	 * @param {string} key The key of the property to get.
	 * @param {*} srcValue The value to match.
	 * @returns {Function} Returns the new spec function.
	 */

	function matchesStrictComparable$2(key, srcValue) {
	  return function(object) {
	    if (object == null) {
	      return false;
	    }
	    return object[key] === srcValue &&
	      (srcValue !== undefined || (key in Object(object)));
	  };
	}

	var _matchesStrictComparable = matchesStrictComparable$2;

	var baseIsMatch = _baseIsMatch,
	    getMatchData = _getMatchData,
	    matchesStrictComparable$1 = _matchesStrictComparable;

	/**
	 * The base implementation of `_.matches` which doesn't clone `source`.
	 *
	 * @private
	 * @param {Object} source The object of property values to match.
	 * @returns {Function} Returns the new spec function.
	 */
	function baseMatches$1(source) {
	  var matchData = getMatchData(source);
	  if (matchData.length == 1 && matchData[0][2]) {
	    return matchesStrictComparable$1(matchData[0][0], matchData[0][1]);
	  }
	  return function(object) {
	    return object === source || baseIsMatch(object, source, matchData);
	  };
	}

	var _baseMatches = baseMatches$1;

	var isSymbol_1;
	var hasRequiredIsSymbol;

	function requireIsSymbol () {
		if (hasRequiredIsSymbol) return isSymbol_1;
		hasRequiredIsSymbol = 1;
		var baseGetTag = _baseGetTag,
		    isObjectLike = isObjectLike_1;

		/** `Object#toString` result references. */
		var symbolTag = '[object Symbol]';

		/**
		 * Checks if `value` is classified as a `Symbol` primitive or object.
		 *
		 * @static
		 * @memberOf _
		 * @since 4.0.0
		 * @category Lang
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
		 * @example
		 *
		 * _.isSymbol(Symbol.iterator);
		 * // => true
		 *
		 * _.isSymbol('abc');
		 * // => false
		 */
		function isSymbol(value) {
		  return typeof value == 'symbol' ||
		    (isObjectLike(value) && baseGetTag(value) == symbolTag);
		}

		isSymbol_1 = isSymbol;
		return isSymbol_1;
	}

	var _isKey;
	var hasRequired_isKey;

	function require_isKey () {
		if (hasRequired_isKey) return _isKey;
		hasRequired_isKey = 1;
		var isArray = isArray_1,
		    isSymbol = requireIsSymbol();

		/** Used to match property names within property paths. */
		var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
		    reIsPlainProp = /^\w*$/;

		/**
		 * Checks if `value` is a property name and not a property path.
		 *
		 * @private
		 * @param {*} value The value to check.
		 * @param {Object} [object] The object to query keys on.
		 * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
		 */
		function isKey(value, object) {
		  if (isArray(value)) {
		    return false;
		  }
		  var type = typeof value;
		  if (type == 'number' || type == 'symbol' || type == 'boolean' ||
		      value == null || isSymbol(value)) {
		    return true;
		  }
		  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
		    (object != null && value in Object(object));
		}

		_isKey = isKey;
		return _isKey;
	}

	var MapCache = _MapCache;

	/** Error message constants. */
	var FUNC_ERROR_TEXT$1 = 'Expected a function';

	/**
	 * Creates a function that memoizes the result of `func`. If `resolver` is
	 * provided, it determines the cache key for storing the result based on the
	 * arguments provided to the memoized function. By default, the first argument
	 * provided to the memoized function is used as the map cache key. The `func`
	 * is invoked with the `this` binding of the memoized function.
	 *
	 * **Note:** The cache is exposed as the `cache` property on the memoized
	 * function. Its creation may be customized by replacing the `_.memoize.Cache`
	 * constructor with one whose instances implement the
	 * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
	 * method interface of `clear`, `delete`, `get`, `has`, and `set`.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Function
	 * @param {Function} func The function to have its output memoized.
	 * @param {Function} [resolver] The function to resolve the cache key.
	 * @returns {Function} Returns the new memoized function.
	 * @example
	 *
	 * var object = { 'a': 1, 'b': 2 };
	 * var other = { 'c': 3, 'd': 4 };
	 *
	 * var values = _.memoize(_.values);
	 * values(object);
	 * // => [1, 2]
	 *
	 * values(other);
	 * // => [3, 4]
	 *
	 * object.a = 2;
	 * values(object);
	 * // => [1, 2]
	 *
	 * // Modify the result cache.
	 * values.cache.set(object, ['a', 'b']);
	 * values(object);
	 * // => ['a', 'b']
	 *
	 * // Replace `_.memoize.Cache`.
	 * _.memoize.Cache = WeakMap;
	 */
	function memoize$1(func, resolver) {
	  if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
	    throw new TypeError(FUNC_ERROR_TEXT$1);
	  }
	  var memoized = function() {
	    var args = arguments,
	        key = resolver ? resolver.apply(this, args) : args[0],
	        cache = memoized.cache;

	    if (cache.has(key)) {
	      return cache.get(key);
	    }
	    var result = func.apply(this, args);
	    memoized.cache = cache.set(key, result) || cache;
	    return result;
	  };
	  memoized.cache = new (memoize$1.Cache || MapCache);
	  return memoized;
	}

	// Expose `MapCache`.
	memoize$1.Cache = MapCache;

	var memoize_1 = memoize$1;

	var _memoizeCapped;
	var hasRequired_memoizeCapped;

	function require_memoizeCapped () {
		if (hasRequired_memoizeCapped) return _memoizeCapped;
		hasRequired_memoizeCapped = 1;
		var memoize = memoize_1;

		/** Used as the maximum memoize cache size. */
		var MAX_MEMOIZE_SIZE = 500;

		/**
		 * A specialized version of `_.memoize` which clears the memoized function's
		 * cache when it exceeds `MAX_MEMOIZE_SIZE`.
		 *
		 * @private
		 * @param {Function} func The function to have its output memoized.
		 * @returns {Function} Returns the new memoized function.
		 */
		function memoizeCapped(func) {
		  var result = memoize(func, function(key) {
		    if (cache.size === MAX_MEMOIZE_SIZE) {
		      cache.clear();
		    }
		    return key;
		  });

		  var cache = result.cache;
		  return result;
		}

		_memoizeCapped = memoizeCapped;
		return _memoizeCapped;
	}

	var _stringToPath;
	var hasRequired_stringToPath;

	function require_stringToPath () {
		if (hasRequired_stringToPath) return _stringToPath;
		hasRequired_stringToPath = 1;
		var memoizeCapped = require_memoizeCapped();

		/** Used to match property names within property paths. */
		var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

		/** Used to match backslashes in property paths. */
		var reEscapeChar = /\\(\\)?/g;

		/**
		 * Converts `string` to a property path array.
		 *
		 * @private
		 * @param {string} string The string to convert.
		 * @returns {Array} Returns the property path array.
		 */
		var stringToPath = memoizeCapped(function(string) {
		  var result = [];
		  if (string.charCodeAt(0) === 46 /* . */) {
		    result.push('');
		  }
		  string.replace(rePropName, function(match, number, quote, subString) {
		    result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));
		  });
		  return result;
		});

		_stringToPath = stringToPath;
		return _stringToPath;
	}

	var Symbol$1 = _Symbol,
	    arrayMap$1 = require_arrayMap(),
	    isArray$5 = isArray_1,
	    isSymbol$1 = requireIsSymbol();

	/** Used as references for various `Number` constants. */
	var INFINITY$1 = 1 / 0;

	/** Used to convert symbols to primitives and strings. */
	var symbolProto = Symbol$1 ? Symbol$1.prototype : undefined,
	    symbolToString = symbolProto ? symbolProto.toString : undefined;

	/**
	 * The base implementation of `_.toString` which doesn't convert nullish
	 * values to empty strings.
	 *
	 * @private
	 * @param {*} value The value to process.
	 * @returns {string} Returns the string.
	 */
	function baseToString$1(value) {
	  // Exit early for strings to avoid a performance hit in some environments.
	  if (typeof value == 'string') {
	    return value;
	  }
	  if (isArray$5(value)) {
	    // Recursively convert values (susceptible to call stack limits).
	    return arrayMap$1(value, baseToString$1) + '';
	  }
	  if (isSymbol$1(value)) {
	    return symbolToString ? symbolToString.call(value) : '';
	  }
	  var result = (value + '');
	  return (result == '0' && (1 / value) == -INFINITY$1) ? '-0' : result;
	}

	var _baseToString = baseToString$1;

	var baseToString = _baseToString;

	/**
	 * Converts `value` to a string. An empty string is returned for `null`
	 * and `undefined` values. The sign of `-0` is preserved.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to convert.
	 * @returns {string} Returns the converted string.
	 * @example
	 *
	 * _.toString(null);
	 * // => ''
	 *
	 * _.toString(-0);
	 * // => '-0'
	 *
	 * _.toString([1, 2, 3]);
	 * // => '1,2,3'
	 */
	function toString$4(value) {
	  return value == null ? '' : baseToString(value);
	}

	var toString_1 = toString$4;

	var _castPath;
	var hasRequired_castPath;

	function require_castPath () {
		if (hasRequired_castPath) return _castPath;
		hasRequired_castPath = 1;
		var isArray = isArray_1,
		    isKey = require_isKey(),
		    stringToPath = require_stringToPath(),
		    toString = toString_1;

		/**
		 * Casts `value` to a path array if it's not one.
		 *
		 * @private
		 * @param {*} value The value to inspect.
		 * @param {Object} [object] The object to query keys on.
		 * @returns {Array} Returns the cast property path array.
		 */
		function castPath(value, object) {
		  if (isArray(value)) {
		    return value;
		  }
		  return isKey(value, object) ? [value] : stringToPath(toString(value));
		}

		_castPath = castPath;
		return _castPath;
	}

	var _toKey;
	var hasRequired_toKey;

	function require_toKey () {
		if (hasRequired_toKey) return _toKey;
		hasRequired_toKey = 1;
		var isSymbol = requireIsSymbol();

		/** Used as references for various `Number` constants. */
		var INFINITY = 1 / 0;

		/**
		 * Converts `value` to a string key if it's not a string or symbol.
		 *
		 * @private
		 * @param {*} value The value to inspect.
		 * @returns {string|symbol} Returns the key.
		 */
		function toKey(value) {
		  if (typeof value == 'string' || isSymbol(value)) {
		    return value;
		  }
		  var result = (value + '');
		  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
		}

		_toKey = toKey;
		return _toKey;
	}

	var castPath$3 = require_castPath(),
	    toKey$4 = require_toKey();

	/**
	 * The base implementation of `_.get` without support for default values.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {Array|string} path The path of the property to get.
	 * @returns {*} Returns the resolved value.
	 */
	function baseGet$3(object, path) {
	  path = castPath$3(path, object);

	  var index = 0,
	      length = path.length;

	  while (object != null && index < length) {
	    object = object[toKey$4(path[index++])];
	  }
	  return (index && index == length) ? object : undefined;
	}

	var _baseGet = baseGet$3;

	var baseGet$2 = _baseGet;

	/**
	 * Gets the value at `path` of `object`. If the resolved value is
	 * `undefined`, the `defaultValue` is returned in its place.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.7.0
	 * @category Object
	 * @param {Object} object The object to query.
	 * @param {Array|string} path The path of the property to get.
	 * @param {*} [defaultValue] The value returned for `undefined` resolved values.
	 * @returns {*} Returns the resolved value.
	 * @example
	 *
	 * var object = { 'a': [{ 'b': { 'c': 3 } }] };
	 *
	 * _.get(object, 'a[0].b.c');
	 * // => 3
	 *
	 * _.get(object, ['a', '0', 'b', 'c']);
	 * // => 3
	 *
	 * _.get(object, 'a.b.c', 'default');
	 * // => 'default'
	 */
	function get$2(object, path, defaultValue) {
	  var result = object == null ? undefined : baseGet$2(object, path);
	  return result === undefined ? defaultValue : result;
	}

	var get_1 = get$2;

	/**
	 * The base implementation of `_.hasIn` without support for deep paths.
	 *
	 * @private
	 * @param {Object} [object] The object to query.
	 * @param {Array|string} key The key to check.
	 * @returns {boolean} Returns `true` if `key` exists, else `false`.
	 */

	function baseHasIn$1(object, key) {
	  return object != null && key in Object(object);
	}

	var _baseHasIn = baseHasIn$1;

	var castPath$2 = require_castPath(),
	    isArguments$3 = requireIsArguments(),
	    isArray$4 = isArray_1,
	    isIndex$2 = _isIndex,
	    isLength$1 = requireIsLength$1(),
	    toKey$3 = require_toKey();

	/**
	 * Checks if `path` exists on `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {Array|string} path The path to check.
	 * @param {Function} hasFunc The function to check properties.
	 * @returns {boolean} Returns `true` if `path` exists, else `false`.
	 */
	function hasPath$1(object, path, hasFunc) {
	  path = castPath$2(path, object);

	  var index = -1,
	      length = path.length,
	      result = false;

	  while (++index < length) {
	    var key = toKey$3(path[index]);
	    if (!(result = object != null && hasFunc(object, key))) {
	      break;
	    }
	    object = object[key];
	  }
	  if (result || ++index != length) {
	    return result;
	  }
	  length = object == null ? 0 : object.length;
	  return !!length && isLength$1(length) && isIndex$2(key, length) &&
	    (isArray$4(object) || isArguments$3(object));
	}

	var _hasPath = hasPath$1;

	var baseHasIn = _baseHasIn,
	    hasPath = _hasPath;

	/**
	 * Checks if `path` is a direct or inherited property of `object`.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Object
	 * @param {Object} object The object to query.
	 * @param {Array|string} path The path to check.
	 * @returns {boolean} Returns `true` if `path` exists, else `false`.
	 * @example
	 *
	 * var object = _.create({ 'a': _.create({ 'b': 2 }) });
	 *
	 * _.hasIn(object, 'a');
	 * // => true
	 *
	 * _.hasIn(object, 'a.b');
	 * // => true
	 *
	 * _.hasIn(object, ['a', 'b']);
	 * // => true
	 *
	 * _.hasIn(object, 'b');
	 * // => false
	 */
	function hasIn$1(object, path) {
	  return object != null && hasPath(object, path, baseHasIn);
	}

	var hasIn_1 = hasIn$1;

	var baseIsEqual = _baseIsEqual,
	    get$1 = get_1,
	    hasIn = hasIn_1,
	    isKey$1 = require_isKey(),
	    isStrictComparable = _isStrictComparable,
	    matchesStrictComparable = _matchesStrictComparable,
	    toKey$2 = require_toKey();

	/** Used to compose bitmasks for value comparisons. */
	var COMPARE_PARTIAL_FLAG = 1,
	    COMPARE_UNORDERED_FLAG = 2;

	/**
	 * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
	 *
	 * @private
	 * @param {string} path The path of the property to get.
	 * @param {*} srcValue The value to match.
	 * @returns {Function} Returns the new spec function.
	 */
	function baseMatchesProperty$1(path, srcValue) {
	  if (isKey$1(path) && isStrictComparable(srcValue)) {
	    return matchesStrictComparable(toKey$2(path), srcValue);
	  }
	  return function(object) {
	    var objValue = get$1(object, path);
	    return (objValue === undefined && objValue === srcValue)
	      ? hasIn(object, path)
	      : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
	  };
	}

	var _baseMatchesProperty = baseMatchesProperty$1;

	/**
	 * The base implementation of `_.property` without support for deep paths.
	 *
	 * @private
	 * @param {string} key The key of the property to get.
	 * @returns {Function} Returns the new accessor function.
	 */

	function baseProperty$1(key) {
	  return function(object) {
	    return object == null ? undefined : object[key];
	  };
	}

	var _baseProperty = baseProperty$1;

	var baseGet$1 = _baseGet;

	/**
	 * A specialized version of `baseProperty` which supports deep paths.
	 *
	 * @private
	 * @param {Array|string} path The path of the property to get.
	 * @returns {Function} Returns the new accessor function.
	 */
	function basePropertyDeep$1(path) {
	  return function(object) {
	    return baseGet$1(object, path);
	  };
	}

	var _basePropertyDeep = basePropertyDeep$1;

	var baseProperty = _baseProperty,
	    basePropertyDeep = _basePropertyDeep,
	    isKey = require_isKey(),
	    toKey$1 = require_toKey();

	/**
	 * Creates a function that returns the value at `path` of a given object.
	 *
	 * @static
	 * @memberOf _
	 * @since 2.4.0
	 * @category Util
	 * @param {Array|string} path The path of the property to get.
	 * @returns {Function} Returns the new accessor function.
	 * @example
	 *
	 * var objects = [
	 *   { 'a': { 'b': 2 } },
	 *   { 'a': { 'b': 1 } }
	 * ];
	 *
	 * _.map(objects, _.property('a.b'));
	 * // => [2, 1]
	 *
	 * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
	 * // => [1, 2]
	 */
	function property$2(path) {
	  return isKey(path) ? baseProperty(toKey$1(path)) : basePropertyDeep(path);
	}

	var property_1 = property$2;

	var baseMatches = _baseMatches,
	    baseMatchesProperty = _baseMatchesProperty,
	    identity$3 = identity_1,
	    isArray$3 = isArray_1,
	    property$1 = property_1;

	/**
	 * The base implementation of `_.iteratee`.
	 *
	 * @private
	 * @param {*} [value=_.identity] The value to convert to an iteratee.
	 * @returns {Function} Returns the iteratee.
	 */
	function baseIteratee$3(value) {
	  // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
	  // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
	  if (typeof value == 'function') {
	    return value;
	  }
	  if (value == null) {
	    return identity$3;
	  }
	  if (typeof value == 'object') {
	    return isArray$3(value)
	      ? baseMatchesProperty(value[0], value[1])
	      : baseMatches(value);
	  }
	  return property$1(value);
	}

	var _baseIteratee = baseIteratee$3;

	var _defineProperty;
	var hasRequired_defineProperty;

	function require_defineProperty () {
		if (hasRequired_defineProperty) return _defineProperty;
		hasRequired_defineProperty = 1;
		var getNative = _getNative;

		var defineProperty = (function() {
		  try {
		    var func = getNative(Object, 'defineProperty');
		    func({}, '', {});
		    return func;
		  } catch (e) {}
		}());

		_defineProperty = defineProperty;
		return _defineProperty;
	}

	var _baseAssignValue;
	var hasRequired_baseAssignValue;

	function require_baseAssignValue () {
		if (hasRequired_baseAssignValue) return _baseAssignValue;
		hasRequired_baseAssignValue = 1;
		var defineProperty = require_defineProperty();

		/**
		 * The base implementation of `assignValue` and `assignMergeValue` without
		 * value checks.
		 *
		 * @private
		 * @param {Object} object The object to modify.
		 * @param {string} key The key of the property to assign.
		 * @param {*} value The value to assign.
		 */
		function baseAssignValue(object, key, value) {
		  if (key == '__proto__' && defineProperty) {
		    defineProperty(object, key, {
		      'configurable': true,
		      'enumerable': true,
		      'value': value,
		      'writable': true
		    });
		  } else {
		    object[key] = value;
		  }
		}

		_baseAssignValue = baseAssignValue;
		return _baseAssignValue;
	}

	var _assignValue;
	var hasRequired_assignValue;

	function require_assignValue () {
		if (hasRequired_assignValue) return _assignValue;
		hasRequired_assignValue = 1;
		var baseAssignValue = require_baseAssignValue(),
		    eq = requireEq$1();

		/** Used for built-in method references. */
		var objectProto = Object.prototype;

		/** Used to check objects for own properties. */
		var hasOwnProperty = objectProto.hasOwnProperty;

		/**
		 * Assigns `value` to `key` of `object` if the existing value is not equivalent
		 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
		 * for equality comparisons.
		 *
		 * @private
		 * @param {Object} object The object to modify.
		 * @param {string} key The key of the property to assign.
		 * @param {*} value The value to assign.
		 */
		function assignValue(object, key, value) {
		  var objValue = object[key];
		  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
		      (value === undefined && !(key in object))) {
		    baseAssignValue(object, key, value);
		  }
		}

		_assignValue = assignValue;
		return _assignValue;
	}

	var assignValue = require_assignValue(),
	    castPath$1 = require_castPath(),
	    isIndex$1 = _isIndex,
	    isObject$6 = isObject_1,
	    toKey = require_toKey();

	/**
	 * The base implementation of `_.set`.
	 *
	 * @private
	 * @param {Object} object The object to modify.
	 * @param {Array|string} path The path of the property to set.
	 * @param {*} value The value to set.
	 * @param {Function} [customizer] The function to customize path creation.
	 * @returns {Object} Returns `object`.
	 */
	function baseSet$1(object, path, value, customizer) {
	  if (!isObject$6(object)) {
	    return object;
	  }
	  path = castPath$1(path, object);

	  var index = -1,
	      length = path.length,
	      lastIndex = length - 1,
	      nested = object;

	  while (nested != null && ++index < length) {
	    var key = toKey(path[index]),
	        newValue = value;

	    if (key === '__proto__' || key === 'constructor' || key === 'prototype') {
	      return object;
	    }

	    if (index != lastIndex) {
	      var objValue = nested[key];
	      newValue = customizer ? customizer(objValue, key, nested) : undefined;
	      if (newValue === undefined) {
	        newValue = isObject$6(objValue)
	          ? objValue
	          : (isIndex$1(path[index + 1]) ? [] : {});
	      }
	    }
	    assignValue(nested, key, newValue);
	    nested = nested[key];
	  }
	  return object;
	}

	var _baseSet = baseSet$1;

	var baseGet = _baseGet,
	    baseSet = _baseSet,
	    castPath = require_castPath();

	/**
	 * The base implementation of  `_.pickBy` without support for iteratee shorthands.
	 *
	 * @private
	 * @param {Object} object The source object.
	 * @param {string[]} paths The property paths to pick.
	 * @param {Function} predicate The function invoked per property.
	 * @returns {Object} Returns the new object.
	 */
	function basePickBy$1(object, paths, predicate) {
	  var index = -1,
	      length = paths.length,
	      result = {};

	  while (++index < length) {
	    var path = paths[index],
	        value = baseGet(object, path);

	    if (predicate(value, path)) {
	      baseSet(result, castPath(path, object), value);
	    }
	  }
	  return result;
	}

	var _basePickBy = basePickBy$1;

	var _getSymbolsIn;
	var hasRequired_getSymbolsIn;

	function require_getSymbolsIn () {
		if (hasRequired_getSymbolsIn) return _getSymbolsIn;
		hasRequired_getSymbolsIn = 1;
		var arrayPush = require_arrayPush(),
		    getPrototype = _getPrototype,
		    getSymbols = require_getSymbols(),
		    stubArray = requireStubArray();

		/* Built-in method references for those with the same name as other `lodash` methods. */
		var nativeGetSymbols = Object.getOwnPropertySymbols;

		/**
		 * Creates an array of the own and inherited enumerable symbols of `object`.
		 *
		 * @private
		 * @param {Object} object The object to query.
		 * @returns {Array} Returns the array of symbols.
		 */
		var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
		  var result = [];
		  while (object) {
		    arrayPush(result, getSymbols(object));
		    object = getPrototype(object);
		  }
		  return result;
		};

		_getSymbolsIn = getSymbolsIn;
		return _getSymbolsIn;
	}

	/**
	 * This function is like
	 * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
	 * except that it includes inherited enumerable properties.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 */

	var _nativeKeysIn;
	var hasRequired_nativeKeysIn;

	function require_nativeKeysIn () {
		if (hasRequired_nativeKeysIn) return _nativeKeysIn;
		hasRequired_nativeKeysIn = 1;
		function nativeKeysIn(object) {
		  var result = [];
		  if (object != null) {
		    for (var key in Object(object)) {
		      result.push(key);
		    }
		  }
		  return result;
		}

		_nativeKeysIn = nativeKeysIn;
		return _nativeKeysIn;
	}

	var _baseKeysIn;
	var hasRequired_baseKeysIn;

	function require_baseKeysIn () {
		if (hasRequired_baseKeysIn) return _baseKeysIn;
		hasRequired_baseKeysIn = 1;
		var isObject = isObject_1,
		    isPrototype = require_isPrototype(),
		    nativeKeysIn = require_nativeKeysIn();

		/** Used for built-in method references. */
		var objectProto = Object.prototype;

		/** Used to check objects for own properties. */
		var hasOwnProperty = objectProto.hasOwnProperty;

		/**
		 * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
		 *
		 * @private
		 * @param {Object} object The object to query.
		 * @returns {Array} Returns the array of property names.
		 */
		function baseKeysIn(object) {
		  if (!isObject(object)) {
		    return nativeKeysIn(object);
		  }
		  var isProto = isPrototype(object),
		      result = [];

		  for (var key in object) {
		    if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
		      result.push(key);
		    }
		  }
		  return result;
		}

		_baseKeysIn = baseKeysIn;
		return _baseKeysIn;
	}

	var keysIn_1;
	var hasRequiredKeysIn;

	function requireKeysIn () {
		if (hasRequiredKeysIn) return keysIn_1;
		hasRequiredKeysIn = 1;
		var arrayLikeKeys = require_arrayLikeKeys(),
		    baseKeysIn = require_baseKeysIn(),
		    isArrayLike = requireIsArrayLike();

		/**
		 * Creates an array of the own and inherited enumerable property names of `object`.
		 *
		 * **Note:** Non-object values are coerced to objects.
		 *
		 * @static
		 * @memberOf _
		 * @since 3.0.0
		 * @category Object
		 * @param {Object} object The object to query.
		 * @returns {Array} Returns the array of property names.
		 * @example
		 *
		 * function Foo() {
		 *   this.a = 1;
		 *   this.b = 2;
		 * }
		 *
		 * Foo.prototype.c = 3;
		 *
		 * _.keysIn(new Foo);
		 * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
		 */
		function keysIn(object) {
		  return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
		}

		keysIn_1 = keysIn;
		return keysIn_1;
	}

	var _getAllKeysIn;
	var hasRequired_getAllKeysIn;

	function require_getAllKeysIn () {
		if (hasRequired_getAllKeysIn) return _getAllKeysIn;
		hasRequired_getAllKeysIn = 1;
		var baseGetAllKeys = require_baseGetAllKeys(),
		    getSymbolsIn = require_getSymbolsIn(),
		    keysIn = requireKeysIn();

		/**
		 * Creates an array of own and inherited enumerable property names and
		 * symbols of `object`.
		 *
		 * @private
		 * @param {Object} object The object to query.
		 * @returns {Array} Returns the array of property names and symbols.
		 */
		function getAllKeysIn(object) {
		  return baseGetAllKeys(object, keysIn, getSymbolsIn);
		}

		_getAllKeysIn = getAllKeysIn;
		return _getAllKeysIn;
	}

	var arrayMap = require_arrayMap(),
	    baseIteratee$2 = _baseIteratee,
	    basePickBy = _basePickBy,
	    getAllKeysIn = require_getAllKeysIn();

	/**
	 * Creates an object composed of the `object` properties `predicate` returns
	 * truthy for. The predicate is invoked with two arguments: (value, key).
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Object
	 * @param {Object} object The source object.
	 * @param {Function} [predicate=_.identity] The function invoked per property.
	 * @returns {Object} Returns the new object.
	 * @example
	 *
	 * var object = { 'a': 1, 'b': '2', 'c': 3 };
	 *
	 * _.pickBy(object, _.isNumber);
	 * // => { 'a': 1, 'c': 3 }
	 */
	function pickBy$1(object, predicate) {
	  if (object == null) {
	    return {};
	  }
	  var props = arrayMap(getAllKeysIn(object), function(prop) {
	    return [prop];
	  });
	  predicate = baseIteratee$2(predicate);
	  return basePickBy(object, props, function(value, path) {
	    return predicate(value, path[0]);
	  });
	}

	var pickBy_1 = pickBy$1;

	var __defProp$I = Object.defineProperty;
	var __getOwnPropDesc$I = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames$I = Object.getOwnPropertyNames;
	var __hasOwnProp$I = Object.prototype.hasOwnProperty;
	var __export$I = (target, all) => {
	  for (var name in all)
	    __defProp$I(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps$I = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames$I(from))
	      if (!__hasOwnProp$I.call(to, key) && key !== except)
	        __defProp$I(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc$I(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS$I = (mod) => __copyProps$I(__defProp$I({}, "__esModule", { value: true }), mod);
	var base_sql_expression_exports = {};
	__export$I(base_sql_expression_exports, {
	  BaseSqlExpression: () => BaseSqlExpression
	});
	var baseSqlExpression = __toCommonJS$I(base_sql_expression_exports);
	class BaseSqlExpression {
	}

	var __defProp$H = Object.defineProperty;
	var __getOwnPropDesc$H = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames$H = Object.getOwnPropertyNames;
	var __hasOwnProp$H = Object.prototype.hasOwnProperty;
	var __export$H = (target, all) => {
	  for (var name in all)
	    __defProp$H(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps$H = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames$H(from))
	      if (!__hasOwnProp$H.call(to, key) && key !== except)
	        __defProp$H(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc$H(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS$H = (mod) => __copyProps$H(__defProp$H({}, "__esModule", { value: true }), mod);
	var association_path_exports = {};
	__export$H(association_path_exports, {
	  AssociationPath: () => AssociationPath
	});
	var associationPath = __toCommonJS$H(association_path_exports);
	var import_base_sql_expression$b = baseSqlExpression;
	class AssociationPath extends import_base_sql_expression$b.BaseSqlExpression {
	  constructor(associationPath, attributeName) {
	    super();
	    this.associationPath = associationPath;
	    this.attributeName = attributeName;
	  }
	}

	var bin = {};

	var syntax = {};

	Object.defineProperty(syntax, "__esModule", { value: true });
	syntax.ParseError = syntax.SyntaxNode = syntax.ReferenceRange = syntax.Reference = void 0;
	class Reference {
	    constructor(line, col, index) {
	        this.line = line;
	        this.col = col;
	        this.index = index;
	    }
	    advance(newline = false) {
	        if (newline) {
	            this.col = 1;
	            this.line++;
	            this.index++;
	        }
	        else {
	            this.index++;
	            this.col++;
	        }
	    }
	    valueOf() {
	        return this.index;
	    }
	    clone() {
	        return new Reference(this.line, this.col, this.index);
	    }
	    toString() {
	        return `(${this.line}:${this.col})`;
	    }
	}
	syntax.Reference = Reference;
	class ReferenceRange {
	    constructor(from, to) {
	        this.start = from;
	        this.end = to;
	    }
	    span(other) {
	        if (other.start.index < this.start.index) {
	            this.start = other.start;
	        }
	        if (other.end.index > this.end.index) {
	            this.end = other.end;
	        }
	    }
	    valueOf() {
	        return this.end.index;
	    }
	    clone() {
	        return new ReferenceRange(this.start.clone(), this.end.clone());
	    }
	    toString() {
	        return `${this.start.toString()} -> ${this.end.toString()}`;
	    }
	}
	syntax.ReferenceRange = ReferenceRange;
	class SyntaxNode {
	    constructor(type, value, ref) {
	        this.type = type;
	        this.ref = ref;
	        this.value = value;
	        this.reach = null;
	    }
	    getReach() {
	        if (this.reach) {
	            return this.reach;
	        }
	        if (typeof this.value == "string") {
	            return null;
	        }
	        if (this.value.length == 0) {
	            return null;
	        }
	        return this.value[this.value.length - 1].getReach();
	    }
	    flat() {
	        if (Array.isArray(this.value)) {
	            return this.value
	                .map(x => x.flat())
	                .reduce((prev, x) => prev + x, "");
	        }
	        else {
	            return this.value;
	        }
	    }
	}
	syntax.SyntaxNode = SyntaxNode;
	class ParseError {
	    constructor(msg, ref) {
	        this.stack = [];
	        this.msg = msg;
	        this.ref = ref;
	    }
	    add_stack(elm) {
	        this.stack.unshift(elm);
	    }
	    hasStack() {
	        return this.stack.length > 0;
	    }
	    toString() {
	        return `Parse Error: ${this.msg} ${this.ref.toString()}` +
	            (this.hasStack() ? "\nstack: " + this.stack.join(" -> ") : "");
	    }
	}
	syntax.ParseError = ParseError;

	var compiler = {};

	var parser = {};

	(function (exports) {
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.Parser = exports.Rule = exports.Sequence = exports.Select = exports.Term = exports.Not = exports.Omit = exports.Gather = exports.CharRange = exports.Literal = exports.ParseCount = exports.Count = void 0;
		const syntax_1 = syntax;
		function ParseExpression(json) {
		    switch (json['type']) {
		        case "literal": return new Literal(json);
		        case "range": return new CharRange(json);
		        case "term": return new Term(json);
		        case "not": return new Not(json);
		        case "omit": return new Omit(json);
		        case "gather": return new Gather(json);
		        case "select": return new Select(json);
		        case "sequence": return new Sequence(json);
		        default:
		            throw new TypeError(`Unknown expression type "${json['type']}"`);
		    }
		}
		var Count;
		(function (Count) {
		    Count["One"] = "1";
		    Count["ZeroToOne"] = "?";
		    Count["ZeroToMany"] = "*";
		    Count["OneToMany"] = "+";
		})(Count = exports.Count || (exports.Count = {}));
		function ParseCount(count) {
		    switch (count) {
		        case "1": return Count.One;
		        case "?": return Count.ZeroToOne;
		        case "*": return Count.ZeroToMany;
		        case "+": return Count.OneToMany;
		        default: throw new Error(`Unknown count "${count}"`);
		    }
		}
		exports.ParseCount = ParseCount;
		function CountCheck(count, mode) {
		    if (count < 1 && (mode == Count.One ||
		        mode == Count.OneToMany)) {
		        return false;
		    }
		    else if (count > 1 && (mode == Count.ZeroToOne ||
		        mode == Count.One)) {
		        return false;
		    }
		    else {
		        return true;
		    }
		}
		class Literal {
		    constructor(json) {
		        this.value = json['value'];
		        this.count = ParseCount(json['count']);
		    }
		    parse(input, ctx, cursor) {
		        let start = cursor.clone();
		        let consumption = 0;
		        while (true) {
		            if (consumption >= 1 && (this.count == Count.One || this.count == Count.ZeroToOne)) {
		                break;
		            }
		            if (this.match(input, cursor)) {
		                consumption++;
		            }
		            else {
		                break;
		            }
		        }
		        let range = new syntax_1.ReferenceRange(start, cursor);
		        if (!CountCheck(consumption, this.count)) {
		            return new syntax_1.ParseError(`Didn't consume the correct amount. ${consumption} ¬ ${this.count}`, range);
		        }
		        return new syntax_1.SyntaxNode("literal", input.slice(start.index, cursor.index), range);
		    }
		    match(input, cursor) {
		        if (this.value.length == 0) {
		            return false;
		        }
		        for (let i = 0; i < this.value.length; i++) {
		            if (cursor.index >= input.length) {
		                return false;
		            }
		            if (this.value[i] == input[cursor.index]) {
		                cursor.advance(input[cursor.index] == "\n");
		            }
		            else {
		                return false;
		            }
		        }
		        return true;
		    }
		    serialize() {
		        return {
		            type: "literal",
		            value: this.value,
		            count: this.count
		        };
		    }
		}
		exports.Literal = Literal;
		class CharRange extends Literal {
		    constructor(json) {
		        super(json);
		        this.to = json['to'];
		    }
		    match(input, cursor) {
		        if (cursor.index >= input.length) {
		            return false;
		        }
		        if (this.value <= input[cursor.index] && input[cursor.index] <= this.to) {
		            cursor.advance(input[cursor.index] == "\n");
		            return true;
		        }
		        return false;
		    }
		    matchChar(char, offset) {
		        return this.value <= char && char <= this.to;
		    }
		    serialize() {
		        let out = super.serialize();
		        out.type = "range";
		        out.to = this.to;
		        return out;
		    }
		}
		exports.CharRange = CharRange;
		class Gather {
		    constructor(json) {
		        this.expr = ParseExpression(json['expr']);
		    }
		    parse(input, ctx, cursor) {
		        let res = this.expr.parse(input, ctx, cursor);
		        if (res instanceof syntax_1.ParseError) {
		            return res;
		        }
		        res.value = res.flat();
		        return res;
		    }
		    serialize() {
		        return {
		            type: "gather",
		            expr: this.expr.serialize()
		        };
		    }
		}
		exports.Gather = Gather;
		class Omit extends Gather {
		    parse(input, ctx, cursor) {
		        let res = this.expr.parse(input, ctx, cursor);
		        if (res instanceof syntax_1.ParseError) {
		            return res;
		        }
		        return new syntax_1.SyntaxNode("omit", "", res.ref);
		    }
		    serialize() {
		        let out = super.serialize();
		        out.type = "omit";
		        return out;
		    }
		}
		exports.Omit = Omit;
		class Not {
		    constructor(json) {
		        this.expr = ParseExpression(json['expr']);
		        this.count = ParseCount(json['count']);
		    }
		    parse(input, ctx, cursor) {
		        let start = cursor.clone();
		        let consumption = 0;
		        while (true) {
		            if (consumption >= 1 && (this.count == Count.One || this.count == Count.ZeroToOne)) {
		                break;
		            }
		            if (cursor.index >= input.length) {
		                break;
		            }
		            let check = this.expr.parse(input, ctx, cursor.clone());
		            if (check instanceof syntax_1.ParseError) {
		                cursor.advance(input[cursor.index] == "\n");
		                consumption++;
		            }
		            else {
		                break;
		            }
		        }
		        let range = new syntax_1.ReferenceRange(start, cursor);
		        if (!CountCheck(consumption, this.count)) {
		            return new syntax_1.ParseError(`Didn't consume the correct amount. ${consumption} ${this.count}`, range);
		        }
		        return new syntax_1.SyntaxNode("literal", input.slice(start.index, cursor.index), range);
		    }
		    serialize() {
		        return {
		            type: "not",
		            count: this.count,
		            expr: this.expr.serialize()
		        };
		    }
		}
		exports.Not = Not;
		class Term {
		    constructor(json) {
		        this.value = json['value'];
		        this.count = ParseCount(json['count']);
		    }
		    parse(input, ctx, cursor) {
		        let expr = ctx.getRule(this.value);
		        let start = cursor.clone();
		        let consumption = 0;
		        let err = null;
		        let nodes = [];
		        while (true) {
		            if (consumption >= 1 && (this.count == Count.One || this.count == Count.ZeroToOne)) {
		                break;
		            }
		            if (cursor.index >= input.length) {
		                break;
		            }
		            let res = expr.parse(input, ctx, cursor.clone());
		            if (res instanceof syntax_1.ParseError) {
		                err = res;
		                break;
		            }
		            else {
		                if (this.count == Count.One) {
		                    return res;
		                }
		                cursor = res.ref.end;
		                nodes.push(res);
		                consumption++;
		            }
		        }
		        let range = new syntax_1.ReferenceRange(start, cursor);
		        if (!CountCheck(consumption, this.count)) {
		            if (!err) {
		                err = new syntax_1.ParseError(`Didn't consume the correct amount. ${consumption} ${this.count}`, range);
		            }
		            err.add_stack(this.value);
		            return err;
		        }
		        let out = new syntax_1.SyntaxNode(this.value + this.count, nodes, range);
		        out.reach = (err === null || err === void 0 ? void 0 : err.ref) || null;
		        return out;
		    }
		    serialize() {
		        return {
		            type: "term",
		            value: this.value,
		            count: this.count
		        };
		    }
		}
		exports.Term = Term;
		class Select {
		    constructor(json) {
		        this.exprs = [];
		        this.count = ParseCount(json['count']);
		        for (let value of json['exprs']) {
		            this.exprs.push(ParseExpression(value));
		        }
		    }
		    parse(input, ctx, cursor) {
		        let count = 0;
		        let start = cursor.clone();
		        let err = null;
		        let nodes = [];
		        while (true) {
		            if (count >= 1 && (this.count == Count.One || this.count == Count.ZeroToOne)) {
		                break;
		            }
		            let res = this.parseSingle(input, ctx, cursor.clone());
		            if (res instanceof syntax_1.ParseError) {
		                err = res;
		                break;
		            }
		            cursor = res.ref.end.clone();
		            nodes.push(res);
		            count++;
		        }
		        if (!CountCheck(count, this.count)) {
		            if (!err) {
		                err = new syntax_1.ParseError("Invalid count of sequence", new syntax_1.ReferenceRange(start, cursor));
		            }
		            return err;
		        }
		        let out = new syntax_1.SyntaxNode(`(...)${this.count == "1" ? "" : this.count}`, nodes, new syntax_1.ReferenceRange(start, cursor));
		        if (err) {
		            out.reach = err.ref;
		        }
		        return out;
		    }
		    parseSingle(input, ctx, cursor) {
		        let err = null;
		        for (let opt of this.exprs) {
		            let res = opt.parse(input, ctx, cursor.clone());
		            if (res instanceof syntax_1.ParseError) {
		                if (!err || err.ref.end.index <= res.ref.end.index) {
		                    err = res;
		                }
		                continue;
		            }
		            else {
		                return res;
		            }
		        }
		        return err ||
		            new syntax_1.ParseError("No valid option found", new syntax_1.ReferenceRange(cursor, cursor));
		    }
		    serialize() {
		        return {
		            type: "select",
		            count: this.count,
		            exprs: this.exprs.map(x => x.serialize())
		        };
		    }
		}
		exports.Select = Select;
		class Sequence extends Select {
		    constructor(json) {
		        super(json);
		    }
		    parse(input, ctx, cursor) {
		        let out = super.parse(input, ctx, cursor);
		        if (out instanceof syntax_1.ParseError) {
		            return out;
		        }
		        if (this.count == Count.One) {
		            return out.value[0];
		        }
		        return out;
		    }
		    parseSingle(input, ctx, cursor) {
		        let start = cursor.clone();
		        let nodes = [];
		        let reach = null;
		        for (let rule of this.exprs) {
		            let res = rule.parse(input, ctx, cursor.clone());
		            if (res instanceof syntax_1.ParseError) {
		                if (reach && reach.end.index > res.ref.end.index) {
		                    res.ref = reach;
		                    res.msg += "Unexpected syntax error (code POL)";
		                }
		                return res;
		            }
		            cursor = res.ref.end;
		            let nx_reach = res.getReach();
		            if (nx_reach) {
		                if (!reach || reach.valueOf() < nx_reach.valueOf()) {
		                    reach = nx_reach;
		                }
		            }
		            if (rule instanceof Omit) {
		                continue; // skip omitted operands
		            }
		            else {
		                // Merge selection of a single item inline
		                if (rule instanceof Select && rule.count == Count.One) {
		                    nodes.push(res.value[0]);
		                    continue;
		                }
		                nodes.push(res);
		            }
		        }
		        let out = new syntax_1.SyntaxNode('seq[]', nodes, new syntax_1.ReferenceRange(start, cursor));
		        out.reach = reach;
		        return out;
		    }
		    serialize() {
		        let out = super.serialize();
		        out.type = "sequence";
		        return out;
		    }
		}
		exports.Sequence = Sequence;
		class Rule {
		    constructor(name, json) {
		        this.name = name;
		        this.seq = ParseExpression(json);
		        this.verbose = false;
		    }
		    parse(input, ctx, cursor) {
		        if (this.verbose) {
		            console.log(`Parsing rule "${this.name}" at ${cursor.toString()}`);
		        }
		        let res = this.seq.parse(input, ctx, cursor);
		        if (res instanceof syntax_1.SyntaxNode) {
		            res.type = this.name;
		        }
		        return res;
		    }
		    setVerbose(mode) {
		        this.verbose = mode;
		    }
		    serialize() {
		        return this.seq.serialize();
		    }
		}
		exports.Rule = Rule;
		class Parser {
		    constructor(json) {
		        this.terms = new Map();
		        for (let key in json) {
		            this.addRule(key, new Rule(key, json[key]));
		        }
		    }
		    getRule(name) {
		        let rule = this.terms.get(name);
		        if (rule == null) {
		            throw new ReferenceError(`Unknown Rule ${name}`);
		        }
		        return rule;
		    }
		    addRule(name, rule) {
		        if (this.terms.has(name)) {
		            throw new Error(`Attempting to add rule "${name}" to a parser which already has a rule of that name`);
		        }
		        this.terms.set(name, rule);
		    }
		    parse(input, partial = false, entry = "program") {
		        let entryTerm = this.getRule(entry);
		        let res = entryTerm.parse(input, this, new syntax_1.Reference(1, 1, 0));
		        if (res instanceof syntax_1.ParseError) {
		            return res;
		        }
		        if (!partial && res.ref.end.index != input.length) {
		            return new syntax_1.ParseError("Unexpected syntax at ", res.getReach() || new syntax_1.ReferenceRange(res.ref.end.clone(), res.ref.end));
		        }
		        return res;
		    }
		    setVerbose(mode) {
		        var _a;
		        for (let key of this.terms.keys()) {
		            (_a = this.terms.get(key)) === null || _a === void 0 ? void 0 : _a.setVerbose(mode);
		        }
		    }
		    serialize() {
		        let blob = {};
		        for (let [key, rule] of this.terms) {
		            blob[key] = rule.serialize();
		        }
		        return blob;
		    }
		}
		exports.Parser = Parser; 
	} (parser));

	Object.defineProperty(compiler, "__esModule", { value: true });
	compiler.Compile = void 0;
	const parser_1 = parser;
	const syntax_1 = syntax;
	function BuildRule(rule) {
	    if (rule.type != "def") {
	        throw new Error(`Unknown internal error, expected "def" got "${rule.type}"`);
	    }
	    return new parser_1.Rule(rule.value[0].value, BuildExpr(rule.value[1]));
	}
	function BuildExpr(expr) {
	    var _a;
	    if (expr.type != "expr") {
	        throw new Error(`Unknown internal error, expected "expr" got "${expr.type}"`);
	    }
	    let base = {
	        type: "sequence",
	        count: "1",
	        exprs: [BuildOperand(expr.value[0])]
	    };
	    for (let pair of expr.value[1].value) {
	        let operator = pair.value[0];
	        let operand = BuildOperand(pair.value[1]);
	        switch (operator.value) {
	            case "":
	            case "|":
	                let desire = operator.value == "|" ? "select" : "sequence";
	                if (base.type != desire) {
	                    if (base.type == "range" || ((_a = base.exprs) === null || _a === void 0 ? void 0 : _a.length) != 1) {
	                        base = {
	                            type: desire,
	                            count: "1",
	                            exprs: [base, operand]
	                        };
	                        continue;
	                    }
	                    else {
	                        base.type = desire;
	                        base.exprs.push(operand);
	                        continue;
	                    }
	                }
	                base.exprs.push(operand);
	                continue;
	            case "->":
	                let a = base.exprs.pop();
	                if (a.type != "literal" || operand.type != "literal") {
	                    throw new Error(`Attempting to make a range between two non literals at ${operator.ref.toString()}`);
	                }
	                if (a.value.length != 1 || operand.value.length != 1) {
	                    throw new Error(`Attempting to make a range non single characters at ${operator.ref.toString()}`);
	                }
	                let action = {
	                    type: "range",
	                    value: a.value,
	                    to: operand.value,
	                    count: operand.count
	                };
	                if (base.exprs.length == 0) {
	                    base = action;
	                }
	                else {
	                    base.exprs.push(action);
	                }
	                continue;
	            default:
	                throw new Error(`Unknown operator "${operator.value}"`);
	        }
	    }
	    return base;
	}
	function FlatternConstant(expr) {
	    if (expr.type != "constant") {
	        throw new Error(`Unknown internal error, expected "constant" got "${expr.type}"`);
	    }
	    let str = expr.value[0];
	    let inner = str.value[0];
	    let out = "";
	    if (!Array.isArray(inner.value)) {
	        throw new TypeError("Internal logic failure. Unexpected string");
	    }
	    for (let charNode of inner.value) {
	        if (charNode.type == "literal") {
	            out += charNode.value;
	        }
	        else {
	            let esc = charNode.value;
	            switch (esc[1].value) {
	                case "b":
	                    out += "\b";
	                    break;
	                case "f":
	                    out += "\f";
	                    break;
	                case "n":
	                    out += "\n";
	                    break;
	                case "r":
	                    out += "\r";
	                    break;
	                case "t":
	                    out += "\t";
	                    break;
	                case "v":
	                    out += "\v";
	                    break;
	                default: out += esc[1].value;
	            }
	        }
	    }
	    return out;
	}
	function BuildOperand(expr) {
	    if (expr.type != "expr_arg") {
	        throw new Error(`Unknown internal error, expected "expr_arg" got "${expr.type}"`);
	    }
	    let component = expr.value;
	    let prefixes = component[0].value;
	    let countStr = component[2].value;
	    let base = {
	        count: (0, parser_1.ParseCount)(countStr == "" ? "1" : countStr)
	    };
	    switch (component[1].type) {
	        case "constant":
	            component[1].value = FlatternConstant(component[1]);
	        case "name":
	            base.type = component[1].type == "constant" ? "literal" : "term";
	            base.value = component[1].value;
	            break;
	        case "expr_brackets":
	            let res = BuildExpr(component[1].value[0]);
	            res.count = base.count;
	            base = res;
	            break;
	        default:
	            throw new Error(`Unknown operand type ${component[1].type}`);
	    }
	    if (prefixes[2].value == "!") {
	        base = {
	            type: "not",
	            expr: base,
	            count: base.count
	        };
	        base.expr.count = "1";
	    }
	    if (prefixes[1].value == "...") {
	        base = {
	            type: "gather",
	            expr: base
	        };
	    }
	    if (prefixes[0].value == "%") {
	        base = {
	            type: "omit",
	            expr: base
	        };
	    }
	    return base;
	}
	function Compile(tree) {
	    if (!(tree instanceof syntax_1.SyntaxNode)) {
	        throw new TypeError("Cannot compile syntax tree, as Syntax node is not provided");
	    }
	    let syntax = new parser_1.Parser({});
	    for (let node of tree.value[0].value) {
	        if (node instanceof syntax_1.SyntaxNode &&
	            node.value[0] instanceof syntax_1.SyntaxNode) {
	            let rule = BuildRule(node.value[0]);
	            syntax.addRule(rule.name, rule);
	        }
	        else {
	            throw new Error("Malformed syntax tree");
	        }
	    }
	    return syntax;
	}
	compiler.Compile = Compile;

	var preload = {};

	Object.defineProperty(preload, "__esModule", { value: true });preload.bnf_json={"program":{"type":"sequence","count":"1","exprs":[{"type":"omit","expr":{"type":"term","value":"w","count":"*"}},{"type":"sequence","count":"+","exprs":[{"type":"term","value":"def","count":"1"},{"type":"omit","expr":{"type":"term","value":"w","count":"*"}}]}]},"any":{"type":"sequence","count":"1","exprs":[{"type":"not","count":"1","expr":{"type":"literal","value":"","count":"1"}}]},"w":{"type":"select","count":"1","exprs":[{"type":"term","value":"comment","count":"1"},{"type":"literal","value":" ","count":"1"},{"type":"literal","value":"\t","count":"1"},{"type":"literal","value":"\n","count":"1"},{"type":"literal","value":"\r","count":"1"}]},"comment":{"type":"sequence","count":"1","exprs":[{"type":"literal","value":"#","count":"1"},{"type":"not","count":"*","expr":{"type":"literal","value":"\n","count":"1"}},{"type":"literal","value":"\n","count":"1"}]},"name":{"type":"sequence","count":"1","exprs":[{"type":"gather","expr":{"type":"select","count":"+","exprs":[{"type":"term","value":"letter","count":"1"},{"type":"term","value":"digit","count":"1"},{"type":"literal","value":"_","count":"1"}]}}]},"letter":{"type":"select","count":"1","exprs":[{"type":"range","value":"a","count":"1","to":"z"},{"type":"range","value":"A","count":"1","to":"Z"}]},"digit":{"type":"range","value":"0","count":"1","to":"9"},"constant":{"type":"select","count":"1","exprs":[{"type":"term","value":"single","count":"1"},{"type":"term","value":"double","count":"1"}]},"double":{"type":"sequence","count":"1","exprs":[{"type":"omit","expr":{"type":"literal","value":"\"","count":"1"}},{"type":"select","count":"*","exprs":[{"type":"sequence","count":"1","exprs":[{"type":"literal","value":"\\","count":"1"},{"type":"gather","expr":{"type":"term","value":"any","count":"1"}}]},{"type":"not","count":"+","expr":{"type":"literal","value":"\"","count":"1"}}]},{"type":"omit","expr":{"type":"literal","value":"\"","count":"1"}}]},"single":{"type":"sequence","count":"1","exprs":[{"type":"omit","expr":{"type":"literal","value":"'","count":"1"}},{"type":"select","count":"*","exprs":[{"type":"sequence","count":"1","exprs":[{"type":"literal","value":"\\","count":"1"},{"type":"gather","expr":{"type":"term","value":"any","count":"1"}}]},{"type":"not","count":"+","expr":{"type":"literal","value":"'","count":"1"}}]},{"type":"omit","expr":{"type":"literal","value":"'","count":"1"}}]},"def":{"type":"sequence","count":"1","exprs":[{"type":"gather","expr":{"type":"term","value":"name","count":"1"}},{"type":"omit","expr":{"type":"term","value":"w","count":"+"}},{"type":"omit","expr":{"type":"literal","value":"::=","count":"1"}},{"type":"omit","expr":{"type":"term","value":"w","count":"*"}},{"type":"term","value":"expr","count":"1"},{"type":"omit","expr":{"type":"term","value":"w","count":"*"}},{"type":"omit","expr":{"type":"literal","value":";","count":"1"}}]},"expr":{"type":"sequence","count":"1","exprs":[{"type":"term","value":"expr_arg","count":"1"},{"type":"omit","expr":{"type":"term","value":"w","count":"*"}},{"type":"sequence","count":"*","exprs":[{"type":"gather","expr":{"type":"term","value":"expr_infix","count":"?"}},{"type":"omit","expr":{"type":"term","value":"w","count":"*"}},{"type":"term","value":"expr_arg","count":"1"},{"type":"omit","expr":{"type":"term","value":"w","count":"*"}}]}]},"expr_arg":{"type":"sequence","count":"1","exprs":[{"type":"term","value":"expr_prefix","count":"1"},{"type":"select","count":"1","exprs":[{"type":"term","value":"constant","count":"1"},{"type":"term","value":"expr_brackets","count":"1"},{"type":"gather","expr":{"type":"term","value":"name","count":"1"}}]},{"type":"gather","expr":{"type":"term","value":"expr_suffix","count":"?"}}]},"expr_prefix":{"type":"sequence","count":"1","exprs":[{"type":"literal","value":"%","count":"?"},{"type":"literal","value":"...","count":"?"},{"type":"literal","value":"!","count":"?"}]},"expr_infix":{"type":"select","count":"1","exprs":[{"type":"literal","value":"->","count":"1"},{"type":"literal","value":"|","count":"1"}]},"expr_suffix":{"type":"select","count":"1","exprs":[{"type":"literal","value":"*","count":"1"},{"type":"literal","value":"?","count":"1"},{"type":"literal","value":"+","count":"1"}]},"expr_brackets":{"type":"sequence","count":"1","exprs":[{"type":"omit","expr":{"type":"literal","value":"(","count":"1"}},{"type":"omit","expr":{"type":"term","value":"w","count":"*"}},{"type":"term","value":"expr","count":"1"},{"type":"omit","expr":{"type":"term","value":"w","count":"*"}},{"type":"omit","expr":{"type":"literal","value":")","count":"1"}}]}};

	var promiseQueue = {};

	Object.defineProperty(promiseQueue, "__esModule", { value: true });
	promiseQueue.PromiseQueue = void 0;
	class PromiseQueue {
	    constructor() {
	        this._queue = [];
	    }
	    /**
	     * Hangs until trigger is called
	     */
	    wait() {
	        return new Promise((res) => {
	            this._queue.push(res);
	        });
	    }
	    /**
	     * Allows all hanging waits to return
	     */
	    trigger() {
	        // Use a batch as these triggers might lead to more waits
	        let batch = this._queue;
	        this._queue = [];
	        for (let func of batch) {
	            func();
	        }
	    }
	}
	promiseQueue.PromiseQueue = PromiseQueue;

	var cache = {};

	var __awaiter = (commonjsGlobal && commonjsGlobal.__awaiter) || function (thisArg, _arguments, P, generator) {
	    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
	    return new (P || (P = Promise))(function (resolve, reject) {
	        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
	        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
	        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
	        step((generator = generator.apply(thisArg, _arguments || [])).next());
	    });
	};
	Object.defineProperty(cache, "__esModule", { value: true });
	cache.StreamCache = void 0;
	const promise_queue_1 = promiseQueue;
	class Cursor {
	    constructor(owner, offset) {
	        this._owner = owner;
	        this._offset = offset;
	        this._owner._subscribe(this);
	    }
	    /**
	     * Will read n characters or the remaining amount before the end
	     */
	    next(highWaterMark = 1) {
	        return this._owner._read(this, highWaterMark);
	    }
	    _skip_read(highWaterMark = 1) {
	        return this._owner._skip_read(this, highWaterMark);
	    }
	    isDone() {
	        return this._owner.isDone();
	    }
	    /**
	     * Create another cursor at the same position
	     */
	    clone() {
	        return new Cursor(this._owner, this._offset);
	    }
	    /**
	     * Remove this cursor from the stream
	     */
	    drop() {
	        this._owner.drop(this);
	    }
	}
	/**
	 * Takes a readable stream and allows cursors to move (forward only) over it
	 * Reading data as it is read, but allowing cursor cloning to allow going back
	 * and re-reading information as necessary, and also automatically dropping unreachable information
	 */
	class StreamCache {
	    constructor() {
	        this._ended = false;
	        this._cursors = [];
	        this._cache = [];
	        this._total_cache = 0;
	        this.shrinks = 0;
	        this._signal = new promise_queue_1.PromiseQueue();
	    }
	    getCacheSize() {
	        return this._total_cache;
	    }
	    getCachePools() {
	        return this._cache.length;
	    }
	    isDone() {
	        return this._ended;
	    }
	    /**
	     * Pipe a NodeJS readable stream to the stream cache
	     * @param stream
	     */
	    pipe_node(stream) {
	        stream.on('data', (chunk) => {
	            this.write(chunk);
	        });
	        stream.on('end', () => {
	            this.end("");
	        });
	    }
	    /**
	     * Pipe Web JS readable stream to the stream cache
	     * @param stream
	     */
	    pipe_classic(stream) {
	        (() => __awaiter(this, void 0, void 0, function* () {
	            let reader = stream.getReader();
	            while (true) {
	                let res = yield reader.read();
	                if (res.value) {
	                    this.write(res.value);
	                }
	                if (res.done) {
	                    break;
	                }
	            }
	            this.end("");
	        }))();
	    }
	    /**
	     * Pipe single string to the stream cache
	     * @param stream
	     */
	    write(str) {
	        this._cache.push(str);
	        this._total_cache += str.length;
	        this._signal.trigger();
	        this.shrink();
	    }
	    end(str) {
	        this._ended = true;
	        this.write(str);
	    }
	    /**
	     * Removes unreachable cached information
	     * @returns {void}
	     */
	    shrink() {
	        // Drop the currently buffered information
	        //   as it is unreachable
	        if (this._cursors.length === 0) {
	            this._cache = [];
	            this._total_cache = 0;
	            this.shrinks++;
	            return;
	        }
	        let extra = this._cache.length;
	        for (let cursor of this._cursors) {
	            let loc = this._offset_to_cacheLoc(cursor._offset);
	            if (loc[0] < extra) {
	                extra = loc[0];
	            }
	        }
	        if (extra < 1) {
	            return;
	        }
	        let size = 0;
	        for (let i = 0; i < extra; i++) {
	            size += this._cache[i].length;
	        }
	        this._cache.splice(0, extra);
	        for (let cursor of this._cursors) {
	            cursor._offset -= size;
	        }
	        this._total_cache -= size;
	        this.shrinks++;
	    }
	    /**
	     * Creates a new cursor at the earliest available cache data
	     * @returns {Cursor}
	     */
	    cursor() {
	        return new Cursor(this, 0);
	    }
	    /**
	     * Removes a cursor from the stream process
	     * @param cursor
	     */
	    drop(cursor) {
	        let i = this._cursors.indexOf(cursor);
	        if (i == -1) {
	            return;
	        }
	        this._cursors.splice(i, 1);
	    }
	    /**
	     * FOR INTERNAL USE ONLY
	     * @param cursor
	     */
	    _subscribe(cursor) {
	        this._cursors.push(cursor);
	    }
	    /**
	     * INTERNAL USE ONLY
	     * This should not be called directly, instead call the read function on the cursor
	     * @param cursor must be created by this object
	     * @returns {Promise[string | null]}
	     */
	    _read(cursor, size = 1) {
	        return __awaiter(this, void 0, void 0, function* () {
	            if (cursor._offset < 0) {
	                throw new Error("Cursor behind buffer position");
	            }
	            // Wait for more data to load if necessary
	            while (cursor._offset > this._total_cache - size) {
	                // The required data will never be loaded
	                if (this._ended) {
	                    break;
	                }
	                // Wait for more data
	                //   Warn: state might change here (including cursor)
	                yield this._signal.wait();
	            }
	            // Return the data
	            let loc = this._offset_to_cacheLoc(cursor._offset);
	            if (loc[0] >= this._cache.length) {
	                return "";
	            }
	            let out = this._cache[loc[0]].slice(loc[1], loc[1] + size);
	            cursor._offset += out.length;
	            return out;
	        });
	    }
	    _skip_read(cursor, size = 1) {
	        if (cursor._offset > this._total_cache - size) {
	            return "";
	        }
	        // Return the data
	        let loc = this._offset_to_cacheLoc(cursor._offset);
	        if (loc[0] >= this._cache.length) {
	            return "";
	        }
	        let out = this._cache[loc[0]].slice(loc[1], loc[1] + size);
	        cursor._offset += out.length;
	        return out;
	    }
	    _offset_to_cacheLoc(offset) {
	        let i = 0;
	        for (; i < this._cache.length; i++) {
	            if (offset < this._cache[i].length) {
	                break;
	            }
	            offset -= this._cache[i].length;
	        }
	        return [i, offset];
	    }
	}
	cache.StreamCache = StreamCache;

	(function (exports) {
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.experimental = exports.ReferenceRange = exports.Reference = exports.ParseError = exports.SyntaxNode = exports.Compile = exports.Parser = exports.BNF = void 0;
		const syntax_1 = syntax;
		Object.defineProperty(exports, "SyntaxNode", { enumerable: true, get: function () { return syntax_1.SyntaxNode; } });
		Object.defineProperty(exports, "ParseError", { enumerable: true, get: function () { return syntax_1.ParseError; } });
		Object.defineProperty(exports, "Reference", { enumerable: true, get: function () { return syntax_1.Reference; } });
		Object.defineProperty(exports, "ReferenceRange", { enumerable: true, get: function () { return syntax_1.ReferenceRange; } });
		const compiler_1 = compiler;
		Object.defineProperty(exports, "Compile", { enumerable: true, get: function () { return compiler_1.Compile; } });
		const parser_1 = parser;
		Object.defineProperty(exports, "Parser", { enumerable: true, get: function () { return parser_1.Parser; } });
		const preload_1 = preload;
		const BNF = new parser_1.Parser(preload_1.bnf_json);
		exports.BNF = BNF;
		const promise_queue_1 = promiseQueue;
		const cache_1 = cache;
		const experimental = {
		    StreamCache: cache_1.StreamCache,
		    PromiseQueue: promise_queue_1.PromiseQueue
		};
		exports.experimental = experimental; 
	} (bin));

	var __defProp$G = Object.defineProperty;
	var __getOwnPropDesc$G = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames$G = Object.getOwnPropertyNames;
	var __hasOwnProp$G = Object.prototype.hasOwnProperty;
	var __export$G = (target, all) => {
	  for (var name in all)
	    __defProp$G(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps$G = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames$G(from))
	      if (!__hasOwnProp$G.call(to, key) && key !== except)
	        __defProp$G(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc$G(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS$G = (mod) => __copyProps$G(__defProp$G({}, "__esModule", { value: true }), mod);
	var operators_exports = {};
	__export$G(operators_exports, {
	  Op: () => Op
	});
	var operators = __toCommonJS$G(operators_exports);
	const Op = {
	  eq: Symbol.for("eq"),
	  ne: Symbol.for("ne"),
	  gte: Symbol.for("gte"),
	  gt: Symbol.for("gt"),
	  lte: Symbol.for("lte"),
	  lt: Symbol.for("lt"),
	  not: Symbol.for("not"),
	  is: Symbol.for("is"),
	  isNot: Symbol.for("isNot"),
	  in: Symbol.for("in"),
	  notIn: Symbol.for("notIn"),
	  like: Symbol.for("like"),
	  notLike: Symbol.for("notLike"),
	  iLike: Symbol.for("iLike"),
	  notILike: Symbol.for("notILike"),
	  startsWith: Symbol.for("startsWith"),
	  notStartsWith: Symbol.for("notStartsWith"),
	  endsWith: Symbol.for("endsWith"),
	  notEndsWith: Symbol.for("notEndsWith"),
	  substring: Symbol.for("substring"),
	  notSubstring: Symbol.for("notSubstring"),
	  regexp: Symbol.for("regexp"),
	  notRegexp: Symbol.for("notRegexp"),
	  iRegexp: Symbol.for("iRegexp"),
	  notIRegexp: Symbol.for("notIRegexp"),
	  between: Symbol.for("between"),
	  notBetween: Symbol.for("notBetween"),
	  overlap: Symbol.for("overlap"),
	  contains: Symbol.for("contains"),
	  contained: Symbol.for("contained"),
	  adjacent: Symbol.for("adjacent"),
	  strictLeft: Symbol.for("strictLeft"),
	  strictRight: Symbol.for("strictRight"),
	  noExtendRight: Symbol.for("noExtendRight"),
	  noExtendLeft: Symbol.for("noExtendLeft"),
	  and: Symbol.for("and"),
	  or: Symbol.for("or"),
	  any: Symbol.for("any"),
	  all: Symbol.for("all"),
	  values: Symbol.for("values"),
	  col: Symbol.for("col"),
	  match: Symbol.for("match"),
	  anyKeyExists: Symbol.for("anyKeyExists"),
	  allKeysExist: Symbol.for("allKeysExist")
	};

	var cast_1;
	var hasRequiredCast;

	function requireCast () {
		if (hasRequiredCast) return cast_1;
		hasRequiredCast = 1;
		var __defProp = Object.defineProperty;
		var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
		var __getOwnPropNames = Object.getOwnPropertyNames;
		var __hasOwnProp = Object.prototype.hasOwnProperty;
		var __export = (target, all) => {
		  for (var name in all)
		    __defProp(target, name, { get: all[name], enumerable: true });
		};
		var __copyProps = (to, from, except, desc) => {
		  if (from && typeof from === "object" || typeof from === "function") {
		    for (let key of __getOwnPropNames(from))
		      if (!__hasOwnProp.call(to, key) && key !== except)
		        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
		  }
		  return to;
		};
		var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
		var cast_exports = {};
		__export(cast_exports, {
		  Cast: () => Cast,
		  cast: () => cast
		});
		cast_1 = __toCommonJS(cast_exports);
		var import_operators = operators;
		var import_check = requireCheck();
		var import_base_sql_expression = baseSqlExpression;
		var import_where = requireWhere();
		class Cast extends import_base_sql_expression.BaseSqlExpression {
		  constructor(expression, type) {
		    super();
		    this.expression = expression;
		    this.type = type;
		  }
		}
		function cast(val, type) {
		  if ((0, import_check.isPlainObject)(val) && !(import_operators.Op.col in val)) {
		    val = (0, import_where.where)(val);
		  }
		  return new Cast(val, type);
		}
		
		return cast_1;
	}

	var __defProp$F = Object.defineProperty;
	var __getOwnPropDesc$F = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames$F = Object.getOwnPropertyNames;
	var __hasOwnProp$F = Object.prototype.hasOwnProperty;
	var __export$F = (target, all) => {
	  for (var name in all)
	    __defProp$F(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps$F = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames$F(from))
	      if (!__hasOwnProp$F.call(to, key) && key !== except)
	        __defProp$F(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc$F(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS$F = (mod) => __copyProps$F(__defProp$F({}, "__esModule", { value: true }), mod);
	var json_path_exports = {};
	__export$F(json_path_exports, {
	  JsonPath: () => JsonPath,
	  jsonPath: () => jsonPath
	});
	var jsonPath_1 = __toCommonJS$F(json_path_exports);
	var import_base_sql_expression$a = baseSqlExpression;
	class JsonPath extends import_base_sql_expression$a.BaseSqlExpression {
	  constructor(expression, path) {
	    super();
	    this.expression = expression;
	    this.path = path;
	  }
	}
	function jsonPath(expression, path) {
	  return new JsonPath(expression, path);
	}

	var __defProp$E = Object.defineProperty;
	var __getOwnPropDesc$E = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames$E = Object.getOwnPropertyNames;
	var __hasOwnProp$E = Object.prototype.hasOwnProperty;
	var __export$E = (target, all) => {
	  for (var name in all)
	    __defProp$E(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps$E = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames$E(from))
	      if (!__hasOwnProp$E.call(to, key) && key !== except)
	        __defProp$E(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc$E(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS$E = (mod) => __copyProps$E(__defProp$E({}, "__esModule", { value: true }), mod);
	var dialect_aware_fn_exports = {};
	__export$E(dialect_aware_fn_exports, {
	  DialectAwareFn: () => DialectAwareFn,
	  Unquote: () => Unquote
	});
	var dialectAwareFn = __toCommonJS$E(dialect_aware_fn_exports);
	var import_base_sql_expression$9 = baseSqlExpression;
	var import_json_path$1 = jsonPath_1;
	class DialectAwareFn extends import_base_sql_expression$9.BaseSqlExpression {
	  args;
	  constructor(...args) {
	    super();
	    this.args = args;
	    if (this.args.length > this.maxArgCount) {
	      throw new Error(`Too many arguments provided to ${this.constructor.name} function. Expected ${this.maxArgCount} or less, but got ${this.args.length}.`);
	    }
	    if (this.args.length < this.minArgCount) {
	      throw new Error(`Too few arguments provided to ${this.constructor.name} function. Expected ${this.minArgCount} or more, but got ${this.args.length}.`);
	    }
	  }
	  get maxArgCount() {
	    return Number.POSITIVE_INFINITY;
	  }
	  get minArgCount() {
	    return 0;
	  }
	  static build(...args) {
	    return new this(...args);
	  }
	}
	class Unquote extends DialectAwareFn {
	  get maxArgCount() {
	    return 1;
	  }
	  get minArgCount() {
	    return 1;
	  }
	  apply(dialect, options) {
	    const arg = this.args[0];
	    if (arg instanceof import_json_path$1.JsonPath) {
	      return dialect.queryGenerator.jsonPathExtractionQuery(
	        dialect.queryGenerator.escape(arg.expression),
	        arg.path,
	        true
	      );
	    }
	    return dialect.queryGenerator.formatUnquoteJson(arg, options);
	  }
	}

	/**
	 * A specialized version of `_.forEach` for arrays without support for
	 * iteratee shorthands.
	 *
	 * @private
	 * @param {Array} [array] The array to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array} Returns `array`.
	 */

	var _arrayEach;
	var hasRequired_arrayEach;

	function require_arrayEach () {
		if (hasRequired_arrayEach) return _arrayEach;
		hasRequired_arrayEach = 1;
		function arrayEach(array, iteratee) {
		  var index = -1,
		      length = array == null ? 0 : array.length;

		  while (++index < length) {
		    if (iteratee(array[index], index, array) === false) {
		      break;
		    }
		  }
		  return array;
		}

		_arrayEach = arrayEach;
		return _arrayEach;
	}

	var _copyObject;
	var hasRequired_copyObject;

	function require_copyObject () {
		if (hasRequired_copyObject) return _copyObject;
		hasRequired_copyObject = 1;
		var assignValue = require_assignValue(),
		    baseAssignValue = require_baseAssignValue();

		/**
		 * Copies properties of `source` to `object`.
		 *
		 * @private
		 * @param {Object} source The object to copy properties from.
		 * @param {Array} props The property identifiers to copy.
		 * @param {Object} [object={}] The object to copy properties to.
		 * @param {Function} [customizer] The function to customize copied values.
		 * @returns {Object} Returns `object`.
		 */
		function copyObject(source, props, object, customizer) {
		  var isNew = !object;
		  object || (object = {});

		  var index = -1,
		      length = props.length;

		  while (++index < length) {
		    var key = props[index];

		    var newValue = customizer
		      ? customizer(object[key], source[key], key, object, source)
		      : undefined;

		    if (newValue === undefined) {
		      newValue = source[key];
		    }
		    if (isNew) {
		      baseAssignValue(object, key, newValue);
		    } else {
		      assignValue(object, key, newValue);
		    }
		  }
		  return object;
		}

		_copyObject = copyObject;
		return _copyObject;
	}

	var _baseAssign;
	var hasRequired_baseAssign;

	function require_baseAssign () {
		if (hasRequired_baseAssign) return _baseAssign;
		hasRequired_baseAssign = 1;
		var copyObject = require_copyObject(),
		    keys = requireKeys();

		/**
		 * The base implementation of `_.assign` without support for multiple sources
		 * or `customizer` functions.
		 *
		 * @private
		 * @param {Object} object The destination object.
		 * @param {Object} source The source object.
		 * @returns {Object} Returns `object`.
		 */
		function baseAssign(object, source) {
		  return object && copyObject(source, keys(source), object);
		}

		_baseAssign = baseAssign;
		return _baseAssign;
	}

	var _baseAssignIn;
	var hasRequired_baseAssignIn;

	function require_baseAssignIn () {
		if (hasRequired_baseAssignIn) return _baseAssignIn;
		hasRequired_baseAssignIn = 1;
		var copyObject = require_copyObject(),
		    keysIn = requireKeysIn();

		/**
		 * The base implementation of `_.assignIn` without support for multiple sources
		 * or `customizer` functions.
		 *
		 * @private
		 * @param {Object} object The destination object.
		 * @param {Object} source The source object.
		 * @returns {Object} Returns `object`.
		 */
		function baseAssignIn(object, source) {
		  return object && copyObject(source, keysIn(source), object);
		}

		_baseAssignIn = baseAssignIn;
		return _baseAssignIn;
	}

	var _cloneBuffer = {exports: {}};

	_cloneBuffer.exports;

	var hasRequired_cloneBuffer;

	function require_cloneBuffer () {
		if (hasRequired_cloneBuffer) return _cloneBuffer.exports;
		hasRequired_cloneBuffer = 1;
		(function (module, exports) {
			var root = _root;

			/** Detect free variable `exports`. */
			var freeExports = exports && !exports.nodeType && exports;

			/** Detect free variable `module`. */
			var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;

			/** Detect the popular CommonJS extension `module.exports`. */
			var moduleExports = freeModule && freeModule.exports === freeExports;

			/** Built-in value references. */
			var Buffer = moduleExports ? root.Buffer : undefined,
			    allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined;

			/**
			 * Creates a clone of  `buffer`.
			 *
			 * @private
			 * @param {Buffer} buffer The buffer to clone.
			 * @param {boolean} [isDeep] Specify a deep clone.
			 * @returns {Buffer} Returns the cloned buffer.
			 */
			function cloneBuffer(buffer, isDeep) {
			  if (isDeep) {
			    return buffer.slice();
			  }
			  var length = buffer.length,
			      result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

			  buffer.copy(result);
			  return result;
			}

			module.exports = cloneBuffer; 
		} (_cloneBuffer, _cloneBuffer.exports));
		return _cloneBuffer.exports;
	}

	/**
	 * Copies the values of `source` to `array`.
	 *
	 * @private
	 * @param {Array} source The array to copy values from.
	 * @param {Array} [array=[]] The array to copy values to.
	 * @returns {Array} Returns `array`.
	 */

	var _copyArray;
	var hasRequired_copyArray;

	function require_copyArray () {
		if (hasRequired_copyArray) return _copyArray;
		hasRequired_copyArray = 1;
		function copyArray(source, array) {
		  var index = -1,
		      length = source.length;

		  array || (array = Array(length));
		  while (++index < length) {
		    array[index] = source[index];
		  }
		  return array;
		}

		_copyArray = copyArray;
		return _copyArray;
	}

	var _copySymbols;
	var hasRequired_copySymbols;

	function require_copySymbols () {
		if (hasRequired_copySymbols) return _copySymbols;
		hasRequired_copySymbols = 1;
		var copyObject = require_copyObject(),
		    getSymbols = require_getSymbols();

		/**
		 * Copies own symbols of `source` to `object`.
		 *
		 * @private
		 * @param {Object} source The object to copy symbols from.
		 * @param {Object} [object={}] The object to copy symbols to.
		 * @returns {Object} Returns `object`.
		 */
		function copySymbols(source, object) {
		  return copyObject(source, getSymbols(source), object);
		}

		_copySymbols = copySymbols;
		return _copySymbols;
	}

	var _copySymbolsIn;
	var hasRequired_copySymbolsIn;

	function require_copySymbolsIn () {
		if (hasRequired_copySymbolsIn) return _copySymbolsIn;
		hasRequired_copySymbolsIn = 1;
		var copyObject = require_copyObject(),
		    getSymbolsIn = require_getSymbolsIn();

		/**
		 * Copies own and inherited symbols of `source` to `object`.
		 *
		 * @private
		 * @param {Object} source The object to copy symbols from.
		 * @param {Object} [object={}] The object to copy symbols to.
		 * @returns {Object} Returns `object`.
		 */
		function copySymbolsIn(source, object) {
		  return copyObject(source, getSymbolsIn(source), object);
		}

		_copySymbolsIn = copySymbolsIn;
		return _copySymbolsIn;
	}

	/** Used for built-in method references. */

	var _initCloneArray;
	var hasRequired_initCloneArray;

	function require_initCloneArray () {
		if (hasRequired_initCloneArray) return _initCloneArray;
		hasRequired_initCloneArray = 1;
		var objectProto = Object.prototype;

		/** Used to check objects for own properties. */
		var hasOwnProperty = objectProto.hasOwnProperty;

		/**
		 * Initializes an array clone.
		 *
		 * @private
		 * @param {Array} array The array to clone.
		 * @returns {Array} Returns the initialized clone.
		 */
		function initCloneArray(array) {
		  var length = array.length,
		      result = new array.constructor(length);

		  // Add properties assigned by `RegExp#exec`.
		  if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
		    result.index = array.index;
		    result.input = array.input;
		  }
		  return result;
		}

		_initCloneArray = initCloneArray;
		return _initCloneArray;
	}

	var _cloneArrayBuffer;
	var hasRequired_cloneArrayBuffer;

	function require_cloneArrayBuffer () {
		if (hasRequired_cloneArrayBuffer) return _cloneArrayBuffer;
		hasRequired_cloneArrayBuffer = 1;
		var Uint8Array = _Uint8Array;

		/**
		 * Creates a clone of `arrayBuffer`.
		 *
		 * @private
		 * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
		 * @returns {ArrayBuffer} Returns the cloned array buffer.
		 */
		function cloneArrayBuffer(arrayBuffer) {
		  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
		  new Uint8Array(result).set(new Uint8Array(arrayBuffer));
		  return result;
		}

		_cloneArrayBuffer = cloneArrayBuffer;
		return _cloneArrayBuffer;
	}

	var _cloneDataView;
	var hasRequired_cloneDataView;

	function require_cloneDataView () {
		if (hasRequired_cloneDataView) return _cloneDataView;
		hasRequired_cloneDataView = 1;
		var cloneArrayBuffer = require_cloneArrayBuffer();

		/**
		 * Creates a clone of `dataView`.
		 *
		 * @private
		 * @param {Object} dataView The data view to clone.
		 * @param {boolean} [isDeep] Specify a deep clone.
		 * @returns {Object} Returns the cloned data view.
		 */
		function cloneDataView(dataView, isDeep) {
		  var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
		  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
		}

		_cloneDataView = cloneDataView;
		return _cloneDataView;
	}

	/** Used to match `RegExp` flags from their coerced string values. */

	var _cloneRegExp;
	var hasRequired_cloneRegExp;

	function require_cloneRegExp () {
		if (hasRequired_cloneRegExp) return _cloneRegExp;
		hasRequired_cloneRegExp = 1;
		var reFlags = /\w*$/;

		/**
		 * Creates a clone of `regexp`.
		 *
		 * @private
		 * @param {Object} regexp The regexp to clone.
		 * @returns {Object} Returns the cloned regexp.
		 */
		function cloneRegExp(regexp) {
		  var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
		  result.lastIndex = regexp.lastIndex;
		  return result;
		}

		_cloneRegExp = cloneRegExp;
		return _cloneRegExp;
	}

	var _cloneSymbol;
	var hasRequired_cloneSymbol;

	function require_cloneSymbol () {
		if (hasRequired_cloneSymbol) return _cloneSymbol;
		hasRequired_cloneSymbol = 1;
		var Symbol = _Symbol;

		/** Used to convert symbols to primitives and strings. */
		var symbolProto = Symbol ? Symbol.prototype : undefined,
		    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

		/**
		 * Creates a clone of the `symbol` object.
		 *
		 * @private
		 * @param {Object} symbol The symbol object to clone.
		 * @returns {Object} Returns the cloned symbol object.
		 */
		function cloneSymbol(symbol) {
		  return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
		}

		_cloneSymbol = cloneSymbol;
		return _cloneSymbol;
	}

	var _cloneTypedArray;
	var hasRequired_cloneTypedArray;

	function require_cloneTypedArray () {
		if (hasRequired_cloneTypedArray) return _cloneTypedArray;
		hasRequired_cloneTypedArray = 1;
		var cloneArrayBuffer = require_cloneArrayBuffer();

		/**
		 * Creates a clone of `typedArray`.
		 *
		 * @private
		 * @param {Object} typedArray The typed array to clone.
		 * @param {boolean} [isDeep] Specify a deep clone.
		 * @returns {Object} Returns the cloned typed array.
		 */
		function cloneTypedArray(typedArray, isDeep) {
		  var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
		  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
		}

		_cloneTypedArray = cloneTypedArray;
		return _cloneTypedArray;
	}

	var _initCloneByTag;
	var hasRequired_initCloneByTag;

	function require_initCloneByTag () {
		if (hasRequired_initCloneByTag) return _initCloneByTag;
		hasRequired_initCloneByTag = 1;
		var cloneArrayBuffer = require_cloneArrayBuffer(),
		    cloneDataView = require_cloneDataView(),
		    cloneRegExp = require_cloneRegExp(),
		    cloneSymbol = require_cloneSymbol(),
		    cloneTypedArray = require_cloneTypedArray();

		/** `Object#toString` result references. */
		var boolTag = '[object Boolean]',
		    dateTag = '[object Date]',
		    mapTag = '[object Map]',
		    numberTag = '[object Number]',
		    regexpTag = '[object RegExp]',
		    setTag = '[object Set]',
		    stringTag = '[object String]',
		    symbolTag = '[object Symbol]';

		var arrayBufferTag = '[object ArrayBuffer]',
		    dataViewTag = '[object DataView]',
		    float32Tag = '[object Float32Array]',
		    float64Tag = '[object Float64Array]',
		    int8Tag = '[object Int8Array]',
		    int16Tag = '[object Int16Array]',
		    int32Tag = '[object Int32Array]',
		    uint8Tag = '[object Uint8Array]',
		    uint8ClampedTag = '[object Uint8ClampedArray]',
		    uint16Tag = '[object Uint16Array]',
		    uint32Tag = '[object Uint32Array]';

		/**
		 * Initializes an object clone based on its `toStringTag`.
		 *
		 * **Note:** This function only supports cloning values with tags of
		 * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
		 *
		 * @private
		 * @param {Object} object The object to clone.
		 * @param {string} tag The `toStringTag` of the object to clone.
		 * @param {boolean} [isDeep] Specify a deep clone.
		 * @returns {Object} Returns the initialized clone.
		 */
		function initCloneByTag(object, tag, isDeep) {
		  var Ctor = object.constructor;
		  switch (tag) {
		    case arrayBufferTag:
		      return cloneArrayBuffer(object);

		    case boolTag:
		    case dateTag:
		      return new Ctor(+object);

		    case dataViewTag:
		      return cloneDataView(object, isDeep);

		    case float32Tag: case float64Tag:
		    case int8Tag: case int16Tag: case int32Tag:
		    case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
		      return cloneTypedArray(object, isDeep);

		    case mapTag:
		      return new Ctor;

		    case numberTag:
		    case stringTag:
		      return new Ctor(object);

		    case regexpTag:
		      return cloneRegExp(object);

		    case setTag:
		      return new Ctor;

		    case symbolTag:
		      return cloneSymbol(object);
		  }
		}

		_initCloneByTag = initCloneByTag;
		return _initCloneByTag;
	}

	var _baseCreate;
	var hasRequired_baseCreate;

	function require_baseCreate () {
		if (hasRequired_baseCreate) return _baseCreate;
		hasRequired_baseCreate = 1;
		var isObject = isObject_1;

		/** Built-in value references. */
		var objectCreate = Object.create;

		/**
		 * The base implementation of `_.create` without support for assigning
		 * properties to the created object.
		 *
		 * @private
		 * @param {Object} proto The object to inherit from.
		 * @returns {Object} Returns the new object.
		 */
		var baseCreate = (function() {
		  function object() {}
		  return function(proto) {
		    if (!isObject(proto)) {
		      return {};
		    }
		    if (objectCreate) {
		      return objectCreate(proto);
		    }
		    object.prototype = proto;
		    var result = new object;
		    object.prototype = undefined;
		    return result;
		  };
		}());

		_baseCreate = baseCreate;
		return _baseCreate;
	}

	var _initCloneObject;
	var hasRequired_initCloneObject;

	function require_initCloneObject () {
		if (hasRequired_initCloneObject) return _initCloneObject;
		hasRequired_initCloneObject = 1;
		var baseCreate = require_baseCreate(),
		    getPrototype = _getPrototype,
		    isPrototype = require_isPrototype();

		/**
		 * Initializes an object clone.
		 *
		 * @private
		 * @param {Object} object The object to clone.
		 * @returns {Object} Returns the initialized clone.
		 */
		function initCloneObject(object) {
		  return (typeof object.constructor == 'function' && !isPrototype(object))
		    ? baseCreate(getPrototype(object))
		    : {};
		}

		_initCloneObject = initCloneObject;
		return _initCloneObject;
	}

	var _baseIsMap;
	var hasRequired_baseIsMap;

	function require_baseIsMap () {
		if (hasRequired_baseIsMap) return _baseIsMap;
		hasRequired_baseIsMap = 1;
		var getTag = require_getTag(),
		    isObjectLike = isObjectLike_1;

		/** `Object#toString` result references. */
		var mapTag = '[object Map]';

		/**
		 * The base implementation of `_.isMap` without Node.js optimizations.
		 *
		 * @private
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is a map, else `false`.
		 */
		function baseIsMap(value) {
		  return isObjectLike(value) && getTag(value) == mapTag;
		}

		_baseIsMap = baseIsMap;
		return _baseIsMap;
	}

	var isMap_1;
	var hasRequiredIsMap;

	function requireIsMap () {
		if (hasRequiredIsMap) return isMap_1;
		hasRequiredIsMap = 1;
		var baseIsMap = require_baseIsMap(),
		    baseUnary = require_baseUnary(),
		    nodeUtil = require_nodeUtil();

		/* Node.js helper references. */
		var nodeIsMap = nodeUtil && nodeUtil.isMap;

		/**
		 * Checks if `value` is classified as a `Map` object.
		 *
		 * @static
		 * @memberOf _
		 * @since 4.3.0
		 * @category Lang
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is a map, else `false`.
		 * @example
		 *
		 * _.isMap(new Map);
		 * // => true
		 *
		 * _.isMap(new WeakMap);
		 * // => false
		 */
		var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;

		isMap_1 = isMap;
		return isMap_1;
	}

	var _baseIsSet;
	var hasRequired_baseIsSet;

	function require_baseIsSet () {
		if (hasRequired_baseIsSet) return _baseIsSet;
		hasRequired_baseIsSet = 1;
		var getTag = require_getTag(),
		    isObjectLike = isObjectLike_1;

		/** `Object#toString` result references. */
		var setTag = '[object Set]';

		/**
		 * The base implementation of `_.isSet` without Node.js optimizations.
		 *
		 * @private
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is a set, else `false`.
		 */
		function baseIsSet(value) {
		  return isObjectLike(value) && getTag(value) == setTag;
		}

		_baseIsSet = baseIsSet;
		return _baseIsSet;
	}

	var isSet_1;
	var hasRequiredIsSet;

	function requireIsSet () {
		if (hasRequiredIsSet) return isSet_1;
		hasRequiredIsSet = 1;
		var baseIsSet = require_baseIsSet(),
		    baseUnary = require_baseUnary(),
		    nodeUtil = require_nodeUtil();

		/* Node.js helper references. */
		var nodeIsSet = nodeUtil && nodeUtil.isSet;

		/**
		 * Checks if `value` is classified as a `Set` object.
		 *
		 * @static
		 * @memberOf _
		 * @since 4.3.0
		 * @category Lang
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is a set, else `false`.
		 * @example
		 *
		 * _.isSet(new Set);
		 * // => true
		 *
		 * _.isSet(new WeakSet);
		 * // => false
		 */
		var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;

		isSet_1 = isSet;
		return isSet_1;
	}

	var _baseClone;
	var hasRequired_baseClone;

	function require_baseClone () {
		if (hasRequired_baseClone) return _baseClone;
		hasRequired_baseClone = 1;
		var Stack = require_Stack(),
		    arrayEach = require_arrayEach(),
		    assignValue = require_assignValue(),
		    baseAssign = require_baseAssign(),
		    baseAssignIn = require_baseAssignIn(),
		    cloneBuffer = require_cloneBuffer(),
		    copyArray = require_copyArray(),
		    copySymbols = require_copySymbols(),
		    copySymbolsIn = require_copySymbolsIn(),
		    getAllKeys = require_getAllKeys(),
		    getAllKeysIn = require_getAllKeysIn(),
		    getTag = require_getTag(),
		    initCloneArray = require_initCloneArray(),
		    initCloneByTag = require_initCloneByTag(),
		    initCloneObject = require_initCloneObject(),
		    isArray = isArray_1,
		    isBuffer = requireIsBuffer(),
		    isMap = requireIsMap(),
		    isObject = isObject_1,
		    isSet = requireIsSet(),
		    keys = requireKeys(),
		    keysIn = requireKeysIn();

		/** Used to compose bitmasks for cloning. */
		var CLONE_DEEP_FLAG = 1,
		    CLONE_FLAT_FLAG = 2,
		    CLONE_SYMBOLS_FLAG = 4;

		/** `Object#toString` result references. */
		var argsTag = '[object Arguments]',
		    arrayTag = '[object Array]',
		    boolTag = '[object Boolean]',
		    dateTag = '[object Date]',
		    errorTag = '[object Error]',
		    funcTag = '[object Function]',
		    genTag = '[object GeneratorFunction]',
		    mapTag = '[object Map]',
		    numberTag = '[object Number]',
		    objectTag = '[object Object]',
		    regexpTag = '[object RegExp]',
		    setTag = '[object Set]',
		    stringTag = '[object String]',
		    symbolTag = '[object Symbol]',
		    weakMapTag = '[object WeakMap]';

		var arrayBufferTag = '[object ArrayBuffer]',
		    dataViewTag = '[object DataView]',
		    float32Tag = '[object Float32Array]',
		    float64Tag = '[object Float64Array]',
		    int8Tag = '[object Int8Array]',
		    int16Tag = '[object Int16Array]',
		    int32Tag = '[object Int32Array]',
		    uint8Tag = '[object Uint8Array]',
		    uint8ClampedTag = '[object Uint8ClampedArray]',
		    uint16Tag = '[object Uint16Array]',
		    uint32Tag = '[object Uint32Array]';

		/** Used to identify `toStringTag` values supported by `_.clone`. */
		var cloneableTags = {};
		cloneableTags[argsTag] = cloneableTags[arrayTag] =
		cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =
		cloneableTags[boolTag] = cloneableTags[dateTag] =
		cloneableTags[float32Tag] = cloneableTags[float64Tag] =
		cloneableTags[int8Tag] = cloneableTags[int16Tag] =
		cloneableTags[int32Tag] = cloneableTags[mapTag] =
		cloneableTags[numberTag] = cloneableTags[objectTag] =
		cloneableTags[regexpTag] = cloneableTags[setTag] =
		cloneableTags[stringTag] = cloneableTags[symbolTag] =
		cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
		cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
		cloneableTags[errorTag] = cloneableTags[funcTag] =
		cloneableTags[weakMapTag] = false;

		/**
		 * The base implementation of `_.clone` and `_.cloneDeep` which tracks
		 * traversed objects.
		 *
		 * @private
		 * @param {*} value The value to clone.
		 * @param {boolean} bitmask The bitmask flags.
		 *  1 - Deep clone
		 *  2 - Flatten inherited properties
		 *  4 - Clone symbols
		 * @param {Function} [customizer] The function to customize cloning.
		 * @param {string} [key] The key of `value`.
		 * @param {Object} [object] The parent object of `value`.
		 * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
		 * @returns {*} Returns the cloned value.
		 */
		function baseClone(value, bitmask, customizer, key, object, stack) {
		  var result,
		      isDeep = bitmask & CLONE_DEEP_FLAG,
		      isFlat = bitmask & CLONE_FLAT_FLAG,
		      isFull = bitmask & CLONE_SYMBOLS_FLAG;

		  if (customizer) {
		    result = object ? customizer(value, key, object, stack) : customizer(value);
		  }
		  if (result !== undefined) {
		    return result;
		  }
		  if (!isObject(value)) {
		    return value;
		  }
		  var isArr = isArray(value);
		  if (isArr) {
		    result = initCloneArray(value);
		    if (!isDeep) {
		      return copyArray(value, result);
		    }
		  } else {
		    var tag = getTag(value),
		        isFunc = tag == funcTag || tag == genTag;

		    if (isBuffer(value)) {
		      return cloneBuffer(value, isDeep);
		    }
		    if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
		      result = (isFlat || isFunc) ? {} : initCloneObject(value);
		      if (!isDeep) {
		        return isFlat
		          ? copySymbolsIn(value, baseAssignIn(result, value))
		          : copySymbols(value, baseAssign(result, value));
		      }
		    } else {
		      if (!cloneableTags[tag]) {
		        return object ? value : {};
		      }
		      result = initCloneByTag(value, tag, isDeep);
		    }
		  }
		  // Check for circular references and return its corresponding clone.
		  stack || (stack = new Stack);
		  var stacked = stack.get(value);
		  if (stacked) {
		    return stacked;
		  }
		  stack.set(value, result);

		  if (isSet(value)) {
		    value.forEach(function(subValue) {
		      result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
		    });
		  } else if (isMap(value)) {
		    value.forEach(function(subValue, key) {
		      result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));
		    });
		  }

		  var keysFunc = isFull
		    ? (isFlat ? getAllKeysIn : getAllKeys)
		    : (isFlat ? keysIn : keys);

		  var props = isArr ? undefined : keysFunc(value);
		  arrayEach(props || value, function(subValue, key) {
		    if (props) {
		      key = subValue;
		      subValue = value[key];
		    }
		    // Recursively populate clone (susceptible to call stack limits).
		    assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
		  });
		  return result;
		}

		_baseClone = baseClone;
		return _baseClone;
	}

	var baseClone = require_baseClone();

	/** Used to compose bitmasks for cloning. */
	var CLONE_DEEP_FLAG = 1,
	    CLONE_SYMBOLS_FLAG = 4;

	/**
	 * This method is like `_.cloneWith` except that it recursively clones `value`.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to recursively clone.
	 * @param {Function} [customizer] The function to customize cloning.
	 * @returns {*} Returns the deep cloned value.
	 * @see _.cloneWith
	 * @example
	 *
	 * function customizer(value) {
	 *   if (_.isElement(value)) {
	 *     return value.cloneNode(true);
	 *   }
	 * }
	 *
	 * var el = _.cloneDeepWith(document.body, customizer);
	 *
	 * console.log(el === document.body);
	 * // => false
	 * console.log(el.nodeName);
	 * // => 'BODY'
	 * console.log(el.childNodes.length);
	 * // => 20
	 */
	function cloneDeepWith(value, customizer) {
	  customizer = typeof customizer == 'function' ? customizer : undefined;
	  return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
	}

	var cloneDeepWith_1 = cloneDeepWith;

	/**
	 * Creates a base function for methods like `_.forIn` and `_.forOwn`.
	 *
	 * @private
	 * @param {boolean} [fromRight] Specify iterating from right to left.
	 * @returns {Function} Returns the new base function.
	 */

	var _createBaseFor;
	var hasRequired_createBaseFor;

	function require_createBaseFor () {
		if (hasRequired_createBaseFor) return _createBaseFor;
		hasRequired_createBaseFor = 1;
		function createBaseFor(fromRight) {
		  return function(object, iteratee, keysFunc) {
		    var index = -1,
		        iterable = Object(object),
		        props = keysFunc(object),
		        length = props.length;

		    while (length--) {
		      var key = props[fromRight ? length : ++index];
		      if (iteratee(iterable[key], key, iterable) === false) {
		        break;
		      }
		    }
		    return object;
		  };
		}

		_createBaseFor = createBaseFor;
		return _createBaseFor;
	}

	var _baseFor;
	var hasRequired_baseFor;

	function require_baseFor () {
		if (hasRequired_baseFor) return _baseFor;
		hasRequired_baseFor = 1;
		var createBaseFor = require_createBaseFor();

		/**
		 * The base implementation of `baseForOwn` which iterates over `object`
		 * properties returned by `keysFunc` and invokes `iteratee` for each property.
		 * Iteratee functions may exit iteration early by explicitly returning `false`.
		 *
		 * @private
		 * @param {Object} object The object to iterate over.
		 * @param {Function} iteratee The function invoked per iteration.
		 * @param {Function} keysFunc The function to get the keys of `object`.
		 * @returns {Object} Returns `object`.
		 */
		var baseFor = createBaseFor();

		_baseFor = baseFor;
		return _baseFor;
	}

	var baseFor$1 = require_baseFor(),
	    keys$1 = requireKeys();

	/**
	 * The base implementation of `_.forOwn` without support for iteratee shorthands.
	 *
	 * @private
	 * @param {Object} object The object to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Object} Returns `object`.
	 */
	function baseForOwn$2(object, iteratee) {
	  return object && baseFor$1(object, iteratee, keys$1);
	}

	var _baseForOwn = baseForOwn$2;

	var identity$2 = identity_1;

	/**
	 * Casts `value` to `identity` if it's not a function.
	 *
	 * @private
	 * @param {*} value The value to inspect.
	 * @returns {Function} Returns cast function.
	 */
	function castFunction$2(value) {
	  return typeof value == 'function' ? value : identity$2;
	}

	var _castFunction = castFunction$2;

	var baseForOwn$1 = _baseForOwn,
	    castFunction$1 = _castFunction;

	/**
	 * Iterates over own enumerable string keyed properties of an object and
	 * invokes `iteratee` for each property. The iteratee is invoked with three
	 * arguments: (value, key, object). Iteratee functions may exit iteration
	 * early by explicitly returning `false`.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.3.0
	 * @category Object
	 * @param {Object} object The object to iterate over.
	 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	 * @returns {Object} Returns `object`.
	 * @see _.forOwnRight
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 *   this.b = 2;
	 * }
	 *
	 * Foo.prototype.c = 3;
	 *
	 * _.forOwn(new Foo, function(value, key) {
	 *   console.log(key);
	 * });
	 * // => Logs 'a' then 'b' (iteration order is not guaranteed).
	 */
	function forOwn(object, iteratee) {
	  return object && baseForOwn$1(object, castFunction$1(iteratee));
	}

	var forOwn_1 = forOwn;

	/**
	 * Checks if `value` is `undefined`.
	 *
	 * @static
	 * @since 0.1.0
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
	 * @example
	 *
	 * _.isUndefined(void 0);
	 * // => true
	 *
	 * _.isUndefined(null);
	 * // => false
	 */

	function isUndefined$1(value) {
	  return value === undefined;
	}

	var isUndefined_1 = isUndefined$1;

	var baseAssignValue = require_baseAssignValue(),
	    eq$2 = requireEq$1();

	/**
	 * This function is like `assignValue` except that it doesn't assign
	 * `undefined` values.
	 *
	 * @private
	 * @param {Object} object The object to modify.
	 * @param {string} key The key of the property to assign.
	 * @param {*} value The value to assign.
	 */
	function assignMergeValue$2(object, key, value) {
	  if ((value !== undefined && !eq$2(object[key], value)) ||
	      (value === undefined && !(key in object))) {
	    baseAssignValue(object, key, value);
	  }
	}

	var _assignMergeValue = assignMergeValue$2;

	var isArrayLike$3 = requireIsArrayLike(),
	    isObjectLike = isObjectLike_1;

	/**
	 * This method is like `_.isArrayLike` except that it also checks if `value`
	 * is an object.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an array-like object,
	 *  else `false`.
	 * @example
	 *
	 * _.isArrayLikeObject([1, 2, 3]);
	 * // => true
	 *
	 * _.isArrayLikeObject(document.body.children);
	 * // => true
	 *
	 * _.isArrayLikeObject('abc');
	 * // => false
	 *
	 * _.isArrayLikeObject(_.noop);
	 * // => false
	 */
	function isArrayLikeObject$1(value) {
	  return isObjectLike(value) && isArrayLike$3(value);
	}

	var isArrayLikeObject_1 = isArrayLikeObject$1;

	/**
	 * Gets the value at `key`, unless `key` is "__proto__" or "constructor".
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {string} key The key of the property to get.
	 * @returns {*} Returns the property value.
	 */

	function safeGet$2(object, key) {
	  if (key === 'constructor' && typeof object[key] === 'function') {
	    return;
	  }

	  if (key == '__proto__') {
	    return;
	  }

	  return object[key];
	}

	var _safeGet = safeGet$2;

	var copyObject = require_copyObject(),
	    keysIn$1 = requireKeysIn();

	/**
	 * Converts `value` to a plain object flattening inherited enumerable string
	 * keyed properties of `value` to own properties of the plain object.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.0.0
	 * @category Lang
	 * @param {*} value The value to convert.
	 * @returns {Object} Returns the converted plain object.
	 * @example
	 *
	 * function Foo() {
	 *   this.b = 2;
	 * }
	 *
	 * Foo.prototype.c = 3;
	 *
	 * _.assign({ 'a': 1 }, new Foo);
	 * // => { 'a': 1, 'b': 2 }
	 *
	 * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
	 * // => { 'a': 1, 'b': 2, 'c': 3 }
	 */
	function toPlainObject$1(value) {
	  return copyObject(value, keysIn$1(value));
	}

	var toPlainObject_1 = toPlainObject$1;

	var assignMergeValue$1 = _assignMergeValue,
	    cloneBuffer = require_cloneBuffer(),
	    cloneTypedArray = require_cloneTypedArray(),
	    copyArray = require_copyArray(),
	    initCloneObject = require_initCloneObject(),
	    isArguments$2 = requireIsArguments(),
	    isArray$2 = isArray_1,
	    isArrayLikeObject = isArrayLikeObject_1,
	    isBuffer = requireIsBuffer(),
	    isFunction$2 = isFunction_1,
	    isObject$5 = isObject_1,
	    isPlainObject = isPlainObject_1,
	    isTypedArray$2 = isTypedArray_1,
	    safeGet$1 = _safeGet,
	    toPlainObject = toPlainObject_1;

	/**
	 * A specialized version of `baseMerge` for arrays and objects which performs
	 * deep merges and tracks traversed objects enabling objects with circular
	 * references to be merged.
	 *
	 * @private
	 * @param {Object} object The destination object.
	 * @param {Object} source The source object.
	 * @param {string} key The key of the value to merge.
	 * @param {number} srcIndex The index of `source`.
	 * @param {Function} mergeFunc The function to merge values.
	 * @param {Function} [customizer] The function to customize assigned values.
	 * @param {Object} [stack] Tracks traversed source values and their merged
	 *  counterparts.
	 */
	function baseMergeDeep$1(object, source, key, srcIndex, mergeFunc, customizer, stack) {
	  var objValue = safeGet$1(object, key),
	      srcValue = safeGet$1(source, key),
	      stacked = stack.get(srcValue);

	  if (stacked) {
	    assignMergeValue$1(object, key, stacked);
	    return;
	  }
	  var newValue = customizer
	    ? customizer(objValue, srcValue, (key + ''), object, source, stack)
	    : undefined;

	  var isCommon = newValue === undefined;

	  if (isCommon) {
	    var isArr = isArray$2(srcValue),
	        isBuff = !isArr && isBuffer(srcValue),
	        isTyped = !isArr && !isBuff && isTypedArray$2(srcValue);

	    newValue = srcValue;
	    if (isArr || isBuff || isTyped) {
	      if (isArray$2(objValue)) {
	        newValue = objValue;
	      }
	      else if (isArrayLikeObject(objValue)) {
	        newValue = copyArray(objValue);
	      }
	      else if (isBuff) {
	        isCommon = false;
	        newValue = cloneBuffer(srcValue, true);
	      }
	      else if (isTyped) {
	        isCommon = false;
	        newValue = cloneTypedArray(srcValue, true);
	      }
	      else {
	        newValue = [];
	      }
	    }
	    else if (isPlainObject(srcValue) || isArguments$2(srcValue)) {
	      newValue = objValue;
	      if (isArguments$2(objValue)) {
	        newValue = toPlainObject(objValue);
	      }
	      else if (!isObject$5(objValue) || isFunction$2(objValue)) {
	        newValue = initCloneObject(srcValue);
	      }
	    }
	    else {
	      isCommon = false;
	    }
	  }
	  if (isCommon) {
	    // Recursively merge objects and arrays (susceptible to call stack limits).
	    stack.set(srcValue, newValue);
	    mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
	    stack['delete'](srcValue);
	  }
	  assignMergeValue$1(object, key, newValue);
	}

	var _baseMergeDeep = baseMergeDeep$1;

	var Stack = require_Stack(),
	    assignMergeValue = _assignMergeValue,
	    baseFor = require_baseFor(),
	    baseMergeDeep = _baseMergeDeep,
	    isObject$4 = isObject_1,
	    keysIn = requireKeysIn(),
	    safeGet = _safeGet;

	/**
	 * The base implementation of `_.merge` without support for multiple sources.
	 *
	 * @private
	 * @param {Object} object The destination object.
	 * @param {Object} source The source object.
	 * @param {number} srcIndex The index of `source`.
	 * @param {Function} [customizer] The function to customize merged values.
	 * @param {Object} [stack] Tracks traversed source values and their merged
	 *  counterparts.
	 */
	function baseMerge$1(object, source, srcIndex, customizer, stack) {
	  if (object === source) {
	    return;
	  }
	  baseFor(source, function(srcValue, key) {
	    stack || (stack = new Stack);
	    if (isObject$4(srcValue)) {
	      baseMergeDeep(object, source, key, srcIndex, baseMerge$1, customizer, stack);
	    }
	    else {
	      var newValue = customizer
	        ? customizer(safeGet(object, key), srcValue, (key + ''), object, source, stack)
	        : undefined;

	      if (newValue === undefined) {
	        newValue = srcValue;
	      }
	      assignMergeValue(object, key, newValue);
	    }
	  }, keysIn);
	}

	var _baseMerge = baseMerge$1;

	/**
	 * A faster alternative to `Function#apply`, this function invokes `func`
	 * with the `this` binding of `thisArg` and the arguments of `args`.
	 *
	 * @private
	 * @param {Function} func The function to invoke.
	 * @param {*} thisArg The `this` binding of `func`.
	 * @param {Array} args The arguments to invoke `func` with.
	 * @returns {*} Returns the result of `func`.
	 */

	var _apply;
	var hasRequired_apply;

	function require_apply () {
		if (hasRequired_apply) return _apply;
		hasRequired_apply = 1;
		function apply(func, thisArg, args) {
		  switch (args.length) {
		    case 0: return func.call(thisArg);
		    case 1: return func.call(thisArg, args[0]);
		    case 2: return func.call(thisArg, args[0], args[1]);
		    case 3: return func.call(thisArg, args[0], args[1], args[2]);
		  }
		  return func.apply(thisArg, args);
		}

		_apply = apply;
		return _apply;
	}

	var _overRest;
	var hasRequired_overRest;

	function require_overRest () {
		if (hasRequired_overRest) return _overRest;
		hasRequired_overRest = 1;
		var apply = require_apply();

		/* Built-in method references for those with the same name as other `lodash` methods. */
		var nativeMax = Math.max;

		/**
		 * A specialized version of `baseRest` which transforms the rest array.
		 *
		 * @private
		 * @param {Function} func The function to apply a rest parameter to.
		 * @param {number} [start=func.length-1] The start position of the rest parameter.
		 * @param {Function} transform The rest array transform.
		 * @returns {Function} Returns the new function.
		 */
		function overRest(func, start, transform) {
		  start = nativeMax(start === undefined ? (func.length - 1) : start, 0);
		  return function() {
		    var args = arguments,
		        index = -1,
		        length = nativeMax(args.length - start, 0),
		        array = Array(length);

		    while (++index < length) {
		      array[index] = args[start + index];
		    }
		    index = -1;
		    var otherArgs = Array(start + 1);
		    while (++index < start) {
		      otherArgs[index] = args[index];
		    }
		    otherArgs[start] = transform(array);
		    return apply(func, this, otherArgs);
		  };
		}

		_overRest = overRest;
		return _overRest;
	}

	/**
	 * Creates a function that returns `value`.
	 *
	 * @static
	 * @memberOf _
	 * @since 2.4.0
	 * @category Util
	 * @param {*} value The value to return from the new function.
	 * @returns {Function} Returns the new constant function.
	 * @example
	 *
	 * var objects = _.times(2, _.constant({ 'a': 1 }));
	 *
	 * console.log(objects);
	 * // => [{ 'a': 1 }, { 'a': 1 }]
	 *
	 * console.log(objects[0] === objects[1]);
	 * // => true
	 */

	var constant_1;
	var hasRequiredConstant;

	function requireConstant () {
		if (hasRequiredConstant) return constant_1;
		hasRequiredConstant = 1;
		function constant(value) {
		  return function() {
		    return value;
		  };
		}

		constant_1 = constant;
		return constant_1;
	}

	var _baseSetToString;
	var hasRequired_baseSetToString;

	function require_baseSetToString () {
		if (hasRequired_baseSetToString) return _baseSetToString;
		hasRequired_baseSetToString = 1;
		var constant = requireConstant(),
		    defineProperty = require_defineProperty(),
		    identity = identity_1;

		/**
		 * The base implementation of `setToString` without support for hot loop shorting.
		 *
		 * @private
		 * @param {Function} func The function to modify.
		 * @param {Function} string The `toString` result.
		 * @returns {Function} Returns `func`.
		 */
		var baseSetToString = !defineProperty ? identity : function(func, string) {
		  return defineProperty(func, 'toString', {
		    'configurable': true,
		    'enumerable': false,
		    'value': constant(string),
		    'writable': true
		  });
		};

		_baseSetToString = baseSetToString;
		return _baseSetToString;
	}

	/** Used to detect hot functions by number of calls within a span of milliseconds. */

	var _shortOut;
	var hasRequired_shortOut;

	function require_shortOut () {
		if (hasRequired_shortOut) return _shortOut;
		hasRequired_shortOut = 1;
		var HOT_COUNT = 800,
		    HOT_SPAN = 16;

		/* Built-in method references for those with the same name as other `lodash` methods. */
		var nativeNow = Date.now;

		/**
		 * Creates a function that'll short out and invoke `identity` instead
		 * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
		 * milliseconds.
		 *
		 * @private
		 * @param {Function} func The function to restrict.
		 * @returns {Function} Returns the new shortable function.
		 */
		function shortOut(func) {
		  var count = 0,
		      lastCalled = 0;

		  return function() {
		    var stamp = nativeNow(),
		        remaining = HOT_SPAN - (stamp - lastCalled);

		    lastCalled = stamp;
		    if (remaining > 0) {
		      if (++count >= HOT_COUNT) {
		        return arguments[0];
		      }
		    } else {
		      count = 0;
		    }
		    return func.apply(undefined, arguments);
		  };
		}

		_shortOut = shortOut;
		return _shortOut;
	}

	var _setToString;
	var hasRequired_setToString;

	function require_setToString () {
		if (hasRequired_setToString) return _setToString;
		hasRequired_setToString = 1;
		var baseSetToString = require_baseSetToString(),
		    shortOut = require_shortOut();

		/**
		 * Sets the `toString` method of `func` to return `string`.
		 *
		 * @private
		 * @param {Function} func The function to modify.
		 * @param {Function} string The `toString` result.
		 * @returns {Function} Returns `func`.
		 */
		var setToString = shortOut(baseSetToString);

		_setToString = setToString;
		return _setToString;
	}

	var identity$1 = identity_1,
	    overRest = require_overRest(),
	    setToString = require_setToString();

	/**
	 * The base implementation of `_.rest` which doesn't validate or coerce arguments.
	 *
	 * @private
	 * @param {Function} func The function to apply a rest parameter to.
	 * @param {number} [start=func.length-1] The start position of the rest parameter.
	 * @returns {Function} Returns the new function.
	 */
	function baseRest$1(func, start) {
	  return setToString(overRest(func, start, identity$1), func + '');
	}

	var _baseRest = baseRest$1;

	var eq$1 = requireEq$1(),
	    isArrayLike$2 = requireIsArrayLike(),
	    isIndex = _isIndex,
	    isObject$3 = isObject_1;

	/**
	 * Checks if the given arguments are from an iteratee call.
	 *
	 * @private
	 * @param {*} value The potential iteratee value argument.
	 * @param {*} index The potential iteratee index or key argument.
	 * @param {*} object The potential iteratee object argument.
	 * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
	 *  else `false`.
	 */
	function isIterateeCall$1(value, index, object) {
	  if (!isObject$3(object)) {
	    return false;
	  }
	  var type = typeof index;
	  if (type == 'number'
	        ? (isArrayLike$2(object) && isIndex(index, object.length))
	        : (type == 'string' && index in object)
	      ) {
	    return eq$1(object[index], value);
	  }
	  return false;
	}

	var _isIterateeCall = isIterateeCall$1;

	var baseRest = _baseRest,
	    isIterateeCall = _isIterateeCall;

	/**
	 * Creates a function like `_.assign`.
	 *
	 * @private
	 * @param {Function} assigner The function to assign values.
	 * @returns {Function} Returns the new assigner function.
	 */
	function createAssigner$2(assigner) {
	  return baseRest(function(object, sources) {
	    var index = -1,
	        length = sources.length,
	        customizer = length > 1 ? sources[length - 1] : undefined,
	        guard = length > 2 ? sources[2] : undefined;

	    customizer = (assigner.length > 3 && typeof customizer == 'function')
	      ? (length--, customizer)
	      : undefined;

	    if (guard && isIterateeCall(sources[0], sources[1], guard)) {
	      customizer = length < 3 ? undefined : customizer;
	      length = 1;
	    }
	    object = Object(object);
	    while (++index < length) {
	      var source = sources[index];
	      if (source) {
	        assigner(object, source, index, customizer);
	      }
	    }
	    return object;
	  });
	}

	var _createAssigner = createAssigner$2;

	var baseMerge = _baseMerge,
	    createAssigner$1 = _createAssigner;

	/**
	 * This method is like `_.merge` except that it accepts `customizer` which
	 * is invoked to produce the merged values of the destination and source
	 * properties. If `customizer` returns `undefined`, merging is handled by the
	 * method instead. The `customizer` is invoked with six arguments:
	 * (objValue, srcValue, key, object, source, stack).
	 *
	 * **Note:** This method mutates `object`.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Object
	 * @param {Object} object The destination object.
	 * @param {...Object} sources The source objects.
	 * @param {Function} customizer The function to customize assigned values.
	 * @returns {Object} Returns `object`.
	 * @example
	 *
	 * function customizer(objValue, srcValue) {
	 *   if (_.isArray(objValue)) {
	 *     return objValue.concat(srcValue);
	 *   }
	 * }
	 *
	 * var object = { 'a': [1], 'b': [2] };
	 * var other = { 'a': [3], 'b': [4] };
	 *
	 * _.mergeWith(object, other, customizer);
	 * // => { 'a': [1, 3], 'b': [2, 4] }
	 */
	var mergeWith = createAssigner$1(function(object, source, srcIndex, customizer) {
	  baseMerge(object, source, srcIndex, customizer);
	});

	var mergeWith_1 = mergeWith;

	/** Error message constants. */

	var FUNC_ERROR_TEXT = 'Expected a function';

	/**
	 * Creates a function that negates the result of the predicate `func`. The
	 * `func` predicate is invoked with the `this` binding and arguments of the
	 * created function.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.0.0
	 * @category Function
	 * @param {Function} predicate The predicate to negate.
	 * @returns {Function} Returns the new negated function.
	 * @example
	 *
	 * function isEven(n) {
	 *   return n % 2 == 0;
	 * }
	 *
	 * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
	 * // => [1, 3, 5]
	 */
	function negate$2(predicate) {
	  if (typeof predicate != 'function') {
	    throw new TypeError(FUNC_ERROR_TEXT);
	  }
	  return function() {
	    var args = arguments;
	    switch (args.length) {
	      case 0: return !predicate.call(this);
	      case 1: return !predicate.call(this, args[0]);
	      case 2: return !predicate.call(this, args[0], args[1]);
	      case 3: return !predicate.call(this, args[0], args[1], args[2]);
	    }
	    return !predicate.apply(this, args);
	  };
	}

	var negate_1 = negate$2;

	var baseIteratee$1 = _baseIteratee,
	    negate$1 = negate_1,
	    pickBy = pickBy_1;

	/**
	 * The opposite of `_.pickBy`; this method creates an object composed of
	 * the own and inherited enumerable string keyed properties of `object` that
	 * `predicate` doesn't return truthy for. The predicate is invoked with two
	 * arguments: (value, key).
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Object
	 * @param {Object} object The source object.
	 * @param {Function} [predicate=_.identity] The function invoked per property.
	 * @returns {Object} Returns the new object.
	 * @example
	 *
	 * var object = { 'a': 1, 'b': '2', 'c': 3 };
	 *
	 * _.omitBy(object, _.isNumber);
	 * // => { 'b': '2' }
	 */
	function omitBy(object, predicate) {
	  return pickBy(object, negate$1(baseIteratee$1(predicate)));
	}

	var omitBy_1 = omitBy;

	var iterators;
	var hasRequiredIterators;

	function requireIterators () {
		if (hasRequiredIterators) return iterators;
		hasRequiredIterators = 1;
		var __defProp = Object.defineProperty;
		var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
		var __getOwnPropNames = Object.getOwnPropertyNames;
		var __hasOwnProp = Object.prototype.hasOwnProperty;
		var __export = (target, all) => {
		  for (var name in all)
		    __defProp(target, name, { get: all[name], enumerable: true });
		};
		var __copyProps = (to, from, except, desc) => {
		  if (from && typeof from === "object" || typeof from === "function") {
		    for (let key of __getOwnPropNames(from))
		      if (!__hasOwnProp.call(to, key) && key !== except)
		        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
		  }
		  return to;
		};
		var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
		var iterators_exports = {};
		__export(iterators_exports, {
		  combinedIterator: () => combinedIterator,
		  every: () => every,
		  find: () => find,
		  map: () => map,
		  some: () => some
		});
		iterators = __toCommonJS(iterators_exports);
		function* map(iterable, cb) {
		  let i = 0;
		  for (const item of iterable) {
		    yield cb(item, i++);
		  }
		}
		function some(iterable, cb) {
		  for (const item of iterable) {
		    if (cb(item)) {
		      return true;
		    }
		  }
		  return false;
		}
		function every(iterable, cb) {
		  for (const item of iterable) {
		    if (!cb(item)) {
		      return false;
		    }
		  }
		  return true;
		}
		function find(iterable, cb) {
		  for (const item of iterable) {
		    if (cb(item)) {
		      return item;
		    }
		  }
		  return void 0;
		}
		function* combinedIterator(...iterables) {
		  for (const iterable of iterables) {
		    yield* iterable;
		  }
		}
		
		return iterators;
	}

	var inflection$1 = {};

	/*!
	 * inflection
	 * Copyright(c) 2011 Ben Lin <ben@dreamerslab.com>
	 * MIT Licensed
	 *
	 * @fileoverview
	 * A port of inflection-js to node.js module.
	 */
	Object.defineProperty(inflection$1, "__esModule", { value: true });
	inflection$1.transform = inflection$1.ordinalize = inflection$1.foreignKey = inflection$1.classify = inflection$1.tableize = inflection$1.demodulize = inflection$1.titleize = inflection$1.dasherize = inflection$1.capitalize = inflection$1.humanize = inflection$1.underscore = inflection$1.camelize = inflection$1.inflect = inflection$1.singularize = inflection$1.pluralize = void 0;
	/**
	 * @description This is a list of nouns that use the same form for both singular and plural.
	 *              This list should remain entirely in lower case to correctly match Strings.
	 */
	const uncountableWords = [
	    // 'access',
	    'accommodation',
	    'adulthood',
	    'advertising',
	    'advice',
	    'aggression',
	    'aid',
	    'air',
	    'aircraft',
	    'alcohol',
	    'anger',
	    'applause',
	    'arithmetic',
	    // 'art',
	    'assistance',
	    'athletics',
	    // 'attention',
	    'bacon',
	    'baggage',
	    // 'ballet',
	    // 'beauty',
	    'beef',
	    // 'beer',
	    // 'behavior',
	    'biology',
	    // 'billiards',
	    'blood',
	    'botany',
	    // 'bowels',
	    'bread',
	    // 'business',
	    'butter',
	    'carbon',
	    'cardboard',
	    'cash',
	    'chalk',
	    'chaos',
	    'chess',
	    'crossroads',
	    'countryside',
	    // 'damage',
	    'dancing',
	    // 'danger',
	    'deer',
	    // 'delight',
	    // 'dessert',
	    'dignity',
	    'dirt',
	    // 'distribution',
	    'dust',
	    'economics',
	    'education',
	    'electricity',
	    // 'employment',
	    // 'energy',
	    'engineering',
	    'enjoyment',
	    // 'entertainment',
	    'envy',
	    'equipment',
	    'ethics',
	    'evidence',
	    'evolution',
	    // 'failure',
	    // 'faith',
	    'fame',
	    'fiction',
	    // 'fish',
	    'flour',
	    'flu',
	    'food',
	    // 'freedom',
	    // 'fruit',
	    'fuel',
	    'fun',
	    // 'funeral',
	    'furniture',
	    'gallows',
	    'garbage',
	    'garlic',
	    // 'gas',
	    'genetics',
	    // 'glass',
	    'gold',
	    'golf',
	    'gossip',
	    // 'grass',
	    'gratitude',
	    'grief',
	    // 'ground',
	    'guilt',
	    'gymnastics',
	    // 'hair',
	    'happiness',
	    'hardware',
	    'harm',
	    'hate',
	    'hatred',
	    'health',
	    'heat',
	    // 'height',
	    'help',
	    'homework',
	    'honesty',
	    'honey',
	    'hospitality',
	    'housework',
	    'humour',
	    'hunger',
	    'hydrogen',
	    'ice',
	    'importance',
	    'inflation',
	    'information',
	    // 'injustice',
	    'innocence',
	    // 'intelligence',
	    'iron',
	    'irony',
	    'jam',
	    // 'jealousy',
	    // 'jelly',
	    'jewelry',
	    // 'joy',
	    'judo',
	    // 'juice',
	    // 'justice',
	    'karate',
	    // 'kindness',
	    'knowledge',
	    // 'labour',
	    'lack',
	    // 'land',
	    'laughter',
	    'lava',
	    'leather',
	    'leisure',
	    'lightning',
	    'linguine',
	    'linguini',
	    'linguistics',
	    'literature',
	    'litter',
	    'livestock',
	    'logic',
	    'loneliness',
	    // 'love',
	    'luck',
	    'luggage',
	    'macaroni',
	    'machinery',
	    'magic',
	    // 'mail',
	    'management',
	    'mankind',
	    'marble',
	    'mathematics',
	    'mayonnaise',
	    'measles',
	    // 'meat',
	    // 'metal',
	    'methane',
	    'milk',
	    'minus',
	    'money',
	    // 'moose',
	    'mud',
	    'music',
	    'mumps',
	    'nature',
	    'news',
	    'nitrogen',
	    'nonsense',
	    'nurture',
	    'nutrition',
	    'obedience',
	    'obesity',
	    // 'oil',
	    'oxygen',
	    // 'paper',
	    // 'passion',
	    'pasta',
	    'patience',
	    // 'permission',
	    'physics',
	    'poetry',
	    'pollution',
	    'poverty',
	    // 'power',
	    'pride',
	    // 'production',
	    // 'progress',
	    // 'pronunciation',
	    'psychology',
	    'publicity',
	    'punctuation',
	    // 'quality',
	    // 'quantity',
	    'quartz',
	    'racism',
	    // 'rain',
	    // 'recreation',
	    'relaxation',
	    'reliability',
	    'research',
	    'respect',
	    'revenge',
	    'rice',
	    'rubbish',
	    'rum',
	    'safety',
	    // 'salad',
	    // 'salt',
	    // 'sand',
	    // 'satire',
	    'scenery',
	    'seafood',
	    'seaside',
	    'series',
	    'shame',
	    'sheep',
	    'shopping',
	    // 'silence',
	    'sleep',
	    // 'slang'
	    'smoke',
	    'smoking',
	    'snow',
	    'soap',
	    'software',
	    'soil',
	    // 'sorrow',
	    // 'soup',
	    'spaghetti',
	    // 'speed',
	    'species',
	    // 'spelling',
	    // 'sport',
	    'steam',
	    // 'strength',
	    'stuff',
	    'stupidity',
	    // 'success',
	    // 'sugar',
	    'sunshine',
	    'symmetry',
	    // 'tea',
	    'tennis',
	    'thirst',
	    'thunder',
	    'timber',
	    // 'time',
	    // 'toast',
	    // 'tolerance',
	    // 'trade',
	    'traffic',
	    'transportation',
	    // 'travel',
	    'trust',
	    // 'understanding',
	    'underwear',
	    'unemployment',
	    'unity',
	    // 'usage',
	    'validity',
	    'veal',
	    'vegetation',
	    'vegetarianism',
	    'vengeance',
	    'violence',
	    // 'vision',
	    'vitality',
	    'warmth',
	    // 'water',
	    'wealth',
	    'weather',
	    // 'weight',
	    'welfare',
	    'wheat',
	    // 'whiskey',
	    // 'width',
	    'wildlife',
	    // 'wine',
	    'wisdom',
	    // 'wood',
	    // 'wool',
	    // 'work',
	    // 'yeast',
	    'yoga',
	    'zinc',
	    'zoology',
	];
	/**
	 * @description These rules translate from the singular form of a noun to its plural form.
	 */
	const regex$1 = {
	    plural: {
	        men: new RegExp('^(m|wom)en$', 'gi'),
	        people: new RegExp('(pe)ople$', 'gi'),
	        children: new RegExp('(child)ren$', 'gi'),
	        tia: new RegExp('([ti])a$', 'gi'),
	        analyses: new RegExp('((a)naly|(b)a|(d)iagno|(p)arenthe|(p)rogno|(s)ynop|(t)he)ses$', 'gi'),
	        databases: new RegExp('(database)s$', 'gi'),
	        drives: new RegExp('(drive)s$', 'gi'),
	        hives: new RegExp('(hi|ti)ves$', 'gi'),
	        curves: new RegExp('(curve)s$', 'gi'),
	        lrves: new RegExp('([lr])ves$', 'gi'),
	        aves: new RegExp('([a])ves$', 'gi'),
	        foves: new RegExp('([^fo])ves$', 'gi'),
	        movies: new RegExp('(m)ovies$', 'gi'),
	        aeiouyies: new RegExp('([^aeiouy]|qu)ies$', 'gi'),
	        series: new RegExp('(s)eries$', 'gi'),
	        xes: new RegExp('(x|ch|ss|sh)es$', 'gi'),
	        mice: new RegExp('([m|l])ice$', 'gi'),
	        buses: new RegExp('(bus)es$', 'gi'),
	        oes: new RegExp('(o)es$', 'gi'),
	        shoes: new RegExp('(shoe)s$', 'gi'),
	        crises: new RegExp('(cris|ax|test)es$', 'gi'),
	        octopuses: new RegExp('(octop|vir)uses$', 'gi'),
	        aliases: new RegExp('(alias|canvas|status|campus)es$', 'gi'),
	        summonses: new RegExp('^(summons|bonus)es$', 'gi'),
	        oxen: new RegExp('^(ox)en', 'gi'),
	        matrices: new RegExp('(matr)ices$', 'gi'),
	        vertices: new RegExp('(vert|ind)ices$', 'gi'),
	        feet: new RegExp('^feet$', 'gi'),
	        teeth: new RegExp('^teeth$', 'gi'),
	        geese: new RegExp('^geese$', 'gi'),
	        quizzes: new RegExp('(quiz)zes$', 'gi'),
	        whereases: new RegExp('^(whereas)es$', 'gi'),
	        criteria: new RegExp('^(criteri)a$', 'gi'),
	        genera: new RegExp('^genera$', 'gi'),
	        ss: new RegExp('ss$', 'gi'),
	        s: new RegExp('s$', 'gi'),
	    },
	    singular: {
	        man: new RegExp('^(m|wom)an$', 'gi'),
	        person: new RegExp('(pe)rson$', 'gi'),
	        child: new RegExp('(child)$', 'gi'),
	        drive: new RegExp('(drive)$', 'gi'),
	        ox: new RegExp('^(ox)$', 'gi'),
	        axis: new RegExp('(ax|test)is$', 'gi'),
	        octopus: new RegExp('(octop|vir)us$', 'gi'),
	        alias: new RegExp('(alias|status|canvas|campus)$', 'gi'),
	        summons: new RegExp('^(summons|bonus)$', 'gi'),
	        bus: new RegExp('(bu)s$', 'gi'),
	        buffalo: new RegExp('(buffal|tomat|potat)o$', 'gi'),
	        tium: new RegExp('([ti])um$', 'gi'),
	        sis: new RegExp('sis$', 'gi'),
	        ffe: new RegExp('(?:([^f])fe|([lr])f)$', 'gi'),
	        hive: new RegExp('(hi|ti)ve$', 'gi'),
	        aeiouyy: new RegExp('([^aeiouy]|qu)y$', 'gi'),
	        x: new RegExp('(x|ch|ss|sh)$', 'gi'),
	        matrix: new RegExp('(matr)ix$', 'gi'),
	        vertex: new RegExp('(vert|ind)ex$', 'gi'),
	        mouse: new RegExp('([m|l])ouse$', 'gi'),
	        foot: new RegExp('^foot$', 'gi'),
	        tooth: new RegExp('^tooth$', 'gi'),
	        goose: new RegExp('^goose$', 'gi'),
	        quiz: new RegExp('(quiz)$', 'gi'),
	        whereas: new RegExp('^(whereas)$', 'gi'),
	        criterion: new RegExp('^(criteri)on$', 'gi'),
	        genus: new RegExp('^genus$', 'gi'),
	        s: new RegExp('s$', 'gi'),
	        common: new RegExp('$', 'gi'),
	    },
	};
	const pluralRules = [
	    // do not replace if its already a plural word
	    [regex$1.plural.men],
	    [regex$1.plural.people],
	    [regex$1.plural.children],
	    [regex$1.plural.tia],
	    [regex$1.plural.analyses],
	    [regex$1.plural.databases],
	    [regex$1.plural.drives],
	    [regex$1.plural.hives],
	    [regex$1.plural.curves],
	    [regex$1.plural.lrves],
	    [regex$1.plural.foves],
	    [regex$1.plural.aeiouyies],
	    [regex$1.plural.series],
	    [regex$1.plural.movies],
	    [regex$1.plural.xes],
	    [regex$1.plural.mice],
	    [regex$1.plural.buses],
	    [regex$1.plural.oes],
	    [regex$1.plural.shoes],
	    [regex$1.plural.crises],
	    [regex$1.plural.octopuses],
	    [regex$1.plural.aliases],
	    [regex$1.plural.summonses],
	    [regex$1.plural.oxen],
	    [regex$1.plural.matrices],
	    [regex$1.plural.feet],
	    [regex$1.plural.teeth],
	    [regex$1.plural.geese],
	    [regex$1.plural.quizzes],
	    [regex$1.plural.whereases],
	    [regex$1.plural.criteria],
	    [regex$1.plural.genera],
	    // original rule
	    [regex$1.singular.man, '$1en'],
	    [regex$1.singular.person, '$1ople'],
	    [regex$1.singular.child, '$1ren'],
	    [regex$1.singular.drive, '$1s'],
	    [regex$1.singular.ox, '$1en'],
	    [regex$1.singular.axis, '$1es'],
	    [regex$1.singular.octopus, '$1uses'],
	    [regex$1.singular.alias, '$1es'],
	    [regex$1.singular.summons, '$1es'],
	    [regex$1.singular.bus, '$1ses'],
	    [regex$1.singular.buffalo, '$1oes'],
	    [regex$1.singular.tium, '$1a'],
	    [regex$1.singular.sis, 'ses'],
	    [regex$1.singular.ffe, '$1$2ves'],
	    [regex$1.singular.hive, '$1ves'],
	    [regex$1.singular.aeiouyy, '$1ies'],
	    [regex$1.singular.matrix, '$1ices'],
	    [regex$1.singular.vertex, '$1ices'],
	    [regex$1.singular.x, '$1es'],
	    [regex$1.singular.mouse, '$1ice'],
	    [regex$1.singular.foot, 'feet'],
	    [regex$1.singular.tooth, 'teeth'],
	    [regex$1.singular.goose, 'geese'],
	    [regex$1.singular.quiz, '$1zes'],
	    [regex$1.singular.whereas, '$1es'],
	    [regex$1.singular.criterion, '$1a'],
	    [regex$1.singular.genus, 'genera'],
	    [regex$1.singular.s, 's'],
	    [regex$1.singular.common, 's'],
	];
	/**
	 * @description These rules translate from the plural form of a noun to its singular form.
	 */
	const singularRules = [
	    // do not replace if its already a singular word
	    [regex$1.singular.man],
	    [regex$1.singular.person],
	    [regex$1.singular.child],
	    [regex$1.singular.drive],
	    [regex$1.singular.ox],
	    [regex$1.singular.axis],
	    [regex$1.singular.octopus],
	    [regex$1.singular.alias],
	    [regex$1.singular.summons],
	    [regex$1.singular.bus],
	    [regex$1.singular.buffalo],
	    [regex$1.singular.tium],
	    [regex$1.singular.sis],
	    [regex$1.singular.ffe],
	    [regex$1.singular.hive],
	    [regex$1.singular.aeiouyy],
	    [regex$1.singular.x],
	    [regex$1.singular.matrix],
	    [regex$1.singular.mouse],
	    [regex$1.singular.foot],
	    [regex$1.singular.tooth],
	    [regex$1.singular.goose],
	    [regex$1.singular.quiz],
	    [regex$1.singular.whereas],
	    [regex$1.singular.criterion],
	    [regex$1.singular.genus],
	    // original rule
	    [regex$1.plural.men, '$1an'],
	    [regex$1.plural.people, '$1rson'],
	    [regex$1.plural.children, '$1'],
	    [regex$1.plural.databases, '$1'],
	    [regex$1.plural.drives, '$1'],
	    [regex$1.plural.genera, 'genus'],
	    [regex$1.plural.criteria, '$1on'],
	    [regex$1.plural.tia, '$1um'],
	    [regex$1.plural.analyses, '$1$2sis'],
	    [regex$1.plural.hives, '$1ve'],
	    [regex$1.plural.curves, '$1'],
	    [regex$1.plural.lrves, '$1f'],
	    [regex$1.plural.aves, '$1ve'],
	    [regex$1.plural.foves, '$1fe'],
	    [regex$1.plural.movies, '$1ovie'],
	    [regex$1.plural.aeiouyies, '$1y'],
	    [regex$1.plural.series, '$1eries'],
	    [regex$1.plural.xes, '$1'],
	    [regex$1.plural.mice, '$1ouse'],
	    [regex$1.plural.buses, '$1'],
	    [regex$1.plural.oes, '$1'],
	    [regex$1.plural.shoes, '$1'],
	    [regex$1.plural.crises, '$1is'],
	    [regex$1.plural.octopuses, '$1us'],
	    [regex$1.plural.aliases, '$1'],
	    [regex$1.plural.summonses, '$1'],
	    [regex$1.plural.oxen, '$1'],
	    [regex$1.plural.matrices, '$1ix'],
	    [regex$1.plural.vertices, '$1ex'],
	    [regex$1.plural.feet, 'foot'],
	    [regex$1.plural.teeth, 'tooth'],
	    [regex$1.plural.geese, 'goose'],
	    [regex$1.plural.quizzes, '$1'],
	    [regex$1.plural.whereases, '$1'],
	    [regex$1.plural.ss, 'ss'],
	    [regex$1.plural.s, ''],
	];
	/**
	 * @description This is a list of words that should not be capitalized for title case.
	 */
	const nonTitlecasedWords = [
	    'and',
	    'or',
	    'nor',
	    'a',
	    'an',
	    'the',
	    'so',
	    'but',
	    'to',
	    'of',
	    'at',
	    'by',
	    'from',
	    'into',
	    'on',
	    'onto',
	    'off',
	    'out',
	    'in',
	    'over',
	    'with',
	    'for',
	];
	/**
	 * @description These are regular expressions used for converting between String formats.
	 */
	const idSuffix = new RegExp('(_ids|_id)$', 'g');
	const underbar = new RegExp('_', 'g');
	const spaceOrUnderbar = new RegExp('[ _]', 'g');
	const uppercase = new RegExp('([A-Z])', 'g');
	const underbarPrefix = new RegExp('^_');
	/**
	 * A helper method that applies rules based replacement to a String.
	 * @param str String to modify and return based on the passed rules.
	 * @param rules Regexp to match paired with String to use for replacement
	 * @param skip Strings to skip if they match
	 * @param override String to return as though this method succeeded (used to conform to APIs)
	 * @returns Return passed String modified by passed rules.
	 * @example
	 *
	 *     applyRules( 'cows', singular_rules ); // === 'cow'
	 */
	function applyRules(str, rules, skip, override) {
	    if (override) {
	        return override;
	    }
	    else {
	        if (skip.includes(str.toLocaleLowerCase())) {
	            return str;
	        }
	        for (const rule of rules) {
	            if (str.match(rule[0])) {
	                if (rule[1] !== undefined) {
	                    return str.replace(rule[0], rule[1]);
	                }
	                return str;
	            }
	        }
	    }
	    return str;
	}
	/**
	 * This function adds pluralization support to every String object.
	 * @param str The subject string.
	 * @param plural Overrides normal output with said String.(optional)
	 * @returns Singular English language nouns are returned in plural form.
	 * @example
	 *
	 *     const inflection = require( 'inflection' );
	 *
	 *     inflection.pluralize( 'person' ); // === 'people'
	 *     inflection.pluralize( 'octopus' ); // === 'octopuses'
	 *     inflection.pluralize( 'Hat' ); // === 'Hats'
	 *     inflection.pluralize( 'person', 'guys' ); // === 'guys'
	 */
	function pluralize$1(str, plural) {
	    return applyRules(str, pluralRules, uncountableWords, plural);
	}
	inflection$1.pluralize = pluralize$1;
	/**
	 * This function adds singularization support to every String object.
	 * @param str The subject string.
	 * @param singular Overrides normal output with said String.(optional)
	 * @returns Plural English language nouns are returned in singular form.
	 * @example
	 *
	 *     const inflection = require( 'inflection' );
	 *
	 *     inflection.singularize( 'people' ); // === 'person'
	 *     inflection.singularize( 'octopuses' ); // === 'octopus'
	 *     inflection.singularize( 'Hats' ); // === 'Hat'
	 *     inflection.singularize( 'guys', 'person' ); // === 'person'
	 */
	function singularize$1(str, singular) {
	    return applyRules(str, singularRules, uncountableWords, singular);
	}
	inflection$1.singularize = singularize$1;
	/**
	 * This function will pluralize or singularlize a String appropriately based on a number value
	 * @param str The subject string.
	 * @param count The number to base pluralization off of.
	 * @param singular Overrides normal output with said String.(optional)
	 * @param plural Overrides normal output with said String.(optional)
	 * @returns English language nouns are returned in the plural or singular form based on the count.
	 * @example
	 *
	 *     const inflection = require( 'inflection' );
	 *
	 *     inflection.inflect( 'people' 1 ); // === 'person'
	 *     inflection.inflect( 'octopuses' 1 ); // === 'octopus'
	 *     inflection.inflect( 'Hats' 1 ); // === 'Hat'
	 *     inflection.inflect( 'guys', 1 , 'person' ); // === 'person'
	 *     inflection.inflect( 'inches', 1.5 ); // === 'inches'
	 *     inflection.inflect( 'person', 2 ); // === 'people'
	 *     inflection.inflect( 'octopus', 2 ); // === 'octopuses'
	 *     inflection.inflect( 'Hat', 2 ); // === 'Hats'
	 *     inflection.inflect( 'person', 2, null, 'guys' ); // === 'guys'
	 */
	function inflect(str, count, singular, plural) {
	    if (isNaN(count))
	        return str;
	    if (count === 1) {
	        return applyRules(str, singularRules, uncountableWords, singular);
	    }
	    else {
	        return applyRules(str, pluralRules, uncountableWords, plural);
	    }
	}
	inflection$1.inflect = inflect;
	/**
	 * This function adds camelization support to every String object.
	 * @param str The subject string.
	 * @param lowFirstLetter Default is to capitalize the first letter of the results.(optional)
	 *                                 Passing true will lowercase it.
	 * @returns Lower case underscored words will be returned in camel case.
	 *                  additionally '/' is translated to '::'
	 * @example
	 *
	 *     const inflection = require( 'inflection' );
	 *
	 *     inflection.camelize( 'message_properties' ); // === 'MessageProperties'
	 *     inflection.camelize( 'message_properties', true ); // === 'messageProperties'
	 */
	function camelize$1(str, lowFirstLetter) {
	    const strPath = str.split('/');
	    const j = strPath.length;
	    let strArr, k, l, first;
	    for (let i = 0; i < j; i++) {
	        strArr = strPath[i].split('_');
	        k = 0;
	        l = strArr.length;
	        for (; k < l; k++) {
	            if (k !== 0) {
	                strArr[k] = strArr[k].toLowerCase();
	            }
	            first = strArr[k].charAt(0);
	            first =
	                lowFirstLetter && i === 0 && k === 0
	                    ? first.toLowerCase()
	                    : first.toUpperCase();
	            strArr[k] = first + strArr[k].substring(1);
	        }
	        strPath[i] = strArr.join('');
	    }
	    return strPath.join('::');
	}
	inflection$1.camelize = camelize$1;
	/**
	 * This function adds underscore support to every String object.
	 * @param str The subject string.
	 * @param allUpperCase Default is to lowercase and add underscore prefix.(optional)
	 *                  Passing true will return as entered.
	 * @returns Camel cased words are returned as lower cased and underscored.
	 *                  additionally '::' is translated to '/'.
	 * @example
	 *
	 *     const inflection = require( 'inflection' );
	 *
	 *     inflection.underscore( 'MessageProperties' ); // === 'message_properties'
	 *     inflection.underscore( 'messageProperties' ); // === 'message_properties'
	 *     inflection.underscore( 'MP', true ); // === 'MP'
	 */
	function underscore$1(str, allUpperCase) {
	    if (allUpperCase && str === str.toUpperCase())
	        return str;
	    const strPath = str.split('::');
	    const j = strPath.length;
	    for (let i = 0; i < j; i++) {
	        strPath[i] = strPath[i].replace(uppercase, '_$1');
	        strPath[i] = strPath[i].replace(underbarPrefix, '');
	    }
	    return strPath.join('/').toLowerCase();
	}
	inflection$1.underscore = underscore$1;
	/**
	 * This function adds humanize support to every String object.
	 * @param str The subject string.
	 * @param lowFirstLetter Default is to capitalize the first letter of the results.(optional)
	 *                                 Passing true will lowercase it.
	 * @returns Lower case underscored words will be returned in humanized form.
	 * @example
	 *
	 *     const inflection = require( 'inflection' );
	 *
	 *     inflection.humanize( 'message_properties' ); // === 'Message properties'
	 *     inflection.humanize( 'message_properties', true ); // === 'message properties'
	 */
	function humanize(str, lowFirstLetter) {
	    str = str.toLowerCase();
	    str = str.replace(idSuffix, '');
	    str = str.replace(underbar, ' ');
	    if (!lowFirstLetter) {
	        str = capitalize(str);
	    }
	    return str;
	}
	inflection$1.humanize = humanize;
	/**
	 * This function adds capitalization support to every String object.
	 * @param str The subject string.
	 * @returns All characters will be lower case and the first will be upper.
	 * @example
	 *
	 *     const inflection = require( 'inflection' );
	 *
	 *     inflection.capitalize( 'message_properties' ); // === 'Message_properties'
	 *     inflection.capitalize( 'message properties', true ); // === 'Message properties'
	 */
	function capitalize(str) {
	    str = str.toLowerCase();
	    return str.substring(0, 1).toUpperCase() + str.substring(1);
	}
	inflection$1.capitalize = capitalize;
	/**
	 * This function replaces underscores with dashes in the string.
	 * @param str The subject string.
	 * @returns Replaces all spaces or underscores with dashes.
	 * @example
	 *
	 *     const inflection = require( 'inflection' );
	 *
	 *     inflection.dasherize( 'message_properties' ); // === 'message-properties'
	 *     inflection.dasherize( 'Message Properties' ); // === 'Message-Properties'
	 */
	function dasherize(str) {
	    return str.replace(spaceOrUnderbar, '-');
	}
	inflection$1.dasherize = dasherize;
	/**
	 * This function adds titleize support to every String object.
	 * @param str The subject string.
	 * @returns Capitalizes words as you would for a book title.
	 * @example
	 *
	 *     const inflection = require( 'inflection' );
	 *
	 *     inflection.titleize( 'message_properties' ); // === 'Message Properties'
	 *     inflection.titleize( 'message properties to keep' ); // === 'Message Properties to Keep'
	 */
	function titleize(str) {
	    str = str.toLowerCase().replace(underbar, ' ');
	    const strArr = str.split(' ');
	    const j = strArr.length;
	    let d, l;
	    for (let i = 0; i < j; i++) {
	        d = strArr[i].split('-');
	        l = d.length;
	        for (let k = 0; k < l; k++) {
	            if (nonTitlecasedWords.indexOf(d[k].toLowerCase()) < 0) {
	                d[k] = capitalize(d[k]);
	            }
	        }
	        strArr[i] = d.join('-');
	    }
	    str = strArr.join(' ');
	    str = str.substring(0, 1).toUpperCase() + str.substring(1);
	    return str;
	}
	inflection$1.titleize = titleize;
	/**
	 * This function adds demodulize support to every String object.
	 * @param str The subject string.
	 * @returns Removes module names leaving only class names.(Ruby style)
	 * @example
	 *
	 *     const inflection = require( 'inflection' );
	 *
	 *     inflection.demodulize( 'Message::Bus::Properties' ); // === 'Properties'
	 */
	function demodulize(str) {
	    const strArr = str.split('::');
	    return strArr[strArr.length - 1];
	}
	inflection$1.demodulize = demodulize;
	/**
	 * This function adds tableize support to every String object.
	 * @param str The subject string.
	 * @returns Return camel cased words into their underscored plural form.
	 * @example
	 *
	 *     const inflection = require( 'inflection' );
	 *
	 *     inflection.tableize( 'MessageBusProperty' ); // === 'message_bus_properties'
	 */
	function tableize(str) {
	    str = underscore$1(str);
	    str = pluralize$1(str);
	    return str;
	}
	inflection$1.tableize = tableize;
	/**
	 * This function adds classification support to every String object.
	 * @param str The subject string.
	 * @returns Underscored plural nouns become the camel cased singular form.
	 * @example
	 *
	 *     const inflection = require( 'inflection' );
	 *
	 *     inflection.classify( 'message_bus_properties' ); // === 'MessageBusProperty'
	 */
	function classify(str) {
	    str = camelize$1(str);
	    str = singularize$1(str);
	    return str;
	}
	inflection$1.classify = classify;
	/**
	   * This function adds foreign key support to every String object.
	   * @param str The subject string.
	   * @param dropIdUbar Default is to seperate id with an underbar at the end of the class name,
	                                 you can pass true to skip it.(optional)
	   * @returns Underscored plural nouns become the camel cased singular form.
	   * @example
	   *
	   *     const inflection = require( 'inflection' );
	   *
	   *     inflection.foreign_key( 'MessageBusProperty' ); // === 'message_bus_property_id'
	   *     inflection.foreign_key( 'MessageBusProperty', true ); // === 'message_bus_propertyid'
	   */
	function foreignKey(str, dropIdUbar) {
	    str = demodulize(str);
	    str = underscore$1(str) + (dropIdUbar ? '' : '_') + 'id';
	    return str;
	}
	inflection$1.foreignKey = foreignKey;
	/**
	 * This function adds ordinalize support to every String object.
	 * @param str The subject string.
	 * @returns Return all found numbers their sequence like '22nd'.
	 * @example
	 *
	 *     const inflection = require( 'inflection' );
	 *
	 *     inflection.ordinalize( 'the 1 pitch' ); // === 'the 1st pitch'
	 */
	function ordinalize(str) {
	    const strArr = str.split(' ');
	    const j = strArr.length;
	    for (let i = 0; i < j; i++) {
	        const k = parseInt(strArr[i], 10);
	        if (!isNaN(k)) {
	            const ltd = strArr[i].substring(strArr[i].length - 2);
	            const ld = strArr[i].substring(strArr[i].length - 1);
	            let suf = 'th';
	            if (ltd != '11' && ltd != '12' && ltd != '13') {
	                if (ld === '1') {
	                    suf = 'st';
	                }
	                else if (ld === '2') {
	                    suf = 'nd';
	                }
	                else if (ld === '3') {
	                    suf = 'rd';
	                }
	            }
	            strArr[i] += suf;
	        }
	    }
	    return strArr.join(' ');
	}
	inflection$1.ordinalize = ordinalize;
	const transformFunctions = {
	    pluralize: pluralize$1,
	    singularize: singularize$1,
	    camelize: camelize$1,
	    underscore: underscore$1,
	    humanize,
	    capitalize,
	    dasherize,
	    titleize,
	    demodulize,
	    tableize,
	    classify,
	    foreignKey,
	    ordinalize,
	};
	/**
	 * This function performs multiple inflection methods on a string
	 * @param str The subject string.
	 * @param arr An array of inflection methods.
	 * @returns
	 * @example
	 *
	 *     const inflection = require( 'inflection' );
	 *
	 *     inflection.transform( 'all job', [ 'pluralize', 'capitalize', 'dasherize' ]); // === 'All-jobs'
	 */
	function transform$2(str, arr) {
	    const j = arr.length;
	    for (let i = 0; i < j; i++) {
	        const method = arr[i];
	        const methodFn = transformFunctions[method];
	        if (methodFn) {
	            str = methodFn(str);
	        }
	    }
	    return str;
	}
	inflection$1.transform = transform$2;

	var __create$c = Object.create;
	var __defProp$D = Object.defineProperty;
	var __getOwnPropDesc$D = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames$D = Object.getOwnPropertyNames;
	var __getProtoOf$c = Object.getPrototypeOf;
	var __hasOwnProp$D = Object.prototype.hasOwnProperty;
	var __export$D = (target, all) => {
	  for (var name in all)
	    __defProp$D(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps$D = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames$D(from))
	      if (!__hasOwnProp$D.call(to, key) && key !== except)
	        __defProp$D(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc$D(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toESM$c = (mod, isNodeMode, target) => (target = mod != null ? __create$c(__getProtoOf$c(mod)) : {}, __copyProps$D(
	  // If the importer is in node compatibility mode or this is not an ESM
	  // file that has been converted to a CommonJS file using a Babel-
	  // compatible transform (i.e. "__esModule" has not been set), then set
	  // "default" to the CommonJS "module.exports" for node compatibility.
	  isNodeMode || !mod || !mod.__esModule ? __defProp$D(target, "default", { value: mod, enumerable: true }) : target,
	  mod
	));
	var __toCommonJS$D = (mod) => __copyProps$D(__defProp$D({}, "__esModule", { value: true }), mod);
	var string_exports = {};
	__export$D(string_exports, {
	  camelize: () => camelize,
	  camelizeIf: () => camelizeIf,
	  generateIndexName: () => generateIndexName,
	  nameIndex: () => nameIndex,
	  pluralize: () => pluralize,
	  removeTrailingSemicolon: () => removeTrailingSemicolon,
	  singularize: () => singularize,
	  spliceStr: () => spliceStr,
	  underscore: () => underscore,
	  underscoredIf: () => underscoredIf,
	  useInflection: () => useInflection
	});
	var string$2 = __toCommonJS$D(string_exports);
	var import_node_util$3 = __toESM$c(require$$0$1);
	var _inflection = __toESM$c(inflection$1);
	var import_base_sql_expression$8 = baseSqlExpression;
	let inflection = _inflection;
	function useInflection(newInflection) {
	  inflection = newInflection;
	}
	function camelizeIf(str, condition) {
	  let result = str;
	  if (condition) {
	    result = camelize(str);
	  }
	  return result;
	}
	function camelize(str) {
	  return str.trim().replaceAll(/[-_\s]+(.)?/g, (match, c) => c.toUpperCase());
	}
	function underscoredIf(str, condition) {
	  let result = str;
	  if (condition) {
	    result = underscore(str);
	  }
	  return result;
	}
	function underscore(str) {
	  return inflection.underscore(str);
	}
	function spliceStr(str, index, count, add) {
	  return str.slice(0, index) + add + str.slice(index + count);
	}
	function singularize(str) {
	  return inflection.singularize(str);
	}
	function pluralize(str) {
	  return inflection.pluralize(str);
	}
	function nameIndex(index, tableName) {
	  if (Object.hasOwn(index, "name")) {
	    return index;
	  }
	  index.name = generateIndexName(tableName, index);
	  return index;
	}
	function generateIndexName(tableName, index) {
	  if (typeof tableName !== "string" && tableName.tableName) {
	    tableName = tableName.tableName;
	  }
	  if (!index.fields) {
	    throw new Error(`Index on table ${tableName} has not fields:
${import_node_util$3.default.inspect(index)}`);
	  }
	  const fields = index.fields.map((field) => {
	    if (typeof field === "string") {
	      return field;
	    }
	    if (field instanceof import_base_sql_expression$8.BaseSqlExpression) {
	      throw new Error(`Index on table ${tableName} uses Sequelize's ${field.constructor.name} as one of its fields. You need to name this index manually.`);
	    }
	    if ("attribute" in field) {
	      throw new Error('Property "attribute" in IndexField has been renamed to "name"');
	    }
	    return field.name;
	  });
	  let out = `${tableName}_${fields.join("_")}`;
	  if (index.unique) {
	    out += "_unique";
	  }
	  return underscore(out);
	}
	function removeTrailingSemicolon(str) {
	  if (!str.endsWith(";")) {
	    return str;
	  }
	  return str.slice(0, Math.max(0, str.length - 1));
	}

	var __defProp$C = Object.defineProperty;
	var __getOwnPropDesc$C = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames$C = Object.getOwnPropertyNames;
	var __hasOwnProp$C = Object.prototype.hasOwnProperty;
	var __export$C = (target, all) => {
	  for (var name in all)
	    __defProp$C(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps$C = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames$C(from))
	      if (!__hasOwnProp$C.call(to, key) && key !== except)
	        __defProp$C(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc$C(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS$C = (mod) => __copyProps$C(__defProp$C({}, "__esModule", { value: true }), mod);
	var where_exports = {};
	__export$C(where_exports, {
	  getComplexKeys: () => getComplexKeys,
	  getComplexSize: () => getComplexSize,
	  getOperators: () => getOperators
	});
	var where$1 = __toCommonJS$C(where_exports);
	var import_operators$1 = operators;
	function getComplexKeys(obj) {
	  return [
	    ...getOperators(obj),
	    ...Object.keys(obj)
	  ];
	}
	function getComplexSize(obj) {
	  return Array.isArray(obj) ? obj.length : getComplexKeys(obj).length;
	}
	const operatorsSet = new Set(Object.values(import_operators$1.Op));
	function getOperators(obj) {
	  return Object.getOwnPropertySymbols(obj).filter((s) => operatorsSet.has(s));
	}

	var __create$b = Object.create;
	var __defProp$B = Object.defineProperty;
	var __getOwnPropDesc$B = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames$B = Object.getOwnPropertyNames;
	var __getProtoOf$b = Object.getPrototypeOf;
	var __hasOwnProp$B = Object.prototype.hasOwnProperty;
	var __export$B = (target, all) => {
	  for (var name in all)
	    __defProp$B(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps$B = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames$B(from))
	      if (!__hasOwnProp$B.call(to, key) && key !== except)
	        __defProp$B(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc$B(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toESM$b = (mod, isNodeMode, target) => (target = mod != null ? __create$b(__getProtoOf$b(mod)) : {}, __copyProps$B(
	  // If the importer is in node compatibility mode or this is not an ESM
	  // file that has been converted to a CommonJS file using a Babel-
	  // compatible transform (i.e. "__esModule" has not been set), then set
	  // "default" to the CommonJS "module.exports" for node compatibility.
	  isNodeMode || !mod || !mod.__esModule ? __defProp$B(target, "default", { value: mod, enumerable: true }) : target,
	  mod
	));
	var __toCommonJS$B = (mod) => __copyProps$B(__defProp$B({}, "__esModule", { value: true }), mod);
	var object_exports = {};
	__export$B(object_exports, {
	  EMPTY_ARRAY: () => EMPTY_ARRAY,
	  EMPTY_OBJECT: () => EMPTY_OBJECT,
	  camelizeObjectKeys: () => camelizeObjectKeys,
	  cloneDeep: () => cloneDeep,
	  defaults: () => defaults$1,
	  flattenObjectDeep: () => flattenObjectDeep,
	  getAllOwnEntries: () => getAllOwnEntries,
	  getAllOwnKeys: () => getAllOwnKeys,
	  getObjectFromMap: () => getObjectFromMap,
	  merge: () => merge$2,
	  mergeDefaults: () => mergeDefaults,
	  noPrototype: () => noPrototype,
	  removeUndefined: () => removeUndefined
	});
	var object$1 = __toCommonJS$B(object_exports);
	var import_baseIsNative = __toESM$b(_baseIsNative);
	var import_cloneDeepWith = __toESM$b(cloneDeepWith_1);
	var import_forOwn = __toESM$b(forOwn_1);
	var import_get = __toESM$b(get_1);
	var import_isEqual$1 = __toESM$b(isEqual_1);
	var import_isFunction = __toESM$b(isFunction_1);
	var import_isPlainObject$2 = __toESM$b(isPlainObject_1);
	var import_isUndefined = __toESM$b(isUndefined_1);
	var import_mergeWith = __toESM$b(mergeWith_1);
	var import_omitBy = __toESM$b(omitBy_1);
	var import_iterators$1 = requireIterators();
	var import_string = string$2;
	var import_where$3 = where$1;
	const EMPTY_OBJECT = Object.freeze(/* @__PURE__ */ Object.create(null));
	const EMPTY_ARRAY = Object.freeze([]);
	function mergeDefaults(a, b) {
	  return (0, import_mergeWith.default)(a, b, (objectValue, sourceValue) => {
	    if (!(0, import_isPlainObject$2.default)(objectValue) && objectValue !== void 0) {
	      if ((0, import_isFunction.default)(objectValue) && (0, import_baseIsNative.default)(objectValue)) {
	        return sourceValue || objectValue;
	      }
	      return objectValue;
	    }
	    return;
	  });
	}
	function merge$2(...args) {
	  const result = /* @__PURE__ */ Object.create(null);
	  for (const obj of args) {
	    (0, import_forOwn.default)(obj, (value, key) => {
	      if (value === void 0) {
	        return;
	      }
	      if (!result[key]) {
	        result[key] = value;
	      } else if ((0, import_isPlainObject$2.default)(value) && (0, import_isPlainObject$2.default)(result[key])) {
	        result[key] = merge$2(result[key], value);
	      } else if (Array.isArray(value) && Array.isArray(result[key])) {
	        result[key] = [...value, ...result[key]];
	      } else {
	        result[key] = value;
	      }
	    });
	  }
	  return result;
	}
	function cloneDeep(obj, onlyPlain) {
	  return (0, import_cloneDeepWith.default)(obj, (elem) => {
	    if (Array.isArray(elem) || (0, import_isPlainObject$2.default)(elem)) {
	      return;
	    }
	    if (onlyPlain || typeof elem === "object") {
	      return elem;
	    }
	    if (elem && typeof elem.clone === "function") {
	      return elem.clone();
	    }
	  });
	}
	function flattenObjectDeep(value) {
	  if (!(0, import_isPlainObject$2.default)(value)) {
	    return value;
	  }
	  const flattenedObj = /* @__PURE__ */ Object.create(null);
	  function flattenObject(obj, subPath) {
	    for (const key of Object.keys(obj)) {
	      const pathToProperty = subPath ? `${subPath}.${key}` : key;
	      if (typeof obj[key] === "object" && obj[key] !== null) {
	        flattenObject(obj[key], pathToProperty);
	      } else {
	        flattenedObj[pathToProperty] = (0, import_get.default)(obj, key);
	      }
	    }
	    return flattenedObj;
	  }
	  return flattenObject(value);
	}
	function defaults$1(objectIn, ...sources) {
	  for (const source of sources) {
	    if (!source) {
	      continue;
	    }
	    for (const key of (0, import_where$3.getComplexKeys)(source)) {
	      const value = objectIn[key];
	      const objectPrototype = Object.prototype;
	      if (value === void 0 || (0, import_isEqual$1.default)(value, objectPrototype[key]) && !Object.hasOwn(objectIn, key)) {
	        objectIn[key] = source[key];
	      }
	    }
	  }
	  return objectIn;
	}
	function camelizeObjectKeys(obj) {
	  const newObj = /* @__PURE__ */ Object.create(null);
	  for (const key of Object.keys(obj)) {
	    newObj[(0, import_string.camelize)(key)] = obj[key];
	  }
	  return newObj;
	}
	function removeUndefined(val) {
	  return (0, import_omitBy.default)(val, import_isUndefined.default);
	}
	function getObjectFromMap(aMap) {
	  const record = /* @__PURE__ */ Object.create(null);
	  for (const key of aMap.keys()) {
	    record[key] = aMap.get(key);
	  }
	  return record;
	}
	function getAllOwnKeys(object) {
	  return (0, import_iterators$1.combinedIterator)(
	    Object.getOwnPropertySymbols(object),
	    Object.getOwnPropertyNames(object)
	  );
	}
	function getAllOwnEntries(obj) {
	  return (0, import_iterators$1.map)(getAllOwnKeys(obj), (key) => [key, obj[key]]);
	}
	function noPrototype(obj) {
	  Object.setPrototypeOf(obj, null);
	  return obj;
	}

	var attributeSyntax;
	var hasRequiredAttributeSyntax;

	function requireAttributeSyntax () {
		if (hasRequiredAttributeSyntax) return attributeSyntax;
		hasRequiredAttributeSyntax = 1;
		var __create = Object.create;
		var __defProp = Object.defineProperty;
		var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
		var __getOwnPropNames = Object.getOwnPropertyNames;
		var __getProtoOf = Object.getPrototypeOf;
		var __hasOwnProp = Object.prototype.hasOwnProperty;
		var __export = (target, all) => {
		  for (var name in all)
		    __defProp(target, name, { get: all[name], enumerable: true });
		};
		var __copyProps = (to, from, except, desc) => {
		  if (from && typeof from === "object" || typeof from === "function") {
		    for (let key of __getOwnPropNames(from))
		      if (!__hasOwnProp.call(to, key) && key !== except)
		        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
		  }
		  return to;
		};
		var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
		  // If the importer is in node compatibility mode or this is not an ESM
		  // file that has been converted to a CommonJS file using a Babel-
		  // compatible transform (i.e. "__esModule" has not been set), then set
		  // "default" to the CommonJS "module.exports" for node compatibility.
		  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
		  mod
		));
		var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
		var attribute_syntax_exports = {};
		__export(attribute_syntax_exports, {
		  parseAttributeSyntax: () => parseAttributeSyntax,
		  parseNestedJsonKeySyntax: () => parseNestedJsonKeySyntax
		});
		attributeSyntax = __toCommonJS(attribute_syntax_exports);
		var import_bnf_parser = bin;
		var import_memoize = __toESM(memoize_1);
		var import_association_path = associationPath;
		var import_attribute = requireAttribute();
		var import_cast = requireCast();
		var import_dialect_aware_fn = dialectAwareFn;
		var import_json_path = jsonPath_1;
		var import_object = object$1;
		const parseAttributeSyntax = (0, import_memoize.default)(parseAttributeSyntaxInternal);
		const parseNestedJsonKeySyntax = (0, import_memoize.default)(parseJsonPropertyKeyInternal);
		const builtInModifiers = (0, import_object.noPrototype)({
		  unquote: import_dialect_aware_fn.Unquote
		});
		function getModifier(name) {
		  const ModifierClass = builtInModifiers[name.toLowerCase()];
		  if (!ModifierClass) {
		    throw new Error(`${name} is not a recognized built-in modifier. Here is the list of supported modifiers: ${Object.keys(builtInModifiers).join(", ")}`);
		  }
		  return ModifierClass;
		}
		const attributeParser = (() => {
		  const advancedAttributeBnf = `
    # Entry points

    ## Used when parsing the attribute
    attribute ::= ( ...association | ...identifier ) jsonPath? castOrModifiers?;

    ## Used when parsing a nested JSON path used inside of an attribute
    ## Difference with "attribute" is in the first part. Instead of accepting:
    ##  $association.attribute$ & attribute
    ## It accepts:
    ##  key, "quotedKey", and [0] (index access)
    partialJsonPath ::= ( ...indexAccess | ...key ) jsonPath? castOrModifiers? ;

    # Internals

    identifier ::= ( "A"->"Z" | "a"->"z" | digit | "_" )+ ;
    digit ::= "0"->"9" ;
    number ::= ...digit+ ;
    association ::= %"$" identifier ("." identifier)* %"$" ;
    jsonPath ::= ( ...indexAccess | ...keyAccess )+ ;
    indexAccess ::= %"[" number %"]" ;
    keyAccess ::= %"." key ;
    # path segments accept dashes without needing to be quoted
    key ::= nonEmptyString | ( "A"->"Z" | "a"->"z" | digit | "_" | "-" )+ ;
    nonEmptyString ::= ...(%"\\"" (anyExceptQuoteOrBackslash | escapedCharacter)+ %"\\"") ;
    escapedCharacter ::= %"\\\\" ( "\\"" | "\\\\" );
    any ::= !"" ;
    anyExceptQuoteOrBackslash ::= !("\\"" | "\\\\");
    castOrModifiers ::= (...cast | ...modifier)+;
    cast ::= %"::" identifier ;
    modifier ::= %":" identifier ;
  `;
		  const parsedAttributeBnf = import_bnf_parser.BNF.parse(advancedAttributeBnf);
		  if (parsedAttributeBnf instanceof import_bnf_parser.ParseError) {
		    throw new Error(`Failed to initialize attribute syntax parser. This is a Sequelize bug: ${parsedAttributeBnf.toString()}`);
		  }
		  return (0, import_bnf_parser.Compile)(parsedAttributeBnf);
		})();
		function parseAttributeSyntaxInternal(code) {
		  var _a, _b;
		  const parsed = attributeParser.parse(code, false, "attribute");
		  if (parsed instanceof import_bnf_parser.ParseError) {
		    throw new TypeError(`Failed to parse syntax of attribute. Parse error at index ${parsed.ref.start.index}:
${code}
${" ".repeat(parsed.ref.start.index)}^`);
		  }
		  const [attributeNode, jsonPathNodeRaw, castOrModifiersNodeRaw] = parsed.value;
		  let result = parseAssociationPath(attributeNode.value);
		  const jsonPathNodes = (_a = jsonPathNodeRaw.value[0]) == null ? void 0 : _a.value[0].value;
		  if (jsonPathNodes) {
		    const path = jsonPathNodes.map((pathNode) => {
		      return parseJsonPathSegment(pathNode);
		    });
		    result = new import_json_path.JsonPath(result, path);
		  }
		  const castOrModifierNodes = (_b = castOrModifiersNodeRaw.value[0]) == null ? void 0 : _b.value[0].value;
		  if (castOrModifierNodes) {
		    for (const castOrModifierNode of castOrModifierNodes) {
		      if (castOrModifierNode.type === "cast") {
		        result = new import_cast.Cast(result, castOrModifierNode.value);
		        continue;
		      }
		      const ModifierClass = getModifier(castOrModifierNode.value);
		      result = new ModifierClass(result);
		    }
		  }
		  return result;
		}
		function parseAssociationPath(syntax) {
		  const path = syntax.split(".");
		  if (path.length > 1) {
		    const attr = path.pop();
		    return new import_association_path.AssociationPath(path, attr);
		  }
		  return new import_attribute.Attribute(syntax);
		}
		function parseJsonPropertyKeyInternal(code) {
		  var _a, _b;
		  const parsed = attributeParser.parse(code, false, "partialJsonPath");
		  if (parsed instanceof import_bnf_parser.ParseError) {
		    throw new TypeError(`Failed to parse syntax of json path. Parse error at index ${parsed.ref.start.index}:
${code}
${" ".repeat(parsed.ref.start.index)}^`);
		  }
		  const [firstKey, jsonPathNodeRaw, castOrModifiersNodeRaw] = parsed.value;
		  const pathSegments = [parseJsonPathSegment(firstKey)];
		  const jsonPathNodes = (_a = jsonPathNodeRaw.value[0]) == null ? void 0 : _a.value[0].value;
		  if (jsonPathNodes) {
		    for (const pathNode of jsonPathNodes) {
		      pathSegments.push(parseJsonPathSegment(pathNode));
		    }
		  }
		  const castOrModifierNodes = (_b = castOrModifiersNodeRaw.value[0]) == null ? void 0 : _b.value[0].value;
		  const castsAndModifiers = [];
		  if (castOrModifierNodes) {
		    for (const castOrModifierNode of castOrModifierNodes) {
		      if (castOrModifierNode.type === "cast") {
		        castsAndModifiers.push(castOrModifierNode.value);
		        continue;
		      }
		      const ModifierClass = getModifier(castOrModifierNode.value);
		      castsAndModifiers.push(ModifierClass);
		    }
		  }
		  return { pathSegments, castsAndModifiers };
		}
		function parseJsonPathSegment(node) {
		  if (node.type === "indexAccess") {
		    return Number(node.value);
		  }
		  return node.value;
		}
		
		return attributeSyntax;
	}

	var attribute_1;
	var hasRequiredAttribute;

	function requireAttribute () {
		if (hasRequiredAttribute) return attribute_1;
		hasRequiredAttribute = 1;
		var __defProp = Object.defineProperty;
		var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
		var __getOwnPropNames = Object.getOwnPropertyNames;
		var __hasOwnProp = Object.prototype.hasOwnProperty;
		var __export = (target, all) => {
		  for (var name in all)
		    __defProp(target, name, { get: all[name], enumerable: true });
		};
		var __copyProps = (to, from, except, desc) => {
		  if (from && typeof from === "object" || typeof from === "function") {
		    for (let key of __getOwnPropNames(from))
		      if (!__hasOwnProp.call(to, key) && key !== except)
		        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
		  }
		  return to;
		};
		var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
		var attribute_exports = {};
		__export(attribute_exports, {
		  Attribute: () => Attribute,
		  attribute: () => attribute
		});
		attribute_1 = __toCommonJS(attribute_exports);
		var import_attribute_syntax = requireAttributeSyntax();
		var import_base_sql_expression = baseSqlExpression;
		class Attribute extends import_base_sql_expression.BaseSqlExpression {
		  constructor(attributeName) {
		    super();
		    this.attributeName = attributeName;
		  }
		}
		function attribute(attributeName) {
		  return (0, import_attribute_syntax.parseAttributeSyntax)(attributeName);
		}
		
		return attribute_1;
	}

	var __defProp$A = Object.defineProperty;
	var __getOwnPropDesc$A = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames$A = Object.getOwnPropertyNames;
	var __hasOwnProp$A = Object.prototype.hasOwnProperty;
	var __export$A = (target, all) => {
	  for (var name in all)
	    __defProp$A(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps$A = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames$A(from))
	      if (!__hasOwnProp$A.call(to, key) && key !== except)
	        __defProp$A(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc$A(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS$A = (mod) => __copyProps$A(__defProp$A({}, "__esModule", { value: true }), mod);
	var col_exports = {};
	__export$A(col_exports, {
	  Col: () => Col,
	  col: () => col
	});
	var col_1 = __toCommonJS$A(col_exports);
	var import_base_sql_expression$7 = baseSqlExpression;
	class Col extends import_base_sql_expression$7.BaseSqlExpression {
	  identifiers;
	  constructor(...identifiers) {
	    super();
	    this.identifiers = identifiers;
	  }
	}
	function col(...identifiers) {
	  return new Col(...identifiers);
	}

	var __defProp$z = Object.defineProperty;
	var __getOwnPropDesc$z = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames$z = Object.getOwnPropertyNames;
	var __hasOwnProp$z = Object.prototype.hasOwnProperty;
	var __export$z = (target, all) => {
	  for (var name in all)
	    __defProp$z(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps$z = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames$z(from))
	      if (!__hasOwnProp$z.call(to, key) && key !== except)
	        __defProp$z(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc$z(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS$z = (mod) => __copyProps$z(__defProp$z({}, "__esModule", { value: true }), mod);
	var literal_exports = {};
	__export$z(literal_exports, {
	  Literal: () => Literal,
	  literal: () => literal
	});
	var literal_1 = __toCommonJS$z(literal_exports);
	var import_base_sql_expression$6 = baseSqlExpression;
	class Literal extends import_base_sql_expression$6.BaseSqlExpression {
	  val;
	  constructor(val) {
	    super();
	    this.val = Array.isArray(val) ? val : [val];
	  }
	}
	function literal(val) {
	  return new Literal(val);
	}

	var __defProp$y = Object.defineProperty;
	var __getOwnPropDesc$y = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames$y = Object.getOwnPropertyNames;
	var __hasOwnProp$y = Object.prototype.hasOwnProperty;
	var __export$y = (target, all) => {
	  for (var name in all)
	    __defProp$y(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps$y = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames$y(from))
	      if (!__hasOwnProp$y.call(to, key) && key !== except)
	        __defProp$y(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc$y(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS$y = (mod) => __copyProps$y(__defProp$y({}, "__esModule", { value: true }), mod);
	var value_exports = {};
	__export$y(value_exports, {
	  Value: () => Value
	});
	var value = __toCommonJS$y(value_exports);
	var import_base_sql_expression$5 = baseSqlExpression;
	class Value extends import_base_sql_expression$5.BaseSqlExpression {
	  constructor(value) {
	    super();
	    this.value = value;
	  }
	}

	var whereSqlBuilder;
	var hasRequiredWhereSqlBuilder;

	function requireWhereSqlBuilder () {
		if (hasRequiredWhereSqlBuilder) return whereSqlBuilder;
		hasRequiredWhereSqlBuilder = 1;
		var __create = Object.create;
		var __defProp = Object.defineProperty;
		var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
		var __getOwnPropNames = Object.getOwnPropertyNames;
		var __getProtoOf = Object.getPrototypeOf;
		var __hasOwnProp = Object.prototype.hasOwnProperty;
		var __export = (target, all) => {
		  for (var name in all)
		    __defProp(target, name, { get: all[name], enumerable: true });
		};
		var __copyProps = (to, from, except, desc) => {
		  if (from && typeof from === "object" || typeof from === "function") {
		    for (let key of __getOwnPropNames(from))
		      if (!__hasOwnProp.call(to, key) && key !== except)
		        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
		  }
		  return to;
		};
		var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
		  // If the importer is in node compatibility mode or this is not an ESM
		  // file that has been converted to a CommonJS file using a Babel-
		  // compatible transform (i.e. "__esModule" has not been set), then set
		  // "default" to the CommonJS "module.exports" for node compatibility.
		  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
		  mod
		));
		var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
		var where_sql_builder_exports = {};
		__export(where_sql_builder_exports, {
		  PojoWhere: () => PojoWhere,
		  WhereSqlBuilder: () => WhereSqlBuilder,
		  joinWithLogicalOperator: () => joinWithLogicalOperator,
		  wrapAmbiguousWhere: () => wrapAmbiguousWhere
		});
		whereSqlBuilder = __toCommonJS(where_sql_builder_exports);
		var import_node_util = __toESM(require$$0$1);
		var import_base_error = baseError;
		var import_association_path = associationPath;
		var import_attribute = requireAttribute();
		var import_base_sql_expression = baseSqlExpression;
		var import_cast = requireCast();
		var import_col = col_1;
		var import_json_path = jsonPath_1;
		var import_literal = literal_1;
		var import_value = value;
		var import_where = requireWhere();
		var import_operators = operators;
		var import_attribute_syntax = requireAttributeSyntax();
		var import_check = requireCheck();
		var import_deprecations = deprecations;
		var import_object = object$1;
		var import_where2 = where$1;
		var import_data_types = requireDataTypes$8();
		var DataTypes = __toESM(requireDataTypes$8());
		class PojoWhere {
		  static create(leftOperand, whereAttributeHashValue) {
		    const pojoWhere = new PojoWhere();
		    pojoWhere.leftOperand = leftOperand;
		    pojoWhere.whereValue = whereAttributeHashValue;
		    return pojoWhere;
		  }
		}
		class ObjectPool {
		  #freeItems;
		  #factory;
		  #lastOccupiedIndex;
		  constructor(factory, initialSize) {
		    this.#freeItems = Array.from({ length: initialSize }).map(factory);
		    this.#lastOccupiedIndex = initialSize - 1;
		    this.#factory = factory;
		  }
		  getObject() {
		    if (this.#lastOccupiedIndex < 0) {
		      return this.#factory();
		    }
		    return this.#freeItems[this.#lastOccupiedIndex--];
		  }
		  free(val) {
		    if (this.#lastOccupiedIndex >= this.#freeItems.length - 1) {
		      this.#freeItems.push(val);
		      return;
		    }
		    this.#freeItems[++this.#lastOccupiedIndex] = val;
		  }
		}
		const pojoWherePool = new ObjectPool(() => new PojoWhere(), 20);
		class WhereSqlBuilder {
		  constructor(queryGenerator) {
		    this.queryGenerator = queryGenerator;
		    this.#jsonType = this.dialect.supports.dataTypes.JSON ? new DataTypes.JSON().toDialectDataType(queryGenerator.dialect) : void 0;
		    this.#arrayOfTextType = this.dialect.supports.dataTypes.ARRAY ? new DataTypes.ARRAY(new DataTypes.TEXT()).toDialectDataType(queryGenerator.dialect) : void 0;
		  }
		  #operatorMap = {
		    [import_operators.Op.eq]: "=",
		    [import_operators.Op.ne]: "!=",
		    [import_operators.Op.gte]: ">=",
		    [import_operators.Op.gt]: ">",
		    [import_operators.Op.lte]: "<=",
		    [import_operators.Op.lt]: "<",
		    [import_operators.Op.is]: "IS",
		    [import_operators.Op.isNot]: "IS NOT",
		    [import_operators.Op.in]: "IN",
		    [import_operators.Op.notIn]: "NOT IN",
		    [import_operators.Op.like]: "LIKE",
		    [import_operators.Op.notLike]: "NOT LIKE",
		    [import_operators.Op.iLike]: "ILIKE",
		    [import_operators.Op.notILike]: "NOT ILIKE",
		    [import_operators.Op.regexp]: "~",
		    [import_operators.Op.notRegexp]: "!~",
		    [import_operators.Op.iRegexp]: "~*",
		    [import_operators.Op.notIRegexp]: "!~*",
		    [import_operators.Op.between]: "BETWEEN",
		    [import_operators.Op.notBetween]: "NOT BETWEEN",
		    [import_operators.Op.overlap]: "&&",
		    [import_operators.Op.contains]: "@>",
		    [import_operators.Op.contained]: "<@",
		    [import_operators.Op.adjacent]: "-|-",
		    [import_operators.Op.strictLeft]: "<<",
		    [import_operators.Op.strictRight]: ">>",
		    [import_operators.Op.noExtendRight]: "&<",
		    [import_operators.Op.noExtendLeft]: "&>",
		    [import_operators.Op.any]: "ANY",
		    [import_operators.Op.all]: "ALL",
		    [import_operators.Op.match]: "@@",
		    [import_operators.Op.anyKeyExists]: "?|",
		    [import_operators.Op.allKeysExist]: "?&"
		  };
		  #jsonType;
		  #arrayOfTextType;
		  get dialect() {
		    return this.queryGenerator.dialect;
		  }
		  setOperatorKeyword(op, keyword) {
		    this.#operatorMap[op] = keyword;
		  }
		  /**
		   * Transforms any value accepted by {@link WhereOptions} into a SQL string.
		   *
		   * @param where
		   * @param options
		   */
		  formatWhereOptions(where, options = import_object.EMPTY_OBJECT) {
		    if (typeof where === "string") {
		      throw new TypeError("Support for `{ where: 'raw query' }` has been removed. Use `{ where: literal('raw query') }` instead");
		    }
		    if (where === void 0) {
		      return "";
		    }
		    try {
		      return this.#handleRecursiveNotOrAndWithImplicitAndArray(where, (piece) => {
		        if (piece instanceof import_base_sql_expression.BaseSqlExpression) {
		          return this.queryGenerator.formatSqlExpression(piece, options);
		        }
		        return this.formatPojoWhere(piece, options);
		      });
		    } catch (error) {
		      throw new import_base_error.BaseError(`Invalid value received for the "where" option. Refer to the sequelize documentation to learn which values the "where" option accepts.
Value: ${import_node_util.default.inspect(where)}`, {
		        cause: error
		      });
		    }
		  }
		  /**
		   * This is the recursive "and", "or" and "not" handler of the first level of {@link WhereOptions} (the level *before* encountering an attribute name).
		   * Unlike handleRecursiveNotOrAndNestedPathRecursive, this method accepts arrays at the top level, which are implicitly converted to "and" groups.
		   * and does not handle nested JSON paths.
		   *
		   * @param input
		   * @param handlePart
		   * @param logicalOperator AND / OR
		   */
		  #handleRecursiveNotOrAndWithImplicitAndArray(input, handlePart, logicalOperator = import_operators.Op.and) {
		    if (Array.isArray(input)) {
		      return joinWithLogicalOperator(
		        input.map((part) => {
		          if (part === void 0) {
		            return "";
		          }
		          return this.#handleRecursiveNotOrAndWithImplicitAndArray(part, handlePart);
		        }),
		        logicalOperator
		      );
		    }
		    if (!(0, import_check.isPlainObject)(input)) {
		      if (!(input instanceof import_base_sql_expression.BaseSqlExpression)) {
		        throw new TypeError(`Invalid Query: expected a plain object, an array or a sequelize SQL method but got ${import_node_util.default.inspect(input)} `);
		      }
		      return handlePart(input);
		    }
		    const keys = (0, import_where2.getComplexKeys)(input);
		    const sqlArray = keys.map((operatorOrAttribute) => {
		      if (operatorOrAttribute === import_operators.Op.not) {
		        const generatedResult = this.#handleRecursiveNotOrAndWithImplicitAndArray(
		          // @ts-expect-error -- This is a recursive type, which TS does not handle well
		          input[import_operators.Op.not],
		          handlePart
		        );
		        return wrapWithNot(generatedResult);
		      }
		      if (operatorOrAttribute === import_operators.Op.and || operatorOrAttribute === import_operators.Op.or) {
		        return this.#handleRecursiveNotOrAndWithImplicitAndArray(
		          // @ts-expect-error -- This is a recursive type, which TS does not handle well
		          input[operatorOrAttribute],
		          handlePart,
		          operatorOrAttribute
		        );
		      }
		      if (typeof operatorOrAttribute === "symbol") {
		        throw new TypeError(`Invalid Query: ${import_node_util.default.inspect(input)} includes the Symbol Operator Op.${operatorOrAttribute.description} but only attributes, Op.and, Op.or, and Op.not are allowed.`);
		      }
		      let pojoWhereObject;
		      try {
		        pojoWhereObject = pojoWherePool.getObject();
		        pojoWhereObject.leftOperand = (0, import_attribute_syntax.parseAttributeSyntax)(operatorOrAttribute);
		        pojoWhereObject.whereValue = input[operatorOrAttribute];
		        return handlePart(pojoWhereObject);
		      } finally {
		        if (pojoWhereObject) {
		          pojoWherePool.free(pojoWhereObject);
		        }
		      }
		    });
		    return joinWithLogicalOperator(sqlArray, logicalOperator);
		  }
		  /**
		   * This method is responsible for transforming a group "left operand" + "operators, right operands" (multiple) into a SQL string.
		   *
		   * @param pojoWhere The representation of the group.
		   * @param options Option bag.
		   */
		  formatPojoWhere(pojoWhere, options = import_object.EMPTY_OBJECT) {
		    let leftDataType = this.#getOperandType(pojoWhere.leftOperand, options.model);
		    const operandIsJsonColumn = leftDataType == null || leftDataType instanceof DataTypes.JSON;
		    return this.#handleRecursiveNotOrAndNestedPathRecursive(
		      pojoWhere.leftOperand,
		      pojoWhere.whereValue,
		      operandIsJsonColumn,
		      (left, operator, right) => {
		        if (leftDataType == null && left instanceof import_json_path.JsonPath) {
		          leftDataType = this.#jsonType;
		        } else if (left !== pojoWhere.leftOperand) {
		          leftDataType = this.#getOperandType(left, options.model);
		        }
		        if (operator === import_operators.Op.col) {
		          (0, import_deprecations.noOpCol)();
		          right = new import_col.Col(right);
		          operator = import_operators.Op.eq;
		        }
		        if (operator === import_operators.Op.any || operator === import_operators.Op.all) {
		          right = { [operator]: right };
		          operator = import_operators.Op.eq;
		        }
		        if (operator == null) {
		          if (right === null && leftDataType instanceof DataTypes.JSON) {
		            throw new Error("Because JSON has two possible null values, comparing a JSON/JSONB attribute to NULL requires an explicit comparison operator. Use the `Op.is` operator to compare to SQL NULL, or the `Op.eq` operator to compare to JSON null.");
		          }
		          operator = Array.isArray(right) && !(leftDataType instanceof DataTypes.ARRAY) ? import_operators.Op.in : right === null ? import_operators.Op.is : import_operators.Op.eq;
		        }
		        if (right === null && !(leftDataType instanceof DataTypes.JSON)) {
		          if (operator === import_operators.Op.eq) {
		            operator = import_operators.Op.is;
		          }
		          if (operator === import_operators.Op.ne) {
		            operator = import_operators.Op.isNot;
		          }
		        }
		        const rightDataType = this.#getOperandType(right, options.model);
		        if (operator in this) {
		          return this[operator](left, leftDataType, operator, right, rightDataType, options);
		        }
		        return this.formatBinaryOperation(left, leftDataType, operator, right, rightDataType, options);
		      }
		    );
		  }
		  [import_operators.Op.notIn](...args) {
		    return this[import_operators.Op.in](...args);
		  }
		  [import_operators.Op.in](left, leftDataType, operator, right, rightDataType, options) {
		    const rightEscapeOptions = { ...options, type: rightDataType ?? leftDataType };
		    const leftEscapeOptions = { ...options, type: leftDataType ?? rightDataType };
		    let rightSql;
		    if (right instanceof import_literal.Literal) {
		      rightSql = this.queryGenerator.escape(right, rightEscapeOptions);
		    } else if (Array.isArray(right)) {
		      if (right.length === 0) {
		        if (operator === import_operators.Op.notIn) {
		          return "";
		        }
		        rightSql = "(NULL)";
		      } else {
		        rightSql = this.queryGenerator.escapeList(right, rightEscapeOptions);
		      }
		    } else {
		      throw new TypeError("Operators Op.in and Op.notIn must be called with an array of values, or a literal");
		    }
		    const leftSql = this.queryGenerator.escape(left, leftEscapeOptions);
		    return `${leftSql} ${this.#operatorMap[operator]} ${rightSql}`;
		  }
		  [import_operators.Op.isNot](...args) {
		    return this[import_operators.Op.is](...args);
		  }
		  [import_operators.Op.is](left, leftDataType, operator, right, rightDataType, options) {
		    if (right !== null && typeof right !== "boolean" && !(right instanceof import_literal.Literal)) {
		      throw new Error("Operators Op.is and Op.isNot can only be used with null, true, false or a literal.");
		    }
		    if (options.bindParam) {
		      options = {
		        ...options,
		        bindParam: void 0
		      };
		    }
		    return this.formatBinaryOperation(
		      left,
		      void 0,
		      operator,
		      right,
		      void 0,
		      options
		    );
		  }
		  [import_operators.Op.notBetween](...args) {
		    return this[import_operators.Op.between](...args);
		  }
		  [import_operators.Op.between](left, leftDataType, operator, right, rightDataType, options) {
		    const rightEscapeOptions = { ...options, type: rightDataType ?? leftDataType };
		    const leftEscapeOptions = { ...options, type: leftDataType ?? rightDataType };
		    const leftSql = this.queryGenerator.escape(left, leftEscapeOptions);
		    let rightSql;
		    if (right instanceof import_base_sql_expression.BaseSqlExpression) {
		      rightSql = this.queryGenerator.escape(right, rightEscapeOptions);
		    } else if (Array.isArray(right) && right.length === 2) {
		      rightSql = `${this.queryGenerator.escape(right[0], rightEscapeOptions)} AND ${this.queryGenerator.escape(right[1], rightEscapeOptions)}`;
		    } else {
		      throw new Error("Operators Op.between and Op.notBetween must be used with an array of two values, or a literal.");
		    }
		    return `${leftSql} ${this.#operatorMap[operator]} ${rightSql}`;
		  }
		  [import_operators.Op.contains](left, leftDataType, operator, right, rightDataType, options) {
		    if (!rightDataType && leftDataType instanceof DataTypes.RANGE && !Array.isArray(right)) {
		      return this.formatBinaryOperation(
		        left,
		        leftDataType,
		        operator,
		        right,
		        leftDataType.options.subtype,
		        options
		      );
		    }
		    return this.formatBinaryOperation(left, leftDataType, operator, right, rightDataType, options);
		  }
		  [import_operators.Op.contained](left, leftDataType, operator, right, rightDataType, options) {
		    if (leftDataType instanceof import_data_types.AbstractDataType && !(leftDataType instanceof DataTypes.RANGE) && !(leftDataType instanceof DataTypes.ARRAY) && Array.isArray(right)) {
		      return this.formatBinaryOperation(
		        left,
		        leftDataType,
		        operator,
		        right,
		        new DataTypes.RANGE(leftDataType).toDialectDataType(this.dialect),
		        options
		      );
		    }
		    return this.formatBinaryOperation(left, leftDataType, operator, right, rightDataType, options);
		  }
		  [import_operators.Op.startsWith](left, leftDataType, operator, right, rightDataType, options) {
		    return this.formatSubstring(left, leftDataType, import_operators.Op.like, right, rightDataType, options, false, true);
		  }
		  [import_operators.Op.notStartsWith](left, leftDataType, operator, right, rightDataType, options) {
		    return this.formatSubstring(left, leftDataType, import_operators.Op.notLike, right, rightDataType, options, false, true);
		  }
		  [import_operators.Op.endsWith](left, leftDataType, operator, right, rightDataType, options) {
		    return this.formatSubstring(left, leftDataType, import_operators.Op.like, right, rightDataType, options, true, false);
		  }
		  [import_operators.Op.notEndsWith](left, leftDataType, operator, right, rightDataType, options) {
		    return this.formatSubstring(left, leftDataType, import_operators.Op.notLike, right, rightDataType, options, true, false);
		  }
		  [import_operators.Op.substring](left, leftDataType, operator, right, rightDataType, options) {
		    return this.formatSubstring(left, leftDataType, import_operators.Op.like, right, rightDataType, options, true, true);
		  }
		  [import_operators.Op.notSubstring](left, leftDataType, operator, right, rightDataType, options) {
		    return this.formatSubstring(left, leftDataType, import_operators.Op.notLike, right, rightDataType, options, true, true);
		  }
		  formatSubstring(left, leftDataType, operator, right, rightDataType, options, start, end) {
		    if (typeof right === "string") {
		      const startToken = start ? "%" : "";
		      const endToken = end ? "%" : "";
		      return this.formatBinaryOperation(left, leftDataType, operator, startToken + right + endToken, rightDataType, options);
		    }
		    const escapedPercent = this.dialect.escapeString("%");
		    const literalBuilder = [`CONCAT(`];
		    if (start) {
		      literalBuilder.push(escapedPercent, ", ");
		    }
		    literalBuilder.push(new import_value.Value(right));
		    if (end) {
		      literalBuilder.push(", ", escapedPercent);
		    }
		    literalBuilder.push(")");
		    return this.formatBinaryOperation(left, leftDataType, operator, new import_literal.Literal(literalBuilder), rightDataType, options);
		  }
		  [import_operators.Op.anyKeyExists](left, leftDataType, operator, right, rightDataType, options) {
		    if (!this.#arrayOfTextType) {
		      throw new Error("This dialect does not support Op.anyKeyExists");
		    }
		    return this.formatBinaryOperation(left, leftDataType, operator, right, this.#arrayOfTextType, options);
		  }
		  [import_operators.Op.allKeysExist](left, leftDataType, operator, right, rightDataType, options) {
		    if (!this.#arrayOfTextType) {
		      throw new Error("This dialect does not support Op.allKeysExist");
		    }
		    return this.formatBinaryOperation(left, leftDataType, operator, right, this.#arrayOfTextType, options);
		  }
		  formatBinaryOperation(left, leftDataType, operator, right, rightDataType, options) {
		    const operatorSql = this.#operatorMap[operator];
		    if (!operatorSql) {
		      throw new TypeError(`Operator Op.${operator.description} does not exist or is not supported by this dialect.`);
		    }
		    const leftSql = this.queryGenerator.escape(left, { ...options, type: leftDataType ?? rightDataType });
		    const rightSql = this.#formatOpAnyAll(right, rightDataType ?? leftDataType) || this.queryGenerator.escape(right, { ...options, type: rightDataType ?? leftDataType });
		    return `${wrapAmbiguousWhere(left, leftSql)} ${this.#operatorMap[operator]} ${wrapAmbiguousWhere(right, rightSql)}`;
		  }
		  #formatOpAnyAll(value, type) {
		    if (!(0, import_check.isDictionary)(value)) {
		      return "";
		    }
		    if (import_operators.Op.any in value) {
		      return `ANY (${this.#formatOpValues(value[import_operators.Op.any], type)})`;
		    }
		    if (import_operators.Op.all in value) {
		      return `ALL (${this.#formatOpValues(value[import_operators.Op.all], type)})`;
		    }
		    return "";
		  }
		  #formatOpValues(value, type) {
		    if ((0, import_check.isDictionary)(value) && import_operators.Op.values in value) {
		      const options = { type };
		      const operand = Array.isArray(value[import_operators.Op.values]) ? value[import_operators.Op.values] : [value[import_operators.Op.values]];
		      const valueSql = operand.map((v) => `(${this.queryGenerator.escape(v, options)})`).join(", ");
		      return `VALUES ${valueSql}`;
		    }
		    return this.queryGenerator.escape(value, { type: type && new DataTypes.ARRAY(type) });
		  }
		  /**
		   * This is the recursive "and", "or" and "not" handler of {@link WhereAttributeHashValue} (the level *after* encountering an attribute name).
		   * Unlike handleRecursiveNotOrAndWithImplicitAndArray, arrays at the top level have an implicit "IN" operator, instead of an implicit "AND" operator,
		   * and this method handles nested JSON paths.
		   *
		   * @param leftOperand
		   * @param whereValue
		   * @param allowJsonPath
		   * @param handlePart
		   * @param operator
		   * @param parentJsonPath
		   */
		  #handleRecursiveNotOrAndNestedPathRecursive(leftOperand, whereValue, allowJsonPath, handlePart, operator = import_operators.Op.and, parentJsonPath = import_object.EMPTY_ARRAY) {
		    if (!(0, import_check.isPlainObject)(whereValue)) {
		      return handlePart(this.#wrapSimpleJsonPath(leftOperand, parentJsonPath), void 0, whereValue);
		    }
		    const stringKeys = Object.keys(whereValue);
		    if (!allowJsonPath && stringKeys.length > 0) {
		      return handlePart(this.#wrapSimpleJsonPath(leftOperand, parentJsonPath), void 0, whereValue);
		    }
		    const keys = [...stringKeys, ...(0, import_where2.getOperators)(whereValue)];
		    const parts = keys.map((key) => {
		      const value = whereValue[key];
		      if (typeof key === "string") {
		        const parsedKey = (0, import_attribute_syntax.parseNestedJsonKeySyntax)(key);
		        if (parsedKey.castsAndModifiers.length === 0) {
		          return this.#handleRecursiveNotOrAndNestedPathRecursive(
		            leftOperand,
		            value,
		            allowJsonPath,
		            handlePart,
		            operator,
		            [...parentJsonPath, ...parsedKey.pathSegments]
		          );
		        }
		        const newOperand = this.#wrapComplexJsonPath(leftOperand, parentJsonPath, parsedKey);
		        return this.#handleRecursiveNotOrAndNestedPathRecursive(
		          newOperand,
		          value,
		          // TODO: allow JSON if last cast is JSON?
		          //  needs a mechanism to get JS DataType from SQL DataType first. To get last cast:
		          //  newOperand instanceof Cast && isString(newOperand.type) && newOperand.type.toLowerCase();
		          false,
		          handlePart,
		          operator,
		          // reset json path
		          import_object.EMPTY_ARRAY
		        );
		      }
		      if (key === import_operators.Op.not) {
		        return wrapWithNot(
		          this.#handleRecursiveNotOrAndNestedPathRecursive(
		            leftOperand,
		            value,
		            allowJsonPath,
		            handlePart,
		            import_operators.Op.and
		          )
		        );
		      }
		      if (key === import_operators.Op.and || key === import_operators.Op.or) {
		        if (Array.isArray(value)) {
		          const sqlParts = value.map((v) => this.#handleRecursiveNotOrAndNestedPathRecursive(
		            leftOperand,
		            v,
		            allowJsonPath,
		            handlePart,
		            import_operators.Op.and
		          ));
		          return joinWithLogicalOperator(sqlParts, key);
		        }
		        return this.#handleRecursiveNotOrAndNestedPathRecursive(
		          leftOperand,
		          value,
		          allowJsonPath,
		          handlePart,
		          key
		        );
		      }
		      return handlePart(this.#wrapSimpleJsonPath(leftOperand, parentJsonPath), key, value);
		    });
		    return joinWithLogicalOperator(parts, operator);
		  }
		  #wrapSimpleJsonPath(operand, pathSegments) {
		    if (pathSegments.length === 0) {
		      return operand;
		    }
		    if (operand instanceof import_json_path.JsonPath) {
		      return new import_json_path.JsonPath(operand.expression, [...operand.path, ...pathSegments]);
		    }
		    return new import_json_path.JsonPath(operand, pathSegments);
		  }
		  #wrapComplexJsonPath(operand, parentJsonPath, parsedPath) {
		    const finalPathSegments = parentJsonPath.length > 0 ? [...parentJsonPath, ...parsedPath.pathSegments] : parsedPath.pathSegments;
		    operand = this.#wrapSimpleJsonPath(operand, finalPathSegments);
		    for (const castOrModifier of parsedPath.castsAndModifiers) {
		      if ((0, import_check.isString)(castOrModifier)) {
		        operand = new import_cast.Cast(operand, castOrModifier);
		      } else {
		        operand = new castOrModifier(operand);
		      }
		    }
		    return operand;
		  }
		  #getOperandType(operand, model) {
		    var _a;
		    if (operand instanceof import_cast.Cast) {
		      return this.dialect.sequelize.normalizeDataType(operand.type);
		    }
		    if (operand instanceof import_json_path.JsonPath) {
		      return this.#jsonType;
		    }
		    if (!model) {
		      return void 0;
		    }
		    if (operand instanceof import_association_path.AssociationPath) {
		      const association = model.modelDefinition.getAssociation(operand.associationPath);
		      if (!association) {
		        return void 0;
		      }
		      return this.#getOperandType(operand.attributeName, association.target);
		    }
		    if (operand instanceof import_attribute.Attribute) {
		      return (_a = model.modelDefinition.attributes.get(operand.attributeName)) == null ? void 0 : _a.type;
		    }
		    return void 0;
		  }
		}
		function joinWithLogicalOperator(sqlArray, operator) {
		  const operatorSql = operator === import_operators.Op.and ? " AND " : " OR ";
		  sqlArray = sqlArray.filter((val) => Boolean(val));
		  if (sqlArray.length === 0) {
		    return "";
		  }
		  if (sqlArray.length === 1) {
		    return sqlArray[0];
		  }
		  return sqlArray.map((sql) => {
		    if (/ AND | OR /i.test(sql)) {
		      return `(${sql})`;
		    }
		    return sql;
		  }).join(operatorSql);
		}
		function wrapWithNot(sql) {
		  if (!sql) {
		    return "";
		  }
		  if (sql.startsWith("(") && sql.endsWith(")")) {
		    return `NOT ${sql}`;
		  }
		  return `NOT (${sql})`;
		}
		function wrapAmbiguousWhere(operand, sql) {
		  if (operand instanceof import_where.Where && sql.includes(" ")) {
		    return `(${sql})`;
		  }
		  return sql;
		}
		
		return whereSqlBuilder;
	}

	var where_1;
	var hasRequiredWhere;

	function requireWhere () {
		if (hasRequiredWhere) return where_1;
		hasRequiredWhere = 1;
		var __defProp = Object.defineProperty;
		var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
		var __getOwnPropNames = Object.getOwnPropertyNames;
		var __hasOwnProp = Object.prototype.hasOwnProperty;
		var __export = (target, all) => {
		  for (var name in all)
		    __defProp(target, name, { get: all[name], enumerable: true });
		};
		var __copyProps = (to, from, except, desc) => {
		  if (from && typeof from === "object" || typeof from === "function") {
		    for (let key of __getOwnPropNames(from))
		      if (!__hasOwnProp.call(to, key) && key !== except)
		        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
		  }
		  return to;
		};
		var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
		var where_exports = {};
		__export(where_exports, {
		  Where: () => Where,
		  where: () => where
		});
		where_1 = __toCommonJS(where_exports);
		var import_where_sql_builder = requireWhereSqlBuilder();
		var import_base_sql_expression = baseSqlExpression;
		class Where extends import_base_sql_expression.BaseSqlExpression {
		  where;
		  constructor(...args) {
		    super();
		    if (args.length === 1) {
		      this.where = args[0];
		    } else if (args.length === 2) {
		      this.where = import_where_sql_builder.PojoWhere.create(args[0], args[1]);
		    } else {
		      if (typeof args[1] === "string") {
		        throw new TypeError(`where(left, operator, right) does not accept a string as the operator. Use one of the operators available in the Op object.
If you wish to use custom operators not provided by Sequelize, you can use the "sql" template literal tag. Refer to the documentation on custom operators on https://sequelize.org/ for more details.`);
		      }
		      this.where = import_where_sql_builder.PojoWhere.create(args[0], { [args[1]]: args[2] });
		    }
		  }
		}
		function where(...args) {
		  return new Where(...args);
		}
		
		return where_1;
	}

	var check;
	var hasRequiredCheck;

	function requireCheck () {
		if (hasRequiredCheck) return check;
		hasRequiredCheck = 1;
		var __create = Object.create;
		var __defProp = Object.defineProperty;
		var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
		var __getOwnPropNames = Object.getOwnPropertyNames;
		var __getProtoOf = Object.getPrototypeOf;
		var __hasOwnProp = Object.prototype.hasOwnProperty;
		var __export = (target, all) => {
		  for (var name in all)
		    __defProp(target, name, { get: all[name], enumerable: true });
		};
		var __copyProps = (to, from, except, desc) => {
		  if (from && typeof from === "object" || typeof from === "function") {
		    for (let key of __getOwnPropNames(from))
		      if (!__hasOwnProp.call(to, key) && key !== except)
		        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
		  }
		  return to;
		};
		var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
		  // If the importer is in node compatibility mode or this is not an ESM
		  // file that has been converted to a CommonJS file using a Babel-
		  // compatible transform (i.e. "__esModule" has not been set), then set
		  // "default" to the CommonJS "module.exports" for node compatibility.
		  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
		  mod
		));
		var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
		var check_exports = {};
		__export(check_exports, {
		  assertCaughtError: () => assertCaughtError,
		  assertIsErrorWithStringCode: () => assertIsErrorWithStringCode,
		  buildInvalidOptionReceivedError: () => buildInvalidOptionReceivedError,
		  canTreatArrayAsAnd: () => canTreatArrayAsAnd,
		  isBigInt: () => isBigInt,
		  isColString: () => isColString,
		  isDictionary: () => isDictionary,
		  isError: () => isError,
		  isErrorWithStringCode: () => isErrorWithStringCode,
		  isNodeError: () => isNodeError,
		  isNullish: () => isNullish,
		  isNumber: () => isNumber,
		  isPlainObject: () => isPlainObject,
		  isString: () => isString,
		  rejectInvalidOptions: () => rejectInvalidOptions
		});
		check = __toCommonJS(check_exports);
		var import_pickBy = __toESM(pickBy_1);
		var import_errors = errors;
		var import_where = requireWhere();
		function isNullish(val) {
		  return val == null;
		}
		function isNodeError(val) {
		  return val instanceof Error && "code" in val;
		}
		function isErrorWithStringCode(val) {
		  return val instanceof Error && typeof val.code === "string";
		}
		function assertIsErrorWithStringCode(val) {
		  if (!isErrorWithStringCode(val)) {
		    throw new Error('Expected Error with string "code" property');
		  }
		}
		function isError(val) {
		  return val instanceof Error;
		}
		function assertCaughtError(val) {
		  if (!isError(val)) {
		    throw new import_errors.BaseError("A non-error value was thrown", { cause: val });
		  }
		}
		function isString(val) {
		  return typeof val === "string";
		}
		function isBigInt(val) {
		  return typeof val === "bigint";
		}
		function isNumber(val) {
		  return typeof val === "number";
		}
		function isPlainObject(value) {
		  if (value === null || typeof value !== "object") {
		    return false;
		  }
		  const prototype = Object.getPrototypeOf(value);
		  return prototype === null || prototype === Object.prototype;
		}
		function isDictionary(value) {
		  return isPlainObject(value);
		}
		function isColString(value) {
		  return typeof value === "string" && value.startsWith("$") && value.endsWith("$");
		}
		function canTreatArrayAsAnd(arr) {
		  return arr.some((arg) => isPlainObject(arg) || arg instanceof import_where.Where);
		}
		function rejectInvalidOptions(methodName, dialectName, allSupportableOptions, supportedOptions, receivedOptions) {
		  const receivedOptionNames = Object.keys((0, import_pickBy.default)(receivedOptions));
		  const unsupportedOptions = receivedOptionNames.filter((optionName) => {
		    return allSupportableOptions.has(optionName) && !supportedOptions.has(optionName);
		  });
		  if (unsupportedOptions.length > 0) {
		    throw buildInvalidOptionReceivedError(methodName, dialectName, unsupportedOptions);
		  }
		}
		function buildInvalidOptionReceivedError(methodName, dialectName, invalidOptions) {
		  return new Error(`The following options are not supported by ${methodName} in ${dialectName}: ${invalidOptions.join(", ")}`);
		}
		
		return check;
	}

	var lodash = {exports: {}};

	/**
	 * @license
	 * Lodash <https://lodash.com/>
	 * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
	 * Released under MIT license <https://lodash.com/license>
	 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
	 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
	 */
	lodash.exports;

	(function (module, exports) {
	(function() {

		  /** Used as a safe reference for `undefined` in pre-ES5 environments. */
		  var undefined$1;

		  /** Used as the semantic version number. */
		  var VERSION = '4.17.21';

		  /** Used as the size to enable large array optimizations. */
		  var LARGE_ARRAY_SIZE = 200;

		  /** Error message constants. */
		  var CORE_ERROR_TEXT = 'Unsupported core-js use. Try https://npms.io/search?q=ponyfill.',
		      FUNC_ERROR_TEXT = 'Expected a function',
		      INVALID_TEMPL_VAR_ERROR_TEXT = 'Invalid `variable` option passed into `_.template`';

		  /** Used to stand-in for `undefined` hash values. */
		  var HASH_UNDEFINED = '__lodash_hash_undefined__';

		  /** Used as the maximum memoize cache size. */
		  var MAX_MEMOIZE_SIZE = 500;

		  /** Used as the internal argument placeholder. */
		  var PLACEHOLDER = '__lodash_placeholder__';

		  /** Used to compose bitmasks for cloning. */
		  var CLONE_DEEP_FLAG = 1,
		      CLONE_FLAT_FLAG = 2,
		      CLONE_SYMBOLS_FLAG = 4;

		  /** Used to compose bitmasks for value comparisons. */
		  var COMPARE_PARTIAL_FLAG = 1,
		      COMPARE_UNORDERED_FLAG = 2;

		  /** Used to compose bitmasks for function metadata. */
		  var WRAP_BIND_FLAG = 1,
		      WRAP_BIND_KEY_FLAG = 2,
		      WRAP_CURRY_BOUND_FLAG = 4,
		      WRAP_CURRY_FLAG = 8,
		      WRAP_CURRY_RIGHT_FLAG = 16,
		      WRAP_PARTIAL_FLAG = 32,
		      WRAP_PARTIAL_RIGHT_FLAG = 64,
		      WRAP_ARY_FLAG = 128,
		      WRAP_REARG_FLAG = 256,
		      WRAP_FLIP_FLAG = 512;

		  /** Used as default options for `_.truncate`. */
		  var DEFAULT_TRUNC_LENGTH = 30,
		      DEFAULT_TRUNC_OMISSION = '...';

		  /** Used to detect hot functions by number of calls within a span of milliseconds. */
		  var HOT_COUNT = 800,
		      HOT_SPAN = 16;

		  /** Used to indicate the type of lazy iteratees. */
		  var LAZY_FILTER_FLAG = 1,
		      LAZY_MAP_FLAG = 2,
		      LAZY_WHILE_FLAG = 3;

		  /** Used as references for various `Number` constants. */
		  var INFINITY = 1 / 0,
		      MAX_SAFE_INTEGER = 9007199254740991,
		      MAX_INTEGER = 1.7976931348623157e+308,
		      NAN = 0 / 0;

		  /** Used as references for the maximum length and index of an array. */
		  var MAX_ARRAY_LENGTH = 4294967295,
		      MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,
		      HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;

		  /** Used to associate wrap methods with their bit flags. */
		  var wrapFlags = [
		    ['ary', WRAP_ARY_FLAG],
		    ['bind', WRAP_BIND_FLAG],
		    ['bindKey', WRAP_BIND_KEY_FLAG],
		    ['curry', WRAP_CURRY_FLAG],
		    ['curryRight', WRAP_CURRY_RIGHT_FLAG],
		    ['flip', WRAP_FLIP_FLAG],
		    ['partial', WRAP_PARTIAL_FLAG],
		    ['partialRight', WRAP_PARTIAL_RIGHT_FLAG],
		    ['rearg', WRAP_REARG_FLAG]
		  ];

		  /** `Object#toString` result references. */
		  var argsTag = '[object Arguments]',
		      arrayTag = '[object Array]',
		      asyncTag = '[object AsyncFunction]',
		      boolTag = '[object Boolean]',
		      dateTag = '[object Date]',
		      domExcTag = '[object DOMException]',
		      errorTag = '[object Error]',
		      funcTag = '[object Function]',
		      genTag = '[object GeneratorFunction]',
		      mapTag = '[object Map]',
		      numberTag = '[object Number]',
		      nullTag = '[object Null]',
		      objectTag = '[object Object]',
		      promiseTag = '[object Promise]',
		      proxyTag = '[object Proxy]',
		      regexpTag = '[object RegExp]',
		      setTag = '[object Set]',
		      stringTag = '[object String]',
		      symbolTag = '[object Symbol]',
		      undefinedTag = '[object Undefined]',
		      weakMapTag = '[object WeakMap]',
		      weakSetTag = '[object WeakSet]';

		  var arrayBufferTag = '[object ArrayBuffer]',
		      dataViewTag = '[object DataView]',
		      float32Tag = '[object Float32Array]',
		      float64Tag = '[object Float64Array]',
		      int8Tag = '[object Int8Array]',
		      int16Tag = '[object Int16Array]',
		      int32Tag = '[object Int32Array]',
		      uint8Tag = '[object Uint8Array]',
		      uint8ClampedTag = '[object Uint8ClampedArray]',
		      uint16Tag = '[object Uint16Array]',
		      uint32Tag = '[object Uint32Array]';

		  /** Used to match empty string literals in compiled template source. */
		  var reEmptyStringLeading = /\b__p \+= '';/g,
		      reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
		      reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

		  /** Used to match HTML entities and HTML characters. */
		  var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g,
		      reUnescapedHtml = /[&<>"']/g,
		      reHasEscapedHtml = RegExp(reEscapedHtml.source),
		      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);

		  /** Used to match template delimiters. */
		  var reEscape = /<%-([\s\S]+?)%>/g,
		      reEvaluate = /<%([\s\S]+?)%>/g,
		      reInterpolate = /<%=([\s\S]+?)%>/g;

		  /** Used to match property names within property paths. */
		  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
		      reIsPlainProp = /^\w*$/,
		      rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

		  /**
		   * Used to match `RegExp`
		   * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
		   */
		  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g,
		      reHasRegExpChar = RegExp(reRegExpChar.source);

		  /** Used to match leading whitespace. */
		  var reTrimStart = /^\s+/;

		  /** Used to match a single whitespace character. */
		  var reWhitespace = /\s/;

		  /** Used to match wrap detail comments. */
		  var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,
		      reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/,
		      reSplitDetails = /,? & /;

		  /** Used to match words composed of alphanumeric characters. */
		  var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;

		  /**
		   * Used to validate the `validate` option in `_.template` variable.
		   *
		   * Forbids characters which could potentially change the meaning of the function argument definition:
		   * - "()," (modification of function parameters)
		   * - "=" (default value)
		   * - "[]{}" (destructuring of function parameters)
		   * - "/" (beginning of a comment)
		   * - whitespace
		   */
		  var reForbiddenIdentifierChars = /[()=,{}\[\]\/\s]/;

		  /** Used to match backslashes in property paths. */
		  var reEscapeChar = /\\(\\)?/g;

		  /**
		   * Used to match
		   * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).
		   */
		  var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

		  /** Used to match `RegExp` flags from their coerced string values. */
		  var reFlags = /\w*$/;

		  /** Used to detect bad signed hexadecimal string values. */
		  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

		  /** Used to detect binary string values. */
		  var reIsBinary = /^0b[01]+$/i;

		  /** Used to detect host constructors (Safari). */
		  var reIsHostCtor = /^\[object .+?Constructor\]$/;

		  /** Used to detect octal string values. */
		  var reIsOctal = /^0o[0-7]+$/i;

		  /** Used to detect unsigned integer values. */
		  var reIsUint = /^(?:0|[1-9]\d*)$/;

		  /** Used to match Latin Unicode letters (excluding mathematical operators). */
		  var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;

		  /** Used to ensure capturing order of template delimiters. */
		  var reNoMatch = /($^)/;

		  /** Used to match unescaped characters in compiled string literals. */
		  var reUnescapedString = /['\n\r\u2028\u2029\\]/g;

		  /** Used to compose unicode character classes. */
		  var rsAstralRange = '\\ud800-\\udfff',
		      rsComboMarksRange = '\\u0300-\\u036f',
		      reComboHalfMarksRange = '\\ufe20-\\ufe2f',
		      rsComboSymbolsRange = '\\u20d0-\\u20ff',
		      rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
		      rsDingbatRange = '\\u2700-\\u27bf',
		      rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
		      rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
		      rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
		      rsPunctuationRange = '\\u2000-\\u206f',
		      rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
		      rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
		      rsVarRange = '\\ufe0e\\ufe0f',
		      rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;

		  /** Used to compose unicode capture groups. */
		  var rsApos = "['\u2019]",
		      rsAstral = '[' + rsAstralRange + ']',
		      rsBreak = '[' + rsBreakRange + ']',
		      rsCombo = '[' + rsComboRange + ']',
		      rsDigits = '\\d+',
		      rsDingbat = '[' + rsDingbatRange + ']',
		      rsLower = '[' + rsLowerRange + ']',
		      rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
		      rsFitz = '\\ud83c[\\udffb-\\udfff]',
		      rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
		      rsNonAstral = '[^' + rsAstralRange + ']',
		      rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
		      rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
		      rsUpper = '[' + rsUpperRange + ']',
		      rsZWJ = '\\u200d';

		  /** Used to compose unicode regexes. */
		  var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',
		      rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',
		      rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',
		      rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',
		      reOptMod = rsModifier + '?',
		      rsOptVar = '[' + rsVarRange + ']?',
		      rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
		      rsOrdLower = '\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])',
		      rsOrdUpper = '\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])',
		      rsSeq = rsOptVar + reOptMod + rsOptJoin,
		      rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,
		      rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';

		  /** Used to match apostrophes. */
		  var reApos = RegExp(rsApos, 'g');

		  /**
		   * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
		   * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
		   */
		  var reComboMark = RegExp(rsCombo, 'g');

		  /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
		  var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');

		  /** Used to match complex or compound words. */
		  var reUnicodeWord = RegExp([
		    rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',
		    rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')',
		    rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower,
		    rsUpper + '+' + rsOptContrUpper,
		    rsOrdUpper,
		    rsOrdLower,
		    rsDigits,
		    rsEmoji
		  ].join('|'), 'g');

		  /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
		  var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboRange + rsVarRange + ']');

		  /** Used to detect strings that need a more robust regexp to match words. */
		  var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;

		  /** Used to assign default `context` object properties. */
		  var contextProps = [
		    'Array', 'Buffer', 'DataView', 'Date', 'Error', 'Float32Array', 'Float64Array',
		    'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Map', 'Math', 'Object',
		    'Promise', 'RegExp', 'Set', 'String', 'Symbol', 'TypeError', 'Uint8Array',
		    'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap',
		    '_', 'clearTimeout', 'isFinite', 'parseInt', 'setTimeout'
		  ];

		  /** Used to make template sourceURLs easier to identify. */
		  var templateCounter = -1;

		  /** Used to identify `toStringTag` values of typed arrays. */
		  var typedArrayTags = {};
		  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
		  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
		  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
		  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
		  typedArrayTags[uint32Tag] = true;
		  typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
		  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
		  typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
		  typedArrayTags[errorTag] = typedArrayTags[funcTag] =
		  typedArrayTags[mapTag] = typedArrayTags[numberTag] =
		  typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
		  typedArrayTags[setTag] = typedArrayTags[stringTag] =
		  typedArrayTags[weakMapTag] = false;

		  /** Used to identify `toStringTag` values supported by `_.clone`. */
		  var cloneableTags = {};
		  cloneableTags[argsTag] = cloneableTags[arrayTag] =
		  cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =
		  cloneableTags[boolTag] = cloneableTags[dateTag] =
		  cloneableTags[float32Tag] = cloneableTags[float64Tag] =
		  cloneableTags[int8Tag] = cloneableTags[int16Tag] =
		  cloneableTags[int32Tag] = cloneableTags[mapTag] =
		  cloneableTags[numberTag] = cloneableTags[objectTag] =
		  cloneableTags[regexpTag] = cloneableTags[setTag] =
		  cloneableTags[stringTag] = cloneableTags[symbolTag] =
		  cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
		  cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
		  cloneableTags[errorTag] = cloneableTags[funcTag] =
		  cloneableTags[weakMapTag] = false;

		  /** Used to map Latin Unicode letters to basic Latin letters. */
		  var deburredLetters = {
		    // Latin-1 Supplement block.
		    '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
		    '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
		    '\xc7': 'C',  '\xe7': 'c',
		    '\xd0': 'D',  '\xf0': 'd',
		    '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
		    '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
		    '\xcc': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
		    '\xec': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
		    '\xd1': 'N',  '\xf1': 'n',
		    '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
		    '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
		    '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
		    '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
		    '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
		    '\xc6': 'Ae', '\xe6': 'ae',
		    '\xde': 'Th', '\xfe': 'th',
		    '\xdf': 'ss',
		    // Latin Extended-A block.
		    '\u0100': 'A',  '\u0102': 'A', '\u0104': 'A',
		    '\u0101': 'a',  '\u0103': 'a', '\u0105': 'a',
		    '\u0106': 'C',  '\u0108': 'C', '\u010a': 'C', '\u010c': 'C',
		    '\u0107': 'c',  '\u0109': 'c', '\u010b': 'c', '\u010d': 'c',
		    '\u010e': 'D',  '\u0110': 'D', '\u010f': 'd', '\u0111': 'd',
		    '\u0112': 'E',  '\u0114': 'E', '\u0116': 'E', '\u0118': 'E', '\u011a': 'E',
		    '\u0113': 'e',  '\u0115': 'e', '\u0117': 'e', '\u0119': 'e', '\u011b': 'e',
		    '\u011c': 'G',  '\u011e': 'G', '\u0120': 'G', '\u0122': 'G',
		    '\u011d': 'g',  '\u011f': 'g', '\u0121': 'g', '\u0123': 'g',
		    '\u0124': 'H',  '\u0126': 'H', '\u0125': 'h', '\u0127': 'h',
		    '\u0128': 'I',  '\u012a': 'I', '\u012c': 'I', '\u012e': 'I', '\u0130': 'I',
		    '\u0129': 'i',  '\u012b': 'i', '\u012d': 'i', '\u012f': 'i', '\u0131': 'i',
		    '\u0134': 'J',  '\u0135': 'j',
		    '\u0136': 'K',  '\u0137': 'k', '\u0138': 'k',
		    '\u0139': 'L',  '\u013b': 'L', '\u013d': 'L', '\u013f': 'L', '\u0141': 'L',
		    '\u013a': 'l',  '\u013c': 'l', '\u013e': 'l', '\u0140': 'l', '\u0142': 'l',
		    '\u0143': 'N',  '\u0145': 'N', '\u0147': 'N', '\u014a': 'N',
		    '\u0144': 'n',  '\u0146': 'n', '\u0148': 'n', '\u014b': 'n',
		    '\u014c': 'O',  '\u014e': 'O', '\u0150': 'O',
		    '\u014d': 'o',  '\u014f': 'o', '\u0151': 'o',
		    '\u0154': 'R',  '\u0156': 'R', '\u0158': 'R',
		    '\u0155': 'r',  '\u0157': 'r', '\u0159': 'r',
		    '\u015a': 'S',  '\u015c': 'S', '\u015e': 'S', '\u0160': 'S',
		    '\u015b': 's',  '\u015d': 's', '\u015f': 's', '\u0161': 's',
		    '\u0162': 'T',  '\u0164': 'T', '\u0166': 'T',
		    '\u0163': 't',  '\u0165': 't', '\u0167': 't',
		    '\u0168': 'U',  '\u016a': 'U', '\u016c': 'U', '\u016e': 'U', '\u0170': 'U', '\u0172': 'U',
		    '\u0169': 'u',  '\u016b': 'u', '\u016d': 'u', '\u016f': 'u', '\u0171': 'u', '\u0173': 'u',
		    '\u0174': 'W',  '\u0175': 'w',
		    '\u0176': 'Y',  '\u0177': 'y', '\u0178': 'Y',
		    '\u0179': 'Z',  '\u017b': 'Z', '\u017d': 'Z',
		    '\u017a': 'z',  '\u017c': 'z', '\u017e': 'z',
		    '\u0132': 'IJ', '\u0133': 'ij',
		    '\u0152': 'Oe', '\u0153': 'oe',
		    '\u0149': "'n", '\u017f': 's'
		  };

		  /** Used to map characters to HTML entities. */
		  var htmlEscapes = {
		    '&': '&amp;',
		    '<': '&lt;',
		    '>': '&gt;',
		    '"': '&quot;',
		    "'": '&#39;'
		  };

		  /** Used to map HTML entities to characters. */
		  var htmlUnescapes = {
		    '&amp;': '&',
		    '&lt;': '<',
		    '&gt;': '>',
		    '&quot;': '"',
		    '&#39;': "'"
		  };

		  /** Used to escape characters for inclusion in compiled string literals. */
		  var stringEscapes = {
		    '\\': '\\',
		    "'": "'",
		    '\n': 'n',
		    '\r': 'r',
		    '\u2028': 'u2028',
		    '\u2029': 'u2029'
		  };

		  /** Built-in method references without a dependency on `root`. */
		  var freeParseFloat = parseFloat,
		      freeParseInt = parseInt;

		  /** Detect free variable `global` from Node.js. */
		  var freeGlobal = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;

		  /** Detect free variable `self`. */
		  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

		  /** Used as a reference to the global object. */
		  var root = freeGlobal || freeSelf || Function('return this')();

		  /** Detect free variable `exports`. */
		  var freeExports = exports && !exports.nodeType && exports;

		  /** Detect free variable `module`. */
		  var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;

		  /** Detect the popular CommonJS extension `module.exports`. */
		  var moduleExports = freeModule && freeModule.exports === freeExports;

		  /** Detect free variable `process` from Node.js. */
		  var freeProcess = moduleExports && freeGlobal.process;

		  /** Used to access faster Node.js helpers. */
		  var nodeUtil = (function() {
		    try {
		      // Use `util.types` for Node.js 10+.
		      var types = freeModule && freeModule.require && freeModule.require('util').types;

		      if (types) {
		        return types;
		      }

		      // Legacy `process.binding('util')` for Node.js < 10.
		      return freeProcess && freeProcess.binding && freeProcess.binding('util');
		    } catch (e) {}
		  }());

		  /* Node.js helper references. */
		  var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer,
		      nodeIsDate = nodeUtil && nodeUtil.isDate,
		      nodeIsMap = nodeUtil && nodeUtil.isMap,
		      nodeIsRegExp = nodeUtil && nodeUtil.isRegExp,
		      nodeIsSet = nodeUtil && nodeUtil.isSet,
		      nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

		  /*--------------------------------------------------------------------------*/

		  /**
		   * A faster alternative to `Function#apply`, this function invokes `func`
		   * with the `this` binding of `thisArg` and the arguments of `args`.
		   *
		   * @private
		   * @param {Function} func The function to invoke.
		   * @param {*} thisArg The `this` binding of `func`.
		   * @param {Array} args The arguments to invoke `func` with.
		   * @returns {*} Returns the result of `func`.
		   */
		  function apply(func, thisArg, args) {
		    switch (args.length) {
		      case 0: return func.call(thisArg);
		      case 1: return func.call(thisArg, args[0]);
		      case 2: return func.call(thisArg, args[0], args[1]);
		      case 3: return func.call(thisArg, args[0], args[1], args[2]);
		    }
		    return func.apply(thisArg, args);
		  }

		  /**
		   * A specialized version of `baseAggregator` for arrays.
		   *
		   * @private
		   * @param {Array} [array] The array to iterate over.
		   * @param {Function} setter The function to set `accumulator` values.
		   * @param {Function} iteratee The iteratee to transform keys.
		   * @param {Object} accumulator The initial aggregated object.
		   * @returns {Function} Returns `accumulator`.
		   */
		  function arrayAggregator(array, setter, iteratee, accumulator) {
		    var index = -1,
		        length = array == null ? 0 : array.length;

		    while (++index < length) {
		      var value = array[index];
		      setter(accumulator, value, iteratee(value), array);
		    }
		    return accumulator;
		  }

		  /**
		   * A specialized version of `_.forEach` for arrays without support for
		   * iteratee shorthands.
		   *
		   * @private
		   * @param {Array} [array] The array to iterate over.
		   * @param {Function} iteratee The function invoked per iteration.
		   * @returns {Array} Returns `array`.
		   */
		  function arrayEach(array, iteratee) {
		    var index = -1,
		        length = array == null ? 0 : array.length;

		    while (++index < length) {
		      if (iteratee(array[index], index, array) === false) {
		        break;
		      }
		    }
		    return array;
		  }

		  /**
		   * A specialized version of `_.forEachRight` for arrays without support for
		   * iteratee shorthands.
		   *
		   * @private
		   * @param {Array} [array] The array to iterate over.
		   * @param {Function} iteratee The function invoked per iteration.
		   * @returns {Array} Returns `array`.
		   */
		  function arrayEachRight(array, iteratee) {
		    var length = array == null ? 0 : array.length;

		    while (length--) {
		      if (iteratee(array[length], length, array) === false) {
		        break;
		      }
		    }
		    return array;
		  }

		  /**
		   * A specialized version of `_.every` for arrays without support for
		   * iteratee shorthands.
		   *
		   * @private
		   * @param {Array} [array] The array to iterate over.
		   * @param {Function} predicate The function invoked per iteration.
		   * @returns {boolean} Returns `true` if all elements pass the predicate check,
		   *  else `false`.
		   */
		  function arrayEvery(array, predicate) {
		    var index = -1,
		        length = array == null ? 0 : array.length;

		    while (++index < length) {
		      if (!predicate(array[index], index, array)) {
		        return false;
		      }
		    }
		    return true;
		  }

		  /**
		   * A specialized version of `_.filter` for arrays without support for
		   * iteratee shorthands.
		   *
		   * @private
		   * @param {Array} [array] The array to iterate over.
		   * @param {Function} predicate The function invoked per iteration.
		   * @returns {Array} Returns the new filtered array.
		   */
		  function arrayFilter(array, predicate) {
		    var index = -1,
		        length = array == null ? 0 : array.length,
		        resIndex = 0,
		        result = [];

		    while (++index < length) {
		      var value = array[index];
		      if (predicate(value, index, array)) {
		        result[resIndex++] = value;
		      }
		    }
		    return result;
		  }

		  /**
		   * A specialized version of `_.includes` for arrays without support for
		   * specifying an index to search from.
		   *
		   * @private
		   * @param {Array} [array] The array to inspect.
		   * @param {*} target The value to search for.
		   * @returns {boolean} Returns `true` if `target` is found, else `false`.
		   */
		  function arrayIncludes(array, value) {
		    var length = array == null ? 0 : array.length;
		    return !!length && baseIndexOf(array, value, 0) > -1;
		  }

		  /**
		   * This function is like `arrayIncludes` except that it accepts a comparator.
		   *
		   * @private
		   * @param {Array} [array] The array to inspect.
		   * @param {*} target The value to search for.
		   * @param {Function} comparator The comparator invoked per element.
		   * @returns {boolean} Returns `true` if `target` is found, else `false`.
		   */
		  function arrayIncludesWith(array, value, comparator) {
		    var index = -1,
		        length = array == null ? 0 : array.length;

		    while (++index < length) {
		      if (comparator(value, array[index])) {
		        return true;
		      }
		    }
		    return false;
		  }

		  /**
		   * A specialized version of `_.map` for arrays without support for iteratee
		   * shorthands.
		   *
		   * @private
		   * @param {Array} [array] The array to iterate over.
		   * @param {Function} iteratee The function invoked per iteration.
		   * @returns {Array} Returns the new mapped array.
		   */
		  function arrayMap(array, iteratee) {
		    var index = -1,
		        length = array == null ? 0 : array.length,
		        result = Array(length);

		    while (++index < length) {
		      result[index] = iteratee(array[index], index, array);
		    }
		    return result;
		  }

		  /**
		   * Appends the elements of `values` to `array`.
		   *
		   * @private
		   * @param {Array} array The array to modify.
		   * @param {Array} values The values to append.
		   * @returns {Array} Returns `array`.
		   */
		  function arrayPush(array, values) {
		    var index = -1,
		        length = values.length,
		        offset = array.length;

		    while (++index < length) {
		      array[offset + index] = values[index];
		    }
		    return array;
		  }

		  /**
		   * A specialized version of `_.reduce` for arrays without support for
		   * iteratee shorthands.
		   *
		   * @private
		   * @param {Array} [array] The array to iterate over.
		   * @param {Function} iteratee The function invoked per iteration.
		   * @param {*} [accumulator] The initial value.
		   * @param {boolean} [initAccum] Specify using the first element of `array` as
		   *  the initial value.
		   * @returns {*} Returns the accumulated value.
		   */
		  function arrayReduce(array, iteratee, accumulator, initAccum) {
		    var index = -1,
		        length = array == null ? 0 : array.length;

		    if (initAccum && length) {
		      accumulator = array[++index];
		    }
		    while (++index < length) {
		      accumulator = iteratee(accumulator, array[index], index, array);
		    }
		    return accumulator;
		  }

		  /**
		   * A specialized version of `_.reduceRight` for arrays without support for
		   * iteratee shorthands.
		   *
		   * @private
		   * @param {Array} [array] The array to iterate over.
		   * @param {Function} iteratee The function invoked per iteration.
		   * @param {*} [accumulator] The initial value.
		   * @param {boolean} [initAccum] Specify using the last element of `array` as
		   *  the initial value.
		   * @returns {*} Returns the accumulated value.
		   */
		  function arrayReduceRight(array, iteratee, accumulator, initAccum) {
		    var length = array == null ? 0 : array.length;
		    if (initAccum && length) {
		      accumulator = array[--length];
		    }
		    while (length--) {
		      accumulator = iteratee(accumulator, array[length], length, array);
		    }
		    return accumulator;
		  }

		  /**
		   * A specialized version of `_.some` for arrays without support for iteratee
		   * shorthands.
		   *
		   * @private
		   * @param {Array} [array] The array to iterate over.
		   * @param {Function} predicate The function invoked per iteration.
		   * @returns {boolean} Returns `true` if any element passes the predicate check,
		   *  else `false`.
		   */
		  function arraySome(array, predicate) {
		    var index = -1,
		        length = array == null ? 0 : array.length;

		    while (++index < length) {
		      if (predicate(array[index], index, array)) {
		        return true;
		      }
		    }
		    return false;
		  }

		  /**
		   * Gets the size of an ASCII `string`.
		   *
		   * @private
		   * @param {string} string The string inspect.
		   * @returns {number} Returns the string size.
		   */
		  var asciiSize = baseProperty('length');

		  /**
		   * Converts an ASCII `string` to an array.
		   *
		   * @private
		   * @param {string} string The string to convert.
		   * @returns {Array} Returns the converted array.
		   */
		  function asciiToArray(string) {
		    return string.split('');
		  }

		  /**
		   * Splits an ASCII `string` into an array of its words.
		   *
		   * @private
		   * @param {string} The string to inspect.
		   * @returns {Array} Returns the words of `string`.
		   */
		  function asciiWords(string) {
		    return string.match(reAsciiWord) || [];
		  }

		  /**
		   * The base implementation of methods like `_.findKey` and `_.findLastKey`,
		   * without support for iteratee shorthands, which iterates over `collection`
		   * using `eachFunc`.
		   *
		   * @private
		   * @param {Array|Object} collection The collection to inspect.
		   * @param {Function} predicate The function invoked per iteration.
		   * @param {Function} eachFunc The function to iterate over `collection`.
		   * @returns {*} Returns the found element or its key, else `undefined`.
		   */
		  function baseFindKey(collection, predicate, eachFunc) {
		    var result;
		    eachFunc(collection, function(value, key, collection) {
		      if (predicate(value, key, collection)) {
		        result = key;
		        return false;
		      }
		    });
		    return result;
		  }

		  /**
		   * The base implementation of `_.findIndex` and `_.findLastIndex` without
		   * support for iteratee shorthands.
		   *
		   * @private
		   * @param {Array} array The array to inspect.
		   * @param {Function} predicate The function invoked per iteration.
		   * @param {number} fromIndex The index to search from.
		   * @param {boolean} [fromRight] Specify iterating from right to left.
		   * @returns {number} Returns the index of the matched value, else `-1`.
		   */
		  function baseFindIndex(array, predicate, fromIndex, fromRight) {
		    var length = array.length,
		        index = fromIndex + (fromRight ? 1 : -1);

		    while ((fromRight ? index-- : ++index < length)) {
		      if (predicate(array[index], index, array)) {
		        return index;
		      }
		    }
		    return -1;
		  }

		  /**
		   * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
		   *
		   * @private
		   * @param {Array} array The array to inspect.
		   * @param {*} value The value to search for.
		   * @param {number} fromIndex The index to search from.
		   * @returns {number} Returns the index of the matched value, else `-1`.
		   */
		  function baseIndexOf(array, value, fromIndex) {
		    return value === value
		      ? strictIndexOf(array, value, fromIndex)
		      : baseFindIndex(array, baseIsNaN, fromIndex);
		  }

		  /**
		   * This function is like `baseIndexOf` except that it accepts a comparator.
		   *
		   * @private
		   * @param {Array} array The array to inspect.
		   * @param {*} value The value to search for.
		   * @param {number} fromIndex The index to search from.
		   * @param {Function} comparator The comparator invoked per element.
		   * @returns {number} Returns the index of the matched value, else `-1`.
		   */
		  function baseIndexOfWith(array, value, fromIndex, comparator) {
		    var index = fromIndex - 1,
		        length = array.length;

		    while (++index < length) {
		      if (comparator(array[index], value)) {
		        return index;
		      }
		    }
		    return -1;
		  }

		  /**
		   * The base implementation of `_.isNaN` without support for number objects.
		   *
		   * @private
		   * @param {*} value The value to check.
		   * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
		   */
		  function baseIsNaN(value) {
		    return value !== value;
		  }

		  /**
		   * The base implementation of `_.mean` and `_.meanBy` without support for
		   * iteratee shorthands.
		   *
		   * @private
		   * @param {Array} array The array to iterate over.
		   * @param {Function} iteratee The function invoked per iteration.
		   * @returns {number} Returns the mean.
		   */
		  function baseMean(array, iteratee) {
		    var length = array == null ? 0 : array.length;
		    return length ? (baseSum(array, iteratee) / length) : NAN;
		  }

		  /**
		   * The base implementation of `_.property` without support for deep paths.
		   *
		   * @private
		   * @param {string} key The key of the property to get.
		   * @returns {Function} Returns the new accessor function.
		   */
		  function baseProperty(key) {
		    return function(object) {
		      return object == null ? undefined$1 : object[key];
		    };
		  }

		  /**
		   * The base implementation of `_.propertyOf` without support for deep paths.
		   *
		   * @private
		   * @param {Object} object The object to query.
		   * @returns {Function} Returns the new accessor function.
		   */
		  function basePropertyOf(object) {
		    return function(key) {
		      return object == null ? undefined$1 : object[key];
		    };
		  }

		  /**
		   * The base implementation of `_.reduce` and `_.reduceRight`, without support
		   * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
		   *
		   * @private
		   * @param {Array|Object} collection The collection to iterate over.
		   * @param {Function} iteratee The function invoked per iteration.
		   * @param {*} accumulator The initial value.
		   * @param {boolean} initAccum Specify using the first or last element of
		   *  `collection` as the initial value.
		   * @param {Function} eachFunc The function to iterate over `collection`.
		   * @returns {*} Returns the accumulated value.
		   */
		  function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
		    eachFunc(collection, function(value, index, collection) {
		      accumulator = initAccum
		        ? (initAccum = false, value)
		        : iteratee(accumulator, value, index, collection);
		    });
		    return accumulator;
		  }

		  /**
		   * The base implementation of `_.sortBy` which uses `comparer` to define the
		   * sort order of `array` and replaces criteria objects with their corresponding
		   * values.
		   *
		   * @private
		   * @param {Array} array The array to sort.
		   * @param {Function} comparer The function to define sort order.
		   * @returns {Array} Returns `array`.
		   */
		  function baseSortBy(array, comparer) {
		    var length = array.length;

		    array.sort(comparer);
		    while (length--) {
		      array[length] = array[length].value;
		    }
		    return array;
		  }

		  /**
		   * The base implementation of `_.sum` and `_.sumBy` without support for
		   * iteratee shorthands.
		   *
		   * @private
		   * @param {Array} array The array to iterate over.
		   * @param {Function} iteratee The function invoked per iteration.
		   * @returns {number} Returns the sum.
		   */
		  function baseSum(array, iteratee) {
		    var result,
		        index = -1,
		        length = array.length;

		    while (++index < length) {
		      var current = iteratee(array[index]);
		      if (current !== undefined$1) {
		        result = result === undefined$1 ? current : (result + current);
		      }
		    }
		    return result;
		  }

		  /**
		   * The base implementation of `_.times` without support for iteratee shorthands
		   * or max array length checks.
		   *
		   * @private
		   * @param {number} n The number of times to invoke `iteratee`.
		   * @param {Function} iteratee The function invoked per iteration.
		   * @returns {Array} Returns the array of results.
		   */
		  function baseTimes(n, iteratee) {
		    var index = -1,
		        result = Array(n);

		    while (++index < n) {
		      result[index] = iteratee(index);
		    }
		    return result;
		  }

		  /**
		   * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array
		   * of key-value pairs for `object` corresponding to the property names of `props`.
		   *
		   * @private
		   * @param {Object} object The object to query.
		   * @param {Array} props The property names to get values for.
		   * @returns {Object} Returns the key-value pairs.
		   */
		  function baseToPairs(object, props) {
		    return arrayMap(props, function(key) {
		      return [key, object[key]];
		    });
		  }

		  /**
		   * The base implementation of `_.trim`.
		   *
		   * @private
		   * @param {string} string The string to trim.
		   * @returns {string} Returns the trimmed string.
		   */
		  function baseTrim(string) {
		    return string
		      ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, '')
		      : string;
		  }

		  /**
		   * The base implementation of `_.unary` without support for storing metadata.
		   *
		   * @private
		   * @param {Function} func The function to cap arguments for.
		   * @returns {Function} Returns the new capped function.
		   */
		  function baseUnary(func) {
		    return function(value) {
		      return func(value);
		    };
		  }

		  /**
		   * The base implementation of `_.values` and `_.valuesIn` which creates an
		   * array of `object` property values corresponding to the property names
		   * of `props`.
		   *
		   * @private
		   * @param {Object} object The object to query.
		   * @param {Array} props The property names to get values for.
		   * @returns {Object} Returns the array of property values.
		   */
		  function baseValues(object, props) {
		    return arrayMap(props, function(key) {
		      return object[key];
		    });
		  }

		  /**
		   * Checks if a `cache` value for `key` exists.
		   *
		   * @private
		   * @param {Object} cache The cache to query.
		   * @param {string} key The key of the entry to check.
		   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
		   */
		  function cacheHas(cache, key) {
		    return cache.has(key);
		  }

		  /**
		   * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol
		   * that is not found in the character symbols.
		   *
		   * @private
		   * @param {Array} strSymbols The string symbols to inspect.
		   * @param {Array} chrSymbols The character symbols to find.
		   * @returns {number} Returns the index of the first unmatched string symbol.
		   */
		  function charsStartIndex(strSymbols, chrSymbols) {
		    var index = -1,
		        length = strSymbols.length;

		    while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
		    return index;
		  }

		  /**
		   * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
		   * that is not found in the character symbols.
		   *
		   * @private
		   * @param {Array} strSymbols The string symbols to inspect.
		   * @param {Array} chrSymbols The character symbols to find.
		   * @returns {number} Returns the index of the last unmatched string symbol.
		   */
		  function charsEndIndex(strSymbols, chrSymbols) {
		    var index = strSymbols.length;

		    while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
		    return index;
		  }

		  /**
		   * Gets the number of `placeholder` occurrences in `array`.
		   *
		   * @private
		   * @param {Array} array The array to inspect.
		   * @param {*} placeholder The placeholder to search for.
		   * @returns {number} Returns the placeholder count.
		   */
		  function countHolders(array, placeholder) {
		    var length = array.length,
		        result = 0;

		    while (length--) {
		      if (array[length] === placeholder) {
		        ++result;
		      }
		    }
		    return result;
		  }

		  /**
		   * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
		   * letters to basic Latin letters.
		   *
		   * @private
		   * @param {string} letter The matched letter to deburr.
		   * @returns {string} Returns the deburred letter.
		   */
		  var deburrLetter = basePropertyOf(deburredLetters);

		  /**
		   * Used by `_.escape` to convert characters to HTML entities.
		   *
		   * @private
		   * @param {string} chr The matched character to escape.
		   * @returns {string} Returns the escaped character.
		   */
		  var escapeHtmlChar = basePropertyOf(htmlEscapes);

		  /**
		   * Used by `_.template` to escape characters for inclusion in compiled string literals.
		   *
		   * @private
		   * @param {string} chr The matched character to escape.
		   * @returns {string} Returns the escaped character.
		   */
		  function escapeStringChar(chr) {
		    return '\\' + stringEscapes[chr];
		  }

		  /**
		   * Gets the value at `key` of `object`.
		   *
		   * @private
		   * @param {Object} [object] The object to query.
		   * @param {string} key The key of the property to get.
		   * @returns {*} Returns the property value.
		   */
		  function getValue(object, key) {
		    return object == null ? undefined$1 : object[key];
		  }

		  /**
		   * Checks if `string` contains Unicode symbols.
		   *
		   * @private
		   * @param {string} string The string to inspect.
		   * @returns {boolean} Returns `true` if a symbol is found, else `false`.
		   */
		  function hasUnicode(string) {
		    return reHasUnicode.test(string);
		  }

		  /**
		   * Checks if `string` contains a word composed of Unicode symbols.
		   *
		   * @private
		   * @param {string} string The string to inspect.
		   * @returns {boolean} Returns `true` if a word is found, else `false`.
		   */
		  function hasUnicodeWord(string) {
		    return reHasUnicodeWord.test(string);
		  }

		  /**
		   * Converts `iterator` to an array.
		   *
		   * @private
		   * @param {Object} iterator The iterator to convert.
		   * @returns {Array} Returns the converted array.
		   */
		  function iteratorToArray(iterator) {
		    var data,
		        result = [];

		    while (!(data = iterator.next()).done) {
		      result.push(data.value);
		    }
		    return result;
		  }

		  /**
		   * Converts `map` to its key-value pairs.
		   *
		   * @private
		   * @param {Object} map The map to convert.
		   * @returns {Array} Returns the key-value pairs.
		   */
		  function mapToArray(map) {
		    var index = -1,
		        result = Array(map.size);

		    map.forEach(function(value, key) {
		      result[++index] = [key, value];
		    });
		    return result;
		  }

		  /**
		   * Creates a unary function that invokes `func` with its argument transformed.
		   *
		   * @private
		   * @param {Function} func The function to wrap.
		   * @param {Function} transform The argument transform.
		   * @returns {Function} Returns the new function.
		   */
		  function overArg(func, transform) {
		    return function(arg) {
		      return func(transform(arg));
		    };
		  }

		  /**
		   * Replaces all `placeholder` elements in `array` with an internal placeholder
		   * and returns an array of their indexes.
		   *
		   * @private
		   * @param {Array} array The array to modify.
		   * @param {*} placeholder The placeholder to replace.
		   * @returns {Array} Returns the new array of placeholder indexes.
		   */
		  function replaceHolders(array, placeholder) {
		    var index = -1,
		        length = array.length,
		        resIndex = 0,
		        result = [];

		    while (++index < length) {
		      var value = array[index];
		      if (value === placeholder || value === PLACEHOLDER) {
		        array[index] = PLACEHOLDER;
		        result[resIndex++] = index;
		      }
		    }
		    return result;
		  }

		  /**
		   * Converts `set` to an array of its values.
		   *
		   * @private
		   * @param {Object} set The set to convert.
		   * @returns {Array} Returns the values.
		   */
		  function setToArray(set) {
		    var index = -1,
		        result = Array(set.size);

		    set.forEach(function(value) {
		      result[++index] = value;
		    });
		    return result;
		  }

		  /**
		   * Converts `set` to its value-value pairs.
		   *
		   * @private
		   * @param {Object} set The set to convert.
		   * @returns {Array} Returns the value-value pairs.
		   */
		  function setToPairs(set) {
		    var index = -1,
		        result = Array(set.size);

		    set.forEach(function(value) {
		      result[++index] = [value, value];
		    });
		    return result;
		  }

		  /**
		   * A specialized version of `_.indexOf` which performs strict equality
		   * comparisons of values, i.e. `===`.
		   *
		   * @private
		   * @param {Array} array The array to inspect.
		   * @param {*} value The value to search for.
		   * @param {number} fromIndex The index to search from.
		   * @returns {number} Returns the index of the matched value, else `-1`.
		   */
		  function strictIndexOf(array, value, fromIndex) {
		    var index = fromIndex - 1,
		        length = array.length;

		    while (++index < length) {
		      if (array[index] === value) {
		        return index;
		      }
		    }
		    return -1;
		  }

		  /**
		   * A specialized version of `_.lastIndexOf` which performs strict equality
		   * comparisons of values, i.e. `===`.
		   *
		   * @private
		   * @param {Array} array The array to inspect.
		   * @param {*} value The value to search for.
		   * @param {number} fromIndex The index to search from.
		   * @returns {number} Returns the index of the matched value, else `-1`.
		   */
		  function strictLastIndexOf(array, value, fromIndex) {
		    var index = fromIndex + 1;
		    while (index--) {
		      if (array[index] === value) {
		        return index;
		      }
		    }
		    return index;
		  }

		  /**
		   * Gets the number of symbols in `string`.
		   *
		   * @private
		   * @param {string} string The string to inspect.
		   * @returns {number} Returns the string size.
		   */
		  function stringSize(string) {
		    return hasUnicode(string)
		      ? unicodeSize(string)
		      : asciiSize(string);
		  }

		  /**
		   * Converts `string` to an array.
		   *
		   * @private
		   * @param {string} string The string to convert.
		   * @returns {Array} Returns the converted array.
		   */
		  function stringToArray(string) {
		    return hasUnicode(string)
		      ? unicodeToArray(string)
		      : asciiToArray(string);
		  }

		  /**
		   * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace
		   * character of `string`.
		   *
		   * @private
		   * @param {string} string The string to inspect.
		   * @returns {number} Returns the index of the last non-whitespace character.
		   */
		  function trimmedEndIndex(string) {
		    var index = string.length;

		    while (index-- && reWhitespace.test(string.charAt(index))) {}
		    return index;
		  }

		  /**
		   * Used by `_.unescape` to convert HTML entities to characters.
		   *
		   * @private
		   * @param {string} chr The matched character to unescape.
		   * @returns {string} Returns the unescaped character.
		   */
		  var unescapeHtmlChar = basePropertyOf(htmlUnescapes);

		  /**
		   * Gets the size of a Unicode `string`.
		   *
		   * @private
		   * @param {string} string The string inspect.
		   * @returns {number} Returns the string size.
		   */
		  function unicodeSize(string) {
		    var result = reUnicode.lastIndex = 0;
		    while (reUnicode.test(string)) {
		      ++result;
		    }
		    return result;
		  }

		  /**
		   * Converts a Unicode `string` to an array.
		   *
		   * @private
		   * @param {string} string The string to convert.
		   * @returns {Array} Returns the converted array.
		   */
		  function unicodeToArray(string) {
		    return string.match(reUnicode) || [];
		  }

		  /**
		   * Splits a Unicode `string` into an array of its words.
		   *
		   * @private
		   * @param {string} The string to inspect.
		   * @returns {Array} Returns the words of `string`.
		   */
		  function unicodeWords(string) {
		    return string.match(reUnicodeWord) || [];
		  }

		  /*--------------------------------------------------------------------------*/

		  /**
		   * Create a new pristine `lodash` function using the `context` object.
		   *
		   * @static
		   * @memberOf _
		   * @since 1.1.0
		   * @category Util
		   * @param {Object} [context=root] The context object.
		   * @returns {Function} Returns a new `lodash` function.
		   * @example
		   *
		   * _.mixin({ 'foo': _.constant('foo') });
		   *
		   * var lodash = _.runInContext();
		   * lodash.mixin({ 'bar': lodash.constant('bar') });
		   *
		   * _.isFunction(_.foo);
		   * // => true
		   * _.isFunction(_.bar);
		   * // => false
		   *
		   * lodash.isFunction(lodash.foo);
		   * // => false
		   * lodash.isFunction(lodash.bar);
		   * // => true
		   *
		   * // Create a suped-up `defer` in Node.js.
		   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
		   */
		  var runInContext = (function runInContext(context) {
		    context = context == null ? root : _.defaults(root.Object(), context, _.pick(root, contextProps));

		    /** Built-in constructor references. */
		    var Array = context.Array,
		        Date = context.Date,
		        Error = context.Error,
		        Function = context.Function,
		        Math = context.Math,
		        Object = context.Object,
		        RegExp = context.RegExp,
		        String = context.String,
		        TypeError = context.TypeError;

		    /** Used for built-in method references. */
		    var arrayProto = Array.prototype,
		        funcProto = Function.prototype,
		        objectProto = Object.prototype;

		    /** Used to detect overreaching core-js shims. */
		    var coreJsData = context['__core-js_shared__'];

		    /** Used to resolve the decompiled source of functions. */
		    var funcToString = funcProto.toString;

		    /** Used to check objects for own properties. */
		    var hasOwnProperty = objectProto.hasOwnProperty;

		    /** Used to generate unique IDs. */
		    var idCounter = 0;

		    /** Used to detect methods masquerading as native. */
		    var maskSrcKey = (function() {
		      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
		      return uid ? ('Symbol(src)_1.' + uid) : '';
		    }());

		    /**
		     * Used to resolve the
		     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
		     * of values.
		     */
		    var nativeObjectToString = objectProto.toString;

		    /** Used to infer the `Object` constructor. */
		    var objectCtorString = funcToString.call(Object);

		    /** Used to restore the original `_` reference in `_.noConflict`. */
		    var oldDash = root._;

		    /** Used to detect if a method is native. */
		    var reIsNative = RegExp('^' +
		      funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
		      .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
		    );

		    /** Built-in value references. */
		    var Buffer = moduleExports ? context.Buffer : undefined$1,
		        Symbol = context.Symbol,
		        Uint8Array = context.Uint8Array,
		        allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined$1,
		        getPrototype = overArg(Object.getPrototypeOf, Object),
		        objectCreate = Object.create,
		        propertyIsEnumerable = objectProto.propertyIsEnumerable,
		        splice = arrayProto.splice,
		        spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined$1,
		        symIterator = Symbol ? Symbol.iterator : undefined$1,
		        symToStringTag = Symbol ? Symbol.toStringTag : undefined$1;

		    var defineProperty = (function() {
		      try {
		        var func = getNative(Object, 'defineProperty');
		        func({}, '', {});
		        return func;
		      } catch (e) {}
		    }());

		    /** Mocked built-ins. */
		    var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout,
		        ctxNow = Date && Date.now !== root.Date.now && Date.now,
		        ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;

		    /* Built-in method references for those with the same name as other `lodash` methods. */
		    var nativeCeil = Math.ceil,
		        nativeFloor = Math.floor,
		        nativeGetSymbols = Object.getOwnPropertySymbols,
		        nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined$1,
		        nativeIsFinite = context.isFinite,
		        nativeJoin = arrayProto.join,
		        nativeKeys = overArg(Object.keys, Object),
		        nativeMax = Math.max,
		        nativeMin = Math.min,
		        nativeNow = Date.now,
		        nativeParseInt = context.parseInt,
		        nativeRandom = Math.random,
		        nativeReverse = arrayProto.reverse;

		    /* Built-in method references that are verified to be native. */
		    var DataView = getNative(context, 'DataView'),
		        Map = getNative(context, 'Map'),
		        Promise = getNative(context, 'Promise'),
		        Set = getNative(context, 'Set'),
		        WeakMap = getNative(context, 'WeakMap'),
		        nativeCreate = getNative(Object, 'create');

		    /** Used to store function metadata. */
		    var metaMap = WeakMap && new WeakMap;

		    /** Used to lookup unminified function names. */
		    var realNames = {};

		    /** Used to detect maps, sets, and weakmaps. */
		    var dataViewCtorString = toSource(DataView),
		        mapCtorString = toSource(Map),
		        promiseCtorString = toSource(Promise),
		        setCtorString = toSource(Set),
		        weakMapCtorString = toSource(WeakMap);

		    /** Used to convert symbols to primitives and strings. */
		    var symbolProto = Symbol ? Symbol.prototype : undefined$1,
		        symbolValueOf = symbolProto ? symbolProto.valueOf : undefined$1,
		        symbolToString = symbolProto ? symbolProto.toString : undefined$1;

		    /*------------------------------------------------------------------------*/

		    /**
		     * Creates a `lodash` object which wraps `value` to enable implicit method
		     * chain sequences. Methods that operate on and return arrays, collections,
		     * and functions can be chained together. Methods that retrieve a single value
		     * or may return a primitive value will automatically end the chain sequence
		     * and return the unwrapped value. Otherwise, the value must be unwrapped
		     * with `_#value`.
		     *
		     * Explicit chain sequences, which must be unwrapped with `_#value`, may be
		     * enabled using `_.chain`.
		     *
		     * The execution of chained methods is lazy, that is, it's deferred until
		     * `_#value` is implicitly or explicitly called.
		     *
		     * Lazy evaluation allows several methods to support shortcut fusion.
		     * Shortcut fusion is an optimization to merge iteratee calls; this avoids
		     * the creation of intermediate arrays and can greatly reduce the number of
		     * iteratee executions. Sections of a chain sequence qualify for shortcut
		     * fusion if the section is applied to an array and iteratees accept only
		     * one argument. The heuristic for whether a section qualifies for shortcut
		     * fusion is subject to change.
		     *
		     * Chaining is supported in custom builds as long as the `_#value` method is
		     * directly or indirectly included in the build.
		     *
		     * In addition to lodash methods, wrappers have `Array` and `String` methods.
		     *
		     * The wrapper `Array` methods are:
		     * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
		     *
		     * The wrapper `String` methods are:
		     * `replace` and `split`
		     *
		     * The wrapper methods that support shortcut fusion are:
		     * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
		     * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
		     * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
		     *
		     * The chainable wrapper methods are:
		     * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
		     * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
		     * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
		     * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
		     * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
		     * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
		     * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,
		     * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,
		     * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,
		     * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,
		     * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,
		     * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,
		     * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,
		     * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,
		     * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,
		     * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,
		     * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,
		     * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,
		     * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,
		     * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,
		     * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,
		     * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,
		     * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,
		     * `zipObject`, `zipObjectDeep`, and `zipWith`
		     *
		     * The wrapper methods that are **not** chainable by default are:
		     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
		     * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,
		     * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,
		     * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,
		     * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,
		     * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,
		     * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,
		     * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,
		     * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,
		     * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,
		     * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,
		     * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,
		     * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,
		     * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,
		     * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,
		     * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,
		     * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,
		     * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,
		     * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,
		     * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,
		     * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,
		     * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,
		     * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,
		     * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,
		     * `upperFirst`, `value`, and `words`
		     *
		     * @name _
		     * @constructor
		     * @category Seq
		     * @param {*} value The value to wrap in a `lodash` instance.
		     * @returns {Object} Returns the new `lodash` wrapper instance.
		     * @example
		     *
		     * function square(n) {
		     *   return n * n;
		     * }
		     *
		     * var wrapped = _([1, 2, 3]);
		     *
		     * // Returns an unwrapped value.
		     * wrapped.reduce(_.add);
		     * // => 6
		     *
		     * // Returns a wrapped value.
		     * var squares = wrapped.map(square);
		     *
		     * _.isArray(squares);
		     * // => false
		     *
		     * _.isArray(squares.value());
		     * // => true
		     */
		    function lodash(value) {
		      if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
		        if (value instanceof LodashWrapper) {
		          return value;
		        }
		        if (hasOwnProperty.call(value, '__wrapped__')) {
		          return wrapperClone(value);
		        }
		      }
		      return new LodashWrapper(value);
		    }

		    /**
		     * The base implementation of `_.create` without support for assigning
		     * properties to the created object.
		     *
		     * @private
		     * @param {Object} proto The object to inherit from.
		     * @returns {Object} Returns the new object.
		     */
		    var baseCreate = (function() {
		      function object() {}
		      return function(proto) {
		        if (!isObject(proto)) {
		          return {};
		        }
		        if (objectCreate) {
		          return objectCreate(proto);
		        }
		        object.prototype = proto;
		        var result = new object;
		        object.prototype = undefined$1;
		        return result;
		      };
		    }());

		    /**
		     * The function whose prototype chain sequence wrappers inherit from.
		     *
		     * @private
		     */
		    function baseLodash() {
		      // No operation performed.
		    }

		    /**
		     * The base constructor for creating `lodash` wrapper objects.
		     *
		     * @private
		     * @param {*} value The value to wrap.
		     * @param {boolean} [chainAll] Enable explicit method chain sequences.
		     */
		    function LodashWrapper(value, chainAll) {
		      this.__wrapped__ = value;
		      this.__actions__ = [];
		      this.__chain__ = !!chainAll;
		      this.__index__ = 0;
		      this.__values__ = undefined$1;
		    }

		    /**
		     * By default, the template delimiters used by lodash are like those in
		     * embedded Ruby (ERB) as well as ES2015 template strings. Change the
		     * following template settings to use alternative delimiters.
		     *
		     * @static
		     * @memberOf _
		     * @type {Object}
		     */
		    lodash.templateSettings = {

		      /**
		       * Used to detect `data` property values to be HTML-escaped.
		       *
		       * @memberOf _.templateSettings
		       * @type {RegExp}
		       */
		      'escape': reEscape,

		      /**
		       * Used to detect code to be evaluated.
		       *
		       * @memberOf _.templateSettings
		       * @type {RegExp}
		       */
		      'evaluate': reEvaluate,

		      /**
		       * Used to detect `data` property values to inject.
		       *
		       * @memberOf _.templateSettings
		       * @type {RegExp}
		       */
		      'interpolate': reInterpolate,

		      /**
		       * Used to reference the data object in the template text.
		       *
		       * @memberOf _.templateSettings
		       * @type {string}
		       */
		      'variable': '',

		      /**
		       * Used to import variables into the compiled template.
		       *
		       * @memberOf _.templateSettings
		       * @type {Object}
		       */
		      'imports': {

		        /**
		         * A reference to the `lodash` function.
		         *
		         * @memberOf _.templateSettings.imports
		         * @type {Function}
		         */
		        '_': lodash
		      }
		    };

		    // Ensure wrappers are instances of `baseLodash`.
		    lodash.prototype = baseLodash.prototype;
		    lodash.prototype.constructor = lodash;

		    LodashWrapper.prototype = baseCreate(baseLodash.prototype);
		    LodashWrapper.prototype.constructor = LodashWrapper;

		    /*------------------------------------------------------------------------*/

		    /**
		     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
		     *
		     * @private
		     * @constructor
		     * @param {*} value The value to wrap.
		     */
		    function LazyWrapper(value) {
		      this.__wrapped__ = value;
		      this.__actions__ = [];
		      this.__dir__ = 1;
		      this.__filtered__ = false;
		      this.__iteratees__ = [];
		      this.__takeCount__ = MAX_ARRAY_LENGTH;
		      this.__views__ = [];
		    }

		    /**
		     * Creates a clone of the lazy wrapper object.
		     *
		     * @private
		     * @name clone
		     * @memberOf LazyWrapper
		     * @returns {Object} Returns the cloned `LazyWrapper` object.
		     */
		    function lazyClone() {
		      var result = new LazyWrapper(this.__wrapped__);
		      result.__actions__ = copyArray(this.__actions__);
		      result.__dir__ = this.__dir__;
		      result.__filtered__ = this.__filtered__;
		      result.__iteratees__ = copyArray(this.__iteratees__);
		      result.__takeCount__ = this.__takeCount__;
		      result.__views__ = copyArray(this.__views__);
		      return result;
		    }

		    /**
		     * Reverses the direction of lazy iteration.
		     *
		     * @private
		     * @name reverse
		     * @memberOf LazyWrapper
		     * @returns {Object} Returns the new reversed `LazyWrapper` object.
		     */
		    function lazyReverse() {
		      if (this.__filtered__) {
		        var result = new LazyWrapper(this);
		        result.__dir__ = -1;
		        result.__filtered__ = true;
		      } else {
		        result = this.clone();
		        result.__dir__ *= -1;
		      }
		      return result;
		    }

		    /**
		     * Extracts the unwrapped value from its lazy wrapper.
		     *
		     * @private
		     * @name value
		     * @memberOf LazyWrapper
		     * @returns {*} Returns the unwrapped value.
		     */
		    function lazyValue() {
		      var array = this.__wrapped__.value(),
		          dir = this.__dir__,
		          isArr = isArray(array),
		          isRight = dir < 0,
		          arrLength = isArr ? array.length : 0,
		          view = getView(0, arrLength, this.__views__),
		          start = view.start,
		          end = view.end,
		          length = end - start,
		          index = isRight ? end : (start - 1),
		          iteratees = this.__iteratees__,
		          iterLength = iteratees.length,
		          resIndex = 0,
		          takeCount = nativeMin(length, this.__takeCount__);

		      if (!isArr || (!isRight && arrLength == length && takeCount == length)) {
		        return baseWrapperValue(array, this.__actions__);
		      }
		      var result = [];

		      outer:
		      while (length-- && resIndex < takeCount) {
		        index += dir;

		        var iterIndex = -1,
		            value = array[index];

		        while (++iterIndex < iterLength) {
		          var data = iteratees[iterIndex],
		              iteratee = data.iteratee,
		              type = data.type,
		              computed = iteratee(value);

		          if (type == LAZY_MAP_FLAG) {
		            value = computed;
		          } else if (!computed) {
		            if (type == LAZY_FILTER_FLAG) {
		              continue outer;
		            } else {
		              break outer;
		            }
		          }
		        }
		        result[resIndex++] = value;
		      }
		      return result;
		    }

		    // Ensure `LazyWrapper` is an instance of `baseLodash`.
		    LazyWrapper.prototype = baseCreate(baseLodash.prototype);
		    LazyWrapper.prototype.constructor = LazyWrapper;

		    /*------------------------------------------------------------------------*/

		    /**
		     * Creates a hash object.
		     *
		     * @private
		     * @constructor
		     * @param {Array} [entries] The key-value pairs to cache.
		     */
		    function Hash(entries) {
		      var index = -1,
		          length = entries == null ? 0 : entries.length;

		      this.clear();
		      while (++index < length) {
		        var entry = entries[index];
		        this.set(entry[0], entry[1]);
		      }
		    }

		    /**
		     * Removes all key-value entries from the hash.
		     *
		     * @private
		     * @name clear
		     * @memberOf Hash
		     */
		    function hashClear() {
		      this.__data__ = nativeCreate ? nativeCreate(null) : {};
		      this.size = 0;
		    }

		    /**
		     * Removes `key` and its value from the hash.
		     *
		     * @private
		     * @name delete
		     * @memberOf Hash
		     * @param {Object} hash The hash to modify.
		     * @param {string} key The key of the value to remove.
		     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
		     */
		    function hashDelete(key) {
		      var result = this.has(key) && delete this.__data__[key];
		      this.size -= result ? 1 : 0;
		      return result;
		    }

		    /**
		     * Gets the hash value for `key`.
		     *
		     * @private
		     * @name get
		     * @memberOf Hash
		     * @param {string} key The key of the value to get.
		     * @returns {*} Returns the entry value.
		     */
		    function hashGet(key) {
		      var data = this.__data__;
		      if (nativeCreate) {
		        var result = data[key];
		        return result === HASH_UNDEFINED ? undefined$1 : result;
		      }
		      return hasOwnProperty.call(data, key) ? data[key] : undefined$1;
		    }

		    /**
		     * Checks if a hash value for `key` exists.
		     *
		     * @private
		     * @name has
		     * @memberOf Hash
		     * @param {string} key The key of the entry to check.
		     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
		     */
		    function hashHas(key) {
		      var data = this.__data__;
		      return nativeCreate ? (data[key] !== undefined$1) : hasOwnProperty.call(data, key);
		    }

		    /**
		     * Sets the hash `key` to `value`.
		     *
		     * @private
		     * @name set
		     * @memberOf Hash
		     * @param {string} key The key of the value to set.
		     * @param {*} value The value to set.
		     * @returns {Object} Returns the hash instance.
		     */
		    function hashSet(key, value) {
		      var data = this.__data__;
		      this.size += this.has(key) ? 0 : 1;
		      data[key] = (nativeCreate && value === undefined$1) ? HASH_UNDEFINED : value;
		      return this;
		    }

		    // Add methods to `Hash`.
		    Hash.prototype.clear = hashClear;
		    Hash.prototype['delete'] = hashDelete;
		    Hash.prototype.get = hashGet;
		    Hash.prototype.has = hashHas;
		    Hash.prototype.set = hashSet;

		    /*------------------------------------------------------------------------*/

		    /**
		     * Creates an list cache object.
		     *
		     * @private
		     * @constructor
		     * @param {Array} [entries] The key-value pairs to cache.
		     */
		    function ListCache(entries) {
		      var index = -1,
		          length = entries == null ? 0 : entries.length;

		      this.clear();
		      while (++index < length) {
		        var entry = entries[index];
		        this.set(entry[0], entry[1]);
		      }
		    }

		    /**
		     * Removes all key-value entries from the list cache.
		     *
		     * @private
		     * @name clear
		     * @memberOf ListCache
		     */
		    function listCacheClear() {
		      this.__data__ = [];
		      this.size = 0;
		    }

		    /**
		     * Removes `key` and its value from the list cache.
		     *
		     * @private
		     * @name delete
		     * @memberOf ListCache
		     * @param {string} key The key of the value to remove.
		     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
		     */
		    function listCacheDelete(key) {
		      var data = this.__data__,
		          index = assocIndexOf(data, key);

		      if (index < 0) {
		        return false;
		      }
		      var lastIndex = data.length - 1;
		      if (index == lastIndex) {
		        data.pop();
		      } else {
		        splice.call(data, index, 1);
		      }
		      --this.size;
		      return true;
		    }

		    /**
		     * Gets the list cache value for `key`.
		     *
		     * @private
		     * @name get
		     * @memberOf ListCache
		     * @param {string} key The key of the value to get.
		     * @returns {*} Returns the entry value.
		     */
		    function listCacheGet(key) {
		      var data = this.__data__,
		          index = assocIndexOf(data, key);

		      return index < 0 ? undefined$1 : data[index][1];
		    }

		    /**
		     * Checks if a list cache value for `key` exists.
		     *
		     * @private
		     * @name has
		     * @memberOf ListCache
		     * @param {string} key The key of the entry to check.
		     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
		     */
		    function listCacheHas(key) {
		      return assocIndexOf(this.__data__, key) > -1;
		    }

		    /**
		     * Sets the list cache `key` to `value`.
		     *
		     * @private
		     * @name set
		     * @memberOf ListCache
		     * @param {string} key The key of the value to set.
		     * @param {*} value The value to set.
		     * @returns {Object} Returns the list cache instance.
		     */
		    function listCacheSet(key, value) {
		      var data = this.__data__,
		          index = assocIndexOf(data, key);

		      if (index < 0) {
		        ++this.size;
		        data.push([key, value]);
		      } else {
		        data[index][1] = value;
		      }
		      return this;
		    }

		    // Add methods to `ListCache`.
		    ListCache.prototype.clear = listCacheClear;
		    ListCache.prototype['delete'] = listCacheDelete;
		    ListCache.prototype.get = listCacheGet;
		    ListCache.prototype.has = listCacheHas;
		    ListCache.prototype.set = listCacheSet;

		    /*------------------------------------------------------------------------*/

		    /**
		     * Creates a map cache object to store key-value pairs.
		     *
		     * @private
		     * @constructor
		     * @param {Array} [entries] The key-value pairs to cache.
		     */
		    function MapCache(entries) {
		      var index = -1,
		          length = entries == null ? 0 : entries.length;

		      this.clear();
		      while (++index < length) {
		        var entry = entries[index];
		        this.set(entry[0], entry[1]);
		      }
		    }

		    /**
		     * Removes all key-value entries from the map.
		     *
		     * @private
		     * @name clear
		     * @memberOf MapCache
		     */
		    function mapCacheClear() {
		      this.size = 0;
		      this.__data__ = {
		        'hash': new Hash,
		        'map': new (Map || ListCache),
		        'string': new Hash
		      };
		    }

		    /**
		     * Removes `key` and its value from the map.
		     *
		     * @private
		     * @name delete
		     * @memberOf MapCache
		     * @param {string} key The key of the value to remove.
		     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
		     */
		    function mapCacheDelete(key) {
		      var result = getMapData(this, key)['delete'](key);
		      this.size -= result ? 1 : 0;
		      return result;
		    }

		    /**
		     * Gets the map value for `key`.
		     *
		     * @private
		     * @name get
		     * @memberOf MapCache
		     * @param {string} key The key of the value to get.
		     * @returns {*} Returns the entry value.
		     */
		    function mapCacheGet(key) {
		      return getMapData(this, key).get(key);
		    }

		    /**
		     * Checks if a map value for `key` exists.
		     *
		     * @private
		     * @name has
		     * @memberOf MapCache
		     * @param {string} key The key of the entry to check.
		     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
		     */
		    function mapCacheHas(key) {
		      return getMapData(this, key).has(key);
		    }

		    /**
		     * Sets the map `key` to `value`.
		     *
		     * @private
		     * @name set
		     * @memberOf MapCache
		     * @param {string} key The key of the value to set.
		     * @param {*} value The value to set.
		     * @returns {Object} Returns the map cache instance.
		     */
		    function mapCacheSet(key, value) {
		      var data = getMapData(this, key),
		          size = data.size;

		      data.set(key, value);
		      this.size += data.size == size ? 0 : 1;
		      return this;
		    }

		    // Add methods to `MapCache`.
		    MapCache.prototype.clear = mapCacheClear;
		    MapCache.prototype['delete'] = mapCacheDelete;
		    MapCache.prototype.get = mapCacheGet;
		    MapCache.prototype.has = mapCacheHas;
		    MapCache.prototype.set = mapCacheSet;

		    /*------------------------------------------------------------------------*/

		    /**
		     *
		     * Creates an array cache object to store unique values.
		     *
		     * @private
		     * @constructor
		     * @param {Array} [values] The values to cache.
		     */
		    function SetCache(values) {
		      var index = -1,
		          length = values == null ? 0 : values.length;

		      this.__data__ = new MapCache;
		      while (++index < length) {
		        this.add(values[index]);
		      }
		    }

		    /**
		     * Adds `value` to the array cache.
		     *
		     * @private
		     * @name add
		     * @memberOf SetCache
		     * @alias push
		     * @param {*} value The value to cache.
		     * @returns {Object} Returns the cache instance.
		     */
		    function setCacheAdd(value) {
		      this.__data__.set(value, HASH_UNDEFINED);
		      return this;
		    }

		    /**
		     * Checks if `value` is in the array cache.
		     *
		     * @private
		     * @name has
		     * @memberOf SetCache
		     * @param {*} value The value to search for.
		     * @returns {number} Returns `true` if `value` is found, else `false`.
		     */
		    function setCacheHas(value) {
		      return this.__data__.has(value);
		    }

		    // Add methods to `SetCache`.
		    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
		    SetCache.prototype.has = setCacheHas;

		    /*------------------------------------------------------------------------*/

		    /**
		     * Creates a stack cache object to store key-value pairs.
		     *
		     * @private
		     * @constructor
		     * @param {Array} [entries] The key-value pairs to cache.
		     */
		    function Stack(entries) {
		      var data = this.__data__ = new ListCache(entries);
		      this.size = data.size;
		    }

		    /**
		     * Removes all key-value entries from the stack.
		     *
		     * @private
		     * @name clear
		     * @memberOf Stack
		     */
		    function stackClear() {
		      this.__data__ = new ListCache;
		      this.size = 0;
		    }

		    /**
		     * Removes `key` and its value from the stack.
		     *
		     * @private
		     * @name delete
		     * @memberOf Stack
		     * @param {string} key The key of the value to remove.
		     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
		     */
		    function stackDelete(key) {
		      var data = this.__data__,
		          result = data['delete'](key);

		      this.size = data.size;
		      return result;
		    }

		    /**
		     * Gets the stack value for `key`.
		     *
		     * @private
		     * @name get
		     * @memberOf Stack
		     * @param {string} key The key of the value to get.
		     * @returns {*} Returns the entry value.
		     */
		    function stackGet(key) {
		      return this.__data__.get(key);
		    }

		    /**
		     * Checks if a stack value for `key` exists.
		     *
		     * @private
		     * @name has
		     * @memberOf Stack
		     * @param {string} key The key of the entry to check.
		     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
		     */
		    function stackHas(key) {
		      return this.__data__.has(key);
		    }

		    /**
		     * Sets the stack `key` to `value`.
		     *
		     * @private
		     * @name set
		     * @memberOf Stack
		     * @param {string} key The key of the value to set.
		     * @param {*} value The value to set.
		     * @returns {Object} Returns the stack cache instance.
		     */
		    function stackSet(key, value) {
		      var data = this.__data__;
		      if (data instanceof ListCache) {
		        var pairs = data.__data__;
		        if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
		          pairs.push([key, value]);
		          this.size = ++data.size;
		          return this;
		        }
		        data = this.__data__ = new MapCache(pairs);
		      }
		      data.set(key, value);
		      this.size = data.size;
		      return this;
		    }

		    // Add methods to `Stack`.
		    Stack.prototype.clear = stackClear;
		    Stack.prototype['delete'] = stackDelete;
		    Stack.prototype.get = stackGet;
		    Stack.prototype.has = stackHas;
		    Stack.prototype.set = stackSet;

		    /*------------------------------------------------------------------------*/

		    /**
		     * Creates an array of the enumerable property names of the array-like `value`.
		     *
		     * @private
		     * @param {*} value The value to query.
		     * @param {boolean} inherited Specify returning inherited property names.
		     * @returns {Array} Returns the array of property names.
		     */
		    function arrayLikeKeys(value, inherited) {
		      var isArr = isArray(value),
		          isArg = !isArr && isArguments(value),
		          isBuff = !isArr && !isArg && isBuffer(value),
		          isType = !isArr && !isArg && !isBuff && isTypedArray(value),
		          skipIndexes = isArr || isArg || isBuff || isType,
		          result = skipIndexes ? baseTimes(value.length, String) : [],
		          length = result.length;

		      for (var key in value) {
		        if ((inherited || hasOwnProperty.call(value, key)) &&
		            !(skipIndexes && (
		               // Safari 9 has enumerable `arguments.length` in strict mode.
		               key == 'length' ||
		               // Node.js 0.10 has enumerable non-index properties on buffers.
		               (isBuff && (key == 'offset' || key == 'parent')) ||
		               // PhantomJS 2 has enumerable non-index properties on typed arrays.
		               (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
		               // Skip index properties.
		               isIndex(key, length)
		            ))) {
		          result.push(key);
		        }
		      }
		      return result;
		    }

		    /**
		     * A specialized version of `_.sample` for arrays.
		     *
		     * @private
		     * @param {Array} array The array to sample.
		     * @returns {*} Returns the random element.
		     */
		    function arraySample(array) {
		      var length = array.length;
		      return length ? array[baseRandom(0, length - 1)] : undefined$1;
		    }

		    /**
		     * A specialized version of `_.sampleSize` for arrays.
		     *
		     * @private
		     * @param {Array} array The array to sample.
		     * @param {number} n The number of elements to sample.
		     * @returns {Array} Returns the random elements.
		     */
		    function arraySampleSize(array, n) {
		      return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));
		    }

		    /**
		     * A specialized version of `_.shuffle` for arrays.
		     *
		     * @private
		     * @param {Array} array The array to shuffle.
		     * @returns {Array} Returns the new shuffled array.
		     */
		    function arrayShuffle(array) {
		      return shuffleSelf(copyArray(array));
		    }

		    /**
		     * This function is like `assignValue` except that it doesn't assign
		     * `undefined` values.
		     *
		     * @private
		     * @param {Object} object The object to modify.
		     * @param {string} key The key of the property to assign.
		     * @param {*} value The value to assign.
		     */
		    function assignMergeValue(object, key, value) {
		      if ((value !== undefined$1 && !eq(object[key], value)) ||
		          (value === undefined$1 && !(key in object))) {
		        baseAssignValue(object, key, value);
		      }
		    }

		    /**
		     * Assigns `value` to `key` of `object` if the existing value is not equivalent
		     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
		     * for equality comparisons.
		     *
		     * @private
		     * @param {Object} object The object to modify.
		     * @param {string} key The key of the property to assign.
		     * @param {*} value The value to assign.
		     */
		    function assignValue(object, key, value) {
		      var objValue = object[key];
		      if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
		          (value === undefined$1 && !(key in object))) {
		        baseAssignValue(object, key, value);
		      }
		    }

		    /**
		     * Gets the index at which the `key` is found in `array` of key-value pairs.
		     *
		     * @private
		     * @param {Array} array The array to inspect.
		     * @param {*} key The key to search for.
		     * @returns {number} Returns the index of the matched value, else `-1`.
		     */
		    function assocIndexOf(array, key) {
		      var length = array.length;
		      while (length--) {
		        if (eq(array[length][0], key)) {
		          return length;
		        }
		      }
		      return -1;
		    }

		    /**
		     * Aggregates elements of `collection` on `accumulator` with keys transformed
		     * by `iteratee` and values set by `setter`.
		     *
		     * @private
		     * @param {Array|Object} collection The collection to iterate over.
		     * @param {Function} setter The function to set `accumulator` values.
		     * @param {Function} iteratee The iteratee to transform keys.
		     * @param {Object} accumulator The initial aggregated object.
		     * @returns {Function} Returns `accumulator`.
		     */
		    function baseAggregator(collection, setter, iteratee, accumulator) {
		      baseEach(collection, function(value, key, collection) {
		        setter(accumulator, value, iteratee(value), collection);
		      });
		      return accumulator;
		    }

		    /**
		     * The base implementation of `_.assign` without support for multiple sources
		     * or `customizer` functions.
		     *
		     * @private
		     * @param {Object} object The destination object.
		     * @param {Object} source The source object.
		     * @returns {Object} Returns `object`.
		     */
		    function baseAssign(object, source) {
		      return object && copyObject(source, keys(source), object);
		    }

		    /**
		     * The base implementation of `_.assignIn` without support for multiple sources
		     * or `customizer` functions.
		     *
		     * @private
		     * @param {Object} object The destination object.
		     * @param {Object} source The source object.
		     * @returns {Object} Returns `object`.
		     */
		    function baseAssignIn(object, source) {
		      return object && copyObject(source, keysIn(source), object);
		    }

		    /**
		     * The base implementation of `assignValue` and `assignMergeValue` without
		     * value checks.
		     *
		     * @private
		     * @param {Object} object The object to modify.
		     * @param {string} key The key of the property to assign.
		     * @param {*} value The value to assign.
		     */
		    function baseAssignValue(object, key, value) {
		      if (key == '__proto__' && defineProperty) {
		        defineProperty(object, key, {
		          'configurable': true,
		          'enumerable': true,
		          'value': value,
		          'writable': true
		        });
		      } else {
		        object[key] = value;
		      }
		    }

		    /**
		     * The base implementation of `_.at` without support for individual paths.
		     *
		     * @private
		     * @param {Object} object The object to iterate over.
		     * @param {string[]} paths The property paths to pick.
		     * @returns {Array} Returns the picked elements.
		     */
		    function baseAt(object, paths) {
		      var index = -1,
		          length = paths.length,
		          result = Array(length),
		          skip = object == null;

		      while (++index < length) {
		        result[index] = skip ? undefined$1 : get(object, paths[index]);
		      }
		      return result;
		    }

		    /**
		     * The base implementation of `_.clamp` which doesn't coerce arguments.
		     *
		     * @private
		     * @param {number} number The number to clamp.
		     * @param {number} [lower] The lower bound.
		     * @param {number} upper The upper bound.
		     * @returns {number} Returns the clamped number.
		     */
		    function baseClamp(number, lower, upper) {
		      if (number === number) {
		        if (upper !== undefined$1) {
		          number = number <= upper ? number : upper;
		        }
		        if (lower !== undefined$1) {
		          number = number >= lower ? number : lower;
		        }
		      }
		      return number;
		    }

		    /**
		     * The base implementation of `_.clone` and `_.cloneDeep` which tracks
		     * traversed objects.
		     *
		     * @private
		     * @param {*} value The value to clone.
		     * @param {boolean} bitmask The bitmask flags.
		     *  1 - Deep clone
		     *  2 - Flatten inherited properties
		     *  4 - Clone symbols
		     * @param {Function} [customizer] The function to customize cloning.
		     * @param {string} [key] The key of `value`.
		     * @param {Object} [object] The parent object of `value`.
		     * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
		     * @returns {*} Returns the cloned value.
		     */
		    function baseClone(value, bitmask, customizer, key, object, stack) {
		      var result,
		          isDeep = bitmask & CLONE_DEEP_FLAG,
		          isFlat = bitmask & CLONE_FLAT_FLAG,
		          isFull = bitmask & CLONE_SYMBOLS_FLAG;

		      if (customizer) {
		        result = object ? customizer(value, key, object, stack) : customizer(value);
		      }
		      if (result !== undefined$1) {
		        return result;
		      }
		      if (!isObject(value)) {
		        return value;
		      }
		      var isArr = isArray(value);
		      if (isArr) {
		        result = initCloneArray(value);
		        if (!isDeep) {
		          return copyArray(value, result);
		        }
		      } else {
		        var tag = getTag(value),
		            isFunc = tag == funcTag || tag == genTag;

		        if (isBuffer(value)) {
		          return cloneBuffer(value, isDeep);
		        }
		        if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
		          result = (isFlat || isFunc) ? {} : initCloneObject(value);
		          if (!isDeep) {
		            return isFlat
		              ? copySymbolsIn(value, baseAssignIn(result, value))
		              : copySymbols(value, baseAssign(result, value));
		          }
		        } else {
		          if (!cloneableTags[tag]) {
		            return object ? value : {};
		          }
		          result = initCloneByTag(value, tag, isDeep);
		        }
		      }
		      // Check for circular references and return its corresponding clone.
		      stack || (stack = new Stack);
		      var stacked = stack.get(value);
		      if (stacked) {
		        return stacked;
		      }
		      stack.set(value, result);

		      if (isSet(value)) {
		        value.forEach(function(subValue) {
		          result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
		        });
		      } else if (isMap(value)) {
		        value.forEach(function(subValue, key) {
		          result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));
		        });
		      }

		      var keysFunc = isFull
		        ? (isFlat ? getAllKeysIn : getAllKeys)
		        : (isFlat ? keysIn : keys);

		      var props = isArr ? undefined$1 : keysFunc(value);
		      arrayEach(props || value, function(subValue, key) {
		        if (props) {
		          key = subValue;
		          subValue = value[key];
		        }
		        // Recursively populate clone (susceptible to call stack limits).
		        assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
		      });
		      return result;
		    }

		    /**
		     * The base implementation of `_.conforms` which doesn't clone `source`.
		     *
		     * @private
		     * @param {Object} source The object of property predicates to conform to.
		     * @returns {Function} Returns the new spec function.
		     */
		    function baseConforms(source) {
		      var props = keys(source);
		      return function(object) {
		        return baseConformsTo(object, source, props);
		      };
		    }

		    /**
		     * The base implementation of `_.conformsTo` which accepts `props` to check.
		     *
		     * @private
		     * @param {Object} object The object to inspect.
		     * @param {Object} source The object of property predicates to conform to.
		     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
		     */
		    function baseConformsTo(object, source, props) {
		      var length = props.length;
		      if (object == null) {
		        return !length;
		      }
		      object = Object(object);
		      while (length--) {
		        var key = props[length],
		            predicate = source[key],
		            value = object[key];

		        if ((value === undefined$1 && !(key in object)) || !predicate(value)) {
		          return false;
		        }
		      }
		      return true;
		    }

		    /**
		     * The base implementation of `_.delay` and `_.defer` which accepts `args`
		     * to provide to `func`.
		     *
		     * @private
		     * @param {Function} func The function to delay.
		     * @param {number} wait The number of milliseconds to delay invocation.
		     * @param {Array} args The arguments to provide to `func`.
		     * @returns {number|Object} Returns the timer id or timeout object.
		     */
		    function baseDelay(func, wait, args) {
		      if (typeof func != 'function') {
		        throw new TypeError(FUNC_ERROR_TEXT);
		      }
		      return setTimeout(function() { func.apply(undefined$1, args); }, wait);
		    }

		    /**
		     * The base implementation of methods like `_.difference` without support
		     * for excluding multiple arrays or iteratee shorthands.
		     *
		     * @private
		     * @param {Array} array The array to inspect.
		     * @param {Array} values The values to exclude.
		     * @param {Function} [iteratee] The iteratee invoked per element.
		     * @param {Function} [comparator] The comparator invoked per element.
		     * @returns {Array} Returns the new array of filtered values.
		     */
		    function baseDifference(array, values, iteratee, comparator) {
		      var index = -1,
		          includes = arrayIncludes,
		          isCommon = true,
		          length = array.length,
		          result = [],
		          valuesLength = values.length;

		      if (!length) {
		        return result;
		      }
		      if (iteratee) {
		        values = arrayMap(values, baseUnary(iteratee));
		      }
		      if (comparator) {
		        includes = arrayIncludesWith;
		        isCommon = false;
		      }
		      else if (values.length >= LARGE_ARRAY_SIZE) {
		        includes = cacheHas;
		        isCommon = false;
		        values = new SetCache(values);
		      }
		      outer:
		      while (++index < length) {
		        var value = array[index],
		            computed = iteratee == null ? value : iteratee(value);

		        value = (comparator || value !== 0) ? value : 0;
		        if (isCommon && computed === computed) {
		          var valuesIndex = valuesLength;
		          while (valuesIndex--) {
		            if (values[valuesIndex] === computed) {
		              continue outer;
		            }
		          }
		          result.push(value);
		        }
		        else if (!includes(values, computed, comparator)) {
		          result.push(value);
		        }
		      }
		      return result;
		    }

		    /**
		     * The base implementation of `_.forEach` without support for iteratee shorthands.
		     *
		     * @private
		     * @param {Array|Object} collection The collection to iterate over.
		     * @param {Function} iteratee The function invoked per iteration.
		     * @returns {Array|Object} Returns `collection`.
		     */
		    var baseEach = createBaseEach(baseForOwn);

		    /**
		     * The base implementation of `_.forEachRight` without support for iteratee shorthands.
		     *
		     * @private
		     * @param {Array|Object} collection The collection to iterate over.
		     * @param {Function} iteratee The function invoked per iteration.
		     * @returns {Array|Object} Returns `collection`.
		     */
		    var baseEachRight = createBaseEach(baseForOwnRight, true);

		    /**
		     * The base implementation of `_.every` without support for iteratee shorthands.
		     *
		     * @private
		     * @param {Array|Object} collection The collection to iterate over.
		     * @param {Function} predicate The function invoked per iteration.
		     * @returns {boolean} Returns `true` if all elements pass the predicate check,
		     *  else `false`
		     */
		    function baseEvery(collection, predicate) {
		      var result = true;
		      baseEach(collection, function(value, index, collection) {
		        result = !!predicate(value, index, collection);
		        return result;
		      });
		      return result;
		    }

		    /**
		     * The base implementation of methods like `_.max` and `_.min` which accepts a
		     * `comparator` to determine the extremum value.
		     *
		     * @private
		     * @param {Array} array The array to iterate over.
		     * @param {Function} iteratee The iteratee invoked per iteration.
		     * @param {Function} comparator The comparator used to compare values.
		     * @returns {*} Returns the extremum value.
		     */
		    function baseExtremum(array, iteratee, comparator) {
		      var index = -1,
		          length = array.length;

		      while (++index < length) {
		        var value = array[index],
		            current = iteratee(value);

		        if (current != null && (computed === undefined$1
		              ? (current === current && !isSymbol(current))
		              : comparator(current, computed)
		            )) {
		          var computed = current,
		              result = value;
		        }
		      }
		      return result;
		    }

		    /**
		     * The base implementation of `_.fill` without an iteratee call guard.
		     *
		     * @private
		     * @param {Array} array The array to fill.
		     * @param {*} value The value to fill `array` with.
		     * @param {number} [start=0] The start position.
		     * @param {number} [end=array.length] The end position.
		     * @returns {Array} Returns `array`.
		     */
		    function baseFill(array, value, start, end) {
		      var length = array.length;

		      start = toInteger(start);
		      if (start < 0) {
		        start = -start > length ? 0 : (length + start);
		      }
		      end = (end === undefined$1 || end > length) ? length : toInteger(end);
		      if (end < 0) {
		        end += length;
		      }
		      end = start > end ? 0 : toLength(end);
		      while (start < end) {
		        array[start++] = value;
		      }
		      return array;
		    }

		    /**
		     * The base implementation of `_.filter` without support for iteratee shorthands.
		     *
		     * @private
		     * @param {Array|Object} collection The collection to iterate over.
		     * @param {Function} predicate The function invoked per iteration.
		     * @returns {Array} Returns the new filtered array.
		     */
		    function baseFilter(collection, predicate) {
		      var result = [];
		      baseEach(collection, function(value, index, collection) {
		        if (predicate(value, index, collection)) {
		          result.push(value);
		        }
		      });
		      return result;
		    }

		    /**
		     * The base implementation of `_.flatten` with support for restricting flattening.
		     *
		     * @private
		     * @param {Array} array The array to flatten.
		     * @param {number} depth The maximum recursion depth.
		     * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
		     * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
		     * @param {Array} [result=[]] The initial result value.
		     * @returns {Array} Returns the new flattened array.
		     */
		    function baseFlatten(array, depth, predicate, isStrict, result) {
		      var index = -1,
		          length = array.length;

		      predicate || (predicate = isFlattenable);
		      result || (result = []);

		      while (++index < length) {
		        var value = array[index];
		        if (depth > 0 && predicate(value)) {
		          if (depth > 1) {
		            // Recursively flatten arrays (susceptible to call stack limits).
		            baseFlatten(value, depth - 1, predicate, isStrict, result);
		          } else {
		            arrayPush(result, value);
		          }
		        } else if (!isStrict) {
		          result[result.length] = value;
		        }
		      }
		      return result;
		    }

		    /**
		     * The base implementation of `baseForOwn` which iterates over `object`
		     * properties returned by `keysFunc` and invokes `iteratee` for each property.
		     * Iteratee functions may exit iteration early by explicitly returning `false`.
		     *
		     * @private
		     * @param {Object} object The object to iterate over.
		     * @param {Function} iteratee The function invoked per iteration.
		     * @param {Function} keysFunc The function to get the keys of `object`.
		     * @returns {Object} Returns `object`.
		     */
		    var baseFor = createBaseFor();

		    /**
		     * This function is like `baseFor` except that it iterates over properties
		     * in the opposite order.
		     *
		     * @private
		     * @param {Object} object The object to iterate over.
		     * @param {Function} iteratee The function invoked per iteration.
		     * @param {Function} keysFunc The function to get the keys of `object`.
		     * @returns {Object} Returns `object`.
		     */
		    var baseForRight = createBaseFor(true);

		    /**
		     * The base implementation of `_.forOwn` without support for iteratee shorthands.
		     *
		     * @private
		     * @param {Object} object The object to iterate over.
		     * @param {Function} iteratee The function invoked per iteration.
		     * @returns {Object} Returns `object`.
		     */
		    function baseForOwn(object, iteratee) {
		      return object && baseFor(object, iteratee, keys);
		    }

		    /**
		     * The base implementation of `_.forOwnRight` without support for iteratee shorthands.
		     *
		     * @private
		     * @param {Object} object The object to iterate over.
		     * @param {Function} iteratee The function invoked per iteration.
		     * @returns {Object} Returns `object`.
		     */
		    function baseForOwnRight(object, iteratee) {
		      return object && baseForRight(object, iteratee, keys);
		    }

		    /**
		     * The base implementation of `_.functions` which creates an array of
		     * `object` function property names filtered from `props`.
		     *
		     * @private
		     * @param {Object} object The object to inspect.
		     * @param {Array} props The property names to filter.
		     * @returns {Array} Returns the function names.
		     */
		    function baseFunctions(object, props) {
		      return arrayFilter(props, function(key) {
		        return isFunction(object[key]);
		      });
		    }

		    /**
		     * The base implementation of `_.get` without support for default values.
		     *
		     * @private
		     * @param {Object} object The object to query.
		     * @param {Array|string} path The path of the property to get.
		     * @returns {*} Returns the resolved value.
		     */
		    function baseGet(object, path) {
		      path = castPath(path, object);

		      var index = 0,
		          length = path.length;

		      while (object != null && index < length) {
		        object = object[toKey(path[index++])];
		      }
		      return (index && index == length) ? object : undefined$1;
		    }

		    /**
		     * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
		     * `keysFunc` and `symbolsFunc` to get the enumerable property names and
		     * symbols of `object`.
		     *
		     * @private
		     * @param {Object} object The object to query.
		     * @param {Function} keysFunc The function to get the keys of `object`.
		     * @param {Function} symbolsFunc The function to get the symbols of `object`.
		     * @returns {Array} Returns the array of property names and symbols.
		     */
		    function baseGetAllKeys(object, keysFunc, symbolsFunc) {
		      var result = keysFunc(object);
		      return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
		    }

		    /**
		     * The base implementation of `getTag` without fallbacks for buggy environments.
		     *
		     * @private
		     * @param {*} value The value to query.
		     * @returns {string} Returns the `toStringTag`.
		     */
		    function baseGetTag(value) {
		      if (value == null) {
		        return value === undefined$1 ? undefinedTag : nullTag;
		      }
		      return (symToStringTag && symToStringTag in Object(value))
		        ? getRawTag(value)
		        : objectToString(value);
		    }

		    /**
		     * The base implementation of `_.gt` which doesn't coerce arguments.
		     *
		     * @private
		     * @param {*} value The value to compare.
		     * @param {*} other The other value to compare.
		     * @returns {boolean} Returns `true` if `value` is greater than `other`,
		     *  else `false`.
		     */
		    function baseGt(value, other) {
		      return value > other;
		    }

		    /**
		     * The base implementation of `_.has` without support for deep paths.
		     *
		     * @private
		     * @param {Object} [object] The object to query.
		     * @param {Array|string} key The key to check.
		     * @returns {boolean} Returns `true` if `key` exists, else `false`.
		     */
		    function baseHas(object, key) {
		      return object != null && hasOwnProperty.call(object, key);
		    }

		    /**
		     * The base implementation of `_.hasIn` without support for deep paths.
		     *
		     * @private
		     * @param {Object} [object] The object to query.
		     * @param {Array|string} key The key to check.
		     * @returns {boolean} Returns `true` if `key` exists, else `false`.
		     */
		    function baseHasIn(object, key) {
		      return object != null && key in Object(object);
		    }

		    /**
		     * The base implementation of `_.inRange` which doesn't coerce arguments.
		     *
		     * @private
		     * @param {number} number The number to check.
		     * @param {number} start The start of the range.
		     * @param {number} end The end of the range.
		     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
		     */
		    function baseInRange(number, start, end) {
		      return number >= nativeMin(start, end) && number < nativeMax(start, end);
		    }

		    /**
		     * The base implementation of methods like `_.intersection`, without support
		     * for iteratee shorthands, that accepts an array of arrays to inspect.
		     *
		     * @private
		     * @param {Array} arrays The arrays to inspect.
		     * @param {Function} [iteratee] The iteratee invoked per element.
		     * @param {Function} [comparator] The comparator invoked per element.
		     * @returns {Array} Returns the new array of shared values.
		     */
		    function baseIntersection(arrays, iteratee, comparator) {
		      var includes = comparator ? arrayIncludesWith : arrayIncludes,
		          length = arrays[0].length,
		          othLength = arrays.length,
		          othIndex = othLength,
		          caches = Array(othLength),
		          maxLength = Infinity,
		          result = [];

		      while (othIndex--) {
		        var array = arrays[othIndex];
		        if (othIndex && iteratee) {
		          array = arrayMap(array, baseUnary(iteratee));
		        }
		        maxLength = nativeMin(array.length, maxLength);
		        caches[othIndex] = !comparator && (iteratee || (length >= 120 && array.length >= 120))
		          ? new SetCache(othIndex && array)
		          : undefined$1;
		      }
		      array = arrays[0];

		      var index = -1,
		          seen = caches[0];

		      outer:
		      while (++index < length && result.length < maxLength) {
		        var value = array[index],
		            computed = iteratee ? iteratee(value) : value;

		        value = (comparator || value !== 0) ? value : 0;
		        if (!(seen
		              ? cacheHas(seen, computed)
		              : includes(result, computed, comparator)
		            )) {
		          othIndex = othLength;
		          while (--othIndex) {
		            var cache = caches[othIndex];
		            if (!(cache
		                  ? cacheHas(cache, computed)
		                  : includes(arrays[othIndex], computed, comparator))
		                ) {
		              continue outer;
		            }
		          }
		          if (seen) {
		            seen.push(computed);
		          }
		          result.push(value);
		        }
		      }
		      return result;
		    }

		    /**
		     * The base implementation of `_.invert` and `_.invertBy` which inverts
		     * `object` with values transformed by `iteratee` and set by `setter`.
		     *
		     * @private
		     * @param {Object} object The object to iterate over.
		     * @param {Function} setter The function to set `accumulator` values.
		     * @param {Function} iteratee The iteratee to transform values.
		     * @param {Object} accumulator The initial inverted object.
		     * @returns {Function} Returns `accumulator`.
		     */
		    function baseInverter(object, setter, iteratee, accumulator) {
		      baseForOwn(object, function(value, key, object) {
		        setter(accumulator, iteratee(value), key, object);
		      });
		      return accumulator;
		    }

		    /**
		     * The base implementation of `_.invoke` without support for individual
		     * method arguments.
		     *
		     * @private
		     * @param {Object} object The object to query.
		     * @param {Array|string} path The path of the method to invoke.
		     * @param {Array} args The arguments to invoke the method with.
		     * @returns {*} Returns the result of the invoked method.
		     */
		    function baseInvoke(object, path, args) {
		      path = castPath(path, object);
		      object = parent(object, path);
		      var func = object == null ? object : object[toKey(last(path))];
		      return func == null ? undefined$1 : apply(func, object, args);
		    }

		    /**
		     * The base implementation of `_.isArguments`.
		     *
		     * @private
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
		     */
		    function baseIsArguments(value) {
		      return isObjectLike(value) && baseGetTag(value) == argsTag;
		    }

		    /**
		     * The base implementation of `_.isArrayBuffer` without Node.js optimizations.
		     *
		     * @private
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
		     */
		    function baseIsArrayBuffer(value) {
		      return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
		    }

		    /**
		     * The base implementation of `_.isDate` without Node.js optimizations.
		     *
		     * @private
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
		     */
		    function baseIsDate(value) {
		      return isObjectLike(value) && baseGetTag(value) == dateTag;
		    }

		    /**
		     * The base implementation of `_.isEqual` which supports partial comparisons
		     * and tracks traversed objects.
		     *
		     * @private
		     * @param {*} value The value to compare.
		     * @param {*} other The other value to compare.
		     * @param {boolean} bitmask The bitmask flags.
		     *  1 - Unordered comparison
		     *  2 - Partial comparison
		     * @param {Function} [customizer] The function to customize comparisons.
		     * @param {Object} [stack] Tracks traversed `value` and `other` objects.
		     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
		     */
		    function baseIsEqual(value, other, bitmask, customizer, stack) {
		      if (value === other) {
		        return true;
		      }
		      if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {
		        return value !== value && other !== other;
		      }
		      return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
		    }

		    /**
		     * A specialized version of `baseIsEqual` for arrays and objects which performs
		     * deep comparisons and tracks traversed objects enabling objects with circular
		     * references to be compared.
		     *
		     * @private
		     * @param {Object} object The object to compare.
		     * @param {Object} other The other object to compare.
		     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
		     * @param {Function} customizer The function to customize comparisons.
		     * @param {Function} equalFunc The function to determine equivalents of values.
		     * @param {Object} [stack] Tracks traversed `object` and `other` objects.
		     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
		     */
		    function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
		      var objIsArr = isArray(object),
		          othIsArr = isArray(other),
		          objTag = objIsArr ? arrayTag : getTag(object),
		          othTag = othIsArr ? arrayTag : getTag(other);

		      objTag = objTag == argsTag ? objectTag : objTag;
		      othTag = othTag == argsTag ? objectTag : othTag;

		      var objIsObj = objTag == objectTag,
		          othIsObj = othTag == objectTag,
		          isSameTag = objTag == othTag;

		      if (isSameTag && isBuffer(object)) {
		        if (!isBuffer(other)) {
		          return false;
		        }
		        objIsArr = true;
		        objIsObj = false;
		      }
		      if (isSameTag && !objIsObj) {
		        stack || (stack = new Stack);
		        return (objIsArr || isTypedArray(object))
		          ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
		          : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
		      }
		      if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
		        var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
		            othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

		        if (objIsWrapped || othIsWrapped) {
		          var objUnwrapped = objIsWrapped ? object.value() : object,
		              othUnwrapped = othIsWrapped ? other.value() : other;

		          stack || (stack = new Stack);
		          return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
		        }
		      }
		      if (!isSameTag) {
		        return false;
		      }
		      stack || (stack = new Stack);
		      return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
		    }

		    /**
		     * The base implementation of `_.isMap` without Node.js optimizations.
		     *
		     * @private
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
		     */
		    function baseIsMap(value) {
		      return isObjectLike(value) && getTag(value) == mapTag;
		    }

		    /**
		     * The base implementation of `_.isMatch` without support for iteratee shorthands.
		     *
		     * @private
		     * @param {Object} object The object to inspect.
		     * @param {Object} source The object of property values to match.
		     * @param {Array} matchData The property names, values, and compare flags to match.
		     * @param {Function} [customizer] The function to customize comparisons.
		     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
		     */
		    function baseIsMatch(object, source, matchData, customizer) {
		      var index = matchData.length,
		          length = index,
		          noCustomizer = !customizer;

		      if (object == null) {
		        return !length;
		      }
		      object = Object(object);
		      while (index--) {
		        var data = matchData[index];
		        if ((noCustomizer && data[2])
		              ? data[1] !== object[data[0]]
		              : !(data[0] in object)
		            ) {
		          return false;
		        }
		      }
		      while (++index < length) {
		        data = matchData[index];
		        var key = data[0],
		            objValue = object[key],
		            srcValue = data[1];

		        if (noCustomizer && data[2]) {
		          if (objValue === undefined$1 && !(key in object)) {
		            return false;
		          }
		        } else {
		          var stack = new Stack;
		          if (customizer) {
		            var result = customizer(objValue, srcValue, key, object, source, stack);
		          }
		          if (!(result === undefined$1
		                ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)
		                : result
		              )) {
		            return false;
		          }
		        }
		      }
		      return true;
		    }

		    /**
		     * The base implementation of `_.isNative` without bad shim checks.
		     *
		     * @private
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is a native function,
		     *  else `false`.
		     */
		    function baseIsNative(value) {
		      if (!isObject(value) || isMasked(value)) {
		        return false;
		      }
		      var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
		      return pattern.test(toSource(value));
		    }

		    /**
		     * The base implementation of `_.isRegExp` without Node.js optimizations.
		     *
		     * @private
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
		     */
		    function baseIsRegExp(value) {
		      return isObjectLike(value) && baseGetTag(value) == regexpTag;
		    }

		    /**
		     * The base implementation of `_.isSet` without Node.js optimizations.
		     *
		     * @private
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
		     */
		    function baseIsSet(value) {
		      return isObjectLike(value) && getTag(value) == setTag;
		    }

		    /**
		     * The base implementation of `_.isTypedArray` without Node.js optimizations.
		     *
		     * @private
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
		     */
		    function baseIsTypedArray(value) {
		      return isObjectLike(value) &&
		        isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
		    }

		    /**
		     * The base implementation of `_.iteratee`.
		     *
		     * @private
		     * @param {*} [value=_.identity] The value to convert to an iteratee.
		     * @returns {Function} Returns the iteratee.
		     */
		    function baseIteratee(value) {
		      // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
		      // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
		      if (typeof value == 'function') {
		        return value;
		      }
		      if (value == null) {
		        return identity;
		      }
		      if (typeof value == 'object') {
		        return isArray(value)
		          ? baseMatchesProperty(value[0], value[1])
		          : baseMatches(value);
		      }
		      return property(value);
		    }

		    /**
		     * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
		     *
		     * @private
		     * @param {Object} object The object to query.
		     * @returns {Array} Returns the array of property names.
		     */
		    function baseKeys(object) {
		      if (!isPrototype(object)) {
		        return nativeKeys(object);
		      }
		      var result = [];
		      for (var key in Object(object)) {
		        if (hasOwnProperty.call(object, key) && key != 'constructor') {
		          result.push(key);
		        }
		      }
		      return result;
		    }

		    /**
		     * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
		     *
		     * @private
		     * @param {Object} object The object to query.
		     * @returns {Array} Returns the array of property names.
		     */
		    function baseKeysIn(object) {
		      if (!isObject(object)) {
		        return nativeKeysIn(object);
		      }
		      var isProto = isPrototype(object),
		          result = [];

		      for (var key in object) {
		        if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
		          result.push(key);
		        }
		      }
		      return result;
		    }

		    /**
		     * The base implementation of `_.lt` which doesn't coerce arguments.
		     *
		     * @private
		     * @param {*} value The value to compare.
		     * @param {*} other The other value to compare.
		     * @returns {boolean} Returns `true` if `value` is less than `other`,
		     *  else `false`.
		     */
		    function baseLt(value, other) {
		      return value < other;
		    }

		    /**
		     * The base implementation of `_.map` without support for iteratee shorthands.
		     *
		     * @private
		     * @param {Array|Object} collection The collection to iterate over.
		     * @param {Function} iteratee The function invoked per iteration.
		     * @returns {Array} Returns the new mapped array.
		     */
		    function baseMap(collection, iteratee) {
		      var index = -1,
		          result = isArrayLike(collection) ? Array(collection.length) : [];

		      baseEach(collection, function(value, key, collection) {
		        result[++index] = iteratee(value, key, collection);
		      });
		      return result;
		    }

		    /**
		     * The base implementation of `_.matches` which doesn't clone `source`.
		     *
		     * @private
		     * @param {Object} source The object of property values to match.
		     * @returns {Function} Returns the new spec function.
		     */
		    function baseMatches(source) {
		      var matchData = getMatchData(source);
		      if (matchData.length == 1 && matchData[0][2]) {
		        return matchesStrictComparable(matchData[0][0], matchData[0][1]);
		      }
		      return function(object) {
		        return object === source || baseIsMatch(object, source, matchData);
		      };
		    }

		    /**
		     * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
		     *
		     * @private
		     * @param {string} path The path of the property to get.
		     * @param {*} srcValue The value to match.
		     * @returns {Function} Returns the new spec function.
		     */
		    function baseMatchesProperty(path, srcValue) {
		      if (isKey(path) && isStrictComparable(srcValue)) {
		        return matchesStrictComparable(toKey(path), srcValue);
		      }
		      return function(object) {
		        var objValue = get(object, path);
		        return (objValue === undefined$1 && objValue === srcValue)
		          ? hasIn(object, path)
		          : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
		      };
		    }

		    /**
		     * The base implementation of `_.merge` without support for multiple sources.
		     *
		     * @private
		     * @param {Object} object The destination object.
		     * @param {Object} source The source object.
		     * @param {number} srcIndex The index of `source`.
		     * @param {Function} [customizer] The function to customize merged values.
		     * @param {Object} [stack] Tracks traversed source values and their merged
		     *  counterparts.
		     */
		    function baseMerge(object, source, srcIndex, customizer, stack) {
		      if (object === source) {
		        return;
		      }
		      baseFor(source, function(srcValue, key) {
		        stack || (stack = new Stack);
		        if (isObject(srcValue)) {
		          baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
		        }
		        else {
		          var newValue = customizer
		            ? customizer(safeGet(object, key), srcValue, (key + ''), object, source, stack)
		            : undefined$1;

		          if (newValue === undefined$1) {
		            newValue = srcValue;
		          }
		          assignMergeValue(object, key, newValue);
		        }
		      }, keysIn);
		    }

		    /**
		     * A specialized version of `baseMerge` for arrays and objects which performs
		     * deep merges and tracks traversed objects enabling objects with circular
		     * references to be merged.
		     *
		     * @private
		     * @param {Object} object The destination object.
		     * @param {Object} source The source object.
		     * @param {string} key The key of the value to merge.
		     * @param {number} srcIndex The index of `source`.
		     * @param {Function} mergeFunc The function to merge values.
		     * @param {Function} [customizer] The function to customize assigned values.
		     * @param {Object} [stack] Tracks traversed source values and their merged
		     *  counterparts.
		     */
		    function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
		      var objValue = safeGet(object, key),
		          srcValue = safeGet(source, key),
		          stacked = stack.get(srcValue);

		      if (stacked) {
		        assignMergeValue(object, key, stacked);
		        return;
		      }
		      var newValue = customizer
		        ? customizer(objValue, srcValue, (key + ''), object, source, stack)
		        : undefined$1;

		      var isCommon = newValue === undefined$1;

		      if (isCommon) {
		        var isArr = isArray(srcValue),
		            isBuff = !isArr && isBuffer(srcValue),
		            isTyped = !isArr && !isBuff && isTypedArray(srcValue);

		        newValue = srcValue;
		        if (isArr || isBuff || isTyped) {
		          if (isArray(objValue)) {
		            newValue = objValue;
		          }
		          else if (isArrayLikeObject(objValue)) {
		            newValue = copyArray(objValue);
		          }
		          else if (isBuff) {
		            isCommon = false;
		            newValue = cloneBuffer(srcValue, true);
		          }
		          else if (isTyped) {
		            isCommon = false;
		            newValue = cloneTypedArray(srcValue, true);
		          }
		          else {
		            newValue = [];
		          }
		        }
		        else if (isPlainObject(srcValue) || isArguments(srcValue)) {
		          newValue = objValue;
		          if (isArguments(objValue)) {
		            newValue = toPlainObject(objValue);
		          }
		          else if (!isObject(objValue) || isFunction(objValue)) {
		            newValue = initCloneObject(srcValue);
		          }
		        }
		        else {
		          isCommon = false;
		        }
		      }
		      if (isCommon) {
		        // Recursively merge objects and arrays (susceptible to call stack limits).
		        stack.set(srcValue, newValue);
		        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
		        stack['delete'](srcValue);
		      }
		      assignMergeValue(object, key, newValue);
		    }

		    /**
		     * The base implementation of `_.nth` which doesn't coerce arguments.
		     *
		     * @private
		     * @param {Array} array The array to query.
		     * @param {number} n The index of the element to return.
		     * @returns {*} Returns the nth element of `array`.
		     */
		    function baseNth(array, n) {
		      var length = array.length;
		      if (!length) {
		        return;
		      }
		      n += n < 0 ? length : 0;
		      return isIndex(n, length) ? array[n] : undefined$1;
		    }

		    /**
		     * The base implementation of `_.orderBy` without param guards.
		     *
		     * @private
		     * @param {Array|Object} collection The collection to iterate over.
		     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
		     * @param {string[]} orders The sort orders of `iteratees`.
		     * @returns {Array} Returns the new sorted array.
		     */
		    function baseOrderBy(collection, iteratees, orders) {
		      if (iteratees.length) {
		        iteratees = arrayMap(iteratees, function(iteratee) {
		          if (isArray(iteratee)) {
		            return function(value) {
		              return baseGet(value, iteratee.length === 1 ? iteratee[0] : iteratee);
		            }
		          }
		          return iteratee;
		        });
		      } else {
		        iteratees = [identity];
		      }

		      var index = -1;
		      iteratees = arrayMap(iteratees, baseUnary(getIteratee()));

		      var result = baseMap(collection, function(value, key, collection) {
		        var criteria = arrayMap(iteratees, function(iteratee) {
		          return iteratee(value);
		        });
		        return { 'criteria': criteria, 'index': ++index, 'value': value };
		      });

		      return baseSortBy(result, function(object, other) {
		        return compareMultiple(object, other, orders);
		      });
		    }

		    /**
		     * The base implementation of `_.pick` without support for individual
		     * property identifiers.
		     *
		     * @private
		     * @param {Object} object The source object.
		     * @param {string[]} paths The property paths to pick.
		     * @returns {Object} Returns the new object.
		     */
		    function basePick(object, paths) {
		      return basePickBy(object, paths, function(value, path) {
		        return hasIn(object, path);
		      });
		    }

		    /**
		     * The base implementation of  `_.pickBy` without support for iteratee shorthands.
		     *
		     * @private
		     * @param {Object} object The source object.
		     * @param {string[]} paths The property paths to pick.
		     * @param {Function} predicate The function invoked per property.
		     * @returns {Object} Returns the new object.
		     */
		    function basePickBy(object, paths, predicate) {
		      var index = -1,
		          length = paths.length,
		          result = {};

		      while (++index < length) {
		        var path = paths[index],
		            value = baseGet(object, path);

		        if (predicate(value, path)) {
		          baseSet(result, castPath(path, object), value);
		        }
		      }
		      return result;
		    }

		    /**
		     * A specialized version of `baseProperty` which supports deep paths.
		     *
		     * @private
		     * @param {Array|string} path The path of the property to get.
		     * @returns {Function} Returns the new accessor function.
		     */
		    function basePropertyDeep(path) {
		      return function(object) {
		        return baseGet(object, path);
		      };
		    }

		    /**
		     * The base implementation of `_.pullAllBy` without support for iteratee
		     * shorthands.
		     *
		     * @private
		     * @param {Array} array The array to modify.
		     * @param {Array} values The values to remove.
		     * @param {Function} [iteratee] The iteratee invoked per element.
		     * @param {Function} [comparator] The comparator invoked per element.
		     * @returns {Array} Returns `array`.
		     */
		    function basePullAll(array, values, iteratee, comparator) {
		      var indexOf = comparator ? baseIndexOfWith : baseIndexOf,
		          index = -1,
		          length = values.length,
		          seen = array;

		      if (array === values) {
		        values = copyArray(values);
		      }
		      if (iteratee) {
		        seen = arrayMap(array, baseUnary(iteratee));
		      }
		      while (++index < length) {
		        var fromIndex = 0,
		            value = values[index],
		            computed = iteratee ? iteratee(value) : value;

		        while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {
		          if (seen !== array) {
		            splice.call(seen, fromIndex, 1);
		          }
		          splice.call(array, fromIndex, 1);
		        }
		      }
		      return array;
		    }

		    /**
		     * The base implementation of `_.pullAt` without support for individual
		     * indexes or capturing the removed elements.
		     *
		     * @private
		     * @param {Array} array The array to modify.
		     * @param {number[]} indexes The indexes of elements to remove.
		     * @returns {Array} Returns `array`.
		     */
		    function basePullAt(array, indexes) {
		      var length = array ? indexes.length : 0,
		          lastIndex = length - 1;

		      while (length--) {
		        var index = indexes[length];
		        if (length == lastIndex || index !== previous) {
		          var previous = index;
		          if (isIndex(index)) {
		            splice.call(array, index, 1);
		          } else {
		            baseUnset(array, index);
		          }
		        }
		      }
		      return array;
		    }

		    /**
		     * The base implementation of `_.random` without support for returning
		     * floating-point numbers.
		     *
		     * @private
		     * @param {number} lower The lower bound.
		     * @param {number} upper The upper bound.
		     * @returns {number} Returns the random number.
		     */
		    function baseRandom(lower, upper) {
		      return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
		    }

		    /**
		     * The base implementation of `_.range` and `_.rangeRight` which doesn't
		     * coerce arguments.
		     *
		     * @private
		     * @param {number} start The start of the range.
		     * @param {number} end The end of the range.
		     * @param {number} step The value to increment or decrement by.
		     * @param {boolean} [fromRight] Specify iterating from right to left.
		     * @returns {Array} Returns the range of numbers.
		     */
		    function baseRange(start, end, step, fromRight) {
		      var index = -1,
		          length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
		          result = Array(length);

		      while (length--) {
		        result[fromRight ? length : ++index] = start;
		        start += step;
		      }
		      return result;
		    }

		    /**
		     * The base implementation of `_.repeat` which doesn't coerce arguments.
		     *
		     * @private
		     * @param {string} string The string to repeat.
		     * @param {number} n The number of times to repeat the string.
		     * @returns {string} Returns the repeated string.
		     */
		    function baseRepeat(string, n) {
		      var result = '';
		      if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
		        return result;
		      }
		      // Leverage the exponentiation by squaring algorithm for a faster repeat.
		      // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
		      do {
		        if (n % 2) {
		          result += string;
		        }
		        n = nativeFloor(n / 2);
		        if (n) {
		          string += string;
		        }
		      } while (n);

		      return result;
		    }

		    /**
		     * The base implementation of `_.rest` which doesn't validate or coerce arguments.
		     *
		     * @private
		     * @param {Function} func The function to apply a rest parameter to.
		     * @param {number} [start=func.length-1] The start position of the rest parameter.
		     * @returns {Function} Returns the new function.
		     */
		    function baseRest(func, start) {
		      return setToString(overRest(func, start, identity), func + '');
		    }

		    /**
		     * The base implementation of `_.sample`.
		     *
		     * @private
		     * @param {Array|Object} collection The collection to sample.
		     * @returns {*} Returns the random element.
		     */
		    function baseSample(collection) {
		      return arraySample(values(collection));
		    }

		    /**
		     * The base implementation of `_.sampleSize` without param guards.
		     *
		     * @private
		     * @param {Array|Object} collection The collection to sample.
		     * @param {number} n The number of elements to sample.
		     * @returns {Array} Returns the random elements.
		     */
		    function baseSampleSize(collection, n) {
		      var array = values(collection);
		      return shuffleSelf(array, baseClamp(n, 0, array.length));
		    }

		    /**
		     * The base implementation of `_.set`.
		     *
		     * @private
		     * @param {Object} object The object to modify.
		     * @param {Array|string} path The path of the property to set.
		     * @param {*} value The value to set.
		     * @param {Function} [customizer] The function to customize path creation.
		     * @returns {Object} Returns `object`.
		     */
		    function baseSet(object, path, value, customizer) {
		      if (!isObject(object)) {
		        return object;
		      }
		      path = castPath(path, object);

		      var index = -1,
		          length = path.length,
		          lastIndex = length - 1,
		          nested = object;

		      while (nested != null && ++index < length) {
		        var key = toKey(path[index]),
		            newValue = value;

		        if (key === '__proto__' || key === 'constructor' || key === 'prototype') {
		          return object;
		        }

		        if (index != lastIndex) {
		          var objValue = nested[key];
		          newValue = customizer ? customizer(objValue, key, nested) : undefined$1;
		          if (newValue === undefined$1) {
		            newValue = isObject(objValue)
		              ? objValue
		              : (isIndex(path[index + 1]) ? [] : {});
		          }
		        }
		        assignValue(nested, key, newValue);
		        nested = nested[key];
		      }
		      return object;
		    }

		    /**
		     * The base implementation of `setData` without support for hot loop shorting.
		     *
		     * @private
		     * @param {Function} func The function to associate metadata with.
		     * @param {*} data The metadata.
		     * @returns {Function} Returns `func`.
		     */
		    var baseSetData = !metaMap ? identity : function(func, data) {
		      metaMap.set(func, data);
		      return func;
		    };

		    /**
		     * The base implementation of `setToString` without support for hot loop shorting.
		     *
		     * @private
		     * @param {Function} func The function to modify.
		     * @param {Function} string The `toString` result.
		     * @returns {Function} Returns `func`.
		     */
		    var baseSetToString = !defineProperty ? identity : function(func, string) {
		      return defineProperty(func, 'toString', {
		        'configurable': true,
		        'enumerable': false,
		        'value': constant(string),
		        'writable': true
		      });
		    };

		    /**
		     * The base implementation of `_.shuffle`.
		     *
		     * @private
		     * @param {Array|Object} collection The collection to shuffle.
		     * @returns {Array} Returns the new shuffled array.
		     */
		    function baseShuffle(collection) {
		      return shuffleSelf(values(collection));
		    }

		    /**
		     * The base implementation of `_.slice` without an iteratee call guard.
		     *
		     * @private
		     * @param {Array} array The array to slice.
		     * @param {number} [start=0] The start position.
		     * @param {number} [end=array.length] The end position.
		     * @returns {Array} Returns the slice of `array`.
		     */
		    function baseSlice(array, start, end) {
		      var index = -1,
		          length = array.length;

		      if (start < 0) {
		        start = -start > length ? 0 : (length + start);
		      }
		      end = end > length ? length : end;
		      if (end < 0) {
		        end += length;
		      }
		      length = start > end ? 0 : ((end - start) >>> 0);
		      start >>>= 0;

		      var result = Array(length);
		      while (++index < length) {
		        result[index] = array[index + start];
		      }
		      return result;
		    }

		    /**
		     * The base implementation of `_.some` without support for iteratee shorthands.
		     *
		     * @private
		     * @param {Array|Object} collection The collection to iterate over.
		     * @param {Function} predicate The function invoked per iteration.
		     * @returns {boolean} Returns `true` if any element passes the predicate check,
		     *  else `false`.
		     */
		    function baseSome(collection, predicate) {
		      var result;

		      baseEach(collection, function(value, index, collection) {
		        result = predicate(value, index, collection);
		        return !result;
		      });
		      return !!result;
		    }

		    /**
		     * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which
		     * performs a binary search of `array` to determine the index at which `value`
		     * should be inserted into `array` in order to maintain its sort order.
		     *
		     * @private
		     * @param {Array} array The sorted array to inspect.
		     * @param {*} value The value to evaluate.
		     * @param {boolean} [retHighest] Specify returning the highest qualified index.
		     * @returns {number} Returns the index at which `value` should be inserted
		     *  into `array`.
		     */
		    function baseSortedIndex(array, value, retHighest) {
		      var low = 0,
		          high = array == null ? low : array.length;

		      if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
		        while (low < high) {
		          var mid = (low + high) >>> 1,
		              computed = array[mid];

		          if (computed !== null && !isSymbol(computed) &&
		              (retHighest ? (computed <= value) : (computed < value))) {
		            low = mid + 1;
		          } else {
		            high = mid;
		          }
		        }
		        return high;
		      }
		      return baseSortedIndexBy(array, value, identity, retHighest);
		    }

		    /**
		     * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`
		     * which invokes `iteratee` for `value` and each element of `array` to compute
		     * their sort ranking. The iteratee is invoked with one argument; (value).
		     *
		     * @private
		     * @param {Array} array The sorted array to inspect.
		     * @param {*} value The value to evaluate.
		     * @param {Function} iteratee The iteratee invoked per element.
		     * @param {boolean} [retHighest] Specify returning the highest qualified index.
		     * @returns {number} Returns the index at which `value` should be inserted
		     *  into `array`.
		     */
		    function baseSortedIndexBy(array, value, iteratee, retHighest) {
		      var low = 0,
		          high = array == null ? 0 : array.length;
		      if (high === 0) {
		        return 0;
		      }

		      value = iteratee(value);
		      var valIsNaN = value !== value,
		          valIsNull = value === null,
		          valIsSymbol = isSymbol(value),
		          valIsUndefined = value === undefined$1;

		      while (low < high) {
		        var mid = nativeFloor((low + high) / 2),
		            computed = iteratee(array[mid]),
		            othIsDefined = computed !== undefined$1,
		            othIsNull = computed === null,
		            othIsReflexive = computed === computed,
		            othIsSymbol = isSymbol(computed);

		        if (valIsNaN) {
		          var setLow = retHighest || othIsReflexive;
		        } else if (valIsUndefined) {
		          setLow = othIsReflexive && (retHighest || othIsDefined);
		        } else if (valIsNull) {
		          setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
		        } else if (valIsSymbol) {
		          setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
		        } else if (othIsNull || othIsSymbol) {
		          setLow = false;
		        } else {
		          setLow = retHighest ? (computed <= value) : (computed < value);
		        }
		        if (setLow) {
		          low = mid + 1;
		        } else {
		          high = mid;
		        }
		      }
		      return nativeMin(high, MAX_ARRAY_INDEX);
		    }

		    /**
		     * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without
		     * support for iteratee shorthands.
		     *
		     * @private
		     * @param {Array} array The array to inspect.
		     * @param {Function} [iteratee] The iteratee invoked per element.
		     * @returns {Array} Returns the new duplicate free array.
		     */
		    function baseSortedUniq(array, iteratee) {
		      var index = -1,
		          length = array.length,
		          resIndex = 0,
		          result = [];

		      while (++index < length) {
		        var value = array[index],
		            computed = iteratee ? iteratee(value) : value;

		        if (!index || !eq(computed, seen)) {
		          var seen = computed;
		          result[resIndex++] = value === 0 ? 0 : value;
		        }
		      }
		      return result;
		    }

		    /**
		     * The base implementation of `_.toNumber` which doesn't ensure correct
		     * conversions of binary, hexadecimal, or octal string values.
		     *
		     * @private
		     * @param {*} value The value to process.
		     * @returns {number} Returns the number.
		     */
		    function baseToNumber(value) {
		      if (typeof value == 'number') {
		        return value;
		      }
		      if (isSymbol(value)) {
		        return NAN;
		      }
		      return +value;
		    }

		    /**
		     * The base implementation of `_.toString` which doesn't convert nullish
		     * values to empty strings.
		     *
		     * @private
		     * @param {*} value The value to process.
		     * @returns {string} Returns the string.
		     */
		    function baseToString(value) {
		      // Exit early for strings to avoid a performance hit in some environments.
		      if (typeof value == 'string') {
		        return value;
		      }
		      if (isArray(value)) {
		        // Recursively convert values (susceptible to call stack limits).
		        return arrayMap(value, baseToString) + '';
		      }
		      if (isSymbol(value)) {
		        return symbolToString ? symbolToString.call(value) : '';
		      }
		      var result = (value + '');
		      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
		    }

		    /**
		     * The base implementation of `_.uniqBy` without support for iteratee shorthands.
		     *
		     * @private
		     * @param {Array} array The array to inspect.
		     * @param {Function} [iteratee] The iteratee invoked per element.
		     * @param {Function} [comparator] The comparator invoked per element.
		     * @returns {Array} Returns the new duplicate free array.
		     */
		    function baseUniq(array, iteratee, comparator) {
		      var index = -1,
		          includes = arrayIncludes,
		          length = array.length,
		          isCommon = true,
		          result = [],
		          seen = result;

		      if (comparator) {
		        isCommon = false;
		        includes = arrayIncludesWith;
		      }
		      else if (length >= LARGE_ARRAY_SIZE) {
		        var set = iteratee ? null : createSet(array);
		        if (set) {
		          return setToArray(set);
		        }
		        isCommon = false;
		        includes = cacheHas;
		        seen = new SetCache;
		      }
		      else {
		        seen = iteratee ? [] : result;
		      }
		      outer:
		      while (++index < length) {
		        var value = array[index],
		            computed = iteratee ? iteratee(value) : value;

		        value = (comparator || value !== 0) ? value : 0;
		        if (isCommon && computed === computed) {
		          var seenIndex = seen.length;
		          while (seenIndex--) {
		            if (seen[seenIndex] === computed) {
		              continue outer;
		            }
		          }
		          if (iteratee) {
		            seen.push(computed);
		          }
		          result.push(value);
		        }
		        else if (!includes(seen, computed, comparator)) {
		          if (seen !== result) {
		            seen.push(computed);
		          }
		          result.push(value);
		        }
		      }
		      return result;
		    }

		    /**
		     * The base implementation of `_.unset`.
		     *
		     * @private
		     * @param {Object} object The object to modify.
		     * @param {Array|string} path The property path to unset.
		     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
		     */
		    function baseUnset(object, path) {
		      path = castPath(path, object);
		      object = parent(object, path);
		      return object == null || delete object[toKey(last(path))];
		    }

		    /**
		     * The base implementation of `_.update`.
		     *
		     * @private
		     * @param {Object} object The object to modify.
		     * @param {Array|string} path The path of the property to update.
		     * @param {Function} updater The function to produce the updated value.
		     * @param {Function} [customizer] The function to customize path creation.
		     * @returns {Object} Returns `object`.
		     */
		    function baseUpdate(object, path, updater, customizer) {
		      return baseSet(object, path, updater(baseGet(object, path)), customizer);
		    }

		    /**
		     * The base implementation of methods like `_.dropWhile` and `_.takeWhile`
		     * without support for iteratee shorthands.
		     *
		     * @private
		     * @param {Array} array The array to query.
		     * @param {Function} predicate The function invoked per iteration.
		     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
		     * @param {boolean} [fromRight] Specify iterating from right to left.
		     * @returns {Array} Returns the slice of `array`.
		     */
		    function baseWhile(array, predicate, isDrop, fromRight) {
		      var length = array.length,
		          index = fromRight ? length : -1;

		      while ((fromRight ? index-- : ++index < length) &&
		        predicate(array[index], index, array)) {}

		      return isDrop
		        ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))
		        : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));
		    }

		    /**
		     * The base implementation of `wrapperValue` which returns the result of
		     * performing a sequence of actions on the unwrapped `value`, where each
		     * successive action is supplied the return value of the previous.
		     *
		     * @private
		     * @param {*} value The unwrapped value.
		     * @param {Array} actions Actions to perform to resolve the unwrapped value.
		     * @returns {*} Returns the resolved value.
		     */
		    function baseWrapperValue(value, actions) {
		      var result = value;
		      if (result instanceof LazyWrapper) {
		        result = result.value();
		      }
		      return arrayReduce(actions, function(result, action) {
		        return action.func.apply(action.thisArg, arrayPush([result], action.args));
		      }, result);
		    }

		    /**
		     * The base implementation of methods like `_.xor`, without support for
		     * iteratee shorthands, that accepts an array of arrays to inspect.
		     *
		     * @private
		     * @param {Array} arrays The arrays to inspect.
		     * @param {Function} [iteratee] The iteratee invoked per element.
		     * @param {Function} [comparator] The comparator invoked per element.
		     * @returns {Array} Returns the new array of values.
		     */
		    function baseXor(arrays, iteratee, comparator) {
		      var length = arrays.length;
		      if (length < 2) {
		        return length ? baseUniq(arrays[0]) : [];
		      }
		      var index = -1,
		          result = Array(length);

		      while (++index < length) {
		        var array = arrays[index],
		            othIndex = -1;

		        while (++othIndex < length) {
		          if (othIndex != index) {
		            result[index] = baseDifference(result[index] || array, arrays[othIndex], iteratee, comparator);
		          }
		        }
		      }
		      return baseUniq(baseFlatten(result, 1), iteratee, comparator);
		    }

		    /**
		     * This base implementation of `_.zipObject` which assigns values using `assignFunc`.
		     *
		     * @private
		     * @param {Array} props The property identifiers.
		     * @param {Array} values The property values.
		     * @param {Function} assignFunc The function to assign values.
		     * @returns {Object} Returns the new object.
		     */
		    function baseZipObject(props, values, assignFunc) {
		      var index = -1,
		          length = props.length,
		          valsLength = values.length,
		          result = {};

		      while (++index < length) {
		        var value = index < valsLength ? values[index] : undefined$1;
		        assignFunc(result, props[index], value);
		      }
		      return result;
		    }

		    /**
		     * Casts `value` to an empty array if it's not an array like object.
		     *
		     * @private
		     * @param {*} value The value to inspect.
		     * @returns {Array|Object} Returns the cast array-like object.
		     */
		    function castArrayLikeObject(value) {
		      return isArrayLikeObject(value) ? value : [];
		    }

		    /**
		     * Casts `value` to `identity` if it's not a function.
		     *
		     * @private
		     * @param {*} value The value to inspect.
		     * @returns {Function} Returns cast function.
		     */
		    function castFunction(value) {
		      return typeof value == 'function' ? value : identity;
		    }

		    /**
		     * Casts `value` to a path array if it's not one.
		     *
		     * @private
		     * @param {*} value The value to inspect.
		     * @param {Object} [object] The object to query keys on.
		     * @returns {Array} Returns the cast property path array.
		     */
		    function castPath(value, object) {
		      if (isArray(value)) {
		        return value;
		      }
		      return isKey(value, object) ? [value] : stringToPath(toString(value));
		    }

		    /**
		     * A `baseRest` alias which can be replaced with `identity` by module
		     * replacement plugins.
		     *
		     * @private
		     * @type {Function}
		     * @param {Function} func The function to apply a rest parameter to.
		     * @returns {Function} Returns the new function.
		     */
		    var castRest = baseRest;

		    /**
		     * Casts `array` to a slice if it's needed.
		     *
		     * @private
		     * @param {Array} array The array to inspect.
		     * @param {number} start The start position.
		     * @param {number} [end=array.length] The end position.
		     * @returns {Array} Returns the cast slice.
		     */
		    function castSlice(array, start, end) {
		      var length = array.length;
		      end = end === undefined$1 ? length : end;
		      return (!start && end >= length) ? array : baseSlice(array, start, end);
		    }

		    /**
		     * A simple wrapper around the global [`clearTimeout`](https://mdn.io/clearTimeout).
		     *
		     * @private
		     * @param {number|Object} id The timer id or timeout object of the timer to clear.
		     */
		    var clearTimeout = ctxClearTimeout || function(id) {
		      return root.clearTimeout(id);
		    };

		    /**
		     * Creates a clone of  `buffer`.
		     *
		     * @private
		     * @param {Buffer} buffer The buffer to clone.
		     * @param {boolean} [isDeep] Specify a deep clone.
		     * @returns {Buffer} Returns the cloned buffer.
		     */
		    function cloneBuffer(buffer, isDeep) {
		      if (isDeep) {
		        return buffer.slice();
		      }
		      var length = buffer.length,
		          result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

		      buffer.copy(result);
		      return result;
		    }

		    /**
		     * Creates a clone of `arrayBuffer`.
		     *
		     * @private
		     * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
		     * @returns {ArrayBuffer} Returns the cloned array buffer.
		     */
		    function cloneArrayBuffer(arrayBuffer) {
		      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
		      new Uint8Array(result).set(new Uint8Array(arrayBuffer));
		      return result;
		    }

		    /**
		     * Creates a clone of `dataView`.
		     *
		     * @private
		     * @param {Object} dataView The data view to clone.
		     * @param {boolean} [isDeep] Specify a deep clone.
		     * @returns {Object} Returns the cloned data view.
		     */
		    function cloneDataView(dataView, isDeep) {
		      var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
		      return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
		    }

		    /**
		     * Creates a clone of `regexp`.
		     *
		     * @private
		     * @param {Object} regexp The regexp to clone.
		     * @returns {Object} Returns the cloned regexp.
		     */
		    function cloneRegExp(regexp) {
		      var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
		      result.lastIndex = regexp.lastIndex;
		      return result;
		    }

		    /**
		     * Creates a clone of the `symbol` object.
		     *
		     * @private
		     * @param {Object} symbol The symbol object to clone.
		     * @returns {Object} Returns the cloned symbol object.
		     */
		    function cloneSymbol(symbol) {
		      return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
		    }

		    /**
		     * Creates a clone of `typedArray`.
		     *
		     * @private
		     * @param {Object} typedArray The typed array to clone.
		     * @param {boolean} [isDeep] Specify a deep clone.
		     * @returns {Object} Returns the cloned typed array.
		     */
		    function cloneTypedArray(typedArray, isDeep) {
		      var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
		      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
		    }

		    /**
		     * Compares values to sort them in ascending order.
		     *
		     * @private
		     * @param {*} value The value to compare.
		     * @param {*} other The other value to compare.
		     * @returns {number} Returns the sort order indicator for `value`.
		     */
		    function compareAscending(value, other) {
		      if (value !== other) {
		        var valIsDefined = value !== undefined$1,
		            valIsNull = value === null,
		            valIsReflexive = value === value,
		            valIsSymbol = isSymbol(value);

		        var othIsDefined = other !== undefined$1,
		            othIsNull = other === null,
		            othIsReflexive = other === other,
		            othIsSymbol = isSymbol(other);

		        if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||
		            (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||
		            (valIsNull && othIsDefined && othIsReflexive) ||
		            (!valIsDefined && othIsReflexive) ||
		            !valIsReflexive) {
		          return 1;
		        }
		        if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||
		            (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||
		            (othIsNull && valIsDefined && valIsReflexive) ||
		            (!othIsDefined && valIsReflexive) ||
		            !othIsReflexive) {
		          return -1;
		        }
		      }
		      return 0;
		    }

		    /**
		     * Used by `_.orderBy` to compare multiple properties of a value to another
		     * and stable sort them.
		     *
		     * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
		     * specify an order of "desc" for descending or "asc" for ascending sort order
		     * of corresponding values.
		     *
		     * @private
		     * @param {Object} object The object to compare.
		     * @param {Object} other The other object to compare.
		     * @param {boolean[]|string[]} orders The order to sort by for each property.
		     * @returns {number} Returns the sort order indicator for `object`.
		     */
		    function compareMultiple(object, other, orders) {
		      var index = -1,
		          objCriteria = object.criteria,
		          othCriteria = other.criteria,
		          length = objCriteria.length,
		          ordersLength = orders.length;

		      while (++index < length) {
		        var result = compareAscending(objCriteria[index], othCriteria[index]);
		        if (result) {
		          if (index >= ordersLength) {
		            return result;
		          }
		          var order = orders[index];
		          return result * (order == 'desc' ? -1 : 1);
		        }
		      }
		      // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
		      // that causes it, under certain circumstances, to provide the same value for
		      // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
		      // for more details.
		      //
		      // This also ensures a stable sort in V8 and other engines.
		      // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.
		      return object.index - other.index;
		    }

		    /**
		     * Creates an array that is the composition of partially applied arguments,
		     * placeholders, and provided arguments into a single array of arguments.
		     *
		     * @private
		     * @param {Array} args The provided arguments.
		     * @param {Array} partials The arguments to prepend to those provided.
		     * @param {Array} holders The `partials` placeholder indexes.
		     * @params {boolean} [isCurried] Specify composing for a curried function.
		     * @returns {Array} Returns the new array of composed arguments.
		     */
		    function composeArgs(args, partials, holders, isCurried) {
		      var argsIndex = -1,
		          argsLength = args.length,
		          holdersLength = holders.length,
		          leftIndex = -1,
		          leftLength = partials.length,
		          rangeLength = nativeMax(argsLength - holdersLength, 0),
		          result = Array(leftLength + rangeLength),
		          isUncurried = !isCurried;

		      while (++leftIndex < leftLength) {
		        result[leftIndex] = partials[leftIndex];
		      }
		      while (++argsIndex < holdersLength) {
		        if (isUncurried || argsIndex < argsLength) {
		          result[holders[argsIndex]] = args[argsIndex];
		        }
		      }
		      while (rangeLength--) {
		        result[leftIndex++] = args[argsIndex++];
		      }
		      return result;
		    }

		    /**
		     * This function is like `composeArgs` except that the arguments composition
		     * is tailored for `_.partialRight`.
		     *
		     * @private
		     * @param {Array} args The provided arguments.
		     * @param {Array} partials The arguments to append to those provided.
		     * @param {Array} holders The `partials` placeholder indexes.
		     * @params {boolean} [isCurried] Specify composing for a curried function.
		     * @returns {Array} Returns the new array of composed arguments.
		     */
		    function composeArgsRight(args, partials, holders, isCurried) {
		      var argsIndex = -1,
		          argsLength = args.length,
		          holdersIndex = -1,
		          holdersLength = holders.length,
		          rightIndex = -1,
		          rightLength = partials.length,
		          rangeLength = nativeMax(argsLength - holdersLength, 0),
		          result = Array(rangeLength + rightLength),
		          isUncurried = !isCurried;

		      while (++argsIndex < rangeLength) {
		        result[argsIndex] = args[argsIndex];
		      }
		      var offset = argsIndex;
		      while (++rightIndex < rightLength) {
		        result[offset + rightIndex] = partials[rightIndex];
		      }
		      while (++holdersIndex < holdersLength) {
		        if (isUncurried || argsIndex < argsLength) {
		          result[offset + holders[holdersIndex]] = args[argsIndex++];
		        }
		      }
		      return result;
		    }

		    /**
		     * Copies the values of `source` to `array`.
		     *
		     * @private
		     * @param {Array} source The array to copy values from.
		     * @param {Array} [array=[]] The array to copy values to.
		     * @returns {Array} Returns `array`.
		     */
		    function copyArray(source, array) {
		      var index = -1,
		          length = source.length;

		      array || (array = Array(length));
		      while (++index < length) {
		        array[index] = source[index];
		      }
		      return array;
		    }

		    /**
		     * Copies properties of `source` to `object`.
		     *
		     * @private
		     * @param {Object} source The object to copy properties from.
		     * @param {Array} props The property identifiers to copy.
		     * @param {Object} [object={}] The object to copy properties to.
		     * @param {Function} [customizer] The function to customize copied values.
		     * @returns {Object} Returns `object`.
		     */
		    function copyObject(source, props, object, customizer) {
		      var isNew = !object;
		      object || (object = {});

		      var index = -1,
		          length = props.length;

		      while (++index < length) {
		        var key = props[index];

		        var newValue = customizer
		          ? customizer(object[key], source[key], key, object, source)
		          : undefined$1;

		        if (newValue === undefined$1) {
		          newValue = source[key];
		        }
		        if (isNew) {
		          baseAssignValue(object, key, newValue);
		        } else {
		          assignValue(object, key, newValue);
		        }
		      }
		      return object;
		    }

		    /**
		     * Copies own symbols of `source` to `object`.
		     *
		     * @private
		     * @param {Object} source The object to copy symbols from.
		     * @param {Object} [object={}] The object to copy symbols to.
		     * @returns {Object} Returns `object`.
		     */
		    function copySymbols(source, object) {
		      return copyObject(source, getSymbols(source), object);
		    }

		    /**
		     * Copies own and inherited symbols of `source` to `object`.
		     *
		     * @private
		     * @param {Object} source The object to copy symbols from.
		     * @param {Object} [object={}] The object to copy symbols to.
		     * @returns {Object} Returns `object`.
		     */
		    function copySymbolsIn(source, object) {
		      return copyObject(source, getSymbolsIn(source), object);
		    }

		    /**
		     * Creates a function like `_.groupBy`.
		     *
		     * @private
		     * @param {Function} setter The function to set accumulator values.
		     * @param {Function} [initializer] The accumulator object initializer.
		     * @returns {Function} Returns the new aggregator function.
		     */
		    function createAggregator(setter, initializer) {
		      return function(collection, iteratee) {
		        var func = isArray(collection) ? arrayAggregator : baseAggregator,
		            accumulator = initializer ? initializer() : {};

		        return func(collection, setter, getIteratee(iteratee, 2), accumulator);
		      };
		    }

		    /**
		     * Creates a function like `_.assign`.
		     *
		     * @private
		     * @param {Function} assigner The function to assign values.
		     * @returns {Function} Returns the new assigner function.
		     */
		    function createAssigner(assigner) {
		      return baseRest(function(object, sources) {
		        var index = -1,
		            length = sources.length,
		            customizer = length > 1 ? sources[length - 1] : undefined$1,
		            guard = length > 2 ? sources[2] : undefined$1;

		        customizer = (assigner.length > 3 && typeof customizer == 'function')
		          ? (length--, customizer)
		          : undefined$1;

		        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
		          customizer = length < 3 ? undefined$1 : customizer;
		          length = 1;
		        }
		        object = Object(object);
		        while (++index < length) {
		          var source = sources[index];
		          if (source) {
		            assigner(object, source, index, customizer);
		          }
		        }
		        return object;
		      });
		    }

		    /**
		     * Creates a `baseEach` or `baseEachRight` function.
		     *
		     * @private
		     * @param {Function} eachFunc The function to iterate over a collection.
		     * @param {boolean} [fromRight] Specify iterating from right to left.
		     * @returns {Function} Returns the new base function.
		     */
		    function createBaseEach(eachFunc, fromRight) {
		      return function(collection, iteratee) {
		        if (collection == null) {
		          return collection;
		        }
		        if (!isArrayLike(collection)) {
		          return eachFunc(collection, iteratee);
		        }
		        var length = collection.length,
		            index = fromRight ? length : -1,
		            iterable = Object(collection);

		        while ((fromRight ? index-- : ++index < length)) {
		          if (iteratee(iterable[index], index, iterable) === false) {
		            break;
		          }
		        }
		        return collection;
		      };
		    }

		    /**
		     * Creates a base function for methods like `_.forIn` and `_.forOwn`.
		     *
		     * @private
		     * @param {boolean} [fromRight] Specify iterating from right to left.
		     * @returns {Function} Returns the new base function.
		     */
		    function createBaseFor(fromRight) {
		      return function(object, iteratee, keysFunc) {
		        var index = -1,
		            iterable = Object(object),
		            props = keysFunc(object),
		            length = props.length;

		        while (length--) {
		          var key = props[fromRight ? length : ++index];
		          if (iteratee(iterable[key], key, iterable) === false) {
		            break;
		          }
		        }
		        return object;
		      };
		    }

		    /**
		     * Creates a function that wraps `func` to invoke it with the optional `this`
		     * binding of `thisArg`.
		     *
		     * @private
		     * @param {Function} func The function to wrap.
		     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
		     * @param {*} [thisArg] The `this` binding of `func`.
		     * @returns {Function} Returns the new wrapped function.
		     */
		    function createBind(func, bitmask, thisArg) {
		      var isBind = bitmask & WRAP_BIND_FLAG,
		          Ctor = createCtor(func);

		      function wrapper() {
		        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
		        return fn.apply(isBind ? thisArg : this, arguments);
		      }
		      return wrapper;
		    }

		    /**
		     * Creates a function like `_.lowerFirst`.
		     *
		     * @private
		     * @param {string} methodName The name of the `String` case method to use.
		     * @returns {Function} Returns the new case function.
		     */
		    function createCaseFirst(methodName) {
		      return function(string) {
		        string = toString(string);

		        var strSymbols = hasUnicode(string)
		          ? stringToArray(string)
		          : undefined$1;

		        var chr = strSymbols
		          ? strSymbols[0]
		          : string.charAt(0);

		        var trailing = strSymbols
		          ? castSlice(strSymbols, 1).join('')
		          : string.slice(1);

		        return chr[methodName]() + trailing;
		      };
		    }

		    /**
		     * Creates a function like `_.camelCase`.
		     *
		     * @private
		     * @param {Function} callback The function to combine each word.
		     * @returns {Function} Returns the new compounder function.
		     */
		    function createCompounder(callback) {
		      return function(string) {
		        return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
		      };
		    }

		    /**
		     * Creates a function that produces an instance of `Ctor` regardless of
		     * whether it was invoked as part of a `new` expression or by `call` or `apply`.
		     *
		     * @private
		     * @param {Function} Ctor The constructor to wrap.
		     * @returns {Function} Returns the new wrapped function.
		     */
		    function createCtor(Ctor) {
		      return function() {
		        // Use a `switch` statement to work with class constructors. See
		        // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
		        // for more details.
		        var args = arguments;
		        switch (args.length) {
		          case 0: return new Ctor;
		          case 1: return new Ctor(args[0]);
		          case 2: return new Ctor(args[0], args[1]);
		          case 3: return new Ctor(args[0], args[1], args[2]);
		          case 4: return new Ctor(args[0], args[1], args[2], args[3]);
		          case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);
		          case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
		          case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
		        }
		        var thisBinding = baseCreate(Ctor.prototype),
		            result = Ctor.apply(thisBinding, args);

		        // Mimic the constructor's `return` behavior.
		        // See https://es5.github.io/#x13.2.2 for more details.
		        return isObject(result) ? result : thisBinding;
		      };
		    }

		    /**
		     * Creates a function that wraps `func` to enable currying.
		     *
		     * @private
		     * @param {Function} func The function to wrap.
		     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
		     * @param {number} arity The arity of `func`.
		     * @returns {Function} Returns the new wrapped function.
		     */
		    function createCurry(func, bitmask, arity) {
		      var Ctor = createCtor(func);

		      function wrapper() {
		        var length = arguments.length,
		            args = Array(length),
		            index = length,
		            placeholder = getHolder(wrapper);

		        while (index--) {
		          args[index] = arguments[index];
		        }
		        var holders = (length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder)
		          ? []
		          : replaceHolders(args, placeholder);

		        length -= holders.length;
		        if (length < arity) {
		          return createRecurry(
		            func, bitmask, createHybrid, wrapper.placeholder, undefined$1,
		            args, holders, undefined$1, undefined$1, arity - length);
		        }
		        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
		        return apply(fn, this, args);
		      }
		      return wrapper;
		    }

		    /**
		     * Creates a `_.find` or `_.findLast` function.
		     *
		     * @private
		     * @param {Function} findIndexFunc The function to find the collection index.
		     * @returns {Function} Returns the new find function.
		     */
		    function createFind(findIndexFunc) {
		      return function(collection, predicate, fromIndex) {
		        var iterable = Object(collection);
		        if (!isArrayLike(collection)) {
		          var iteratee = getIteratee(predicate, 3);
		          collection = keys(collection);
		          predicate = function(key) { return iteratee(iterable[key], key, iterable); };
		        }
		        var index = findIndexFunc(collection, predicate, fromIndex);
		        return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined$1;
		      };
		    }

		    /**
		     * Creates a `_.flow` or `_.flowRight` function.
		     *
		     * @private
		     * @param {boolean} [fromRight] Specify iterating from right to left.
		     * @returns {Function} Returns the new flow function.
		     */
		    function createFlow(fromRight) {
		      return flatRest(function(funcs) {
		        var length = funcs.length,
		            index = length,
		            prereq = LodashWrapper.prototype.thru;

		        if (fromRight) {
		          funcs.reverse();
		        }
		        while (index--) {
		          var func = funcs[index];
		          if (typeof func != 'function') {
		            throw new TypeError(FUNC_ERROR_TEXT);
		          }
		          if (prereq && !wrapper && getFuncName(func) == 'wrapper') {
		            var wrapper = new LodashWrapper([], true);
		          }
		        }
		        index = wrapper ? index : length;
		        while (++index < length) {
		          func = funcs[index];

		          var funcName = getFuncName(func),
		              data = funcName == 'wrapper' ? getData(func) : undefined$1;

		          if (data && isLaziable(data[0]) &&
		                data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) &&
		                !data[4].length && data[9] == 1
		              ) {
		            wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
		          } else {
		            wrapper = (func.length == 1 && isLaziable(func))
		              ? wrapper[funcName]()
		              : wrapper.thru(func);
		          }
		        }
		        return function() {
		          var args = arguments,
		              value = args[0];

		          if (wrapper && args.length == 1 && isArray(value)) {
		            return wrapper.plant(value).value();
		          }
		          var index = 0,
		              result = length ? funcs[index].apply(this, args) : value;

		          while (++index < length) {
		            result = funcs[index].call(this, result);
		          }
		          return result;
		        };
		      });
		    }

		    /**
		     * Creates a function that wraps `func` to invoke it with optional `this`
		     * binding of `thisArg`, partial application, and currying.
		     *
		     * @private
		     * @param {Function|string} func The function or method name to wrap.
		     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
		     * @param {*} [thisArg] The `this` binding of `func`.
		     * @param {Array} [partials] The arguments to prepend to those provided to
		     *  the new function.
		     * @param {Array} [holders] The `partials` placeholder indexes.
		     * @param {Array} [partialsRight] The arguments to append to those provided
		     *  to the new function.
		     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
		     * @param {Array} [argPos] The argument positions of the new function.
		     * @param {number} [ary] The arity cap of `func`.
		     * @param {number} [arity] The arity of `func`.
		     * @returns {Function} Returns the new wrapped function.
		     */
		    function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
		      var isAry = bitmask & WRAP_ARY_FLAG,
		          isBind = bitmask & WRAP_BIND_FLAG,
		          isBindKey = bitmask & WRAP_BIND_KEY_FLAG,
		          isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG),
		          isFlip = bitmask & WRAP_FLIP_FLAG,
		          Ctor = isBindKey ? undefined$1 : createCtor(func);

		      function wrapper() {
		        var length = arguments.length,
		            args = Array(length),
		            index = length;

		        while (index--) {
		          args[index] = arguments[index];
		        }
		        if (isCurried) {
		          var placeholder = getHolder(wrapper),
		              holdersCount = countHolders(args, placeholder);
		        }
		        if (partials) {
		          args = composeArgs(args, partials, holders, isCurried);
		        }
		        if (partialsRight) {
		          args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
		        }
		        length -= holdersCount;
		        if (isCurried && length < arity) {
		          var newHolders = replaceHolders(args, placeholder);
		          return createRecurry(
		            func, bitmask, createHybrid, wrapper.placeholder, thisArg,
		            args, newHolders, argPos, ary, arity - length
		          );
		        }
		        var thisBinding = isBind ? thisArg : this,
		            fn = isBindKey ? thisBinding[func] : func;

		        length = args.length;
		        if (argPos) {
		          args = reorder(args, argPos);
		        } else if (isFlip && length > 1) {
		          args.reverse();
		        }
		        if (isAry && ary < length) {
		          args.length = ary;
		        }
		        if (this && this !== root && this instanceof wrapper) {
		          fn = Ctor || createCtor(fn);
		        }
		        return fn.apply(thisBinding, args);
		      }
		      return wrapper;
		    }

		    /**
		     * Creates a function like `_.invertBy`.
		     *
		     * @private
		     * @param {Function} setter The function to set accumulator values.
		     * @param {Function} toIteratee The function to resolve iteratees.
		     * @returns {Function} Returns the new inverter function.
		     */
		    function createInverter(setter, toIteratee) {
		      return function(object, iteratee) {
		        return baseInverter(object, setter, toIteratee(iteratee), {});
		      };
		    }

		    /**
		     * Creates a function that performs a mathematical operation on two values.
		     *
		     * @private
		     * @param {Function} operator The function to perform the operation.
		     * @param {number} [defaultValue] The value used for `undefined` arguments.
		     * @returns {Function} Returns the new mathematical operation function.
		     */
		    function createMathOperation(operator, defaultValue) {
		      return function(value, other) {
		        var result;
		        if (value === undefined$1 && other === undefined$1) {
		          return defaultValue;
		        }
		        if (value !== undefined$1) {
		          result = value;
		        }
		        if (other !== undefined$1) {
		          if (result === undefined$1) {
		            return other;
		          }
		          if (typeof value == 'string' || typeof other == 'string') {
		            value = baseToString(value);
		            other = baseToString(other);
		          } else {
		            value = baseToNumber(value);
		            other = baseToNumber(other);
		          }
		          result = operator(value, other);
		        }
		        return result;
		      };
		    }

		    /**
		     * Creates a function like `_.over`.
		     *
		     * @private
		     * @param {Function} arrayFunc The function to iterate over iteratees.
		     * @returns {Function} Returns the new over function.
		     */
		    function createOver(arrayFunc) {
		      return flatRest(function(iteratees) {
		        iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
		        return baseRest(function(args) {
		          var thisArg = this;
		          return arrayFunc(iteratees, function(iteratee) {
		            return apply(iteratee, thisArg, args);
		          });
		        });
		      });
		    }

		    /**
		     * Creates the padding for `string` based on `length`. The `chars` string
		     * is truncated if the number of characters exceeds `length`.
		     *
		     * @private
		     * @param {number} length The padding length.
		     * @param {string} [chars=' '] The string used as padding.
		     * @returns {string} Returns the padding for `string`.
		     */
		    function createPadding(length, chars) {
		      chars = chars === undefined$1 ? ' ' : baseToString(chars);

		      var charsLength = chars.length;
		      if (charsLength < 2) {
		        return charsLength ? baseRepeat(chars, length) : chars;
		      }
		      var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
		      return hasUnicode(chars)
		        ? castSlice(stringToArray(result), 0, length).join('')
		        : result.slice(0, length);
		    }

		    /**
		     * Creates a function that wraps `func` to invoke it with the `this` binding
		     * of `thisArg` and `partials` prepended to the arguments it receives.
		     *
		     * @private
		     * @param {Function} func The function to wrap.
		     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
		     * @param {*} thisArg The `this` binding of `func`.
		     * @param {Array} partials The arguments to prepend to those provided to
		     *  the new function.
		     * @returns {Function} Returns the new wrapped function.
		     */
		    function createPartial(func, bitmask, thisArg, partials) {
		      var isBind = bitmask & WRAP_BIND_FLAG,
		          Ctor = createCtor(func);

		      function wrapper() {
		        var argsIndex = -1,
		            argsLength = arguments.length,
		            leftIndex = -1,
		            leftLength = partials.length,
		            args = Array(leftLength + argsLength),
		            fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;

		        while (++leftIndex < leftLength) {
		          args[leftIndex] = partials[leftIndex];
		        }
		        while (argsLength--) {
		          args[leftIndex++] = arguments[++argsIndex];
		        }
		        return apply(fn, isBind ? thisArg : this, args);
		      }
		      return wrapper;
		    }

		    /**
		     * Creates a `_.range` or `_.rangeRight` function.
		     *
		     * @private
		     * @param {boolean} [fromRight] Specify iterating from right to left.
		     * @returns {Function} Returns the new range function.
		     */
		    function createRange(fromRight) {
		      return function(start, end, step) {
		        if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {
		          end = step = undefined$1;
		        }
		        // Ensure the sign of `-0` is preserved.
		        start = toFinite(start);
		        if (end === undefined$1) {
		          end = start;
		          start = 0;
		        } else {
		          end = toFinite(end);
		        }
		        step = step === undefined$1 ? (start < end ? 1 : -1) : toFinite(step);
		        return baseRange(start, end, step, fromRight);
		      };
		    }

		    /**
		     * Creates a function that performs a relational operation on two values.
		     *
		     * @private
		     * @param {Function} operator The function to perform the operation.
		     * @returns {Function} Returns the new relational operation function.
		     */
		    function createRelationalOperation(operator) {
		      return function(value, other) {
		        if (!(typeof value == 'string' && typeof other == 'string')) {
		          value = toNumber(value);
		          other = toNumber(other);
		        }
		        return operator(value, other);
		      };
		    }

		    /**
		     * Creates a function that wraps `func` to continue currying.
		     *
		     * @private
		     * @param {Function} func The function to wrap.
		     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
		     * @param {Function} wrapFunc The function to create the `func` wrapper.
		     * @param {*} placeholder The placeholder value.
		     * @param {*} [thisArg] The `this` binding of `func`.
		     * @param {Array} [partials] The arguments to prepend to those provided to
		     *  the new function.
		     * @param {Array} [holders] The `partials` placeholder indexes.
		     * @param {Array} [argPos] The argument positions of the new function.
		     * @param {number} [ary] The arity cap of `func`.
		     * @param {number} [arity] The arity of `func`.
		     * @returns {Function} Returns the new wrapped function.
		     */
		    function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
		      var isCurry = bitmask & WRAP_CURRY_FLAG,
		          newHolders = isCurry ? holders : undefined$1,
		          newHoldersRight = isCurry ? undefined$1 : holders,
		          newPartials = isCurry ? partials : undefined$1,
		          newPartialsRight = isCurry ? undefined$1 : partials;

		      bitmask |= (isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG);
		      bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);

		      if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
		        bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
		      }
		      var newData = [
		        func, bitmask, thisArg, newPartials, newHolders, newPartialsRight,
		        newHoldersRight, argPos, ary, arity
		      ];

		      var result = wrapFunc.apply(undefined$1, newData);
		      if (isLaziable(func)) {
		        setData(result, newData);
		      }
		      result.placeholder = placeholder;
		      return setWrapToString(result, func, bitmask);
		    }

		    /**
		     * Creates a function like `_.round`.
		     *
		     * @private
		     * @param {string} methodName The name of the `Math` method to use when rounding.
		     * @returns {Function} Returns the new round function.
		     */
		    function createRound(methodName) {
		      var func = Math[methodName];
		      return function(number, precision) {
		        number = toNumber(number);
		        precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);
		        if (precision && nativeIsFinite(number)) {
		          // Shift with exponential notation to avoid floating-point issues.
		          // See [MDN](https://mdn.io/round#Examples) for more details.
		          var pair = (toString(number) + 'e').split('e'),
		              value = func(pair[0] + 'e' + (+pair[1] + precision));

		          pair = (toString(value) + 'e').split('e');
		          return +(pair[0] + 'e' + (+pair[1] - precision));
		        }
		        return func(number);
		      };
		    }

		    /**
		     * Creates a set object of `values`.
		     *
		     * @private
		     * @param {Array} values The values to add to the set.
		     * @returns {Object} Returns the new set.
		     */
		    var createSet = !(Set && (1 / setToArray(new Set([,-0]))[1]) == INFINITY) ? noop : function(values) {
		      return new Set(values);
		    };

		    /**
		     * Creates a `_.toPairs` or `_.toPairsIn` function.
		     *
		     * @private
		     * @param {Function} keysFunc The function to get the keys of a given object.
		     * @returns {Function} Returns the new pairs function.
		     */
		    function createToPairs(keysFunc) {
		      return function(object) {
		        var tag = getTag(object);
		        if (tag == mapTag) {
		          return mapToArray(object);
		        }
		        if (tag == setTag) {
		          return setToPairs(object);
		        }
		        return baseToPairs(object, keysFunc(object));
		      };
		    }

		    /**
		     * Creates a function that either curries or invokes `func` with optional
		     * `this` binding and partially applied arguments.
		     *
		     * @private
		     * @param {Function|string} func The function or method name to wrap.
		     * @param {number} bitmask The bitmask flags.
		     *    1 - `_.bind`
		     *    2 - `_.bindKey`
		     *    4 - `_.curry` or `_.curryRight` of a bound function
		     *    8 - `_.curry`
		     *   16 - `_.curryRight`
		     *   32 - `_.partial`
		     *   64 - `_.partialRight`
		     *  128 - `_.rearg`
		     *  256 - `_.ary`
		     *  512 - `_.flip`
		     * @param {*} [thisArg] The `this` binding of `func`.
		     * @param {Array} [partials] The arguments to be partially applied.
		     * @param {Array} [holders] The `partials` placeholder indexes.
		     * @param {Array} [argPos] The argument positions of the new function.
		     * @param {number} [ary] The arity cap of `func`.
		     * @param {number} [arity] The arity of `func`.
		     * @returns {Function} Returns the new wrapped function.
		     */
		    function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
		      var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
		      if (!isBindKey && typeof func != 'function') {
		        throw new TypeError(FUNC_ERROR_TEXT);
		      }
		      var length = partials ? partials.length : 0;
		      if (!length) {
		        bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
		        partials = holders = undefined$1;
		      }
		      ary = ary === undefined$1 ? ary : nativeMax(toInteger(ary), 0);
		      arity = arity === undefined$1 ? arity : toInteger(arity);
		      length -= holders ? holders.length : 0;

		      if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
		        var partialsRight = partials,
		            holdersRight = holders;

		        partials = holders = undefined$1;
		      }
		      var data = isBindKey ? undefined$1 : getData(func);

		      var newData = [
		        func, bitmask, thisArg, partials, holders, partialsRight, holdersRight,
		        argPos, ary, arity
		      ];

		      if (data) {
		        mergeData(newData, data);
		      }
		      func = newData[0];
		      bitmask = newData[1];
		      thisArg = newData[2];
		      partials = newData[3];
		      holders = newData[4];
		      arity = newData[9] = newData[9] === undefined$1
		        ? (isBindKey ? 0 : func.length)
		        : nativeMax(newData[9] - length, 0);

		      if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
		        bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
		      }
		      if (!bitmask || bitmask == WRAP_BIND_FLAG) {
		        var result = createBind(func, bitmask, thisArg);
		      } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
		        result = createCurry(func, bitmask, arity);
		      } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
		        result = createPartial(func, bitmask, thisArg, partials);
		      } else {
		        result = createHybrid.apply(undefined$1, newData);
		      }
		      var setter = data ? baseSetData : setData;
		      return setWrapToString(setter(result, newData), func, bitmask);
		    }

		    /**
		     * Used by `_.defaults` to customize its `_.assignIn` use to assign properties
		     * of source objects to the destination object for all destination properties
		     * that resolve to `undefined`.
		     *
		     * @private
		     * @param {*} objValue The destination value.
		     * @param {*} srcValue The source value.
		     * @param {string} key The key of the property to assign.
		     * @param {Object} object The parent object of `objValue`.
		     * @returns {*} Returns the value to assign.
		     */
		    function customDefaultsAssignIn(objValue, srcValue, key, object) {
		      if (objValue === undefined$1 ||
		          (eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key))) {
		        return srcValue;
		      }
		      return objValue;
		    }

		    /**
		     * Used by `_.defaultsDeep` to customize its `_.merge` use to merge source
		     * objects into destination objects that are passed thru.
		     *
		     * @private
		     * @param {*} objValue The destination value.
		     * @param {*} srcValue The source value.
		     * @param {string} key The key of the property to merge.
		     * @param {Object} object The parent object of `objValue`.
		     * @param {Object} source The parent object of `srcValue`.
		     * @param {Object} [stack] Tracks traversed source values and their merged
		     *  counterparts.
		     * @returns {*} Returns the value to assign.
		     */
		    function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
		      if (isObject(objValue) && isObject(srcValue)) {
		        // Recursively merge objects and arrays (susceptible to call stack limits).
		        stack.set(srcValue, objValue);
		        baseMerge(objValue, srcValue, undefined$1, customDefaultsMerge, stack);
		        stack['delete'](srcValue);
		      }
		      return objValue;
		    }

		    /**
		     * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain
		     * objects.
		     *
		     * @private
		     * @param {*} value The value to inspect.
		     * @param {string} key The key of the property to inspect.
		     * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.
		     */
		    function customOmitClone(value) {
		      return isPlainObject(value) ? undefined$1 : value;
		    }

		    /**
		     * A specialized version of `baseIsEqualDeep` for arrays with support for
		     * partial deep comparisons.
		     *
		     * @private
		     * @param {Array} array The array to compare.
		     * @param {Array} other The other array to compare.
		     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
		     * @param {Function} customizer The function to customize comparisons.
		     * @param {Function} equalFunc The function to determine equivalents of values.
		     * @param {Object} stack Tracks traversed `array` and `other` objects.
		     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
		     */
		    function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
		      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
		          arrLength = array.length,
		          othLength = other.length;

		      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
		        return false;
		      }
		      // Check that cyclic values are equal.
		      var arrStacked = stack.get(array);
		      var othStacked = stack.get(other);
		      if (arrStacked && othStacked) {
		        return arrStacked == other && othStacked == array;
		      }
		      var index = -1,
		          result = true,
		          seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined$1;

		      stack.set(array, other);
		      stack.set(other, array);

		      // Ignore non-index properties.
		      while (++index < arrLength) {
		        var arrValue = array[index],
		            othValue = other[index];

		        if (customizer) {
		          var compared = isPartial
		            ? customizer(othValue, arrValue, index, other, array, stack)
		            : customizer(arrValue, othValue, index, array, other, stack);
		        }
		        if (compared !== undefined$1) {
		          if (compared) {
		            continue;
		          }
		          result = false;
		          break;
		        }
		        // Recursively compare arrays (susceptible to call stack limits).
		        if (seen) {
		          if (!arraySome(other, function(othValue, othIndex) {
		                if (!cacheHas(seen, othIndex) &&
		                    (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
		                  return seen.push(othIndex);
		                }
		              })) {
		            result = false;
		            break;
		          }
		        } else if (!(
		              arrValue === othValue ||
		                equalFunc(arrValue, othValue, bitmask, customizer, stack)
		            )) {
		          result = false;
		          break;
		        }
		      }
		      stack['delete'](array);
		      stack['delete'](other);
		      return result;
		    }

		    /**
		     * A specialized version of `baseIsEqualDeep` for comparing objects of
		     * the same `toStringTag`.
		     *
		     * **Note:** This function only supports comparing values with tags of
		     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
		     *
		     * @private
		     * @param {Object} object The object to compare.
		     * @param {Object} other The other object to compare.
		     * @param {string} tag The `toStringTag` of the objects to compare.
		     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
		     * @param {Function} customizer The function to customize comparisons.
		     * @param {Function} equalFunc The function to determine equivalents of values.
		     * @param {Object} stack Tracks traversed `object` and `other` objects.
		     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
		     */
		    function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
		      switch (tag) {
		        case dataViewTag:
		          if ((object.byteLength != other.byteLength) ||
		              (object.byteOffset != other.byteOffset)) {
		            return false;
		          }
		          object = object.buffer;
		          other = other.buffer;

		        case arrayBufferTag:
		          if ((object.byteLength != other.byteLength) ||
		              !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
		            return false;
		          }
		          return true;

		        case boolTag:
		        case dateTag:
		        case numberTag:
		          // Coerce booleans to `1` or `0` and dates to milliseconds.
		          // Invalid dates are coerced to `NaN`.
		          return eq(+object, +other);

		        case errorTag:
		          return object.name == other.name && object.message == other.message;

		        case regexpTag:
		        case stringTag:
		          // Coerce regexes to strings and treat strings, primitives and objects,
		          // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
		          // for more details.
		          return object == (other + '');

		        case mapTag:
		          var convert = mapToArray;

		        case setTag:
		          var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
		          convert || (convert = setToArray);

		          if (object.size != other.size && !isPartial) {
		            return false;
		          }
		          // Assume cyclic values are equal.
		          var stacked = stack.get(object);
		          if (stacked) {
		            return stacked == other;
		          }
		          bitmask |= COMPARE_UNORDERED_FLAG;

		          // Recursively compare objects (susceptible to call stack limits).
		          stack.set(object, other);
		          var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
		          stack['delete'](object);
		          return result;

		        case symbolTag:
		          if (symbolValueOf) {
		            return symbolValueOf.call(object) == symbolValueOf.call(other);
		          }
		      }
		      return false;
		    }

		    /**
		     * A specialized version of `baseIsEqualDeep` for objects with support for
		     * partial deep comparisons.
		     *
		     * @private
		     * @param {Object} object The object to compare.
		     * @param {Object} other The other object to compare.
		     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
		     * @param {Function} customizer The function to customize comparisons.
		     * @param {Function} equalFunc The function to determine equivalents of values.
		     * @param {Object} stack Tracks traversed `object` and `other` objects.
		     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
		     */
		    function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
		      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
		          objProps = getAllKeys(object),
		          objLength = objProps.length,
		          othProps = getAllKeys(other),
		          othLength = othProps.length;

		      if (objLength != othLength && !isPartial) {
		        return false;
		      }
		      var index = objLength;
		      while (index--) {
		        var key = objProps[index];
		        if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
		          return false;
		        }
		      }
		      // Check that cyclic values are equal.
		      var objStacked = stack.get(object);
		      var othStacked = stack.get(other);
		      if (objStacked && othStacked) {
		        return objStacked == other && othStacked == object;
		      }
		      var result = true;
		      stack.set(object, other);
		      stack.set(other, object);

		      var skipCtor = isPartial;
		      while (++index < objLength) {
		        key = objProps[index];
		        var objValue = object[key],
		            othValue = other[key];

		        if (customizer) {
		          var compared = isPartial
		            ? customizer(othValue, objValue, key, other, object, stack)
		            : customizer(objValue, othValue, key, object, other, stack);
		        }
		        // Recursively compare objects (susceptible to call stack limits).
		        if (!(compared === undefined$1
		              ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
		              : compared
		            )) {
		          result = false;
		          break;
		        }
		        skipCtor || (skipCtor = key == 'constructor');
		      }
		      if (result && !skipCtor) {
		        var objCtor = object.constructor,
		            othCtor = other.constructor;

		        // Non `Object` object instances with different constructors are not equal.
		        if (objCtor != othCtor &&
		            ('constructor' in object && 'constructor' in other) &&
		            !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
		              typeof othCtor == 'function' && othCtor instanceof othCtor)) {
		          result = false;
		        }
		      }
		      stack['delete'](object);
		      stack['delete'](other);
		      return result;
		    }

		    /**
		     * A specialized version of `baseRest` which flattens the rest array.
		     *
		     * @private
		     * @param {Function} func The function to apply a rest parameter to.
		     * @returns {Function} Returns the new function.
		     */
		    function flatRest(func) {
		      return setToString(overRest(func, undefined$1, flatten), func + '');
		    }

		    /**
		     * Creates an array of own enumerable property names and symbols of `object`.
		     *
		     * @private
		     * @param {Object} object The object to query.
		     * @returns {Array} Returns the array of property names and symbols.
		     */
		    function getAllKeys(object) {
		      return baseGetAllKeys(object, keys, getSymbols);
		    }

		    /**
		     * Creates an array of own and inherited enumerable property names and
		     * symbols of `object`.
		     *
		     * @private
		     * @param {Object} object The object to query.
		     * @returns {Array} Returns the array of property names and symbols.
		     */
		    function getAllKeysIn(object) {
		      return baseGetAllKeys(object, keysIn, getSymbolsIn);
		    }

		    /**
		     * Gets metadata for `func`.
		     *
		     * @private
		     * @param {Function} func The function to query.
		     * @returns {*} Returns the metadata for `func`.
		     */
		    var getData = !metaMap ? noop : function(func) {
		      return metaMap.get(func);
		    };

		    /**
		     * Gets the name of `func`.
		     *
		     * @private
		     * @param {Function} func The function to query.
		     * @returns {string} Returns the function name.
		     */
		    function getFuncName(func) {
		      var result = (func.name + ''),
		          array = realNames[result],
		          length = hasOwnProperty.call(realNames, result) ? array.length : 0;

		      while (length--) {
		        var data = array[length],
		            otherFunc = data.func;
		        if (otherFunc == null || otherFunc == func) {
		          return data.name;
		        }
		      }
		      return result;
		    }

		    /**
		     * Gets the argument placeholder value for `func`.
		     *
		     * @private
		     * @param {Function} func The function to inspect.
		     * @returns {*} Returns the placeholder value.
		     */
		    function getHolder(func) {
		      var object = hasOwnProperty.call(lodash, 'placeholder') ? lodash : func;
		      return object.placeholder;
		    }

		    /**
		     * Gets the appropriate "iteratee" function. If `_.iteratee` is customized,
		     * this function returns the custom method, otherwise it returns `baseIteratee`.
		     * If arguments are provided, the chosen function is invoked with them and
		     * its result is returned.
		     *
		     * @private
		     * @param {*} [value] The value to convert to an iteratee.
		     * @param {number} [arity] The arity of the created iteratee.
		     * @returns {Function} Returns the chosen function or its result.
		     */
		    function getIteratee() {
		      var result = lodash.iteratee || iteratee;
		      result = result === iteratee ? baseIteratee : result;
		      return arguments.length ? result(arguments[0], arguments[1]) : result;
		    }

		    /**
		     * Gets the data for `map`.
		     *
		     * @private
		     * @param {Object} map The map to query.
		     * @param {string} key The reference key.
		     * @returns {*} Returns the map data.
		     */
		    function getMapData(map, key) {
		      var data = map.__data__;
		      return isKeyable(key)
		        ? data[typeof key == 'string' ? 'string' : 'hash']
		        : data.map;
		    }

		    /**
		     * Gets the property names, values, and compare flags of `object`.
		     *
		     * @private
		     * @param {Object} object The object to query.
		     * @returns {Array} Returns the match data of `object`.
		     */
		    function getMatchData(object) {
		      var result = keys(object),
		          length = result.length;

		      while (length--) {
		        var key = result[length],
		            value = object[key];

		        result[length] = [key, value, isStrictComparable(value)];
		      }
		      return result;
		    }

		    /**
		     * Gets the native function at `key` of `object`.
		     *
		     * @private
		     * @param {Object} object The object to query.
		     * @param {string} key The key of the method to get.
		     * @returns {*} Returns the function if it's native, else `undefined`.
		     */
		    function getNative(object, key) {
		      var value = getValue(object, key);
		      return baseIsNative(value) ? value : undefined$1;
		    }

		    /**
		     * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
		     *
		     * @private
		     * @param {*} value The value to query.
		     * @returns {string} Returns the raw `toStringTag`.
		     */
		    function getRawTag(value) {
		      var isOwn = hasOwnProperty.call(value, symToStringTag),
		          tag = value[symToStringTag];

		      try {
		        value[symToStringTag] = undefined$1;
		        var unmasked = true;
		      } catch (e) {}

		      var result = nativeObjectToString.call(value);
		      if (unmasked) {
		        if (isOwn) {
		          value[symToStringTag] = tag;
		        } else {
		          delete value[symToStringTag];
		        }
		      }
		      return result;
		    }

		    /**
		     * Creates an array of the own enumerable symbols of `object`.
		     *
		     * @private
		     * @param {Object} object The object to query.
		     * @returns {Array} Returns the array of symbols.
		     */
		    var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
		      if (object == null) {
		        return [];
		      }
		      object = Object(object);
		      return arrayFilter(nativeGetSymbols(object), function(symbol) {
		        return propertyIsEnumerable.call(object, symbol);
		      });
		    };

		    /**
		     * Creates an array of the own and inherited enumerable symbols of `object`.
		     *
		     * @private
		     * @param {Object} object The object to query.
		     * @returns {Array} Returns the array of symbols.
		     */
		    var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
		      var result = [];
		      while (object) {
		        arrayPush(result, getSymbols(object));
		        object = getPrototype(object);
		      }
		      return result;
		    };

		    /**
		     * Gets the `toStringTag` of `value`.
		     *
		     * @private
		     * @param {*} value The value to query.
		     * @returns {string} Returns the `toStringTag`.
		     */
		    var getTag = baseGetTag;

		    // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
		    if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
		        (Map && getTag(new Map) != mapTag) ||
		        (Promise && getTag(Promise.resolve()) != promiseTag) ||
		        (Set && getTag(new Set) != setTag) ||
		        (WeakMap && getTag(new WeakMap) != weakMapTag)) {
		      getTag = function(value) {
		        var result = baseGetTag(value),
		            Ctor = result == objectTag ? value.constructor : undefined$1,
		            ctorString = Ctor ? toSource(Ctor) : '';

		        if (ctorString) {
		          switch (ctorString) {
		            case dataViewCtorString: return dataViewTag;
		            case mapCtorString: return mapTag;
		            case promiseCtorString: return promiseTag;
		            case setCtorString: return setTag;
		            case weakMapCtorString: return weakMapTag;
		          }
		        }
		        return result;
		      };
		    }

		    /**
		     * Gets the view, applying any `transforms` to the `start` and `end` positions.
		     *
		     * @private
		     * @param {number} start The start of the view.
		     * @param {number} end The end of the view.
		     * @param {Array} transforms The transformations to apply to the view.
		     * @returns {Object} Returns an object containing the `start` and `end`
		     *  positions of the view.
		     */
		    function getView(start, end, transforms) {
		      var index = -1,
		          length = transforms.length;

		      while (++index < length) {
		        var data = transforms[index],
		            size = data.size;

		        switch (data.type) {
		          case 'drop':      start += size; break;
		          case 'dropRight': end -= size; break;
		          case 'take':      end = nativeMin(end, start + size); break;
		          case 'takeRight': start = nativeMax(start, end - size); break;
		        }
		      }
		      return { 'start': start, 'end': end };
		    }

		    /**
		     * Extracts wrapper details from the `source` body comment.
		     *
		     * @private
		     * @param {string} source The source to inspect.
		     * @returns {Array} Returns the wrapper details.
		     */
		    function getWrapDetails(source) {
		      var match = source.match(reWrapDetails);
		      return match ? match[1].split(reSplitDetails) : [];
		    }

		    /**
		     * Checks if `path` exists on `object`.
		     *
		     * @private
		     * @param {Object} object The object to query.
		     * @param {Array|string} path The path to check.
		     * @param {Function} hasFunc The function to check properties.
		     * @returns {boolean} Returns `true` if `path` exists, else `false`.
		     */
		    function hasPath(object, path, hasFunc) {
		      path = castPath(path, object);

		      var index = -1,
		          length = path.length,
		          result = false;

		      while (++index < length) {
		        var key = toKey(path[index]);
		        if (!(result = object != null && hasFunc(object, key))) {
		          break;
		        }
		        object = object[key];
		      }
		      if (result || ++index != length) {
		        return result;
		      }
		      length = object == null ? 0 : object.length;
		      return !!length && isLength(length) && isIndex(key, length) &&
		        (isArray(object) || isArguments(object));
		    }

		    /**
		     * Initializes an array clone.
		     *
		     * @private
		     * @param {Array} array The array to clone.
		     * @returns {Array} Returns the initialized clone.
		     */
		    function initCloneArray(array) {
		      var length = array.length,
		          result = new array.constructor(length);

		      // Add properties assigned by `RegExp#exec`.
		      if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
		        result.index = array.index;
		        result.input = array.input;
		      }
		      return result;
		    }

		    /**
		     * Initializes an object clone.
		     *
		     * @private
		     * @param {Object} object The object to clone.
		     * @returns {Object} Returns the initialized clone.
		     */
		    function initCloneObject(object) {
		      return (typeof object.constructor == 'function' && !isPrototype(object))
		        ? baseCreate(getPrototype(object))
		        : {};
		    }

		    /**
		     * Initializes an object clone based on its `toStringTag`.
		     *
		     * **Note:** This function only supports cloning values with tags of
		     * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
		     *
		     * @private
		     * @param {Object} object The object to clone.
		     * @param {string} tag The `toStringTag` of the object to clone.
		     * @param {boolean} [isDeep] Specify a deep clone.
		     * @returns {Object} Returns the initialized clone.
		     */
		    function initCloneByTag(object, tag, isDeep) {
		      var Ctor = object.constructor;
		      switch (tag) {
		        case arrayBufferTag:
		          return cloneArrayBuffer(object);

		        case boolTag:
		        case dateTag:
		          return new Ctor(+object);

		        case dataViewTag:
		          return cloneDataView(object, isDeep);

		        case float32Tag: case float64Tag:
		        case int8Tag: case int16Tag: case int32Tag:
		        case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
		          return cloneTypedArray(object, isDeep);

		        case mapTag:
		          return new Ctor;

		        case numberTag:
		        case stringTag:
		          return new Ctor(object);

		        case regexpTag:
		          return cloneRegExp(object);

		        case setTag:
		          return new Ctor;

		        case symbolTag:
		          return cloneSymbol(object);
		      }
		    }

		    /**
		     * Inserts wrapper `details` in a comment at the top of the `source` body.
		     *
		     * @private
		     * @param {string} source The source to modify.
		     * @returns {Array} details The details to insert.
		     * @returns {string} Returns the modified source.
		     */
		    function insertWrapDetails(source, details) {
		      var length = details.length;
		      if (!length) {
		        return source;
		      }
		      var lastIndex = length - 1;
		      details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];
		      details = details.join(length > 2 ? ', ' : ' ');
		      return source.replace(reWrapComment, '{\n/* [wrapped with ' + details + '] */\n');
		    }

		    /**
		     * Checks if `value` is a flattenable `arguments` object or array.
		     *
		     * @private
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
		     */
		    function isFlattenable(value) {
		      return isArray(value) || isArguments(value) ||
		        !!(spreadableSymbol && value && value[spreadableSymbol]);
		    }

		    /**
		     * Checks if `value` is a valid array-like index.
		     *
		     * @private
		     * @param {*} value The value to check.
		     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
		     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
		     */
		    function isIndex(value, length) {
		      var type = typeof value;
		      length = length == null ? MAX_SAFE_INTEGER : length;

		      return !!length &&
		        (type == 'number' ||
		          (type != 'symbol' && reIsUint.test(value))) &&
		            (value > -1 && value % 1 == 0 && value < length);
		    }

		    /**
		     * Checks if the given arguments are from an iteratee call.
		     *
		     * @private
		     * @param {*} value The potential iteratee value argument.
		     * @param {*} index The potential iteratee index or key argument.
		     * @param {*} object The potential iteratee object argument.
		     * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
		     *  else `false`.
		     */
		    function isIterateeCall(value, index, object) {
		      if (!isObject(object)) {
		        return false;
		      }
		      var type = typeof index;
		      if (type == 'number'
		            ? (isArrayLike(object) && isIndex(index, object.length))
		            : (type == 'string' && index in object)
		          ) {
		        return eq(object[index], value);
		      }
		      return false;
		    }

		    /**
		     * Checks if `value` is a property name and not a property path.
		     *
		     * @private
		     * @param {*} value The value to check.
		     * @param {Object} [object] The object to query keys on.
		     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
		     */
		    function isKey(value, object) {
		      if (isArray(value)) {
		        return false;
		      }
		      var type = typeof value;
		      if (type == 'number' || type == 'symbol' || type == 'boolean' ||
		          value == null || isSymbol(value)) {
		        return true;
		      }
		      return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
		        (object != null && value in Object(object));
		    }

		    /**
		     * Checks if `value` is suitable for use as unique object key.
		     *
		     * @private
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
		     */
		    function isKeyable(value) {
		      var type = typeof value;
		      return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
		        ? (value !== '__proto__')
		        : (value === null);
		    }

		    /**
		     * Checks if `func` has a lazy counterpart.
		     *
		     * @private
		     * @param {Function} func The function to check.
		     * @returns {boolean} Returns `true` if `func` has a lazy counterpart,
		     *  else `false`.
		     */
		    function isLaziable(func) {
		      var funcName = getFuncName(func),
		          other = lodash[funcName];

		      if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {
		        return false;
		      }
		      if (func === other) {
		        return true;
		      }
		      var data = getData(other);
		      return !!data && func === data[0];
		    }

		    /**
		     * Checks if `func` has its source masked.
		     *
		     * @private
		     * @param {Function} func The function to check.
		     * @returns {boolean} Returns `true` if `func` is masked, else `false`.
		     */
		    function isMasked(func) {
		      return !!maskSrcKey && (maskSrcKey in func);
		    }

		    /**
		     * Checks if `func` is capable of being masked.
		     *
		     * @private
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `func` is maskable, else `false`.
		     */
		    var isMaskable = coreJsData ? isFunction : stubFalse;

		    /**
		     * Checks if `value` is likely a prototype object.
		     *
		     * @private
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
		     */
		    function isPrototype(value) {
		      var Ctor = value && value.constructor,
		          proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

		      return value === proto;
		    }

		    /**
		     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
		     *
		     * @private
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` if suitable for strict
		     *  equality comparisons, else `false`.
		     */
		    function isStrictComparable(value) {
		      return value === value && !isObject(value);
		    }

		    /**
		     * A specialized version of `matchesProperty` for source values suitable
		     * for strict equality comparisons, i.e. `===`.
		     *
		     * @private
		     * @param {string} key The key of the property to get.
		     * @param {*} srcValue The value to match.
		     * @returns {Function} Returns the new spec function.
		     */
		    function matchesStrictComparable(key, srcValue) {
		      return function(object) {
		        if (object == null) {
		          return false;
		        }
		        return object[key] === srcValue &&
		          (srcValue !== undefined$1 || (key in Object(object)));
		      };
		    }

		    /**
		     * A specialized version of `_.memoize` which clears the memoized function's
		     * cache when it exceeds `MAX_MEMOIZE_SIZE`.
		     *
		     * @private
		     * @param {Function} func The function to have its output memoized.
		     * @returns {Function} Returns the new memoized function.
		     */
		    function memoizeCapped(func) {
		      var result = memoize(func, function(key) {
		        if (cache.size === MAX_MEMOIZE_SIZE) {
		          cache.clear();
		        }
		        return key;
		      });

		      var cache = result.cache;
		      return result;
		    }

		    /**
		     * Merges the function metadata of `source` into `data`.
		     *
		     * Merging metadata reduces the number of wrappers used to invoke a function.
		     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
		     * may be applied regardless of execution order. Methods like `_.ary` and
		     * `_.rearg` modify function arguments, making the order in which they are
		     * executed important, preventing the merging of metadata. However, we make
		     * an exception for a safe combined case where curried functions have `_.ary`
		     * and or `_.rearg` applied.
		     *
		     * @private
		     * @param {Array} data The destination metadata.
		     * @param {Array} source The source metadata.
		     * @returns {Array} Returns `data`.
		     */
		    function mergeData(data, source) {
		      var bitmask = data[1],
		          srcBitmask = source[1],
		          newBitmask = bitmask | srcBitmask,
		          isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);

		      var isCombo =
		        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_CURRY_FLAG)) ||
		        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_REARG_FLAG) && (data[7].length <= source[8])) ||
		        ((srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG)) && (source[7].length <= source[8]) && (bitmask == WRAP_CURRY_FLAG));

		      // Exit early if metadata can't be merged.
		      if (!(isCommon || isCombo)) {
		        return data;
		      }
		      // Use source `thisArg` if available.
		      if (srcBitmask & WRAP_BIND_FLAG) {
		        data[2] = source[2];
		        // Set when currying a bound function.
		        newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
		      }
		      // Compose partial arguments.
		      var value = source[3];
		      if (value) {
		        var partials = data[3];
		        data[3] = partials ? composeArgs(partials, value, source[4]) : value;
		        data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
		      }
		      // Compose partial right arguments.
		      value = source[5];
		      if (value) {
		        partials = data[5];
		        data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
		        data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
		      }
		      // Use source `argPos` if available.
		      value = source[7];
		      if (value) {
		        data[7] = value;
		      }
		      // Use source `ary` if it's smaller.
		      if (srcBitmask & WRAP_ARY_FLAG) {
		        data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
		      }
		      // Use source `arity` if one is not provided.
		      if (data[9] == null) {
		        data[9] = source[9];
		      }
		      // Use source `func` and merge bitmasks.
		      data[0] = source[0];
		      data[1] = newBitmask;

		      return data;
		    }

		    /**
		     * This function is like
		     * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
		     * except that it includes inherited enumerable properties.
		     *
		     * @private
		     * @param {Object} object The object to query.
		     * @returns {Array} Returns the array of property names.
		     */
		    function nativeKeysIn(object) {
		      var result = [];
		      if (object != null) {
		        for (var key in Object(object)) {
		          result.push(key);
		        }
		      }
		      return result;
		    }

		    /**
		     * Converts `value` to a string using `Object.prototype.toString`.
		     *
		     * @private
		     * @param {*} value The value to convert.
		     * @returns {string} Returns the converted string.
		     */
		    function objectToString(value) {
		      return nativeObjectToString.call(value);
		    }

		    /**
		     * A specialized version of `baseRest` which transforms the rest array.
		     *
		     * @private
		     * @param {Function} func The function to apply a rest parameter to.
		     * @param {number} [start=func.length-1] The start position of the rest parameter.
		     * @param {Function} transform The rest array transform.
		     * @returns {Function} Returns the new function.
		     */
		    function overRest(func, start, transform) {
		      start = nativeMax(start === undefined$1 ? (func.length - 1) : start, 0);
		      return function() {
		        var args = arguments,
		            index = -1,
		            length = nativeMax(args.length - start, 0),
		            array = Array(length);

		        while (++index < length) {
		          array[index] = args[start + index];
		        }
		        index = -1;
		        var otherArgs = Array(start + 1);
		        while (++index < start) {
		          otherArgs[index] = args[index];
		        }
		        otherArgs[start] = transform(array);
		        return apply(func, this, otherArgs);
		      };
		    }

		    /**
		     * Gets the parent value at `path` of `object`.
		     *
		     * @private
		     * @param {Object} object The object to query.
		     * @param {Array} path The path to get the parent value of.
		     * @returns {*} Returns the parent value.
		     */
		    function parent(object, path) {
		      return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
		    }

		    /**
		     * Reorder `array` according to the specified indexes where the element at
		     * the first index is assigned as the first element, the element at
		     * the second index is assigned as the second element, and so on.
		     *
		     * @private
		     * @param {Array} array The array to reorder.
		     * @param {Array} indexes The arranged array indexes.
		     * @returns {Array} Returns `array`.
		     */
		    function reorder(array, indexes) {
		      var arrLength = array.length,
		          length = nativeMin(indexes.length, arrLength),
		          oldArray = copyArray(array);

		      while (length--) {
		        var index = indexes[length];
		        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined$1;
		      }
		      return array;
		    }

		    /**
		     * Gets the value at `key`, unless `key` is "__proto__" or "constructor".
		     *
		     * @private
		     * @param {Object} object The object to query.
		     * @param {string} key The key of the property to get.
		     * @returns {*} Returns the property value.
		     */
		    function safeGet(object, key) {
		      if (key === 'constructor' && typeof object[key] === 'function') {
		        return;
		      }

		      if (key == '__proto__') {
		        return;
		      }

		      return object[key];
		    }

		    /**
		     * Sets metadata for `func`.
		     *
		     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
		     * period of time, it will trip its breaker and transition to an identity
		     * function to avoid garbage collection pauses in V8. See
		     * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)
		     * for more details.
		     *
		     * @private
		     * @param {Function} func The function to associate metadata with.
		     * @param {*} data The metadata.
		     * @returns {Function} Returns `func`.
		     */
		    var setData = shortOut(baseSetData);

		    /**
		     * A simple wrapper around the global [`setTimeout`](https://mdn.io/setTimeout).
		     *
		     * @private
		     * @param {Function} func The function to delay.
		     * @param {number} wait The number of milliseconds to delay invocation.
		     * @returns {number|Object} Returns the timer id or timeout object.
		     */
		    var setTimeout = ctxSetTimeout || function(func, wait) {
		      return root.setTimeout(func, wait);
		    };

		    /**
		     * Sets the `toString` method of `func` to return `string`.
		     *
		     * @private
		     * @param {Function} func The function to modify.
		     * @param {Function} string The `toString` result.
		     * @returns {Function} Returns `func`.
		     */
		    var setToString = shortOut(baseSetToString);

		    /**
		     * Sets the `toString` method of `wrapper` to mimic the source of `reference`
		     * with wrapper details in a comment at the top of the source body.
		     *
		     * @private
		     * @param {Function} wrapper The function to modify.
		     * @param {Function} reference The reference function.
		     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
		     * @returns {Function} Returns `wrapper`.
		     */
		    function setWrapToString(wrapper, reference, bitmask) {
		      var source = (reference + '');
		      return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
		    }

		    /**
		     * Creates a function that'll short out and invoke `identity` instead
		     * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
		     * milliseconds.
		     *
		     * @private
		     * @param {Function} func The function to restrict.
		     * @returns {Function} Returns the new shortable function.
		     */
		    function shortOut(func) {
		      var count = 0,
		          lastCalled = 0;

		      return function() {
		        var stamp = nativeNow(),
		            remaining = HOT_SPAN - (stamp - lastCalled);

		        lastCalled = stamp;
		        if (remaining > 0) {
		          if (++count >= HOT_COUNT) {
		            return arguments[0];
		          }
		        } else {
		          count = 0;
		        }
		        return func.apply(undefined$1, arguments);
		      };
		    }

		    /**
		     * A specialized version of `_.shuffle` which mutates and sets the size of `array`.
		     *
		     * @private
		     * @param {Array} array The array to shuffle.
		     * @param {number} [size=array.length] The size of `array`.
		     * @returns {Array} Returns `array`.
		     */
		    function shuffleSelf(array, size) {
		      var index = -1,
		          length = array.length,
		          lastIndex = length - 1;

		      size = size === undefined$1 ? length : size;
		      while (++index < size) {
		        var rand = baseRandom(index, lastIndex),
		            value = array[rand];

		        array[rand] = array[index];
		        array[index] = value;
		      }
		      array.length = size;
		      return array;
		    }

		    /**
		     * Converts `string` to a property path array.
		     *
		     * @private
		     * @param {string} string The string to convert.
		     * @returns {Array} Returns the property path array.
		     */
		    var stringToPath = memoizeCapped(function(string) {
		      var result = [];
		      if (string.charCodeAt(0) === 46 /* . */) {
		        result.push('');
		      }
		      string.replace(rePropName, function(match, number, quote, subString) {
		        result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));
		      });
		      return result;
		    });

		    /**
		     * Converts `value` to a string key if it's not a string or symbol.
		     *
		     * @private
		     * @param {*} value The value to inspect.
		     * @returns {string|symbol} Returns the key.
		     */
		    function toKey(value) {
		      if (typeof value == 'string' || isSymbol(value)) {
		        return value;
		      }
		      var result = (value + '');
		      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
		    }

		    /**
		     * Converts `func` to its source code.
		     *
		     * @private
		     * @param {Function} func The function to convert.
		     * @returns {string} Returns the source code.
		     */
		    function toSource(func) {
		      if (func != null) {
		        try {
		          return funcToString.call(func);
		        } catch (e) {}
		        try {
		          return (func + '');
		        } catch (e) {}
		      }
		      return '';
		    }

		    /**
		     * Updates wrapper `details` based on `bitmask` flags.
		     *
		     * @private
		     * @returns {Array} details The details to modify.
		     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
		     * @returns {Array} Returns `details`.
		     */
		    function updateWrapDetails(details, bitmask) {
		      arrayEach(wrapFlags, function(pair) {
		        var value = '_.' + pair[0];
		        if ((bitmask & pair[1]) && !arrayIncludes(details, value)) {
		          details.push(value);
		        }
		      });
		      return details.sort();
		    }

		    /**
		     * Creates a clone of `wrapper`.
		     *
		     * @private
		     * @param {Object} wrapper The wrapper to clone.
		     * @returns {Object} Returns the cloned wrapper.
		     */
		    function wrapperClone(wrapper) {
		      if (wrapper instanceof LazyWrapper) {
		        return wrapper.clone();
		      }
		      var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
		      result.__actions__ = copyArray(wrapper.__actions__);
		      result.__index__  = wrapper.__index__;
		      result.__values__ = wrapper.__values__;
		      return result;
		    }

		    /*------------------------------------------------------------------------*/

		    /**
		     * Creates an array of elements split into groups the length of `size`.
		     * If `array` can't be split evenly, the final chunk will be the remaining
		     * elements.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category Array
		     * @param {Array} array The array to process.
		     * @param {number} [size=1] The length of each chunk
		     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
		     * @returns {Array} Returns the new array of chunks.
		     * @example
		     *
		     * _.chunk(['a', 'b', 'c', 'd'], 2);
		     * // => [['a', 'b'], ['c', 'd']]
		     *
		     * _.chunk(['a', 'b', 'c', 'd'], 3);
		     * // => [['a', 'b', 'c'], ['d']]
		     */
		    function chunk(array, size, guard) {
		      if ((guard ? isIterateeCall(array, size, guard) : size === undefined$1)) {
		        size = 1;
		      } else {
		        size = nativeMax(toInteger(size), 0);
		      }
		      var length = array == null ? 0 : array.length;
		      if (!length || size < 1) {
		        return [];
		      }
		      var index = 0,
		          resIndex = 0,
		          result = Array(nativeCeil(length / size));

		      while (index < length) {
		        result[resIndex++] = baseSlice(array, index, (index += size));
		      }
		      return result;
		    }

		    /**
		     * Creates an array with all falsey values removed. The values `false`, `null`,
		     * `0`, `""`, `undefined`, and `NaN` are falsey.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Array
		     * @param {Array} array The array to compact.
		     * @returns {Array} Returns the new array of filtered values.
		     * @example
		     *
		     * _.compact([0, 1, false, 2, '', 3]);
		     * // => [1, 2, 3]
		     */
		    function compact(array) {
		      var index = -1,
		          length = array == null ? 0 : array.length,
		          resIndex = 0,
		          result = [];

		      while (++index < length) {
		        var value = array[index];
		        if (value) {
		          result[resIndex++] = value;
		        }
		      }
		      return result;
		    }

		    /**
		     * Creates a new array concatenating `array` with any additional arrays
		     * and/or values.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Array
		     * @param {Array} array The array to concatenate.
		     * @param {...*} [values] The values to concatenate.
		     * @returns {Array} Returns the new concatenated array.
		     * @example
		     *
		     * var array = [1];
		     * var other = _.concat(array, 2, [3], [[4]]);
		     *
		     * console.log(other);
		     * // => [1, 2, 3, [4]]
		     *
		     * console.log(array);
		     * // => [1]
		     */
		    function concat() {
		      var length = arguments.length;
		      if (!length) {
		        return [];
		      }
		      var args = Array(length - 1),
		          array = arguments[0],
		          index = length;

		      while (index--) {
		        args[index - 1] = arguments[index];
		      }
		      return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));
		    }

		    /**
		     * Creates an array of `array` values not included in the other given arrays
		     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
		     * for equality comparisons. The order and references of result values are
		     * determined by the first array.
		     *
		     * **Note:** Unlike `_.pullAll`, this method returns a new array.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Array
		     * @param {Array} array The array to inspect.
		     * @param {...Array} [values] The values to exclude.
		     * @returns {Array} Returns the new array of filtered values.
		     * @see _.without, _.xor
		     * @example
		     *
		     * _.difference([2, 1], [2, 3]);
		     * // => [1]
		     */
		    var difference = baseRest(function(array, values) {
		      return isArrayLikeObject(array)
		        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true))
		        : [];
		    });

		    /**
		     * This method is like `_.difference` except that it accepts `iteratee` which
		     * is invoked for each element of `array` and `values` to generate the criterion
		     * by which they're compared. The order and references of result values are
		     * determined by the first array. The iteratee is invoked with one argument:
		     * (value).
		     *
		     * **Note:** Unlike `_.pullAllBy`, this method returns a new array.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Array
		     * @param {Array} array The array to inspect.
		     * @param {...Array} [values] The values to exclude.
		     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
		     * @returns {Array} Returns the new array of filtered values.
		     * @example
		     *
		     * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);
		     * // => [1.2]
		     *
		     * // The `_.property` iteratee shorthand.
		     * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');
		     * // => [{ 'x': 2 }]
		     */
		    var differenceBy = baseRest(function(array, values) {
		      var iteratee = last(values);
		      if (isArrayLikeObject(iteratee)) {
		        iteratee = undefined$1;
		      }
		      return isArrayLikeObject(array)
		        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), getIteratee(iteratee, 2))
		        : [];
		    });

		    /**
		     * This method is like `_.difference` except that it accepts `comparator`
		     * which is invoked to compare elements of `array` to `values`. The order and
		     * references of result values are determined by the first array. The comparator
		     * is invoked with two arguments: (arrVal, othVal).
		     *
		     * **Note:** Unlike `_.pullAllWith`, this method returns a new array.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Array
		     * @param {Array} array The array to inspect.
		     * @param {...Array} [values] The values to exclude.
		     * @param {Function} [comparator] The comparator invoked per element.
		     * @returns {Array} Returns the new array of filtered values.
		     * @example
		     *
		     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
		     *
		     * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);
		     * // => [{ 'x': 2, 'y': 1 }]
		     */
		    var differenceWith = baseRest(function(array, values) {
		      var comparator = last(values);
		      if (isArrayLikeObject(comparator)) {
		        comparator = undefined$1;
		      }
		      return isArrayLikeObject(array)
		        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined$1, comparator)
		        : [];
		    });

		    /**
		     * Creates a slice of `array` with `n` elements dropped from the beginning.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.5.0
		     * @category Array
		     * @param {Array} array The array to query.
		     * @param {number} [n=1] The number of elements to drop.
		     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
		     * @returns {Array} Returns the slice of `array`.
		     * @example
		     *
		     * _.drop([1, 2, 3]);
		     * // => [2, 3]
		     *
		     * _.drop([1, 2, 3], 2);
		     * // => [3]
		     *
		     * _.drop([1, 2, 3], 5);
		     * // => []
		     *
		     * _.drop([1, 2, 3], 0);
		     * // => [1, 2, 3]
		     */
		    function drop(array, n, guard) {
		      var length = array == null ? 0 : array.length;
		      if (!length) {
		        return [];
		      }
		      n = (guard || n === undefined$1) ? 1 : toInteger(n);
		      return baseSlice(array, n < 0 ? 0 : n, length);
		    }

		    /**
		     * Creates a slice of `array` with `n` elements dropped from the end.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category Array
		     * @param {Array} array The array to query.
		     * @param {number} [n=1] The number of elements to drop.
		     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
		     * @returns {Array} Returns the slice of `array`.
		     * @example
		     *
		     * _.dropRight([1, 2, 3]);
		     * // => [1, 2]
		     *
		     * _.dropRight([1, 2, 3], 2);
		     * // => [1]
		     *
		     * _.dropRight([1, 2, 3], 5);
		     * // => []
		     *
		     * _.dropRight([1, 2, 3], 0);
		     * // => [1, 2, 3]
		     */
		    function dropRight(array, n, guard) {
		      var length = array == null ? 0 : array.length;
		      if (!length) {
		        return [];
		      }
		      n = (guard || n === undefined$1) ? 1 : toInteger(n);
		      n = length - n;
		      return baseSlice(array, 0, n < 0 ? 0 : n);
		    }

		    /**
		     * Creates a slice of `array` excluding elements dropped from the end.
		     * Elements are dropped until `predicate` returns falsey. The predicate is
		     * invoked with three arguments: (value, index, array).
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category Array
		     * @param {Array} array The array to query.
		     * @param {Function} [predicate=_.identity] The function invoked per iteration.
		     * @returns {Array} Returns the slice of `array`.
		     * @example
		     *
		     * var users = [
		     *   { 'user': 'barney',  'active': true },
		     *   { 'user': 'fred',    'active': false },
		     *   { 'user': 'pebbles', 'active': false }
		     * ];
		     *
		     * _.dropRightWhile(users, function(o) { return !o.active; });
		     * // => objects for ['barney']
		     *
		     * // The `_.matches` iteratee shorthand.
		     * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });
		     * // => objects for ['barney', 'fred']
		     *
		     * // The `_.matchesProperty` iteratee shorthand.
		     * _.dropRightWhile(users, ['active', false]);
		     * // => objects for ['barney']
		     *
		     * // The `_.property` iteratee shorthand.
		     * _.dropRightWhile(users, 'active');
		     * // => objects for ['barney', 'fred', 'pebbles']
		     */
		    function dropRightWhile(array, predicate) {
		      return (array && array.length)
		        ? baseWhile(array, getIteratee(predicate, 3), true, true)
		        : [];
		    }

		    /**
		     * Creates a slice of `array` excluding elements dropped from the beginning.
		     * Elements are dropped until `predicate` returns falsey. The predicate is
		     * invoked with three arguments: (value, index, array).
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category Array
		     * @param {Array} array The array to query.
		     * @param {Function} [predicate=_.identity] The function invoked per iteration.
		     * @returns {Array} Returns the slice of `array`.
		     * @example
		     *
		     * var users = [
		     *   { 'user': 'barney',  'active': false },
		     *   { 'user': 'fred',    'active': false },
		     *   { 'user': 'pebbles', 'active': true }
		     * ];
		     *
		     * _.dropWhile(users, function(o) { return !o.active; });
		     * // => objects for ['pebbles']
		     *
		     * // The `_.matches` iteratee shorthand.
		     * _.dropWhile(users, { 'user': 'barney', 'active': false });
		     * // => objects for ['fred', 'pebbles']
		     *
		     * // The `_.matchesProperty` iteratee shorthand.
		     * _.dropWhile(users, ['active', false]);
		     * // => objects for ['pebbles']
		     *
		     * // The `_.property` iteratee shorthand.
		     * _.dropWhile(users, 'active');
		     * // => objects for ['barney', 'fred', 'pebbles']
		     */
		    function dropWhile(array, predicate) {
		      return (array && array.length)
		        ? baseWhile(array, getIteratee(predicate, 3), true)
		        : [];
		    }

		    /**
		     * Fills elements of `array` with `value` from `start` up to, but not
		     * including, `end`.
		     *
		     * **Note:** This method mutates `array`.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.2.0
		     * @category Array
		     * @param {Array} array The array to fill.
		     * @param {*} value The value to fill `array` with.
		     * @param {number} [start=0] The start position.
		     * @param {number} [end=array.length] The end position.
		     * @returns {Array} Returns `array`.
		     * @example
		     *
		     * var array = [1, 2, 3];
		     *
		     * _.fill(array, 'a');
		     * console.log(array);
		     * // => ['a', 'a', 'a']
		     *
		     * _.fill(Array(3), 2);
		     * // => [2, 2, 2]
		     *
		     * _.fill([4, 6, 8, 10], '*', 1, 3);
		     * // => [4, '*', '*', 10]
		     */
		    function fill(array, value, start, end) {
		      var length = array == null ? 0 : array.length;
		      if (!length) {
		        return [];
		      }
		      if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
		        start = 0;
		        end = length;
		      }
		      return baseFill(array, value, start, end);
		    }

		    /**
		     * This method is like `_.find` except that it returns the index of the first
		     * element `predicate` returns truthy for instead of the element itself.
		     *
		     * @static
		     * @memberOf _
		     * @since 1.1.0
		     * @category Array
		     * @param {Array} array The array to inspect.
		     * @param {Function} [predicate=_.identity] The function invoked per iteration.
		     * @param {number} [fromIndex=0] The index to search from.
		     * @returns {number} Returns the index of the found element, else `-1`.
		     * @example
		     *
		     * var users = [
		     *   { 'user': 'barney',  'active': false },
		     *   { 'user': 'fred',    'active': false },
		     *   { 'user': 'pebbles', 'active': true }
		     * ];
		     *
		     * _.findIndex(users, function(o) { return o.user == 'barney'; });
		     * // => 0
		     *
		     * // The `_.matches` iteratee shorthand.
		     * _.findIndex(users, { 'user': 'fred', 'active': false });
		     * // => 1
		     *
		     * // The `_.matchesProperty` iteratee shorthand.
		     * _.findIndex(users, ['active', false]);
		     * // => 0
		     *
		     * // The `_.property` iteratee shorthand.
		     * _.findIndex(users, 'active');
		     * // => 2
		     */
		    function findIndex(array, predicate, fromIndex) {
		      var length = array == null ? 0 : array.length;
		      if (!length) {
		        return -1;
		      }
		      var index = fromIndex == null ? 0 : toInteger(fromIndex);
		      if (index < 0) {
		        index = nativeMax(length + index, 0);
		      }
		      return baseFindIndex(array, getIteratee(predicate, 3), index);
		    }

		    /**
		     * This method is like `_.findIndex` except that it iterates over elements
		     * of `collection` from right to left.
		     *
		     * @static
		     * @memberOf _
		     * @since 2.0.0
		     * @category Array
		     * @param {Array} array The array to inspect.
		     * @param {Function} [predicate=_.identity] The function invoked per iteration.
		     * @param {number} [fromIndex=array.length-1] The index to search from.
		     * @returns {number} Returns the index of the found element, else `-1`.
		     * @example
		     *
		     * var users = [
		     *   { 'user': 'barney',  'active': true },
		     *   { 'user': 'fred',    'active': false },
		     *   { 'user': 'pebbles', 'active': false }
		     * ];
		     *
		     * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });
		     * // => 2
		     *
		     * // The `_.matches` iteratee shorthand.
		     * _.findLastIndex(users, { 'user': 'barney', 'active': true });
		     * // => 0
		     *
		     * // The `_.matchesProperty` iteratee shorthand.
		     * _.findLastIndex(users, ['active', false]);
		     * // => 2
		     *
		     * // The `_.property` iteratee shorthand.
		     * _.findLastIndex(users, 'active');
		     * // => 0
		     */
		    function findLastIndex(array, predicate, fromIndex) {
		      var length = array == null ? 0 : array.length;
		      if (!length) {
		        return -1;
		      }
		      var index = length - 1;
		      if (fromIndex !== undefined$1) {
		        index = toInteger(fromIndex);
		        index = fromIndex < 0
		          ? nativeMax(length + index, 0)
		          : nativeMin(index, length - 1);
		      }
		      return baseFindIndex(array, getIteratee(predicate, 3), index, true);
		    }

		    /**
		     * Flattens `array` a single level deep.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Array
		     * @param {Array} array The array to flatten.
		     * @returns {Array} Returns the new flattened array.
		     * @example
		     *
		     * _.flatten([1, [2, [3, [4]], 5]]);
		     * // => [1, 2, [3, [4]], 5]
		     */
		    function flatten(array) {
		      var length = array == null ? 0 : array.length;
		      return length ? baseFlatten(array, 1) : [];
		    }

		    /**
		     * Recursively flattens `array`.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category Array
		     * @param {Array} array The array to flatten.
		     * @returns {Array} Returns the new flattened array.
		     * @example
		     *
		     * _.flattenDeep([1, [2, [3, [4]], 5]]);
		     * // => [1, 2, 3, 4, 5]
		     */
		    function flattenDeep(array) {
		      var length = array == null ? 0 : array.length;
		      return length ? baseFlatten(array, INFINITY) : [];
		    }

		    /**
		     * Recursively flatten `array` up to `depth` times.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.4.0
		     * @category Array
		     * @param {Array} array The array to flatten.
		     * @param {number} [depth=1] The maximum recursion depth.
		     * @returns {Array} Returns the new flattened array.
		     * @example
		     *
		     * var array = [1, [2, [3, [4]], 5]];
		     *
		     * _.flattenDepth(array, 1);
		     * // => [1, 2, [3, [4]], 5]
		     *
		     * _.flattenDepth(array, 2);
		     * // => [1, 2, 3, [4], 5]
		     */
		    function flattenDepth(array, depth) {
		      var length = array == null ? 0 : array.length;
		      if (!length) {
		        return [];
		      }
		      depth = depth === undefined$1 ? 1 : toInteger(depth);
		      return baseFlatten(array, depth);
		    }

		    /**
		     * The inverse of `_.toPairs`; this method returns an object composed
		     * from key-value `pairs`.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Array
		     * @param {Array} pairs The key-value pairs.
		     * @returns {Object} Returns the new object.
		     * @example
		     *
		     * _.fromPairs([['a', 1], ['b', 2]]);
		     * // => { 'a': 1, 'b': 2 }
		     */
		    function fromPairs(pairs) {
		      var index = -1,
		          length = pairs == null ? 0 : pairs.length,
		          result = {};

		      while (++index < length) {
		        var pair = pairs[index];
		        result[pair[0]] = pair[1];
		      }
		      return result;
		    }

		    /**
		     * Gets the first element of `array`.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @alias first
		     * @category Array
		     * @param {Array} array The array to query.
		     * @returns {*} Returns the first element of `array`.
		     * @example
		     *
		     * _.head([1, 2, 3]);
		     * // => 1
		     *
		     * _.head([]);
		     * // => undefined
		     */
		    function head(array) {
		      return (array && array.length) ? array[0] : undefined$1;
		    }

		    /**
		     * Gets the index at which the first occurrence of `value` is found in `array`
		     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
		     * for equality comparisons. If `fromIndex` is negative, it's used as the
		     * offset from the end of `array`.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Array
		     * @param {Array} array The array to inspect.
		     * @param {*} value The value to search for.
		     * @param {number} [fromIndex=0] The index to search from.
		     * @returns {number} Returns the index of the matched value, else `-1`.
		     * @example
		     *
		     * _.indexOf([1, 2, 1, 2], 2);
		     * // => 1
		     *
		     * // Search from the `fromIndex`.
		     * _.indexOf([1, 2, 1, 2], 2, 2);
		     * // => 3
		     */
		    function indexOf(array, value, fromIndex) {
		      var length = array == null ? 0 : array.length;
		      if (!length) {
		        return -1;
		      }
		      var index = fromIndex == null ? 0 : toInteger(fromIndex);
		      if (index < 0) {
		        index = nativeMax(length + index, 0);
		      }
		      return baseIndexOf(array, value, index);
		    }

		    /**
		     * Gets all but the last element of `array`.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Array
		     * @param {Array} array The array to query.
		     * @returns {Array} Returns the slice of `array`.
		     * @example
		     *
		     * _.initial([1, 2, 3]);
		     * // => [1, 2]
		     */
		    function initial(array) {
		      var length = array == null ? 0 : array.length;
		      return length ? baseSlice(array, 0, -1) : [];
		    }

		    /**
		     * Creates an array of unique values that are included in all given arrays
		     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
		     * for equality comparisons. The order and references of result values are
		     * determined by the first array.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Array
		     * @param {...Array} [arrays] The arrays to inspect.
		     * @returns {Array} Returns the new array of intersecting values.
		     * @example
		     *
		     * _.intersection([2, 1], [2, 3]);
		     * // => [2]
		     */
		    var intersection = baseRest(function(arrays) {
		      var mapped = arrayMap(arrays, castArrayLikeObject);
		      return (mapped.length && mapped[0] === arrays[0])
		        ? baseIntersection(mapped)
		        : [];
		    });

		    /**
		     * This method is like `_.intersection` except that it accepts `iteratee`
		     * which is invoked for each element of each `arrays` to generate the criterion
		     * by which they're compared. The order and references of result values are
		     * determined by the first array. The iteratee is invoked with one argument:
		     * (value).
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Array
		     * @param {...Array} [arrays] The arrays to inspect.
		     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
		     * @returns {Array} Returns the new array of intersecting values.
		     * @example
		     *
		     * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);
		     * // => [2.1]
		     *
		     * // The `_.property` iteratee shorthand.
		     * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
		     * // => [{ 'x': 1 }]
		     */
		    var intersectionBy = baseRest(function(arrays) {
		      var iteratee = last(arrays),
		          mapped = arrayMap(arrays, castArrayLikeObject);

		      if (iteratee === last(mapped)) {
		        iteratee = undefined$1;
		      } else {
		        mapped.pop();
		      }
		      return (mapped.length && mapped[0] === arrays[0])
		        ? baseIntersection(mapped, getIteratee(iteratee, 2))
		        : [];
		    });

		    /**
		     * This method is like `_.intersection` except that it accepts `comparator`
		     * which is invoked to compare elements of `arrays`. The order and references
		     * of result values are determined by the first array. The comparator is
		     * invoked with two arguments: (arrVal, othVal).
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Array
		     * @param {...Array} [arrays] The arrays to inspect.
		     * @param {Function} [comparator] The comparator invoked per element.
		     * @returns {Array} Returns the new array of intersecting values.
		     * @example
		     *
		     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
		     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
		     *
		     * _.intersectionWith(objects, others, _.isEqual);
		     * // => [{ 'x': 1, 'y': 2 }]
		     */
		    var intersectionWith = baseRest(function(arrays) {
		      var comparator = last(arrays),
		          mapped = arrayMap(arrays, castArrayLikeObject);

		      comparator = typeof comparator == 'function' ? comparator : undefined$1;
		      if (comparator) {
		        mapped.pop();
		      }
		      return (mapped.length && mapped[0] === arrays[0])
		        ? baseIntersection(mapped, undefined$1, comparator)
		        : [];
		    });

		    /**
		     * Converts all elements in `array` into a string separated by `separator`.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Array
		     * @param {Array} array The array to convert.
		     * @param {string} [separator=','] The element separator.
		     * @returns {string} Returns the joined string.
		     * @example
		     *
		     * _.join(['a', 'b', 'c'], '~');
		     * // => 'a~b~c'
		     */
		    function join(array, separator) {
		      return array == null ? '' : nativeJoin.call(array, separator);
		    }

		    /**
		     * Gets the last element of `array`.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Array
		     * @param {Array} array The array to query.
		     * @returns {*} Returns the last element of `array`.
		     * @example
		     *
		     * _.last([1, 2, 3]);
		     * // => 3
		     */
		    function last(array) {
		      var length = array == null ? 0 : array.length;
		      return length ? array[length - 1] : undefined$1;
		    }

		    /**
		     * This method is like `_.indexOf` except that it iterates over elements of
		     * `array` from right to left.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Array
		     * @param {Array} array The array to inspect.
		     * @param {*} value The value to search for.
		     * @param {number} [fromIndex=array.length-1] The index to search from.
		     * @returns {number} Returns the index of the matched value, else `-1`.
		     * @example
		     *
		     * _.lastIndexOf([1, 2, 1, 2], 2);
		     * // => 3
		     *
		     * // Search from the `fromIndex`.
		     * _.lastIndexOf([1, 2, 1, 2], 2, 2);
		     * // => 1
		     */
		    function lastIndexOf(array, value, fromIndex) {
		      var length = array == null ? 0 : array.length;
		      if (!length) {
		        return -1;
		      }
		      var index = length;
		      if (fromIndex !== undefined$1) {
		        index = toInteger(fromIndex);
		        index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
		      }
		      return value === value
		        ? strictLastIndexOf(array, value, index)
		        : baseFindIndex(array, baseIsNaN, index, true);
		    }

		    /**
		     * Gets the element at index `n` of `array`. If `n` is negative, the nth
		     * element from the end is returned.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.11.0
		     * @category Array
		     * @param {Array} array The array to query.
		     * @param {number} [n=0] The index of the element to return.
		     * @returns {*} Returns the nth element of `array`.
		     * @example
		     *
		     * var array = ['a', 'b', 'c', 'd'];
		     *
		     * _.nth(array, 1);
		     * // => 'b'
		     *
		     * _.nth(array, -2);
		     * // => 'c';
		     */
		    function nth(array, n) {
		      return (array && array.length) ? baseNth(array, toInteger(n)) : undefined$1;
		    }

		    /**
		     * Removes all given values from `array` using
		     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
		     * for equality comparisons.
		     *
		     * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`
		     * to remove elements from an array by predicate.
		     *
		     * @static
		     * @memberOf _
		     * @since 2.0.0
		     * @category Array
		     * @param {Array} array The array to modify.
		     * @param {...*} [values] The values to remove.
		     * @returns {Array} Returns `array`.
		     * @example
		     *
		     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
		     *
		     * _.pull(array, 'a', 'c');
		     * console.log(array);
		     * // => ['b', 'b']
		     */
		    var pull = baseRest(pullAll);

		    /**
		     * This method is like `_.pull` except that it accepts an array of values to remove.
		     *
		     * **Note:** Unlike `_.difference`, this method mutates `array`.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Array
		     * @param {Array} array The array to modify.
		     * @param {Array} values The values to remove.
		     * @returns {Array} Returns `array`.
		     * @example
		     *
		     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
		     *
		     * _.pullAll(array, ['a', 'c']);
		     * console.log(array);
		     * // => ['b', 'b']
		     */
		    function pullAll(array, values) {
		      return (array && array.length && values && values.length)
		        ? basePullAll(array, values)
		        : array;
		    }

		    /**
		     * This method is like `_.pullAll` except that it accepts `iteratee` which is
		     * invoked for each element of `array` and `values` to generate the criterion
		     * by which they're compared. The iteratee is invoked with one argument: (value).
		     *
		     * **Note:** Unlike `_.differenceBy`, this method mutates `array`.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Array
		     * @param {Array} array The array to modify.
		     * @param {Array} values The values to remove.
		     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
		     * @returns {Array} Returns `array`.
		     * @example
		     *
		     * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];
		     *
		     * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');
		     * console.log(array);
		     * // => [{ 'x': 2 }]
		     */
		    function pullAllBy(array, values, iteratee) {
		      return (array && array.length && values && values.length)
		        ? basePullAll(array, values, getIteratee(iteratee, 2))
		        : array;
		    }

		    /**
		     * This method is like `_.pullAll` except that it accepts `comparator` which
		     * is invoked to compare elements of `array` to `values`. The comparator is
		     * invoked with two arguments: (arrVal, othVal).
		     *
		     * **Note:** Unlike `_.differenceWith`, this method mutates `array`.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.6.0
		     * @category Array
		     * @param {Array} array The array to modify.
		     * @param {Array} values The values to remove.
		     * @param {Function} [comparator] The comparator invoked per element.
		     * @returns {Array} Returns `array`.
		     * @example
		     *
		     * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];
		     *
		     * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);
		     * console.log(array);
		     * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]
		     */
		    function pullAllWith(array, values, comparator) {
		      return (array && array.length && values && values.length)
		        ? basePullAll(array, values, undefined$1, comparator)
		        : array;
		    }

		    /**
		     * Removes elements from `array` corresponding to `indexes` and returns an
		     * array of removed elements.
		     *
		     * **Note:** Unlike `_.at`, this method mutates `array`.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category Array
		     * @param {Array} array The array to modify.
		     * @param {...(number|number[])} [indexes] The indexes of elements to remove.
		     * @returns {Array} Returns the new array of removed elements.
		     * @example
		     *
		     * var array = ['a', 'b', 'c', 'd'];
		     * var pulled = _.pullAt(array, [1, 3]);
		     *
		     * console.log(array);
		     * // => ['a', 'c']
		     *
		     * console.log(pulled);
		     * // => ['b', 'd']
		     */
		    var pullAt = flatRest(function(array, indexes) {
		      var length = array == null ? 0 : array.length,
		          result = baseAt(array, indexes);

		      basePullAt(array, arrayMap(indexes, function(index) {
		        return isIndex(index, length) ? +index : index;
		      }).sort(compareAscending));

		      return result;
		    });

		    /**
		     * Removes all elements from `array` that `predicate` returns truthy for
		     * and returns an array of the removed elements. The predicate is invoked
		     * with three arguments: (value, index, array).
		     *
		     * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`
		     * to pull elements from an array by value.
		     *
		     * @static
		     * @memberOf _
		     * @since 2.0.0
		     * @category Array
		     * @param {Array} array The array to modify.
		     * @param {Function} [predicate=_.identity] The function invoked per iteration.
		     * @returns {Array} Returns the new array of removed elements.
		     * @example
		     *
		     * var array = [1, 2, 3, 4];
		     * var evens = _.remove(array, function(n) {
		     *   return n % 2 == 0;
		     * });
		     *
		     * console.log(array);
		     * // => [1, 3]
		     *
		     * console.log(evens);
		     * // => [2, 4]
		     */
		    function remove(array, predicate) {
		      var result = [];
		      if (!(array && array.length)) {
		        return result;
		      }
		      var index = -1,
		          indexes = [],
		          length = array.length;

		      predicate = getIteratee(predicate, 3);
		      while (++index < length) {
		        var value = array[index];
		        if (predicate(value, index, array)) {
		          result.push(value);
		          indexes.push(index);
		        }
		      }
		      basePullAt(array, indexes);
		      return result;
		    }

		    /**
		     * Reverses `array` so that the first element becomes the last, the second
		     * element becomes the second to last, and so on.
		     *
		     * **Note:** This method mutates `array` and is based on
		     * [`Array#reverse`](https://mdn.io/Array/reverse).
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Array
		     * @param {Array} array The array to modify.
		     * @returns {Array} Returns `array`.
		     * @example
		     *
		     * var array = [1, 2, 3];
		     *
		     * _.reverse(array);
		     * // => [3, 2, 1]
		     *
		     * console.log(array);
		     * // => [3, 2, 1]
		     */
		    function reverse(array) {
		      return array == null ? array : nativeReverse.call(array);
		    }

		    /**
		     * Creates a slice of `array` from `start` up to, but not including, `end`.
		     *
		     * **Note:** This method is used instead of
		     * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are
		     * returned.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category Array
		     * @param {Array} array The array to slice.
		     * @param {number} [start=0] The start position.
		     * @param {number} [end=array.length] The end position.
		     * @returns {Array} Returns the slice of `array`.
		     */
		    function slice(array, start, end) {
		      var length = array == null ? 0 : array.length;
		      if (!length) {
		        return [];
		      }
		      if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
		        start = 0;
		        end = length;
		      }
		      else {
		        start = start == null ? 0 : toInteger(start);
		        end = end === undefined$1 ? length : toInteger(end);
		      }
		      return baseSlice(array, start, end);
		    }

		    /**
		     * Uses a binary search to determine the lowest index at which `value`
		     * should be inserted into `array` in order to maintain its sort order.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Array
		     * @param {Array} array The sorted array to inspect.
		     * @param {*} value The value to evaluate.
		     * @returns {number} Returns the index at which `value` should be inserted
		     *  into `array`.
		     * @example
		     *
		     * _.sortedIndex([30, 50], 40);
		     * // => 1
		     */
		    function sortedIndex(array, value) {
		      return baseSortedIndex(array, value);
		    }

		    /**
		     * This method is like `_.sortedIndex` except that it accepts `iteratee`
		     * which is invoked for `value` and each element of `array` to compute their
		     * sort ranking. The iteratee is invoked with one argument: (value).
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Array
		     * @param {Array} array The sorted array to inspect.
		     * @param {*} value The value to evaluate.
		     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
		     * @returns {number} Returns the index at which `value` should be inserted
		     *  into `array`.
		     * @example
		     *
		     * var objects = [{ 'x': 4 }, { 'x': 5 }];
		     *
		     * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
		     * // => 0
		     *
		     * // The `_.property` iteratee shorthand.
		     * _.sortedIndexBy(objects, { 'x': 4 }, 'x');
		     * // => 0
		     */
		    function sortedIndexBy(array, value, iteratee) {
		      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2));
		    }

		    /**
		     * This method is like `_.indexOf` except that it performs a binary
		     * search on a sorted `array`.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Array
		     * @param {Array} array The array to inspect.
		     * @param {*} value The value to search for.
		     * @returns {number} Returns the index of the matched value, else `-1`.
		     * @example
		     *
		     * _.sortedIndexOf([4, 5, 5, 5, 6], 5);
		     * // => 1
		     */
		    function sortedIndexOf(array, value) {
		      var length = array == null ? 0 : array.length;
		      if (length) {
		        var index = baseSortedIndex(array, value);
		        if (index < length && eq(array[index], value)) {
		          return index;
		        }
		      }
		      return -1;
		    }

		    /**
		     * This method is like `_.sortedIndex` except that it returns the highest
		     * index at which `value` should be inserted into `array` in order to
		     * maintain its sort order.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category Array
		     * @param {Array} array The sorted array to inspect.
		     * @param {*} value The value to evaluate.
		     * @returns {number} Returns the index at which `value` should be inserted
		     *  into `array`.
		     * @example
		     *
		     * _.sortedLastIndex([4, 5, 5, 5, 6], 5);
		     * // => 4
		     */
		    function sortedLastIndex(array, value) {
		      return baseSortedIndex(array, value, true);
		    }

		    /**
		     * This method is like `_.sortedLastIndex` except that it accepts `iteratee`
		     * which is invoked for `value` and each element of `array` to compute their
		     * sort ranking. The iteratee is invoked with one argument: (value).
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Array
		     * @param {Array} array The sorted array to inspect.
		     * @param {*} value The value to evaluate.
		     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
		     * @returns {number} Returns the index at which `value` should be inserted
		     *  into `array`.
		     * @example
		     *
		     * var objects = [{ 'x': 4 }, { 'x': 5 }];
		     *
		     * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
		     * // => 1
		     *
		     * // The `_.property` iteratee shorthand.
		     * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');
		     * // => 1
		     */
		    function sortedLastIndexBy(array, value, iteratee) {
		      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2), true);
		    }

		    /**
		     * This method is like `_.lastIndexOf` except that it performs a binary
		     * search on a sorted `array`.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Array
		     * @param {Array} array The array to inspect.
		     * @param {*} value The value to search for.
		     * @returns {number} Returns the index of the matched value, else `-1`.
		     * @example
		     *
		     * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);
		     * // => 3
		     */
		    function sortedLastIndexOf(array, value) {
		      var length = array == null ? 0 : array.length;
		      if (length) {
		        var index = baseSortedIndex(array, value, true) - 1;
		        if (eq(array[index], value)) {
		          return index;
		        }
		      }
		      return -1;
		    }

		    /**
		     * This method is like `_.uniq` except that it's designed and optimized
		     * for sorted arrays.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Array
		     * @param {Array} array The array to inspect.
		     * @returns {Array} Returns the new duplicate free array.
		     * @example
		     *
		     * _.sortedUniq([1, 1, 2]);
		     * // => [1, 2]
		     */
		    function sortedUniq(array) {
		      return (array && array.length)
		        ? baseSortedUniq(array)
		        : [];
		    }

		    /**
		     * This method is like `_.uniqBy` except that it's designed and optimized
		     * for sorted arrays.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Array
		     * @param {Array} array The array to inspect.
		     * @param {Function} [iteratee] The iteratee invoked per element.
		     * @returns {Array} Returns the new duplicate free array.
		     * @example
		     *
		     * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);
		     * // => [1.1, 2.3]
		     */
		    function sortedUniqBy(array, iteratee) {
		      return (array && array.length)
		        ? baseSortedUniq(array, getIteratee(iteratee, 2))
		        : [];
		    }

		    /**
		     * Gets all but the first element of `array`.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Array
		     * @param {Array} array The array to query.
		     * @returns {Array} Returns the slice of `array`.
		     * @example
		     *
		     * _.tail([1, 2, 3]);
		     * // => [2, 3]
		     */
		    function tail(array) {
		      var length = array == null ? 0 : array.length;
		      return length ? baseSlice(array, 1, length) : [];
		    }

		    /**
		     * Creates a slice of `array` with `n` elements taken from the beginning.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Array
		     * @param {Array} array The array to query.
		     * @param {number} [n=1] The number of elements to take.
		     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
		     * @returns {Array} Returns the slice of `array`.
		     * @example
		     *
		     * _.take([1, 2, 3]);
		     * // => [1]
		     *
		     * _.take([1, 2, 3], 2);
		     * // => [1, 2]
		     *
		     * _.take([1, 2, 3], 5);
		     * // => [1, 2, 3]
		     *
		     * _.take([1, 2, 3], 0);
		     * // => []
		     */
		    function take(array, n, guard) {
		      if (!(array && array.length)) {
		        return [];
		      }
		      n = (guard || n === undefined$1) ? 1 : toInteger(n);
		      return baseSlice(array, 0, n < 0 ? 0 : n);
		    }

		    /**
		     * Creates a slice of `array` with `n` elements taken from the end.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category Array
		     * @param {Array} array The array to query.
		     * @param {number} [n=1] The number of elements to take.
		     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
		     * @returns {Array} Returns the slice of `array`.
		     * @example
		     *
		     * _.takeRight([1, 2, 3]);
		     * // => [3]
		     *
		     * _.takeRight([1, 2, 3], 2);
		     * // => [2, 3]
		     *
		     * _.takeRight([1, 2, 3], 5);
		     * // => [1, 2, 3]
		     *
		     * _.takeRight([1, 2, 3], 0);
		     * // => []
		     */
		    function takeRight(array, n, guard) {
		      var length = array == null ? 0 : array.length;
		      if (!length) {
		        return [];
		      }
		      n = (guard || n === undefined$1) ? 1 : toInteger(n);
		      n = length - n;
		      return baseSlice(array, n < 0 ? 0 : n, length);
		    }

		    /**
		     * Creates a slice of `array` with elements taken from the end. Elements are
		     * taken until `predicate` returns falsey. The predicate is invoked with
		     * three arguments: (value, index, array).
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category Array
		     * @param {Array} array The array to query.
		     * @param {Function} [predicate=_.identity] The function invoked per iteration.
		     * @returns {Array} Returns the slice of `array`.
		     * @example
		     *
		     * var users = [
		     *   { 'user': 'barney',  'active': true },
		     *   { 'user': 'fred',    'active': false },
		     *   { 'user': 'pebbles', 'active': false }
		     * ];
		     *
		     * _.takeRightWhile(users, function(o) { return !o.active; });
		     * // => objects for ['fred', 'pebbles']
		     *
		     * // The `_.matches` iteratee shorthand.
		     * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });
		     * // => objects for ['pebbles']
		     *
		     * // The `_.matchesProperty` iteratee shorthand.
		     * _.takeRightWhile(users, ['active', false]);
		     * // => objects for ['fred', 'pebbles']
		     *
		     * // The `_.property` iteratee shorthand.
		     * _.takeRightWhile(users, 'active');
		     * // => []
		     */
		    function takeRightWhile(array, predicate) {
		      return (array && array.length)
		        ? baseWhile(array, getIteratee(predicate, 3), false, true)
		        : [];
		    }

		    /**
		     * Creates a slice of `array` with elements taken from the beginning. Elements
		     * are taken until `predicate` returns falsey. The predicate is invoked with
		     * three arguments: (value, index, array).
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category Array
		     * @param {Array} array The array to query.
		     * @param {Function} [predicate=_.identity] The function invoked per iteration.
		     * @returns {Array} Returns the slice of `array`.
		     * @example
		     *
		     * var users = [
		     *   { 'user': 'barney',  'active': false },
		     *   { 'user': 'fred',    'active': false },
		     *   { 'user': 'pebbles', 'active': true }
		     * ];
		     *
		     * _.takeWhile(users, function(o) { return !o.active; });
		     * // => objects for ['barney', 'fred']
		     *
		     * // The `_.matches` iteratee shorthand.
		     * _.takeWhile(users, { 'user': 'barney', 'active': false });
		     * // => objects for ['barney']
		     *
		     * // The `_.matchesProperty` iteratee shorthand.
		     * _.takeWhile(users, ['active', false]);
		     * // => objects for ['barney', 'fred']
		     *
		     * // The `_.property` iteratee shorthand.
		     * _.takeWhile(users, 'active');
		     * // => []
		     */
		    function takeWhile(array, predicate) {
		      return (array && array.length)
		        ? baseWhile(array, getIteratee(predicate, 3))
		        : [];
		    }

		    /**
		     * Creates an array of unique values, in order, from all given arrays using
		     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
		     * for equality comparisons.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Array
		     * @param {...Array} [arrays] The arrays to inspect.
		     * @returns {Array} Returns the new array of combined values.
		     * @example
		     *
		     * _.union([2], [1, 2]);
		     * // => [2, 1]
		     */
		    var union = baseRest(function(arrays) {
		      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
		    });

		    /**
		     * This method is like `_.union` except that it accepts `iteratee` which is
		     * invoked for each element of each `arrays` to generate the criterion by
		     * which uniqueness is computed. Result values are chosen from the first
		     * array in which the value occurs. The iteratee is invoked with one argument:
		     * (value).
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Array
		     * @param {...Array} [arrays] The arrays to inspect.
		     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
		     * @returns {Array} Returns the new array of combined values.
		     * @example
		     *
		     * _.unionBy([2.1], [1.2, 2.3], Math.floor);
		     * // => [2.1, 1.2]
		     *
		     * // The `_.property` iteratee shorthand.
		     * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
		     * // => [{ 'x': 1 }, { 'x': 2 }]
		     */
		    var unionBy = baseRest(function(arrays) {
		      var iteratee = last(arrays);
		      if (isArrayLikeObject(iteratee)) {
		        iteratee = undefined$1;
		      }
		      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee, 2));
		    });

		    /**
		     * This method is like `_.union` except that it accepts `comparator` which
		     * is invoked to compare elements of `arrays`. Result values are chosen from
		     * the first array in which the value occurs. The comparator is invoked
		     * with two arguments: (arrVal, othVal).
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Array
		     * @param {...Array} [arrays] The arrays to inspect.
		     * @param {Function} [comparator] The comparator invoked per element.
		     * @returns {Array} Returns the new array of combined values.
		     * @example
		     *
		     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
		     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
		     *
		     * _.unionWith(objects, others, _.isEqual);
		     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
		     */
		    var unionWith = baseRest(function(arrays) {
		      var comparator = last(arrays);
		      comparator = typeof comparator == 'function' ? comparator : undefined$1;
		      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined$1, comparator);
		    });

		    /**
		     * Creates a duplicate-free version of an array, using
		     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
		     * for equality comparisons, in which only the first occurrence of each element
		     * is kept. The order of result values is determined by the order they occur
		     * in the array.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Array
		     * @param {Array} array The array to inspect.
		     * @returns {Array} Returns the new duplicate free array.
		     * @example
		     *
		     * _.uniq([2, 1, 2]);
		     * // => [2, 1]
		     */
		    function uniq(array) {
		      return (array && array.length) ? baseUniq(array) : [];
		    }

		    /**
		     * This method is like `_.uniq` except that it accepts `iteratee` which is
		     * invoked for each element in `array` to generate the criterion by which
		     * uniqueness is computed. The order of result values is determined by the
		     * order they occur in the array. The iteratee is invoked with one argument:
		     * (value).
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Array
		     * @param {Array} array The array to inspect.
		     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
		     * @returns {Array} Returns the new duplicate free array.
		     * @example
		     *
		     * _.uniqBy([2.1, 1.2, 2.3], Math.floor);
		     * // => [2.1, 1.2]
		     *
		     * // The `_.property` iteratee shorthand.
		     * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
		     * // => [{ 'x': 1 }, { 'x': 2 }]
		     */
		    function uniqBy(array, iteratee) {
		      return (array && array.length) ? baseUniq(array, getIteratee(iteratee, 2)) : [];
		    }

		    /**
		     * This method is like `_.uniq` except that it accepts `comparator` which
		     * is invoked to compare elements of `array`. The order of result values is
		     * determined by the order they occur in the array.The comparator is invoked
		     * with two arguments: (arrVal, othVal).
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Array
		     * @param {Array} array The array to inspect.
		     * @param {Function} [comparator] The comparator invoked per element.
		     * @returns {Array} Returns the new duplicate free array.
		     * @example
		     *
		     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];
		     *
		     * _.uniqWith(objects, _.isEqual);
		     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]
		     */
		    function uniqWith(array, comparator) {
		      comparator = typeof comparator == 'function' ? comparator : undefined$1;
		      return (array && array.length) ? baseUniq(array, undefined$1, comparator) : [];
		    }

		    /**
		     * This method is like `_.zip` except that it accepts an array of grouped
		     * elements and creates an array regrouping the elements to their pre-zip
		     * configuration.
		     *
		     * @static
		     * @memberOf _
		     * @since 1.2.0
		     * @category Array
		     * @param {Array} array The array of grouped elements to process.
		     * @returns {Array} Returns the new array of regrouped elements.
		     * @example
		     *
		     * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);
		     * // => [['a', 1, true], ['b', 2, false]]
		     *
		     * _.unzip(zipped);
		     * // => [['a', 'b'], [1, 2], [true, false]]
		     */
		    function unzip(array) {
		      if (!(array && array.length)) {
		        return [];
		      }
		      var length = 0;
		      array = arrayFilter(array, function(group) {
		        if (isArrayLikeObject(group)) {
		          length = nativeMax(group.length, length);
		          return true;
		        }
		      });
		      return baseTimes(length, function(index) {
		        return arrayMap(array, baseProperty(index));
		      });
		    }

		    /**
		     * This method is like `_.unzip` except that it accepts `iteratee` to specify
		     * how regrouped values should be combined. The iteratee is invoked with the
		     * elements of each group: (...group).
		     *
		     * @static
		     * @memberOf _
		     * @since 3.8.0
		     * @category Array
		     * @param {Array} array The array of grouped elements to process.
		     * @param {Function} [iteratee=_.identity] The function to combine
		     *  regrouped values.
		     * @returns {Array} Returns the new array of regrouped elements.
		     * @example
		     *
		     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
		     * // => [[1, 10, 100], [2, 20, 200]]
		     *
		     * _.unzipWith(zipped, _.add);
		     * // => [3, 30, 300]
		     */
		    function unzipWith(array, iteratee) {
		      if (!(array && array.length)) {
		        return [];
		      }
		      var result = unzip(array);
		      if (iteratee == null) {
		        return result;
		      }
		      return arrayMap(result, function(group) {
		        return apply(iteratee, undefined$1, group);
		      });
		    }

		    /**
		     * Creates an array excluding all given values using
		     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
		     * for equality comparisons.
		     *
		     * **Note:** Unlike `_.pull`, this method returns a new array.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Array
		     * @param {Array} array The array to inspect.
		     * @param {...*} [values] The values to exclude.
		     * @returns {Array} Returns the new array of filtered values.
		     * @see _.difference, _.xor
		     * @example
		     *
		     * _.without([2, 1, 2, 3], 1, 2);
		     * // => [3]
		     */
		    var without = baseRest(function(array, values) {
		      return isArrayLikeObject(array)
		        ? baseDifference(array, values)
		        : [];
		    });

		    /**
		     * Creates an array of unique values that is the
		     * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
		     * of the given arrays. The order of result values is determined by the order
		     * they occur in the arrays.
		     *
		     * @static
		     * @memberOf _
		     * @since 2.4.0
		     * @category Array
		     * @param {...Array} [arrays] The arrays to inspect.
		     * @returns {Array} Returns the new array of filtered values.
		     * @see _.difference, _.without
		     * @example
		     *
		     * _.xor([2, 1], [2, 3]);
		     * // => [1, 3]
		     */
		    var xor = baseRest(function(arrays) {
		      return baseXor(arrayFilter(arrays, isArrayLikeObject));
		    });

		    /**
		     * This method is like `_.xor` except that it accepts `iteratee` which is
		     * invoked for each element of each `arrays` to generate the criterion by
		     * which by which they're compared. The order of result values is determined
		     * by the order they occur in the arrays. The iteratee is invoked with one
		     * argument: (value).
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Array
		     * @param {...Array} [arrays] The arrays to inspect.
		     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
		     * @returns {Array} Returns the new array of filtered values.
		     * @example
		     *
		     * _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);
		     * // => [1.2, 3.4]
		     *
		     * // The `_.property` iteratee shorthand.
		     * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
		     * // => [{ 'x': 2 }]
		     */
		    var xorBy = baseRest(function(arrays) {
		      var iteratee = last(arrays);
		      if (isArrayLikeObject(iteratee)) {
		        iteratee = undefined$1;
		      }
		      return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee, 2));
		    });

		    /**
		     * This method is like `_.xor` except that it accepts `comparator` which is
		     * invoked to compare elements of `arrays`. The order of result values is
		     * determined by the order they occur in the arrays. The comparator is invoked
		     * with two arguments: (arrVal, othVal).
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Array
		     * @param {...Array} [arrays] The arrays to inspect.
		     * @param {Function} [comparator] The comparator invoked per element.
		     * @returns {Array} Returns the new array of filtered values.
		     * @example
		     *
		     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
		     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
		     *
		     * _.xorWith(objects, others, _.isEqual);
		     * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
		     */
		    var xorWith = baseRest(function(arrays) {
		      var comparator = last(arrays);
		      comparator = typeof comparator == 'function' ? comparator : undefined$1;
		      return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined$1, comparator);
		    });

		    /**
		     * Creates an array of grouped elements, the first of which contains the
		     * first elements of the given arrays, the second of which contains the
		     * second elements of the given arrays, and so on.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Array
		     * @param {...Array} [arrays] The arrays to process.
		     * @returns {Array} Returns the new array of grouped elements.
		     * @example
		     *
		     * _.zip(['a', 'b'], [1, 2], [true, false]);
		     * // => [['a', 1, true], ['b', 2, false]]
		     */
		    var zip = baseRest(unzip);

		    /**
		     * This method is like `_.fromPairs` except that it accepts two arrays,
		     * one of property identifiers and one of corresponding values.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.4.0
		     * @category Array
		     * @param {Array} [props=[]] The property identifiers.
		     * @param {Array} [values=[]] The property values.
		     * @returns {Object} Returns the new object.
		     * @example
		     *
		     * _.zipObject(['a', 'b'], [1, 2]);
		     * // => { 'a': 1, 'b': 2 }
		     */
		    function zipObject(props, values) {
		      return baseZipObject(props || [], values || [], assignValue);
		    }

		    /**
		     * This method is like `_.zipObject` except that it supports property paths.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.1.0
		     * @category Array
		     * @param {Array} [props=[]] The property identifiers.
		     * @param {Array} [values=[]] The property values.
		     * @returns {Object} Returns the new object.
		     * @example
		     *
		     * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);
		     * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }
		     */
		    function zipObjectDeep(props, values) {
		      return baseZipObject(props || [], values || [], baseSet);
		    }

		    /**
		     * This method is like `_.zip` except that it accepts `iteratee` to specify
		     * how grouped values should be combined. The iteratee is invoked with the
		     * elements of each group: (...group).
		     *
		     * @static
		     * @memberOf _
		     * @since 3.8.0
		     * @category Array
		     * @param {...Array} [arrays] The arrays to process.
		     * @param {Function} [iteratee=_.identity] The function to combine
		     *  grouped values.
		     * @returns {Array} Returns the new array of grouped elements.
		     * @example
		     *
		     * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {
		     *   return a + b + c;
		     * });
		     * // => [111, 222]
		     */
		    var zipWith = baseRest(function(arrays) {
		      var length = arrays.length,
		          iteratee = length > 1 ? arrays[length - 1] : undefined$1;

		      iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined$1;
		      return unzipWith(arrays, iteratee);
		    });

		    /*------------------------------------------------------------------------*/

		    /**
		     * Creates a `lodash` wrapper instance that wraps `value` with explicit method
		     * chain sequences enabled. The result of such sequences must be unwrapped
		     * with `_#value`.
		     *
		     * @static
		     * @memberOf _
		     * @since 1.3.0
		     * @category Seq
		     * @param {*} value The value to wrap.
		     * @returns {Object} Returns the new `lodash` wrapper instance.
		     * @example
		     *
		     * var users = [
		     *   { 'user': 'barney',  'age': 36 },
		     *   { 'user': 'fred',    'age': 40 },
		     *   { 'user': 'pebbles', 'age': 1 }
		     * ];
		     *
		     * var youngest = _
		     *   .chain(users)
		     *   .sortBy('age')
		     *   .map(function(o) {
		     *     return o.user + ' is ' + o.age;
		     *   })
		     *   .head()
		     *   .value();
		     * // => 'pebbles is 1'
		     */
		    function chain(value) {
		      var result = lodash(value);
		      result.__chain__ = true;
		      return result;
		    }

		    /**
		     * This method invokes `interceptor` and returns `value`. The interceptor
		     * is invoked with one argument; (value). The purpose of this method is to
		     * "tap into" a method chain sequence in order to modify intermediate results.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Seq
		     * @param {*} value The value to provide to `interceptor`.
		     * @param {Function} interceptor The function to invoke.
		     * @returns {*} Returns `value`.
		     * @example
		     *
		     * _([1, 2, 3])
		     *  .tap(function(array) {
		     *    // Mutate input array.
		     *    array.pop();
		     *  })
		     *  .reverse()
		     *  .value();
		     * // => [2, 1]
		     */
		    function tap(value, interceptor) {
		      interceptor(value);
		      return value;
		    }

		    /**
		     * This method is like `_.tap` except that it returns the result of `interceptor`.
		     * The purpose of this method is to "pass thru" values replacing intermediate
		     * results in a method chain sequence.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category Seq
		     * @param {*} value The value to provide to `interceptor`.
		     * @param {Function} interceptor The function to invoke.
		     * @returns {*} Returns the result of `interceptor`.
		     * @example
		     *
		     * _('  abc  ')
		     *  .chain()
		     *  .trim()
		     *  .thru(function(value) {
		     *    return [value];
		     *  })
		     *  .value();
		     * // => ['abc']
		     */
		    function thru(value, interceptor) {
		      return interceptor(value);
		    }

		    /**
		     * This method is the wrapper version of `_.at`.
		     *
		     * @name at
		     * @memberOf _
		     * @since 1.0.0
		     * @category Seq
		     * @param {...(string|string[])} [paths] The property paths to pick.
		     * @returns {Object} Returns the new `lodash` wrapper instance.
		     * @example
		     *
		     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
		     *
		     * _(object).at(['a[0].b.c', 'a[1]']).value();
		     * // => [3, 4]
		     */
		    var wrapperAt = flatRest(function(paths) {
		      var length = paths.length,
		          start = length ? paths[0] : 0,
		          value = this.__wrapped__,
		          interceptor = function(object) { return baseAt(object, paths); };

		      if (length > 1 || this.__actions__.length ||
		          !(value instanceof LazyWrapper) || !isIndex(start)) {
		        return this.thru(interceptor);
		      }
		      value = value.slice(start, +start + (length ? 1 : 0));
		      value.__actions__.push({
		        'func': thru,
		        'args': [interceptor],
		        'thisArg': undefined$1
		      });
		      return new LodashWrapper(value, this.__chain__).thru(function(array) {
		        if (length && !array.length) {
		          array.push(undefined$1);
		        }
		        return array;
		      });
		    });

		    /**
		     * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.
		     *
		     * @name chain
		     * @memberOf _
		     * @since 0.1.0
		     * @category Seq
		     * @returns {Object} Returns the new `lodash` wrapper instance.
		     * @example
		     *
		     * var users = [
		     *   { 'user': 'barney', 'age': 36 },
		     *   { 'user': 'fred',   'age': 40 }
		     * ];
		     *
		     * // A sequence without explicit chaining.
		     * _(users).head();
		     * // => { 'user': 'barney', 'age': 36 }
		     *
		     * // A sequence with explicit chaining.
		     * _(users)
		     *   .chain()
		     *   .head()
		     *   .pick('user')
		     *   .value();
		     * // => { 'user': 'barney' }
		     */
		    function wrapperChain() {
		      return chain(this);
		    }

		    /**
		     * Executes the chain sequence and returns the wrapped result.
		     *
		     * @name commit
		     * @memberOf _
		     * @since 3.2.0
		     * @category Seq
		     * @returns {Object} Returns the new `lodash` wrapper instance.
		     * @example
		     *
		     * var array = [1, 2];
		     * var wrapped = _(array).push(3);
		     *
		     * console.log(array);
		     * // => [1, 2]
		     *
		     * wrapped = wrapped.commit();
		     * console.log(array);
		     * // => [1, 2, 3]
		     *
		     * wrapped.last();
		     * // => 3
		     *
		     * console.log(array);
		     * // => [1, 2, 3]
		     */
		    function wrapperCommit() {
		      return new LodashWrapper(this.value(), this.__chain__);
		    }

		    /**
		     * Gets the next value on a wrapped object following the
		     * [iterator protocol](https://mdn.io/iteration_protocols#iterator).
		     *
		     * @name next
		     * @memberOf _
		     * @since 4.0.0
		     * @category Seq
		     * @returns {Object} Returns the next iterator value.
		     * @example
		     *
		     * var wrapped = _([1, 2]);
		     *
		     * wrapped.next();
		     * // => { 'done': false, 'value': 1 }
		     *
		     * wrapped.next();
		     * // => { 'done': false, 'value': 2 }
		     *
		     * wrapped.next();
		     * // => { 'done': true, 'value': undefined }
		     */
		    function wrapperNext() {
		      if (this.__values__ === undefined$1) {
		        this.__values__ = toArray(this.value());
		      }
		      var done = this.__index__ >= this.__values__.length,
		          value = done ? undefined$1 : this.__values__[this.__index__++];

		      return { 'done': done, 'value': value };
		    }

		    /**
		     * Enables the wrapper to be iterable.
		     *
		     * @name Symbol.iterator
		     * @memberOf _
		     * @since 4.0.0
		     * @category Seq
		     * @returns {Object} Returns the wrapper object.
		     * @example
		     *
		     * var wrapped = _([1, 2]);
		     *
		     * wrapped[Symbol.iterator]() === wrapped;
		     * // => true
		     *
		     * Array.from(wrapped);
		     * // => [1, 2]
		     */
		    function wrapperToIterator() {
		      return this;
		    }

		    /**
		     * Creates a clone of the chain sequence planting `value` as the wrapped value.
		     *
		     * @name plant
		     * @memberOf _
		     * @since 3.2.0
		     * @category Seq
		     * @param {*} value The value to plant.
		     * @returns {Object} Returns the new `lodash` wrapper instance.
		     * @example
		     *
		     * function square(n) {
		     *   return n * n;
		     * }
		     *
		     * var wrapped = _([1, 2]).map(square);
		     * var other = wrapped.plant([3, 4]);
		     *
		     * other.value();
		     * // => [9, 16]
		     *
		     * wrapped.value();
		     * // => [1, 4]
		     */
		    function wrapperPlant(value) {
		      var result,
		          parent = this;

		      while (parent instanceof baseLodash) {
		        var clone = wrapperClone(parent);
		        clone.__index__ = 0;
		        clone.__values__ = undefined$1;
		        if (result) {
		          previous.__wrapped__ = clone;
		        } else {
		          result = clone;
		        }
		        var previous = clone;
		        parent = parent.__wrapped__;
		      }
		      previous.__wrapped__ = value;
		      return result;
		    }

		    /**
		     * This method is the wrapper version of `_.reverse`.
		     *
		     * **Note:** This method mutates the wrapped array.
		     *
		     * @name reverse
		     * @memberOf _
		     * @since 0.1.0
		     * @category Seq
		     * @returns {Object} Returns the new `lodash` wrapper instance.
		     * @example
		     *
		     * var array = [1, 2, 3];
		     *
		     * _(array).reverse().value()
		     * // => [3, 2, 1]
		     *
		     * console.log(array);
		     * // => [3, 2, 1]
		     */
		    function wrapperReverse() {
		      var value = this.__wrapped__;
		      if (value instanceof LazyWrapper) {
		        var wrapped = value;
		        if (this.__actions__.length) {
		          wrapped = new LazyWrapper(this);
		        }
		        wrapped = wrapped.reverse();
		        wrapped.__actions__.push({
		          'func': thru,
		          'args': [reverse],
		          'thisArg': undefined$1
		        });
		        return new LodashWrapper(wrapped, this.__chain__);
		      }
		      return this.thru(reverse);
		    }

		    /**
		     * Executes the chain sequence to resolve the unwrapped value.
		     *
		     * @name value
		     * @memberOf _
		     * @since 0.1.0
		     * @alias toJSON, valueOf
		     * @category Seq
		     * @returns {*} Returns the resolved unwrapped value.
		     * @example
		     *
		     * _([1, 2, 3]).value();
		     * // => [1, 2, 3]
		     */
		    function wrapperValue() {
		      return baseWrapperValue(this.__wrapped__, this.__actions__);
		    }

		    /*------------------------------------------------------------------------*/

		    /**
		     * Creates an object composed of keys generated from the results of running
		     * each element of `collection` thru `iteratee`. The corresponding value of
		     * each key is the number of times the key was returned by `iteratee`. The
		     * iteratee is invoked with one argument: (value).
		     *
		     * @static
		     * @memberOf _
		     * @since 0.5.0
		     * @category Collection
		     * @param {Array|Object} collection The collection to iterate over.
		     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
		     * @returns {Object} Returns the composed aggregate object.
		     * @example
		     *
		     * _.countBy([6.1, 4.2, 6.3], Math.floor);
		     * // => { '4': 1, '6': 2 }
		     *
		     * // The `_.property` iteratee shorthand.
		     * _.countBy(['one', 'two', 'three'], 'length');
		     * // => { '3': 2, '5': 1 }
		     */
		    var countBy = createAggregator(function(result, value, key) {
		      if (hasOwnProperty.call(result, key)) {
		        ++result[key];
		      } else {
		        baseAssignValue(result, key, 1);
		      }
		    });

		    /**
		     * Checks if `predicate` returns truthy for **all** elements of `collection`.
		     * Iteration is stopped once `predicate` returns falsey. The predicate is
		     * invoked with three arguments: (value, index|key, collection).
		     *
		     * **Note:** This method returns `true` for
		     * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because
		     * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of
		     * elements of empty collections.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Collection
		     * @param {Array|Object} collection The collection to iterate over.
		     * @param {Function} [predicate=_.identity] The function invoked per iteration.
		     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
		     * @returns {boolean} Returns `true` if all elements pass the predicate check,
		     *  else `false`.
		     * @example
		     *
		     * _.every([true, 1, null, 'yes'], Boolean);
		     * // => false
		     *
		     * var users = [
		     *   { 'user': 'barney', 'age': 36, 'active': false },
		     *   { 'user': 'fred',   'age': 40, 'active': false }
		     * ];
		     *
		     * // The `_.matches` iteratee shorthand.
		     * _.every(users, { 'user': 'barney', 'active': false });
		     * // => false
		     *
		     * // The `_.matchesProperty` iteratee shorthand.
		     * _.every(users, ['active', false]);
		     * // => true
		     *
		     * // The `_.property` iteratee shorthand.
		     * _.every(users, 'active');
		     * // => false
		     */
		    function every(collection, predicate, guard) {
		      var func = isArray(collection) ? arrayEvery : baseEvery;
		      if (guard && isIterateeCall(collection, predicate, guard)) {
		        predicate = undefined$1;
		      }
		      return func(collection, getIteratee(predicate, 3));
		    }

		    /**
		     * Iterates over elements of `collection`, returning an array of all elements
		     * `predicate` returns truthy for. The predicate is invoked with three
		     * arguments: (value, index|key, collection).
		     *
		     * **Note:** Unlike `_.remove`, this method returns a new array.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Collection
		     * @param {Array|Object} collection The collection to iterate over.
		     * @param {Function} [predicate=_.identity] The function invoked per iteration.
		     * @returns {Array} Returns the new filtered array.
		     * @see _.reject
		     * @example
		     *
		     * var users = [
		     *   { 'user': 'barney', 'age': 36, 'active': true },
		     *   { 'user': 'fred',   'age': 40, 'active': false }
		     * ];
		     *
		     * _.filter(users, function(o) { return !o.active; });
		     * // => objects for ['fred']
		     *
		     * // The `_.matches` iteratee shorthand.
		     * _.filter(users, { 'age': 36, 'active': true });
		     * // => objects for ['barney']
		     *
		     * // The `_.matchesProperty` iteratee shorthand.
		     * _.filter(users, ['active', false]);
		     * // => objects for ['fred']
		     *
		     * // The `_.property` iteratee shorthand.
		     * _.filter(users, 'active');
		     * // => objects for ['barney']
		     *
		     * // Combining several predicates using `_.overEvery` or `_.overSome`.
		     * _.filter(users, _.overSome([{ 'age': 36 }, ['age', 40]]));
		     * // => objects for ['fred', 'barney']
		     */
		    function filter(collection, predicate) {
		      var func = isArray(collection) ? arrayFilter : baseFilter;
		      return func(collection, getIteratee(predicate, 3));
		    }

		    /**
		     * Iterates over elements of `collection`, returning the first element
		     * `predicate` returns truthy for. The predicate is invoked with three
		     * arguments: (value, index|key, collection).
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Collection
		     * @param {Array|Object} collection The collection to inspect.
		     * @param {Function} [predicate=_.identity] The function invoked per iteration.
		     * @param {number} [fromIndex=0] The index to search from.
		     * @returns {*} Returns the matched element, else `undefined`.
		     * @example
		     *
		     * var users = [
		     *   { 'user': 'barney',  'age': 36, 'active': true },
		     *   { 'user': 'fred',    'age': 40, 'active': false },
		     *   { 'user': 'pebbles', 'age': 1,  'active': true }
		     * ];
		     *
		     * _.find(users, function(o) { return o.age < 40; });
		     * // => object for 'barney'
		     *
		     * // The `_.matches` iteratee shorthand.
		     * _.find(users, { 'age': 1, 'active': true });
		     * // => object for 'pebbles'
		     *
		     * // The `_.matchesProperty` iteratee shorthand.
		     * _.find(users, ['active', false]);
		     * // => object for 'fred'
		     *
		     * // The `_.property` iteratee shorthand.
		     * _.find(users, 'active');
		     * // => object for 'barney'
		     */
		    var find = createFind(findIndex);

		    /**
		     * This method is like `_.find` except that it iterates over elements of
		     * `collection` from right to left.
		     *
		     * @static
		     * @memberOf _
		     * @since 2.0.0
		     * @category Collection
		     * @param {Array|Object} collection The collection to inspect.
		     * @param {Function} [predicate=_.identity] The function invoked per iteration.
		     * @param {number} [fromIndex=collection.length-1] The index to search from.
		     * @returns {*} Returns the matched element, else `undefined`.
		     * @example
		     *
		     * _.findLast([1, 2, 3, 4], function(n) {
		     *   return n % 2 == 1;
		     * });
		     * // => 3
		     */
		    var findLast = createFind(findLastIndex);

		    /**
		     * Creates a flattened array of values by running each element in `collection`
		     * thru `iteratee` and flattening the mapped results. The iteratee is invoked
		     * with three arguments: (value, index|key, collection).
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Collection
		     * @param {Array|Object} collection The collection to iterate over.
		     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
		     * @returns {Array} Returns the new flattened array.
		     * @example
		     *
		     * function duplicate(n) {
		     *   return [n, n];
		     * }
		     *
		     * _.flatMap([1, 2], duplicate);
		     * // => [1, 1, 2, 2]
		     */
		    function flatMap(collection, iteratee) {
		      return baseFlatten(map(collection, iteratee), 1);
		    }

		    /**
		     * This method is like `_.flatMap` except that it recursively flattens the
		     * mapped results.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.7.0
		     * @category Collection
		     * @param {Array|Object} collection The collection to iterate over.
		     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
		     * @returns {Array} Returns the new flattened array.
		     * @example
		     *
		     * function duplicate(n) {
		     *   return [[[n, n]]];
		     * }
		     *
		     * _.flatMapDeep([1, 2], duplicate);
		     * // => [1, 1, 2, 2]
		     */
		    function flatMapDeep(collection, iteratee) {
		      return baseFlatten(map(collection, iteratee), INFINITY);
		    }

		    /**
		     * This method is like `_.flatMap` except that it recursively flattens the
		     * mapped results up to `depth` times.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.7.0
		     * @category Collection
		     * @param {Array|Object} collection The collection to iterate over.
		     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
		     * @param {number} [depth=1] The maximum recursion depth.
		     * @returns {Array} Returns the new flattened array.
		     * @example
		     *
		     * function duplicate(n) {
		     *   return [[[n, n]]];
		     * }
		     *
		     * _.flatMapDepth([1, 2], duplicate, 2);
		     * // => [[1, 1], [2, 2]]
		     */
		    function flatMapDepth(collection, iteratee, depth) {
		      depth = depth === undefined$1 ? 1 : toInteger(depth);
		      return baseFlatten(map(collection, iteratee), depth);
		    }

		    /**
		     * Iterates over elements of `collection` and invokes `iteratee` for each element.
		     * The iteratee is invoked with three arguments: (value, index|key, collection).
		     * Iteratee functions may exit iteration early by explicitly returning `false`.
		     *
		     * **Note:** As with other "Collections" methods, objects with a "length"
		     * property are iterated like arrays. To avoid this behavior use `_.forIn`
		     * or `_.forOwn` for object iteration.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @alias each
		     * @category Collection
		     * @param {Array|Object} collection The collection to iterate over.
		     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
		     * @returns {Array|Object} Returns `collection`.
		     * @see _.forEachRight
		     * @example
		     *
		     * _.forEach([1, 2], function(value) {
		     *   console.log(value);
		     * });
		     * // => Logs `1` then `2`.
		     *
		     * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
		     *   console.log(key);
		     * });
		     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
		     */
		    function forEach(collection, iteratee) {
		      var func = isArray(collection) ? arrayEach : baseEach;
		      return func(collection, getIteratee(iteratee, 3));
		    }

		    /**
		     * This method is like `_.forEach` except that it iterates over elements of
		     * `collection` from right to left.
		     *
		     * @static
		     * @memberOf _
		     * @since 2.0.0
		     * @alias eachRight
		     * @category Collection
		     * @param {Array|Object} collection The collection to iterate over.
		     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
		     * @returns {Array|Object} Returns `collection`.
		     * @see _.forEach
		     * @example
		     *
		     * _.forEachRight([1, 2], function(value) {
		     *   console.log(value);
		     * });
		     * // => Logs `2` then `1`.
		     */
		    function forEachRight(collection, iteratee) {
		      var func = isArray(collection) ? arrayEachRight : baseEachRight;
		      return func(collection, getIteratee(iteratee, 3));
		    }

		    /**
		     * Creates an object composed of keys generated from the results of running
		     * each element of `collection` thru `iteratee`. The order of grouped values
		     * is determined by the order they occur in `collection`. The corresponding
		     * value of each key is an array of elements responsible for generating the
		     * key. The iteratee is invoked with one argument: (value).
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Collection
		     * @param {Array|Object} collection The collection to iterate over.
		     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
		     * @returns {Object} Returns the composed aggregate object.
		     * @example
		     *
		     * _.groupBy([6.1, 4.2, 6.3], Math.floor);
		     * // => { '4': [4.2], '6': [6.1, 6.3] }
		     *
		     * // The `_.property` iteratee shorthand.
		     * _.groupBy(['one', 'two', 'three'], 'length');
		     * // => { '3': ['one', 'two'], '5': ['three'] }
		     */
		    var groupBy = createAggregator(function(result, value, key) {
		      if (hasOwnProperty.call(result, key)) {
		        result[key].push(value);
		      } else {
		        baseAssignValue(result, key, [value]);
		      }
		    });

		    /**
		     * Checks if `value` is in `collection`. If `collection` is a string, it's
		     * checked for a substring of `value`, otherwise
		     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
		     * is used for equality comparisons. If `fromIndex` is negative, it's used as
		     * the offset from the end of `collection`.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Collection
		     * @param {Array|Object|string} collection The collection to inspect.
		     * @param {*} value The value to search for.
		     * @param {number} [fromIndex=0] The index to search from.
		     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
		     * @returns {boolean} Returns `true` if `value` is found, else `false`.
		     * @example
		     *
		     * _.includes([1, 2, 3], 1);
		     * // => true
		     *
		     * _.includes([1, 2, 3], 1, 2);
		     * // => false
		     *
		     * _.includes({ 'a': 1, 'b': 2 }, 1);
		     * // => true
		     *
		     * _.includes('abcd', 'bc');
		     * // => true
		     */
		    function includes(collection, value, fromIndex, guard) {
		      collection = isArrayLike(collection) ? collection : values(collection);
		      fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;

		      var length = collection.length;
		      if (fromIndex < 0) {
		        fromIndex = nativeMax(length + fromIndex, 0);
		      }
		      return isString(collection)
		        ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)
		        : (!!length && baseIndexOf(collection, value, fromIndex) > -1);
		    }

		    /**
		     * Invokes the method at `path` of each element in `collection`, returning
		     * an array of the results of each invoked method. Any additional arguments
		     * are provided to each invoked method. If `path` is a function, it's invoked
		     * for, and `this` bound to, each element in `collection`.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Collection
		     * @param {Array|Object} collection The collection to iterate over.
		     * @param {Array|Function|string} path The path of the method to invoke or
		     *  the function invoked per iteration.
		     * @param {...*} [args] The arguments to invoke each method with.
		     * @returns {Array} Returns the array of results.
		     * @example
		     *
		     * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');
		     * // => [[1, 5, 7], [1, 2, 3]]
		     *
		     * _.invokeMap([123, 456], String.prototype.split, '');
		     * // => [['1', '2', '3'], ['4', '5', '6']]
		     */
		    var invokeMap = baseRest(function(collection, path, args) {
		      var index = -1,
		          isFunc = typeof path == 'function',
		          result = isArrayLike(collection) ? Array(collection.length) : [];

		      baseEach(collection, function(value) {
		        result[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);
		      });
		      return result;
		    });

		    /**
		     * Creates an object composed of keys generated from the results of running
		     * each element of `collection` thru `iteratee`. The corresponding value of
		     * each key is the last element responsible for generating the key. The
		     * iteratee is invoked with one argument: (value).
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Collection
		     * @param {Array|Object} collection The collection to iterate over.
		     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
		     * @returns {Object} Returns the composed aggregate object.
		     * @example
		     *
		     * var array = [
		     *   { 'dir': 'left', 'code': 97 },
		     *   { 'dir': 'right', 'code': 100 }
		     * ];
		     *
		     * _.keyBy(array, function(o) {
		     *   return String.fromCharCode(o.code);
		     * });
		     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
		     *
		     * _.keyBy(array, 'dir');
		     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
		     */
		    var keyBy = createAggregator(function(result, value, key) {
		      baseAssignValue(result, key, value);
		    });

		    /**
		     * Creates an array of values by running each element in `collection` thru
		     * `iteratee`. The iteratee is invoked with three arguments:
		     * (value, index|key, collection).
		     *
		     * Many lodash methods are guarded to work as iteratees for methods like
		     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
		     *
		     * The guarded methods are:
		     * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
		     * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
		     * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
		     * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Collection
		     * @param {Array|Object} collection The collection to iterate over.
		     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
		     * @returns {Array} Returns the new mapped array.
		     * @example
		     *
		     * function square(n) {
		     *   return n * n;
		     * }
		     *
		     * _.map([4, 8], square);
		     * // => [16, 64]
		     *
		     * _.map({ 'a': 4, 'b': 8 }, square);
		     * // => [16, 64] (iteration order is not guaranteed)
		     *
		     * var users = [
		     *   { 'user': 'barney' },
		     *   { 'user': 'fred' }
		     * ];
		     *
		     * // The `_.property` iteratee shorthand.
		     * _.map(users, 'user');
		     * // => ['barney', 'fred']
		     */
		    function map(collection, iteratee) {
		      var func = isArray(collection) ? arrayMap : baseMap;
		      return func(collection, getIteratee(iteratee, 3));
		    }

		    /**
		     * This method is like `_.sortBy` except that it allows specifying the sort
		     * orders of the iteratees to sort by. If `orders` is unspecified, all values
		     * are sorted in ascending order. Otherwise, specify an order of "desc" for
		     * descending or "asc" for ascending sort order of corresponding values.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Collection
		     * @param {Array|Object} collection The collection to iterate over.
		     * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]
		     *  The iteratees to sort by.
		     * @param {string[]} [orders] The sort orders of `iteratees`.
		     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
		     * @returns {Array} Returns the new sorted array.
		     * @example
		     *
		     * var users = [
		     *   { 'user': 'fred',   'age': 48 },
		     *   { 'user': 'barney', 'age': 34 },
		     *   { 'user': 'fred',   'age': 40 },
		     *   { 'user': 'barney', 'age': 36 }
		     * ];
		     *
		     * // Sort by `user` in ascending order and by `age` in descending order.
		     * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);
		     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
		     */
		    function orderBy(collection, iteratees, orders, guard) {
		      if (collection == null) {
		        return [];
		      }
		      if (!isArray(iteratees)) {
		        iteratees = iteratees == null ? [] : [iteratees];
		      }
		      orders = guard ? undefined$1 : orders;
		      if (!isArray(orders)) {
		        orders = orders == null ? [] : [orders];
		      }
		      return baseOrderBy(collection, iteratees, orders);
		    }

		    /**
		     * Creates an array of elements split into two groups, the first of which
		     * contains elements `predicate` returns truthy for, the second of which
		     * contains elements `predicate` returns falsey for. The predicate is
		     * invoked with one argument: (value).
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category Collection
		     * @param {Array|Object} collection The collection to iterate over.
		     * @param {Function} [predicate=_.identity] The function invoked per iteration.
		     * @returns {Array} Returns the array of grouped elements.
		     * @example
		     *
		     * var users = [
		     *   { 'user': 'barney',  'age': 36, 'active': false },
		     *   { 'user': 'fred',    'age': 40, 'active': true },
		     *   { 'user': 'pebbles', 'age': 1,  'active': false }
		     * ];
		     *
		     * _.partition(users, function(o) { return o.active; });
		     * // => objects for [['fred'], ['barney', 'pebbles']]
		     *
		     * // The `_.matches` iteratee shorthand.
		     * _.partition(users, { 'age': 1, 'active': false });
		     * // => objects for [['pebbles'], ['barney', 'fred']]
		     *
		     * // The `_.matchesProperty` iteratee shorthand.
		     * _.partition(users, ['active', false]);
		     * // => objects for [['barney', 'pebbles'], ['fred']]
		     *
		     * // The `_.property` iteratee shorthand.
		     * _.partition(users, 'active');
		     * // => objects for [['fred'], ['barney', 'pebbles']]
		     */
		    var partition = createAggregator(function(result, value, key) {
		      result[key ? 0 : 1].push(value);
		    }, function() { return [[], []]; });

		    /**
		     * Reduces `collection` to a value which is the accumulated result of running
		     * each element in `collection` thru `iteratee`, where each successive
		     * invocation is supplied the return value of the previous. If `accumulator`
		     * is not given, the first element of `collection` is used as the initial
		     * value. The iteratee is invoked with four arguments:
		     * (accumulator, value, index|key, collection).
		     *
		     * Many lodash methods are guarded to work as iteratees for methods like
		     * `_.reduce`, `_.reduceRight`, and `_.transform`.
		     *
		     * The guarded methods are:
		     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
		     * and `sortBy`
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Collection
		     * @param {Array|Object} collection The collection to iterate over.
		     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
		     * @param {*} [accumulator] The initial value.
		     * @returns {*} Returns the accumulated value.
		     * @see _.reduceRight
		     * @example
		     *
		     * _.reduce([1, 2], function(sum, n) {
		     *   return sum + n;
		     * }, 0);
		     * // => 3
		     *
		     * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
		     *   (result[value] || (result[value] = [])).push(key);
		     *   return result;
		     * }, {});
		     * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
		     */
		    function reduce(collection, iteratee, accumulator) {
		      var func = isArray(collection) ? arrayReduce : baseReduce,
		          initAccum = arguments.length < 3;

		      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);
		    }

		    /**
		     * This method is like `_.reduce` except that it iterates over elements of
		     * `collection` from right to left.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Collection
		     * @param {Array|Object} collection The collection to iterate over.
		     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
		     * @param {*} [accumulator] The initial value.
		     * @returns {*} Returns the accumulated value.
		     * @see _.reduce
		     * @example
		     *
		     * var array = [[0, 1], [2, 3], [4, 5]];
		     *
		     * _.reduceRight(array, function(flattened, other) {
		     *   return flattened.concat(other);
		     * }, []);
		     * // => [4, 5, 2, 3, 0, 1]
		     */
		    function reduceRight(collection, iteratee, accumulator) {
		      var func = isArray(collection) ? arrayReduceRight : baseReduce,
		          initAccum = arguments.length < 3;

		      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);
		    }

		    /**
		     * The opposite of `_.filter`; this method returns the elements of `collection`
		     * that `predicate` does **not** return truthy for.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Collection
		     * @param {Array|Object} collection The collection to iterate over.
		     * @param {Function} [predicate=_.identity] The function invoked per iteration.
		     * @returns {Array} Returns the new filtered array.
		     * @see _.filter
		     * @example
		     *
		     * var users = [
		     *   { 'user': 'barney', 'age': 36, 'active': false },
		     *   { 'user': 'fred',   'age': 40, 'active': true }
		     * ];
		     *
		     * _.reject(users, function(o) { return !o.active; });
		     * // => objects for ['fred']
		     *
		     * // The `_.matches` iteratee shorthand.
		     * _.reject(users, { 'age': 40, 'active': true });
		     * // => objects for ['barney']
		     *
		     * // The `_.matchesProperty` iteratee shorthand.
		     * _.reject(users, ['active', false]);
		     * // => objects for ['fred']
		     *
		     * // The `_.property` iteratee shorthand.
		     * _.reject(users, 'active');
		     * // => objects for ['barney']
		     */
		    function reject(collection, predicate) {
		      var func = isArray(collection) ? arrayFilter : baseFilter;
		      return func(collection, negate(getIteratee(predicate, 3)));
		    }

		    /**
		     * Gets a random element from `collection`.
		     *
		     * @static
		     * @memberOf _
		     * @since 2.0.0
		     * @category Collection
		     * @param {Array|Object} collection The collection to sample.
		     * @returns {*} Returns the random element.
		     * @example
		     *
		     * _.sample([1, 2, 3, 4]);
		     * // => 2
		     */
		    function sample(collection) {
		      var func = isArray(collection) ? arraySample : baseSample;
		      return func(collection);
		    }

		    /**
		     * Gets `n` random elements at unique keys from `collection` up to the
		     * size of `collection`.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Collection
		     * @param {Array|Object} collection The collection to sample.
		     * @param {number} [n=1] The number of elements to sample.
		     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
		     * @returns {Array} Returns the random elements.
		     * @example
		     *
		     * _.sampleSize([1, 2, 3], 2);
		     * // => [3, 1]
		     *
		     * _.sampleSize([1, 2, 3], 4);
		     * // => [2, 3, 1]
		     */
		    function sampleSize(collection, n, guard) {
		      if ((guard ? isIterateeCall(collection, n, guard) : n === undefined$1)) {
		        n = 1;
		      } else {
		        n = toInteger(n);
		      }
		      var func = isArray(collection) ? arraySampleSize : baseSampleSize;
		      return func(collection, n);
		    }

		    /**
		     * Creates an array of shuffled values, using a version of the
		     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Collection
		     * @param {Array|Object} collection The collection to shuffle.
		     * @returns {Array} Returns the new shuffled array.
		     * @example
		     *
		     * _.shuffle([1, 2, 3, 4]);
		     * // => [4, 1, 3, 2]
		     */
		    function shuffle(collection) {
		      var func = isArray(collection) ? arrayShuffle : baseShuffle;
		      return func(collection);
		    }

		    /**
		     * Gets the size of `collection` by returning its length for array-like
		     * values or the number of own enumerable string keyed properties for objects.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Collection
		     * @param {Array|Object|string} collection The collection to inspect.
		     * @returns {number} Returns the collection size.
		     * @example
		     *
		     * _.size([1, 2, 3]);
		     * // => 3
		     *
		     * _.size({ 'a': 1, 'b': 2 });
		     * // => 2
		     *
		     * _.size('pebbles');
		     * // => 7
		     */
		    function size(collection) {
		      if (collection == null) {
		        return 0;
		      }
		      if (isArrayLike(collection)) {
		        return isString(collection) ? stringSize(collection) : collection.length;
		      }
		      var tag = getTag(collection);
		      if (tag == mapTag || tag == setTag) {
		        return collection.size;
		      }
		      return baseKeys(collection).length;
		    }

		    /**
		     * Checks if `predicate` returns truthy for **any** element of `collection`.
		     * Iteration is stopped once `predicate` returns truthy. The predicate is
		     * invoked with three arguments: (value, index|key, collection).
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Collection
		     * @param {Array|Object} collection The collection to iterate over.
		     * @param {Function} [predicate=_.identity] The function invoked per iteration.
		     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
		     * @returns {boolean} Returns `true` if any element passes the predicate check,
		     *  else `false`.
		     * @example
		     *
		     * _.some([null, 0, 'yes', false], Boolean);
		     * // => true
		     *
		     * var users = [
		     *   { 'user': 'barney', 'active': true },
		     *   { 'user': 'fred',   'active': false }
		     * ];
		     *
		     * // The `_.matches` iteratee shorthand.
		     * _.some(users, { 'user': 'barney', 'active': false });
		     * // => false
		     *
		     * // The `_.matchesProperty` iteratee shorthand.
		     * _.some(users, ['active', false]);
		     * // => true
		     *
		     * // The `_.property` iteratee shorthand.
		     * _.some(users, 'active');
		     * // => true
		     */
		    function some(collection, predicate, guard) {
		      var func = isArray(collection) ? arraySome : baseSome;
		      if (guard && isIterateeCall(collection, predicate, guard)) {
		        predicate = undefined$1;
		      }
		      return func(collection, getIteratee(predicate, 3));
		    }

		    /**
		     * Creates an array of elements, sorted in ascending order by the results of
		     * running each element in a collection thru each iteratee. This method
		     * performs a stable sort, that is, it preserves the original sort order of
		     * equal elements. The iteratees are invoked with one argument: (value).
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Collection
		     * @param {Array|Object} collection The collection to iterate over.
		     * @param {...(Function|Function[])} [iteratees=[_.identity]]
		     *  The iteratees to sort by.
		     * @returns {Array} Returns the new sorted array.
		     * @example
		     *
		     * var users = [
		     *   { 'user': 'fred',   'age': 48 },
		     *   { 'user': 'barney', 'age': 36 },
		     *   { 'user': 'fred',   'age': 30 },
		     *   { 'user': 'barney', 'age': 34 }
		     * ];
		     *
		     * _.sortBy(users, [function(o) { return o.user; }]);
		     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 30]]
		     *
		     * _.sortBy(users, ['user', 'age']);
		     * // => objects for [['barney', 34], ['barney', 36], ['fred', 30], ['fred', 48]]
		     */
		    var sortBy = baseRest(function(collection, iteratees) {
		      if (collection == null) {
		        return [];
		      }
		      var length = iteratees.length;
		      if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
		        iteratees = [];
		      } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
		        iteratees = [iteratees[0]];
		      }
		      return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
		    });

		    /*------------------------------------------------------------------------*/

		    /**
		     * Gets the timestamp of the number of milliseconds that have elapsed since
		     * the Unix epoch (1 January 1970 00:00:00 UTC).
		     *
		     * @static
		     * @memberOf _
		     * @since 2.4.0
		     * @category Date
		     * @returns {number} Returns the timestamp.
		     * @example
		     *
		     * _.defer(function(stamp) {
		     *   console.log(_.now() - stamp);
		     * }, _.now());
		     * // => Logs the number of milliseconds it took for the deferred invocation.
		     */
		    var now = ctxNow || function() {
		      return root.Date.now();
		    };

		    /*------------------------------------------------------------------------*/

		    /**
		     * The opposite of `_.before`; this method creates a function that invokes
		     * `func` once it's called `n` or more times.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Function
		     * @param {number} n The number of calls before `func` is invoked.
		     * @param {Function} func The function to restrict.
		     * @returns {Function} Returns the new restricted function.
		     * @example
		     *
		     * var saves = ['profile', 'settings'];
		     *
		     * var done = _.after(saves.length, function() {
		     *   console.log('done saving!');
		     * });
		     *
		     * _.forEach(saves, function(type) {
		     *   asyncSave({ 'type': type, 'complete': done });
		     * });
		     * // => Logs 'done saving!' after the two async saves have completed.
		     */
		    function after(n, func) {
		      if (typeof func != 'function') {
		        throw new TypeError(FUNC_ERROR_TEXT);
		      }
		      n = toInteger(n);
		      return function() {
		        if (--n < 1) {
		          return func.apply(this, arguments);
		        }
		      };
		    }

		    /**
		     * Creates a function that invokes `func`, with up to `n` arguments,
		     * ignoring any additional arguments.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category Function
		     * @param {Function} func The function to cap arguments for.
		     * @param {number} [n=func.length] The arity cap.
		     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
		     * @returns {Function} Returns the new capped function.
		     * @example
		     *
		     * _.map(['6', '8', '10'], _.ary(parseInt, 1));
		     * // => [6, 8, 10]
		     */
		    function ary(func, n, guard) {
		      n = guard ? undefined$1 : n;
		      n = (func && n == null) ? func.length : n;
		      return createWrap(func, WRAP_ARY_FLAG, undefined$1, undefined$1, undefined$1, undefined$1, n);
		    }

		    /**
		     * Creates a function that invokes `func`, with the `this` binding and arguments
		     * of the created function, while it's called less than `n` times. Subsequent
		     * calls to the created function return the result of the last `func` invocation.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category Function
		     * @param {number} n The number of calls at which `func` is no longer invoked.
		     * @param {Function} func The function to restrict.
		     * @returns {Function} Returns the new restricted function.
		     * @example
		     *
		     * jQuery(element).on('click', _.before(5, addContactToList));
		     * // => Allows adding up to 4 contacts to the list.
		     */
		    function before(n, func) {
		      var result;
		      if (typeof func != 'function') {
		        throw new TypeError(FUNC_ERROR_TEXT);
		      }
		      n = toInteger(n);
		      return function() {
		        if (--n > 0) {
		          result = func.apply(this, arguments);
		        }
		        if (n <= 1) {
		          func = undefined$1;
		        }
		        return result;
		      };
		    }

		    /**
		     * Creates a function that invokes `func` with the `this` binding of `thisArg`
		     * and `partials` prepended to the arguments it receives.
		     *
		     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
		     * may be used as a placeholder for partially applied arguments.
		     *
		     * **Note:** Unlike native `Function#bind`, this method doesn't set the "length"
		     * property of bound functions.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Function
		     * @param {Function} func The function to bind.
		     * @param {*} thisArg The `this` binding of `func`.
		     * @param {...*} [partials] The arguments to be partially applied.
		     * @returns {Function} Returns the new bound function.
		     * @example
		     *
		     * function greet(greeting, punctuation) {
		     *   return greeting + ' ' + this.user + punctuation;
		     * }
		     *
		     * var object = { 'user': 'fred' };
		     *
		     * var bound = _.bind(greet, object, 'hi');
		     * bound('!');
		     * // => 'hi fred!'
		     *
		     * // Bound with placeholders.
		     * var bound = _.bind(greet, object, _, '!');
		     * bound('hi');
		     * // => 'hi fred!'
		     */
		    var bind = baseRest(function(func, thisArg, partials) {
		      var bitmask = WRAP_BIND_FLAG;
		      if (partials.length) {
		        var holders = replaceHolders(partials, getHolder(bind));
		        bitmask |= WRAP_PARTIAL_FLAG;
		      }
		      return createWrap(func, bitmask, thisArg, partials, holders);
		    });

		    /**
		     * Creates a function that invokes the method at `object[key]` with `partials`
		     * prepended to the arguments it receives.
		     *
		     * This method differs from `_.bind` by allowing bound functions to reference
		     * methods that may be redefined or don't yet exist. See
		     * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
		     * for more details.
		     *
		     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
		     * builds, may be used as a placeholder for partially applied arguments.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.10.0
		     * @category Function
		     * @param {Object} object The object to invoke the method on.
		     * @param {string} key The key of the method.
		     * @param {...*} [partials] The arguments to be partially applied.
		     * @returns {Function} Returns the new bound function.
		     * @example
		     *
		     * var object = {
		     *   'user': 'fred',
		     *   'greet': function(greeting, punctuation) {
		     *     return greeting + ' ' + this.user + punctuation;
		     *   }
		     * };
		     *
		     * var bound = _.bindKey(object, 'greet', 'hi');
		     * bound('!');
		     * // => 'hi fred!'
		     *
		     * object.greet = function(greeting, punctuation) {
		     *   return greeting + 'ya ' + this.user + punctuation;
		     * };
		     *
		     * bound('!');
		     * // => 'hiya fred!'
		     *
		     * // Bound with placeholders.
		     * var bound = _.bindKey(object, 'greet', _, '!');
		     * bound('hi');
		     * // => 'hiya fred!'
		     */
		    var bindKey = baseRest(function(object, key, partials) {
		      var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
		      if (partials.length) {
		        var holders = replaceHolders(partials, getHolder(bindKey));
		        bitmask |= WRAP_PARTIAL_FLAG;
		      }
		      return createWrap(key, bitmask, object, partials, holders);
		    });

		    /**
		     * Creates a function that accepts arguments of `func` and either invokes
		     * `func` returning its result, if at least `arity` number of arguments have
		     * been provided, or returns a function that accepts the remaining `func`
		     * arguments, and so on. The arity of `func` may be specified if `func.length`
		     * is not sufficient.
		     *
		     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
		     * may be used as a placeholder for provided arguments.
		     *
		     * **Note:** This method doesn't set the "length" property of curried functions.
		     *
		     * @static
		     * @memberOf _
		     * @since 2.0.0
		     * @category Function
		     * @param {Function} func The function to curry.
		     * @param {number} [arity=func.length] The arity of `func`.
		     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
		     * @returns {Function} Returns the new curried function.
		     * @example
		     *
		     * var abc = function(a, b, c) {
		     *   return [a, b, c];
		     * };
		     *
		     * var curried = _.curry(abc);
		     *
		     * curried(1)(2)(3);
		     * // => [1, 2, 3]
		     *
		     * curried(1, 2)(3);
		     * // => [1, 2, 3]
		     *
		     * curried(1, 2, 3);
		     * // => [1, 2, 3]
		     *
		     * // Curried with placeholders.
		     * curried(1)(_, 3)(2);
		     * // => [1, 2, 3]
		     */
		    function curry(func, arity, guard) {
		      arity = guard ? undefined$1 : arity;
		      var result = createWrap(func, WRAP_CURRY_FLAG, undefined$1, undefined$1, undefined$1, undefined$1, undefined$1, arity);
		      result.placeholder = curry.placeholder;
		      return result;
		    }

		    /**
		     * This method is like `_.curry` except that arguments are applied to `func`
		     * in the manner of `_.partialRight` instead of `_.partial`.
		     *
		     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
		     * builds, may be used as a placeholder for provided arguments.
		     *
		     * **Note:** This method doesn't set the "length" property of curried functions.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category Function
		     * @param {Function} func The function to curry.
		     * @param {number} [arity=func.length] The arity of `func`.
		     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
		     * @returns {Function} Returns the new curried function.
		     * @example
		     *
		     * var abc = function(a, b, c) {
		     *   return [a, b, c];
		     * };
		     *
		     * var curried = _.curryRight(abc);
		     *
		     * curried(3)(2)(1);
		     * // => [1, 2, 3]
		     *
		     * curried(2, 3)(1);
		     * // => [1, 2, 3]
		     *
		     * curried(1, 2, 3);
		     * // => [1, 2, 3]
		     *
		     * // Curried with placeholders.
		     * curried(3)(1, _)(2);
		     * // => [1, 2, 3]
		     */
		    function curryRight(func, arity, guard) {
		      arity = guard ? undefined$1 : arity;
		      var result = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined$1, undefined$1, undefined$1, undefined$1, undefined$1, arity);
		      result.placeholder = curryRight.placeholder;
		      return result;
		    }

		    /**
		     * Creates a debounced function that delays invoking `func` until after `wait`
		     * milliseconds have elapsed since the last time the debounced function was
		     * invoked. The debounced function comes with a `cancel` method to cancel
		     * delayed `func` invocations and a `flush` method to immediately invoke them.
		     * Provide `options` to indicate whether `func` should be invoked on the
		     * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
		     * with the last arguments provided to the debounced function. Subsequent
		     * calls to the debounced function return the result of the last `func`
		     * invocation.
		     *
		     * **Note:** If `leading` and `trailing` options are `true`, `func` is
		     * invoked on the trailing edge of the timeout only if the debounced function
		     * is invoked more than once during the `wait` timeout.
		     *
		     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
		     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
		     *
		     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
		     * for details over the differences between `_.debounce` and `_.throttle`.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Function
		     * @param {Function} func The function to debounce.
		     * @param {number} [wait=0] The number of milliseconds to delay.
		     * @param {Object} [options={}] The options object.
		     * @param {boolean} [options.leading=false]
		     *  Specify invoking on the leading edge of the timeout.
		     * @param {number} [options.maxWait]
		     *  The maximum time `func` is allowed to be delayed before it's invoked.
		     * @param {boolean} [options.trailing=true]
		     *  Specify invoking on the trailing edge of the timeout.
		     * @returns {Function} Returns the new debounced function.
		     * @example
		     *
		     * // Avoid costly calculations while the window size is in flux.
		     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
		     *
		     * // Invoke `sendMail` when clicked, debouncing subsequent calls.
		     * jQuery(element).on('click', _.debounce(sendMail, 300, {
		     *   'leading': true,
		     *   'trailing': false
		     * }));
		     *
		     * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
		     * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
		     * var source = new EventSource('/stream');
		     * jQuery(source).on('message', debounced);
		     *
		     * // Cancel the trailing debounced invocation.
		     * jQuery(window).on('popstate', debounced.cancel);
		     */
		    function debounce(func, wait, options) {
		      var lastArgs,
		          lastThis,
		          maxWait,
		          result,
		          timerId,
		          lastCallTime,
		          lastInvokeTime = 0,
		          leading = false,
		          maxing = false,
		          trailing = true;

		      if (typeof func != 'function') {
		        throw new TypeError(FUNC_ERROR_TEXT);
		      }
		      wait = toNumber(wait) || 0;
		      if (isObject(options)) {
		        leading = !!options.leading;
		        maxing = 'maxWait' in options;
		        maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
		        trailing = 'trailing' in options ? !!options.trailing : trailing;
		      }

		      function invokeFunc(time) {
		        var args = lastArgs,
		            thisArg = lastThis;

		        lastArgs = lastThis = undefined$1;
		        lastInvokeTime = time;
		        result = func.apply(thisArg, args);
		        return result;
		      }

		      function leadingEdge(time) {
		        // Reset any `maxWait` timer.
		        lastInvokeTime = time;
		        // Start the timer for the trailing edge.
		        timerId = setTimeout(timerExpired, wait);
		        // Invoke the leading edge.
		        return leading ? invokeFunc(time) : result;
		      }

		      function remainingWait(time) {
		        var timeSinceLastCall = time - lastCallTime,
		            timeSinceLastInvoke = time - lastInvokeTime,
		            timeWaiting = wait - timeSinceLastCall;

		        return maxing
		          ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)
		          : timeWaiting;
		      }

		      function shouldInvoke(time) {
		        var timeSinceLastCall = time - lastCallTime,
		            timeSinceLastInvoke = time - lastInvokeTime;

		        // Either this is the first call, activity has stopped and we're at the
		        // trailing edge, the system time has gone backwards and we're treating
		        // it as the trailing edge, or we've hit the `maxWait` limit.
		        return (lastCallTime === undefined$1 || (timeSinceLastCall >= wait) ||
		          (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
		      }

		      function timerExpired() {
		        var time = now();
		        if (shouldInvoke(time)) {
		          return trailingEdge(time);
		        }
		        // Restart the timer.
		        timerId = setTimeout(timerExpired, remainingWait(time));
		      }

		      function trailingEdge(time) {
		        timerId = undefined$1;

		        // Only invoke if we have `lastArgs` which means `func` has been
		        // debounced at least once.
		        if (trailing && lastArgs) {
		          return invokeFunc(time);
		        }
		        lastArgs = lastThis = undefined$1;
		        return result;
		      }

		      function cancel() {
		        if (timerId !== undefined$1) {
		          clearTimeout(timerId);
		        }
		        lastInvokeTime = 0;
		        lastArgs = lastCallTime = lastThis = timerId = undefined$1;
		      }

		      function flush() {
		        return timerId === undefined$1 ? result : trailingEdge(now());
		      }

		      function debounced() {
		        var time = now(),
		            isInvoking = shouldInvoke(time);

		        lastArgs = arguments;
		        lastThis = this;
		        lastCallTime = time;

		        if (isInvoking) {
		          if (timerId === undefined$1) {
		            return leadingEdge(lastCallTime);
		          }
		          if (maxing) {
		            // Handle invocations in a tight loop.
		            clearTimeout(timerId);
		            timerId = setTimeout(timerExpired, wait);
		            return invokeFunc(lastCallTime);
		          }
		        }
		        if (timerId === undefined$1) {
		          timerId = setTimeout(timerExpired, wait);
		        }
		        return result;
		      }
		      debounced.cancel = cancel;
		      debounced.flush = flush;
		      return debounced;
		    }

		    /**
		     * Defers invoking the `func` until the current call stack has cleared. Any
		     * additional arguments are provided to `func` when it's invoked.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Function
		     * @param {Function} func The function to defer.
		     * @param {...*} [args] The arguments to invoke `func` with.
		     * @returns {number} Returns the timer id.
		     * @example
		     *
		     * _.defer(function(text) {
		     *   console.log(text);
		     * }, 'deferred');
		     * // => Logs 'deferred' after one millisecond.
		     */
		    var defer = baseRest(function(func, args) {
		      return baseDelay(func, 1, args);
		    });

		    /**
		     * Invokes `func` after `wait` milliseconds. Any additional arguments are
		     * provided to `func` when it's invoked.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Function
		     * @param {Function} func The function to delay.
		     * @param {number} wait The number of milliseconds to delay invocation.
		     * @param {...*} [args] The arguments to invoke `func` with.
		     * @returns {number} Returns the timer id.
		     * @example
		     *
		     * _.delay(function(text) {
		     *   console.log(text);
		     * }, 1000, 'later');
		     * // => Logs 'later' after one second.
		     */
		    var delay = baseRest(function(func, wait, args) {
		      return baseDelay(func, toNumber(wait) || 0, args);
		    });

		    /**
		     * Creates a function that invokes `func` with arguments reversed.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Function
		     * @param {Function} func The function to flip arguments for.
		     * @returns {Function} Returns the new flipped function.
		     * @example
		     *
		     * var flipped = _.flip(function() {
		     *   return _.toArray(arguments);
		     * });
		     *
		     * flipped('a', 'b', 'c', 'd');
		     * // => ['d', 'c', 'b', 'a']
		     */
		    function flip(func) {
		      return createWrap(func, WRAP_FLIP_FLAG);
		    }

		    /**
		     * Creates a function that memoizes the result of `func`. If `resolver` is
		     * provided, it determines the cache key for storing the result based on the
		     * arguments provided to the memoized function. By default, the first argument
		     * provided to the memoized function is used as the map cache key. The `func`
		     * is invoked with the `this` binding of the memoized function.
		     *
		     * **Note:** The cache is exposed as the `cache` property on the memoized
		     * function. Its creation may be customized by replacing the `_.memoize.Cache`
		     * constructor with one whose instances implement the
		     * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
		     * method interface of `clear`, `delete`, `get`, `has`, and `set`.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Function
		     * @param {Function} func The function to have its output memoized.
		     * @param {Function} [resolver] The function to resolve the cache key.
		     * @returns {Function} Returns the new memoized function.
		     * @example
		     *
		     * var object = { 'a': 1, 'b': 2 };
		     * var other = { 'c': 3, 'd': 4 };
		     *
		     * var values = _.memoize(_.values);
		     * values(object);
		     * // => [1, 2]
		     *
		     * values(other);
		     * // => [3, 4]
		     *
		     * object.a = 2;
		     * values(object);
		     * // => [1, 2]
		     *
		     * // Modify the result cache.
		     * values.cache.set(object, ['a', 'b']);
		     * values(object);
		     * // => ['a', 'b']
		     *
		     * // Replace `_.memoize.Cache`.
		     * _.memoize.Cache = WeakMap;
		     */
		    function memoize(func, resolver) {
		      if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
		        throw new TypeError(FUNC_ERROR_TEXT);
		      }
		      var memoized = function() {
		        var args = arguments,
		            key = resolver ? resolver.apply(this, args) : args[0],
		            cache = memoized.cache;

		        if (cache.has(key)) {
		          return cache.get(key);
		        }
		        var result = func.apply(this, args);
		        memoized.cache = cache.set(key, result) || cache;
		        return result;
		      };
		      memoized.cache = new (memoize.Cache || MapCache);
		      return memoized;
		    }

		    // Expose `MapCache`.
		    memoize.Cache = MapCache;

		    /**
		     * Creates a function that negates the result of the predicate `func`. The
		     * `func` predicate is invoked with the `this` binding and arguments of the
		     * created function.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category Function
		     * @param {Function} predicate The predicate to negate.
		     * @returns {Function} Returns the new negated function.
		     * @example
		     *
		     * function isEven(n) {
		     *   return n % 2 == 0;
		     * }
		     *
		     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
		     * // => [1, 3, 5]
		     */
		    function negate(predicate) {
		      if (typeof predicate != 'function') {
		        throw new TypeError(FUNC_ERROR_TEXT);
		      }
		      return function() {
		        var args = arguments;
		        switch (args.length) {
		          case 0: return !predicate.call(this);
		          case 1: return !predicate.call(this, args[0]);
		          case 2: return !predicate.call(this, args[0], args[1]);
		          case 3: return !predicate.call(this, args[0], args[1], args[2]);
		        }
		        return !predicate.apply(this, args);
		      };
		    }

		    /**
		     * Creates a function that is restricted to invoking `func` once. Repeat calls
		     * to the function return the value of the first invocation. The `func` is
		     * invoked with the `this` binding and arguments of the created function.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Function
		     * @param {Function} func The function to restrict.
		     * @returns {Function} Returns the new restricted function.
		     * @example
		     *
		     * var initialize = _.once(createApplication);
		     * initialize();
		     * initialize();
		     * // => `createApplication` is invoked once
		     */
		    function once(func) {
		      return before(2, func);
		    }

		    /**
		     * Creates a function that invokes `func` with its arguments transformed.
		     *
		     * @static
		     * @since 4.0.0
		     * @memberOf _
		     * @category Function
		     * @param {Function} func The function to wrap.
		     * @param {...(Function|Function[])} [transforms=[_.identity]]
		     *  The argument transforms.
		     * @returns {Function} Returns the new function.
		     * @example
		     *
		     * function doubled(n) {
		     *   return n * 2;
		     * }
		     *
		     * function square(n) {
		     *   return n * n;
		     * }
		     *
		     * var func = _.overArgs(function(x, y) {
		     *   return [x, y];
		     * }, [square, doubled]);
		     *
		     * func(9, 3);
		     * // => [81, 6]
		     *
		     * func(10, 5);
		     * // => [100, 10]
		     */
		    var overArgs = castRest(function(func, transforms) {
		      transforms = (transforms.length == 1 && isArray(transforms[0]))
		        ? arrayMap(transforms[0], baseUnary(getIteratee()))
		        : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));

		      var funcsLength = transforms.length;
		      return baseRest(function(args) {
		        var index = -1,
		            length = nativeMin(args.length, funcsLength);

		        while (++index < length) {
		          args[index] = transforms[index].call(this, args[index]);
		        }
		        return apply(func, this, args);
		      });
		    });

		    /**
		     * Creates a function that invokes `func` with `partials` prepended to the
		     * arguments it receives. This method is like `_.bind` except it does **not**
		     * alter the `this` binding.
		     *
		     * The `_.partial.placeholder` value, which defaults to `_` in monolithic
		     * builds, may be used as a placeholder for partially applied arguments.
		     *
		     * **Note:** This method doesn't set the "length" property of partially
		     * applied functions.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.2.0
		     * @category Function
		     * @param {Function} func The function to partially apply arguments to.
		     * @param {...*} [partials] The arguments to be partially applied.
		     * @returns {Function} Returns the new partially applied function.
		     * @example
		     *
		     * function greet(greeting, name) {
		     *   return greeting + ' ' + name;
		     * }
		     *
		     * var sayHelloTo = _.partial(greet, 'hello');
		     * sayHelloTo('fred');
		     * // => 'hello fred'
		     *
		     * // Partially applied with placeholders.
		     * var greetFred = _.partial(greet, _, 'fred');
		     * greetFred('hi');
		     * // => 'hi fred'
		     */
		    var partial = baseRest(function(func, partials) {
		      var holders = replaceHolders(partials, getHolder(partial));
		      return createWrap(func, WRAP_PARTIAL_FLAG, undefined$1, partials, holders);
		    });

		    /**
		     * This method is like `_.partial` except that partially applied arguments
		     * are appended to the arguments it receives.
		     *
		     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
		     * builds, may be used as a placeholder for partially applied arguments.
		     *
		     * **Note:** This method doesn't set the "length" property of partially
		     * applied functions.
		     *
		     * @static
		     * @memberOf _
		     * @since 1.0.0
		     * @category Function
		     * @param {Function} func The function to partially apply arguments to.
		     * @param {...*} [partials] The arguments to be partially applied.
		     * @returns {Function} Returns the new partially applied function.
		     * @example
		     *
		     * function greet(greeting, name) {
		     *   return greeting + ' ' + name;
		     * }
		     *
		     * var greetFred = _.partialRight(greet, 'fred');
		     * greetFred('hi');
		     * // => 'hi fred'
		     *
		     * // Partially applied with placeholders.
		     * var sayHelloTo = _.partialRight(greet, 'hello', _);
		     * sayHelloTo('fred');
		     * // => 'hello fred'
		     */
		    var partialRight = baseRest(function(func, partials) {
		      var holders = replaceHolders(partials, getHolder(partialRight));
		      return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined$1, partials, holders);
		    });

		    /**
		     * Creates a function that invokes `func` with arguments arranged according
		     * to the specified `indexes` where the argument value at the first index is
		     * provided as the first argument, the argument value at the second index is
		     * provided as the second argument, and so on.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category Function
		     * @param {Function} func The function to rearrange arguments for.
		     * @param {...(number|number[])} indexes The arranged argument indexes.
		     * @returns {Function} Returns the new function.
		     * @example
		     *
		     * var rearged = _.rearg(function(a, b, c) {
		     *   return [a, b, c];
		     * }, [2, 0, 1]);
		     *
		     * rearged('b', 'c', 'a')
		     * // => ['a', 'b', 'c']
		     */
		    var rearg = flatRest(function(func, indexes) {
		      return createWrap(func, WRAP_REARG_FLAG, undefined$1, undefined$1, undefined$1, indexes);
		    });

		    /**
		     * Creates a function that invokes `func` with the `this` binding of the
		     * created function and arguments from `start` and beyond provided as
		     * an array.
		     *
		     * **Note:** This method is based on the
		     * [rest parameter](https://mdn.io/rest_parameters).
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Function
		     * @param {Function} func The function to apply a rest parameter to.
		     * @param {number} [start=func.length-1] The start position of the rest parameter.
		     * @returns {Function} Returns the new function.
		     * @example
		     *
		     * var say = _.rest(function(what, names) {
		     *   return what + ' ' + _.initial(names).join(', ') +
		     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
		     * });
		     *
		     * say('hello', 'fred', 'barney', 'pebbles');
		     * // => 'hello fred, barney, & pebbles'
		     */
		    function rest(func, start) {
		      if (typeof func != 'function') {
		        throw new TypeError(FUNC_ERROR_TEXT);
		      }
		      start = start === undefined$1 ? start : toInteger(start);
		      return baseRest(func, start);
		    }

		    /**
		     * Creates a function that invokes `func` with the `this` binding of the
		     * create function and an array of arguments much like
		     * [`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).
		     *
		     * **Note:** This method is based on the
		     * [spread operator](https://mdn.io/spread_operator).
		     *
		     * @static
		     * @memberOf _
		     * @since 3.2.0
		     * @category Function
		     * @param {Function} func The function to spread arguments over.
		     * @param {number} [start=0] The start position of the spread.
		     * @returns {Function} Returns the new function.
		     * @example
		     *
		     * var say = _.spread(function(who, what) {
		     *   return who + ' says ' + what;
		     * });
		     *
		     * say(['fred', 'hello']);
		     * // => 'fred says hello'
		     *
		     * var numbers = Promise.all([
		     *   Promise.resolve(40),
		     *   Promise.resolve(36)
		     * ]);
		     *
		     * numbers.then(_.spread(function(x, y) {
		     *   return x + y;
		     * }));
		     * // => a Promise of 76
		     */
		    function spread(func, start) {
		      if (typeof func != 'function') {
		        throw new TypeError(FUNC_ERROR_TEXT);
		      }
		      start = start == null ? 0 : nativeMax(toInteger(start), 0);
		      return baseRest(function(args) {
		        var array = args[start],
		            otherArgs = castSlice(args, 0, start);

		        if (array) {
		          arrayPush(otherArgs, array);
		        }
		        return apply(func, this, otherArgs);
		      });
		    }

		    /**
		     * Creates a throttled function that only invokes `func` at most once per
		     * every `wait` milliseconds. The throttled function comes with a `cancel`
		     * method to cancel delayed `func` invocations and a `flush` method to
		     * immediately invoke them. Provide `options` to indicate whether `func`
		     * should be invoked on the leading and/or trailing edge of the `wait`
		     * timeout. The `func` is invoked with the last arguments provided to the
		     * throttled function. Subsequent calls to the throttled function return the
		     * result of the last `func` invocation.
		     *
		     * **Note:** If `leading` and `trailing` options are `true`, `func` is
		     * invoked on the trailing edge of the timeout only if the throttled function
		     * is invoked more than once during the `wait` timeout.
		     *
		     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
		     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
		     *
		     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
		     * for details over the differences between `_.throttle` and `_.debounce`.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Function
		     * @param {Function} func The function to throttle.
		     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
		     * @param {Object} [options={}] The options object.
		     * @param {boolean} [options.leading=true]
		     *  Specify invoking on the leading edge of the timeout.
		     * @param {boolean} [options.trailing=true]
		     *  Specify invoking on the trailing edge of the timeout.
		     * @returns {Function} Returns the new throttled function.
		     * @example
		     *
		     * // Avoid excessively updating the position while scrolling.
		     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
		     *
		     * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
		     * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
		     * jQuery(element).on('click', throttled);
		     *
		     * // Cancel the trailing throttled invocation.
		     * jQuery(window).on('popstate', throttled.cancel);
		     */
		    function throttle(func, wait, options) {
		      var leading = true,
		          trailing = true;

		      if (typeof func != 'function') {
		        throw new TypeError(FUNC_ERROR_TEXT);
		      }
		      if (isObject(options)) {
		        leading = 'leading' in options ? !!options.leading : leading;
		        trailing = 'trailing' in options ? !!options.trailing : trailing;
		      }
		      return debounce(func, wait, {
		        'leading': leading,
		        'maxWait': wait,
		        'trailing': trailing
		      });
		    }

		    /**
		     * Creates a function that accepts up to one argument, ignoring any
		     * additional arguments.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Function
		     * @param {Function} func The function to cap arguments for.
		     * @returns {Function} Returns the new capped function.
		     * @example
		     *
		     * _.map(['6', '8', '10'], _.unary(parseInt));
		     * // => [6, 8, 10]
		     */
		    function unary(func) {
		      return ary(func, 1);
		    }

		    /**
		     * Creates a function that provides `value` to `wrapper` as its first
		     * argument. Any additional arguments provided to the function are appended
		     * to those provided to the `wrapper`. The wrapper is invoked with the `this`
		     * binding of the created function.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Function
		     * @param {*} value The value to wrap.
		     * @param {Function} [wrapper=identity] The wrapper function.
		     * @returns {Function} Returns the new function.
		     * @example
		     *
		     * var p = _.wrap(_.escape, function(func, text) {
		     *   return '<p>' + func(text) + '</p>';
		     * });
		     *
		     * p('fred, barney, & pebbles');
		     * // => '<p>fred, barney, &amp; pebbles</p>'
		     */
		    function wrap(value, wrapper) {
		      return partial(castFunction(wrapper), value);
		    }

		    /*------------------------------------------------------------------------*/

		    /**
		     * Casts `value` as an array if it's not one.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.4.0
		     * @category Lang
		     * @param {*} value The value to inspect.
		     * @returns {Array} Returns the cast array.
		     * @example
		     *
		     * _.castArray(1);
		     * // => [1]
		     *
		     * _.castArray({ 'a': 1 });
		     * // => [{ 'a': 1 }]
		     *
		     * _.castArray('abc');
		     * // => ['abc']
		     *
		     * _.castArray(null);
		     * // => [null]
		     *
		     * _.castArray(undefined);
		     * // => [undefined]
		     *
		     * _.castArray();
		     * // => []
		     *
		     * var array = [1, 2, 3];
		     * console.log(_.castArray(array) === array);
		     * // => true
		     */
		    function castArray() {
		      if (!arguments.length) {
		        return [];
		      }
		      var value = arguments[0];
		      return isArray(value) ? value : [value];
		    }

		    /**
		     * Creates a shallow clone of `value`.
		     *
		     * **Note:** This method is loosely based on the
		     * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
		     * and supports cloning arrays, array buffers, booleans, date objects, maps,
		     * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
		     * arrays. The own enumerable properties of `arguments` objects are cloned
		     * as plain objects. An empty object is returned for uncloneable values such
		     * as error objects, functions, DOM nodes, and WeakMaps.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Lang
		     * @param {*} value The value to clone.
		     * @returns {*} Returns the cloned value.
		     * @see _.cloneDeep
		     * @example
		     *
		     * var objects = [{ 'a': 1 }, { 'b': 2 }];
		     *
		     * var shallow = _.clone(objects);
		     * console.log(shallow[0] === objects[0]);
		     * // => true
		     */
		    function clone(value) {
		      return baseClone(value, CLONE_SYMBOLS_FLAG);
		    }

		    /**
		     * This method is like `_.clone` except that it accepts `customizer` which
		     * is invoked to produce the cloned value. If `customizer` returns `undefined`,
		     * cloning is handled by the method instead. The `customizer` is invoked with
		     * up to four arguments; (value [, index|key, object, stack]).
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Lang
		     * @param {*} value The value to clone.
		     * @param {Function} [customizer] The function to customize cloning.
		     * @returns {*} Returns the cloned value.
		     * @see _.cloneDeepWith
		     * @example
		     *
		     * function customizer(value) {
		     *   if (_.isElement(value)) {
		     *     return value.cloneNode(false);
		     *   }
		     * }
		     *
		     * var el = _.cloneWith(document.body, customizer);
		     *
		     * console.log(el === document.body);
		     * // => false
		     * console.log(el.nodeName);
		     * // => 'BODY'
		     * console.log(el.childNodes.length);
		     * // => 0
		     */
		    function cloneWith(value, customizer) {
		      customizer = typeof customizer == 'function' ? customizer : undefined$1;
		      return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
		    }

		    /**
		     * This method is like `_.clone` except that it recursively clones `value`.
		     *
		     * @static
		     * @memberOf _
		     * @since 1.0.0
		     * @category Lang
		     * @param {*} value The value to recursively clone.
		     * @returns {*} Returns the deep cloned value.
		     * @see _.clone
		     * @example
		     *
		     * var objects = [{ 'a': 1 }, { 'b': 2 }];
		     *
		     * var deep = _.cloneDeep(objects);
		     * console.log(deep[0] === objects[0]);
		     * // => false
		     */
		    function cloneDeep(value) {
		      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
		    }

		    /**
		     * This method is like `_.cloneWith` except that it recursively clones `value`.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Lang
		     * @param {*} value The value to recursively clone.
		     * @param {Function} [customizer] The function to customize cloning.
		     * @returns {*} Returns the deep cloned value.
		     * @see _.cloneWith
		     * @example
		     *
		     * function customizer(value) {
		     *   if (_.isElement(value)) {
		     *     return value.cloneNode(true);
		     *   }
		     * }
		     *
		     * var el = _.cloneDeepWith(document.body, customizer);
		     *
		     * console.log(el === document.body);
		     * // => false
		     * console.log(el.nodeName);
		     * // => 'BODY'
		     * console.log(el.childNodes.length);
		     * // => 20
		     */
		    function cloneDeepWith(value, customizer) {
		      customizer = typeof customizer == 'function' ? customizer : undefined$1;
		      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
		    }

		    /**
		     * Checks if `object` conforms to `source` by invoking the predicate
		     * properties of `source` with the corresponding property values of `object`.
		     *
		     * **Note:** This method is equivalent to `_.conforms` when `source` is
		     * partially applied.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.14.0
		     * @category Lang
		     * @param {Object} object The object to inspect.
		     * @param {Object} source The object of property predicates to conform to.
		     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
		     * @example
		     *
		     * var object = { 'a': 1, 'b': 2 };
		     *
		     * _.conformsTo(object, { 'b': function(n) { return n > 1; } });
		     * // => true
		     *
		     * _.conformsTo(object, { 'b': function(n) { return n > 2; } });
		     * // => false
		     */
		    function conformsTo(object, source) {
		      return source == null || baseConformsTo(object, source, keys(source));
		    }

		    /**
		     * Performs a
		     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
		     * comparison between two values to determine if they are equivalent.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Lang
		     * @param {*} value The value to compare.
		     * @param {*} other The other value to compare.
		     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
		     * @example
		     *
		     * var object = { 'a': 1 };
		     * var other = { 'a': 1 };
		     *
		     * _.eq(object, object);
		     * // => true
		     *
		     * _.eq(object, other);
		     * // => false
		     *
		     * _.eq('a', 'a');
		     * // => true
		     *
		     * _.eq('a', Object('a'));
		     * // => false
		     *
		     * _.eq(NaN, NaN);
		     * // => true
		     */
		    function eq(value, other) {
		      return value === other || (value !== value && other !== other);
		    }

		    /**
		     * Checks if `value` is greater than `other`.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.9.0
		     * @category Lang
		     * @param {*} value The value to compare.
		     * @param {*} other The other value to compare.
		     * @returns {boolean} Returns `true` if `value` is greater than `other`,
		     *  else `false`.
		     * @see _.lt
		     * @example
		     *
		     * _.gt(3, 1);
		     * // => true
		     *
		     * _.gt(3, 3);
		     * // => false
		     *
		     * _.gt(1, 3);
		     * // => false
		     */
		    var gt = createRelationalOperation(baseGt);

		    /**
		     * Checks if `value` is greater than or equal to `other`.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.9.0
		     * @category Lang
		     * @param {*} value The value to compare.
		     * @param {*} other The other value to compare.
		     * @returns {boolean} Returns `true` if `value` is greater than or equal to
		     *  `other`, else `false`.
		     * @see _.lte
		     * @example
		     *
		     * _.gte(3, 1);
		     * // => true
		     *
		     * _.gte(3, 3);
		     * // => true
		     *
		     * _.gte(1, 3);
		     * // => false
		     */
		    var gte = createRelationalOperation(function(value, other) {
		      return value >= other;
		    });

		    /**
		     * Checks if `value` is likely an `arguments` object.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Lang
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
		     *  else `false`.
		     * @example
		     *
		     * _.isArguments(function() { return arguments; }());
		     * // => true
		     *
		     * _.isArguments([1, 2, 3]);
		     * // => false
		     */
		    var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
		      return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&
		        !propertyIsEnumerable.call(value, 'callee');
		    };

		    /**
		     * Checks if `value` is classified as an `Array` object.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Lang
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is an array, else `false`.
		     * @example
		     *
		     * _.isArray([1, 2, 3]);
		     * // => true
		     *
		     * _.isArray(document.body.children);
		     * // => false
		     *
		     * _.isArray('abc');
		     * // => false
		     *
		     * _.isArray(_.noop);
		     * // => false
		     */
		    var isArray = Array.isArray;

		    /**
		     * Checks if `value` is classified as an `ArrayBuffer` object.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.3.0
		     * @category Lang
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
		     * @example
		     *
		     * _.isArrayBuffer(new ArrayBuffer(2));
		     * // => true
		     *
		     * _.isArrayBuffer(new Array(2));
		     * // => false
		     */
		    var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;

		    /**
		     * Checks if `value` is array-like. A value is considered array-like if it's
		     * not a function and has a `value.length` that's an integer greater than or
		     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Lang
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
		     * @example
		     *
		     * _.isArrayLike([1, 2, 3]);
		     * // => true
		     *
		     * _.isArrayLike(document.body.children);
		     * // => true
		     *
		     * _.isArrayLike('abc');
		     * // => true
		     *
		     * _.isArrayLike(_.noop);
		     * // => false
		     */
		    function isArrayLike(value) {
		      return value != null && isLength(value.length) && !isFunction(value);
		    }

		    /**
		     * This method is like `_.isArrayLike` except that it also checks if `value`
		     * is an object.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Lang
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is an array-like object,
		     *  else `false`.
		     * @example
		     *
		     * _.isArrayLikeObject([1, 2, 3]);
		     * // => true
		     *
		     * _.isArrayLikeObject(document.body.children);
		     * // => true
		     *
		     * _.isArrayLikeObject('abc');
		     * // => false
		     *
		     * _.isArrayLikeObject(_.noop);
		     * // => false
		     */
		    function isArrayLikeObject(value) {
		      return isObjectLike(value) && isArrayLike(value);
		    }

		    /**
		     * Checks if `value` is classified as a boolean primitive or object.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Lang
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
		     * @example
		     *
		     * _.isBoolean(false);
		     * // => true
		     *
		     * _.isBoolean(null);
		     * // => false
		     */
		    function isBoolean(value) {
		      return value === true || value === false ||
		        (isObjectLike(value) && baseGetTag(value) == boolTag);
		    }

		    /**
		     * Checks if `value` is a buffer.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.3.0
		     * @category Lang
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
		     * @example
		     *
		     * _.isBuffer(new Buffer(2));
		     * // => true
		     *
		     * _.isBuffer(new Uint8Array(2));
		     * // => false
		     */
		    var isBuffer = nativeIsBuffer || stubFalse;

		    /**
		     * Checks if `value` is classified as a `Date` object.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Lang
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
		     * @example
		     *
		     * _.isDate(new Date);
		     * // => true
		     *
		     * _.isDate('Mon April 23 2012');
		     * // => false
		     */
		    var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;

		    /**
		     * Checks if `value` is likely a DOM element.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Lang
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
		     * @example
		     *
		     * _.isElement(document.body);
		     * // => true
		     *
		     * _.isElement('<body>');
		     * // => false
		     */
		    function isElement(value) {
		      return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);
		    }

		    /**
		     * Checks if `value` is an empty object, collection, map, or set.
		     *
		     * Objects are considered empty if they have no own enumerable string keyed
		     * properties.
		     *
		     * Array-like values such as `arguments` objects, arrays, buffers, strings, or
		     * jQuery-like collections are considered empty if they have a `length` of `0`.
		     * Similarly, maps and sets are considered empty if they have a `size` of `0`.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Lang
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is empty, else `false`.
		     * @example
		     *
		     * _.isEmpty(null);
		     * // => true
		     *
		     * _.isEmpty(true);
		     * // => true
		     *
		     * _.isEmpty(1);
		     * // => true
		     *
		     * _.isEmpty([1, 2, 3]);
		     * // => false
		     *
		     * _.isEmpty({ 'a': 1 });
		     * // => false
		     */
		    function isEmpty(value) {
		      if (value == null) {
		        return true;
		      }
		      if (isArrayLike(value) &&
		          (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||
		            isBuffer(value) || isTypedArray(value) || isArguments(value))) {
		        return !value.length;
		      }
		      var tag = getTag(value);
		      if (tag == mapTag || tag == setTag) {
		        return !value.size;
		      }
		      if (isPrototype(value)) {
		        return !baseKeys(value).length;
		      }
		      for (var key in value) {
		        if (hasOwnProperty.call(value, key)) {
		          return false;
		        }
		      }
		      return true;
		    }

		    /**
		     * Performs a deep comparison between two values to determine if they are
		     * equivalent.
		     *
		     * **Note:** This method supports comparing arrays, array buffers, booleans,
		     * date objects, error objects, maps, numbers, `Object` objects, regexes,
		     * sets, strings, symbols, and typed arrays. `Object` objects are compared
		     * by their own, not inherited, enumerable properties. Functions and DOM
		     * nodes are compared by strict equality, i.e. `===`.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Lang
		     * @param {*} value The value to compare.
		     * @param {*} other The other value to compare.
		     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
		     * @example
		     *
		     * var object = { 'a': 1 };
		     * var other = { 'a': 1 };
		     *
		     * _.isEqual(object, other);
		     * // => true
		     *
		     * object === other;
		     * // => false
		     */
		    function isEqual(value, other) {
		      return baseIsEqual(value, other);
		    }

		    /**
		     * This method is like `_.isEqual` except that it accepts `customizer` which
		     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
		     * are handled by the method instead. The `customizer` is invoked with up to
		     * six arguments: (objValue, othValue [, index|key, object, other, stack]).
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Lang
		     * @param {*} value The value to compare.
		     * @param {*} other The other value to compare.
		     * @param {Function} [customizer] The function to customize comparisons.
		     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
		     * @example
		     *
		     * function isGreeting(value) {
		     *   return /^h(?:i|ello)$/.test(value);
		     * }
		     *
		     * function customizer(objValue, othValue) {
		     *   if (isGreeting(objValue) && isGreeting(othValue)) {
		     *     return true;
		     *   }
		     * }
		     *
		     * var array = ['hello', 'goodbye'];
		     * var other = ['hi', 'goodbye'];
		     *
		     * _.isEqualWith(array, other, customizer);
		     * // => true
		     */
		    function isEqualWith(value, other, customizer) {
		      customizer = typeof customizer == 'function' ? customizer : undefined$1;
		      var result = customizer ? customizer(value, other) : undefined$1;
		      return result === undefined$1 ? baseIsEqual(value, other, undefined$1, customizer) : !!result;
		    }

		    /**
		     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
		     * `SyntaxError`, `TypeError`, or `URIError` object.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category Lang
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
		     * @example
		     *
		     * _.isError(new Error);
		     * // => true
		     *
		     * _.isError(Error);
		     * // => false
		     */
		    function isError(value) {
		      if (!isObjectLike(value)) {
		        return false;
		      }
		      var tag = baseGetTag(value);
		      return tag == errorTag || tag == domExcTag ||
		        (typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject(value));
		    }

		    /**
		     * Checks if `value` is a finite primitive number.
		     *
		     * **Note:** This method is based on
		     * [`Number.isFinite`](https://mdn.io/Number/isFinite).
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Lang
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
		     * @example
		     *
		     * _.isFinite(3);
		     * // => true
		     *
		     * _.isFinite(Number.MIN_VALUE);
		     * // => true
		     *
		     * _.isFinite(Infinity);
		     * // => false
		     *
		     * _.isFinite('3');
		     * // => false
		     */
		    function isFinite(value) {
		      return typeof value == 'number' && nativeIsFinite(value);
		    }

		    /**
		     * Checks if `value` is classified as a `Function` object.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Lang
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is a function, else `false`.
		     * @example
		     *
		     * _.isFunction(_);
		     * // => true
		     *
		     * _.isFunction(/abc/);
		     * // => false
		     */
		    function isFunction(value) {
		      if (!isObject(value)) {
		        return false;
		      }
		      // The use of `Object#toString` avoids issues with the `typeof` operator
		      // in Safari 9 which returns 'object' for typed arrays and other constructors.
		      var tag = baseGetTag(value);
		      return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
		    }

		    /**
		     * Checks if `value` is an integer.
		     *
		     * **Note:** This method is based on
		     * [`Number.isInteger`](https://mdn.io/Number/isInteger).
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Lang
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is an integer, else `false`.
		     * @example
		     *
		     * _.isInteger(3);
		     * // => true
		     *
		     * _.isInteger(Number.MIN_VALUE);
		     * // => false
		     *
		     * _.isInteger(Infinity);
		     * // => false
		     *
		     * _.isInteger('3');
		     * // => false
		     */
		    function isInteger(value) {
		      return typeof value == 'number' && value == toInteger(value);
		    }

		    /**
		     * Checks if `value` is a valid array-like length.
		     *
		     * **Note:** This method is loosely based on
		     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Lang
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
		     * @example
		     *
		     * _.isLength(3);
		     * // => true
		     *
		     * _.isLength(Number.MIN_VALUE);
		     * // => false
		     *
		     * _.isLength(Infinity);
		     * // => false
		     *
		     * _.isLength('3');
		     * // => false
		     */
		    function isLength(value) {
		      return typeof value == 'number' &&
		        value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
		    }

		    /**
		     * Checks if `value` is the
		     * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
		     * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Lang
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
		     * @example
		     *
		     * _.isObject({});
		     * // => true
		     *
		     * _.isObject([1, 2, 3]);
		     * // => true
		     *
		     * _.isObject(_.noop);
		     * // => true
		     *
		     * _.isObject(null);
		     * // => false
		     */
		    function isObject(value) {
		      var type = typeof value;
		      return value != null && (type == 'object' || type == 'function');
		    }

		    /**
		     * Checks if `value` is object-like. A value is object-like if it's not `null`
		     * and has a `typeof` result of "object".
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Lang
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
		     * @example
		     *
		     * _.isObjectLike({});
		     * // => true
		     *
		     * _.isObjectLike([1, 2, 3]);
		     * // => true
		     *
		     * _.isObjectLike(_.noop);
		     * // => false
		     *
		     * _.isObjectLike(null);
		     * // => false
		     */
		    function isObjectLike(value) {
		      return value != null && typeof value == 'object';
		    }

		    /**
		     * Checks if `value` is classified as a `Map` object.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.3.0
		     * @category Lang
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
		     * @example
		     *
		     * _.isMap(new Map);
		     * // => true
		     *
		     * _.isMap(new WeakMap);
		     * // => false
		     */
		    var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;

		    /**
		     * Performs a partial deep comparison between `object` and `source` to
		     * determine if `object` contains equivalent property values.
		     *
		     * **Note:** This method is equivalent to `_.matches` when `source` is
		     * partially applied.
		     *
		     * Partial comparisons will match empty array and empty object `source`
		     * values against any array or object value, respectively. See `_.isEqual`
		     * for a list of supported value comparisons.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category Lang
		     * @param {Object} object The object to inspect.
		     * @param {Object} source The object of property values to match.
		     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
		     * @example
		     *
		     * var object = { 'a': 1, 'b': 2 };
		     *
		     * _.isMatch(object, { 'b': 2 });
		     * // => true
		     *
		     * _.isMatch(object, { 'b': 1 });
		     * // => false
		     */
		    function isMatch(object, source) {
		      return object === source || baseIsMatch(object, source, getMatchData(source));
		    }

		    /**
		     * This method is like `_.isMatch` except that it accepts `customizer` which
		     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
		     * are handled by the method instead. The `customizer` is invoked with five
		     * arguments: (objValue, srcValue, index|key, object, source).
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Lang
		     * @param {Object} object The object to inspect.
		     * @param {Object} source The object of property values to match.
		     * @param {Function} [customizer] The function to customize comparisons.
		     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
		     * @example
		     *
		     * function isGreeting(value) {
		     *   return /^h(?:i|ello)$/.test(value);
		     * }
		     *
		     * function customizer(objValue, srcValue) {
		     *   if (isGreeting(objValue) && isGreeting(srcValue)) {
		     *     return true;
		     *   }
		     * }
		     *
		     * var object = { 'greeting': 'hello' };
		     * var source = { 'greeting': 'hi' };
		     *
		     * _.isMatchWith(object, source, customizer);
		     * // => true
		     */
		    function isMatchWith(object, source, customizer) {
		      customizer = typeof customizer == 'function' ? customizer : undefined$1;
		      return baseIsMatch(object, source, getMatchData(source), customizer);
		    }

		    /**
		     * Checks if `value` is `NaN`.
		     *
		     * **Note:** This method is based on
		     * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as
		     * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for
		     * `undefined` and other non-number values.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Lang
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
		     * @example
		     *
		     * _.isNaN(NaN);
		     * // => true
		     *
		     * _.isNaN(new Number(NaN));
		     * // => true
		     *
		     * isNaN(undefined);
		     * // => true
		     *
		     * _.isNaN(undefined);
		     * // => false
		     */
		    function isNaN(value) {
		      // An `NaN` primitive is the only value that is not equal to itself.
		      // Perform the `toStringTag` check first to avoid errors with some
		      // ActiveX objects in IE.
		      return isNumber(value) && value != +value;
		    }

		    /**
		     * Checks if `value` is a pristine native function.
		     *
		     * **Note:** This method can't reliably detect native functions in the presence
		     * of the core-js package because core-js circumvents this kind of detection.
		     * Despite multiple requests, the core-js maintainer has made it clear: any
		     * attempt to fix the detection will be obstructed. As a result, we're left
		     * with little choice but to throw an error. Unfortunately, this also affects
		     * packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),
		     * which rely on core-js.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category Lang
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is a native function,
		     *  else `false`.
		     * @example
		     *
		     * _.isNative(Array.prototype.push);
		     * // => true
		     *
		     * _.isNative(_);
		     * // => false
		     */
		    function isNative(value) {
		      if (isMaskable(value)) {
		        throw new Error(CORE_ERROR_TEXT);
		      }
		      return baseIsNative(value);
		    }

		    /**
		     * Checks if `value` is `null`.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Lang
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
		     * @example
		     *
		     * _.isNull(null);
		     * // => true
		     *
		     * _.isNull(void 0);
		     * // => false
		     */
		    function isNull(value) {
		      return value === null;
		    }

		    /**
		     * Checks if `value` is `null` or `undefined`.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Lang
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
		     * @example
		     *
		     * _.isNil(null);
		     * // => true
		     *
		     * _.isNil(void 0);
		     * // => true
		     *
		     * _.isNil(NaN);
		     * // => false
		     */
		    function isNil(value) {
		      return value == null;
		    }

		    /**
		     * Checks if `value` is classified as a `Number` primitive or object.
		     *
		     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
		     * classified as numbers, use the `_.isFinite` method.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Lang
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is a number, else `false`.
		     * @example
		     *
		     * _.isNumber(3);
		     * // => true
		     *
		     * _.isNumber(Number.MIN_VALUE);
		     * // => true
		     *
		     * _.isNumber(Infinity);
		     * // => true
		     *
		     * _.isNumber('3');
		     * // => false
		     */
		    function isNumber(value) {
		      return typeof value == 'number' ||
		        (isObjectLike(value) && baseGetTag(value) == numberTag);
		    }

		    /**
		     * Checks if `value` is a plain object, that is, an object created by the
		     * `Object` constructor or one with a `[[Prototype]]` of `null`.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.8.0
		     * @category Lang
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
		     * @example
		     *
		     * function Foo() {
		     *   this.a = 1;
		     * }
		     *
		     * _.isPlainObject(new Foo);
		     * // => false
		     *
		     * _.isPlainObject([1, 2, 3]);
		     * // => false
		     *
		     * _.isPlainObject({ 'x': 0, 'y': 0 });
		     * // => true
		     *
		     * _.isPlainObject(Object.create(null));
		     * // => true
		     */
		    function isPlainObject(value) {
		      if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
		        return false;
		      }
		      var proto = getPrototype(value);
		      if (proto === null) {
		        return true;
		      }
		      var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
		      return typeof Ctor == 'function' && Ctor instanceof Ctor &&
		        funcToString.call(Ctor) == objectCtorString;
		    }

		    /**
		     * Checks if `value` is classified as a `RegExp` object.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Lang
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
		     * @example
		     *
		     * _.isRegExp(/abc/);
		     * // => true
		     *
		     * _.isRegExp('/abc/');
		     * // => false
		     */
		    var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;

		    /**
		     * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754
		     * double precision number which isn't the result of a rounded unsafe integer.
		     *
		     * **Note:** This method is based on
		     * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Lang
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.
		     * @example
		     *
		     * _.isSafeInteger(3);
		     * // => true
		     *
		     * _.isSafeInteger(Number.MIN_VALUE);
		     * // => false
		     *
		     * _.isSafeInteger(Infinity);
		     * // => false
		     *
		     * _.isSafeInteger('3');
		     * // => false
		     */
		    function isSafeInteger(value) {
		      return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
		    }

		    /**
		     * Checks if `value` is classified as a `Set` object.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.3.0
		     * @category Lang
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
		     * @example
		     *
		     * _.isSet(new Set);
		     * // => true
		     *
		     * _.isSet(new WeakSet);
		     * // => false
		     */
		    var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;

		    /**
		     * Checks if `value` is classified as a `String` primitive or object.
		     *
		     * @static
		     * @since 0.1.0
		     * @memberOf _
		     * @category Lang
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is a string, else `false`.
		     * @example
		     *
		     * _.isString('abc');
		     * // => true
		     *
		     * _.isString(1);
		     * // => false
		     */
		    function isString(value) {
		      return typeof value == 'string' ||
		        (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);
		    }

		    /**
		     * Checks if `value` is classified as a `Symbol` primitive or object.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Lang
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
		     * @example
		     *
		     * _.isSymbol(Symbol.iterator);
		     * // => true
		     *
		     * _.isSymbol('abc');
		     * // => false
		     */
		    function isSymbol(value) {
		      return typeof value == 'symbol' ||
		        (isObjectLike(value) && baseGetTag(value) == symbolTag);
		    }

		    /**
		     * Checks if `value` is classified as a typed array.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category Lang
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
		     * @example
		     *
		     * _.isTypedArray(new Uint8Array);
		     * // => true
		     *
		     * _.isTypedArray([]);
		     * // => false
		     */
		    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

		    /**
		     * Checks if `value` is `undefined`.
		     *
		     * @static
		     * @since 0.1.0
		     * @memberOf _
		     * @category Lang
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
		     * @example
		     *
		     * _.isUndefined(void 0);
		     * // => true
		     *
		     * _.isUndefined(null);
		     * // => false
		     */
		    function isUndefined(value) {
		      return value === undefined$1;
		    }

		    /**
		     * Checks if `value` is classified as a `WeakMap` object.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.3.0
		     * @category Lang
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.
		     * @example
		     *
		     * _.isWeakMap(new WeakMap);
		     * // => true
		     *
		     * _.isWeakMap(new Map);
		     * // => false
		     */
		    function isWeakMap(value) {
		      return isObjectLike(value) && getTag(value) == weakMapTag;
		    }

		    /**
		     * Checks if `value` is classified as a `WeakSet` object.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.3.0
		     * @category Lang
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is a weak set, else `false`.
		     * @example
		     *
		     * _.isWeakSet(new WeakSet);
		     * // => true
		     *
		     * _.isWeakSet(new Set);
		     * // => false
		     */
		    function isWeakSet(value) {
		      return isObjectLike(value) && baseGetTag(value) == weakSetTag;
		    }

		    /**
		     * Checks if `value` is less than `other`.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.9.0
		     * @category Lang
		     * @param {*} value The value to compare.
		     * @param {*} other The other value to compare.
		     * @returns {boolean} Returns `true` if `value` is less than `other`,
		     *  else `false`.
		     * @see _.gt
		     * @example
		     *
		     * _.lt(1, 3);
		     * // => true
		     *
		     * _.lt(3, 3);
		     * // => false
		     *
		     * _.lt(3, 1);
		     * // => false
		     */
		    var lt = createRelationalOperation(baseLt);

		    /**
		     * Checks if `value` is less than or equal to `other`.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.9.0
		     * @category Lang
		     * @param {*} value The value to compare.
		     * @param {*} other The other value to compare.
		     * @returns {boolean} Returns `true` if `value` is less than or equal to
		     *  `other`, else `false`.
		     * @see _.gte
		     * @example
		     *
		     * _.lte(1, 3);
		     * // => true
		     *
		     * _.lte(3, 3);
		     * // => true
		     *
		     * _.lte(3, 1);
		     * // => false
		     */
		    var lte = createRelationalOperation(function(value, other) {
		      return value <= other;
		    });

		    /**
		     * Converts `value` to an array.
		     *
		     * @static
		     * @since 0.1.0
		     * @memberOf _
		     * @category Lang
		     * @param {*} value The value to convert.
		     * @returns {Array} Returns the converted array.
		     * @example
		     *
		     * _.toArray({ 'a': 1, 'b': 2 });
		     * // => [1, 2]
		     *
		     * _.toArray('abc');
		     * // => ['a', 'b', 'c']
		     *
		     * _.toArray(1);
		     * // => []
		     *
		     * _.toArray(null);
		     * // => []
		     */
		    function toArray(value) {
		      if (!value) {
		        return [];
		      }
		      if (isArrayLike(value)) {
		        return isString(value) ? stringToArray(value) : copyArray(value);
		      }
		      if (symIterator && value[symIterator]) {
		        return iteratorToArray(value[symIterator]());
		      }
		      var tag = getTag(value),
		          func = tag == mapTag ? mapToArray : (tag == setTag ? setToArray : values);

		      return func(value);
		    }

		    /**
		     * Converts `value` to a finite number.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.12.0
		     * @category Lang
		     * @param {*} value The value to convert.
		     * @returns {number} Returns the converted number.
		     * @example
		     *
		     * _.toFinite(3.2);
		     * // => 3.2
		     *
		     * _.toFinite(Number.MIN_VALUE);
		     * // => 5e-324
		     *
		     * _.toFinite(Infinity);
		     * // => 1.7976931348623157e+308
		     *
		     * _.toFinite('3.2');
		     * // => 3.2
		     */
		    function toFinite(value) {
		      if (!value) {
		        return value === 0 ? value : 0;
		      }
		      value = toNumber(value);
		      if (value === INFINITY || value === -INFINITY) {
		        var sign = (value < 0 ? -1 : 1);
		        return sign * MAX_INTEGER;
		      }
		      return value === value ? value : 0;
		    }

		    /**
		     * Converts `value` to an integer.
		     *
		     * **Note:** This method is loosely based on
		     * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Lang
		     * @param {*} value The value to convert.
		     * @returns {number} Returns the converted integer.
		     * @example
		     *
		     * _.toInteger(3.2);
		     * // => 3
		     *
		     * _.toInteger(Number.MIN_VALUE);
		     * // => 0
		     *
		     * _.toInteger(Infinity);
		     * // => 1.7976931348623157e+308
		     *
		     * _.toInteger('3.2');
		     * // => 3
		     */
		    function toInteger(value) {
		      var result = toFinite(value),
		          remainder = result % 1;

		      return result === result ? (remainder ? result - remainder : result) : 0;
		    }

		    /**
		     * Converts `value` to an integer suitable for use as the length of an
		     * array-like object.
		     *
		     * **Note:** This method is based on
		     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Lang
		     * @param {*} value The value to convert.
		     * @returns {number} Returns the converted integer.
		     * @example
		     *
		     * _.toLength(3.2);
		     * // => 3
		     *
		     * _.toLength(Number.MIN_VALUE);
		     * // => 0
		     *
		     * _.toLength(Infinity);
		     * // => 4294967295
		     *
		     * _.toLength('3.2');
		     * // => 3
		     */
		    function toLength(value) {
		      return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
		    }

		    /**
		     * Converts `value` to a number.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Lang
		     * @param {*} value The value to process.
		     * @returns {number} Returns the number.
		     * @example
		     *
		     * _.toNumber(3.2);
		     * // => 3.2
		     *
		     * _.toNumber(Number.MIN_VALUE);
		     * // => 5e-324
		     *
		     * _.toNumber(Infinity);
		     * // => Infinity
		     *
		     * _.toNumber('3.2');
		     * // => 3.2
		     */
		    function toNumber(value) {
		      if (typeof value == 'number') {
		        return value;
		      }
		      if (isSymbol(value)) {
		        return NAN;
		      }
		      if (isObject(value)) {
		        var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
		        value = isObject(other) ? (other + '') : other;
		      }
		      if (typeof value != 'string') {
		        return value === 0 ? value : +value;
		      }
		      value = baseTrim(value);
		      var isBinary = reIsBinary.test(value);
		      return (isBinary || reIsOctal.test(value))
		        ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
		        : (reIsBadHex.test(value) ? NAN : +value);
		    }

		    /**
		     * Converts `value` to a plain object flattening inherited enumerable string
		     * keyed properties of `value` to own properties of the plain object.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category Lang
		     * @param {*} value The value to convert.
		     * @returns {Object} Returns the converted plain object.
		     * @example
		     *
		     * function Foo() {
		     *   this.b = 2;
		     * }
		     *
		     * Foo.prototype.c = 3;
		     *
		     * _.assign({ 'a': 1 }, new Foo);
		     * // => { 'a': 1, 'b': 2 }
		     *
		     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
		     * // => { 'a': 1, 'b': 2, 'c': 3 }
		     */
		    function toPlainObject(value) {
		      return copyObject(value, keysIn(value));
		    }

		    /**
		     * Converts `value` to a safe integer. A safe integer can be compared and
		     * represented correctly.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Lang
		     * @param {*} value The value to convert.
		     * @returns {number} Returns the converted integer.
		     * @example
		     *
		     * _.toSafeInteger(3.2);
		     * // => 3
		     *
		     * _.toSafeInteger(Number.MIN_VALUE);
		     * // => 0
		     *
		     * _.toSafeInteger(Infinity);
		     * // => 9007199254740991
		     *
		     * _.toSafeInteger('3.2');
		     * // => 3
		     */
		    function toSafeInteger(value) {
		      return value
		        ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER)
		        : (value === 0 ? value : 0);
		    }

		    /**
		     * Converts `value` to a string. An empty string is returned for `null`
		     * and `undefined` values. The sign of `-0` is preserved.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Lang
		     * @param {*} value The value to convert.
		     * @returns {string} Returns the converted string.
		     * @example
		     *
		     * _.toString(null);
		     * // => ''
		     *
		     * _.toString(-0);
		     * // => '-0'
		     *
		     * _.toString([1, 2, 3]);
		     * // => '1,2,3'
		     */
		    function toString(value) {
		      return value == null ? '' : baseToString(value);
		    }

		    /*------------------------------------------------------------------------*/

		    /**
		     * Assigns own enumerable string keyed properties of source objects to the
		     * destination object. Source objects are applied from left to right.
		     * Subsequent sources overwrite property assignments of previous sources.
		     *
		     * **Note:** This method mutates `object` and is loosely based on
		     * [`Object.assign`](https://mdn.io/Object/assign).
		     *
		     * @static
		     * @memberOf _
		     * @since 0.10.0
		     * @category Object
		     * @param {Object} object The destination object.
		     * @param {...Object} [sources] The source objects.
		     * @returns {Object} Returns `object`.
		     * @see _.assignIn
		     * @example
		     *
		     * function Foo() {
		     *   this.a = 1;
		     * }
		     *
		     * function Bar() {
		     *   this.c = 3;
		     * }
		     *
		     * Foo.prototype.b = 2;
		     * Bar.prototype.d = 4;
		     *
		     * _.assign({ 'a': 0 }, new Foo, new Bar);
		     * // => { 'a': 1, 'c': 3 }
		     */
		    var assign = createAssigner(function(object, source) {
		      if (isPrototype(source) || isArrayLike(source)) {
		        copyObject(source, keys(source), object);
		        return;
		      }
		      for (var key in source) {
		        if (hasOwnProperty.call(source, key)) {
		          assignValue(object, key, source[key]);
		        }
		      }
		    });

		    /**
		     * This method is like `_.assign` except that it iterates over own and
		     * inherited source properties.
		     *
		     * **Note:** This method mutates `object`.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @alias extend
		     * @category Object
		     * @param {Object} object The destination object.
		     * @param {...Object} [sources] The source objects.
		     * @returns {Object} Returns `object`.
		     * @see _.assign
		     * @example
		     *
		     * function Foo() {
		     *   this.a = 1;
		     * }
		     *
		     * function Bar() {
		     *   this.c = 3;
		     * }
		     *
		     * Foo.prototype.b = 2;
		     * Bar.prototype.d = 4;
		     *
		     * _.assignIn({ 'a': 0 }, new Foo, new Bar);
		     * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }
		     */
		    var assignIn = createAssigner(function(object, source) {
		      copyObject(source, keysIn(source), object);
		    });

		    /**
		     * This method is like `_.assignIn` except that it accepts `customizer`
		     * which is invoked to produce the assigned values. If `customizer` returns
		     * `undefined`, assignment is handled by the method instead. The `customizer`
		     * is invoked with five arguments: (objValue, srcValue, key, object, source).
		     *
		     * **Note:** This method mutates `object`.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @alias extendWith
		     * @category Object
		     * @param {Object} object The destination object.
		     * @param {...Object} sources The source objects.
		     * @param {Function} [customizer] The function to customize assigned values.
		     * @returns {Object} Returns `object`.
		     * @see _.assignWith
		     * @example
		     *
		     * function customizer(objValue, srcValue) {
		     *   return _.isUndefined(objValue) ? srcValue : objValue;
		     * }
		     *
		     * var defaults = _.partialRight(_.assignInWith, customizer);
		     *
		     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
		     * // => { 'a': 1, 'b': 2 }
		     */
		    var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
		      copyObject(source, keysIn(source), object, customizer);
		    });

		    /**
		     * This method is like `_.assign` except that it accepts `customizer`
		     * which is invoked to produce the assigned values. If `customizer` returns
		     * `undefined`, assignment is handled by the method instead. The `customizer`
		     * is invoked with five arguments: (objValue, srcValue, key, object, source).
		     *
		     * **Note:** This method mutates `object`.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Object
		     * @param {Object} object The destination object.
		     * @param {...Object} sources The source objects.
		     * @param {Function} [customizer] The function to customize assigned values.
		     * @returns {Object} Returns `object`.
		     * @see _.assignInWith
		     * @example
		     *
		     * function customizer(objValue, srcValue) {
		     *   return _.isUndefined(objValue) ? srcValue : objValue;
		     * }
		     *
		     * var defaults = _.partialRight(_.assignWith, customizer);
		     *
		     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
		     * // => { 'a': 1, 'b': 2 }
		     */
		    var assignWith = createAssigner(function(object, source, srcIndex, customizer) {
		      copyObject(source, keys(source), object, customizer);
		    });

		    /**
		     * Creates an array of values corresponding to `paths` of `object`.
		     *
		     * @static
		     * @memberOf _
		     * @since 1.0.0
		     * @category Object
		     * @param {Object} object The object to iterate over.
		     * @param {...(string|string[])} [paths] The property paths to pick.
		     * @returns {Array} Returns the picked values.
		     * @example
		     *
		     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
		     *
		     * _.at(object, ['a[0].b.c', 'a[1]']);
		     * // => [3, 4]
		     */
		    var at = flatRest(baseAt);

		    /**
		     * Creates an object that inherits from the `prototype` object. If a
		     * `properties` object is given, its own enumerable string keyed properties
		     * are assigned to the created object.
		     *
		     * @static
		     * @memberOf _
		     * @since 2.3.0
		     * @category Object
		     * @param {Object} prototype The object to inherit from.
		     * @param {Object} [properties] The properties to assign to the object.
		     * @returns {Object} Returns the new object.
		     * @example
		     *
		     * function Shape() {
		     *   this.x = 0;
		     *   this.y = 0;
		     * }
		     *
		     * function Circle() {
		     *   Shape.call(this);
		     * }
		     *
		     * Circle.prototype = _.create(Shape.prototype, {
		     *   'constructor': Circle
		     * });
		     *
		     * var circle = new Circle;
		     * circle instanceof Circle;
		     * // => true
		     *
		     * circle instanceof Shape;
		     * // => true
		     */
		    function create(prototype, properties) {
		      var result = baseCreate(prototype);
		      return properties == null ? result : baseAssign(result, properties);
		    }

		    /**
		     * Assigns own and inherited enumerable string keyed properties of source
		     * objects to the destination object for all destination properties that
		     * resolve to `undefined`. Source objects are applied from left to right.
		     * Once a property is set, additional values of the same property are ignored.
		     *
		     * **Note:** This method mutates `object`.
		     *
		     * @static
		     * @since 0.1.0
		     * @memberOf _
		     * @category Object
		     * @param {Object} object The destination object.
		     * @param {...Object} [sources] The source objects.
		     * @returns {Object} Returns `object`.
		     * @see _.defaultsDeep
		     * @example
		     *
		     * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
		     * // => { 'a': 1, 'b': 2 }
		     */
		    var defaults = baseRest(function(object, sources) {
		      object = Object(object);

		      var index = -1;
		      var length = sources.length;
		      var guard = length > 2 ? sources[2] : undefined$1;

		      if (guard && isIterateeCall(sources[0], sources[1], guard)) {
		        length = 1;
		      }

		      while (++index < length) {
		        var source = sources[index];
		        var props = keysIn(source);
		        var propsIndex = -1;
		        var propsLength = props.length;

		        while (++propsIndex < propsLength) {
		          var key = props[propsIndex];
		          var value = object[key];

		          if (value === undefined$1 ||
		              (eq(value, objectProto[key]) && !hasOwnProperty.call(object, key))) {
		            object[key] = source[key];
		          }
		        }
		      }

		      return object;
		    });

		    /**
		     * This method is like `_.defaults` except that it recursively assigns
		     * default properties.
		     *
		     * **Note:** This method mutates `object`.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.10.0
		     * @category Object
		     * @param {Object} object The destination object.
		     * @param {...Object} [sources] The source objects.
		     * @returns {Object} Returns `object`.
		     * @see _.defaults
		     * @example
		     *
		     * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });
		     * // => { 'a': { 'b': 2, 'c': 3 } }
		     */
		    var defaultsDeep = baseRest(function(args) {
		      args.push(undefined$1, customDefaultsMerge);
		      return apply(mergeWith, undefined$1, args);
		    });

		    /**
		     * This method is like `_.find` except that it returns the key of the first
		     * element `predicate` returns truthy for instead of the element itself.
		     *
		     * @static
		     * @memberOf _
		     * @since 1.1.0
		     * @category Object
		     * @param {Object} object The object to inspect.
		     * @param {Function} [predicate=_.identity] The function invoked per iteration.
		     * @returns {string|undefined} Returns the key of the matched element,
		     *  else `undefined`.
		     * @example
		     *
		     * var users = {
		     *   'barney':  { 'age': 36, 'active': true },
		     *   'fred':    { 'age': 40, 'active': false },
		     *   'pebbles': { 'age': 1,  'active': true }
		     * };
		     *
		     * _.findKey(users, function(o) { return o.age < 40; });
		     * // => 'barney' (iteration order is not guaranteed)
		     *
		     * // The `_.matches` iteratee shorthand.
		     * _.findKey(users, { 'age': 1, 'active': true });
		     * // => 'pebbles'
		     *
		     * // The `_.matchesProperty` iteratee shorthand.
		     * _.findKey(users, ['active', false]);
		     * // => 'fred'
		     *
		     * // The `_.property` iteratee shorthand.
		     * _.findKey(users, 'active');
		     * // => 'barney'
		     */
		    function findKey(object, predicate) {
		      return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
		    }

		    /**
		     * This method is like `_.findKey` except that it iterates over elements of
		     * a collection in the opposite order.
		     *
		     * @static
		     * @memberOf _
		     * @since 2.0.0
		     * @category Object
		     * @param {Object} object The object to inspect.
		     * @param {Function} [predicate=_.identity] The function invoked per iteration.
		     * @returns {string|undefined} Returns the key of the matched element,
		     *  else `undefined`.
		     * @example
		     *
		     * var users = {
		     *   'barney':  { 'age': 36, 'active': true },
		     *   'fred':    { 'age': 40, 'active': false },
		     *   'pebbles': { 'age': 1,  'active': true }
		     * };
		     *
		     * _.findLastKey(users, function(o) { return o.age < 40; });
		     * // => returns 'pebbles' assuming `_.findKey` returns 'barney'
		     *
		     * // The `_.matches` iteratee shorthand.
		     * _.findLastKey(users, { 'age': 36, 'active': true });
		     * // => 'barney'
		     *
		     * // The `_.matchesProperty` iteratee shorthand.
		     * _.findLastKey(users, ['active', false]);
		     * // => 'fred'
		     *
		     * // The `_.property` iteratee shorthand.
		     * _.findLastKey(users, 'active');
		     * // => 'pebbles'
		     */
		    function findLastKey(object, predicate) {
		      return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
		    }

		    /**
		     * Iterates over own and inherited enumerable string keyed properties of an
		     * object and invokes `iteratee` for each property. The iteratee is invoked
		     * with three arguments: (value, key, object). Iteratee functions may exit
		     * iteration early by explicitly returning `false`.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.3.0
		     * @category Object
		     * @param {Object} object The object to iterate over.
		     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
		     * @returns {Object} Returns `object`.
		     * @see _.forInRight
		     * @example
		     *
		     * function Foo() {
		     *   this.a = 1;
		     *   this.b = 2;
		     * }
		     *
		     * Foo.prototype.c = 3;
		     *
		     * _.forIn(new Foo, function(value, key) {
		     *   console.log(key);
		     * });
		     * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).
		     */
		    function forIn(object, iteratee) {
		      return object == null
		        ? object
		        : baseFor(object, getIteratee(iteratee, 3), keysIn);
		    }

		    /**
		     * This method is like `_.forIn` except that it iterates over properties of
		     * `object` in the opposite order.
		     *
		     * @static
		     * @memberOf _
		     * @since 2.0.0
		     * @category Object
		     * @param {Object} object The object to iterate over.
		     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
		     * @returns {Object} Returns `object`.
		     * @see _.forIn
		     * @example
		     *
		     * function Foo() {
		     *   this.a = 1;
		     *   this.b = 2;
		     * }
		     *
		     * Foo.prototype.c = 3;
		     *
		     * _.forInRight(new Foo, function(value, key) {
		     *   console.log(key);
		     * });
		     * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.
		     */
		    function forInRight(object, iteratee) {
		      return object == null
		        ? object
		        : baseForRight(object, getIteratee(iteratee, 3), keysIn);
		    }

		    /**
		     * Iterates over own enumerable string keyed properties of an object and
		     * invokes `iteratee` for each property. The iteratee is invoked with three
		     * arguments: (value, key, object). Iteratee functions may exit iteration
		     * early by explicitly returning `false`.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.3.0
		     * @category Object
		     * @param {Object} object The object to iterate over.
		     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
		     * @returns {Object} Returns `object`.
		     * @see _.forOwnRight
		     * @example
		     *
		     * function Foo() {
		     *   this.a = 1;
		     *   this.b = 2;
		     * }
		     *
		     * Foo.prototype.c = 3;
		     *
		     * _.forOwn(new Foo, function(value, key) {
		     *   console.log(key);
		     * });
		     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
		     */
		    function forOwn(object, iteratee) {
		      return object && baseForOwn(object, getIteratee(iteratee, 3));
		    }

		    /**
		     * This method is like `_.forOwn` except that it iterates over properties of
		     * `object` in the opposite order.
		     *
		     * @static
		     * @memberOf _
		     * @since 2.0.0
		     * @category Object
		     * @param {Object} object The object to iterate over.
		     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
		     * @returns {Object} Returns `object`.
		     * @see _.forOwn
		     * @example
		     *
		     * function Foo() {
		     *   this.a = 1;
		     *   this.b = 2;
		     * }
		     *
		     * Foo.prototype.c = 3;
		     *
		     * _.forOwnRight(new Foo, function(value, key) {
		     *   console.log(key);
		     * });
		     * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.
		     */
		    function forOwnRight(object, iteratee) {
		      return object && baseForOwnRight(object, getIteratee(iteratee, 3));
		    }

		    /**
		     * Creates an array of function property names from own enumerable properties
		     * of `object`.
		     *
		     * @static
		     * @since 0.1.0
		     * @memberOf _
		     * @category Object
		     * @param {Object} object The object to inspect.
		     * @returns {Array} Returns the function names.
		     * @see _.functionsIn
		     * @example
		     *
		     * function Foo() {
		     *   this.a = _.constant('a');
		     *   this.b = _.constant('b');
		     * }
		     *
		     * Foo.prototype.c = _.constant('c');
		     *
		     * _.functions(new Foo);
		     * // => ['a', 'b']
		     */
		    function functions(object) {
		      return object == null ? [] : baseFunctions(object, keys(object));
		    }

		    /**
		     * Creates an array of function property names from own and inherited
		     * enumerable properties of `object`.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Object
		     * @param {Object} object The object to inspect.
		     * @returns {Array} Returns the function names.
		     * @see _.functions
		     * @example
		     *
		     * function Foo() {
		     *   this.a = _.constant('a');
		     *   this.b = _.constant('b');
		     * }
		     *
		     * Foo.prototype.c = _.constant('c');
		     *
		     * _.functionsIn(new Foo);
		     * // => ['a', 'b', 'c']
		     */
		    function functionsIn(object) {
		      return object == null ? [] : baseFunctions(object, keysIn(object));
		    }

		    /**
		     * Gets the value at `path` of `object`. If the resolved value is
		     * `undefined`, the `defaultValue` is returned in its place.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.7.0
		     * @category Object
		     * @param {Object} object The object to query.
		     * @param {Array|string} path The path of the property to get.
		     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
		     * @returns {*} Returns the resolved value.
		     * @example
		     *
		     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
		     *
		     * _.get(object, 'a[0].b.c');
		     * // => 3
		     *
		     * _.get(object, ['a', '0', 'b', 'c']);
		     * // => 3
		     *
		     * _.get(object, 'a.b.c', 'default');
		     * // => 'default'
		     */
		    function get(object, path, defaultValue) {
		      var result = object == null ? undefined$1 : baseGet(object, path);
		      return result === undefined$1 ? defaultValue : result;
		    }

		    /**
		     * Checks if `path` is a direct property of `object`.
		     *
		     * @static
		     * @since 0.1.0
		     * @memberOf _
		     * @category Object
		     * @param {Object} object The object to query.
		     * @param {Array|string} path The path to check.
		     * @returns {boolean} Returns `true` if `path` exists, else `false`.
		     * @example
		     *
		     * var object = { 'a': { 'b': 2 } };
		     * var other = _.create({ 'a': _.create({ 'b': 2 }) });
		     *
		     * _.has(object, 'a');
		     * // => true
		     *
		     * _.has(object, 'a.b');
		     * // => true
		     *
		     * _.has(object, ['a', 'b']);
		     * // => true
		     *
		     * _.has(other, 'a');
		     * // => false
		     */
		    function has(object, path) {
		      return object != null && hasPath(object, path, baseHas);
		    }

		    /**
		     * Checks if `path` is a direct or inherited property of `object`.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Object
		     * @param {Object} object The object to query.
		     * @param {Array|string} path The path to check.
		     * @returns {boolean} Returns `true` if `path` exists, else `false`.
		     * @example
		     *
		     * var object = _.create({ 'a': _.create({ 'b': 2 }) });
		     *
		     * _.hasIn(object, 'a');
		     * // => true
		     *
		     * _.hasIn(object, 'a.b');
		     * // => true
		     *
		     * _.hasIn(object, ['a', 'b']);
		     * // => true
		     *
		     * _.hasIn(object, 'b');
		     * // => false
		     */
		    function hasIn(object, path) {
		      return object != null && hasPath(object, path, baseHasIn);
		    }

		    /**
		     * Creates an object composed of the inverted keys and values of `object`.
		     * If `object` contains duplicate values, subsequent values overwrite
		     * property assignments of previous values.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.7.0
		     * @category Object
		     * @param {Object} object The object to invert.
		     * @returns {Object} Returns the new inverted object.
		     * @example
		     *
		     * var object = { 'a': 1, 'b': 2, 'c': 1 };
		     *
		     * _.invert(object);
		     * // => { '1': 'c', '2': 'b' }
		     */
		    var invert = createInverter(function(result, value, key) {
		      if (value != null &&
		          typeof value.toString != 'function') {
		        value = nativeObjectToString.call(value);
		      }

		      result[value] = key;
		    }, constant(identity));

		    /**
		     * This method is like `_.invert` except that the inverted object is generated
		     * from the results of running each element of `object` thru `iteratee`. The
		     * corresponding inverted value of each inverted key is an array of keys
		     * responsible for generating the inverted value. The iteratee is invoked
		     * with one argument: (value).
		     *
		     * @static
		     * @memberOf _
		     * @since 4.1.0
		     * @category Object
		     * @param {Object} object The object to invert.
		     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
		     * @returns {Object} Returns the new inverted object.
		     * @example
		     *
		     * var object = { 'a': 1, 'b': 2, 'c': 1 };
		     *
		     * _.invertBy(object);
		     * // => { '1': ['a', 'c'], '2': ['b'] }
		     *
		     * _.invertBy(object, function(value) {
		     *   return 'group' + value;
		     * });
		     * // => { 'group1': ['a', 'c'], 'group2': ['b'] }
		     */
		    var invertBy = createInverter(function(result, value, key) {
		      if (value != null &&
		          typeof value.toString != 'function') {
		        value = nativeObjectToString.call(value);
		      }

		      if (hasOwnProperty.call(result, value)) {
		        result[value].push(key);
		      } else {
		        result[value] = [key];
		      }
		    }, getIteratee);

		    /**
		     * Invokes the method at `path` of `object`.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Object
		     * @param {Object} object The object to query.
		     * @param {Array|string} path The path of the method to invoke.
		     * @param {...*} [args] The arguments to invoke the method with.
		     * @returns {*} Returns the result of the invoked method.
		     * @example
		     *
		     * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };
		     *
		     * _.invoke(object, 'a[0].b.c.slice', 1, 3);
		     * // => [2, 3]
		     */
		    var invoke = baseRest(baseInvoke);

		    /**
		     * Creates an array of the own enumerable property names of `object`.
		     *
		     * **Note:** Non-object values are coerced to objects. See the
		     * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
		     * for more details.
		     *
		     * @static
		     * @since 0.1.0
		     * @memberOf _
		     * @category Object
		     * @param {Object} object The object to query.
		     * @returns {Array} Returns the array of property names.
		     * @example
		     *
		     * function Foo() {
		     *   this.a = 1;
		     *   this.b = 2;
		     * }
		     *
		     * Foo.prototype.c = 3;
		     *
		     * _.keys(new Foo);
		     * // => ['a', 'b'] (iteration order is not guaranteed)
		     *
		     * _.keys('hi');
		     * // => ['0', '1']
		     */
		    function keys(object) {
		      return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
		    }

		    /**
		     * Creates an array of the own and inherited enumerable property names of `object`.
		     *
		     * **Note:** Non-object values are coerced to objects.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category Object
		     * @param {Object} object The object to query.
		     * @returns {Array} Returns the array of property names.
		     * @example
		     *
		     * function Foo() {
		     *   this.a = 1;
		     *   this.b = 2;
		     * }
		     *
		     * Foo.prototype.c = 3;
		     *
		     * _.keysIn(new Foo);
		     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
		     */
		    function keysIn(object) {
		      return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
		    }

		    /**
		     * The opposite of `_.mapValues`; this method creates an object with the
		     * same values as `object` and keys generated by running each own enumerable
		     * string keyed property of `object` thru `iteratee`. The iteratee is invoked
		     * with three arguments: (value, key, object).
		     *
		     * @static
		     * @memberOf _
		     * @since 3.8.0
		     * @category Object
		     * @param {Object} object The object to iterate over.
		     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
		     * @returns {Object} Returns the new mapped object.
		     * @see _.mapValues
		     * @example
		     *
		     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
		     *   return key + value;
		     * });
		     * // => { 'a1': 1, 'b2': 2 }
		     */
		    function mapKeys(object, iteratee) {
		      var result = {};
		      iteratee = getIteratee(iteratee, 3);

		      baseForOwn(object, function(value, key, object) {
		        baseAssignValue(result, iteratee(value, key, object), value);
		      });
		      return result;
		    }

		    /**
		     * Creates an object with the same keys as `object` and values generated
		     * by running each own enumerable string keyed property of `object` thru
		     * `iteratee`. The iteratee is invoked with three arguments:
		     * (value, key, object).
		     *
		     * @static
		     * @memberOf _
		     * @since 2.4.0
		     * @category Object
		     * @param {Object} object The object to iterate over.
		     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
		     * @returns {Object} Returns the new mapped object.
		     * @see _.mapKeys
		     * @example
		     *
		     * var users = {
		     *   'fred':    { 'user': 'fred',    'age': 40 },
		     *   'pebbles': { 'user': 'pebbles', 'age': 1 }
		     * };
		     *
		     * _.mapValues(users, function(o) { return o.age; });
		     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
		     *
		     * // The `_.property` iteratee shorthand.
		     * _.mapValues(users, 'age');
		     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
		     */
		    function mapValues(object, iteratee) {
		      var result = {};
		      iteratee = getIteratee(iteratee, 3);

		      baseForOwn(object, function(value, key, object) {
		        baseAssignValue(result, key, iteratee(value, key, object));
		      });
		      return result;
		    }

		    /**
		     * This method is like `_.assign` except that it recursively merges own and
		     * inherited enumerable string keyed properties of source objects into the
		     * destination object. Source properties that resolve to `undefined` are
		     * skipped if a destination value exists. Array and plain object properties
		     * are merged recursively. Other objects and value types are overridden by
		     * assignment. Source objects are applied from left to right. Subsequent
		     * sources overwrite property assignments of previous sources.
		     *
		     * **Note:** This method mutates `object`.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.5.0
		     * @category Object
		     * @param {Object} object The destination object.
		     * @param {...Object} [sources] The source objects.
		     * @returns {Object} Returns `object`.
		     * @example
		     *
		     * var object = {
		     *   'a': [{ 'b': 2 }, { 'd': 4 }]
		     * };
		     *
		     * var other = {
		     *   'a': [{ 'c': 3 }, { 'e': 5 }]
		     * };
		     *
		     * _.merge(object, other);
		     * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
		     */
		    var merge = createAssigner(function(object, source, srcIndex) {
		      baseMerge(object, source, srcIndex);
		    });

		    /**
		     * This method is like `_.merge` except that it accepts `customizer` which
		     * is invoked to produce the merged values of the destination and source
		     * properties. If `customizer` returns `undefined`, merging is handled by the
		     * method instead. The `customizer` is invoked with six arguments:
		     * (objValue, srcValue, key, object, source, stack).
		     *
		     * **Note:** This method mutates `object`.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Object
		     * @param {Object} object The destination object.
		     * @param {...Object} sources The source objects.
		     * @param {Function} customizer The function to customize assigned values.
		     * @returns {Object} Returns `object`.
		     * @example
		     *
		     * function customizer(objValue, srcValue) {
		     *   if (_.isArray(objValue)) {
		     *     return objValue.concat(srcValue);
		     *   }
		     * }
		     *
		     * var object = { 'a': [1], 'b': [2] };
		     * var other = { 'a': [3], 'b': [4] };
		     *
		     * _.mergeWith(object, other, customizer);
		     * // => { 'a': [1, 3], 'b': [2, 4] }
		     */
		    var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
		      baseMerge(object, source, srcIndex, customizer);
		    });

		    /**
		     * The opposite of `_.pick`; this method creates an object composed of the
		     * own and inherited enumerable property paths of `object` that are not omitted.
		     *
		     * **Note:** This method is considerably slower than `_.pick`.
		     *
		     * @static
		     * @since 0.1.0
		     * @memberOf _
		     * @category Object
		     * @param {Object} object The source object.
		     * @param {...(string|string[])} [paths] The property paths to omit.
		     * @returns {Object} Returns the new object.
		     * @example
		     *
		     * var object = { 'a': 1, 'b': '2', 'c': 3 };
		     *
		     * _.omit(object, ['a', 'c']);
		     * // => { 'b': '2' }
		     */
		    var omit = flatRest(function(object, paths) {
		      var result = {};
		      if (object == null) {
		        return result;
		      }
		      var isDeep = false;
		      paths = arrayMap(paths, function(path) {
		        path = castPath(path, object);
		        isDeep || (isDeep = path.length > 1);
		        return path;
		      });
		      copyObject(object, getAllKeysIn(object), result);
		      if (isDeep) {
		        result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
		      }
		      var length = paths.length;
		      while (length--) {
		        baseUnset(result, paths[length]);
		      }
		      return result;
		    });

		    /**
		     * The opposite of `_.pickBy`; this method creates an object composed of
		     * the own and inherited enumerable string keyed properties of `object` that
		     * `predicate` doesn't return truthy for. The predicate is invoked with two
		     * arguments: (value, key).
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Object
		     * @param {Object} object The source object.
		     * @param {Function} [predicate=_.identity] The function invoked per property.
		     * @returns {Object} Returns the new object.
		     * @example
		     *
		     * var object = { 'a': 1, 'b': '2', 'c': 3 };
		     *
		     * _.omitBy(object, _.isNumber);
		     * // => { 'b': '2' }
		     */
		    function omitBy(object, predicate) {
		      return pickBy(object, negate(getIteratee(predicate)));
		    }

		    /**
		     * Creates an object composed of the picked `object` properties.
		     *
		     * @static
		     * @since 0.1.0
		     * @memberOf _
		     * @category Object
		     * @param {Object} object The source object.
		     * @param {...(string|string[])} [paths] The property paths to pick.
		     * @returns {Object} Returns the new object.
		     * @example
		     *
		     * var object = { 'a': 1, 'b': '2', 'c': 3 };
		     *
		     * _.pick(object, ['a', 'c']);
		     * // => { 'a': 1, 'c': 3 }
		     */
		    var pick = flatRest(function(object, paths) {
		      return object == null ? {} : basePick(object, paths);
		    });

		    /**
		     * Creates an object composed of the `object` properties `predicate` returns
		     * truthy for. The predicate is invoked with two arguments: (value, key).
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Object
		     * @param {Object} object The source object.
		     * @param {Function} [predicate=_.identity] The function invoked per property.
		     * @returns {Object} Returns the new object.
		     * @example
		     *
		     * var object = { 'a': 1, 'b': '2', 'c': 3 };
		     *
		     * _.pickBy(object, _.isNumber);
		     * // => { 'a': 1, 'c': 3 }
		     */
		    function pickBy(object, predicate) {
		      if (object == null) {
		        return {};
		      }
		      var props = arrayMap(getAllKeysIn(object), function(prop) {
		        return [prop];
		      });
		      predicate = getIteratee(predicate);
		      return basePickBy(object, props, function(value, path) {
		        return predicate(value, path[0]);
		      });
		    }

		    /**
		     * This method is like `_.get` except that if the resolved value is a
		     * function it's invoked with the `this` binding of its parent object and
		     * its result is returned.
		     *
		     * @static
		     * @since 0.1.0
		     * @memberOf _
		     * @category Object
		     * @param {Object} object The object to query.
		     * @param {Array|string} path The path of the property to resolve.
		     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
		     * @returns {*} Returns the resolved value.
		     * @example
		     *
		     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
		     *
		     * _.result(object, 'a[0].b.c1');
		     * // => 3
		     *
		     * _.result(object, 'a[0].b.c2');
		     * // => 4
		     *
		     * _.result(object, 'a[0].b.c3', 'default');
		     * // => 'default'
		     *
		     * _.result(object, 'a[0].b.c3', _.constant('default'));
		     * // => 'default'
		     */
		    function result(object, path, defaultValue) {
		      path = castPath(path, object);

		      var index = -1,
		          length = path.length;

		      // Ensure the loop is entered when path is empty.
		      if (!length) {
		        length = 1;
		        object = undefined$1;
		      }
		      while (++index < length) {
		        var value = object == null ? undefined$1 : object[toKey(path[index])];
		        if (value === undefined$1) {
		          index = length;
		          value = defaultValue;
		        }
		        object = isFunction(value) ? value.call(object) : value;
		      }
		      return object;
		    }

		    /**
		     * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
		     * it's created. Arrays are created for missing index properties while objects
		     * are created for all other missing properties. Use `_.setWith` to customize
		     * `path` creation.
		     *
		     * **Note:** This method mutates `object`.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.7.0
		     * @category Object
		     * @param {Object} object The object to modify.
		     * @param {Array|string} path The path of the property to set.
		     * @param {*} value The value to set.
		     * @returns {Object} Returns `object`.
		     * @example
		     *
		     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
		     *
		     * _.set(object, 'a[0].b.c', 4);
		     * console.log(object.a[0].b.c);
		     * // => 4
		     *
		     * _.set(object, ['x', '0', 'y', 'z'], 5);
		     * console.log(object.x[0].y.z);
		     * // => 5
		     */
		    function set(object, path, value) {
		      return object == null ? object : baseSet(object, path, value);
		    }

		    /**
		     * This method is like `_.set` except that it accepts `customizer` which is
		     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
		     * path creation is handled by the method instead. The `customizer` is invoked
		     * with three arguments: (nsValue, key, nsObject).
		     *
		     * **Note:** This method mutates `object`.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Object
		     * @param {Object} object The object to modify.
		     * @param {Array|string} path The path of the property to set.
		     * @param {*} value The value to set.
		     * @param {Function} [customizer] The function to customize assigned values.
		     * @returns {Object} Returns `object`.
		     * @example
		     *
		     * var object = {};
		     *
		     * _.setWith(object, '[0][1]', 'a', Object);
		     * // => { '0': { '1': 'a' } }
		     */
		    function setWith(object, path, value, customizer) {
		      customizer = typeof customizer == 'function' ? customizer : undefined$1;
		      return object == null ? object : baseSet(object, path, value, customizer);
		    }

		    /**
		     * Creates an array of own enumerable string keyed-value pairs for `object`
		     * which can be consumed by `_.fromPairs`. If `object` is a map or set, its
		     * entries are returned.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @alias entries
		     * @category Object
		     * @param {Object} object The object to query.
		     * @returns {Array} Returns the key-value pairs.
		     * @example
		     *
		     * function Foo() {
		     *   this.a = 1;
		     *   this.b = 2;
		     * }
		     *
		     * Foo.prototype.c = 3;
		     *
		     * _.toPairs(new Foo);
		     * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)
		     */
		    var toPairs = createToPairs(keys);

		    /**
		     * Creates an array of own and inherited enumerable string keyed-value pairs
		     * for `object` which can be consumed by `_.fromPairs`. If `object` is a map
		     * or set, its entries are returned.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @alias entriesIn
		     * @category Object
		     * @param {Object} object The object to query.
		     * @returns {Array} Returns the key-value pairs.
		     * @example
		     *
		     * function Foo() {
		     *   this.a = 1;
		     *   this.b = 2;
		     * }
		     *
		     * Foo.prototype.c = 3;
		     *
		     * _.toPairsIn(new Foo);
		     * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)
		     */
		    var toPairsIn = createToPairs(keysIn);

		    /**
		     * An alternative to `_.reduce`; this method transforms `object` to a new
		     * `accumulator` object which is the result of running each of its own
		     * enumerable string keyed properties thru `iteratee`, with each invocation
		     * potentially mutating the `accumulator` object. If `accumulator` is not
		     * provided, a new object with the same `[[Prototype]]` will be used. The
		     * iteratee is invoked with four arguments: (accumulator, value, key, object).
		     * Iteratee functions may exit iteration early by explicitly returning `false`.
		     *
		     * @static
		     * @memberOf _
		     * @since 1.3.0
		     * @category Object
		     * @param {Object} object The object to iterate over.
		     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
		     * @param {*} [accumulator] The custom accumulator value.
		     * @returns {*} Returns the accumulated value.
		     * @example
		     *
		     * _.transform([2, 3, 4], function(result, n) {
		     *   result.push(n *= n);
		     *   return n % 2 == 0;
		     * }, []);
		     * // => [4, 9]
		     *
		     * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
		     *   (result[value] || (result[value] = [])).push(key);
		     * }, {});
		     * // => { '1': ['a', 'c'], '2': ['b'] }
		     */
		    function transform(object, iteratee, accumulator) {
		      var isArr = isArray(object),
		          isArrLike = isArr || isBuffer(object) || isTypedArray(object);

		      iteratee = getIteratee(iteratee, 4);
		      if (accumulator == null) {
		        var Ctor = object && object.constructor;
		        if (isArrLike) {
		          accumulator = isArr ? new Ctor : [];
		        }
		        else if (isObject(object)) {
		          accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
		        }
		        else {
		          accumulator = {};
		        }
		      }
		      (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object) {
		        return iteratee(accumulator, value, index, object);
		      });
		      return accumulator;
		    }

		    /**
		     * Removes the property at `path` of `object`.
		     *
		     * **Note:** This method mutates `object`.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Object
		     * @param {Object} object The object to modify.
		     * @param {Array|string} path The path of the property to unset.
		     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
		     * @example
		     *
		     * var object = { 'a': [{ 'b': { 'c': 7 } }] };
		     * _.unset(object, 'a[0].b.c');
		     * // => true
		     *
		     * console.log(object);
		     * // => { 'a': [{ 'b': {} }] };
		     *
		     * _.unset(object, ['a', '0', 'b', 'c']);
		     * // => true
		     *
		     * console.log(object);
		     * // => { 'a': [{ 'b': {} }] };
		     */
		    function unset(object, path) {
		      return object == null ? true : baseUnset(object, path);
		    }

		    /**
		     * This method is like `_.set` except that accepts `updater` to produce the
		     * value to set. Use `_.updateWith` to customize `path` creation. The `updater`
		     * is invoked with one argument: (value).
		     *
		     * **Note:** This method mutates `object`.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.6.0
		     * @category Object
		     * @param {Object} object The object to modify.
		     * @param {Array|string} path The path of the property to set.
		     * @param {Function} updater The function to produce the updated value.
		     * @returns {Object} Returns `object`.
		     * @example
		     *
		     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
		     *
		     * _.update(object, 'a[0].b.c', function(n) { return n * n; });
		     * console.log(object.a[0].b.c);
		     * // => 9
		     *
		     * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });
		     * console.log(object.x[0].y.z);
		     * // => 0
		     */
		    function update(object, path, updater) {
		      return object == null ? object : baseUpdate(object, path, castFunction(updater));
		    }

		    /**
		     * This method is like `_.update` except that it accepts `customizer` which is
		     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
		     * path creation is handled by the method instead. The `customizer` is invoked
		     * with three arguments: (nsValue, key, nsObject).
		     *
		     * **Note:** This method mutates `object`.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.6.0
		     * @category Object
		     * @param {Object} object The object to modify.
		     * @param {Array|string} path The path of the property to set.
		     * @param {Function} updater The function to produce the updated value.
		     * @param {Function} [customizer] The function to customize assigned values.
		     * @returns {Object} Returns `object`.
		     * @example
		     *
		     * var object = {};
		     *
		     * _.updateWith(object, '[0][1]', _.constant('a'), Object);
		     * // => { '0': { '1': 'a' } }
		     */
		    function updateWith(object, path, updater, customizer) {
		      customizer = typeof customizer == 'function' ? customizer : undefined$1;
		      return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
		    }

		    /**
		     * Creates an array of the own enumerable string keyed property values of `object`.
		     *
		     * **Note:** Non-object values are coerced to objects.
		     *
		     * @static
		     * @since 0.1.0
		     * @memberOf _
		     * @category Object
		     * @param {Object} object The object to query.
		     * @returns {Array} Returns the array of property values.
		     * @example
		     *
		     * function Foo() {
		     *   this.a = 1;
		     *   this.b = 2;
		     * }
		     *
		     * Foo.prototype.c = 3;
		     *
		     * _.values(new Foo);
		     * // => [1, 2] (iteration order is not guaranteed)
		     *
		     * _.values('hi');
		     * // => ['h', 'i']
		     */
		    function values(object) {
		      return object == null ? [] : baseValues(object, keys(object));
		    }

		    /**
		     * Creates an array of the own and inherited enumerable string keyed property
		     * values of `object`.
		     *
		     * **Note:** Non-object values are coerced to objects.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category Object
		     * @param {Object} object The object to query.
		     * @returns {Array} Returns the array of property values.
		     * @example
		     *
		     * function Foo() {
		     *   this.a = 1;
		     *   this.b = 2;
		     * }
		     *
		     * Foo.prototype.c = 3;
		     *
		     * _.valuesIn(new Foo);
		     * // => [1, 2, 3] (iteration order is not guaranteed)
		     */
		    function valuesIn(object) {
		      return object == null ? [] : baseValues(object, keysIn(object));
		    }

		    /*------------------------------------------------------------------------*/

		    /**
		     * Clamps `number` within the inclusive `lower` and `upper` bounds.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Number
		     * @param {number} number The number to clamp.
		     * @param {number} [lower] The lower bound.
		     * @param {number} upper The upper bound.
		     * @returns {number} Returns the clamped number.
		     * @example
		     *
		     * _.clamp(-10, -5, 5);
		     * // => -5
		     *
		     * _.clamp(10, -5, 5);
		     * // => 5
		     */
		    function clamp(number, lower, upper) {
		      if (upper === undefined$1) {
		        upper = lower;
		        lower = undefined$1;
		      }
		      if (upper !== undefined$1) {
		        upper = toNumber(upper);
		        upper = upper === upper ? upper : 0;
		      }
		      if (lower !== undefined$1) {
		        lower = toNumber(lower);
		        lower = lower === lower ? lower : 0;
		      }
		      return baseClamp(toNumber(number), lower, upper);
		    }

		    /**
		     * Checks if `n` is between `start` and up to, but not including, `end`. If
		     * `end` is not specified, it's set to `start` with `start` then set to `0`.
		     * If `start` is greater than `end` the params are swapped to support
		     * negative ranges.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.3.0
		     * @category Number
		     * @param {number} number The number to check.
		     * @param {number} [start=0] The start of the range.
		     * @param {number} end The end of the range.
		     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
		     * @see _.range, _.rangeRight
		     * @example
		     *
		     * _.inRange(3, 2, 4);
		     * // => true
		     *
		     * _.inRange(4, 8);
		     * // => true
		     *
		     * _.inRange(4, 2);
		     * // => false
		     *
		     * _.inRange(2, 2);
		     * // => false
		     *
		     * _.inRange(1.2, 2);
		     * // => true
		     *
		     * _.inRange(5.2, 4);
		     * // => false
		     *
		     * _.inRange(-3, -2, -6);
		     * // => true
		     */
		    function inRange(number, start, end) {
		      start = toFinite(start);
		      if (end === undefined$1) {
		        end = start;
		        start = 0;
		      } else {
		        end = toFinite(end);
		      }
		      number = toNumber(number);
		      return baseInRange(number, start, end);
		    }

		    /**
		     * Produces a random number between the inclusive `lower` and `upper` bounds.
		     * If only one argument is provided a number between `0` and the given number
		     * is returned. If `floating` is `true`, or either `lower` or `upper` are
		     * floats, a floating-point number is returned instead of an integer.
		     *
		     * **Note:** JavaScript follows the IEEE-754 standard for resolving
		     * floating-point values which can produce unexpected results.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.7.0
		     * @category Number
		     * @param {number} [lower=0] The lower bound.
		     * @param {number} [upper=1] The upper bound.
		     * @param {boolean} [floating] Specify returning a floating-point number.
		     * @returns {number} Returns the random number.
		     * @example
		     *
		     * _.random(0, 5);
		     * // => an integer between 0 and 5
		     *
		     * _.random(5);
		     * // => also an integer between 0 and 5
		     *
		     * _.random(5, true);
		     * // => a floating-point number between 0 and 5
		     *
		     * _.random(1.2, 5.2);
		     * // => a floating-point number between 1.2 and 5.2
		     */
		    function random(lower, upper, floating) {
		      if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {
		        upper = floating = undefined$1;
		      }
		      if (floating === undefined$1) {
		        if (typeof upper == 'boolean') {
		          floating = upper;
		          upper = undefined$1;
		        }
		        else if (typeof lower == 'boolean') {
		          floating = lower;
		          lower = undefined$1;
		        }
		      }
		      if (lower === undefined$1 && upper === undefined$1) {
		        lower = 0;
		        upper = 1;
		      }
		      else {
		        lower = toFinite(lower);
		        if (upper === undefined$1) {
		          upper = lower;
		          lower = 0;
		        } else {
		          upper = toFinite(upper);
		        }
		      }
		      if (lower > upper) {
		        var temp = lower;
		        lower = upper;
		        upper = temp;
		      }
		      if (floating || lower % 1 || upper % 1) {
		        var rand = nativeRandom();
		        return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);
		      }
		      return baseRandom(lower, upper);
		    }

		    /*------------------------------------------------------------------------*/

		    /**
		     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category String
		     * @param {string} [string=''] The string to convert.
		     * @returns {string} Returns the camel cased string.
		     * @example
		     *
		     * _.camelCase('Foo Bar');
		     * // => 'fooBar'
		     *
		     * _.camelCase('--foo-bar--');
		     * // => 'fooBar'
		     *
		     * _.camelCase('__FOO_BAR__');
		     * // => 'fooBar'
		     */
		    var camelCase = createCompounder(function(result, word, index) {
		      word = word.toLowerCase();
		      return result + (index ? capitalize(word) : word);
		    });

		    /**
		     * Converts the first character of `string` to upper case and the remaining
		     * to lower case.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category String
		     * @param {string} [string=''] The string to capitalize.
		     * @returns {string} Returns the capitalized string.
		     * @example
		     *
		     * _.capitalize('FRED');
		     * // => 'Fred'
		     */
		    function capitalize(string) {
		      return upperFirst(toString(string).toLowerCase());
		    }

		    /**
		     * Deburrs `string` by converting
		     * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
		     * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
		     * letters to basic Latin letters and removing
		     * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category String
		     * @param {string} [string=''] The string to deburr.
		     * @returns {string} Returns the deburred string.
		     * @example
		     *
		     * _.deburr('déjà vu');
		     * // => 'deja vu'
		     */
		    function deburr(string) {
		      string = toString(string);
		      return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');
		    }

		    /**
		     * Checks if `string` ends with the given target string.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category String
		     * @param {string} [string=''] The string to inspect.
		     * @param {string} [target] The string to search for.
		     * @param {number} [position=string.length] The position to search up to.
		     * @returns {boolean} Returns `true` if `string` ends with `target`,
		     *  else `false`.
		     * @example
		     *
		     * _.endsWith('abc', 'c');
		     * // => true
		     *
		     * _.endsWith('abc', 'b');
		     * // => false
		     *
		     * _.endsWith('abc', 'b', 2);
		     * // => true
		     */
		    function endsWith(string, target, position) {
		      string = toString(string);
		      target = baseToString(target);

		      var length = string.length;
		      position = position === undefined$1
		        ? length
		        : baseClamp(toInteger(position), 0, length);

		      var end = position;
		      position -= target.length;
		      return position >= 0 && string.slice(position, end) == target;
		    }

		    /**
		     * Converts the characters "&", "<", ">", '"', and "'" in `string` to their
		     * corresponding HTML entities.
		     *
		     * **Note:** No other characters are escaped. To escape additional
		     * characters use a third-party library like [_he_](https://mths.be/he).
		     *
		     * Though the ">" character is escaped for symmetry, characters like
		     * ">" and "/" don't need escaping in HTML and have no special meaning
		     * unless they're part of a tag or unquoted attribute value. See
		     * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
		     * (under "semi-related fun fact") for more details.
		     *
		     * When working with HTML you should always
		     * [quote attribute values](http://wonko.com/post/html-escaping) to reduce
		     * XSS vectors.
		     *
		     * @static
		     * @since 0.1.0
		     * @memberOf _
		     * @category String
		     * @param {string} [string=''] The string to escape.
		     * @returns {string} Returns the escaped string.
		     * @example
		     *
		     * _.escape('fred, barney, & pebbles');
		     * // => 'fred, barney, &amp; pebbles'
		     */
		    function escape(string) {
		      string = toString(string);
		      return (string && reHasUnescapedHtml.test(string))
		        ? string.replace(reUnescapedHtml, escapeHtmlChar)
		        : string;
		    }

		    /**
		     * Escapes the `RegExp` special characters "^", "$", "\", ".", "*", "+",
		     * "?", "(", ")", "[", "]", "{", "}", and "|" in `string`.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category String
		     * @param {string} [string=''] The string to escape.
		     * @returns {string} Returns the escaped string.
		     * @example
		     *
		     * _.escapeRegExp('[lodash](https://lodash.com/)');
		     * // => '\[lodash\]\(https://lodash\.com/\)'
		     */
		    function escapeRegExp(string) {
		      string = toString(string);
		      return (string && reHasRegExpChar.test(string))
		        ? string.replace(reRegExpChar, '\\$&')
		        : string;
		    }

		    /**
		     * Converts `string` to
		     * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category String
		     * @param {string} [string=''] The string to convert.
		     * @returns {string} Returns the kebab cased string.
		     * @example
		     *
		     * _.kebabCase('Foo Bar');
		     * // => 'foo-bar'
		     *
		     * _.kebabCase('fooBar');
		     * // => 'foo-bar'
		     *
		     * _.kebabCase('__FOO_BAR__');
		     * // => 'foo-bar'
		     */
		    var kebabCase = createCompounder(function(result, word, index) {
		      return result + (index ? '-' : '') + word.toLowerCase();
		    });

		    /**
		     * Converts `string`, as space separated words, to lower case.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category String
		     * @param {string} [string=''] The string to convert.
		     * @returns {string} Returns the lower cased string.
		     * @example
		     *
		     * _.lowerCase('--Foo-Bar--');
		     * // => 'foo bar'
		     *
		     * _.lowerCase('fooBar');
		     * // => 'foo bar'
		     *
		     * _.lowerCase('__FOO_BAR__');
		     * // => 'foo bar'
		     */
		    var lowerCase = createCompounder(function(result, word, index) {
		      return result + (index ? ' ' : '') + word.toLowerCase();
		    });

		    /**
		     * Converts the first character of `string` to lower case.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category String
		     * @param {string} [string=''] The string to convert.
		     * @returns {string} Returns the converted string.
		     * @example
		     *
		     * _.lowerFirst('Fred');
		     * // => 'fred'
		     *
		     * _.lowerFirst('FRED');
		     * // => 'fRED'
		     */
		    var lowerFirst = createCaseFirst('toLowerCase');

		    /**
		     * Pads `string` on the left and right sides if it's shorter than `length`.
		     * Padding characters are truncated if they can't be evenly divided by `length`.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category String
		     * @param {string} [string=''] The string to pad.
		     * @param {number} [length=0] The padding length.
		     * @param {string} [chars=' '] The string used as padding.
		     * @returns {string} Returns the padded string.
		     * @example
		     *
		     * _.pad('abc', 8);
		     * // => '  abc   '
		     *
		     * _.pad('abc', 8, '_-');
		     * // => '_-abc_-_'
		     *
		     * _.pad('abc', 3);
		     * // => 'abc'
		     */
		    function pad(string, length, chars) {
		      string = toString(string);
		      length = toInteger(length);

		      var strLength = length ? stringSize(string) : 0;
		      if (!length || strLength >= length) {
		        return string;
		      }
		      var mid = (length - strLength) / 2;
		      return (
		        createPadding(nativeFloor(mid), chars) +
		        string +
		        createPadding(nativeCeil(mid), chars)
		      );
		    }

		    /**
		     * Pads `string` on the right side if it's shorter than `length`. Padding
		     * characters are truncated if they exceed `length`.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category String
		     * @param {string} [string=''] The string to pad.
		     * @param {number} [length=0] The padding length.
		     * @param {string} [chars=' '] The string used as padding.
		     * @returns {string} Returns the padded string.
		     * @example
		     *
		     * _.padEnd('abc', 6);
		     * // => 'abc   '
		     *
		     * _.padEnd('abc', 6, '_-');
		     * // => 'abc_-_'
		     *
		     * _.padEnd('abc', 3);
		     * // => 'abc'
		     */
		    function padEnd(string, length, chars) {
		      string = toString(string);
		      length = toInteger(length);

		      var strLength = length ? stringSize(string) : 0;
		      return (length && strLength < length)
		        ? (string + createPadding(length - strLength, chars))
		        : string;
		    }

		    /**
		     * Pads `string` on the left side if it's shorter than `length`. Padding
		     * characters are truncated if they exceed `length`.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category String
		     * @param {string} [string=''] The string to pad.
		     * @param {number} [length=0] The padding length.
		     * @param {string} [chars=' '] The string used as padding.
		     * @returns {string} Returns the padded string.
		     * @example
		     *
		     * _.padStart('abc', 6);
		     * // => '   abc'
		     *
		     * _.padStart('abc', 6, '_-');
		     * // => '_-_abc'
		     *
		     * _.padStart('abc', 3);
		     * // => 'abc'
		     */
		    function padStart(string, length, chars) {
		      string = toString(string);
		      length = toInteger(length);

		      var strLength = length ? stringSize(string) : 0;
		      return (length && strLength < length)
		        ? (createPadding(length - strLength, chars) + string)
		        : string;
		    }

		    /**
		     * Converts `string` to an integer of the specified radix. If `radix` is
		     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a
		     * hexadecimal, in which case a `radix` of `16` is used.
		     *
		     * **Note:** This method aligns with the
		     * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.
		     *
		     * @static
		     * @memberOf _
		     * @since 1.1.0
		     * @category String
		     * @param {string} string The string to convert.
		     * @param {number} [radix=10] The radix to interpret `value` by.
		     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
		     * @returns {number} Returns the converted integer.
		     * @example
		     *
		     * _.parseInt('08');
		     * // => 8
		     *
		     * _.map(['6', '08', '10'], _.parseInt);
		     * // => [6, 8, 10]
		     */
		    function parseInt(string, radix, guard) {
		      if (guard || radix == null) {
		        radix = 0;
		      } else if (radix) {
		        radix = +radix;
		      }
		      return nativeParseInt(toString(string).replace(reTrimStart, ''), radix || 0);
		    }

		    /**
		     * Repeats the given string `n` times.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category String
		     * @param {string} [string=''] The string to repeat.
		     * @param {number} [n=1] The number of times to repeat the string.
		     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
		     * @returns {string} Returns the repeated string.
		     * @example
		     *
		     * _.repeat('*', 3);
		     * // => '***'
		     *
		     * _.repeat('abc', 2);
		     * // => 'abcabc'
		     *
		     * _.repeat('abc', 0);
		     * // => ''
		     */
		    function repeat(string, n, guard) {
		      if ((guard ? isIterateeCall(string, n, guard) : n === undefined$1)) {
		        n = 1;
		      } else {
		        n = toInteger(n);
		      }
		      return baseRepeat(toString(string), n);
		    }

		    /**
		     * Replaces matches for `pattern` in `string` with `replacement`.
		     *
		     * **Note:** This method is based on
		     * [`String#replace`](https://mdn.io/String/replace).
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category String
		     * @param {string} [string=''] The string to modify.
		     * @param {RegExp|string} pattern The pattern to replace.
		     * @param {Function|string} replacement The match replacement.
		     * @returns {string} Returns the modified string.
		     * @example
		     *
		     * _.replace('Hi Fred', 'Fred', 'Barney');
		     * // => 'Hi Barney'
		     */
		    function replace() {
		      var args = arguments,
		          string = toString(args[0]);

		      return args.length < 3 ? string : string.replace(args[1], args[2]);
		    }

		    /**
		     * Converts `string` to
		     * [snake case](https://en.wikipedia.org/wiki/Snake_case).
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category String
		     * @param {string} [string=''] The string to convert.
		     * @returns {string} Returns the snake cased string.
		     * @example
		     *
		     * _.snakeCase('Foo Bar');
		     * // => 'foo_bar'
		     *
		     * _.snakeCase('fooBar');
		     * // => 'foo_bar'
		     *
		     * _.snakeCase('--FOO-BAR--');
		     * // => 'foo_bar'
		     */
		    var snakeCase = createCompounder(function(result, word, index) {
		      return result + (index ? '_' : '') + word.toLowerCase();
		    });

		    /**
		     * Splits `string` by `separator`.
		     *
		     * **Note:** This method is based on
		     * [`String#split`](https://mdn.io/String/split).
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category String
		     * @param {string} [string=''] The string to split.
		     * @param {RegExp|string} separator The separator pattern to split by.
		     * @param {number} [limit] The length to truncate results to.
		     * @returns {Array} Returns the string segments.
		     * @example
		     *
		     * _.split('a-b-c', '-', 2);
		     * // => ['a', 'b']
		     */
		    function split(string, separator, limit) {
		      if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {
		        separator = limit = undefined$1;
		      }
		      limit = limit === undefined$1 ? MAX_ARRAY_LENGTH : limit >>> 0;
		      if (!limit) {
		        return [];
		      }
		      string = toString(string);
		      if (string && (
		            typeof separator == 'string' ||
		            (separator != null && !isRegExp(separator))
		          )) {
		        separator = baseToString(separator);
		        if (!separator && hasUnicode(string)) {
		          return castSlice(stringToArray(string), 0, limit);
		        }
		      }
		      return string.split(separator, limit);
		    }

		    /**
		     * Converts `string` to
		     * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
		     *
		     * @static
		     * @memberOf _
		     * @since 3.1.0
		     * @category String
		     * @param {string} [string=''] The string to convert.
		     * @returns {string} Returns the start cased string.
		     * @example
		     *
		     * _.startCase('--foo-bar--');
		     * // => 'Foo Bar'
		     *
		     * _.startCase('fooBar');
		     * // => 'Foo Bar'
		     *
		     * _.startCase('__FOO_BAR__');
		     * // => 'FOO BAR'
		     */
		    var startCase = createCompounder(function(result, word, index) {
		      return result + (index ? ' ' : '') + upperFirst(word);
		    });

		    /**
		     * Checks if `string` starts with the given target string.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category String
		     * @param {string} [string=''] The string to inspect.
		     * @param {string} [target] The string to search for.
		     * @param {number} [position=0] The position to search from.
		     * @returns {boolean} Returns `true` if `string` starts with `target`,
		     *  else `false`.
		     * @example
		     *
		     * _.startsWith('abc', 'a');
		     * // => true
		     *
		     * _.startsWith('abc', 'b');
		     * // => false
		     *
		     * _.startsWith('abc', 'b', 1);
		     * // => true
		     */
		    function startsWith(string, target, position) {
		      string = toString(string);
		      position = position == null
		        ? 0
		        : baseClamp(toInteger(position), 0, string.length);

		      target = baseToString(target);
		      return string.slice(position, position + target.length) == target;
		    }

		    /**
		     * Creates a compiled template function that can interpolate data properties
		     * in "interpolate" delimiters, HTML-escape interpolated data properties in
		     * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
		     * properties may be accessed as free variables in the template. If a setting
		     * object is given, it takes precedence over `_.templateSettings` values.
		     *
		     * **Note:** In the development build `_.template` utilizes
		     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
		     * for easier debugging.
		     *
		     * For more information on precompiling templates see
		     * [lodash's custom builds documentation](https://lodash.com/custom-builds).
		     *
		     * For more information on Chrome extension sandboxes see
		     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
		     *
		     * @static
		     * @since 0.1.0
		     * @memberOf _
		     * @category String
		     * @param {string} [string=''] The template string.
		     * @param {Object} [options={}] The options object.
		     * @param {RegExp} [options.escape=_.templateSettings.escape]
		     *  The HTML "escape" delimiter.
		     * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]
		     *  The "evaluate" delimiter.
		     * @param {Object} [options.imports=_.templateSettings.imports]
		     *  An object to import into the template as free variables.
		     * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]
		     *  The "interpolate" delimiter.
		     * @param {string} [options.sourceURL='lodash.templateSources[n]']
		     *  The sourceURL of the compiled template.
		     * @param {string} [options.variable='obj']
		     *  The data object variable name.
		     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
		     * @returns {Function} Returns the compiled template function.
		     * @example
		     *
		     * // Use the "interpolate" delimiter to create a compiled template.
		     * var compiled = _.template('hello <%= user %>!');
		     * compiled({ 'user': 'fred' });
		     * // => 'hello fred!'
		     *
		     * // Use the HTML "escape" delimiter to escape data property values.
		     * var compiled = _.template('<b><%- value %></b>');
		     * compiled({ 'value': '<script>' });
		     * // => '<b>&lt;script&gt;</b>'
		     *
		     * // Use the "evaluate" delimiter to execute JavaScript and generate HTML.
		     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
		     * compiled({ 'users': ['fred', 'barney'] });
		     * // => '<li>fred</li><li>barney</li>'
		     *
		     * // Use the internal `print` function in "evaluate" delimiters.
		     * var compiled = _.template('<% print("hello " + user); %>!');
		     * compiled({ 'user': 'barney' });
		     * // => 'hello barney!'
		     *
		     * // Use the ES template literal delimiter as an "interpolate" delimiter.
		     * // Disable support by replacing the "interpolate" delimiter.
		     * var compiled = _.template('hello ${ user }!');
		     * compiled({ 'user': 'pebbles' });
		     * // => 'hello pebbles!'
		     *
		     * // Use backslashes to treat delimiters as plain text.
		     * var compiled = _.template('<%= "\\<%- value %\\>" %>');
		     * compiled({ 'value': 'ignored' });
		     * // => '<%- value %>'
		     *
		     * // Use the `imports` option to import `jQuery` as `jq`.
		     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
		     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
		     * compiled({ 'users': ['fred', 'barney'] });
		     * // => '<li>fred</li><li>barney</li>'
		     *
		     * // Use the `sourceURL` option to specify a custom sourceURL for the template.
		     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
		     * compiled(data);
		     * // => Find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector.
		     *
		     * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.
		     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
		     * compiled.source;
		     * // => function(data) {
		     * //   var __t, __p = '';
		     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
		     * //   return __p;
		     * // }
		     *
		     * // Use custom template delimiters.
		     * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
		     * var compiled = _.template('hello {{ user }}!');
		     * compiled({ 'user': 'mustache' });
		     * // => 'hello mustache!'
		     *
		     * // Use the `source` property to inline compiled templates for meaningful
		     * // line numbers in error messages and stack traces.
		     * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\
		     *   var JST = {\
		     *     "main": ' + _.template(mainText).source + '\
		     *   };\
		     * ');
		     */
		    function template(string, options, guard) {
		      // Based on John Resig's `tmpl` implementation
		      // (http://ejohn.org/blog/javascript-micro-templating/)
		      // and Laura Doktorova's doT.js (https://github.com/olado/doT).
		      var settings = lodash.templateSettings;

		      if (guard && isIterateeCall(string, options, guard)) {
		        options = undefined$1;
		      }
		      string = toString(string);
		      options = assignInWith({}, options, settings, customDefaultsAssignIn);

		      var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn),
		          importsKeys = keys(imports),
		          importsValues = baseValues(imports, importsKeys);

		      var isEscaping,
		          isEvaluating,
		          index = 0,
		          interpolate = options.interpolate || reNoMatch,
		          source = "__p += '";

		      // Compile the regexp to match each delimiter.
		      var reDelimiters = RegExp(
		        (options.escape || reNoMatch).source + '|' +
		        interpolate.source + '|' +
		        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +
		        (options.evaluate || reNoMatch).source + '|$'
		      , 'g');

		      // Use a sourceURL for easier debugging.
		      // The sourceURL gets injected into the source that's eval-ed, so be careful
		      // to normalize all kinds of whitespace, so e.g. newlines (and unicode versions of it) can't sneak in
		      // and escape the comment, thus injecting code that gets evaled.
		      var sourceURL = '//# sourceURL=' +
		        (hasOwnProperty.call(options, 'sourceURL')
		          ? (options.sourceURL + '').replace(/\s/g, ' ')
		          : ('lodash.templateSources[' + (++templateCounter) + ']')
		        ) + '\n';

		      string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
		        interpolateValue || (interpolateValue = esTemplateValue);

		        // Escape characters that can't be included in string literals.
		        source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);

		        // Replace delimiters with snippets.
		        if (escapeValue) {
		          isEscaping = true;
		          source += "' +\n__e(" + escapeValue + ") +\n'";
		        }
		        if (evaluateValue) {
		          isEvaluating = true;
		          source += "';\n" + evaluateValue + ";\n__p += '";
		        }
		        if (interpolateValue) {
		          source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
		        }
		        index = offset + match.length;

		        // The JS engine embedded in Adobe products needs `match` returned in
		        // order to produce the correct `offset` value.
		        return match;
		      });

		      source += "';\n";

		      // If `variable` is not specified wrap a with-statement around the generated
		      // code to add the data object to the top of the scope chain.
		      var variable = hasOwnProperty.call(options, 'variable') && options.variable;
		      if (!variable) {
		        source = 'with (obj) {\n' + source + '\n}\n';
		      }
		      // Throw an error if a forbidden character was found in `variable`, to prevent
		      // potential command injection attacks.
		      else if (reForbiddenIdentifierChars.test(variable)) {
		        throw new Error(INVALID_TEMPL_VAR_ERROR_TEXT);
		      }

		      // Cleanup code by stripping empty strings.
		      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)
		        .replace(reEmptyStringMiddle, '$1')
		        .replace(reEmptyStringTrailing, '$1;');

		      // Frame code as the function body.
		      source = 'function(' + (variable || 'obj') + ') {\n' +
		        (variable
		          ? ''
		          : 'obj || (obj = {});\n'
		        ) +
		        "var __t, __p = ''" +
		        (isEscaping
		           ? ', __e = _.escape'
		           : ''
		        ) +
		        (isEvaluating
		          ? ', __j = Array.prototype.join;\n' +
		            "function print() { __p += __j.call(arguments, '') }\n"
		          : ';\n'
		        ) +
		        source +
		        'return __p\n}';

		      var result = attempt(function() {
		        return Function(importsKeys, sourceURL + 'return ' + source)
		          .apply(undefined$1, importsValues);
		      });

		      // Provide the compiled function's source by its `toString` method or
		      // the `source` property as a convenience for inlining compiled templates.
		      result.source = source;
		      if (isError(result)) {
		        throw result;
		      }
		      return result;
		    }

		    /**
		     * Converts `string`, as a whole, to lower case just like
		     * [String#toLowerCase](https://mdn.io/toLowerCase).
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category String
		     * @param {string} [string=''] The string to convert.
		     * @returns {string} Returns the lower cased string.
		     * @example
		     *
		     * _.toLower('--Foo-Bar--');
		     * // => '--foo-bar--'
		     *
		     * _.toLower('fooBar');
		     * // => 'foobar'
		     *
		     * _.toLower('__FOO_BAR__');
		     * // => '__foo_bar__'
		     */
		    function toLower(value) {
		      return toString(value).toLowerCase();
		    }

		    /**
		     * Converts `string`, as a whole, to upper case just like
		     * [String#toUpperCase](https://mdn.io/toUpperCase).
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category String
		     * @param {string} [string=''] The string to convert.
		     * @returns {string} Returns the upper cased string.
		     * @example
		     *
		     * _.toUpper('--foo-bar--');
		     * // => '--FOO-BAR--'
		     *
		     * _.toUpper('fooBar');
		     * // => 'FOOBAR'
		     *
		     * _.toUpper('__foo_bar__');
		     * // => '__FOO_BAR__'
		     */
		    function toUpper(value) {
		      return toString(value).toUpperCase();
		    }

		    /**
		     * Removes leading and trailing whitespace or specified characters from `string`.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category String
		     * @param {string} [string=''] The string to trim.
		     * @param {string} [chars=whitespace] The characters to trim.
		     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
		     * @returns {string} Returns the trimmed string.
		     * @example
		     *
		     * _.trim('  abc  ');
		     * // => 'abc'
		     *
		     * _.trim('-_-abc-_-', '_-');
		     * // => 'abc'
		     *
		     * _.map(['  foo  ', '  bar  '], _.trim);
		     * // => ['foo', 'bar']
		     */
		    function trim(string, chars, guard) {
		      string = toString(string);
		      if (string && (guard || chars === undefined$1)) {
		        return baseTrim(string);
		      }
		      if (!string || !(chars = baseToString(chars))) {
		        return string;
		      }
		      var strSymbols = stringToArray(string),
		          chrSymbols = stringToArray(chars),
		          start = charsStartIndex(strSymbols, chrSymbols),
		          end = charsEndIndex(strSymbols, chrSymbols) + 1;

		      return castSlice(strSymbols, start, end).join('');
		    }

		    /**
		     * Removes trailing whitespace or specified characters from `string`.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category String
		     * @param {string} [string=''] The string to trim.
		     * @param {string} [chars=whitespace] The characters to trim.
		     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
		     * @returns {string} Returns the trimmed string.
		     * @example
		     *
		     * _.trimEnd('  abc  ');
		     * // => '  abc'
		     *
		     * _.trimEnd('-_-abc-_-', '_-');
		     * // => '-_-abc'
		     */
		    function trimEnd(string, chars, guard) {
		      string = toString(string);
		      if (string && (guard || chars === undefined$1)) {
		        return string.slice(0, trimmedEndIndex(string) + 1);
		      }
		      if (!string || !(chars = baseToString(chars))) {
		        return string;
		      }
		      var strSymbols = stringToArray(string),
		          end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;

		      return castSlice(strSymbols, 0, end).join('');
		    }

		    /**
		     * Removes leading whitespace or specified characters from `string`.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category String
		     * @param {string} [string=''] The string to trim.
		     * @param {string} [chars=whitespace] The characters to trim.
		     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
		     * @returns {string} Returns the trimmed string.
		     * @example
		     *
		     * _.trimStart('  abc  ');
		     * // => 'abc  '
		     *
		     * _.trimStart('-_-abc-_-', '_-');
		     * // => 'abc-_-'
		     */
		    function trimStart(string, chars, guard) {
		      string = toString(string);
		      if (string && (guard || chars === undefined$1)) {
		        return string.replace(reTrimStart, '');
		      }
		      if (!string || !(chars = baseToString(chars))) {
		        return string;
		      }
		      var strSymbols = stringToArray(string),
		          start = charsStartIndex(strSymbols, stringToArray(chars));

		      return castSlice(strSymbols, start).join('');
		    }

		    /**
		     * Truncates `string` if it's longer than the given maximum string length.
		     * The last characters of the truncated string are replaced with the omission
		     * string which defaults to "...".
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category String
		     * @param {string} [string=''] The string to truncate.
		     * @param {Object} [options={}] The options object.
		     * @param {number} [options.length=30] The maximum string length.
		     * @param {string} [options.omission='...'] The string to indicate text is omitted.
		     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
		     * @returns {string} Returns the truncated string.
		     * @example
		     *
		     * _.truncate('hi-diddly-ho there, neighborino');
		     * // => 'hi-diddly-ho there, neighbo...'
		     *
		     * _.truncate('hi-diddly-ho there, neighborino', {
		     *   'length': 24,
		     *   'separator': ' '
		     * });
		     * // => 'hi-diddly-ho there,...'
		     *
		     * _.truncate('hi-diddly-ho there, neighborino', {
		     *   'length': 24,
		     *   'separator': /,? +/
		     * });
		     * // => 'hi-diddly-ho there...'
		     *
		     * _.truncate('hi-diddly-ho there, neighborino', {
		     *   'omission': ' [...]'
		     * });
		     * // => 'hi-diddly-ho there, neig [...]'
		     */
		    function truncate(string, options) {
		      var length = DEFAULT_TRUNC_LENGTH,
		          omission = DEFAULT_TRUNC_OMISSION;

		      if (isObject(options)) {
		        var separator = 'separator' in options ? options.separator : separator;
		        length = 'length' in options ? toInteger(options.length) : length;
		        omission = 'omission' in options ? baseToString(options.omission) : omission;
		      }
		      string = toString(string);

		      var strLength = string.length;
		      if (hasUnicode(string)) {
		        var strSymbols = stringToArray(string);
		        strLength = strSymbols.length;
		      }
		      if (length >= strLength) {
		        return string;
		      }
		      var end = length - stringSize(omission);
		      if (end < 1) {
		        return omission;
		      }
		      var result = strSymbols
		        ? castSlice(strSymbols, 0, end).join('')
		        : string.slice(0, end);

		      if (separator === undefined$1) {
		        return result + omission;
		      }
		      if (strSymbols) {
		        end += (result.length - end);
		      }
		      if (isRegExp(separator)) {
		        if (string.slice(end).search(separator)) {
		          var match,
		              substring = result;

		          if (!separator.global) {
		            separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');
		          }
		          separator.lastIndex = 0;
		          while ((match = separator.exec(substring))) {
		            var newEnd = match.index;
		          }
		          result = result.slice(0, newEnd === undefined$1 ? end : newEnd);
		        }
		      } else if (string.indexOf(baseToString(separator), end) != end) {
		        var index = result.lastIndexOf(separator);
		        if (index > -1) {
		          result = result.slice(0, index);
		        }
		      }
		      return result + omission;
		    }

		    /**
		     * The inverse of `_.escape`; this method converts the HTML entities
		     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to
		     * their corresponding characters.
		     *
		     * **Note:** No other HTML entities are unescaped. To unescape additional
		     * HTML entities use a third-party library like [_he_](https://mths.be/he).
		     *
		     * @static
		     * @memberOf _
		     * @since 0.6.0
		     * @category String
		     * @param {string} [string=''] The string to unescape.
		     * @returns {string} Returns the unescaped string.
		     * @example
		     *
		     * _.unescape('fred, barney, &amp; pebbles');
		     * // => 'fred, barney, & pebbles'
		     */
		    function unescape(string) {
		      string = toString(string);
		      return (string && reHasEscapedHtml.test(string))
		        ? string.replace(reEscapedHtml, unescapeHtmlChar)
		        : string;
		    }

		    /**
		     * Converts `string`, as space separated words, to upper case.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category String
		     * @param {string} [string=''] The string to convert.
		     * @returns {string} Returns the upper cased string.
		     * @example
		     *
		     * _.upperCase('--foo-bar');
		     * // => 'FOO BAR'
		     *
		     * _.upperCase('fooBar');
		     * // => 'FOO BAR'
		     *
		     * _.upperCase('__foo_bar__');
		     * // => 'FOO BAR'
		     */
		    var upperCase = createCompounder(function(result, word, index) {
		      return result + (index ? ' ' : '') + word.toUpperCase();
		    });

		    /**
		     * Converts the first character of `string` to upper case.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category String
		     * @param {string} [string=''] The string to convert.
		     * @returns {string} Returns the converted string.
		     * @example
		     *
		     * _.upperFirst('fred');
		     * // => 'Fred'
		     *
		     * _.upperFirst('FRED');
		     * // => 'FRED'
		     */
		    var upperFirst = createCaseFirst('toUpperCase');

		    /**
		     * Splits `string` into an array of its words.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category String
		     * @param {string} [string=''] The string to inspect.
		     * @param {RegExp|string} [pattern] The pattern to match words.
		     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
		     * @returns {Array} Returns the words of `string`.
		     * @example
		     *
		     * _.words('fred, barney, & pebbles');
		     * // => ['fred', 'barney', 'pebbles']
		     *
		     * _.words('fred, barney, & pebbles', /[^, ]+/g);
		     * // => ['fred', 'barney', '&', 'pebbles']
		     */
		    function words(string, pattern, guard) {
		      string = toString(string);
		      pattern = guard ? undefined$1 : pattern;

		      if (pattern === undefined$1) {
		        return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
		      }
		      return string.match(pattern) || [];
		    }

		    /*------------------------------------------------------------------------*/

		    /**
		     * Attempts to invoke `func`, returning either the result or the caught error
		     * object. Any additional arguments are provided to `func` when it's invoked.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category Util
		     * @param {Function} func The function to attempt.
		     * @param {...*} [args] The arguments to invoke `func` with.
		     * @returns {*} Returns the `func` result or error object.
		     * @example
		     *
		     * // Avoid throwing errors for invalid selectors.
		     * var elements = _.attempt(function(selector) {
		     *   return document.querySelectorAll(selector);
		     * }, '>_>');
		     *
		     * if (_.isError(elements)) {
		     *   elements = [];
		     * }
		     */
		    var attempt = baseRest(function(func, args) {
		      try {
		        return apply(func, undefined$1, args);
		      } catch (e) {
		        return isError(e) ? e : new Error(e);
		      }
		    });

		    /**
		     * Binds methods of an object to the object itself, overwriting the existing
		     * method.
		     *
		     * **Note:** This method doesn't set the "length" property of bound functions.
		     *
		     * @static
		     * @since 0.1.0
		     * @memberOf _
		     * @category Util
		     * @param {Object} object The object to bind and assign the bound methods to.
		     * @param {...(string|string[])} methodNames The object method names to bind.
		     * @returns {Object} Returns `object`.
		     * @example
		     *
		     * var view = {
		     *   'label': 'docs',
		     *   'click': function() {
		     *     console.log('clicked ' + this.label);
		     *   }
		     * };
		     *
		     * _.bindAll(view, ['click']);
		     * jQuery(element).on('click', view.click);
		     * // => Logs 'clicked docs' when clicked.
		     */
		    var bindAll = flatRest(function(object, methodNames) {
		      arrayEach(methodNames, function(key) {
		        key = toKey(key);
		        baseAssignValue(object, key, bind(object[key], object));
		      });
		      return object;
		    });

		    /**
		     * Creates a function that iterates over `pairs` and invokes the corresponding
		     * function of the first predicate to return truthy. The predicate-function
		     * pairs are invoked with the `this` binding and arguments of the created
		     * function.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Util
		     * @param {Array} pairs The predicate-function pairs.
		     * @returns {Function} Returns the new composite function.
		     * @example
		     *
		     * var func = _.cond([
		     *   [_.matches({ 'a': 1 }),           _.constant('matches A')],
		     *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],
		     *   [_.stubTrue,                      _.constant('no match')]
		     * ]);
		     *
		     * func({ 'a': 1, 'b': 2 });
		     * // => 'matches A'
		     *
		     * func({ 'a': 0, 'b': 1 });
		     * // => 'matches B'
		     *
		     * func({ 'a': '1', 'b': '2' });
		     * // => 'no match'
		     */
		    function cond(pairs) {
		      var length = pairs == null ? 0 : pairs.length,
		          toIteratee = getIteratee();

		      pairs = !length ? [] : arrayMap(pairs, function(pair) {
		        if (typeof pair[1] != 'function') {
		          throw new TypeError(FUNC_ERROR_TEXT);
		        }
		        return [toIteratee(pair[0]), pair[1]];
		      });

		      return baseRest(function(args) {
		        var index = -1;
		        while (++index < length) {
		          var pair = pairs[index];
		          if (apply(pair[0], this, args)) {
		            return apply(pair[1], this, args);
		          }
		        }
		      });
		    }

		    /**
		     * Creates a function that invokes the predicate properties of `source` with
		     * the corresponding property values of a given object, returning `true` if
		     * all predicates return truthy, else `false`.
		     *
		     * **Note:** The created function is equivalent to `_.conformsTo` with
		     * `source` partially applied.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Util
		     * @param {Object} source The object of property predicates to conform to.
		     * @returns {Function} Returns the new spec function.
		     * @example
		     *
		     * var objects = [
		     *   { 'a': 2, 'b': 1 },
		     *   { 'a': 1, 'b': 2 }
		     * ];
		     *
		     * _.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));
		     * // => [{ 'a': 1, 'b': 2 }]
		     */
		    function conforms(source) {
		      return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
		    }

		    /**
		     * Creates a function that returns `value`.
		     *
		     * @static
		     * @memberOf _
		     * @since 2.4.0
		     * @category Util
		     * @param {*} value The value to return from the new function.
		     * @returns {Function} Returns the new constant function.
		     * @example
		     *
		     * var objects = _.times(2, _.constant({ 'a': 1 }));
		     *
		     * console.log(objects);
		     * // => [{ 'a': 1 }, { 'a': 1 }]
		     *
		     * console.log(objects[0] === objects[1]);
		     * // => true
		     */
		    function constant(value) {
		      return function() {
		        return value;
		      };
		    }

		    /**
		     * Checks `value` to determine whether a default value should be returned in
		     * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,
		     * or `undefined`.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.14.0
		     * @category Util
		     * @param {*} value The value to check.
		     * @param {*} defaultValue The default value.
		     * @returns {*} Returns the resolved value.
		     * @example
		     *
		     * _.defaultTo(1, 10);
		     * // => 1
		     *
		     * _.defaultTo(undefined, 10);
		     * // => 10
		     */
		    function defaultTo(value, defaultValue) {
		      return (value == null || value !== value) ? defaultValue : value;
		    }

		    /**
		     * Creates a function that returns the result of invoking the given functions
		     * with the `this` binding of the created function, where each successive
		     * invocation is supplied the return value of the previous.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category Util
		     * @param {...(Function|Function[])} [funcs] The functions to invoke.
		     * @returns {Function} Returns the new composite function.
		     * @see _.flowRight
		     * @example
		     *
		     * function square(n) {
		     *   return n * n;
		     * }
		     *
		     * var addSquare = _.flow([_.add, square]);
		     * addSquare(1, 2);
		     * // => 9
		     */
		    var flow = createFlow();

		    /**
		     * This method is like `_.flow` except that it creates a function that
		     * invokes the given functions from right to left.
		     *
		     * @static
		     * @since 3.0.0
		     * @memberOf _
		     * @category Util
		     * @param {...(Function|Function[])} [funcs] The functions to invoke.
		     * @returns {Function} Returns the new composite function.
		     * @see _.flow
		     * @example
		     *
		     * function square(n) {
		     *   return n * n;
		     * }
		     *
		     * var addSquare = _.flowRight([square, _.add]);
		     * addSquare(1, 2);
		     * // => 9
		     */
		    var flowRight = createFlow(true);

		    /**
		     * This method returns the first argument it receives.
		     *
		     * @static
		     * @since 0.1.0
		     * @memberOf _
		     * @category Util
		     * @param {*} value Any value.
		     * @returns {*} Returns `value`.
		     * @example
		     *
		     * var object = { 'a': 1 };
		     *
		     * console.log(_.identity(object) === object);
		     * // => true
		     */
		    function identity(value) {
		      return value;
		    }

		    /**
		     * Creates a function that invokes `func` with the arguments of the created
		     * function. If `func` is a property name, the created function returns the
		     * property value for a given element. If `func` is an array or object, the
		     * created function returns `true` for elements that contain the equivalent
		     * source properties, otherwise it returns `false`.
		     *
		     * @static
		     * @since 4.0.0
		     * @memberOf _
		     * @category Util
		     * @param {*} [func=_.identity] The value to convert to a callback.
		     * @returns {Function} Returns the callback.
		     * @example
		     *
		     * var users = [
		     *   { 'user': 'barney', 'age': 36, 'active': true },
		     *   { 'user': 'fred',   'age': 40, 'active': false }
		     * ];
		     *
		     * // The `_.matches` iteratee shorthand.
		     * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));
		     * // => [{ 'user': 'barney', 'age': 36, 'active': true }]
		     *
		     * // The `_.matchesProperty` iteratee shorthand.
		     * _.filter(users, _.iteratee(['user', 'fred']));
		     * // => [{ 'user': 'fred', 'age': 40 }]
		     *
		     * // The `_.property` iteratee shorthand.
		     * _.map(users, _.iteratee('user'));
		     * // => ['barney', 'fred']
		     *
		     * // Create custom iteratee shorthands.
		     * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {
		     *   return !_.isRegExp(func) ? iteratee(func) : function(string) {
		     *     return func.test(string);
		     *   };
		     * });
		     *
		     * _.filter(['abc', 'def'], /ef/);
		     * // => ['def']
		     */
		    function iteratee(func) {
		      return baseIteratee(typeof func == 'function' ? func : baseClone(func, CLONE_DEEP_FLAG));
		    }

		    /**
		     * Creates a function that performs a partial deep comparison between a given
		     * object and `source`, returning `true` if the given object has equivalent
		     * property values, else `false`.
		     *
		     * **Note:** The created function is equivalent to `_.isMatch` with `source`
		     * partially applied.
		     *
		     * Partial comparisons will match empty array and empty object `source`
		     * values against any array or object value, respectively. See `_.isEqual`
		     * for a list of supported value comparisons.
		     *
		     * **Note:** Multiple values can be checked by combining several matchers
		     * using `_.overSome`
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category Util
		     * @param {Object} source The object of property values to match.
		     * @returns {Function} Returns the new spec function.
		     * @example
		     *
		     * var objects = [
		     *   { 'a': 1, 'b': 2, 'c': 3 },
		     *   { 'a': 4, 'b': 5, 'c': 6 }
		     * ];
		     *
		     * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));
		     * // => [{ 'a': 4, 'b': 5, 'c': 6 }]
		     *
		     * // Checking for several possible values
		     * _.filter(objects, _.overSome([_.matches({ 'a': 1 }), _.matches({ 'a': 4 })]));
		     * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]
		     */
		    function matches(source) {
		      return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
		    }

		    /**
		     * Creates a function that performs a partial deep comparison between the
		     * value at `path` of a given object to `srcValue`, returning `true` if the
		     * object value is equivalent, else `false`.
		     *
		     * **Note:** Partial comparisons will match empty array and empty object
		     * `srcValue` values against any array or object value, respectively. See
		     * `_.isEqual` for a list of supported value comparisons.
		     *
		     * **Note:** Multiple values can be checked by combining several matchers
		     * using `_.overSome`
		     *
		     * @static
		     * @memberOf _
		     * @since 3.2.0
		     * @category Util
		     * @param {Array|string} path The path of the property to get.
		     * @param {*} srcValue The value to match.
		     * @returns {Function} Returns the new spec function.
		     * @example
		     *
		     * var objects = [
		     *   { 'a': 1, 'b': 2, 'c': 3 },
		     *   { 'a': 4, 'b': 5, 'c': 6 }
		     * ];
		     *
		     * _.find(objects, _.matchesProperty('a', 4));
		     * // => { 'a': 4, 'b': 5, 'c': 6 }
		     *
		     * // Checking for several possible values
		     * _.filter(objects, _.overSome([_.matchesProperty('a', 1), _.matchesProperty('a', 4)]));
		     * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]
		     */
		    function matchesProperty(path, srcValue) {
		      return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));
		    }

		    /**
		     * Creates a function that invokes the method at `path` of a given object.
		     * Any additional arguments are provided to the invoked method.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.7.0
		     * @category Util
		     * @param {Array|string} path The path of the method to invoke.
		     * @param {...*} [args] The arguments to invoke the method with.
		     * @returns {Function} Returns the new invoker function.
		     * @example
		     *
		     * var objects = [
		     *   { 'a': { 'b': _.constant(2) } },
		     *   { 'a': { 'b': _.constant(1) } }
		     * ];
		     *
		     * _.map(objects, _.method('a.b'));
		     * // => [2, 1]
		     *
		     * _.map(objects, _.method(['a', 'b']));
		     * // => [2, 1]
		     */
		    var method = baseRest(function(path, args) {
		      return function(object) {
		        return baseInvoke(object, path, args);
		      };
		    });

		    /**
		     * The opposite of `_.method`; this method creates a function that invokes
		     * the method at a given path of `object`. Any additional arguments are
		     * provided to the invoked method.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.7.0
		     * @category Util
		     * @param {Object} object The object to query.
		     * @param {...*} [args] The arguments to invoke the method with.
		     * @returns {Function} Returns the new invoker function.
		     * @example
		     *
		     * var array = _.times(3, _.constant),
		     *     object = { 'a': array, 'b': array, 'c': array };
		     *
		     * _.map(['a[2]', 'c[0]'], _.methodOf(object));
		     * // => [2, 0]
		     *
		     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
		     * // => [2, 0]
		     */
		    var methodOf = baseRest(function(object, args) {
		      return function(path) {
		        return baseInvoke(object, path, args);
		      };
		    });

		    /**
		     * Adds all own enumerable string keyed function properties of a source
		     * object to the destination object. If `object` is a function, then methods
		     * are added to its prototype as well.
		     *
		     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
		     * avoid conflicts caused by modifying the original.
		     *
		     * @static
		     * @since 0.1.0
		     * @memberOf _
		     * @category Util
		     * @param {Function|Object} [object=lodash] The destination object.
		     * @param {Object} source The object of functions to add.
		     * @param {Object} [options={}] The options object.
		     * @param {boolean} [options.chain=true] Specify whether mixins are chainable.
		     * @returns {Function|Object} Returns `object`.
		     * @example
		     *
		     * function vowels(string) {
		     *   return _.filter(string, function(v) {
		     *     return /[aeiou]/i.test(v);
		     *   });
		     * }
		     *
		     * _.mixin({ 'vowels': vowels });
		     * _.vowels('fred');
		     * // => ['e']
		     *
		     * _('fred').vowels().value();
		     * // => ['e']
		     *
		     * _.mixin({ 'vowels': vowels }, { 'chain': false });
		     * _('fred').vowels();
		     * // => ['e']
		     */
		    function mixin(object, source, options) {
		      var props = keys(source),
		          methodNames = baseFunctions(source, props);

		      if (options == null &&
		          !(isObject(source) && (methodNames.length || !props.length))) {
		        options = source;
		        source = object;
		        object = this;
		        methodNames = baseFunctions(source, keys(source));
		      }
		      var chain = !(isObject(options) && 'chain' in options) || !!options.chain,
		          isFunc = isFunction(object);

		      arrayEach(methodNames, function(methodName) {
		        var func = source[methodName];
		        object[methodName] = func;
		        if (isFunc) {
		          object.prototype[methodName] = function() {
		            var chainAll = this.__chain__;
		            if (chain || chainAll) {
		              var result = object(this.__wrapped__),
		                  actions = result.__actions__ = copyArray(this.__actions__);

		              actions.push({ 'func': func, 'args': arguments, 'thisArg': object });
		              result.__chain__ = chainAll;
		              return result;
		            }
		            return func.apply(object, arrayPush([this.value()], arguments));
		          };
		        }
		      });

		      return object;
		    }

		    /**
		     * Reverts the `_` variable to its previous value and returns a reference to
		     * the `lodash` function.
		     *
		     * @static
		     * @since 0.1.0
		     * @memberOf _
		     * @category Util
		     * @returns {Function} Returns the `lodash` function.
		     * @example
		     *
		     * var lodash = _.noConflict();
		     */
		    function noConflict() {
		      if (root._ === this) {
		        root._ = oldDash;
		      }
		      return this;
		    }

		    /**
		     * This method returns `undefined`.
		     *
		     * @static
		     * @memberOf _
		     * @since 2.3.0
		     * @category Util
		     * @example
		     *
		     * _.times(2, _.noop);
		     * // => [undefined, undefined]
		     */
		    function noop() {
		      // No operation performed.
		    }

		    /**
		     * Creates a function that gets the argument at index `n`. If `n` is negative,
		     * the nth argument from the end is returned.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Util
		     * @param {number} [n=0] The index of the argument to return.
		     * @returns {Function} Returns the new pass-thru function.
		     * @example
		     *
		     * var func = _.nthArg(1);
		     * func('a', 'b', 'c', 'd');
		     * // => 'b'
		     *
		     * var func = _.nthArg(-2);
		     * func('a', 'b', 'c', 'd');
		     * // => 'c'
		     */
		    function nthArg(n) {
		      n = toInteger(n);
		      return baseRest(function(args) {
		        return baseNth(args, n);
		      });
		    }

		    /**
		     * Creates a function that invokes `iteratees` with the arguments it receives
		     * and returns their results.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Util
		     * @param {...(Function|Function[])} [iteratees=[_.identity]]
		     *  The iteratees to invoke.
		     * @returns {Function} Returns the new function.
		     * @example
		     *
		     * var func = _.over([Math.max, Math.min]);
		     *
		     * func(1, 2, 3, 4);
		     * // => [4, 1]
		     */
		    var over = createOver(arrayMap);

		    /**
		     * Creates a function that checks if **all** of the `predicates` return
		     * truthy when invoked with the arguments it receives.
		     *
		     * Following shorthands are possible for providing predicates.
		     * Pass an `Object` and it will be used as an parameter for `_.matches` to create the predicate.
		     * Pass an `Array` of parameters for `_.matchesProperty` and the predicate will be created using them.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Util
		     * @param {...(Function|Function[])} [predicates=[_.identity]]
		     *  The predicates to check.
		     * @returns {Function} Returns the new function.
		     * @example
		     *
		     * var func = _.overEvery([Boolean, isFinite]);
		     *
		     * func('1');
		     * // => true
		     *
		     * func(null);
		     * // => false
		     *
		     * func(NaN);
		     * // => false
		     */
		    var overEvery = createOver(arrayEvery);

		    /**
		     * Creates a function that checks if **any** of the `predicates` return
		     * truthy when invoked with the arguments it receives.
		     *
		     * Following shorthands are possible for providing predicates.
		     * Pass an `Object` and it will be used as an parameter for `_.matches` to create the predicate.
		     * Pass an `Array` of parameters for `_.matchesProperty` and the predicate will be created using them.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Util
		     * @param {...(Function|Function[])} [predicates=[_.identity]]
		     *  The predicates to check.
		     * @returns {Function} Returns the new function.
		     * @example
		     *
		     * var func = _.overSome([Boolean, isFinite]);
		     *
		     * func('1');
		     * // => true
		     *
		     * func(null);
		     * // => true
		     *
		     * func(NaN);
		     * // => false
		     *
		     * var matchesFunc = _.overSome([{ 'a': 1 }, { 'a': 2 }])
		     * var matchesPropertyFunc = _.overSome([['a', 1], ['a', 2]])
		     */
		    var overSome = createOver(arraySome);

		    /**
		     * Creates a function that returns the value at `path` of a given object.
		     *
		     * @static
		     * @memberOf _
		     * @since 2.4.0
		     * @category Util
		     * @param {Array|string} path The path of the property to get.
		     * @returns {Function} Returns the new accessor function.
		     * @example
		     *
		     * var objects = [
		     *   { 'a': { 'b': 2 } },
		     *   { 'a': { 'b': 1 } }
		     * ];
		     *
		     * _.map(objects, _.property('a.b'));
		     * // => [2, 1]
		     *
		     * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
		     * // => [1, 2]
		     */
		    function property(path) {
		      return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
		    }

		    /**
		     * The opposite of `_.property`; this method creates a function that returns
		     * the value at a given path of `object`.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category Util
		     * @param {Object} object The object to query.
		     * @returns {Function} Returns the new accessor function.
		     * @example
		     *
		     * var array = [0, 1, 2],
		     *     object = { 'a': array, 'b': array, 'c': array };
		     *
		     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
		     * // => [2, 0]
		     *
		     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
		     * // => [2, 0]
		     */
		    function propertyOf(object) {
		      return function(path) {
		        return object == null ? undefined$1 : baseGet(object, path);
		      };
		    }

		    /**
		     * Creates an array of numbers (positive and/or negative) progressing from
		     * `start` up to, but not including, `end`. A step of `-1` is used if a negative
		     * `start` is specified without an `end` or `step`. If `end` is not specified,
		     * it's set to `start` with `start` then set to `0`.
		     *
		     * **Note:** JavaScript follows the IEEE-754 standard for resolving
		     * floating-point values which can produce unexpected results.
		     *
		     * @static
		     * @since 0.1.0
		     * @memberOf _
		     * @category Util
		     * @param {number} [start=0] The start of the range.
		     * @param {number} end The end of the range.
		     * @param {number} [step=1] The value to increment or decrement by.
		     * @returns {Array} Returns the range of numbers.
		     * @see _.inRange, _.rangeRight
		     * @example
		     *
		     * _.range(4);
		     * // => [0, 1, 2, 3]
		     *
		     * _.range(-4);
		     * // => [0, -1, -2, -3]
		     *
		     * _.range(1, 5);
		     * // => [1, 2, 3, 4]
		     *
		     * _.range(0, 20, 5);
		     * // => [0, 5, 10, 15]
		     *
		     * _.range(0, -4, -1);
		     * // => [0, -1, -2, -3]
		     *
		     * _.range(1, 4, 0);
		     * // => [1, 1, 1]
		     *
		     * _.range(0);
		     * // => []
		     */
		    var range = createRange();

		    /**
		     * This method is like `_.range` except that it populates values in
		     * descending order.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Util
		     * @param {number} [start=0] The start of the range.
		     * @param {number} end The end of the range.
		     * @param {number} [step=1] The value to increment or decrement by.
		     * @returns {Array} Returns the range of numbers.
		     * @see _.inRange, _.range
		     * @example
		     *
		     * _.rangeRight(4);
		     * // => [3, 2, 1, 0]
		     *
		     * _.rangeRight(-4);
		     * // => [-3, -2, -1, 0]
		     *
		     * _.rangeRight(1, 5);
		     * // => [4, 3, 2, 1]
		     *
		     * _.rangeRight(0, 20, 5);
		     * // => [15, 10, 5, 0]
		     *
		     * _.rangeRight(0, -4, -1);
		     * // => [-3, -2, -1, 0]
		     *
		     * _.rangeRight(1, 4, 0);
		     * // => [1, 1, 1]
		     *
		     * _.rangeRight(0);
		     * // => []
		     */
		    var rangeRight = createRange(true);

		    /**
		     * This method returns a new empty array.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.13.0
		     * @category Util
		     * @returns {Array} Returns the new empty array.
		     * @example
		     *
		     * var arrays = _.times(2, _.stubArray);
		     *
		     * console.log(arrays);
		     * // => [[], []]
		     *
		     * console.log(arrays[0] === arrays[1]);
		     * // => false
		     */
		    function stubArray() {
		      return [];
		    }

		    /**
		     * This method returns `false`.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.13.0
		     * @category Util
		     * @returns {boolean} Returns `false`.
		     * @example
		     *
		     * _.times(2, _.stubFalse);
		     * // => [false, false]
		     */
		    function stubFalse() {
		      return false;
		    }

		    /**
		     * This method returns a new empty object.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.13.0
		     * @category Util
		     * @returns {Object} Returns the new empty object.
		     * @example
		     *
		     * var objects = _.times(2, _.stubObject);
		     *
		     * console.log(objects);
		     * // => [{}, {}]
		     *
		     * console.log(objects[0] === objects[1]);
		     * // => false
		     */
		    function stubObject() {
		      return {};
		    }

		    /**
		     * This method returns an empty string.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.13.0
		     * @category Util
		     * @returns {string} Returns the empty string.
		     * @example
		     *
		     * _.times(2, _.stubString);
		     * // => ['', '']
		     */
		    function stubString() {
		      return '';
		    }

		    /**
		     * This method returns `true`.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.13.0
		     * @category Util
		     * @returns {boolean} Returns `true`.
		     * @example
		     *
		     * _.times(2, _.stubTrue);
		     * // => [true, true]
		     */
		    function stubTrue() {
		      return true;
		    }

		    /**
		     * Invokes the iteratee `n` times, returning an array of the results of
		     * each invocation. The iteratee is invoked with one argument; (index).
		     *
		     * @static
		     * @since 0.1.0
		     * @memberOf _
		     * @category Util
		     * @param {number} n The number of times to invoke `iteratee`.
		     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
		     * @returns {Array} Returns the array of results.
		     * @example
		     *
		     * _.times(3, String);
		     * // => ['0', '1', '2']
		     *
		     *  _.times(4, _.constant(0));
		     * // => [0, 0, 0, 0]
		     */
		    function times(n, iteratee) {
		      n = toInteger(n);
		      if (n < 1 || n > MAX_SAFE_INTEGER) {
		        return [];
		      }
		      var index = MAX_ARRAY_LENGTH,
		          length = nativeMin(n, MAX_ARRAY_LENGTH);

		      iteratee = getIteratee(iteratee);
		      n -= MAX_ARRAY_LENGTH;

		      var result = baseTimes(length, iteratee);
		      while (++index < n) {
		        iteratee(index);
		      }
		      return result;
		    }

		    /**
		     * Converts `value` to a property path array.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Util
		     * @param {*} value The value to convert.
		     * @returns {Array} Returns the new property path array.
		     * @example
		     *
		     * _.toPath('a.b.c');
		     * // => ['a', 'b', 'c']
		     *
		     * _.toPath('a[0].b.c');
		     * // => ['a', '0', 'b', 'c']
		     */
		    function toPath(value) {
		      if (isArray(value)) {
		        return arrayMap(value, toKey);
		      }
		      return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));
		    }

		    /**
		     * Generates a unique ID. If `prefix` is given, the ID is appended to it.
		     *
		     * @static
		     * @since 0.1.0
		     * @memberOf _
		     * @category Util
		     * @param {string} [prefix=''] The value to prefix the ID with.
		     * @returns {string} Returns the unique ID.
		     * @example
		     *
		     * _.uniqueId('contact_');
		     * // => 'contact_104'
		     *
		     * _.uniqueId();
		     * // => '105'
		     */
		    function uniqueId(prefix) {
		      var id = ++idCounter;
		      return toString(prefix) + id;
		    }

		    /*------------------------------------------------------------------------*/

		    /**
		     * Adds two numbers.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.4.0
		     * @category Math
		     * @param {number} augend The first number in an addition.
		     * @param {number} addend The second number in an addition.
		     * @returns {number} Returns the total.
		     * @example
		     *
		     * _.add(6, 4);
		     * // => 10
		     */
		    var add = createMathOperation(function(augend, addend) {
		      return augend + addend;
		    }, 0);

		    /**
		     * Computes `number` rounded up to `precision`.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.10.0
		     * @category Math
		     * @param {number} number The number to round up.
		     * @param {number} [precision=0] The precision to round up to.
		     * @returns {number} Returns the rounded up number.
		     * @example
		     *
		     * _.ceil(4.006);
		     * // => 5
		     *
		     * _.ceil(6.004, 2);
		     * // => 6.01
		     *
		     * _.ceil(6040, -2);
		     * // => 6100
		     */
		    var ceil = createRound('ceil');

		    /**
		     * Divide two numbers.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.7.0
		     * @category Math
		     * @param {number} dividend The first number in a division.
		     * @param {number} divisor The second number in a division.
		     * @returns {number} Returns the quotient.
		     * @example
		     *
		     * _.divide(6, 4);
		     * // => 1.5
		     */
		    var divide = createMathOperation(function(dividend, divisor) {
		      return dividend / divisor;
		    }, 1);

		    /**
		     * Computes `number` rounded down to `precision`.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.10.0
		     * @category Math
		     * @param {number} number The number to round down.
		     * @param {number} [precision=0] The precision to round down to.
		     * @returns {number} Returns the rounded down number.
		     * @example
		     *
		     * _.floor(4.006);
		     * // => 4
		     *
		     * _.floor(0.046, 2);
		     * // => 0.04
		     *
		     * _.floor(4060, -2);
		     * // => 4000
		     */
		    var floor = createRound('floor');

		    /**
		     * Computes the maximum value of `array`. If `array` is empty or falsey,
		     * `undefined` is returned.
		     *
		     * @static
		     * @since 0.1.0
		     * @memberOf _
		     * @category Math
		     * @param {Array} array The array to iterate over.
		     * @returns {*} Returns the maximum value.
		     * @example
		     *
		     * _.max([4, 2, 8, 6]);
		     * // => 8
		     *
		     * _.max([]);
		     * // => undefined
		     */
		    function max(array) {
		      return (array && array.length)
		        ? baseExtremum(array, identity, baseGt)
		        : undefined$1;
		    }

		    /**
		     * This method is like `_.max` except that it accepts `iteratee` which is
		     * invoked for each element in `array` to generate the criterion by which
		     * the value is ranked. The iteratee is invoked with one argument: (value).
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Math
		     * @param {Array} array The array to iterate over.
		     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
		     * @returns {*} Returns the maximum value.
		     * @example
		     *
		     * var objects = [{ 'n': 1 }, { 'n': 2 }];
		     *
		     * _.maxBy(objects, function(o) { return o.n; });
		     * // => { 'n': 2 }
		     *
		     * // The `_.property` iteratee shorthand.
		     * _.maxBy(objects, 'n');
		     * // => { 'n': 2 }
		     */
		    function maxBy(array, iteratee) {
		      return (array && array.length)
		        ? baseExtremum(array, getIteratee(iteratee, 2), baseGt)
		        : undefined$1;
		    }

		    /**
		     * Computes the mean of the values in `array`.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Math
		     * @param {Array} array The array to iterate over.
		     * @returns {number} Returns the mean.
		     * @example
		     *
		     * _.mean([4, 2, 8, 6]);
		     * // => 5
		     */
		    function mean(array) {
		      return baseMean(array, identity);
		    }

		    /**
		     * This method is like `_.mean` except that it accepts `iteratee` which is
		     * invoked for each element in `array` to generate the value to be averaged.
		     * The iteratee is invoked with one argument: (value).
		     *
		     * @static
		     * @memberOf _
		     * @since 4.7.0
		     * @category Math
		     * @param {Array} array The array to iterate over.
		     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
		     * @returns {number} Returns the mean.
		     * @example
		     *
		     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
		     *
		     * _.meanBy(objects, function(o) { return o.n; });
		     * // => 5
		     *
		     * // The `_.property` iteratee shorthand.
		     * _.meanBy(objects, 'n');
		     * // => 5
		     */
		    function meanBy(array, iteratee) {
		      return baseMean(array, getIteratee(iteratee, 2));
		    }

		    /**
		     * Computes the minimum value of `array`. If `array` is empty or falsey,
		     * `undefined` is returned.
		     *
		     * @static
		     * @since 0.1.0
		     * @memberOf _
		     * @category Math
		     * @param {Array} array The array to iterate over.
		     * @returns {*} Returns the minimum value.
		     * @example
		     *
		     * _.min([4, 2, 8, 6]);
		     * // => 2
		     *
		     * _.min([]);
		     * // => undefined
		     */
		    function min(array) {
		      return (array && array.length)
		        ? baseExtremum(array, identity, baseLt)
		        : undefined$1;
		    }

		    /**
		     * This method is like `_.min` except that it accepts `iteratee` which is
		     * invoked for each element in `array` to generate the criterion by which
		     * the value is ranked. The iteratee is invoked with one argument: (value).
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Math
		     * @param {Array} array The array to iterate over.
		     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
		     * @returns {*} Returns the minimum value.
		     * @example
		     *
		     * var objects = [{ 'n': 1 }, { 'n': 2 }];
		     *
		     * _.minBy(objects, function(o) { return o.n; });
		     * // => { 'n': 1 }
		     *
		     * // The `_.property` iteratee shorthand.
		     * _.minBy(objects, 'n');
		     * // => { 'n': 1 }
		     */
		    function minBy(array, iteratee) {
		      return (array && array.length)
		        ? baseExtremum(array, getIteratee(iteratee, 2), baseLt)
		        : undefined$1;
		    }

		    /**
		     * Multiply two numbers.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.7.0
		     * @category Math
		     * @param {number} multiplier The first number in a multiplication.
		     * @param {number} multiplicand The second number in a multiplication.
		     * @returns {number} Returns the product.
		     * @example
		     *
		     * _.multiply(6, 4);
		     * // => 24
		     */
		    var multiply = createMathOperation(function(multiplier, multiplicand) {
		      return multiplier * multiplicand;
		    }, 1);

		    /**
		     * Computes `number` rounded to `precision`.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.10.0
		     * @category Math
		     * @param {number} number The number to round.
		     * @param {number} [precision=0] The precision to round to.
		     * @returns {number} Returns the rounded number.
		     * @example
		     *
		     * _.round(4.006);
		     * // => 4
		     *
		     * _.round(4.006, 2);
		     * // => 4.01
		     *
		     * _.round(4060, -2);
		     * // => 4100
		     */
		    var round = createRound('round');

		    /**
		     * Subtract two numbers.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Math
		     * @param {number} minuend The first number in a subtraction.
		     * @param {number} subtrahend The second number in a subtraction.
		     * @returns {number} Returns the difference.
		     * @example
		     *
		     * _.subtract(6, 4);
		     * // => 2
		     */
		    var subtract = createMathOperation(function(minuend, subtrahend) {
		      return minuend - subtrahend;
		    }, 0);

		    /**
		     * Computes the sum of the values in `array`.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.4.0
		     * @category Math
		     * @param {Array} array The array to iterate over.
		     * @returns {number} Returns the sum.
		     * @example
		     *
		     * _.sum([4, 2, 8, 6]);
		     * // => 20
		     */
		    function sum(array) {
		      return (array && array.length)
		        ? baseSum(array, identity)
		        : 0;
		    }

		    /**
		     * This method is like `_.sum` except that it accepts `iteratee` which is
		     * invoked for each element in `array` to generate the value to be summed.
		     * The iteratee is invoked with one argument: (value).
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Math
		     * @param {Array} array The array to iterate over.
		     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
		     * @returns {number} Returns the sum.
		     * @example
		     *
		     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
		     *
		     * _.sumBy(objects, function(o) { return o.n; });
		     * // => 20
		     *
		     * // The `_.property` iteratee shorthand.
		     * _.sumBy(objects, 'n');
		     * // => 20
		     */
		    function sumBy(array, iteratee) {
		      return (array && array.length)
		        ? baseSum(array, getIteratee(iteratee, 2))
		        : 0;
		    }

		    /*------------------------------------------------------------------------*/

		    // Add methods that return wrapped values in chain sequences.
		    lodash.after = after;
		    lodash.ary = ary;
		    lodash.assign = assign;
		    lodash.assignIn = assignIn;
		    lodash.assignInWith = assignInWith;
		    lodash.assignWith = assignWith;
		    lodash.at = at;
		    lodash.before = before;
		    lodash.bind = bind;
		    lodash.bindAll = bindAll;
		    lodash.bindKey = bindKey;
		    lodash.castArray = castArray;
		    lodash.chain = chain;
		    lodash.chunk = chunk;
		    lodash.compact = compact;
		    lodash.concat = concat;
		    lodash.cond = cond;
		    lodash.conforms = conforms;
		    lodash.constant = constant;
		    lodash.countBy = countBy;
		    lodash.create = create;
		    lodash.curry = curry;
		    lodash.curryRight = curryRight;
		    lodash.debounce = debounce;
		    lodash.defaults = defaults;
		    lodash.defaultsDeep = defaultsDeep;
		    lodash.defer = defer;
		    lodash.delay = delay;
		    lodash.difference = difference;
		    lodash.differenceBy = differenceBy;
		    lodash.differenceWith = differenceWith;
		    lodash.drop = drop;
		    lodash.dropRight = dropRight;
		    lodash.dropRightWhile = dropRightWhile;
		    lodash.dropWhile = dropWhile;
		    lodash.fill = fill;
		    lodash.filter = filter;
		    lodash.flatMap = flatMap;
		    lodash.flatMapDeep = flatMapDeep;
		    lodash.flatMapDepth = flatMapDepth;
		    lodash.flatten = flatten;
		    lodash.flattenDeep = flattenDeep;
		    lodash.flattenDepth = flattenDepth;
		    lodash.flip = flip;
		    lodash.flow = flow;
		    lodash.flowRight = flowRight;
		    lodash.fromPairs = fromPairs;
		    lodash.functions = functions;
		    lodash.functionsIn = functionsIn;
		    lodash.groupBy = groupBy;
		    lodash.initial = initial;
		    lodash.intersection = intersection;
		    lodash.intersectionBy = intersectionBy;
		    lodash.intersectionWith = intersectionWith;
		    lodash.invert = invert;
		    lodash.invertBy = invertBy;
		    lodash.invokeMap = invokeMap;
		    lodash.iteratee = iteratee;
		    lodash.keyBy = keyBy;
		    lodash.keys = keys;
		    lodash.keysIn = keysIn;
		    lodash.map = map;
		    lodash.mapKeys = mapKeys;
		    lodash.mapValues = mapValues;
		    lodash.matches = matches;
		    lodash.matchesProperty = matchesProperty;
		    lodash.memoize = memoize;
		    lodash.merge = merge;
		    lodash.mergeWith = mergeWith;
		    lodash.method = method;
		    lodash.methodOf = methodOf;
		    lodash.mixin = mixin;
		    lodash.negate = negate;
		    lodash.nthArg = nthArg;
		    lodash.omit = omit;
		    lodash.omitBy = omitBy;
		    lodash.once = once;
		    lodash.orderBy = orderBy;
		    lodash.over = over;
		    lodash.overArgs = overArgs;
		    lodash.overEvery = overEvery;
		    lodash.overSome = overSome;
		    lodash.partial = partial;
		    lodash.partialRight = partialRight;
		    lodash.partition = partition;
		    lodash.pick = pick;
		    lodash.pickBy = pickBy;
		    lodash.property = property;
		    lodash.propertyOf = propertyOf;
		    lodash.pull = pull;
		    lodash.pullAll = pullAll;
		    lodash.pullAllBy = pullAllBy;
		    lodash.pullAllWith = pullAllWith;
		    lodash.pullAt = pullAt;
		    lodash.range = range;
		    lodash.rangeRight = rangeRight;
		    lodash.rearg = rearg;
		    lodash.reject = reject;
		    lodash.remove = remove;
		    lodash.rest = rest;
		    lodash.reverse = reverse;
		    lodash.sampleSize = sampleSize;
		    lodash.set = set;
		    lodash.setWith = setWith;
		    lodash.shuffle = shuffle;
		    lodash.slice = slice;
		    lodash.sortBy = sortBy;
		    lodash.sortedUniq = sortedUniq;
		    lodash.sortedUniqBy = sortedUniqBy;
		    lodash.split = split;
		    lodash.spread = spread;
		    lodash.tail = tail;
		    lodash.take = take;
		    lodash.takeRight = takeRight;
		    lodash.takeRightWhile = takeRightWhile;
		    lodash.takeWhile = takeWhile;
		    lodash.tap = tap;
		    lodash.throttle = throttle;
		    lodash.thru = thru;
		    lodash.toArray = toArray;
		    lodash.toPairs = toPairs;
		    lodash.toPairsIn = toPairsIn;
		    lodash.toPath = toPath;
		    lodash.toPlainObject = toPlainObject;
		    lodash.transform = transform;
		    lodash.unary = unary;
		    lodash.union = union;
		    lodash.unionBy = unionBy;
		    lodash.unionWith = unionWith;
		    lodash.uniq = uniq;
		    lodash.uniqBy = uniqBy;
		    lodash.uniqWith = uniqWith;
		    lodash.unset = unset;
		    lodash.unzip = unzip;
		    lodash.unzipWith = unzipWith;
		    lodash.update = update;
		    lodash.updateWith = updateWith;
		    lodash.values = values;
		    lodash.valuesIn = valuesIn;
		    lodash.without = without;
		    lodash.words = words;
		    lodash.wrap = wrap;
		    lodash.xor = xor;
		    lodash.xorBy = xorBy;
		    lodash.xorWith = xorWith;
		    lodash.zip = zip;
		    lodash.zipObject = zipObject;
		    lodash.zipObjectDeep = zipObjectDeep;
		    lodash.zipWith = zipWith;

		    // Add aliases.
		    lodash.entries = toPairs;
		    lodash.entriesIn = toPairsIn;
		    lodash.extend = assignIn;
		    lodash.extendWith = assignInWith;

		    // Add methods to `lodash.prototype`.
		    mixin(lodash, lodash);

		    /*------------------------------------------------------------------------*/

		    // Add methods that return unwrapped values in chain sequences.
		    lodash.add = add;
		    lodash.attempt = attempt;
		    lodash.camelCase = camelCase;
		    lodash.capitalize = capitalize;
		    lodash.ceil = ceil;
		    lodash.clamp = clamp;
		    lodash.clone = clone;
		    lodash.cloneDeep = cloneDeep;
		    lodash.cloneDeepWith = cloneDeepWith;
		    lodash.cloneWith = cloneWith;
		    lodash.conformsTo = conformsTo;
		    lodash.deburr = deburr;
		    lodash.defaultTo = defaultTo;
		    lodash.divide = divide;
		    lodash.endsWith = endsWith;
		    lodash.eq = eq;
		    lodash.escape = escape;
		    lodash.escapeRegExp = escapeRegExp;
		    lodash.every = every;
		    lodash.find = find;
		    lodash.findIndex = findIndex;
		    lodash.findKey = findKey;
		    lodash.findLast = findLast;
		    lodash.findLastIndex = findLastIndex;
		    lodash.findLastKey = findLastKey;
		    lodash.floor = floor;
		    lodash.forEach = forEach;
		    lodash.forEachRight = forEachRight;
		    lodash.forIn = forIn;
		    lodash.forInRight = forInRight;
		    lodash.forOwn = forOwn;
		    lodash.forOwnRight = forOwnRight;
		    lodash.get = get;
		    lodash.gt = gt;
		    lodash.gte = gte;
		    lodash.has = has;
		    lodash.hasIn = hasIn;
		    lodash.head = head;
		    lodash.identity = identity;
		    lodash.includes = includes;
		    lodash.indexOf = indexOf;
		    lodash.inRange = inRange;
		    lodash.invoke = invoke;
		    lodash.isArguments = isArguments;
		    lodash.isArray = isArray;
		    lodash.isArrayBuffer = isArrayBuffer;
		    lodash.isArrayLike = isArrayLike;
		    lodash.isArrayLikeObject = isArrayLikeObject;
		    lodash.isBoolean = isBoolean;
		    lodash.isBuffer = isBuffer;
		    lodash.isDate = isDate;
		    lodash.isElement = isElement;
		    lodash.isEmpty = isEmpty;
		    lodash.isEqual = isEqual;
		    lodash.isEqualWith = isEqualWith;
		    lodash.isError = isError;
		    lodash.isFinite = isFinite;
		    lodash.isFunction = isFunction;
		    lodash.isInteger = isInteger;
		    lodash.isLength = isLength;
		    lodash.isMap = isMap;
		    lodash.isMatch = isMatch;
		    lodash.isMatchWith = isMatchWith;
		    lodash.isNaN = isNaN;
		    lodash.isNative = isNative;
		    lodash.isNil = isNil;
		    lodash.isNull = isNull;
		    lodash.isNumber = isNumber;
		    lodash.isObject = isObject;
		    lodash.isObjectLike = isObjectLike;
		    lodash.isPlainObject = isPlainObject;
		    lodash.isRegExp = isRegExp;
		    lodash.isSafeInteger = isSafeInteger;
		    lodash.isSet = isSet;
		    lodash.isString = isString;
		    lodash.isSymbol = isSymbol;
		    lodash.isTypedArray = isTypedArray;
		    lodash.isUndefined = isUndefined;
		    lodash.isWeakMap = isWeakMap;
		    lodash.isWeakSet = isWeakSet;
		    lodash.join = join;
		    lodash.kebabCase = kebabCase;
		    lodash.last = last;
		    lodash.lastIndexOf = lastIndexOf;
		    lodash.lowerCase = lowerCase;
		    lodash.lowerFirst = lowerFirst;
		    lodash.lt = lt;
		    lodash.lte = lte;
		    lodash.max = max;
		    lodash.maxBy = maxBy;
		    lodash.mean = mean;
		    lodash.meanBy = meanBy;
		    lodash.min = min;
		    lodash.minBy = minBy;
		    lodash.stubArray = stubArray;
		    lodash.stubFalse = stubFalse;
		    lodash.stubObject = stubObject;
		    lodash.stubString = stubString;
		    lodash.stubTrue = stubTrue;
		    lodash.multiply = multiply;
		    lodash.nth = nth;
		    lodash.noConflict = noConflict;
		    lodash.noop = noop;
		    lodash.now = now;
		    lodash.pad = pad;
		    lodash.padEnd = padEnd;
		    lodash.padStart = padStart;
		    lodash.parseInt = parseInt;
		    lodash.random = random;
		    lodash.reduce = reduce;
		    lodash.reduceRight = reduceRight;
		    lodash.repeat = repeat;
		    lodash.replace = replace;
		    lodash.result = result;
		    lodash.round = round;
		    lodash.runInContext = runInContext;
		    lodash.sample = sample;
		    lodash.size = size;
		    lodash.snakeCase = snakeCase;
		    lodash.some = some;
		    lodash.sortedIndex = sortedIndex;
		    lodash.sortedIndexBy = sortedIndexBy;
		    lodash.sortedIndexOf = sortedIndexOf;
		    lodash.sortedLastIndex = sortedLastIndex;
		    lodash.sortedLastIndexBy = sortedLastIndexBy;
		    lodash.sortedLastIndexOf = sortedLastIndexOf;
		    lodash.startCase = startCase;
		    lodash.startsWith = startsWith;
		    lodash.subtract = subtract;
		    lodash.sum = sum;
		    lodash.sumBy = sumBy;
		    lodash.template = template;
		    lodash.times = times;
		    lodash.toFinite = toFinite;
		    lodash.toInteger = toInteger;
		    lodash.toLength = toLength;
		    lodash.toLower = toLower;
		    lodash.toNumber = toNumber;
		    lodash.toSafeInteger = toSafeInteger;
		    lodash.toString = toString;
		    lodash.toUpper = toUpper;
		    lodash.trim = trim;
		    lodash.trimEnd = trimEnd;
		    lodash.trimStart = trimStart;
		    lodash.truncate = truncate;
		    lodash.unescape = unescape;
		    lodash.uniqueId = uniqueId;
		    lodash.upperCase = upperCase;
		    lodash.upperFirst = upperFirst;

		    // Add aliases.
		    lodash.each = forEach;
		    lodash.eachRight = forEachRight;
		    lodash.first = head;

		    mixin(lodash, (function() {
		      var source = {};
		      baseForOwn(lodash, function(func, methodName) {
		        if (!hasOwnProperty.call(lodash.prototype, methodName)) {
		          source[methodName] = func;
		        }
		      });
		      return source;
		    }()), { 'chain': false });

		    /*------------------------------------------------------------------------*/

		    /**
		     * The semantic version number.
		     *
		     * @static
		     * @memberOf _
		     * @type {string}
		     */
		    lodash.VERSION = VERSION;

		    // Assign default placeholders.
		    arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {
		      lodash[methodName].placeholder = lodash;
		    });

		    // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
		    arrayEach(['drop', 'take'], function(methodName, index) {
		      LazyWrapper.prototype[methodName] = function(n) {
		        n = n === undefined$1 ? 1 : nativeMax(toInteger(n), 0);

		        var result = (this.__filtered__ && !index)
		          ? new LazyWrapper(this)
		          : this.clone();

		        if (result.__filtered__) {
		          result.__takeCount__ = nativeMin(n, result.__takeCount__);
		        } else {
		          result.__views__.push({
		            'size': nativeMin(n, MAX_ARRAY_LENGTH),
		            'type': methodName + (result.__dir__ < 0 ? 'Right' : '')
		          });
		        }
		        return result;
		      };

		      LazyWrapper.prototype[methodName + 'Right'] = function(n) {
		        return this.reverse()[methodName](n).reverse();
		      };
		    });

		    // Add `LazyWrapper` methods that accept an `iteratee` value.
		    arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {
		      var type = index + 1,
		          isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;

		      LazyWrapper.prototype[methodName] = function(iteratee) {
		        var result = this.clone();
		        result.__iteratees__.push({
		          'iteratee': getIteratee(iteratee, 3),
		          'type': type
		        });
		        result.__filtered__ = result.__filtered__ || isFilter;
		        return result;
		      };
		    });

		    // Add `LazyWrapper` methods for `_.head` and `_.last`.
		    arrayEach(['head', 'last'], function(methodName, index) {
		      var takeName = 'take' + (index ? 'Right' : '');

		      LazyWrapper.prototype[methodName] = function() {
		        return this[takeName](1).value()[0];
		      };
		    });

		    // Add `LazyWrapper` methods for `_.initial` and `_.tail`.
		    arrayEach(['initial', 'tail'], function(methodName, index) {
		      var dropName = 'drop' + (index ? '' : 'Right');

		      LazyWrapper.prototype[methodName] = function() {
		        return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
		      };
		    });

		    LazyWrapper.prototype.compact = function() {
		      return this.filter(identity);
		    };

		    LazyWrapper.prototype.find = function(predicate) {
		      return this.filter(predicate).head();
		    };

		    LazyWrapper.prototype.findLast = function(predicate) {
		      return this.reverse().find(predicate);
		    };

		    LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {
		      if (typeof path == 'function') {
		        return new LazyWrapper(this);
		      }
		      return this.map(function(value) {
		        return baseInvoke(value, path, args);
		      });
		    });

		    LazyWrapper.prototype.reject = function(predicate) {
		      return this.filter(negate(getIteratee(predicate)));
		    };

		    LazyWrapper.prototype.slice = function(start, end) {
		      start = toInteger(start);

		      var result = this;
		      if (result.__filtered__ && (start > 0 || end < 0)) {
		        return new LazyWrapper(result);
		      }
		      if (start < 0) {
		        result = result.takeRight(-start);
		      } else if (start) {
		        result = result.drop(start);
		      }
		      if (end !== undefined$1) {
		        end = toInteger(end);
		        result = end < 0 ? result.dropRight(-end) : result.take(end - start);
		      }
		      return result;
		    };

		    LazyWrapper.prototype.takeRightWhile = function(predicate) {
		      return this.reverse().takeWhile(predicate).reverse();
		    };

		    LazyWrapper.prototype.toArray = function() {
		      return this.take(MAX_ARRAY_LENGTH);
		    };

		    // Add `LazyWrapper` methods to `lodash.prototype`.
		    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
		      var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),
		          isTaker = /^(?:head|last)$/.test(methodName),
		          lodashFunc = lodash[isTaker ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName],
		          retUnwrapped = isTaker || /^find/.test(methodName);

		      if (!lodashFunc) {
		        return;
		      }
		      lodash.prototype[methodName] = function() {
		        var value = this.__wrapped__,
		            args = isTaker ? [1] : arguments,
		            isLazy = value instanceof LazyWrapper,
		            iteratee = args[0],
		            useLazy = isLazy || isArray(value);

		        var interceptor = function(value) {
		          var result = lodashFunc.apply(lodash, arrayPush([value], args));
		          return (isTaker && chainAll) ? result[0] : result;
		        };

		        if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
		          // Avoid lazy use if the iteratee has a "length" value other than `1`.
		          isLazy = useLazy = false;
		        }
		        var chainAll = this.__chain__,
		            isHybrid = !!this.__actions__.length,
		            isUnwrapped = retUnwrapped && !chainAll,
		            onlyLazy = isLazy && !isHybrid;

		        if (!retUnwrapped && useLazy) {
		          value = onlyLazy ? value : new LazyWrapper(this);
		          var result = func.apply(value, args);
		          result.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined$1 });
		          return new LodashWrapper(result, chainAll);
		        }
		        if (isUnwrapped && onlyLazy) {
		          return func.apply(this, args);
		        }
		        result = this.thru(interceptor);
		        return isUnwrapped ? (isTaker ? result.value()[0] : result.value()) : result;
		      };
		    });

		    // Add `Array` methods to `lodash.prototype`.
		    arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function(methodName) {
		      var func = arrayProto[methodName],
		          chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
		          retUnwrapped = /^(?:pop|shift)$/.test(methodName);

		      lodash.prototype[methodName] = function() {
		        var args = arguments;
		        if (retUnwrapped && !this.__chain__) {
		          var value = this.value();
		          return func.apply(isArray(value) ? value : [], args);
		        }
		        return this[chainName](function(value) {
		          return func.apply(isArray(value) ? value : [], args);
		        });
		      };
		    });

		    // Map minified method names to their real names.
		    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
		      var lodashFunc = lodash[methodName];
		      if (lodashFunc) {
		        var key = lodashFunc.name + '';
		        if (!hasOwnProperty.call(realNames, key)) {
		          realNames[key] = [];
		        }
		        realNames[key].push({ 'name': methodName, 'func': lodashFunc });
		      }
		    });

		    realNames[createHybrid(undefined$1, WRAP_BIND_KEY_FLAG).name] = [{
		      'name': 'wrapper',
		      'func': undefined$1
		    }];

		    // Add methods to `LazyWrapper`.
		    LazyWrapper.prototype.clone = lazyClone;
		    LazyWrapper.prototype.reverse = lazyReverse;
		    LazyWrapper.prototype.value = lazyValue;

		    // Add chain sequence methods to the `lodash` wrapper.
		    lodash.prototype.at = wrapperAt;
		    lodash.prototype.chain = wrapperChain;
		    lodash.prototype.commit = wrapperCommit;
		    lodash.prototype.next = wrapperNext;
		    lodash.prototype.plant = wrapperPlant;
		    lodash.prototype.reverse = wrapperReverse;
		    lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;

		    // Add lazy aliases.
		    lodash.prototype.first = lodash.prototype.head;

		    if (symIterator) {
		      lodash.prototype[symIterator] = wrapperToIterator;
		    }
		    return lodash;
		  });

		  /*--------------------------------------------------------------------------*/

		  // Export lodash.
		  var _ = runInContext();

		  // Some AMD build optimizers, like r.js, check for condition patterns like:
		  if (freeModule) {
		    // Export for Node.js.
		    (freeModule.exports = _)._ = _;
		    // Export for CommonJS support.
		    freeExports._ = _;
		  }
		  else {
		    // Export to the global object.
		    root._ = _;
		  }
		}.call(commonjsGlobal)); 
	} (lodash, lodash.exports));

	var lodashExports = lodash.exports;

	var validator$1 = {exports: {}};

	var toDate = {exports: {}};

	var assertString = {exports: {}};

	var hasRequiredAssertString;

	function requireAssertString () {
		if (hasRequiredAssertString) return assertString.exports;
		hasRequiredAssertString = 1;
		(function (module, exports) {

			Object.defineProperty(exports, "__esModule", {
			  value: true
			});
			exports.default = assertString;

			function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

			function assertString(input) {
			  var isString = typeof input === 'string' || input instanceof String;

			  if (!isString) {
			    var invalidType = _typeof(input);

			    if (input === null) invalidType = 'null';else if (invalidType === 'object') invalidType = input.constructor.name;
			    throw new TypeError("Expected a string but received a ".concat(invalidType));
			  }
			}

			module.exports = exports.default;
			module.exports.default = exports.default; 
		} (assertString, assertString.exports));
		return assertString.exports;
	}

	var hasRequiredToDate;

	function requireToDate () {
		if (hasRequiredToDate) return toDate.exports;
		hasRequiredToDate = 1;
		(function (module, exports) {

			Object.defineProperty(exports, "__esModule", {
			  value: true
			});
			exports.default = toDate;

			var _assertString = _interopRequireDefault(requireAssertString());

			function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

			function toDate(date) {
			  (0, _assertString.default)(date);
			  date = Date.parse(date);
			  return !isNaN(date) ? new Date(date) : null;
			}

			module.exports = exports.default;
			module.exports.default = exports.default; 
		} (toDate, toDate.exports));
		return toDate.exports;
	}

	var toFloat = {exports: {}};

	var isFloat = {};

	var alpha = {};

	var hasRequiredAlpha;

	function requireAlpha () {
		if (hasRequiredAlpha) return alpha;
		hasRequiredAlpha = 1;

		Object.defineProperty(alpha, "__esModule", {
		  value: true
		});
		alpha.commaDecimal = alpha.dotDecimal = alpha.bengaliLocales = alpha.farsiLocales = alpha.arabicLocales = alpha.englishLocales = alpha.decimal = alpha.alphanumeric = alpha.alpha = void 0;
		var alpha$1 = {
		  'en-US': /^[A-Z]+$/i,
		  'az-AZ': /^[A-VXYZÇƏĞİıÖŞÜ]+$/i,
		  'bg-BG': /^[А-Я]+$/i,
		  'cs-CZ': /^[A-ZÁČĎÉĚÍŇÓŘŠŤÚŮÝŽ]+$/i,
		  'da-DK': /^[A-ZÆØÅ]+$/i,
		  'de-DE': /^[A-ZÄÖÜß]+$/i,
		  'el-GR': /^[Α-ώ]+$/i,
		  'es-ES': /^[A-ZÁÉÍÑÓÚÜ]+$/i,
		  'fa-IR': /^[ابپتثجچحخدذرزژسشصضطظعغفقکگلمنوهی]+$/i,
		  'fi-FI': /^[A-ZÅÄÖ]+$/i,
		  'fr-FR': /^[A-ZÀÂÆÇÉÈÊËÏÎÔŒÙÛÜŸ]+$/i,
		  'it-IT': /^[A-ZÀÉÈÌÎÓÒÙ]+$/i,
		  'ja-JP': /^[ぁ-んァ-ヶｦ-ﾟ一-龠ー・。、]+$/i,
		  'nb-NO': /^[A-ZÆØÅ]+$/i,
		  'nl-NL': /^[A-ZÁÉËÏÓÖÜÚ]+$/i,
		  'nn-NO': /^[A-ZÆØÅ]+$/i,
		  'hu-HU': /^[A-ZÁÉÍÓÖŐÚÜŰ]+$/i,
		  'pl-PL': /^[A-ZĄĆĘŚŁŃÓŻŹ]+$/i,
		  'pt-PT': /^[A-ZÃÁÀÂÄÇÉÊËÍÏÕÓÔÖÚÜ]+$/i,
		  'ru-RU': /^[А-ЯЁ]+$/i,
		  'sl-SI': /^[A-ZČĆĐŠŽ]+$/i,
		  'sk-SK': /^[A-ZÁČĎÉÍŇÓŠŤÚÝŽĹŔĽÄÔ]+$/i,
		  'sr-RS@latin': /^[A-ZČĆŽŠĐ]+$/i,
		  'sr-RS': /^[А-ЯЂЈЉЊЋЏ]+$/i,
		  'sv-SE': /^[A-ZÅÄÖ]+$/i,
		  'th-TH': /^[ก-๐\s]+$/i,
		  'tr-TR': /^[A-ZÇĞİıÖŞÜ]+$/i,
		  'uk-UA': /^[А-ЩЬЮЯЄIЇҐі]+$/i,
		  'vi-VN': /^[A-ZÀÁẠẢÃÂẦẤẬẨẪĂẰẮẶẲẴĐÈÉẸẺẼÊỀẾỆỂỄÌÍỊỈĨÒÓỌỎÕÔỒỐỘỔỖƠỜỚỢỞỠÙÚỤỦŨƯỪỨỰỬỮỲÝỴỶỸ]+$/i,
		  'ko-KR': /^[ㄱ-ㅎㅏ-ㅣ가-힣]*$/,
		  'ku-IQ': /^[ئابپتجچحخدرڕزژسشعغفڤقکگلڵمنوۆھەیێيطؤثآإأكضصةظذ]+$/i,
		  ar: /^[ءآأؤإئابةتثجحخدذرزسشصضطظعغفقكلمنهوىيًٌٍَُِّْٰ]+$/,
		  he: /^[א-ת]+$/,
		  fa: /^['آاءأؤئبپتثجچحخدذرزژسشصضطظعغفقکگلمنوهةی']+$/i,
		  bn: /^['ঀঁংঃঅআইঈউঊঋঌএঐওঔকখগঘঙচছজঝঞটঠডঢণতথদধনপফবভমযরলশষসহ়ঽািীুূৃৄেৈোৌ্ৎৗড়ঢ়য়ৠৡৢৣৰৱ৲৳৴৵৶৷৸৹৺৻']+$/,
		  'hi-IN': /^[\u0900-\u0961]+[\u0972-\u097F]*$/i,
		  'si-LK': /^[\u0D80-\u0DFF]+$/
		};
		alpha.alpha = alpha$1;
		var alphanumeric = {
		  'en-US': /^[0-9A-Z]+$/i,
		  'az-AZ': /^[0-9A-VXYZÇƏĞİıÖŞÜ]+$/i,
		  'bg-BG': /^[0-9А-Я]+$/i,
		  'cs-CZ': /^[0-9A-ZÁČĎÉĚÍŇÓŘŠŤÚŮÝŽ]+$/i,
		  'da-DK': /^[0-9A-ZÆØÅ]+$/i,
		  'de-DE': /^[0-9A-ZÄÖÜß]+$/i,
		  'el-GR': /^[0-9Α-ω]+$/i,
		  'es-ES': /^[0-9A-ZÁÉÍÑÓÚÜ]+$/i,
		  'fi-FI': /^[0-9A-ZÅÄÖ]+$/i,
		  'fr-FR': /^[0-9A-ZÀÂÆÇÉÈÊËÏÎÔŒÙÛÜŸ]+$/i,
		  'it-IT': /^[0-9A-ZÀÉÈÌÎÓÒÙ]+$/i,
		  'ja-JP': /^[0-9０-９ぁ-んァ-ヶｦ-ﾟ一-龠ー・。、]+$/i,
		  'hu-HU': /^[0-9A-ZÁÉÍÓÖŐÚÜŰ]+$/i,
		  'nb-NO': /^[0-9A-ZÆØÅ]+$/i,
		  'nl-NL': /^[0-9A-ZÁÉËÏÓÖÜÚ]+$/i,
		  'nn-NO': /^[0-9A-ZÆØÅ]+$/i,
		  'pl-PL': /^[0-9A-ZĄĆĘŚŁŃÓŻŹ]+$/i,
		  'pt-PT': /^[0-9A-ZÃÁÀÂÄÇÉÊËÍÏÕÓÔÖÚÜ]+$/i,
		  'ru-RU': /^[0-9А-ЯЁ]+$/i,
		  'sl-SI': /^[0-9A-ZČĆĐŠŽ]+$/i,
		  'sk-SK': /^[0-9A-ZÁČĎÉÍŇÓŠŤÚÝŽĹŔĽÄÔ]+$/i,
		  'sr-RS@latin': /^[0-9A-ZČĆŽŠĐ]+$/i,
		  'sr-RS': /^[0-9А-ЯЂЈЉЊЋЏ]+$/i,
		  'sv-SE': /^[0-9A-ZÅÄÖ]+$/i,
		  'th-TH': /^[ก-๙\s]+$/i,
		  'tr-TR': /^[0-9A-ZÇĞİıÖŞÜ]+$/i,
		  'uk-UA': /^[0-9А-ЩЬЮЯЄIЇҐі]+$/i,
		  'ko-KR': /^[0-9ㄱ-ㅎㅏ-ㅣ가-힣]*$/,
		  'ku-IQ': /^[٠١٢٣٤٥٦٧٨٩0-9ئابپتجچحخدرڕزژسشعغفڤقکگلڵمنوۆھەیێيطؤثآإأكضصةظذ]+$/i,
		  'vi-VN': /^[0-9A-ZÀÁẠẢÃÂẦẤẬẨẪĂẰẮẶẲẴĐÈÉẸẺẼÊỀẾỆỂỄÌÍỊỈĨÒÓỌỎÕÔỒỐỘỔỖƠỜỚỢỞỠÙÚỤỦŨƯỪỨỰỬỮỲÝỴỶỸ]+$/i,
		  ar: /^[٠١٢٣٤٥٦٧٨٩0-9ءآأؤإئابةتثجحخدذرزسشصضطظعغفقكلمنهوىيًٌٍَُِّْٰ]+$/,
		  he: /^[0-9א-ת]+$/,
		  fa: /^['0-9آاءأؤئبپتثجچحخدذرزژسشصضطظعغفقکگلمنوهةی۱۲۳۴۵۶۷۸۹۰']+$/i,
		  bn: /^['ঀঁংঃঅআইঈউঊঋঌএঐওঔকখগঘঙচছজঝঞটঠডঢণতথদধনপফবভমযরলশষসহ়ঽািীুূৃৄেৈোৌ্ৎৗড়ঢ়য়ৠৡৢৣ০১২৩৪৫৬৭৮৯ৰৱ৲৳৴৵৶৷৸৹৺৻']+$/,
		  'hi-IN': /^[\u0900-\u0963]+[\u0966-\u097F]*$/i,
		  'si-LK': /^[0-9\u0D80-\u0DFF]+$/
		};
		alpha.alphanumeric = alphanumeric;
		var decimal = {
		  'en-US': '.',
		  ar: '٫'
		};
		alpha.decimal = decimal;
		var englishLocales = ['AU', 'GB', 'HK', 'IN', 'NZ', 'ZA', 'ZM'];
		alpha.englishLocales = englishLocales;

		for (var locale, i = 0; i < englishLocales.length; i++) {
		  locale = "en-".concat(englishLocales[i]);
		  alpha$1[locale] = alpha$1['en-US'];
		  alphanumeric[locale] = alphanumeric['en-US'];
		  decimal[locale] = decimal['en-US'];
		} // Source: http://www.localeplanet.com/java/


		var arabicLocales = ['AE', 'BH', 'DZ', 'EG', 'IQ', 'JO', 'KW', 'LB', 'LY', 'MA', 'QM', 'QA', 'SA', 'SD', 'SY', 'TN', 'YE'];
		alpha.arabicLocales = arabicLocales;

		for (var _locale, _i = 0; _i < arabicLocales.length; _i++) {
		  _locale = "ar-".concat(arabicLocales[_i]);
		  alpha$1[_locale] = alpha$1.ar;
		  alphanumeric[_locale] = alphanumeric.ar;
		  decimal[_locale] = decimal.ar;
		}

		var farsiLocales = ['IR', 'AF'];
		alpha.farsiLocales = farsiLocales;

		for (var _locale2, _i2 = 0; _i2 < farsiLocales.length; _i2++) {
		  _locale2 = "fa-".concat(farsiLocales[_i2]);
		  alphanumeric[_locale2] = alphanumeric.fa;
		  decimal[_locale2] = decimal.ar;
		}

		var bengaliLocales = ['BD', 'IN'];
		alpha.bengaliLocales = bengaliLocales;

		for (var _locale3, _i3 = 0; _i3 < bengaliLocales.length; _i3++) {
		  _locale3 = "bn-".concat(bengaliLocales[_i3]);
		  alpha$1[_locale3] = alpha$1.bn;
		  alphanumeric[_locale3] = alphanumeric.bn;
		  decimal[_locale3] = decimal['en-US'];
		} // Source: https://en.wikipedia.org/wiki/Decimal_mark


		var dotDecimal = ['ar-EG', 'ar-LB', 'ar-LY'];
		alpha.dotDecimal = dotDecimal;
		var commaDecimal = ['bg-BG', 'cs-CZ', 'da-DK', 'de-DE', 'el-GR', 'en-ZM', 'es-ES', 'fr-CA', 'fr-FR', 'id-ID', 'it-IT', 'ku-IQ', 'hi-IN', 'hu-HU', 'nb-NO', 'nn-NO', 'nl-NL', 'pl-PL', 'pt-PT', 'ru-RU', 'si-LK', 'sl-SI', 'sr-RS@latin', 'sr-RS', 'sv-SE', 'tr-TR', 'uk-UA', 'vi-VN'];
		alpha.commaDecimal = commaDecimal;

		for (var _i4 = 0; _i4 < dotDecimal.length; _i4++) {
		  decimal[dotDecimal[_i4]] = decimal['en-US'];
		}

		for (var _i5 = 0; _i5 < commaDecimal.length; _i5++) {
		  decimal[commaDecimal[_i5]] = ',';
		}

		alpha$1['fr-CA'] = alpha$1['fr-FR'];
		alphanumeric['fr-CA'] = alphanumeric['fr-FR'];
		alpha$1['pt-BR'] = alpha$1['pt-PT'];
		alphanumeric['pt-BR'] = alphanumeric['pt-PT'];
		decimal['pt-BR'] = decimal['pt-PT']; // see #862

		alpha$1['pl-Pl'] = alpha$1['pl-PL'];
		alphanumeric['pl-Pl'] = alphanumeric['pl-PL'];
		decimal['pl-Pl'] = decimal['pl-PL']; // see #1455

		alpha$1['fa-AF'] = alpha$1.fa;
		return alpha;
	}

	var hasRequiredIsFloat;

	function requireIsFloat () {
		if (hasRequiredIsFloat) return isFloat;
		hasRequiredIsFloat = 1;

		Object.defineProperty(isFloat, "__esModule", {
		  value: true
		});
		isFloat.default = isFloat$1;
		isFloat.locales = void 0;

		var _assertString = _interopRequireDefault(requireAssertString());

		var _alpha = requireAlpha();

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		function isFloat$1(str, options) {
		  (0, _assertString.default)(str);
		  options = options || {};
		  var float = new RegExp("^(?:[-+])?(?:[0-9]+)?(?:\\".concat(options.locale ? _alpha.decimal[options.locale] : '.', "[0-9]*)?(?:[eE][\\+\\-]?(?:[0-9]+))?$"));

		  if (str === '' || str === '.' || str === ',' || str === '-' || str === '+') {
		    return false;
		  }

		  var value = parseFloat(str.replace(',', '.'));
		  return float.test(str) && (!options.hasOwnProperty('min') || value >= options.min) && (!options.hasOwnProperty('max') || value <= options.max) && (!options.hasOwnProperty('lt') || value < options.lt) && (!options.hasOwnProperty('gt') || value > options.gt);
		}

		var locales = Object.keys(_alpha.decimal);
		isFloat.locales = locales;
		return isFloat;
	}

	var hasRequiredToFloat;

	function requireToFloat () {
		if (hasRequiredToFloat) return toFloat.exports;
		hasRequiredToFloat = 1;
		(function (module, exports) {

			Object.defineProperty(exports, "__esModule", {
			  value: true
			});
			exports.default = toFloat;

			var _isFloat = _interopRequireDefault(requireIsFloat());

			function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

			function toFloat(str) {
			  if (!(0, _isFloat.default)(str)) return NaN;
			  return parseFloat(str);
			}

			module.exports = exports.default;
			module.exports.default = exports.default; 
		} (toFloat, toFloat.exports));
		return toFloat.exports;
	}

	var toInt = {exports: {}};

	var hasRequiredToInt;

	function requireToInt () {
		if (hasRequiredToInt) return toInt.exports;
		hasRequiredToInt = 1;
		(function (module, exports) {

			Object.defineProperty(exports, "__esModule", {
			  value: true
			});
			exports.default = toInt;

			var _assertString = _interopRequireDefault(requireAssertString());

			function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

			function toInt(str, radix) {
			  (0, _assertString.default)(str);
			  return parseInt(str, radix || 10);
			}

			module.exports = exports.default;
			module.exports.default = exports.default; 
		} (toInt, toInt.exports));
		return toInt.exports;
	}

	var toBoolean = {exports: {}};

	var hasRequiredToBoolean;

	function requireToBoolean () {
		if (hasRequiredToBoolean) return toBoolean.exports;
		hasRequiredToBoolean = 1;
		(function (module, exports) {

			Object.defineProperty(exports, "__esModule", {
			  value: true
			});
			exports.default = toBoolean;

			var _assertString = _interopRequireDefault(requireAssertString());

			function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

			function toBoolean(str, strict) {
			  (0, _assertString.default)(str);

			  if (strict) {
			    return str === '1' || /^true$/i.test(str);
			  }

			  return str !== '0' && !/^false$/i.test(str) && str !== '';
			}

			module.exports = exports.default;
			module.exports.default = exports.default; 
		} (toBoolean, toBoolean.exports));
		return toBoolean.exports;
	}

	var equals = {exports: {}};

	var hasRequiredEquals;

	function requireEquals () {
		if (hasRequiredEquals) return equals.exports;
		hasRequiredEquals = 1;
		(function (module, exports) {

			Object.defineProperty(exports, "__esModule", {
			  value: true
			});
			exports.default = equals;

			var _assertString = _interopRequireDefault(requireAssertString());

			function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

			function equals(str, comparison) {
			  (0, _assertString.default)(str);
			  return str === comparison;
			}

			module.exports = exports.default;
			module.exports.default = exports.default; 
		} (equals, equals.exports));
		return equals.exports;
	}

	var contains$2 = {exports: {}};

	var toString$3 = {exports: {}};

	var hasRequiredToString;

	function requireToString () {
		if (hasRequiredToString) return toString$3.exports;
		hasRequiredToString = 1;
		(function (module, exports) {

			Object.defineProperty(exports, "__esModule", {
			  value: true
			});
			exports.default = toString;

			function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

			function toString(input) {
			  if (_typeof(input) === 'object' && input !== null) {
			    if (typeof input.toString === 'function') {
			      input = input.toString();
			    } else {
			      input = '[object Object]';
			    }
			  } else if (input === null || typeof input === 'undefined' || isNaN(input) && !input.length) {
			    input = '';
			  }

			  return String(input);
			}

			module.exports = exports.default;
			module.exports.default = exports.default; 
		} (toString$3, toString$3.exports));
		return toString$3.exports;
	}

	var merge$1 = {exports: {}};

	var hasRequiredMerge$1;

	function requireMerge$1 () {
		if (hasRequiredMerge$1) return merge$1.exports;
		hasRequiredMerge$1 = 1;
		(function (module, exports) {

			Object.defineProperty(exports, "__esModule", {
			  value: true
			});
			exports.default = merge;

			function merge() {
			  var obj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
			  var defaults = arguments.length > 1 ? arguments[1] : undefined;

			  for (var key in defaults) {
			    if (typeof obj[key] === 'undefined') {
			      obj[key] = defaults[key];
			    }
			  }

			  return obj;
			}

			module.exports = exports.default;
			module.exports.default = exports.default; 
		} (merge$1, merge$1.exports));
		return merge$1.exports;
	}

	var hasRequiredContains;

	function requireContains () {
		if (hasRequiredContains) return contains$2.exports;
		hasRequiredContains = 1;
		(function (module, exports) {

			Object.defineProperty(exports, "__esModule", {
			  value: true
			});
			exports.default = contains;

			var _assertString = _interopRequireDefault(requireAssertString());

			var _toString = _interopRequireDefault(requireToString());

			var _merge = _interopRequireDefault(requireMerge$1());

			function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

			var defaulContainsOptions = {
			  ignoreCase: false,
			  minOccurrences: 1
			};

			function contains(str, elem, options) {
			  (0, _assertString.default)(str);
			  options = (0, _merge.default)(options, defaulContainsOptions);

			  if (options.ignoreCase) {
			    return str.toLowerCase().split((0, _toString.default)(elem).toLowerCase()).length > options.minOccurrences;
			  }

			  return str.split((0, _toString.default)(elem)).length > options.minOccurrences;
			}

			module.exports = exports.default;
			module.exports.default = exports.default; 
		} (contains$2, contains$2.exports));
		return contains$2.exports;
	}

	var matches = {exports: {}};

	var hasRequiredMatches;

	function requireMatches () {
		if (hasRequiredMatches) return matches.exports;
		hasRequiredMatches = 1;
		(function (module, exports) {

			Object.defineProperty(exports, "__esModule", {
			  value: true
			});
			exports.default = matches;

			var _assertString = _interopRequireDefault(requireAssertString());

			function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

			function matches(str, pattern, modifiers) {
			  (0, _assertString.default)(str);

			  if (Object.prototype.toString.call(pattern) !== '[object RegExp]') {
			    pattern = new RegExp(pattern, modifiers);
			  }

			  return !!str.match(pattern);
			}

			module.exports = exports.default;
			module.exports.default = exports.default; 
		} (matches, matches.exports));
		return matches.exports;
	}

	var isEmail = {exports: {}};

	var isByteLength = {exports: {}};

	var hasRequiredIsByteLength;

	function requireIsByteLength () {
		if (hasRequiredIsByteLength) return isByteLength.exports;
		hasRequiredIsByteLength = 1;
		(function (module, exports) {

			Object.defineProperty(exports, "__esModule", {
			  value: true
			});
			exports.default = isByteLength;

			var _assertString = _interopRequireDefault(requireAssertString());

			function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

			function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

			/* eslint-disable prefer-rest-params */
			function isByteLength(str, options) {
			  (0, _assertString.default)(str);
			  var min;
			  var max;

			  if (_typeof(options) === 'object') {
			    min = options.min || 0;
			    max = options.max;
			  } else {
			    // backwards compatibility: isByteLength(str, min [, max])
			    min = arguments[1];
			    max = arguments[2];
			  }

			  var len = encodeURI(str).split(/%..|./).length - 1;
			  return len >= min && (typeof max === 'undefined' || len <= max);
			}

			module.exports = exports.default;
			module.exports.default = exports.default; 
		} (isByteLength, isByteLength.exports));
		return isByteLength.exports;
	}

	var isFQDN = {exports: {}};

	var hasRequiredIsFQDN;

	function requireIsFQDN () {
		if (hasRequiredIsFQDN) return isFQDN.exports;
		hasRequiredIsFQDN = 1;
		(function (module, exports) {

			Object.defineProperty(exports, "__esModule", {
			  value: true
			});
			exports.default = isFQDN;

			var _assertString = _interopRequireDefault(requireAssertString());

			var _merge = _interopRequireDefault(requireMerge$1());

			function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

			var default_fqdn_options = {
			  require_tld: true,
			  allow_underscores: false,
			  allow_trailing_dot: false,
			  allow_numeric_tld: false,
			  allow_wildcard: false,
			  ignore_max_length: false
			};

			function isFQDN(str, options) {
			  (0, _assertString.default)(str);
			  options = (0, _merge.default)(options, default_fqdn_options);
			  /* Remove the optional trailing dot before checking validity */

			  if (options.allow_trailing_dot && str[str.length - 1] === '.') {
			    str = str.substring(0, str.length - 1);
			  }
			  /* Remove the optional wildcard before checking validity */


			  if (options.allow_wildcard === true && str.indexOf('*.') === 0) {
			    str = str.substring(2);
			  }

			  var parts = str.split('.');
			  var tld = parts[parts.length - 1];

			  if (options.require_tld) {
			    // disallow fqdns without tld
			    if (parts.length < 2) {
			      return false;
			    }

			    if (!options.allow_numeric_tld && !/^([a-z\u00A1-\u00A8\u00AA-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]{2,}|xn[a-z0-9-]{2,})$/i.test(tld)) {
			      return false;
			    } // disallow spaces


			    if (/\s/.test(tld)) {
			      return false;
			    }
			  } // reject numeric TLDs


			  if (!options.allow_numeric_tld && /^\d+$/.test(tld)) {
			    return false;
			  }

			  return parts.every(function (part) {
			    if (part.length > 63 && !options.ignore_max_length) {
			      return false;
			    }

			    if (!/^[a-z_\u00a1-\uffff0-9-]+$/i.test(part)) {
			      return false;
			    } // disallow full-width chars


			    if (/[\uff01-\uff5e]/.test(part)) {
			      return false;
			    } // disallow parts starting or ending with hyphen


			    if (/^-|-$/.test(part)) {
			      return false;
			    }

			    if (!options.allow_underscores && /_/.test(part)) {
			      return false;
			    }

			    return true;
			  });
			}

			module.exports = exports.default;
			module.exports.default = exports.default; 
		} (isFQDN, isFQDN.exports));
		return isFQDN.exports;
	}

	var isIP = {exports: {}};

	var hasRequiredIsIP;

	function requireIsIP () {
		if (hasRequiredIsIP) return isIP.exports;
		hasRequiredIsIP = 1;
		(function (module, exports) {

			Object.defineProperty(exports, "__esModule", {
			  value: true
			});
			exports.default = isIP;

			var _assertString = _interopRequireDefault(requireAssertString());

			function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

			/**
			11.3.  Examples

			   The following addresses

			             fe80::1234 (on the 1st link of the node)
			             ff02::5678 (on the 5th link of the node)
			             ff08::9abc (on the 10th organization of the node)

			   would be represented as follows:

			             fe80::1234%1
			             ff02::5678%5
			             ff08::9abc%10

			   (Here we assume a natural translation from a zone index to the
			   <zone_id> part, where the Nth zone of any scope is translated into
			   "N".)

			   If we use interface names as <zone_id>, those addresses could also be
			   represented as follows:

			            fe80::1234%ne0
			            ff02::5678%pvc1.3
			            ff08::9abc%interface10

			   where the interface "ne0" belongs to the 1st link, "pvc1.3" belongs
			   to the 5th link, and "interface10" belongs to the 10th organization.
			 * * */
			var IPv4SegmentFormat = '(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])';
			var IPv4AddressFormat = "(".concat(IPv4SegmentFormat, "[.]){3}").concat(IPv4SegmentFormat);
			var IPv4AddressRegExp = new RegExp("^".concat(IPv4AddressFormat, "$"));
			var IPv6SegmentFormat = '(?:[0-9a-fA-F]{1,4})';
			var IPv6AddressRegExp = new RegExp('^(' + "(?:".concat(IPv6SegmentFormat, ":){7}(?:").concat(IPv6SegmentFormat, "|:)|") + "(?:".concat(IPv6SegmentFormat, ":){6}(?:").concat(IPv4AddressFormat, "|:").concat(IPv6SegmentFormat, "|:)|") + "(?:".concat(IPv6SegmentFormat, ":){5}(?::").concat(IPv4AddressFormat, "|(:").concat(IPv6SegmentFormat, "){1,2}|:)|") + "(?:".concat(IPv6SegmentFormat, ":){4}(?:(:").concat(IPv6SegmentFormat, "){0,1}:").concat(IPv4AddressFormat, "|(:").concat(IPv6SegmentFormat, "){1,3}|:)|") + "(?:".concat(IPv6SegmentFormat, ":){3}(?:(:").concat(IPv6SegmentFormat, "){0,2}:").concat(IPv4AddressFormat, "|(:").concat(IPv6SegmentFormat, "){1,4}|:)|") + "(?:".concat(IPv6SegmentFormat, ":){2}(?:(:").concat(IPv6SegmentFormat, "){0,3}:").concat(IPv4AddressFormat, "|(:").concat(IPv6SegmentFormat, "){1,5}|:)|") + "(?:".concat(IPv6SegmentFormat, ":){1}(?:(:").concat(IPv6SegmentFormat, "){0,4}:").concat(IPv4AddressFormat, "|(:").concat(IPv6SegmentFormat, "){1,6}|:)|") + "(?::((?::".concat(IPv6SegmentFormat, "){0,5}:").concat(IPv4AddressFormat, "|(?::").concat(IPv6SegmentFormat, "){1,7}|:))") + ')(%[0-9a-zA-Z-.:]{1,})?$');

			function isIP(str) {
			  var version = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
			  (0, _assertString.default)(str);
			  version = String(version);

			  if (!version) {
			    return isIP(str, 4) || isIP(str, 6);
			  }

			  if (version === '4') {
			    return IPv4AddressRegExp.test(str);
			  }

			  if (version === '6') {
			    return IPv6AddressRegExp.test(str);
			  }

			  return false;
			}

			module.exports = exports.default;
			module.exports.default = exports.default; 
		} (isIP, isIP.exports));
		return isIP.exports;
	}

	var hasRequiredIsEmail;

	function requireIsEmail () {
		if (hasRequiredIsEmail) return isEmail.exports;
		hasRequiredIsEmail = 1;
		(function (module, exports) {

			Object.defineProperty(exports, "__esModule", {
			  value: true
			});
			exports.default = isEmail;

			var _assertString = _interopRequireDefault(requireAssertString());

			var _merge = _interopRequireDefault(requireMerge$1());

			var _isByteLength = _interopRequireDefault(requireIsByteLength());

			var _isFQDN = _interopRequireDefault(requireIsFQDN());

			var _isIP = _interopRequireDefault(requireIsIP());

			function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

			var default_email_options = {
			  allow_display_name: false,
			  require_display_name: false,
			  allow_utf8_local_part: true,
			  require_tld: true,
			  blacklisted_chars: '',
			  ignore_max_length: false,
			  host_blacklist: [],
			  host_whitelist: []
			};
			/* eslint-disable max-len */

			/* eslint-disable no-control-regex */

			var splitNameAddress = /^([^\x00-\x1F\x7F-\x9F\cX]+)</i;
			var emailUserPart = /^[a-z\d!#\$%&'\*\+\-\/=\?\^_`{\|}~]+$/i;
			var gmailUserPart = /^[a-z\d]+$/;
			var quotedEmailUser = /^([\s\x01-\x08\x0b\x0c\x0e-\x1f\x7f\x21\x23-\x5b\x5d-\x7e]|(\\[\x01-\x09\x0b\x0c\x0d-\x7f]))*$/i;
			var emailUserUtf8Part = /^[a-z\d!#\$%&'\*\+\-\/=\?\^_`{\|}~\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+$/i;
			var quotedEmailUserUtf8 = /^([\s\x01-\x08\x0b\x0c\x0e-\x1f\x7f\x21\x23-\x5b\x5d-\x7e\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]|(\\[\x01-\x09\x0b\x0c\x0d-\x7f\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))*$/i;
			var defaultMaxEmailLength = 254;
			/* eslint-enable max-len */

			/* eslint-enable no-control-regex */

			/**
			 * Validate display name according to the RFC2822: https://tools.ietf.org/html/rfc2822#appendix-A.1.2
			 * @param {String} display_name
			 */

			function validateDisplayName(display_name) {
			  var display_name_without_quotes = display_name.replace(/^"(.+)"$/, '$1'); // display name with only spaces is not valid

			  if (!display_name_without_quotes.trim()) {
			    return false;
			  } // check whether display name contains illegal character


			  var contains_illegal = /[\.";<>]/.test(display_name_without_quotes);

			  if (contains_illegal) {
			    // if contains illegal characters,
			    // must to be enclosed in double-quotes, otherwise it's not a valid display name
			    if (display_name_without_quotes === display_name) {
			      return false;
			    } // the quotes in display name must start with character symbol \


			    var all_start_with_back_slash = display_name_without_quotes.split('"').length === display_name_without_quotes.split('\\"').length;

			    if (!all_start_with_back_slash) {
			      return false;
			    }
			  }

			  return true;
			}

			function isEmail(str, options) {
			  (0, _assertString.default)(str);
			  options = (0, _merge.default)(options, default_email_options);

			  if (options.require_display_name || options.allow_display_name) {
			    var display_email = str.match(splitNameAddress);

			    if (display_email) {
			      var display_name = display_email[1]; // Remove display name and angle brackets to get email address
			      // Can be done in the regex but will introduce a ReDOS (See  #1597 for more info)

			      str = str.replace(display_name, '').replace(/(^<|>$)/g, ''); // sometimes need to trim the last space to get the display name
			      // because there may be a space between display name and email address
			      // eg. myname <address@gmail.com>
			      // the display name is `myname` instead of `myname `, so need to trim the last space

			      if (display_name.endsWith(' ')) {
			        display_name = display_name.slice(0, -1);
			      }

			      if (!validateDisplayName(display_name)) {
			        return false;
			      }
			    } else if (options.require_display_name) {
			      return false;
			    }
			  }

			  if (!options.ignore_max_length && str.length > defaultMaxEmailLength) {
			    return false;
			  }

			  var parts = str.split('@');
			  var domain = parts.pop();
			  var lower_domain = domain.toLowerCase();

			  if (options.host_blacklist.includes(lower_domain)) {
			    return false;
			  }

			  if (options.host_whitelist.length > 0 && !options.host_whitelist.includes(lower_domain)) {
			    return false;
			  }

			  var user = parts.join('@');

			  if (options.domain_specific_validation && (lower_domain === 'gmail.com' || lower_domain === 'googlemail.com')) {
			    /*
			      Previously we removed dots for gmail addresses before validating.
			      This was removed because it allows `multiple..dots@gmail.com`
			      to be reported as valid, but it is not.
			      Gmail only normalizes single dots, removing them from here is pointless,
			      should be done in normalizeEmail
			    */
			    user = user.toLowerCase(); // Removing sub-address from username before gmail validation

			    var username = user.split('+')[0]; // Dots are not included in gmail length restriction

			    if (!(0, _isByteLength.default)(username.replace(/\./g, ''), {
			      min: 6,
			      max: 30
			    })) {
			      return false;
			    }

			    var _user_parts = username.split('.');

			    for (var i = 0; i < _user_parts.length; i++) {
			      if (!gmailUserPart.test(_user_parts[i])) {
			        return false;
			      }
			    }
			  }

			  if (options.ignore_max_length === false && (!(0, _isByteLength.default)(user, {
			    max: 64
			  }) || !(0, _isByteLength.default)(domain, {
			    max: 254
			  }))) {
			    return false;
			  }

			  if (!(0, _isFQDN.default)(domain, {
			    require_tld: options.require_tld,
			    ignore_max_length: options.ignore_max_length
			  })) {
			    if (!options.allow_ip_domain) {
			      return false;
			    }

			    if (!(0, _isIP.default)(domain)) {
			      if (!domain.startsWith('[') || !domain.endsWith(']')) {
			        return false;
			      }

			      var noBracketdomain = domain.slice(1, -1);

			      if (noBracketdomain.length === 0 || !(0, _isIP.default)(noBracketdomain)) {
			        return false;
			      }
			    }
			  }

			  if (user[0] === '"') {
			    user = user.slice(1, user.length - 1);
			    return options.allow_utf8_local_part ? quotedEmailUserUtf8.test(user) : quotedEmailUser.test(user);
			  }

			  var pattern = options.allow_utf8_local_part ? emailUserUtf8Part : emailUserPart;
			  var user_parts = user.split('.');

			  for (var _i = 0; _i < user_parts.length; _i++) {
			    if (!pattern.test(user_parts[_i])) {
			      return false;
			    }
			  }

			  if (options.blacklisted_chars) {
			    if (user.search(new RegExp("[".concat(options.blacklisted_chars, "]+"), 'g')) !== -1) return false;
			  }

			  return true;
			}

			module.exports = exports.default;
			module.exports.default = exports.default; 
		} (isEmail, isEmail.exports));
		return isEmail.exports;
	}

	var isURL = {exports: {}};

	var hasRequiredIsURL;

	function requireIsURL () {
		if (hasRequiredIsURL) return isURL.exports;
		hasRequiredIsURL = 1;
		(function (module, exports) {

			Object.defineProperty(exports, "__esModule", {
			  value: true
			});
			exports.default = isURL;

			var _assertString = _interopRequireDefault(requireAssertString());

			var _isFQDN = _interopRequireDefault(requireIsFQDN());

			var _isIP = _interopRequireDefault(requireIsIP());

			var _merge = _interopRequireDefault(requireMerge$1());

			function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

			function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

			function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

			function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

			function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

			function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

			function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

			/*
			options for isURL method

			require_protocol - if set as true isURL will return false if protocol is not present in the URL
			require_valid_protocol - isURL will check if the URL's protocol is present in the protocols option
			protocols - valid protocols can be modified with this option
			require_host - if set as false isURL will not check if host is present in the URL
			require_port - if set as true isURL will check if port is present in the URL
			allow_protocol_relative_urls - if set as true protocol relative URLs will be allowed
			validate_length - if set as false isURL will skip string length validation (IE maximum is 2083)

			*/
			var default_url_options = {
			  protocols: ['http', 'https', 'ftp'],
			  require_tld: true,
			  require_protocol: false,
			  require_host: true,
			  require_port: false,
			  require_valid_protocol: true,
			  allow_underscores: false,
			  allow_trailing_dot: false,
			  allow_protocol_relative_urls: false,
			  allow_fragments: true,
			  allow_query_components: true,
			  validate_length: true
			};
			var wrapped_ipv6 = /^\[([^\]]+)\](?::([0-9]+))?$/;

			function isRegExp(obj) {
			  return Object.prototype.toString.call(obj) === '[object RegExp]';
			}

			function checkHost(host, matches) {
			  for (var i = 0; i < matches.length; i++) {
			    var match = matches[i];

			    if (host === match || isRegExp(match) && match.test(host)) {
			      return true;
			    }
			  }

			  return false;
			}

			function isURL(url, options) {
			  (0, _assertString.default)(url);

			  if (!url || /[\s<>]/.test(url)) {
			    return false;
			  }

			  if (url.indexOf('mailto:') === 0) {
			    return false;
			  }

			  options = (0, _merge.default)(options, default_url_options);

			  if (options.validate_length && url.length >= 2083) {
			    return false;
			  }

			  if (!options.allow_fragments && url.includes('#')) {
			    return false;
			  }

			  if (!options.allow_query_components && (url.includes('?') || url.includes('&'))) {
			    return false;
			  }

			  var protocol, auth, host, hostname, port, port_str, split, ipv6;
			  split = url.split('#');
			  url = split.shift();
			  split = url.split('?');
			  url = split.shift();
			  split = url.split('://');

			  if (split.length > 1) {
			    protocol = split.shift().toLowerCase();

			    if (options.require_valid_protocol && options.protocols.indexOf(protocol) === -1) {
			      return false;
			    }
			  } else if (options.require_protocol) {
			    return false;
			  } else if (url.slice(0, 2) === '//') {
			    if (!options.allow_protocol_relative_urls) {
			      return false;
			    }

			    split[0] = url.slice(2);
			  }

			  url = split.join('://');

			  if (url === '') {
			    return false;
			  }

			  split = url.split('/');
			  url = split.shift();

			  if (url === '' && !options.require_host) {
			    return true;
			  }

			  split = url.split('@');

			  if (split.length > 1) {
			    if (options.disallow_auth) {
			      return false;
			    }

			    if (split[0] === '') {
			      return false;
			    }

			    auth = split.shift();

			    if (auth.indexOf(':') >= 0 && auth.split(':').length > 2) {
			      return false;
			    }

			    var _auth$split = auth.split(':'),
			        _auth$split2 = _slicedToArray(_auth$split, 2),
			        user = _auth$split2[0],
			        password = _auth$split2[1];

			    if (user === '' && password === '') {
			      return false;
			    }
			  }

			  hostname = split.join('@');
			  port_str = null;
			  ipv6 = null;
			  var ipv6_match = hostname.match(wrapped_ipv6);

			  if (ipv6_match) {
			    host = '';
			    ipv6 = ipv6_match[1];
			    port_str = ipv6_match[2] || null;
			  } else {
			    split = hostname.split(':');
			    host = split.shift();

			    if (split.length) {
			      port_str = split.join(':');
			    }
			  }

			  if (port_str !== null && port_str.length > 0) {
			    port = parseInt(port_str, 10);

			    if (!/^[0-9]+$/.test(port_str) || port <= 0 || port > 65535) {
			      return false;
			    }
			  } else if (options.require_port) {
			    return false;
			  }

			  if (options.host_whitelist) {
			    return checkHost(host, options.host_whitelist);
			  }

			  if (host === '' && !options.require_host) {
			    return true;
			  }

			  if (!(0, _isIP.default)(host) && !(0, _isFQDN.default)(host, options) && (!ipv6 || !(0, _isIP.default)(ipv6, 6))) {
			    return false;
			  }

			  host = host || ipv6;

			  if (options.host_blacklist && checkHost(host, options.host_blacklist)) {
			    return false;
			  }

			  return true;
			}

			module.exports = exports.default;
			module.exports.default = exports.default; 
		} (isURL, isURL.exports));
		return isURL.exports;
	}

	var isMACAddress = {exports: {}};

	var hasRequiredIsMACAddress;

	function requireIsMACAddress () {
		if (hasRequiredIsMACAddress) return isMACAddress.exports;
		hasRequiredIsMACAddress = 1;
		(function (module, exports) {

			Object.defineProperty(exports, "__esModule", {
			  value: true
			});
			exports.default = isMACAddress;

			var _assertString = _interopRequireDefault(requireAssertString());

			function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

			var macAddress48 = /^(?:[0-9a-fA-F]{2}([-:\s]))([0-9a-fA-F]{2}\1){4}([0-9a-fA-F]{2})$/;
			var macAddress48NoSeparators = /^([0-9a-fA-F]){12}$/;
			var macAddress48WithDots = /^([0-9a-fA-F]{4}\.){2}([0-9a-fA-F]{4})$/;
			var macAddress64 = /^(?:[0-9a-fA-F]{2}([-:\s]))([0-9a-fA-F]{2}\1){6}([0-9a-fA-F]{2})$/;
			var macAddress64NoSeparators = /^([0-9a-fA-F]){16}$/;
			var macAddress64WithDots = /^([0-9a-fA-F]{4}\.){3}([0-9a-fA-F]{4})$/;

			function isMACAddress(str, options) {
			  (0, _assertString.default)(str);

			  if (options !== null && options !== void 0 && options.eui) {
			    options.eui = String(options.eui);
			  }
			  /**
			   * @deprecated `no_colons` TODO: remove it in the next major
			  */


			  if (options !== null && options !== void 0 && options.no_colons || options !== null && options !== void 0 && options.no_separators) {
			    if (options.eui === '48') {
			      return macAddress48NoSeparators.test(str);
			    }

			    if (options.eui === '64') {
			      return macAddress64NoSeparators.test(str);
			    }

			    return macAddress48NoSeparators.test(str) || macAddress64NoSeparators.test(str);
			  }

			  if ((options === null || options === void 0 ? void 0 : options.eui) === '48') {
			    return macAddress48.test(str) || macAddress48WithDots.test(str);
			  }

			  if ((options === null || options === void 0 ? void 0 : options.eui) === '64') {
			    return macAddress64.test(str) || macAddress64WithDots.test(str);
			  }

			  return isMACAddress(str, {
			    eui: '48'
			  }) || isMACAddress(str, {
			    eui: '64'
			  });
			}

			module.exports = exports.default;
			module.exports.default = exports.default; 
		} (isMACAddress, isMACAddress.exports));
		return isMACAddress.exports;
	}

	var isIPRange = {exports: {}};

	var hasRequiredIsIPRange;

	function requireIsIPRange () {
		if (hasRequiredIsIPRange) return isIPRange.exports;
		hasRequiredIsIPRange = 1;
		(function (module, exports) {

			Object.defineProperty(exports, "__esModule", {
			  value: true
			});
			exports.default = isIPRange;

			var _assertString = _interopRequireDefault(requireAssertString());

			var _isIP = _interopRequireDefault(requireIsIP());

			function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

			var subnetMaybe = /^\d{1,3}$/;
			var v4Subnet = 32;
			var v6Subnet = 128;

			function isIPRange(str) {
			  var version = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
			  (0, _assertString.default)(str);
			  var parts = str.split('/'); // parts[0] -> ip, parts[1] -> subnet

			  if (parts.length !== 2) {
			    return false;
			  }

			  if (!subnetMaybe.test(parts[1])) {
			    return false;
			  } // Disallow preceding 0 i.e. 01, 02, ...


			  if (parts[1].length > 1 && parts[1].startsWith('0')) {
			    return false;
			  }

			  var isValidIP = (0, _isIP.default)(parts[0], version);

			  if (!isValidIP) {
			    return false;
			  } // Define valid subnet according to IP's version


			  var expectedSubnet = null;

			  switch (String(version)) {
			    case '4':
			      expectedSubnet = v4Subnet;
			      break;

			    case '6':
			      expectedSubnet = v6Subnet;
			      break;

			    default:
			      expectedSubnet = (0, _isIP.default)(parts[0], '6') ? v6Subnet : v4Subnet;
			  }

			  return parts[1] <= expectedSubnet && parts[1] >= 0;
			}

			module.exports = exports.default;
			module.exports.default = exports.default; 
		} (isIPRange, isIPRange.exports));
		return isIPRange.exports;
	}

	var isDate$1 = {exports: {}};

	var hasRequiredIsDate;

	function requireIsDate () {
		if (hasRequiredIsDate) return isDate$1.exports;
		hasRequiredIsDate = 1;
		(function (module, exports) {

			Object.defineProperty(exports, "__esModule", {
			  value: true
			});
			exports.default = isDate;

			var _merge = _interopRequireDefault(requireMerge$1());

			function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

			function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

			function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

			function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

			function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

			function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

			function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

			function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

			var default_date_options = {
			  format: 'YYYY/MM/DD',
			  delimiters: ['/', '-'],
			  strictMode: false
			};

			function isValidFormat(format) {
			  return /(^(y{4}|y{2})[.\/-](m{1,2})[.\/-](d{1,2})$)|(^(m{1,2})[.\/-](d{1,2})[.\/-]((y{4}|y{2})$))|(^(d{1,2})[.\/-](m{1,2})[.\/-]((y{4}|y{2})$))/gi.test(format);
			}

			function zip(date, format) {
			  var zippedArr = [],
			      len = Math.min(date.length, format.length);

			  for (var i = 0; i < len; i++) {
			    zippedArr.push([date[i], format[i]]);
			  }

			  return zippedArr;
			}

			function isDate(input, options) {
			  if (typeof options === 'string') {
			    // Allow backward compatbility for old format isDate(input [, format])
			    options = (0, _merge.default)({
			      format: options
			    }, default_date_options);
			  } else {
			    options = (0, _merge.default)(options, default_date_options);
			  }

			  if (typeof input === 'string' && isValidFormat(options.format)) {
			    var formatDelimiter = options.delimiters.find(function (delimiter) {
			      return options.format.indexOf(delimiter) !== -1;
			    });
			    var dateDelimiter = options.strictMode ? formatDelimiter : options.delimiters.find(function (delimiter) {
			      return input.indexOf(delimiter) !== -1;
			    });
			    var dateAndFormat = zip(input.split(dateDelimiter), options.format.toLowerCase().split(formatDelimiter));
			    var dateObj = {};

			    var _iterator = _createForOfIteratorHelper(dateAndFormat),
			        _step;

			    try {
			      for (_iterator.s(); !(_step = _iterator.n()).done;) {
			        var _step$value = _slicedToArray(_step.value, 2),
			            dateWord = _step$value[0],
			            formatWord = _step$value[1];

			        if (dateWord.length !== formatWord.length) {
			          return false;
			        }

			        dateObj[formatWord.charAt(0)] = dateWord;
			      }
			    } catch (err) {
			      _iterator.e(err);
			    } finally {
			      _iterator.f();
			    }

			    return new Date("".concat(dateObj.m, "/").concat(dateObj.d, "/").concat(dateObj.y)).getDate() === +dateObj.d;
			  }

			  if (!options.strictMode) {
			    return Object.prototype.toString.call(input) === '[object Date]' && isFinite(input);
			  }

			  return false;
			}

			module.exports = exports.default;
			module.exports.default = exports.default; 
		} (isDate$1, isDate$1.exports));
		return isDate$1.exports;
	}

	var isTime = {exports: {}};

	var hasRequiredIsTime;

	function requireIsTime () {
		if (hasRequiredIsTime) return isTime.exports;
		hasRequiredIsTime = 1;
		(function (module, exports) {

			Object.defineProperty(exports, "__esModule", {
			  value: true
			});
			exports.default = isTime;

			var _merge = _interopRequireDefault(requireMerge$1());

			function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

			var default_time_options = {
			  hourFormat: 'hour24',
			  mode: 'default'
			};
			var formats = {
			  hour24: {
			    default: /^([01]?[0-9]|2[0-3]):([0-5][0-9])$/,
			    withSeconds: /^([01]?[0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9])$/
			  },
			  hour12: {
			    default: /^(0?[1-9]|1[0-2]):([0-5][0-9]) (A|P)M$/,
			    withSeconds: /^(0?[1-9]|1[0-2]):([0-5][0-9]):([0-5][0-9]) (A|P)M$/
			  }
			};

			function isTime(input, options) {
			  options = (0, _merge.default)(options, default_time_options);
			  if (typeof input !== 'string') return false;
			  return formats[options.hourFormat][options.mode].test(input);
			}

			module.exports = exports.default;
			module.exports.default = exports.default; 
		} (isTime, isTime.exports));
		return isTime.exports;
	}

	var isBoolean$1 = {exports: {}};

	var hasRequiredIsBoolean;

	function requireIsBoolean () {
		if (hasRequiredIsBoolean) return isBoolean$1.exports;
		hasRequiredIsBoolean = 1;
		(function (module, exports) {

			Object.defineProperty(exports, "__esModule", {
			  value: true
			});
			exports.default = isBoolean;

			var _assertString = _interopRequireDefault(requireAssertString());

			function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

			var defaultOptions = {
			  loose: false
			};
			var strictBooleans = ['true', 'false', '1', '0'];
			var looseBooleans = [].concat(strictBooleans, ['yes', 'no']);

			function isBoolean(str) {
			  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultOptions;
			  (0, _assertString.default)(str);

			  if (options.loose) {
			    return looseBooleans.includes(str.toLowerCase());
			  }

			  return strictBooleans.includes(str);
			}

			module.exports = exports.default;
			module.exports.default = exports.default; 
		} (isBoolean$1, isBoolean$1.exports));
		return isBoolean$1.exports;
	}

	var isLocale = {exports: {}};

	var hasRequiredIsLocale;

	function requireIsLocale () {
		if (hasRequiredIsLocale) return isLocale.exports;
		hasRequiredIsLocale = 1;
		(function (module, exports) {

			Object.defineProperty(exports, "__esModule", {
			  value: true
			});
			exports.default = isLocale;

			var _assertString = _interopRequireDefault(requireAssertString());

			function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

			var localeReg = /^[A-Za-z]{2,4}([_-]([A-Za-z]{4}|[\d]{3}))?([_-]([A-Za-z]{2}|[\d]{3}))?$/;

			function isLocale(str) {
			  (0, _assertString.default)(str);

			  if (str === 'en_US_POSIX' || str === 'ca_ES_VALENCIA') {
			    return true;
			  }

			  return localeReg.test(str);
			}

			module.exports = exports.default;
			module.exports.default = exports.default; 
		} (isLocale, isLocale.exports));
		return isLocale.exports;
	}

	var isAlpha = {};

	var hasRequiredIsAlpha;

	function requireIsAlpha () {
		if (hasRequiredIsAlpha) return isAlpha;
		hasRequiredIsAlpha = 1;

		Object.defineProperty(isAlpha, "__esModule", {
		  value: true
		});
		isAlpha.default = isAlpha$1;
		isAlpha.locales = void 0;

		var _assertString = _interopRequireDefault(requireAssertString());

		var _alpha = requireAlpha();

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		function isAlpha$1(_str) {
		  var locale = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'en-US';
		  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
		  (0, _assertString.default)(_str);
		  var str = _str;
		  var ignore = options.ignore;

		  if (ignore) {
		    if (ignore instanceof RegExp) {
		      str = str.replace(ignore, '');
		    } else if (typeof ignore === 'string') {
		      str = str.replace(new RegExp("[".concat(ignore.replace(/[-[\]{}()*+?.,\\^$|#\\s]/g, '\\$&'), "]"), 'g'), ''); // escape regex for ignore
		    } else {
		      throw new Error('ignore should be instance of a String or RegExp');
		    }
		  }

		  if (locale in _alpha.alpha) {
		    return _alpha.alpha[locale].test(str);
		  }

		  throw new Error("Invalid locale '".concat(locale, "'"));
		}

		var locales = Object.keys(_alpha.alpha);
		isAlpha.locales = locales;
		return isAlpha;
	}

	var isAlphanumeric = {};

	var hasRequiredIsAlphanumeric;

	function requireIsAlphanumeric () {
		if (hasRequiredIsAlphanumeric) return isAlphanumeric;
		hasRequiredIsAlphanumeric = 1;

		Object.defineProperty(isAlphanumeric, "__esModule", {
		  value: true
		});
		isAlphanumeric.default = isAlphanumeric$1;
		isAlphanumeric.locales = void 0;

		var _assertString = _interopRequireDefault(requireAssertString());

		var _alpha = requireAlpha();

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		function isAlphanumeric$1(_str) {
		  var locale = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'en-US';
		  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
		  (0, _assertString.default)(_str);
		  var str = _str;
		  var ignore = options.ignore;

		  if (ignore) {
		    if (ignore instanceof RegExp) {
		      str = str.replace(ignore, '');
		    } else if (typeof ignore === 'string') {
		      str = str.replace(new RegExp("[".concat(ignore.replace(/[-[\]{}()*+?.,\\^$|#\\s]/g, '\\$&'), "]"), 'g'), ''); // escape regex for ignore
		    } else {
		      throw new Error('ignore should be instance of a String or RegExp');
		    }
		  }

		  if (locale in _alpha.alphanumeric) {
		    return _alpha.alphanumeric[locale].test(str);
		  }

		  throw new Error("Invalid locale '".concat(locale, "'"));
		}

		var locales = Object.keys(_alpha.alphanumeric);
		isAlphanumeric.locales = locales;
		return isAlphanumeric;
	}

	var isNumeric = {exports: {}};

	var hasRequiredIsNumeric;

	function requireIsNumeric () {
		if (hasRequiredIsNumeric) return isNumeric.exports;
		hasRequiredIsNumeric = 1;
		(function (module, exports) {

			Object.defineProperty(exports, "__esModule", {
			  value: true
			});
			exports.default = isNumeric;

			var _assertString = _interopRequireDefault(requireAssertString());

			var _alpha = requireAlpha();

			function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

			var numericNoSymbols = /^[0-9]+$/;

			function isNumeric(str, options) {
			  (0, _assertString.default)(str);

			  if (options && options.no_symbols) {
			    return numericNoSymbols.test(str);
			  }

			  return new RegExp("^[+-]?([0-9]*[".concat((options || {}).locale ? _alpha.decimal[options.locale] : '.', "])?[0-9]+$")).test(str);
			}

			module.exports = exports.default;
			module.exports.default = exports.default; 
		} (isNumeric, isNumeric.exports));
		return isNumeric.exports;
	}

	var isPassportNumber = {exports: {}};

	var hasRequiredIsPassportNumber;

	function requireIsPassportNumber () {
		if (hasRequiredIsPassportNumber) return isPassportNumber.exports;
		hasRequiredIsPassportNumber = 1;
		(function (module, exports) {

			Object.defineProperty(exports, "__esModule", {
			  value: true
			});
			exports.default = isPassportNumber;

			var _assertString = _interopRequireDefault(requireAssertString());

			function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

			/**
			 * Reference:
			 * https://en.wikipedia.org/ -- Wikipedia
			 * https://docs.microsoft.com/en-us/microsoft-365/compliance/eu-passport-number -- EU Passport Number
			 * https://countrycode.org/ -- Country Codes
			 */
			var passportRegexByCountryCode = {
			  AM: /^[A-Z]{2}\d{7}$/,
			  // ARMENIA
			  AR: /^[A-Z]{3}\d{6}$/,
			  // ARGENTINA
			  AT: /^[A-Z]\d{7}$/,
			  // AUSTRIA
			  AU: /^[A-Z]\d{7}$/,
			  // AUSTRALIA
			  AZ: /^[A-Z]{2,3}\d{7,8}$/,
			  // AZERBAIJAN
			  BE: /^[A-Z]{2}\d{6}$/,
			  // BELGIUM
			  BG: /^\d{9}$/,
			  // BULGARIA
			  BR: /^[A-Z]{2}\d{6}$/,
			  // BRAZIL
			  BY: /^[A-Z]{2}\d{7}$/,
			  // BELARUS
			  CA: /^[A-Z]{2}\d{6}$/,
			  // CANADA
			  CH: /^[A-Z]\d{7}$/,
			  // SWITZERLAND
			  CN: /^G\d{8}$|^E(?![IO])[A-Z0-9]\d{7}$/,
			  // CHINA [G=Ordinary, E=Electronic] followed by 8-digits, or E followed by any UPPERCASE letter (except I and O) followed by 7 digits
			  CY: /^[A-Z](\d{6}|\d{8})$/,
			  // CYPRUS
			  CZ: /^\d{8}$/,
			  // CZECH REPUBLIC
			  DE: /^[CFGHJKLMNPRTVWXYZ0-9]{9}$/,
			  // GERMANY
			  DK: /^\d{9}$/,
			  // DENMARK
			  DZ: /^\d{9}$/,
			  // ALGERIA
			  EE: /^([A-Z]\d{7}|[A-Z]{2}\d{7})$/,
			  // ESTONIA (K followed by 7-digits), e-passports have 2 UPPERCASE followed by 7 digits
			  ES: /^[A-Z0-9]{2}([A-Z0-9]?)\d{6}$/,
			  // SPAIN
			  FI: /^[A-Z]{2}\d{7}$/,
			  // FINLAND
			  FR: /^\d{2}[A-Z]{2}\d{5}$/,
			  // FRANCE
			  GB: /^\d{9}$/,
			  // UNITED KINGDOM
			  GR: /^[A-Z]{2}\d{7}$/,
			  // GREECE
			  HR: /^\d{9}$/,
			  // CROATIA
			  HU: /^[A-Z]{2}(\d{6}|\d{7})$/,
			  // HUNGARY
			  IE: /^[A-Z0-9]{2}\d{7}$/,
			  // IRELAND
			  IN: /^[A-Z]{1}-?\d{7}$/,
			  // INDIA
			  ID: /^[A-C]\d{7}$/,
			  // INDONESIA
			  IR: /^[A-Z]\d{8}$/,
			  // IRAN
			  IS: /^(A)\d{7}$/,
			  // ICELAND
			  IT: /^[A-Z0-9]{2}\d{7}$/,
			  // ITALY
			  JM: /^[Aa]\d{7}$/,
			  // JAMAICA
			  JP: /^[A-Z]{2}\d{7}$/,
			  // JAPAN
			  KR: /^[MS]\d{8}$/,
			  // SOUTH KOREA, REPUBLIC OF KOREA, [S=PS Passports, M=PM Passports]
			  KZ: /^[a-zA-Z]\d{7}$/,
			  // KAZAKHSTAN
			  LI: /^[a-zA-Z]\d{5}$/,
			  // LIECHTENSTEIN
			  LT: /^[A-Z0-9]{8}$/,
			  // LITHUANIA
			  LU: /^[A-Z0-9]{8}$/,
			  // LUXEMBURG
			  LV: /^[A-Z0-9]{2}\d{7}$/,
			  // LATVIA
			  LY: /^[A-Z0-9]{8}$/,
			  // LIBYA
			  MT: /^\d{7}$/,
			  // MALTA
			  MZ: /^([A-Z]{2}\d{7})|(\d{2}[A-Z]{2}\d{5})$/,
			  // MOZAMBIQUE
			  MY: /^[AHK]\d{8}$/,
			  // MALAYSIA
			  MX: /^\d{10,11}$/,
			  // MEXICO
			  NL: /^[A-Z]{2}[A-Z0-9]{6}\d$/,
			  // NETHERLANDS
			  NZ: /^([Ll]([Aa]|[Dd]|[Ff]|[Hh])|[Ee]([Aa]|[Pp])|[Nn])\d{6}$/,
			  // NEW ZEALAND
			  PH: /^([A-Z](\d{6}|\d{7}[A-Z]))|([A-Z]{2}(\d{6}|\d{7}))$/,
			  // PHILIPPINES
			  PK: /^[A-Z]{2}\d{7}$/,
			  // PAKISTAN
			  PL: /^[A-Z]{2}\d{7}$/,
			  // POLAND
			  PT: /^[A-Z]\d{6}$/,
			  // PORTUGAL
			  RO: /^\d{8,9}$/,
			  // ROMANIA
			  RU: /^\d{9}$/,
			  // RUSSIAN FEDERATION
			  SE: /^\d{8}$/,
			  // SWEDEN
			  SL: /^(P)[A-Z]\d{7}$/,
			  // SLOVENIA
			  SK: /^[0-9A-Z]\d{7}$/,
			  // SLOVAKIA
			  TH: /^[A-Z]{1,2}\d{6,7}$/,
			  // THAILAND
			  TR: /^[A-Z]\d{8}$/,
			  // TURKEY
			  UA: /^[A-Z]{2}\d{6}$/,
			  // UKRAINE
			  US: /^\d{9}$/ // UNITED STATES

			};
			/**
			 * Check if str is a valid passport number
			 * relative to provided ISO Country Code.
			 *
			 * @param {string} str
			 * @param {string} countryCode
			 * @return {boolean}
			 */

			function isPassportNumber(str, countryCode) {
			  (0, _assertString.default)(str);
			  /** Remove All Whitespaces, Convert to UPPERCASE */

			  var normalizedStr = str.replace(/\s/g, '').toUpperCase();
			  return countryCode.toUpperCase() in passportRegexByCountryCode && passportRegexByCountryCode[countryCode].test(normalizedStr);
			}

			module.exports = exports.default;
			module.exports.default = exports.default; 
		} (isPassportNumber, isPassportNumber.exports));
		return isPassportNumber.exports;
	}

	var isPort = {exports: {}};

	var isInt = {exports: {}};

	var hasRequiredIsInt;

	function requireIsInt () {
		if (hasRequiredIsInt) return isInt.exports;
		hasRequiredIsInt = 1;
		(function (module, exports) {

			Object.defineProperty(exports, "__esModule", {
			  value: true
			});
			exports.default = isInt;

			var _assertString = _interopRequireDefault(requireAssertString());

			function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

			var int = /^(?:[-+]?(?:0|[1-9][0-9]*))$/;
			var intLeadingZeroes = /^[-+]?[0-9]+$/;

			function isInt(str, options) {
			  (0, _assertString.default)(str);
			  options = options || {}; // Get the regex to use for testing, based on whether
			  // leading zeroes are allowed or not.

			  var regex = options.hasOwnProperty('allow_leading_zeroes') && !options.allow_leading_zeroes ? int : intLeadingZeroes; // Check min/max/lt/gt

			  var minCheckPassed = !options.hasOwnProperty('min') || str >= options.min;
			  var maxCheckPassed = !options.hasOwnProperty('max') || str <= options.max;
			  var ltCheckPassed = !options.hasOwnProperty('lt') || str < options.lt;
			  var gtCheckPassed = !options.hasOwnProperty('gt') || str > options.gt;
			  return regex.test(str) && minCheckPassed && maxCheckPassed && ltCheckPassed && gtCheckPassed;
			}

			module.exports = exports.default;
			module.exports.default = exports.default; 
		} (isInt, isInt.exports));
		return isInt.exports;
	}

	var hasRequiredIsPort;

	function requireIsPort () {
		if (hasRequiredIsPort) return isPort.exports;
		hasRequiredIsPort = 1;
		(function (module, exports) {

			Object.defineProperty(exports, "__esModule", {
			  value: true
			});
			exports.default = isPort;

			var _isInt = _interopRequireDefault(requireIsInt());

			function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

			function isPort(str) {
			  return (0, _isInt.default)(str, {
			    min: 0,
			    max: 65535
			  });
			}

			module.exports = exports.default;
			module.exports.default = exports.default; 
		} (isPort, isPort.exports));
		return isPort.exports;
	}

	var isLowercase = {exports: {}};

	var hasRequiredIsLowercase;

	function requireIsLowercase () {
		if (hasRequiredIsLowercase) return isLowercase.exports;
		hasRequiredIsLowercase = 1;
		(function (module, exports) {

			Object.defineProperty(exports, "__esModule", {
			  value: true
			});
			exports.default = isLowercase;

			var _assertString = _interopRequireDefault(requireAssertString());

			function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

			function isLowercase(str) {
			  (0, _assertString.default)(str);
			  return str === str.toLowerCase();
			}

			module.exports = exports.default;
			module.exports.default = exports.default; 
		} (isLowercase, isLowercase.exports));
		return isLowercase.exports;
	}

	var isUppercase = {exports: {}};

	var hasRequiredIsUppercase;

	function requireIsUppercase () {
		if (hasRequiredIsUppercase) return isUppercase.exports;
		hasRequiredIsUppercase = 1;
		(function (module, exports) {

			Object.defineProperty(exports, "__esModule", {
			  value: true
			});
			exports.default = isUppercase;

			var _assertString = _interopRequireDefault(requireAssertString());

			function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

			function isUppercase(str) {
			  (0, _assertString.default)(str);
			  return str === str.toUpperCase();
			}

			module.exports = exports.default;
			module.exports.default = exports.default; 
		} (isUppercase, isUppercase.exports));
		return isUppercase.exports;
	}

	var isIMEI = {exports: {}};

	var hasRequiredIsIMEI;

	function requireIsIMEI () {
		if (hasRequiredIsIMEI) return isIMEI.exports;
		hasRequiredIsIMEI = 1;
		(function (module, exports) {

			Object.defineProperty(exports, "__esModule", {
			  value: true
			});
			exports.default = isIMEI;

			var _assertString = _interopRequireDefault(requireAssertString());

			function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

			var imeiRegexWithoutHypens = /^[0-9]{15}$/;
			var imeiRegexWithHypens = /^\d{2}-\d{6}-\d{6}-\d{1}$/;

			function isIMEI(str, options) {
			  (0, _assertString.default)(str);
			  options = options || {}; // default regex for checking imei is the one without hyphens

			  var imeiRegex = imeiRegexWithoutHypens;

			  if (options.allow_hyphens) {
			    imeiRegex = imeiRegexWithHypens;
			  }

			  if (!imeiRegex.test(str)) {
			    return false;
			  }

			  str = str.replace(/-/g, '');
			  var sum = 0,
			      mul = 2,
			      l = 14;

			  for (var i = 0; i < l; i++) {
			    var digit = str.substring(l - i - 1, l - i);
			    var tp = parseInt(digit, 10) * mul;

			    if (tp >= 10) {
			      sum += tp % 10 + 1;
			    } else {
			      sum += tp;
			    }

			    if (mul === 1) {
			      mul += 1;
			    } else {
			      mul -= 1;
			    }
			  }

			  var chk = (10 - sum % 10) % 10;

			  if (chk !== parseInt(str.substring(14, 15), 10)) {
			    return false;
			  }

			  return true;
			}

			module.exports = exports.default;
			module.exports.default = exports.default; 
		} (isIMEI, isIMEI.exports));
		return isIMEI.exports;
	}

	var isAscii = {exports: {}};

	var hasRequiredIsAscii;

	function requireIsAscii () {
		if (hasRequiredIsAscii) return isAscii.exports;
		hasRequiredIsAscii = 1;
		(function (module, exports) {

			Object.defineProperty(exports, "__esModule", {
			  value: true
			});
			exports.default = isAscii;

			var _assertString = _interopRequireDefault(requireAssertString());

			function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

			/* eslint-disable no-control-regex */
			var ascii = /^[\x00-\x7F]+$/;
			/* eslint-enable no-control-regex */

			function isAscii(str) {
			  (0, _assertString.default)(str);
			  return ascii.test(str);
			}

			module.exports = exports.default;
			module.exports.default = exports.default; 
		} (isAscii, isAscii.exports));
		return isAscii.exports;
	}

	var isFullWidth = {};

	var hasRequiredIsFullWidth;

	function requireIsFullWidth () {
		if (hasRequiredIsFullWidth) return isFullWidth;
		hasRequiredIsFullWidth = 1;

		Object.defineProperty(isFullWidth, "__esModule", {
		  value: true
		});
		isFullWidth.default = isFullWidth$1;
		isFullWidth.fullWidth = void 0;

		var _assertString = _interopRequireDefault(requireAssertString());

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		var fullWidth = /[^\u0020-\u007E\uFF61-\uFF9F\uFFA0-\uFFDC\uFFE8-\uFFEE0-9a-zA-Z]/;
		isFullWidth.fullWidth = fullWidth;

		function isFullWidth$1(str) {
		  (0, _assertString.default)(str);
		  return fullWidth.test(str);
		}
		return isFullWidth;
	}

	var isHalfWidth = {};

	var hasRequiredIsHalfWidth;

	function requireIsHalfWidth () {
		if (hasRequiredIsHalfWidth) return isHalfWidth;
		hasRequiredIsHalfWidth = 1;

		Object.defineProperty(isHalfWidth, "__esModule", {
		  value: true
		});
		isHalfWidth.default = isHalfWidth$1;
		isHalfWidth.halfWidth = void 0;

		var _assertString = _interopRequireDefault(requireAssertString());

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		var halfWidth = /[\u0020-\u007E\uFF61-\uFF9F\uFFA0-\uFFDC\uFFE8-\uFFEE0-9a-zA-Z]/;
		isHalfWidth.halfWidth = halfWidth;

		function isHalfWidth$1(str) {
		  (0, _assertString.default)(str);
		  return halfWidth.test(str);
		}
		return isHalfWidth;
	}

	var isVariableWidth = {exports: {}};

	var hasRequiredIsVariableWidth;

	function requireIsVariableWidth () {
		if (hasRequiredIsVariableWidth) return isVariableWidth.exports;
		hasRequiredIsVariableWidth = 1;
		(function (module, exports) {

			Object.defineProperty(exports, "__esModule", {
			  value: true
			});
			exports.default = isVariableWidth;

			var _assertString = _interopRequireDefault(requireAssertString());

			var _isFullWidth = requireIsFullWidth();

			var _isHalfWidth = requireIsHalfWidth();

			function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

			function isVariableWidth(str) {
			  (0, _assertString.default)(str);
			  return _isFullWidth.fullWidth.test(str) && _isHalfWidth.halfWidth.test(str);
			}

			module.exports = exports.default;
			module.exports.default = exports.default; 
		} (isVariableWidth, isVariableWidth.exports));
		return isVariableWidth.exports;
	}

	var isMultibyte = {exports: {}};

	var hasRequiredIsMultibyte;

	function requireIsMultibyte () {
		if (hasRequiredIsMultibyte) return isMultibyte.exports;
		hasRequiredIsMultibyte = 1;
		(function (module, exports) {

			Object.defineProperty(exports, "__esModule", {
			  value: true
			});
			exports.default = isMultibyte;

			var _assertString = _interopRequireDefault(requireAssertString());

			function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

			/* eslint-disable no-control-regex */
			var multibyte = /[^\x00-\x7F]/;
			/* eslint-enable no-control-regex */

			function isMultibyte(str) {
			  (0, _assertString.default)(str);
			  return multibyte.test(str);
			}

			module.exports = exports.default;
			module.exports.default = exports.default; 
		} (isMultibyte, isMultibyte.exports));
		return isMultibyte.exports;
	}

	var isSemVer = {exports: {}};

	var multilineRegex = {exports: {}};

	var hasRequiredMultilineRegex;

	function requireMultilineRegex () {
		if (hasRequiredMultilineRegex) return multilineRegex.exports;
		hasRequiredMultilineRegex = 1;
		(function (module, exports) {

			Object.defineProperty(exports, "__esModule", {
			  value: true
			});
			exports.default = multilineRegexp;

			/**
			 * Build RegExp object from an array
			 * of multiple/multi-line regexp parts
			 *
			 * @param {string[]} parts
			 * @param {string} flags
			 * @return {object} - RegExp object
			 */
			function multilineRegexp(parts, flags) {
			  var regexpAsStringLiteral = parts.join('');
			  return new RegExp(regexpAsStringLiteral, flags);
			}

			module.exports = exports.default;
			module.exports.default = exports.default; 
		} (multilineRegex, multilineRegex.exports));
		return multilineRegex.exports;
	}

	var hasRequiredIsSemVer;

	function requireIsSemVer () {
		if (hasRequiredIsSemVer) return isSemVer.exports;
		hasRequiredIsSemVer = 1;
		(function (module, exports) {

			Object.defineProperty(exports, "__esModule", {
			  value: true
			});
			exports.default = isSemVer;

			var _assertString = _interopRequireDefault(requireAssertString());

			var _multilineRegex = _interopRequireDefault(requireMultilineRegex());

			function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

			/**
			 * Regular Expression to match
			 * semantic versioning (SemVer)
			 * built from multi-line, multi-parts regexp
			 * Reference: https://semver.org/
			 */
			var semanticVersioningRegex = (0, _multilineRegex.default)(['^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)', '(?:-((?:0|[1-9]\\d*|\\d*[a-z-][0-9a-z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-z-][0-9a-z-]*))*))', '?(?:\\+([0-9a-z-]+(?:\\.[0-9a-z-]+)*))?$'], 'i');

			function isSemVer(str) {
			  (0, _assertString.default)(str);
			  return semanticVersioningRegex.test(str);
			}

			module.exports = exports.default;
			module.exports.default = exports.default; 
		} (isSemVer, isSemVer.exports));
		return isSemVer.exports;
	}

	var isSurrogatePair = {exports: {}};

	var hasRequiredIsSurrogatePair;

	function requireIsSurrogatePair () {
		if (hasRequiredIsSurrogatePair) return isSurrogatePair.exports;
		hasRequiredIsSurrogatePair = 1;
		(function (module, exports) {

			Object.defineProperty(exports, "__esModule", {
			  value: true
			});
			exports.default = isSurrogatePair;

			var _assertString = _interopRequireDefault(requireAssertString());

			function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

			var surrogatePair = /[\uD800-\uDBFF][\uDC00-\uDFFF]/;

			function isSurrogatePair(str) {
			  (0, _assertString.default)(str);
			  return surrogatePair.test(str);
			}

			module.exports = exports.default;
			module.exports.default = exports.default; 
		} (isSurrogatePair, isSurrogatePair.exports));
		return isSurrogatePair.exports;
	}

	var isDecimal = {exports: {}};

	var includes = {exports: {}};

	var hasRequiredIncludes;

	function requireIncludes () {
		if (hasRequiredIncludes) return includes.exports;
		hasRequiredIncludes = 1;
		(function (module, exports) {

			Object.defineProperty(exports, "__esModule", {
			  value: true
			});
			exports.default = void 0;

			var includes = function includes(arr, val) {
			  return arr.some(function (arrVal) {
			    return val === arrVal;
			  });
			};

			var _default = includes;
			exports.default = _default;
			module.exports = exports.default;
			module.exports.default = exports.default; 
		} (includes, includes.exports));
		return includes.exports;
	}

	var hasRequiredIsDecimal;

	function requireIsDecimal () {
		if (hasRequiredIsDecimal) return isDecimal.exports;
		hasRequiredIsDecimal = 1;
		(function (module, exports) {

			Object.defineProperty(exports, "__esModule", {
			  value: true
			});
			exports.default = isDecimal;

			var _merge = _interopRequireDefault(requireMerge$1());

			var _assertString = _interopRequireDefault(requireAssertString());

			var _includes = _interopRequireDefault(requireIncludes());

			var _alpha = requireAlpha();

			function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

			function decimalRegExp(options) {
			  var regExp = new RegExp("^[-+]?([0-9]+)?(\\".concat(_alpha.decimal[options.locale], "[0-9]{").concat(options.decimal_digits, "})").concat(options.force_decimal ? '' : '?', "$"));
			  return regExp;
			}

			var default_decimal_options = {
			  force_decimal: false,
			  decimal_digits: '1,',
			  locale: 'en-US'
			};
			var blacklist = ['', '-', '+'];

			function isDecimal(str, options) {
			  (0, _assertString.default)(str);
			  options = (0, _merge.default)(options, default_decimal_options);

			  if (options.locale in _alpha.decimal) {
			    return !(0, _includes.default)(blacklist, str.replace(/ /g, '')) && decimalRegExp(options).test(str);
			  }

			  throw new Error("Invalid locale '".concat(options.locale, "'"));
			}

			module.exports = exports.default;
			module.exports.default = exports.default; 
		} (isDecimal, isDecimal.exports));
		return isDecimal.exports;
	}

	var isHexadecimal = {exports: {}};

	var hasRequiredIsHexadecimal;

	function requireIsHexadecimal () {
		if (hasRequiredIsHexadecimal) return isHexadecimal.exports;
		hasRequiredIsHexadecimal = 1;
		(function (module, exports) {

			Object.defineProperty(exports, "__esModule", {
			  value: true
			});
			exports.default = isHexadecimal;

			var _assertString = _interopRequireDefault(requireAssertString());

			function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

			var hexadecimal = /^(0x|0h)?[0-9A-F]+$/i;

			function isHexadecimal(str) {
			  (0, _assertString.default)(str);
			  return hexadecimal.test(str);
			}

			module.exports = exports.default;
			module.exports.default = exports.default; 
		} (isHexadecimal, isHexadecimal.exports));
		return isHexadecimal.exports;
	}

	var isOctal = {exports: {}};

	var hasRequiredIsOctal;

	function requireIsOctal () {
		if (hasRequiredIsOctal) return isOctal.exports;
		hasRequiredIsOctal = 1;
		(function (module, exports) {

			Object.defineProperty(exports, "__esModule", {
			  value: true
			});
			exports.default = isOctal;

			var _assertString = _interopRequireDefault(requireAssertString());

			function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

			var octal = /^(0o)?[0-7]+$/i;

			function isOctal(str) {
			  (0, _assertString.default)(str);
			  return octal.test(str);
			}

			module.exports = exports.default;
			module.exports.default = exports.default; 
		} (isOctal, isOctal.exports));
		return isOctal.exports;
	}

	var isDivisibleBy = {exports: {}};

	var hasRequiredIsDivisibleBy;

	function requireIsDivisibleBy () {
		if (hasRequiredIsDivisibleBy) return isDivisibleBy.exports;
		hasRequiredIsDivisibleBy = 1;
		(function (module, exports) {

			Object.defineProperty(exports, "__esModule", {
			  value: true
			});
			exports.default = isDivisibleBy;

			var _assertString = _interopRequireDefault(requireAssertString());

			var _toFloat = _interopRequireDefault(requireToFloat());

			function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

			function isDivisibleBy(str, num) {
			  (0, _assertString.default)(str);
			  return (0, _toFloat.default)(str) % parseInt(num, 10) === 0;
			}

			module.exports = exports.default;
			module.exports.default = exports.default; 
		} (isDivisibleBy, isDivisibleBy.exports));
		return isDivisibleBy.exports;
	}

	var isHexColor = {exports: {}};

	var hasRequiredIsHexColor;

	function requireIsHexColor () {
		if (hasRequiredIsHexColor) return isHexColor.exports;
		hasRequiredIsHexColor = 1;
		(function (module, exports) {

			Object.defineProperty(exports, "__esModule", {
			  value: true
			});
			exports.default = isHexColor;

			var _assertString = _interopRequireDefault(requireAssertString());

			function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

			var hexcolor = /^#?([0-9A-F]{3}|[0-9A-F]{4}|[0-9A-F]{6}|[0-9A-F]{8})$/i;

			function isHexColor(str) {
			  (0, _assertString.default)(str);
			  return hexcolor.test(str);
			}

			module.exports = exports.default;
			module.exports.default = exports.default; 
		} (isHexColor, isHexColor.exports));
		return isHexColor.exports;
	}

	var isRgbColor = {exports: {}};

	var hasRequiredIsRgbColor;

	function requireIsRgbColor () {
		if (hasRequiredIsRgbColor) return isRgbColor.exports;
		hasRequiredIsRgbColor = 1;
		(function (module, exports) {

			Object.defineProperty(exports, "__esModule", {
			  value: true
			});
			exports.default = isRgbColor;

			var _assertString = _interopRequireDefault(requireAssertString());

			function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

			var rgbColor = /^rgb\((([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]),){2}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\)$/;
			var rgbaColor = /^rgba\((([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]),){3}(0?\.\d|1(\.0)?|0(\.0)?)\)$/;
			var rgbColorPercent = /^rgb\((([0-9]%|[1-9][0-9]%|100%),){2}([0-9]%|[1-9][0-9]%|100%)\)$/;
			var rgbaColorPercent = /^rgba\((([0-9]%|[1-9][0-9]%|100%),){3}(0?\.\d|1(\.0)?|0(\.0)?)\)$/;

			function isRgbColor(str) {
			  var includePercentValues = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
			  (0, _assertString.default)(str);

			  if (!includePercentValues) {
			    return rgbColor.test(str) || rgbaColor.test(str);
			  }

			  return rgbColor.test(str) || rgbaColor.test(str) || rgbColorPercent.test(str) || rgbaColorPercent.test(str);
			}

			module.exports = exports.default;
			module.exports.default = exports.default; 
		} (isRgbColor, isRgbColor.exports));
		return isRgbColor.exports;
	}

	var isHSL = {exports: {}};

	var hasRequiredIsHSL;

	function requireIsHSL () {
		if (hasRequiredIsHSL) return isHSL.exports;
		hasRequiredIsHSL = 1;
		(function (module, exports) {

			Object.defineProperty(exports, "__esModule", {
			  value: true
			});
			exports.default = isHSL;

			var _assertString = _interopRequireDefault(requireAssertString());

			function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

			var hslComma = /^hsla?\(((\+|\-)?([0-9]+(\.[0-9]+)?(e(\+|\-)?[0-9]+)?|\.[0-9]+(e(\+|\-)?[0-9]+)?))(deg|grad|rad|turn)?(,(\+|\-)?([0-9]+(\.[0-9]+)?(e(\+|\-)?[0-9]+)?|\.[0-9]+(e(\+|\-)?[0-9]+)?)%){2}(,((\+|\-)?([0-9]+(\.[0-9]+)?(e(\+|\-)?[0-9]+)?|\.[0-9]+(e(\+|\-)?[0-9]+)?)%?))?\)$/i;
			var hslSpace = /^hsla?\(((\+|\-)?([0-9]+(\.[0-9]+)?(e(\+|\-)?[0-9]+)?|\.[0-9]+(e(\+|\-)?[0-9]+)?))(deg|grad|rad|turn)?(\s(\+|\-)?([0-9]+(\.[0-9]+)?(e(\+|\-)?[0-9]+)?|\.[0-9]+(e(\+|\-)?[0-9]+)?)%){2}\s?(\/\s((\+|\-)?([0-9]+(\.[0-9]+)?(e(\+|\-)?[0-9]+)?|\.[0-9]+(e(\+|\-)?[0-9]+)?)%?)\s?)?\)$/i;

			function isHSL(str) {
			  (0, _assertString.default)(str); // Strip duplicate spaces before calling the validation regex (See  #1598 for more info)

			  var strippedStr = str.replace(/\s+/g, ' ').replace(/\s?(hsla?\(|\)|,)\s?/ig, '$1');

			  if (strippedStr.indexOf(',') !== -1) {
			    return hslComma.test(strippedStr);
			  }

			  return hslSpace.test(strippedStr);
			}

			module.exports = exports.default;
			module.exports.default = exports.default; 
		} (isHSL, isHSL.exports));
		return isHSL.exports;
	}

	var isISRC = {exports: {}};

	var hasRequiredIsISRC;

	function requireIsISRC () {
		if (hasRequiredIsISRC) return isISRC.exports;
		hasRequiredIsISRC = 1;
		(function (module, exports) {

			Object.defineProperty(exports, "__esModule", {
			  value: true
			});
			exports.default = isISRC;

			var _assertString = _interopRequireDefault(requireAssertString());

			function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

			// see http://isrc.ifpi.org/en/isrc-standard/code-syntax
			var isrc = /^[A-Z]{2}[0-9A-Z]{3}\d{2}\d{5}$/;

			function isISRC(str) {
			  (0, _assertString.default)(str);
			  return isrc.test(str);
			}

			module.exports = exports.default;
			module.exports.default = exports.default; 
		} (isISRC, isISRC.exports));
		return isISRC.exports;
	}

	var isIBAN = {};

	var hasRequiredIsIBAN;

	function requireIsIBAN () {
		if (hasRequiredIsIBAN) return isIBAN;
		hasRequiredIsIBAN = 1;

		Object.defineProperty(isIBAN, "__esModule", {
		  value: true
		});
		isIBAN.default = isIBAN$1;
		isIBAN.locales = void 0;

		var _assertString = _interopRequireDefault(requireAssertString());

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		/**
		 * List of country codes with
		 * corresponding IBAN regular expression
		 * Reference: https://en.wikipedia.org/wiki/International_Bank_Account_Number
		 */
		var ibanRegexThroughCountryCode = {
		  AD: /^(AD[0-9]{2})\d{8}[A-Z0-9]{12}$/,
		  AE: /^(AE[0-9]{2})\d{3}\d{16}$/,
		  AL: /^(AL[0-9]{2})\d{8}[A-Z0-9]{16}$/,
		  AT: /^(AT[0-9]{2})\d{16}$/,
		  AZ: /^(AZ[0-9]{2})[A-Z0-9]{4}\d{20}$/,
		  BA: /^(BA[0-9]{2})\d{16}$/,
		  BE: /^(BE[0-9]{2})\d{12}$/,
		  BG: /^(BG[0-9]{2})[A-Z]{4}\d{6}[A-Z0-9]{8}$/,
		  BH: /^(BH[0-9]{2})[A-Z]{4}[A-Z0-9]{14}$/,
		  BR: /^(BR[0-9]{2})\d{23}[A-Z]{1}[A-Z0-9]{1}$/,
		  BY: /^(BY[0-9]{2})[A-Z0-9]{4}\d{20}$/,
		  CH: /^(CH[0-9]{2})\d{5}[A-Z0-9]{12}$/,
		  CR: /^(CR[0-9]{2})\d{18}$/,
		  CY: /^(CY[0-9]{2})\d{8}[A-Z0-9]{16}$/,
		  CZ: /^(CZ[0-9]{2})\d{20}$/,
		  DE: /^(DE[0-9]{2})\d{18}$/,
		  DK: /^(DK[0-9]{2})\d{14}$/,
		  DO: /^(DO[0-9]{2})[A-Z]{4}\d{20}$/,
		  EE: /^(EE[0-9]{2})\d{16}$/,
		  EG: /^(EG[0-9]{2})\d{25}$/,
		  ES: /^(ES[0-9]{2})\d{20}$/,
		  FI: /^(FI[0-9]{2})\d{14}$/,
		  FO: /^(FO[0-9]{2})\d{14}$/,
		  FR: /^(FR[0-9]{2})\d{10}[A-Z0-9]{11}\d{2}$/,
		  GB: /^(GB[0-9]{2})[A-Z]{4}\d{14}$/,
		  GE: /^(GE[0-9]{2})[A-Z0-9]{2}\d{16}$/,
		  GI: /^(GI[0-9]{2})[A-Z]{4}[A-Z0-9]{15}$/,
		  GL: /^(GL[0-9]{2})\d{14}$/,
		  GR: /^(GR[0-9]{2})\d{7}[A-Z0-9]{16}$/,
		  GT: /^(GT[0-9]{2})[A-Z0-9]{4}[A-Z0-9]{20}$/,
		  HR: /^(HR[0-9]{2})\d{17}$/,
		  HU: /^(HU[0-9]{2})\d{24}$/,
		  IE: /^(IE[0-9]{2})[A-Z0-9]{4}\d{14}$/,
		  IL: /^(IL[0-9]{2})\d{19}$/,
		  IQ: /^(IQ[0-9]{2})[A-Z]{4}\d{15}$/,
		  IR: /^(IR[0-9]{2})0\d{2}0\d{18}$/,
		  IS: /^(IS[0-9]{2})\d{22}$/,
		  IT: /^(IT[0-9]{2})[A-Z]{1}\d{10}[A-Z0-9]{12}$/,
		  JO: /^(JO[0-9]{2})[A-Z]{4}\d{22}$/,
		  KW: /^(KW[0-9]{2})[A-Z]{4}[A-Z0-9]{22}$/,
		  KZ: /^(KZ[0-9]{2})\d{3}[A-Z0-9]{13}$/,
		  LB: /^(LB[0-9]{2})\d{4}[A-Z0-9]{20}$/,
		  LC: /^(LC[0-9]{2})[A-Z]{4}[A-Z0-9]{24}$/,
		  LI: /^(LI[0-9]{2})\d{5}[A-Z0-9]{12}$/,
		  LT: /^(LT[0-9]{2})\d{16}$/,
		  LU: /^(LU[0-9]{2})\d{3}[A-Z0-9]{13}$/,
		  LV: /^(LV[0-9]{2})[A-Z]{4}[A-Z0-9]{13}$/,
		  MC: /^(MC[0-9]{2})\d{10}[A-Z0-9]{11}\d{2}$/,
		  MD: /^(MD[0-9]{2})[A-Z0-9]{20}$/,
		  ME: /^(ME[0-9]{2})\d{18}$/,
		  MK: /^(MK[0-9]{2})\d{3}[A-Z0-9]{10}\d{2}$/,
		  MR: /^(MR[0-9]{2})\d{23}$/,
		  MT: /^(MT[0-9]{2})[A-Z]{4}\d{5}[A-Z0-9]{18}$/,
		  MU: /^(MU[0-9]{2})[A-Z]{4}\d{19}[A-Z]{3}$/,
		  MZ: /^(MZ[0-9]{2})\d{21}$/,
		  NL: /^(NL[0-9]{2})[A-Z]{4}\d{10}$/,
		  NO: /^(NO[0-9]{2})\d{11}$/,
		  PK: /^(PK[0-9]{2})[A-Z0-9]{4}\d{16}$/,
		  PL: /^(PL[0-9]{2})\d{24}$/,
		  PS: /^(PS[0-9]{2})[A-Z0-9]{4}\d{21}$/,
		  PT: /^(PT[0-9]{2})\d{21}$/,
		  QA: /^(QA[0-9]{2})[A-Z]{4}[A-Z0-9]{21}$/,
		  RO: /^(RO[0-9]{2})[A-Z]{4}[A-Z0-9]{16}$/,
		  RS: /^(RS[0-9]{2})\d{18}$/,
		  SA: /^(SA[0-9]{2})\d{2}[A-Z0-9]{18}$/,
		  SC: /^(SC[0-9]{2})[A-Z]{4}\d{20}[A-Z]{3}$/,
		  SE: /^(SE[0-9]{2})\d{20}$/,
		  SI: /^(SI[0-9]{2})\d{15}$/,
		  SK: /^(SK[0-9]{2})\d{20}$/,
		  SM: /^(SM[0-9]{2})[A-Z]{1}\d{10}[A-Z0-9]{12}$/,
		  SV: /^(SV[0-9]{2})[A-Z0-9]{4}\d{20}$/,
		  TL: /^(TL[0-9]{2})\d{19}$/,
		  TN: /^(TN[0-9]{2})\d{20}$/,
		  TR: /^(TR[0-9]{2})\d{5}[A-Z0-9]{17}$/,
		  UA: /^(UA[0-9]{2})\d{6}[A-Z0-9]{19}$/,
		  VA: /^(VA[0-9]{2})\d{18}$/,
		  VG: /^(VG[0-9]{2})[A-Z0-9]{4}\d{16}$/,
		  XK: /^(XK[0-9]{2})\d{16}$/
		};
		/**
		 * Check whether string has correct universal IBAN format
		 * The IBAN consists of up to 34 alphanumeric characters, as follows:
		 * Country Code using ISO 3166-1 alpha-2, two letters
		 * check digits, two digits and
		 * Basic Bank Account Number (BBAN), up to 30 alphanumeric characters.
		 * NOTE: Permitted IBAN characters are: digits [0-9] and the 26 latin alphabetic [A-Z]
		 *
		 * @param {string} str - string under validation
		 * @return {boolean}
		 */

		function hasValidIbanFormat(str) {
		  // Strip white spaces and hyphens
		  var strippedStr = str.replace(/[\s\-]+/gi, '').toUpperCase();
		  var isoCountryCode = strippedStr.slice(0, 2).toUpperCase();
		  return isoCountryCode in ibanRegexThroughCountryCode && ibanRegexThroughCountryCode[isoCountryCode].test(strippedStr);
		}
		/**
		   * Check whether string has valid IBAN Checksum
		   * by performing basic mod-97 operation and
		   * the remainder should equal 1
		   * -- Start by rearranging the IBAN by moving the four initial characters to the end of the string
		   * -- Replace each letter in the string with two digits, A -> 10, B = 11, Z = 35
		   * -- Interpret the string as a decimal integer and
		   * -- compute the remainder on division by 97 (mod 97)
		   * Reference: https://en.wikipedia.org/wiki/International_Bank_Account_Number
		   *
		   * @param {string} str
		   * @return {boolean}
		   */


		function hasValidIbanChecksum(str) {
		  var strippedStr = str.replace(/[^A-Z0-9]+/gi, '').toUpperCase(); // Keep only digits and A-Z latin alphabetic

		  var rearranged = strippedStr.slice(4) + strippedStr.slice(0, 4);
		  var alphaCapsReplacedWithDigits = rearranged.replace(/[A-Z]/g, function (char) {
		    return char.charCodeAt(0) - 55;
		  });
		  var remainder = alphaCapsReplacedWithDigits.match(/\d{1,7}/g).reduce(function (acc, value) {
		    return Number(acc + value) % 97;
		  }, '');
		  return remainder === 1;
		}

		function isIBAN$1(str) {
		  (0, _assertString.default)(str);
		  return hasValidIbanFormat(str) && hasValidIbanChecksum(str);
		}

		var locales = Object.keys(ibanRegexThroughCountryCode);
		isIBAN.locales = locales;
		return isIBAN;
	}

	var isBIC = {exports: {}};

	var isISO31661Alpha2 = {};

	var hasRequiredIsISO31661Alpha2;

	function requireIsISO31661Alpha2 () {
		if (hasRequiredIsISO31661Alpha2) return isISO31661Alpha2;
		hasRequiredIsISO31661Alpha2 = 1;

		Object.defineProperty(isISO31661Alpha2, "__esModule", {
		  value: true
		});
		isISO31661Alpha2.default = isISO31661Alpha2$1;
		isISO31661Alpha2.CountryCodes = void 0;

		var _assertString = _interopRequireDefault(requireAssertString());

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		// from https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2
		var validISO31661Alpha2CountriesCodes = new Set

		function isISO31661Alpha2$1(str) {
		  (0, _assertString.default)(str);
		  return validISO31661Alpha2CountriesCodes.has(str.toUpperCase());
		}

		var CountryCodes = validISO31661Alpha2CountriesCodes;
		isISO31661Alpha2.CountryCodes = CountryCodes;
		return isISO31661Alpha2;
	}

	var hasRequiredIsBIC;

	function requireIsBIC () {
		if (hasRequiredIsBIC) return isBIC.exports;
		hasRequiredIsBIC = 1;
		(function (module, exports) {

			Object.defineProperty(exports, "__esModule", {
			  value: true
			});
			exports.default = isBIC;

			var _assertString = _interopRequireDefault(requireAssertString());

			var _isISO31661Alpha = requireIsISO31661Alpha2();

			function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

			// https://en.wikipedia.org/wiki/ISO_9362
			var isBICReg = /^[A-Za-z]{6}[A-Za-z0-9]{2}([A-Za-z0-9]{3})?$/;

			function isBIC(str) {
			  (0, _assertString.default)(str); // toUpperCase() should be removed when a new major version goes out that changes
			  // the regex to [A-Z] (per the spec).

			  var countryCode = str.slice(4, 6).toUpperCase();

			  if (!_isISO31661Alpha.CountryCodes.has(countryCode) && countryCode !== 'XK') {
			    return false;
			  }

			  return isBICReg.test(str);
			}

			module.exports = exports.default;
			module.exports.default = exports.default; 
		} (isBIC, isBIC.exports));
		return isBIC.exports;
	}

	var isMD5 = {exports: {}};

	var hasRequiredIsMD5;

	function requireIsMD5 () {
		if (hasRequiredIsMD5) return isMD5.exports;
		hasRequiredIsMD5 = 1;
		(function (module, exports) {

			Object.defineProperty(exports, "__esModule", {
			  value: true
			});
			exports.default = isMD5;

			var _assertString = _interopRequireDefault(requireAssertString());

			function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

			var md5 = /^[a-f0-9]{32}$/;

			function isMD5(str) {
			  (0, _assertString.default)(str);
			  return md5.test(str);
			}

			module.exports = exports.default;
			module.exports.default = exports.default; 
		} (isMD5, isMD5.exports));
		return isMD5.exports;
	}

	var isHash = {exports: {}};

	var hasRequiredIsHash;

	function requireIsHash () {
		if (hasRequiredIsHash) return isHash.exports;
		hasRequiredIsHash = 1;
		(function (module, exports) {

			Object.defineProperty(exports, "__esModule", {
			  value: true
			});
			exports.default = isHash;

			var _assertString = _interopRequireDefault(requireAssertString());

			function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

			var lengths = {
			  md5: 32,
			  md4: 32,
			  sha1: 40,
			  sha256: 64,
			  sha384: 96,
			  sha512: 128,
			  ripemd128: 32,
			  ripemd160: 40,
			  tiger128: 32,
			  tiger160: 40,
			  tiger192: 48,
			  crc32: 8,
			  crc32b: 8
			};

			function isHash(str, algorithm) {
			  (0, _assertString.default)(str);
			  var hash = new RegExp("^[a-fA-F0-9]{".concat(lengths[algorithm], "}$"));
			  return hash.test(str);
			}

			module.exports = exports.default;
			module.exports.default = exports.default; 
		} (isHash, isHash.exports));
		return isHash.exports;
	}

	var isJWT = {exports: {}};

	var isBase64 = {exports: {}};

	var hasRequiredIsBase64;

	function requireIsBase64 () {
		if (hasRequiredIsBase64) return isBase64.exports;
		hasRequiredIsBase64 = 1;
		(function (module, exports) {

			Object.defineProperty(exports, "__esModule", {
			  value: true
			});
			exports.default = isBase64;

			var _assertString = _interopRequireDefault(requireAssertString());

			var _merge = _interopRequireDefault(requireMerge$1());

			function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

			var notBase64 = /[^A-Z0-9+\/=]/i;
			var urlSafeBase64 = /^[A-Z0-9_\-]*$/i;
			var defaultBase64Options = {
			  urlSafe: false
			};

			function isBase64(str, options) {
			  (0, _assertString.default)(str);
			  options = (0, _merge.default)(options, defaultBase64Options);
			  var len = str.length;

			  if (options.urlSafe) {
			    return urlSafeBase64.test(str);
			  }

			  if (len % 4 !== 0 || notBase64.test(str)) {
			    return false;
			  }

			  var firstPaddingChar = str.indexOf('=');
			  return firstPaddingChar === -1 || firstPaddingChar === len - 1 || firstPaddingChar === len - 2 && str[len - 1] === '=';
			}

			module.exports = exports.default;
			module.exports.default = exports.default; 
		} (isBase64, isBase64.exports));
		return isBase64.exports;
	}

	var hasRequiredIsJWT;

	function requireIsJWT () {
		if (hasRequiredIsJWT) return isJWT.exports;
		hasRequiredIsJWT = 1;
		(function (module, exports) {

			Object.defineProperty(exports, "__esModule", {
			  value: true
			});
			exports.default = isJWT;

			var _assertString = _interopRequireDefault(requireAssertString());

			var _isBase = _interopRequireDefault(requireIsBase64());

			function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

			function isJWT(str) {
			  (0, _assertString.default)(str);
			  var dotSplit = str.split('.');
			  var len = dotSplit.length;

			  if (len > 3 || len < 2) {
			    return false;
			  }

			  return dotSplit.reduce(function (acc, currElem) {
			    return acc && (0, _isBase.default)(currElem, {
			      urlSafe: true
			    });
			  }, true);
			}

			module.exports = exports.default;
			module.exports.default = exports.default; 
		} (isJWT, isJWT.exports));
		return isJWT.exports;
	}

	var isJSON = {exports: {}};

	var hasRequiredIsJSON;

	function requireIsJSON () {
		if (hasRequiredIsJSON) return isJSON.exports;
		hasRequiredIsJSON = 1;
		(function (module, exports) {

			Object.defineProperty(exports, "__esModule", {
			  value: true
			});
			exports.default = isJSON;

			var _assertString = _interopRequireDefault(requireAssertString());

			var _merge = _interopRequireDefault(requireMerge$1());

			function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

			function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

			var default_json_options = {
			  allow_primitives: false
			};

			function isJSON(str, options) {
			  (0, _assertString.default)(str);

			  try {
			    options = (0, _merge.default)(options, default_json_options);
			    var primitives = [];

			    if (options.allow_primitives) {
			      primitives = [null, false, true];
			    }

			    var obj = JSON.parse(str);
			    return primitives.includes(obj) || !!obj && _typeof(obj) === 'object';
			  } catch (e) {
			    /* ignore */
			  }

			  return false;
			}

			module.exports = exports.default;
			module.exports.default = exports.default; 
		} (isJSON, isJSON.exports));
		return isJSON.exports;
	}

	var isEmpty$2 = {exports: {}};

	var hasRequiredIsEmpty$1;

	function requireIsEmpty$1 () {
		if (hasRequiredIsEmpty$1) return isEmpty$2.exports;
		hasRequiredIsEmpty$1 = 1;
		(function (module, exports) {

			Object.defineProperty(exports, "__esModule", {
			  value: true
			});
			exports.default = isEmpty;

			var _assertString = _interopRequireDefault(requireAssertString());

			var _merge = _interopRequireDefault(requireMerge$1());

			function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

			var default_is_empty_options = {
			  ignore_whitespace: false
			};

			function isEmpty(str, options) {
			  (0, _assertString.default)(str);
			  options = (0, _merge.default)(options, default_is_empty_options);
			  return (options.ignore_whitespace ? str.trim().length : str.length) === 0;
			}

			module.exports = exports.default;
			module.exports.default = exports.default; 
		} (isEmpty$2, isEmpty$2.exports));
		return isEmpty$2.exports;
	}

	var isLength = {exports: {}};

	var hasRequiredIsLength;

	function requireIsLength () {
		if (hasRequiredIsLength) return isLength.exports;
		hasRequiredIsLength = 1;
		(function (module, exports) {

			Object.defineProperty(exports, "__esModule", {
			  value: true
			});
			exports.default = isLength;

			var _assertString = _interopRequireDefault(requireAssertString());

			function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

			function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

			/* eslint-disable prefer-rest-params */
			function isLength(str, options) {
			  (0, _assertString.default)(str);
			  var min;
			  var max;

			  if (_typeof(options) === 'object') {
			    min = options.min || 0;
			    max = options.max;
			  } else {
			    // backwards compatibility: isLength(str, min [, max])
			    min = arguments[1] || 0;
			    max = arguments[2];
			  }

			  var presentationSequences = str.match(/(\uFE0F|\uFE0E)/g) || [];
			  var surrogatePairs = str.match(/[\uD800-\uDBFF][\uDC00-\uDFFF]/g) || [];
			  var len = str.length - presentationSequences.length - surrogatePairs.length;
			  return len >= min && (typeof max === 'undefined' || len <= max);
			}

			module.exports = exports.default;
			module.exports.default = exports.default; 
		} (isLength, isLength.exports));
		return isLength.exports;
	}

	var isUUID = {exports: {}};

	var hasRequiredIsUUID;

	function requireIsUUID () {
		if (hasRequiredIsUUID) return isUUID.exports;
		hasRequiredIsUUID = 1;
		(function (module, exports) {

			Object.defineProperty(exports, "__esModule", {
			  value: true
			});
			exports.default = isUUID;

			var _assertString = _interopRequireDefault(requireAssertString());

			function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

			var uuid = {
			  1: /^[0-9A-F]{8}-[0-9A-F]{4}-1[0-9A-F]{3}-[0-9A-F]{4}-[0-9A-F]{12}$/i,
			  2: /^[0-9A-F]{8}-[0-9A-F]{4}-2[0-9A-F]{3}-[0-9A-F]{4}-[0-9A-F]{12}$/i,
			  3: /^[0-9A-F]{8}-[0-9A-F]{4}-3[0-9A-F]{3}-[0-9A-F]{4}-[0-9A-F]{12}$/i,
			  4: /^[0-9A-F]{8}-[0-9A-F]{4}-4[0-9A-F]{3}-[89AB][0-9A-F]{3}-[0-9A-F]{12}$/i,
			  5: /^[0-9A-F]{8}-[0-9A-F]{4}-5[0-9A-F]{3}-[89AB][0-9A-F]{3}-[0-9A-F]{12}$/i,
			  all: /^[0-9A-F]{8}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{12}$/i
			};

			function isUUID(str, version) {
			  (0, _assertString.default)(str);
			  var pattern = uuid[![undefined, null].includes(version) ? version : 'all'];
			  return !!pattern && pattern.test(str);
			}

			module.exports = exports.default;
			module.exports.default = exports.default; 
		} (isUUID, isUUID.exports));
		return isUUID.exports;
	}

	var isMongoId = {exports: {}};

	var hasRequiredIsMongoId;

	function requireIsMongoId () {
		if (hasRequiredIsMongoId) return isMongoId.exports;
		hasRequiredIsMongoId = 1;
		(function (module, exports) {

			Object.defineProperty(exports, "__esModule", {
			  value: true
			});
			exports.default = isMongoId;

			var _assertString = _interopRequireDefault(requireAssertString());

			var _isHexadecimal = _interopRequireDefault(requireIsHexadecimal());

			function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

			function isMongoId(str) {
			  (0, _assertString.default)(str);
			  return (0, _isHexadecimal.default)(str) && str.length === 24;
			}

			module.exports = exports.default;
			module.exports.default = exports.default; 
		} (isMongoId, isMongoId.exports));
		return isMongoId.exports;
	}

	var isAfter = {exports: {}};

	var hasRequiredIsAfter;

	function requireIsAfter () {
		if (hasRequiredIsAfter) return isAfter.exports;
		hasRequiredIsAfter = 1;
		(function (module, exports) {

			Object.defineProperty(exports, "__esModule", {
			  value: true
			});
			exports.default = isAfter;

			var _toDate = _interopRequireDefault(requireToDate());

			function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

			function isAfter(date, options) {
			  // For backwards compatibility:
			  // isAfter(str [, date]), i.e. `options` could be used as argument for the legacy `date`
			  var comparisonDate = (options === null || options === void 0 ? void 0 : options.comparisonDate) || options || Date().toString();
			  var comparison = (0, _toDate.default)(comparisonDate);
			  var original = (0, _toDate.default)(date);
			  return !!(original && comparison && original > comparison);
			}

			module.exports = exports.default;
			module.exports.default = exports.default; 
		} (isAfter, isAfter.exports));
		return isAfter.exports;
	}

	var isBefore = {exports: {}};

	var hasRequiredIsBefore;

	function requireIsBefore () {
		if (hasRequiredIsBefore) return isBefore.exports;
		hasRequiredIsBefore = 1;
		(function (module, exports) {

			Object.defineProperty(exports, "__esModule", {
			  value: true
			});
			exports.default = isBefore;

			var _assertString = _interopRequireDefault(requireAssertString());

			var _toDate = _interopRequireDefault(requireToDate());

			function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

			function isBefore(str) {
			  var date = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : String(new Date());
			  (0, _assertString.default)(str);
			  var comparison = (0, _toDate.default)(date);
			  var original = (0, _toDate.default)(str);
			  return !!(original && comparison && original < comparison);
			}

			module.exports = exports.default;
			module.exports.default = exports.default; 
		} (isBefore, isBefore.exports));
		return isBefore.exports;
	}

	var isIn = {exports: {}};

	var hasRequiredIsIn;

	function requireIsIn () {
		if (hasRequiredIsIn) return isIn.exports;
		hasRequiredIsIn = 1;
		(function (module, exports) {

			Object.defineProperty(exports, "__esModule", {
			  value: true
			});
			exports.default = isIn;

			var _assertString = _interopRequireDefault(requireAssertString());

			var _toString = _interopRequireDefault(requireToString());

			function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

			function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

			function isIn(str, options) {
			  (0, _assertString.default)(str);
			  var i;

			  if (Object.prototype.toString.call(options) === '[object Array]') {
			    var array = [];

			    for (i in options) {
			      // https://github.com/gotwarlost/istanbul/blob/master/ignoring-code-for-coverage.md#ignoring-code-for-coverage-purposes
			      // istanbul ignore else
			      if ({}.hasOwnProperty.call(options, i)) {
			        array[i] = (0, _toString.default)(options[i]);
			      }
			    }

			    return array.indexOf(str) >= 0;
			  } else if (_typeof(options) === 'object') {
			    return options.hasOwnProperty(str);
			  } else if (options && typeof options.indexOf === 'function') {
			    return options.indexOf(str) >= 0;
			  }

			  return false;
			}

			module.exports = exports.default;
			module.exports.default = exports.default; 
		} (isIn, isIn.exports));
		return isIn.exports;
	}

	var isLuhnNumber = {exports: {}};

	var hasRequiredIsLuhnNumber;

	function requireIsLuhnNumber () {
		if (hasRequiredIsLuhnNumber) return isLuhnNumber.exports;
		hasRequiredIsLuhnNumber = 1;
		(function (module, exports) {

			Object.defineProperty(exports, "__esModule", {
			  value: true
			});
			exports.default = isLuhnNumber;

			var _assertString = _interopRequireDefault(requireAssertString());

			function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

			function isLuhnNumber(str) {
			  (0, _assertString.default)(str);
			  var sanitized = str.replace(/[- ]+/g, '');
			  var sum = 0;
			  var digit;
			  var tmpNum;
			  var shouldDouble;

			  for (var i = sanitized.length - 1; i >= 0; i--) {
			    digit = sanitized.substring(i, i + 1);
			    tmpNum = parseInt(digit, 10);

			    if (shouldDouble) {
			      tmpNum *= 2;

			      if (tmpNum >= 10) {
			        sum += tmpNum % 10 + 1;
			      } else {
			        sum += tmpNum;
			      }
			    } else {
			      sum += tmpNum;
			    }

			    shouldDouble = !shouldDouble;
			  }

			  return !!(sum % 10 === 0 ? sanitized : false);
			}

			module.exports = exports.default;
			module.exports.default = exports.default; 
		} (isLuhnNumber, isLuhnNumber.exports));
		return isLuhnNumber.exports;
	}

	var isCreditCard = {exports: {}};

	var hasRequiredIsCreditCard;

	function requireIsCreditCard () {
		if (hasRequiredIsCreditCard) return isCreditCard.exports;
		hasRequiredIsCreditCard = 1;
		(function (module, exports) {

			Object.defineProperty(exports, "__esModule", {
			  value: true
			});
			exports.default = isCreditCard;

			var _assertString = _interopRequireDefault(requireAssertString());

			var _isLuhnNumber = _interopRequireDefault(requireIsLuhnNumber());

			function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

			var cards = {
			  amex: /^3[47][0-9]{13}$/,
			  dinersclub: /^3(?:0[0-5]|[68][0-9])[0-9]{11}$/,
			  discover: /^6(?:011|5[0-9][0-9])[0-9]{12,15}$/,
			  jcb: /^(?:2131|1800|35\d{3})\d{11}$/,
			  mastercard: /^5[1-5][0-9]{2}|(222[1-9]|22[3-9][0-9]|2[3-6][0-9]{2}|27[01][0-9]|2720)[0-9]{12}$/,
			  // /^[25][1-7][0-9]{14}$/;
			  unionpay: /^(6[27][0-9]{14}|^(81[0-9]{14,17}))$/,
			  visa: /^(?:4[0-9]{12})(?:[0-9]{3,6})?$/
			};
			/* eslint-disable max-len */

			var allCards = /^(?:4[0-9]{12}(?:[0-9]{3,6})?|5[1-5][0-9]{14}|(222[1-9]|22[3-9][0-9]|2[3-6][0-9]{2}|27[01][0-9]|2720)[0-9]{12}|6(?:011|5[0-9][0-9])[0-9]{12,15}|3[47][0-9]{13}|3(?:0[0-5]|[68][0-9])[0-9]{11}|(?:2131|1800|35\d{3})\d{11}|6[27][0-9]{14}|^(81[0-9]{14,17}))$/;
			/* eslint-enable max-len */

			function isCreditCard(card) {
			  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
			  (0, _assertString.default)(card);
			  var provider = options.provider;
			  var sanitized = card.replace(/[- ]+/g, '');

			  if (provider && provider.toLowerCase() in cards) {
			    // specific provider in the list
			    if (!cards[provider.toLowerCase()].test(sanitized)) {
			      return false;
			    }
			  } else if (provider && !(provider.toLowerCase() in cards)) {
			    /* specific provider not in the list */
			    throw new Error("".concat(provider, " is not a valid credit card provider."));
			  } else if (!allCards.test(sanitized)) {
			    // no specific provider
			    return false;
			  }

			  return (0, _isLuhnNumber.default)(card);
			}

			module.exports = exports.default;
			module.exports.default = exports.default; 
		} (isCreditCard, isCreditCard.exports));
		return isCreditCard.exports;
	}

	var isIdentityCard = {exports: {}};

	var hasRequiredIsIdentityCard;

	function requireIsIdentityCard () {
		if (hasRequiredIsIdentityCard) return isIdentityCard.exports;
		hasRequiredIsIdentityCard = 1;
		(function (module, exports) {

			Object.defineProperty(exports, "__esModule", {
			  value: true
			});
			exports.default = isIdentityCard;

			var _assertString = _interopRequireDefault(requireAssertString());

			var _isInt = _interopRequireDefault(requireIsInt());

			function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

			var validators = {
			  PL: function PL(str) {
			    (0, _assertString.default)(str);
			    var weightOfDigits = {
			      1: 1,
			      2: 3,
			      3: 7,
			      4: 9,
			      5: 1,
			      6: 3,
			      7: 7,
			      8: 9,
			      9: 1,
			      10: 3,
			      11: 0
			    };

			    if (str != null && str.length === 11 && (0, _isInt.default)(str, {
			      allow_leading_zeroes: true
			    })) {
			      var digits = str.split('').slice(0, -1);
			      var sum = digits.reduce(function (acc, digit, index) {
			        return acc + Number(digit) * weightOfDigits[index + 1];
			      }, 0);
			      var modulo = sum % 10;
			      var lastDigit = Number(str.charAt(str.length - 1));

			      if (modulo === 0 && lastDigit === 0 || lastDigit === 10 - modulo) {
			        return true;
			      }
			    }

			    return false;
			  },
			  ES: function ES(str) {
			    (0, _assertString.default)(str);
			    var DNI = /^[0-9X-Z][0-9]{7}[TRWAGMYFPDXBNJZSQVHLCKE]$/;
			    var charsValue = {
			      X: 0,
			      Y: 1,
			      Z: 2
			    };
			    var controlDigits = ['T', 'R', 'W', 'A', 'G', 'M', 'Y', 'F', 'P', 'D', 'X', 'B', 'N', 'J', 'Z', 'S', 'Q', 'V', 'H', 'L', 'C', 'K', 'E']; // sanitize user input

			    var sanitized = str.trim().toUpperCase(); // validate the data structure

			    if (!DNI.test(sanitized)) {
			      return false;
			    } // validate the control digit


			    var number = sanitized.slice(0, -1).replace(/[X,Y,Z]/g, function (char) {
			      return charsValue[char];
			    });
			    return sanitized.endsWith(controlDigits[number % 23]);
			  },
			  FI: function FI(str) {
			    // https://dvv.fi/en/personal-identity-code#:~:text=control%20character%20for%20a-,personal,-identity%20code%20calculated
			    (0, _assertString.default)(str);

			    if (str.length !== 11) {
			      return false;
			    }

			    if (!str.match(/^\d{6}[\-A\+]\d{3}[0-9ABCDEFHJKLMNPRSTUVWXY]{1}$/)) {
			      return false;
			    }

			    var checkDigits = '0123456789ABCDEFHJKLMNPRSTUVWXY';
			    var idAsNumber = parseInt(str.slice(0, 6), 10) * 1000 + parseInt(str.slice(7, 10), 10);
			    var remainder = idAsNumber % 31;
			    var checkDigit = checkDigits[remainder];
			    return checkDigit === str.slice(10, 11);
			  },
			  IN: function IN(str) {
			    var DNI = /^[1-9]\d{3}\s?\d{4}\s?\d{4}$/; // multiplication table

			    var d = [[0, 1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 0, 6, 7, 8, 9, 5], [2, 3, 4, 0, 1, 7, 8, 9, 5, 6], [3, 4, 0, 1, 2, 8, 9, 5, 6, 7], [4, 0, 1, 2, 3, 9, 5, 6, 7, 8], [5, 9, 8, 7, 6, 0, 4, 3, 2, 1], [6, 5, 9, 8, 7, 1, 0, 4, 3, 2], [7, 6, 5, 9, 8, 2, 1, 0, 4, 3], [8, 7, 6, 5, 9, 3, 2, 1, 0, 4], [9, 8, 7, 6, 5, 4, 3, 2, 1, 0]]; // permutation table

			    var p = [[0, 1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 5, 7, 6, 2, 8, 3, 0, 9, 4], [5, 8, 0, 3, 7, 9, 6, 1, 4, 2], [8, 9, 1, 6, 0, 4, 3, 5, 2, 7], [9, 4, 5, 3, 1, 2, 6, 8, 7, 0], [4, 2, 8, 6, 5, 7, 3, 9, 0, 1], [2, 7, 9, 3, 8, 0, 6, 4, 1, 5], [7, 0, 4, 6, 9, 1, 3, 2, 5, 8]]; // sanitize user input

			    var sanitized = str.trim(); // validate the data structure

			    if (!DNI.test(sanitized)) {
			      return false;
			    }

			    var c = 0;
			    var invertedArray = sanitized.replace(/\s/g, '').split('').map(Number).reverse();
			    invertedArray.forEach(function (val, i) {
			      c = d[c][p[i % 8][val]];
			    });
			    return c === 0;
			  },
			  IR: function IR(str) {
			    if (!str.match(/^\d{10}$/)) return false;
			    str = "0000".concat(str).slice(str.length - 6);
			    if (parseInt(str.slice(3, 9), 10) === 0) return false;
			    var lastNumber = parseInt(str.slice(9, 10), 10);
			    var sum = 0;

			    for (var i = 0; i < 9; i++) {
			      sum += parseInt(str.slice(i, i + 1), 10) * (10 - i);
			    }

			    sum %= 11;
			    return sum < 2 && lastNumber === sum || sum >= 2 && lastNumber === 11 - sum;
			  },
			  IT: function IT(str) {
			    if (str.length !== 9) return false;
			    if (str === 'CA00000AA') return false; // https://it.wikipedia.org/wiki/Carta_d%27identit%C3%A0_elettronica_italiana

			    return str.search(/C[A-Z][0-9]{5}[A-Z]{2}/i) > -1;
			  },
			  NO: function NO(str) {
			    var sanitized = str.trim();
			    if (isNaN(Number(sanitized))) return false;
			    if (sanitized.length !== 11) return false;
			    if (sanitized === '00000000000') return false; // https://no.wikipedia.org/wiki/F%C3%B8dselsnummer

			    var f = sanitized.split('').map(Number);
			    var k1 = (11 - (3 * f[0] + 7 * f[1] + 6 * f[2] + 1 * f[3] + 8 * f[4] + 9 * f[5] + 4 * f[6] + 5 * f[7] + 2 * f[8]) % 11) % 11;
			    var k2 = (11 - (5 * f[0] + 4 * f[1] + 3 * f[2] + 2 * f[3] + 7 * f[4] + 6 * f[5] + 5 * f[6] + 4 * f[7] + 3 * f[8] + 2 * k1) % 11) % 11;
			    if (k1 !== f[9] || k2 !== f[10]) return false;
			    return true;
			  },
			  TH: function TH(str) {
			    if (!str.match(/^[1-8]\d{12}$/)) return false; // validate check digit

			    var sum = 0;

			    for (var i = 0; i < 12; i++) {
			      sum += parseInt(str[i], 10) * (13 - i);
			    }

			    return str[12] === ((11 - sum % 11) % 10).toString();
			  },
			  LK: function LK(str) {
			    var old_nic = /^[1-9]\d{8}[vx]$/i;
			    var new_nic = /^[1-9]\d{11}$/i;
			    if (str.length === 10 && old_nic.test(str)) return true;else if (str.length === 12 && new_nic.test(str)) return true;
			    return false;
			  },
			  'he-IL': function heIL(str) {
			    var DNI = /^\d{9}$/; // sanitize user input

			    var sanitized = str.trim(); // validate the data structure

			    if (!DNI.test(sanitized)) {
			      return false;
			    }

			    var id = sanitized;
			    var sum = 0,
			        incNum;

			    for (var i = 0; i < id.length; i++) {
			      incNum = Number(id[i]) * (i % 2 + 1); // Multiply number by 1 or 2

			      sum += incNum > 9 ? incNum - 9 : incNum; // Sum the digits up and add to total
			    }

			    return sum % 10 === 0;
			  },
			  'ar-LY': function arLY(str) {
			    // Libya National Identity Number NIN is 12 digits, the first digit is either 1 or 2
			    var NIN = /^(1|2)\d{11}$/; // sanitize user input

			    var sanitized = str.trim(); // validate the data structure

			    if (!NIN.test(sanitized)) {
			      return false;
			    }

			    return true;
			  },
			  'ar-TN': function arTN(str) {
			    var DNI = /^\d{8}$/; // sanitize user input

			    var sanitized = str.trim(); // validate the data structure

			    if (!DNI.test(sanitized)) {
			      return false;
			    }

			    return true;
			  },
			  'zh-CN': function zhCN(str) {
			    var provincesAndCities = ['11', // 北京
			    '12', // 天津
			    '13', // 河北
			    '14', // 山西
			    '15', // 内蒙古
			    '21', // 辽宁
			    '22', // 吉林
			    '23', // 黑龙江
			    '31', // 上海
			    '32', // 江苏
			    '33', // 浙江
			    '34', // 安徽
			    '35', // 福建
			    '36', // 江西
			    '37', // 山东
			    '41', // 河南
			    '42', // 湖北
			    '43', // 湖南
			    '44', // 广东
			    '45', // 广西
			    '46', // 海南
			    '50', // 重庆
			    '51', // 四川
			    '52', // 贵州
			    '53', // 云南
			    '54', // 西藏
			    '61', // 陕西
			    '62', // 甘肃
			    '63', // 青海
			    '64', // 宁夏
			    '65', // 新疆
			    '71', // 台湾
			    '81', // 香港
			    '82', // 澳门
			    '91' // 国外
			    ];
			    var powers = ['7', '9', '10', '5', '8', '4', '2', '1', '6', '3', '7', '9', '10', '5', '8', '4', '2'];
			    var parityBit = ['1', '0', 'X', '9', '8', '7', '6', '5', '4', '3', '2'];

			    var checkAddressCode = function checkAddressCode(addressCode) {
			      return provincesAndCities.includes(addressCode);
			    };

			    var checkBirthDayCode = function checkBirthDayCode(birDayCode) {
			      var yyyy = parseInt(birDayCode.substring(0, 4), 10);
			      var mm = parseInt(birDayCode.substring(4, 6), 10);
			      var dd = parseInt(birDayCode.substring(6), 10);
			      var xdata = new Date(yyyy, mm - 1, dd);

			      if (xdata > new Date()) {
			        return false; // eslint-disable-next-line max-len
			      } else if (xdata.getFullYear() === yyyy && xdata.getMonth() === mm - 1 && xdata.getDate() === dd) {
			        return true;
			      }

			      return false;
			    };

			    var getParityBit = function getParityBit(idCardNo) {
			      var id17 = idCardNo.substring(0, 17);
			      var power = 0;

			      for (var i = 0; i < 17; i++) {
			        power += parseInt(id17.charAt(i), 10) * parseInt(powers[i], 10);
			      }

			      var mod = power % 11;
			      return parityBit[mod];
			    };

			    var checkParityBit = function checkParityBit(idCardNo) {
			      return getParityBit(idCardNo) === idCardNo.charAt(17).toUpperCase();
			    };

			    var check15IdCardNo = function check15IdCardNo(idCardNo) {
			      var check = /^[1-9]\d{7}((0[1-9])|(1[0-2]))((0[1-9])|([1-2][0-9])|(3[0-1]))\d{3}$/.test(idCardNo);
			      if (!check) return false;
			      var addressCode = idCardNo.substring(0, 2);
			      check = checkAddressCode(addressCode);
			      if (!check) return false;
			      var birDayCode = "19".concat(idCardNo.substring(6, 12));
			      check = checkBirthDayCode(birDayCode);
			      if (!check) return false;
			      return true;
			    };

			    var check18IdCardNo = function check18IdCardNo(idCardNo) {
			      var check = /^[1-9]\d{5}[1-9]\d{3}((0[1-9])|(1[0-2]))((0[1-9])|([1-2][0-9])|(3[0-1]))\d{3}(\d|x|X)$/.test(idCardNo);
			      if (!check) return false;
			      var addressCode = idCardNo.substring(0, 2);
			      check = checkAddressCode(addressCode);
			      if (!check) return false;
			      var birDayCode = idCardNo.substring(6, 14);
			      check = checkBirthDayCode(birDayCode);
			      if (!check) return false;
			      return checkParityBit(idCardNo);
			    };

			    var checkIdCardNo = function checkIdCardNo(idCardNo) {
			      var check = /^\d{15}|(\d{17}(\d|x|X))$/.test(idCardNo);
			      if (!check) return false;

			      if (idCardNo.length === 15) {
			        return check15IdCardNo(idCardNo);
			      }

			      return check18IdCardNo(idCardNo);
			    };

			    return checkIdCardNo(str);
			  },
			  'zh-HK': function zhHK(str) {
			    // sanitize user input
			    str = str.trim(); // HKID number starts with 1 or 2 letters, followed by 6 digits,
			    // then a checksum contained in square / round brackets or nothing

			    var regexHKID = /^[A-Z]{1,2}[0-9]{6}((\([0-9A]\))|(\[[0-9A]\])|([0-9A]))$/;
			    var regexIsDigit = /^[0-9]$/; // convert the user input to all uppercase and apply regex

			    str = str.toUpperCase();
			    if (!regexHKID.test(str)) return false;
			    str = str.replace(/\[|\]|\(|\)/g, '');
			    if (str.length === 8) str = "3".concat(str);
			    var checkSumVal = 0;

			    for (var i = 0; i <= 7; i++) {
			      var convertedChar = void 0;
			      if (!regexIsDigit.test(str[i])) convertedChar = (str[i].charCodeAt(0) - 55) % 11;else convertedChar = str[i];
			      checkSumVal += convertedChar * (9 - i);
			    }

			    checkSumVal %= 11;
			    var checkSumConverted;
			    if (checkSumVal === 0) checkSumConverted = '0';else if (checkSumVal === 1) checkSumConverted = 'A';else checkSumConverted = String(11 - checkSumVal);
			    if (checkSumConverted === str[str.length - 1]) return true;
			    return false;
			  },
			  'zh-TW': function zhTW(str) {
			    var ALPHABET_CODES = {
			      A: 10,
			      B: 11,
			      C: 12,
			      D: 13,
			      E: 14,
			      F: 15,
			      G: 16,
			      H: 17,
			      I: 34,
			      J: 18,
			      K: 19,
			      L: 20,
			      M: 21,
			      N: 22,
			      O: 35,
			      P: 23,
			      Q: 24,
			      R: 25,
			      S: 26,
			      T: 27,
			      U: 28,
			      V: 29,
			      W: 32,
			      X: 30,
			      Y: 31,
			      Z: 33
			    };
			    var sanitized = str.trim().toUpperCase();
			    if (!/^[A-Z][0-9]{9}$/.test(sanitized)) return false;
			    return Array.from(sanitized).reduce(function (sum, number, index) {
			      if (index === 0) {
			        var code = ALPHABET_CODES[number];
			        return code % 10 * 9 + Math.floor(code / 10);
			      }

			      if (index === 9) {
			        return (10 - sum % 10 - Number(number)) % 10 === 0;
			      }

			      return sum + Number(number) * (9 - index);
			    }, 0);
			  }
			};

			function isIdentityCard(str, locale) {
			  (0, _assertString.default)(str);

			  if (locale in validators) {
			    return validators[locale](str);
			  } else if (locale === 'any') {
			    for (var key in validators) {
			      // https://github.com/gotwarlost/istanbul/blob/master/ignoring-code-for-coverage.md#ignoring-code-for-coverage-purposes
			      // istanbul ignore else
			      if (validators.hasOwnProperty(key)) {
			        var validator = validators[key];

			        if (validator(str)) {
			          return true;
			        }
			      }
			    }

			    return false;
			  }

			  throw new Error("Invalid locale '".concat(locale, "'"));
			}

			module.exports = exports.default;
			module.exports.default = exports.default; 
		} (isIdentityCard, isIdentityCard.exports));
		return isIdentityCard.exports;
	}

	var isEAN = {exports: {}};

	var hasRequiredIsEAN;

	function requireIsEAN () {
		if (hasRequiredIsEAN) return isEAN.exports;
		hasRequiredIsEAN = 1;
		(function (module, exports) {

			Object.defineProperty(exports, "__esModule", {
			  value: true
			});
			exports.default = isEAN;

			var _assertString = _interopRequireDefault(requireAssertString());

			function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

			/**
			 * The most commonly used EAN standard is
			 * the thirteen-digit EAN-13, while the
			 * less commonly used 8-digit EAN-8 barcode was
			 * introduced for use on small packages.
			 * Also EAN/UCC-14 is used for Grouping of individual
			 * trade items above unit level(Intermediate, Carton or Pallet).
			 * For more info about EAN-14 checkout: https://www.gtin.info/itf-14-barcodes/
			 * EAN consists of:
			 * GS1 prefix, manufacturer code, product code and check digit
			 * Reference: https://en.wikipedia.org/wiki/International_Article_Number
			 * Reference: https://www.gtin.info/
			 */

			/**
			 * Define EAN Lenghts; 8 for EAN-8; 13 for EAN-13; 14 for EAN-14
			 * and Regular Expression for valid EANs (EAN-8, EAN-13, EAN-14),
			 * with exact numberic matching of 8 or 13 or 14 digits [0-9]
			 */
			var LENGTH_EAN_8 = 8;
			var LENGTH_EAN_14 = 14;
			var validEanRegex = /^(\d{8}|\d{13}|\d{14})$/;
			/**
			 * Get position weight given:
			 * EAN length and digit index/position
			 *
			 * @param {number} length
			 * @param {number} index
			 * @return {number}
			 */

			function getPositionWeightThroughLengthAndIndex(length, index) {
			  if (length === LENGTH_EAN_8 || length === LENGTH_EAN_14) {
			    return index % 2 === 0 ? 3 : 1;
			  }

			  return index % 2 === 0 ? 1 : 3;
			}
			/**
			 * Calculate EAN Check Digit
			 * Reference: https://en.wikipedia.org/wiki/International_Article_Number#Calculation_of_checksum_digit
			 *
			 * @param {string} ean
			 * @return {number}
			 */


			function calculateCheckDigit(ean) {
			  var checksum = ean.slice(0, -1).split('').map(function (char, index) {
			    return Number(char) * getPositionWeightThroughLengthAndIndex(ean.length, index);
			  }).reduce(function (acc, partialSum) {
			    return acc + partialSum;
			  }, 0);
			  var remainder = 10 - checksum % 10;
			  return remainder < 10 ? remainder : 0;
			}
			/**
			 * Check if string is valid EAN:
			 * Matches EAN-8/EAN-13/EAN-14 regex
			 * Has valid check digit.
			 *
			 * @param {string} str
			 * @return {boolean}
			 */


			function isEAN(str) {
			  (0, _assertString.default)(str);
			  var actualCheckDigit = Number(str.slice(-1));
			  return validEanRegex.test(str) && actualCheckDigit === calculateCheckDigit(str);
			}

			module.exports = exports.default;
			module.exports.default = exports.default; 
		} (isEAN, isEAN.exports));
		return isEAN.exports;
	}

	var isISIN = {exports: {}};

	var hasRequiredIsISIN;

	function requireIsISIN () {
		if (hasRequiredIsISIN) return isISIN.exports;
		hasRequiredIsISIN = 1;
		(function (module, exports) {

			Object.defineProperty(exports, "__esModule", {
			  value: true
			});
			exports.default = isISIN;

			var _assertString = _interopRequireDefault(requireAssertString());

			function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

			var isin = /^[A-Z]{2}[0-9A-Z]{9}[0-9]$/; // this link details how the check digit is calculated:
			// https://www.isin.org/isin-format/. it is a little bit
			// odd in that it works with digits, not numbers. in order
			// to make only one pass through the ISIN characters, the
			// each alpha character is handled as 2 characters within
			// the loop.

			function isISIN(str) {
			  (0, _assertString.default)(str);

			  if (!isin.test(str)) {
			    return false;
			  }

			  var double = true;
			  var sum = 0; // convert values

			  for (var i = str.length - 2; i >= 0; i--) {
			    if (str[i] >= 'A' && str[i] <= 'Z') {
			      var value = str[i].charCodeAt(0) - 55;
			      var lo = value % 10;
			      var hi = Math.trunc(value / 10); // letters have two digits, so handle the low order
			      // and high order digits separately.

			      for (var _i = 0, _arr = [lo, hi]; _i < _arr.length; _i++) {
			        var digit = _arr[_i];

			        if (double) {
			          if (digit >= 5) {
			            sum += 1 + (digit - 5) * 2;
			          } else {
			            sum += digit * 2;
			          }
			        } else {
			          sum += digit;
			        }

			        double = !double;
			      }
			    } else {
			      var _digit = str[i].charCodeAt(0) - '0'.charCodeAt(0);

			      if (double) {
			        if (_digit >= 5) {
			          sum += 1 + (_digit - 5) * 2;
			        } else {
			          sum += _digit * 2;
			        }
			      } else {
			        sum += _digit;
			      }

			      double = !double;
			    }
			  }

			  var check = Math.trunc((sum + 9) / 10) * 10 - sum;
			  return +str[str.length - 1] === check;
			}

			module.exports = exports.default;
			module.exports.default = exports.default; 
		} (isISIN, isISIN.exports));
		return isISIN.exports;
	}

	var isISBN = {exports: {}};

	var hasRequiredIsISBN;

	function requireIsISBN () {
		if (hasRequiredIsISBN) return isISBN.exports;
		hasRequiredIsISBN = 1;
		(function (module, exports) {

			Object.defineProperty(exports, "__esModule", {
			  value: true
			});
			exports.default = isISBN;

			var _assertString = _interopRequireDefault(requireAssertString());

			function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

			var possibleIsbn10 = /^(?:[0-9]{9}X|[0-9]{10})$/;
			var possibleIsbn13 = /^(?:[0-9]{13})$/;
			var factor = [1, 3];

			function isISBN(isbn, options) {
			  (0, _assertString.default)(isbn); // For backwards compatibility:
			  // isISBN(str [, version]), i.e. `options` could be used as argument for the legacy `version`

			  var version = String((options === null || options === void 0 ? void 0 : options.version) || options);

			  if (!(options !== null && options !== void 0 && options.version || options)) {
			    return isISBN(isbn, {
			      version: 10
			    }) || isISBN(isbn, {
			      version: 13
			    });
			  }

			  var sanitizedIsbn = isbn.replace(/[\s-]+/g, '');
			  var checksum = 0;

			  if (version === '10') {
			    if (!possibleIsbn10.test(sanitizedIsbn)) {
			      return false;
			    }

			    for (var i = 0; i < version - 1; i++) {
			      checksum += (i + 1) * sanitizedIsbn.charAt(i);
			    }

			    if (sanitizedIsbn.charAt(9) === 'X') {
			      checksum += 10 * 10;
			    } else {
			      checksum += 10 * sanitizedIsbn.charAt(9);
			    }

			    if (checksum % 11 === 0) {
			      return true;
			    }
			  } else if (version === '13') {
			    if (!possibleIsbn13.test(sanitizedIsbn)) {
			      return false;
			    }

			    for (var _i = 0; _i < 12; _i++) {
			      checksum += factor[_i % 2] * sanitizedIsbn.charAt(_i);
			    }

			    if (sanitizedIsbn.charAt(12) - (10 - checksum % 10) % 10 === 0) {
			      return true;
			    }
			  }

			  return false;
			}

			module.exports = exports.default;
			module.exports.default = exports.default; 
		} (isISBN, isISBN.exports));
		return isISBN.exports;
	}

	var isISSN = {exports: {}};

	var hasRequiredIsISSN;

	function requireIsISSN () {
		if (hasRequiredIsISSN) return isISSN.exports;
		hasRequiredIsISSN = 1;
		(function (module, exports) {

			Object.defineProperty(exports, "__esModule", {
			  value: true
			});
			exports.default = isISSN;

			var _assertString = _interopRequireDefault(requireAssertString());

			function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

			var issn = '^\\d{4}-?\\d{3}[\\dX]$';

			function isISSN(str) {
			  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
			  (0, _assertString.default)(str);
			  var testIssn = issn;
			  testIssn = options.require_hyphen ? testIssn.replace('?', '') : testIssn;
			  testIssn = options.case_sensitive ? new RegExp(testIssn) : new RegExp(testIssn, 'i');

			  if (!testIssn.test(str)) {
			    return false;
			  }

			  var digits = str.replace('-', '').toUpperCase();
			  var checksum = 0;

			  for (var i = 0; i < digits.length; i++) {
			    var digit = digits[i];
			    checksum += (digit === 'X' ? 10 : +digit) * (8 - i);
			  }

			  return checksum % 11 === 0;
			}

			module.exports = exports.default;
			module.exports.default = exports.default; 
		} (isISSN, isISSN.exports));
		return isISSN.exports;
	}

	var isTaxID = {exports: {}};

	var algorithms = {};

	var hasRequiredAlgorithms;

	function requireAlgorithms () {
		if (hasRequiredAlgorithms) return algorithms;
		hasRequiredAlgorithms = 1;

		Object.defineProperty(algorithms, "__esModule", {
		  value: true
		});
		algorithms.iso7064Check = iso7064Check;
		algorithms.luhnCheck = luhnCheck;
		algorithms.reverseMultiplyAndSum = reverseMultiplyAndSum;
		algorithms.verhoeffCheck = verhoeffCheck;

		/**
		 * Algorithmic validation functions
		 * May be used as is or implemented in the workflow of other validators.
		 */

		/*
		 * ISO 7064 validation function
		 * Called with a string of numbers (incl. check digit)
		 * to validate according to ISO 7064 (MOD 11, 10).
		 */
		function iso7064Check(str) {
		  var checkvalue = 10;

		  for (var i = 0; i < str.length - 1; i++) {
		    checkvalue = (parseInt(str[i], 10) + checkvalue) % 10 === 0 ? 10 * 2 % 11 : (parseInt(str[i], 10) + checkvalue) % 10 * 2 % 11;
		  }

		  checkvalue = checkvalue === 1 ? 0 : 11 - checkvalue;
		  return checkvalue === parseInt(str[10], 10);
		}
		/*
		 * Luhn (mod 10) validation function
		 * Called with a string of numbers (incl. check digit)
		 * to validate according to the Luhn algorithm.
		 */


		function luhnCheck(str) {
		  var checksum = 0;
		  var second = false;

		  for (var i = str.length - 1; i >= 0; i--) {
		    if (second) {
		      var product = parseInt(str[i], 10) * 2;

		      if (product > 9) {
		        // sum digits of product and add to checksum
		        checksum += product.toString().split('').map(function (a) {
		          return parseInt(a, 10);
		        }).reduce(function (a, b) {
		          return a + b;
		        }, 0);
		      } else {
		        checksum += product;
		      }
		    } else {
		      checksum += parseInt(str[i], 10);
		    }

		    second = !second;
		  }

		  return checksum % 10 === 0;
		}
		/*
		 * Reverse TIN multiplication and summation helper function
		 * Called with an array of single-digit integers and a base multiplier
		 * to calculate the sum of the digits multiplied in reverse.
		 * Normally used in variations of MOD 11 algorithmic checks.
		 */


		function reverseMultiplyAndSum(digits, base) {
		  var total = 0;

		  for (var i = 0; i < digits.length; i++) {
		    total += digits[i] * (base - i);
		  }

		  return total;
		}
		/*
		 * Verhoeff validation helper function
		 * Called with a string of numbers
		 * to validate according to the Verhoeff algorithm.
		 */


		function verhoeffCheck(str) {
		  var d_table = [[0, 1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 0, 6, 7, 8, 9, 5], [2, 3, 4, 0, 1, 7, 8, 9, 5, 6], [3, 4, 0, 1, 2, 8, 9, 5, 6, 7], [4, 0, 1, 2, 3, 9, 5, 6, 7, 8], [5, 9, 8, 7, 6, 0, 4, 3, 2, 1], [6, 5, 9, 8, 7, 1, 0, 4, 3, 2], [7, 6, 5, 9, 8, 2, 1, 0, 4, 3], [8, 7, 6, 5, 9, 3, 2, 1, 0, 4], [9, 8, 7, 6, 5, 4, 3, 2, 1, 0]];
		  var p_table = [[0, 1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 5, 7, 6, 2, 8, 3, 0, 9, 4], [5, 8, 0, 3, 7, 9, 6, 1, 4, 2], [8, 9, 1, 6, 0, 4, 3, 5, 2, 7], [9, 4, 5, 3, 1, 2, 6, 8, 7, 0], [4, 2, 8, 6, 5, 7, 3, 9, 0, 1], [2, 7, 9, 3, 8, 0, 6, 4, 1, 5], [7, 0, 4, 6, 9, 1, 3, 2, 5, 8]]; // Copy (to prevent replacement) and reverse

		  var str_copy = str.split('').reverse().join('');
		  var checksum = 0;

		  for (var i = 0; i < str_copy.length; i++) {
		    checksum = d_table[checksum][p_table[i % 8][parseInt(str_copy[i], 10)]];
		  }

		  return checksum === 0;
		}
		return algorithms;
	}

	var hasRequiredIsTaxID;

	function requireIsTaxID () {
		if (hasRequiredIsTaxID) return isTaxID.exports;
		hasRequiredIsTaxID = 1;
		(function (module, exports) {

			function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

			Object.defineProperty(exports, "__esModule", {
			  value: true
			});
			exports.default = isTaxID;

			var _assertString = _interopRequireDefault(requireAssertString());

			var algorithms = _interopRequireWildcard(requireAlgorithms());

			var _isDate = _interopRequireDefault(requireIsDate());

			function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

			function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

			function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

			function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

			function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

			function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

			function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

			function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

			function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

			/**
			 * TIN Validation
			 * Validates Tax Identification Numbers (TINs) from the US, EU member states and the United Kingdom.
			 *
			 * EU-UK:
			 * National TIN validity is calculated using public algorithms as made available by DG TAXUD.
			 *
			 * See `https://ec.europa.eu/taxation_customs/tin/specs/FS-TIN%20Algorithms-Public.docx` for more information.
			 *
			 * US:
			 * An Employer Identification Number (EIN), also known as a Federal Tax Identification Number,
			 *  is used to identify a business entity.
			 *
			 * NOTES:
			 *  - Prefix 47 is being reserved for future use
			 *  - Prefixes 26, 27, 45, 46 and 47 were previously assigned by the Philadelphia campus.
			 *
			 * See `http://www.irs.gov/Businesses/Small-Businesses-&-Self-Employed/How-EINs-are-Assigned-and-Valid-EIN-Prefixes`
			 * for more information.
			 */
			// Locale functions

			/*
			 * bg-BG validation function
			 * (Edinen graždanski nomer (EGN/ЕГН), persons only)
			 * Checks if birth date (first six digits) is valid and calculates check (last) digit
			 */
			function bgBgCheck(tin) {
			  // Extract full year, normalize month and check birth date validity
			  var century_year = tin.slice(0, 2);
			  var month = parseInt(tin.slice(2, 4), 10);

			  if (month > 40) {
			    month -= 40;
			    century_year = "20".concat(century_year);
			  } else if (month > 20) {
			    month -= 20;
			    century_year = "18".concat(century_year);
			  } else {
			    century_year = "19".concat(century_year);
			  }

			  if (month < 10) {
			    month = "0".concat(month);
			  }

			  var date = "".concat(century_year, "/").concat(month, "/").concat(tin.slice(4, 6));

			  if (!(0, _isDate.default)(date, 'YYYY/MM/DD')) {
			    return false;
			  } // split digits into an array for further processing


			  var digits = tin.split('').map(function (a) {
			    return parseInt(a, 10);
			  }); // Calculate checksum by multiplying digits with fixed values

			  var multip_lookup = [2, 4, 8, 5, 10, 9, 7, 3, 6];
			  var checksum = 0;

			  for (var i = 0; i < multip_lookup.length; i++) {
			    checksum += digits[i] * multip_lookup[i];
			  }

			  checksum = checksum % 11 === 10 ? 0 : checksum % 11;
			  return checksum === digits[9];
			}
			/**
			 * Check if an input is a valid Canadian SIN (Social Insurance Number)
			 *
			 * The Social Insurance Number (SIN) is a 9 digit number that
			 * you need to work in Canada or to have access to government programs and benefits.
			 *
			 * https://en.wikipedia.org/wiki/Social_Insurance_Number
			 * https://www.canada.ca/en/employment-social-development/services/sin.html
			 * https://www.codercrunch.com/challenge/819302488/sin-validator
			 *
			 * @param {string} input
			 * @return {boolean}
			 */


			function isCanadianSIN(input) {
			  var digitsArray = input.split('');
			  var even = digitsArray.filter(function (_, idx) {
			    return idx % 2;
			  }).map(function (i) {
			    return Number(i) * 2;
			  }).join('').split('');
			  var total = digitsArray.filter(function (_, idx) {
			    return !(idx % 2);
			  }).concat(even).map(function (i) {
			    return Number(i);
			  }).reduce(function (acc, cur) {
			    return acc + cur;
			  });
			  return total % 10 === 0;
			}
			/*
			 * cs-CZ validation function
			 * (Rodné číslo (RČ), persons only)
			 * Checks if birth date (first six digits) is valid and divisibility by 11
			 * Material not in DG TAXUD document sourced from:
			 * -`https://lorenc.info/3MA381/overeni-spravnosti-rodneho-cisla.htm`
			 * -`https://www.mvcr.cz/clanek/rady-a-sluzby-dokumenty-rodne-cislo.aspx`
			 */


			function csCzCheck(tin) {
			  tin = tin.replace(/\W/, ''); // Extract full year from TIN length

			  var full_year = parseInt(tin.slice(0, 2), 10);

			  if (tin.length === 10) {
			    if (full_year < 54) {
			      full_year = "20".concat(full_year);
			    } else {
			      full_year = "19".concat(full_year);
			    }
			  } else {
			    if (tin.slice(6) === '000') {
			      return false;
			    } // Three-zero serial not assigned before 1954


			    if (full_year < 54) {
			      full_year = "19".concat(full_year);
			    } else {
			      return false; // No 18XX years seen in any of the resources
			    }
			  } // Add missing zero if needed


			  if (full_year.length === 3) {
			    full_year = [full_year.slice(0, 2), '0', full_year.slice(2)].join('');
			  } // Extract month from TIN and normalize


			  var month = parseInt(tin.slice(2, 4), 10);

			  if (month > 50) {
			    month -= 50;
			  }

			  if (month > 20) {
			    // Month-plus-twenty was only introduced in 2004
			    if (parseInt(full_year, 10) < 2004) {
			      return false;
			    }

			    month -= 20;
			  }

			  if (month < 10) {
			    month = "0".concat(month);
			  } // Check date validity


			  var date = "".concat(full_year, "/").concat(month, "/").concat(tin.slice(4, 6));

			  if (!(0, _isDate.default)(date, 'YYYY/MM/DD')) {
			    return false;
			  } // Verify divisibility by 11


			  if (tin.length === 10) {
			    if (parseInt(tin, 10) % 11 !== 0) {
			      // Some numbers up to and including 1985 are still valid if
			      // check (last) digit equals 0 and modulo of first 9 digits equals 10
			      var checkdigit = parseInt(tin.slice(0, 9), 10) % 11;

			      if (parseInt(full_year, 10) < 1986 && checkdigit === 10) {
			        if (parseInt(tin.slice(9), 10) !== 0) {
			          return false;
			        }
			      } else {
			        return false;
			      }
			    }
			  }

			  return true;
			}
			/*
			 * de-AT validation function
			 * (Abgabenkontonummer, persons/entities)
			 * Verify TIN validity by calling luhnCheck()
			 */


			function deAtCheck(tin) {
			  return algorithms.luhnCheck(tin);
			}
			/*
			 * de-DE validation function
			 * (Steueridentifikationsnummer (Steuer-IdNr.), persons only)
			 * Tests for single duplicate/triplicate value, then calculates ISO 7064 check (last) digit
			 * Partial implementation of spec (same result with both algorithms always)
			 */


			function deDeCheck(tin) {
			  // Split digits into an array for further processing
			  var digits = tin.split('').map(function (a) {
			    return parseInt(a, 10);
			  }); // Fill array with strings of number positions

			  var occurences = [];

			  for (var i = 0; i < digits.length - 1; i++) {
			    occurences.push('');

			    for (var j = 0; j < digits.length - 1; j++) {
			      if (digits[i] === digits[j]) {
			        occurences[i] += j;
			      }
			    }
			  } // Remove digits with one occurence and test for only one duplicate/triplicate


			  occurences = occurences.filter(function (a) {
			    return a.length > 1;
			  });

			  if (occurences.length !== 2 && occurences.length !== 3) {
			    return false;
			  } // In case of triplicate value only two digits are allowed next to each other


			  if (occurences[0].length === 3) {
			    var trip_locations = occurences[0].split('').map(function (a) {
			      return parseInt(a, 10);
			    });
			    var recurrent = 0; // Amount of neighbour occurences

			    for (var _i = 0; _i < trip_locations.length - 1; _i++) {
			      if (trip_locations[_i] + 1 === trip_locations[_i + 1]) {
			        recurrent += 1;
			      }
			    }

			    if (recurrent === 2) {
			      return false;
			    }
			  }

			  return algorithms.iso7064Check(tin);
			}
			/*
			 * dk-DK validation function
			 * (CPR-nummer (personnummer), persons only)
			 * Checks if birth date (first six digits) is valid and assigned to century (seventh) digit,
			 * and calculates check (last) digit
			 */


			function dkDkCheck(tin) {
			  tin = tin.replace(/\W/, ''); // Extract year, check if valid for given century digit and add century

			  var year = parseInt(tin.slice(4, 6), 10);
			  var century_digit = tin.slice(6, 7);

			  switch (century_digit) {
			    case '0':
			    case '1':
			    case '2':
			    case '3':
			      year = "19".concat(year);
			      break;

			    case '4':
			    case '9':
			      if (year < 37) {
			        year = "20".concat(year);
			      } else {
			        year = "19".concat(year);
			      }

			      break;

			    default:
			      if (year < 37) {
			        year = "20".concat(year);
			      } else if (year > 58) {
			        year = "18".concat(year);
			      } else {
			        return false;
			      }

			      break;
			  } // Add missing zero if needed


			  if (year.length === 3) {
			    year = [year.slice(0, 2), '0', year.slice(2)].join('');
			  } // Check date validity


			  var date = "".concat(year, "/").concat(tin.slice(2, 4), "/").concat(tin.slice(0, 2));

			  if (!(0, _isDate.default)(date, 'YYYY/MM/DD')) {
			    return false;
			  } // Split digits into an array for further processing


			  var digits = tin.split('').map(function (a) {
			    return parseInt(a, 10);
			  });
			  var checksum = 0;
			  var weight = 4; // Multiply by weight and add to checksum

			  for (var i = 0; i < 9; i++) {
			    checksum += digits[i] * weight;
			    weight -= 1;

			    if (weight === 1) {
			      weight = 7;
			    }
			  }

			  checksum %= 11;

			  if (checksum === 1) {
			    return false;
			  }

			  return checksum === 0 ? digits[9] === 0 : digits[9] === 11 - checksum;
			}
			/*
			 * el-CY validation function
			 * (Arithmos Forologikou Mitroou (AFM/ΑΦΜ), persons only)
			 * Verify TIN validity by calculating ASCII value of check (last) character
			 */


			function elCyCheck(tin) {
			  // split digits into an array for further processing
			  var digits = tin.slice(0, 8).split('').map(function (a) {
			    return parseInt(a, 10);
			  });
			  var checksum = 0; // add digits in even places

			  for (var i = 1; i < digits.length; i += 2) {
			    checksum += digits[i];
			  } // add digits in odd places


			  for (var _i2 = 0; _i2 < digits.length; _i2 += 2) {
			    if (digits[_i2] < 2) {
			      checksum += 1 - digits[_i2];
			    } else {
			      checksum += 2 * (digits[_i2] - 2) + 5;

			      if (digits[_i2] > 4) {
			        checksum += 2;
			      }
			    }
			  }

			  return String.fromCharCode(checksum % 26 + 65) === tin.charAt(8);
			}
			/*
			 * el-GR validation function
			 * (Arithmos Forologikou Mitroou (AFM/ΑΦΜ), persons/entities)
			 * Verify TIN validity by calculating check (last) digit
			 * Algorithm not in DG TAXUD document- sourced from:
			 * - `http://epixeirisi.gr/%CE%9A%CE%A1%CE%99%CE%A3%CE%99%CE%9C%CE%91-%CE%98%CE%95%CE%9C%CE%91%CE%A4%CE%91-%CE%A6%CE%9F%CE%A1%CE%9F%CE%9B%CE%9F%CE%93%CE%99%CE%91%CE%A3-%CE%9A%CE%91%CE%99-%CE%9B%CE%9F%CE%93%CE%99%CE%A3%CE%A4%CE%99%CE%9A%CE%97%CE%A3/23791/%CE%91%CF%81%CE%B9%CE%B8%CE%BC%CF%8C%CF%82-%CE%A6%CE%BF%CF%81%CE%BF%CE%BB%CE%BF%CE%B3%CE%B9%CE%BA%CE%BF%CF%8D-%CE%9C%CE%B7%CF%84%CF%81%CF%8E%CE%BF%CF%85`
			 */


			function elGrCheck(tin) {
			  // split digits into an array for further processing
			  var digits = tin.split('').map(function (a) {
			    return parseInt(a, 10);
			  });
			  var checksum = 0;

			  for (var i = 0; i < 8; i++) {
			    checksum += digits[i] * Math.pow(2, 8 - i);
			  }

			  return checksum % 11 % 10 === digits[8];
			}
			/*
			 * en-GB validation function (should go here if needed)
			 * (National Insurance Number (NINO) or Unique Taxpayer Reference (UTR),
			 * persons/entities respectively)
			 */

			/*
			 * en-IE validation function
			 * (Personal Public Service Number (PPS No), persons only)
			 * Verify TIN validity by calculating check (second to last) character
			 */


			function enIeCheck(tin) {
			  var checksum = algorithms.reverseMultiplyAndSum(tin.split('').slice(0, 7).map(function (a) {
			    return parseInt(a, 10);
			  }), 8);

			  if (tin.length === 9 && tin[8] !== 'W') {
			    checksum += (tin[8].charCodeAt(0) - 64) * 9;
			  }

			  checksum %= 23;

			  if (checksum === 0) {
			    return tin[7].toUpperCase() === 'W';
			  }

			  return tin[7].toUpperCase() === String.fromCharCode(64 + checksum);
			} // Valid US IRS campus prefixes


			var enUsCampusPrefix = {
			  andover: ['10', '12'],
			  atlanta: ['60', '67'],
			  austin: ['50', '53'],
			  brookhaven: ['01', '02', '03', '04', '05', '06', '11', '13', '14', '16', '21', '22', '23', '25', '34', '51', '52', '54', '55', '56', '57', '58', '59', '65'],
			  cincinnati: ['30', '32', '35', '36', '37', '38', '61'],
			  fresno: ['15', '24'],
			  internet: ['20', '26', '27', '45', '46', '47'],
			  kansas: ['40', '44'],
			  memphis: ['94', '95'],
			  ogden: ['80', '90'],
			  philadelphia: ['33', '39', '41', '42', '43', '46', '48', '62', '63', '64', '66', '68', '71', '72', '73', '74', '75', '76', '77', '81', '82', '83', '84', '85', '86', '87', '88', '91', '92', '93', '98', '99'],
			  sba: ['31']
			}; // Return an array of all US IRS campus prefixes

			function enUsGetPrefixes() {
			  var prefixes = [];

			  for (var location in enUsCampusPrefix) {
			    // https://github.com/gotwarlost/istanbul/blob/master/ignoring-code-for-coverage.md#ignoring-code-for-coverage-purposes
			    // istanbul ignore else
			    if (enUsCampusPrefix.hasOwnProperty(location)) {
			      prefixes.push.apply(prefixes, _toConsumableArray(enUsCampusPrefix[location]));
			    }
			  }

			  return prefixes;
			}
			/*
			 * en-US validation function
			 * Verify that the TIN starts with a valid IRS campus prefix
			 */


			function enUsCheck(tin) {
			  return enUsGetPrefixes().indexOf(tin.slice(0, 2)) !== -1;
			}
			/*
			 * es-ES validation function
			 * (Documento Nacional de Identidad (DNI)
			 * or Número de Identificación de Extranjero (NIE), persons only)
			 * Verify TIN validity by calculating check (last) character
			 */


			function esEsCheck(tin) {
			  // Split characters into an array for further processing
			  var chars = tin.toUpperCase().split(''); // Replace initial letter if needed

			  if (isNaN(parseInt(chars[0], 10)) && chars.length > 1) {
			    var lead_replace = 0;

			    switch (chars[0]) {
			      case 'Y':
			        lead_replace = 1;
			        break;

			      case 'Z':
			        lead_replace = 2;
			        break;
			    }

			    chars.splice(0, 1, lead_replace); // Fill with zeros if smaller than proper
			  } else {
			    while (chars.length < 9) {
			      chars.unshift(0);
			    }
			  } // Calculate checksum and check according to lookup


			  var lookup = ['T', 'R', 'W', 'A', 'G', 'M', 'Y', 'F', 'P', 'D', 'X', 'B', 'N', 'J', 'Z', 'S', 'Q', 'V', 'H', 'L', 'C', 'K', 'E'];
			  chars = chars.join('');
			  var checksum = parseInt(chars.slice(0, 8), 10) % 23;
			  return chars[8] === lookup[checksum];
			}
			/*
			 * et-EE validation function
			 * (Isikukood (IK), persons only)
			 * Checks if birth date (century digit and six following) is valid and calculates check (last) digit
			 * Material not in DG TAXUD document sourced from:
			 * - `https://www.oecd.org/tax/automatic-exchange/crs-implementation-and-assistance/tax-identification-numbers/Estonia-TIN.pdf`
			 */


			function etEeCheck(tin) {
			  // Extract year and add century
			  var full_year = tin.slice(1, 3);
			  var century_digit = tin.slice(0, 1);

			  switch (century_digit) {
			    case '1':
			    case '2':
			      full_year = "18".concat(full_year);
			      break;

			    case '3':
			    case '4':
			      full_year = "19".concat(full_year);
			      break;

			    default:
			      full_year = "20".concat(full_year);
			      break;
			  } // Check date validity


			  var date = "".concat(full_year, "/").concat(tin.slice(3, 5), "/").concat(tin.slice(5, 7));

			  if (!(0, _isDate.default)(date, 'YYYY/MM/DD')) {
			    return false;
			  } // Split digits into an array for further processing


			  var digits = tin.split('').map(function (a) {
			    return parseInt(a, 10);
			  });
			  var checksum = 0;
			  var weight = 1; // Multiply by weight and add to checksum

			  for (var i = 0; i < 10; i++) {
			    checksum += digits[i] * weight;
			    weight += 1;

			    if (weight === 10) {
			      weight = 1;
			    }
			  } // Do again if modulo 11 of checksum is 10


			  if (checksum % 11 === 10) {
			    checksum = 0;
			    weight = 3;

			    for (var _i3 = 0; _i3 < 10; _i3++) {
			      checksum += digits[_i3] * weight;
			      weight += 1;

			      if (weight === 10) {
			        weight = 1;
			      }
			    }

			    if (checksum % 11 === 10) {
			      return digits[10] === 0;
			    }
			  }

			  return checksum % 11 === digits[10];
			}
			/*
			 * fi-FI validation function
			 * (Henkilötunnus (HETU), persons only)
			 * Checks if birth date (first six digits plus century symbol) is valid
			 * and calculates check (last) digit
			 */


			function fiFiCheck(tin) {
			  // Extract year and add century
			  var full_year = tin.slice(4, 6);
			  var century_symbol = tin.slice(6, 7);

			  switch (century_symbol) {
			    case '+':
			      full_year = "18".concat(full_year);
			      break;

			    case '-':
			      full_year = "19".concat(full_year);
			      break;

			    default:
			      full_year = "20".concat(full_year);
			      break;
			  } // Check date validity


			  var date = "".concat(full_year, "/").concat(tin.slice(2, 4), "/").concat(tin.slice(0, 2));

			  if (!(0, _isDate.default)(date, 'YYYY/MM/DD')) {
			    return false;
			  } // Calculate check character


			  var checksum = parseInt(tin.slice(0, 6) + tin.slice(7, 10), 10) % 31;

			  if (checksum < 10) {
			    return checksum === parseInt(tin.slice(10), 10);
			  }

			  checksum -= 10;
			  var letters_lookup = ['A', 'B', 'C', 'D', 'E', 'F', 'H', 'J', 'K', 'L', 'M', 'N', 'P', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y'];
			  return letters_lookup[checksum] === tin.slice(10);
			}
			/*
			 * fr/nl-BE validation function
			 * (Numéro national (N.N.), persons only)
			 * Checks if birth date (first six digits) is valid and calculates check (last two) digits
			 */


			function frBeCheck(tin) {
			  // Zero month/day value is acceptable
			  if (tin.slice(2, 4) !== '00' || tin.slice(4, 6) !== '00') {
			    // Extract date from first six digits of TIN
			    var date = "".concat(tin.slice(0, 2), "/").concat(tin.slice(2, 4), "/").concat(tin.slice(4, 6));

			    if (!(0, _isDate.default)(date, 'YY/MM/DD')) {
			      return false;
			    }
			  }

			  var checksum = 97 - parseInt(tin.slice(0, 9), 10) % 97;
			  var checkdigits = parseInt(tin.slice(9, 11), 10);

			  if (checksum !== checkdigits) {
			    checksum = 97 - parseInt("2".concat(tin.slice(0, 9)), 10) % 97;

			    if (checksum !== checkdigits) {
			      return false;
			    }
			  }

			  return true;
			}
			/*
			 * fr-FR validation function
			 * (Numéro fiscal de référence (numéro SPI), persons only)
			 * Verify TIN validity by calculating check (last three) digits
			 */


			function frFrCheck(tin) {
			  tin = tin.replace(/\s/g, '');
			  var checksum = parseInt(tin.slice(0, 10), 10) % 511;
			  var checkdigits = parseInt(tin.slice(10, 13), 10);
			  return checksum === checkdigits;
			}
			/*
			 * fr/lb-LU validation function
			 * (numéro d’identification personnelle, persons only)
			 * Verify birth date validity and run Luhn and Verhoeff checks
			 */


			function frLuCheck(tin) {
			  // Extract date and check validity
			  var date = "".concat(tin.slice(0, 4), "/").concat(tin.slice(4, 6), "/").concat(tin.slice(6, 8));

			  if (!(0, _isDate.default)(date, 'YYYY/MM/DD')) {
			    return false;
			  } // Run Luhn check


			  if (!algorithms.luhnCheck(tin.slice(0, 12))) {
			    return false;
			  } // Remove Luhn check digit and run Verhoeff check


			  return algorithms.verhoeffCheck("".concat(tin.slice(0, 11)).concat(tin[12]));
			}
			/*
			 * hr-HR validation function
			 * (Osobni identifikacijski broj (OIB), persons/entities)
			 * Verify TIN validity by calling iso7064Check(digits)
			 */


			function hrHrCheck(tin) {
			  return algorithms.iso7064Check(tin);
			}
			/*
			 * hu-HU validation function
			 * (Adóazonosító jel, persons only)
			 * Verify TIN validity by calculating check (last) digit
			 */


			function huHuCheck(tin) {
			  // split digits into an array for further processing
			  var digits = tin.split('').map(function (a) {
			    return parseInt(a, 10);
			  });
			  var checksum = 8;

			  for (var i = 1; i < 9; i++) {
			    checksum += digits[i] * (i + 1);
			  }

			  return checksum % 11 === digits[9];
			}
			/*
			 * lt-LT validation function (should go here if needed)
			 * (Asmens kodas, persons/entities respectively)
			 * Current validation check is alias of etEeCheck- same format applies
			 */

			/*
			 * it-IT first/last name validity check
			 * Accepts it-IT TIN-encoded names as a three-element character array and checks their validity
			 * Due to lack of clarity between resources ("Are only Italian consonants used?
			 * What happens if a person has X in their name?" etc.) only two test conditions
			 * have been implemented:
			 * Vowels may only be followed by other vowels or an X character
			 * and X characters after vowels may only be followed by other X characters.
			 */


			function itItNameCheck(name) {
			  // true at the first occurence of a vowel
			  var vowelflag = false; // true at the first occurence of an X AFTER vowel
			  // (to properly handle last names with X as consonant)

			  var xflag = false;

			  for (var i = 0; i < 3; i++) {
			    if (!vowelflag && /[AEIOU]/.test(name[i])) {
			      vowelflag = true;
			    } else if (!xflag && vowelflag && name[i] === 'X') {
			      xflag = true;
			    } else if (i > 0) {
			      if (vowelflag && !xflag) {
			        if (!/[AEIOU]/.test(name[i])) {
			          return false;
			        }
			      }

			      if (xflag) {
			        if (!/X/.test(name[i])) {
			          return false;
			        }
			      }
			    }
			  }

			  return true;
			}
			/*
			 * it-IT validation function
			 * (Codice fiscale (TIN-IT), persons only)
			 * Verify name, birth date and codice catastale validity
			 * and calculate check character.
			 * Material not in DG-TAXUD document sourced from:
			 * `https://en.wikipedia.org/wiki/Italian_fiscal_code`
			 */


			function itItCheck(tin) {
			  // Capitalize and split characters into an array for further processing
			  var chars = tin.toUpperCase().split(''); // Check first and last name validity calling itItNameCheck()

			  if (!itItNameCheck(chars.slice(0, 3))) {
			    return false;
			  }

			  if (!itItNameCheck(chars.slice(3, 6))) {
			    return false;
			  } // Convert letters in number spaces back to numbers if any


			  var number_locations = [6, 7, 9, 10, 12, 13, 14];
			  var number_replace = {
			    L: '0',
			    M: '1',
			    N: '2',
			    P: '3',
			    Q: '4',
			    R: '5',
			    S: '6',
			    T: '7',
			    U: '8',
			    V: '9'
			  };

			  for (var _i4 = 0, _number_locations = number_locations; _i4 < _number_locations.length; _i4++) {
			    var i = _number_locations[_i4];

			    if (chars[i] in number_replace) {
			      chars.splice(i, 1, number_replace[chars[i]]);
			    }
			  } // Extract month and day, and check date validity


			  var month_replace = {
			    A: '01',
			    B: '02',
			    C: '03',
			    D: '04',
			    E: '05',
			    H: '06',
			    L: '07',
			    M: '08',
			    P: '09',
			    R: '10',
			    S: '11',
			    T: '12'
			  };
			  var month = month_replace[chars[8]];
			  var day = parseInt(chars[9] + chars[10], 10);

			  if (day > 40) {
			    day -= 40;
			  }

			  if (day < 10) {
			    day = "0".concat(day);
			  }

			  var date = "".concat(chars[6]).concat(chars[7], "/").concat(month, "/").concat(day);

			  if (!(0, _isDate.default)(date, 'YY/MM/DD')) {
			    return false;
			  } // Calculate check character by adding up even and odd characters as numbers


			  var checksum = 0;

			  for (var _i5 = 1; _i5 < chars.length - 1; _i5 += 2) {
			    var char_to_int = parseInt(chars[_i5], 10);

			    if (isNaN(char_to_int)) {
			      char_to_int = chars[_i5].charCodeAt(0) - 65;
			    }

			    checksum += char_to_int;
			  }

			  var odd_convert = {
			    // Maps of characters at odd places
			    A: 1,
			    B: 0,
			    C: 5,
			    D: 7,
			    E: 9,
			    F: 13,
			    G: 15,
			    H: 17,
			    I: 19,
			    J: 21,
			    K: 2,
			    L: 4,
			    M: 18,
			    N: 20,
			    O: 11,
			    P: 3,
			    Q: 6,
			    R: 8,
			    S: 12,
			    T: 14,
			    U: 16,
			    V: 10,
			    W: 22,
			    X: 25,
			    Y: 24,
			    Z: 23,
			    0: 1,
			    1: 0
			  };

			  for (var _i6 = 0; _i6 < chars.length - 1; _i6 += 2) {
			    var _char_to_int = 0;

			    if (chars[_i6] in odd_convert) {
			      _char_to_int = odd_convert[chars[_i6]];
			    } else {
			      var multiplier = parseInt(chars[_i6], 10);
			      _char_to_int = 2 * multiplier + 1;

			      if (multiplier > 4) {
			        _char_to_int += 2;
			      }
			    }

			    checksum += _char_to_int;
			  }

			  if (String.fromCharCode(65 + checksum % 26) !== chars[15]) {
			    return false;
			  }

			  return true;
			}
			/*
			 * lv-LV validation function
			 * (Personas kods (PK), persons only)
			 * Check validity of birth date and calculate check (last) digit
			 * Support only for old format numbers (not starting with '32', issued before 2017/07/01)
			 * Material not in DG TAXUD document sourced from:
			 * `https://boot.ritakafija.lv/forums/index.php?/topic/88314-personas-koda-algoritms-%C4%8Deksumma/`
			 */


			function lvLvCheck(tin) {
			  tin = tin.replace(/\W/, ''); // Extract date from TIN

			  var day = tin.slice(0, 2);

			  if (day !== '32') {
			    // No date/checksum check if new format
			    var month = tin.slice(2, 4);

			    if (month !== '00') {
			      // No date check if unknown month
			      var full_year = tin.slice(4, 6);

			      switch (tin[6]) {
			        case '0':
			          full_year = "18".concat(full_year);
			          break;

			        case '1':
			          full_year = "19".concat(full_year);
			          break;

			        default:
			          full_year = "20".concat(full_year);
			          break;
			      } // Check date validity


			      var date = "".concat(full_year, "/").concat(tin.slice(2, 4), "/").concat(day);

			      if (!(0, _isDate.default)(date, 'YYYY/MM/DD')) {
			        return false;
			      }
			    } // Calculate check digit


			    var checksum = 1101;
			    var multip_lookup = [1, 6, 3, 7, 9, 10, 5, 8, 4, 2];

			    for (var i = 0; i < tin.length - 1; i++) {
			      checksum -= parseInt(tin[i], 10) * multip_lookup[i];
			    }

			    return parseInt(tin[10], 10) === checksum % 11;
			  }

			  return true;
			}
			/*
			 * mt-MT validation function
			 * (Identity Card Number or Unique Taxpayer Reference, persons/entities)
			 * Verify Identity Card Number structure (no other tests found)
			 */


			function mtMtCheck(tin) {
			  if (tin.length !== 9) {
			    // No tests for UTR
			    var chars = tin.toUpperCase().split(''); // Fill with zeros if smaller than proper

			    while (chars.length < 8) {
			      chars.unshift(0);
			    } // Validate format according to last character


			    switch (tin[7]) {
			      case 'A':
			      case 'P':
			        if (parseInt(chars[6], 10) === 0) {
			          return false;
			        }

			        break;

			      default:
			        {
			          var first_part = parseInt(chars.join('').slice(0, 5), 10);

			          if (first_part > 32000) {
			            return false;
			          }

			          var second_part = parseInt(chars.join('').slice(5, 7), 10);

			          if (first_part === second_part) {
			            return false;
			          }
			        }
			    }
			  }

			  return true;
			}
			/*
			 * nl-NL validation function
			 * (Burgerservicenummer (BSN) or Rechtspersonen Samenwerkingsverbanden Informatie Nummer (RSIN),
			 * persons/entities respectively)
			 * Verify TIN validity by calculating check (last) digit (variant of MOD 11)
			 */


			function nlNlCheck(tin) {
			  return algorithms.reverseMultiplyAndSum(tin.split('').slice(0, 8).map(function (a) {
			    return parseInt(a, 10);
			  }), 9) % 11 === parseInt(tin[8], 10);
			}
			/*
			 * pl-PL validation function
			 * (Powszechny Elektroniczny System Ewidencji Ludności (PESEL)
			 * or Numer identyfikacji podatkowej (NIP), persons/entities)
			 * Verify TIN validity by validating birth date (PESEL) and calculating check (last) digit
			 */


			function plPlCheck(tin) {
			  // NIP
			  if (tin.length === 10) {
			    // Calculate last digit by multiplying with lookup
			    var lookup = [6, 5, 7, 2, 3, 4, 5, 6, 7];
			    var _checksum = 0;

			    for (var i = 0; i < lookup.length; i++) {
			      _checksum += parseInt(tin[i], 10) * lookup[i];
			    }

			    _checksum %= 11;

			    if (_checksum === 10) {
			      return false;
			    }

			    return _checksum === parseInt(tin[9], 10);
			  } // PESEL
			  // Extract full year using month


			  var full_year = tin.slice(0, 2);
			  var month = parseInt(tin.slice(2, 4), 10);

			  if (month > 80) {
			    full_year = "18".concat(full_year);
			    month -= 80;
			  } else if (month > 60) {
			    full_year = "22".concat(full_year);
			    month -= 60;
			  } else if (month > 40) {
			    full_year = "21".concat(full_year);
			    month -= 40;
			  } else if (month > 20) {
			    full_year = "20".concat(full_year);
			    month -= 20;
			  } else {
			    full_year = "19".concat(full_year);
			  } // Add leading zero to month if needed


			  if (month < 10) {
			    month = "0".concat(month);
			  } // Check date validity


			  var date = "".concat(full_year, "/").concat(month, "/").concat(tin.slice(4, 6));

			  if (!(0, _isDate.default)(date, 'YYYY/MM/DD')) {
			    return false;
			  } // Calculate last digit by mulitplying with odd one-digit numbers except 5


			  var checksum = 0;
			  var multiplier = 1;

			  for (var _i7 = 0; _i7 < tin.length - 1; _i7++) {
			    checksum += parseInt(tin[_i7], 10) * multiplier % 10;
			    multiplier += 2;

			    if (multiplier > 10) {
			      multiplier = 1;
			    } else if (multiplier === 5) {
			      multiplier += 2;
			    }
			  }

			  checksum = 10 - checksum % 10;
			  return checksum === parseInt(tin[10], 10);
			}
			/*
			* pt-BR validation function
			* (Cadastro de Pessoas Físicas (CPF, persons)
			* Cadastro Nacional de Pessoas Jurídicas (CNPJ, entities)
			* Both inputs will be validated
			*/


			function ptBrCheck(tin) {
			  if (tin.length === 11) {
			    var _sum;

			    var remainder;
			    _sum = 0;
			    if ( // Reject known invalid CPFs
			    tin === '11111111111' || tin === '22222222222' || tin === '33333333333' || tin === '44444444444' || tin === '55555555555' || tin === '66666666666' || tin === '77777777777' || tin === '88888888888' || tin === '99999999999' || tin === '00000000000') return false;

			    for (var i = 1; i <= 9; i++) {
			      _sum += parseInt(tin.substring(i - 1, i), 10) * (11 - i);
			    }

			    remainder = _sum * 10 % 11;
			    if (remainder === 10) remainder = 0;
			    if (remainder !== parseInt(tin.substring(9, 10), 10)) return false;
			    _sum = 0;

			    for (var _i8 = 1; _i8 <= 10; _i8++) {
			      _sum += parseInt(tin.substring(_i8 - 1, _i8), 10) * (12 - _i8);
			    }

			    remainder = _sum * 10 % 11;
			    if (remainder === 10) remainder = 0;
			    if (remainder !== parseInt(tin.substring(10, 11), 10)) return false;
			    return true;
			  }

			  if ( // Reject know invalid CNPJs
			  tin === '00000000000000' || tin === '11111111111111' || tin === '22222222222222' || tin === '33333333333333' || tin === '44444444444444' || tin === '55555555555555' || tin === '66666666666666' || tin === '77777777777777' || tin === '88888888888888' || tin === '99999999999999') {
			    return false;
			  }

			  var length = tin.length - 2;
			  var identifiers = tin.substring(0, length);
			  var verificators = tin.substring(length);
			  var sum = 0;
			  var pos = length - 7;

			  for (var _i9 = length; _i9 >= 1; _i9--) {
			    sum += identifiers.charAt(length - _i9) * pos;
			    pos -= 1;

			    if (pos < 2) {
			      pos = 9;
			    }
			  }

			  var result = sum % 11 < 2 ? 0 : 11 - sum % 11;

			  if (result !== parseInt(verificators.charAt(0), 10)) {
			    return false;
			  }

			  length += 1;
			  identifiers = tin.substring(0, length);
			  sum = 0;
			  pos = length - 7;

			  for (var _i10 = length; _i10 >= 1; _i10--) {
			    sum += identifiers.charAt(length - _i10) * pos;
			    pos -= 1;

			    if (pos < 2) {
			      pos = 9;
			    }
			  }

			  result = sum % 11 < 2 ? 0 : 11 - sum % 11;

			  if (result !== parseInt(verificators.charAt(1), 10)) {
			    return false;
			  }

			  return true;
			}
			/*
			 * pt-PT validation function
			 * (Número de identificação fiscal (NIF), persons/entities)
			 * Verify TIN validity by calculating check (last) digit (variant of MOD 11)
			 */


			function ptPtCheck(tin) {
			  var checksum = 11 - algorithms.reverseMultiplyAndSum(tin.split('').slice(0, 8).map(function (a) {
			    return parseInt(a, 10);
			  }), 9) % 11;

			  if (checksum > 9) {
			    return parseInt(tin[8], 10) === 0;
			  }

			  return checksum === parseInt(tin[8], 10);
			}
			/*
			 * ro-RO validation function
			 * (Cod Numeric Personal (CNP) or Cod de înregistrare fiscală (CIF),
			 * persons only)
			 * Verify CNP validity by calculating check (last) digit (test not found for CIF)
			 * Material not in DG TAXUD document sourced from:
			 * `https://en.wikipedia.org/wiki/National_identification_number#Romania`
			 */


			function roRoCheck(tin) {
			  if (tin.slice(0, 4) !== '9000') {
			    // No test found for this format
			    // Extract full year using century digit if possible
			    var full_year = tin.slice(1, 3);

			    switch (tin[0]) {
			      case '1':
			      case '2':
			        full_year = "19".concat(full_year);
			        break;

			      case '3':
			      case '4':
			        full_year = "18".concat(full_year);
			        break;

			      case '5':
			      case '6':
			        full_year = "20".concat(full_year);
			        break;
			    } // Check date validity


			    var date = "".concat(full_year, "/").concat(tin.slice(3, 5), "/").concat(tin.slice(5, 7));

			    if (date.length === 8) {
			      if (!(0, _isDate.default)(date, 'YY/MM/DD')) {
			        return false;
			      }
			    } else if (!(0, _isDate.default)(date, 'YYYY/MM/DD')) {
			      return false;
			    } // Calculate check digit


			    var digits = tin.split('').map(function (a) {
			      return parseInt(a, 10);
			    });
			    var multipliers = [2, 7, 9, 1, 4, 6, 3, 5, 8, 2, 7, 9];
			    var checksum = 0;

			    for (var i = 0; i < multipliers.length; i++) {
			      checksum += digits[i] * multipliers[i];
			    }

			    if (checksum % 11 === 10) {
			      return digits[12] === 1;
			    }

			    return digits[12] === checksum % 11;
			  }

			  return true;
			}
			/*
			 * sk-SK validation function
			 * (Rodné číslo (RČ) or bezvýznamové identifikačné číslo (BIČ), persons only)
			 * Checks validity of pre-1954 birth numbers (rodné číslo) only
			 * Due to the introduction of the pseudo-random BIČ it is not possible to test
			 * post-1954 birth numbers without knowing whether they are BIČ or RČ beforehand
			 */


			function skSkCheck(tin) {
			  if (tin.length === 9) {
			    tin = tin.replace(/\W/, '');

			    if (tin.slice(6) === '000') {
			      return false;
			    } // Three-zero serial not assigned before 1954
			    // Extract full year from TIN length


			    var full_year = parseInt(tin.slice(0, 2), 10);

			    if (full_year > 53) {
			      return false;
			    }

			    if (full_year < 10) {
			      full_year = "190".concat(full_year);
			    } else {
			      full_year = "19".concat(full_year);
			    } // Extract month from TIN and normalize


			    var month = parseInt(tin.slice(2, 4), 10);

			    if (month > 50) {
			      month -= 50;
			    }

			    if (month < 10) {
			      month = "0".concat(month);
			    } // Check date validity


			    var date = "".concat(full_year, "/").concat(month, "/").concat(tin.slice(4, 6));

			    if (!(0, _isDate.default)(date, 'YYYY/MM/DD')) {
			      return false;
			    }
			  }

			  return true;
			}
			/*
			 * sl-SI validation function
			 * (Davčna številka, persons/entities)
			 * Verify TIN validity by calculating check (last) digit (variant of MOD 11)
			 */


			function slSiCheck(tin) {
			  var checksum = 11 - algorithms.reverseMultiplyAndSum(tin.split('').slice(0, 7).map(function (a) {
			    return parseInt(a, 10);
			  }), 8) % 11;

			  if (checksum === 10) {
			    return parseInt(tin[7], 10) === 0;
			  }

			  return checksum === parseInt(tin[7], 10);
			}
			/*
			 * sv-SE validation function
			 * (Personnummer or samordningsnummer, persons only)
			 * Checks validity of birth date and calls luhnCheck() to validate check (last) digit
			 */


			function svSeCheck(tin) {
			  // Make copy of TIN and normalize to two-digit year form
			  var tin_copy = tin.slice(0);

			  if (tin.length > 11) {
			    tin_copy = tin_copy.slice(2);
			  } // Extract date of birth


			  var full_year = '';
			  var month = tin_copy.slice(2, 4);
			  var day = parseInt(tin_copy.slice(4, 6), 10);

			  if (tin.length > 11) {
			    full_year = tin.slice(0, 4);
			  } else {
			    full_year = tin.slice(0, 2);

			    if (tin.length === 11 && day < 60) {
			      // Extract full year from centenarian symbol
			      // Should work just fine until year 10000 or so
			      var current_year = new Date().getFullYear().toString();
			      var current_century = parseInt(current_year.slice(0, 2), 10);
			      current_year = parseInt(current_year, 10);

			      if (tin[6] === '-') {
			        if (parseInt("".concat(current_century).concat(full_year), 10) > current_year) {
			          full_year = "".concat(current_century - 1).concat(full_year);
			        } else {
			          full_year = "".concat(current_century).concat(full_year);
			        }
			      } else {
			        full_year = "".concat(current_century - 1).concat(full_year);

			        if (current_year - parseInt(full_year, 10) < 100) {
			          return false;
			        }
			      }
			    }
			  } // Normalize day and check date validity


			  if (day > 60) {
			    day -= 60;
			  }

			  if (day < 10) {
			    day = "0".concat(day);
			  }

			  var date = "".concat(full_year, "/").concat(month, "/").concat(day);

			  if (date.length === 8) {
			    if (!(0, _isDate.default)(date, 'YY/MM/DD')) {
			      return false;
			    }
			  } else if (!(0, _isDate.default)(date, 'YYYY/MM/DD')) {
			    return false;
			  }

			  return algorithms.luhnCheck(tin.replace(/\W/, ''));
			} // Locale lookup objects

			/*
			 * Tax id regex formats for various locales
			 *
			 * Where not explicitly specified in DG-TAXUD document both
			 * uppercase and lowercase letters are acceptable.
			 */


			var taxIdFormat = {
			  'bg-BG': /^\d{10}$/,
			  'cs-CZ': /^\d{6}\/{0,1}\d{3,4}$/,
			  'de-AT': /^\d{9}$/,
			  'de-DE': /^[1-9]\d{10}$/,
			  'dk-DK': /^\d{6}-{0,1}\d{4}$/,
			  'el-CY': /^[09]\d{7}[A-Z]$/,
			  'el-GR': /^([0-4]|[7-9])\d{8}$/,
			  'en-CA': /^\d{9}$/,
			  'en-GB': /^\d{10}$|^(?!GB|NK|TN|ZZ)(?![DFIQUV])[A-Z](?![DFIQUVO])[A-Z]\d{6}[ABCD ]$/i,
			  'en-IE': /^\d{7}[A-W][A-IW]{0,1}$/i,
			  'en-US': /^\d{2}[- ]{0,1}\d{7}$/,
			  'es-ES': /^(\d{0,8}|[XYZKLM]\d{7})[A-HJ-NP-TV-Z]$/i,
			  'et-EE': /^[1-6]\d{6}(00[1-9]|0[1-9][0-9]|[1-6][0-9]{2}|70[0-9]|710)\d$/,
			  'fi-FI': /^\d{6}[-+A]\d{3}[0-9A-FHJ-NPR-Y]$/i,
			  'fr-BE': /^\d{11}$/,
			  'fr-FR': /^[0-3]\d{12}$|^[0-3]\d\s\d{2}(\s\d{3}){3}$/,
			  // Conforms both to official spec and provided example
			  'fr-LU': /^\d{13}$/,
			  'hr-HR': /^\d{11}$/,
			  'hu-HU': /^8\d{9}$/,
			  'it-IT': /^[A-Z]{6}[L-NP-V0-9]{2}[A-EHLMPRST][L-NP-V0-9]{2}[A-ILMZ][L-NP-V0-9]{3}[A-Z]$/i,
			  'lv-LV': /^\d{6}-{0,1}\d{5}$/,
			  // Conforms both to DG TAXUD spec and original research
			  'mt-MT': /^\d{3,7}[APMGLHBZ]$|^([1-8])\1\d{7}$/i,
			  'nl-NL': /^\d{9}$/,
			  'pl-PL': /^\d{10,11}$/,
			  'pt-BR': /(?:^\d{11}$)|(?:^\d{14}$)/,
			  'pt-PT': /^\d{9}$/,
			  'ro-RO': /^\d{13}$/,
			  'sk-SK': /^\d{6}\/{0,1}\d{3,4}$/,
			  'sl-SI': /^[1-9]\d{7}$/,
			  'sv-SE': /^(\d{6}[-+]{0,1}\d{4}|(18|19|20)\d{6}[-+]{0,1}\d{4})$/
			}; // taxIdFormat locale aliases

			taxIdFormat['lb-LU'] = taxIdFormat['fr-LU'];
			taxIdFormat['lt-LT'] = taxIdFormat['et-EE'];
			taxIdFormat['nl-BE'] = taxIdFormat['fr-BE'];
			taxIdFormat['fr-CA'] = taxIdFormat['en-CA']; // Algorithmic tax id check functions for various locales

			var taxIdCheck = {
			  'bg-BG': bgBgCheck,
			  'cs-CZ': csCzCheck,
			  'de-AT': deAtCheck,
			  'de-DE': deDeCheck,
			  'dk-DK': dkDkCheck,
			  'el-CY': elCyCheck,
			  'el-GR': elGrCheck,
			  'en-CA': isCanadianSIN,
			  'en-IE': enIeCheck,
			  'en-US': enUsCheck,
			  'es-ES': esEsCheck,
			  'et-EE': etEeCheck,
			  'fi-FI': fiFiCheck,
			  'fr-BE': frBeCheck,
			  'fr-FR': frFrCheck,
			  'fr-LU': frLuCheck,
			  'hr-HR': hrHrCheck,
			  'hu-HU': huHuCheck,
			  'it-IT': itItCheck,
			  'lv-LV': lvLvCheck,
			  'mt-MT': mtMtCheck,
			  'nl-NL': nlNlCheck,
			  'pl-PL': plPlCheck,
			  'pt-BR': ptBrCheck,
			  'pt-PT': ptPtCheck,
			  'ro-RO': roRoCheck,
			  'sk-SK': skSkCheck,
			  'sl-SI': slSiCheck,
			  'sv-SE': svSeCheck
			}; // taxIdCheck locale aliases

			taxIdCheck['lb-LU'] = taxIdCheck['fr-LU'];
			taxIdCheck['lt-LT'] = taxIdCheck['et-EE'];
			taxIdCheck['nl-BE'] = taxIdCheck['fr-BE'];
			taxIdCheck['fr-CA'] = taxIdCheck['en-CA']; // Regexes for locales where characters should be omitted before checking format

			var allsymbols = /[-\\\/!@#$%\^&\*\(\)\+\=\[\]]+/g;
			var sanitizeRegexes = {
			  'de-AT': allsymbols,
			  'de-DE': /[\/\\]/g,
			  'fr-BE': allsymbols
			}; // sanitizeRegexes locale aliases

			sanitizeRegexes['nl-BE'] = sanitizeRegexes['fr-BE'];
			/*
			 * Validator function
			 * Return true if the passed string is a valid tax identification number
			 * for the specified locale.
			 * Throw an error exception if the locale is not supported.
			 */

			function isTaxID(str) {
			  var locale = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'en-US';
			  (0, _assertString.default)(str); // Copy TIN to avoid replacement if sanitized

			  var strcopy = str.slice(0);

			  if (locale in taxIdFormat) {
			    if (locale in sanitizeRegexes) {
			      strcopy = strcopy.replace(sanitizeRegexes[locale], '');
			    }

			    if (!taxIdFormat[locale].test(strcopy)) {
			      return false;
			    }

			    if (locale in taxIdCheck) {
			      return taxIdCheck[locale](strcopy);
			    } // Fallthrough; not all locales have algorithmic checks


			    return true;
			  }

			  throw new Error("Invalid locale '".concat(locale, "'"));
			}

			module.exports = exports.default;
			module.exports.default = exports.default; 
		} (isTaxID, isTaxID.exports));
		return isTaxID.exports;
	}

	var isMobilePhone = {};

	var hasRequiredIsMobilePhone;

	function requireIsMobilePhone () {
		if (hasRequiredIsMobilePhone) return isMobilePhone;
		hasRequiredIsMobilePhone = 1;

		Object.defineProperty(isMobilePhone, "__esModule", {
		  value: true
		});
		isMobilePhone.default = isMobilePhone$1;
		isMobilePhone.locales = void 0;

		var _assertString = _interopRequireDefault(requireAssertString());

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		/* eslint-disable max-len */
		var phones = {
		  'am-AM': /^(\+?374|0)((10|[9|7][0-9])\d{6}$|[2-4]\d{7}$)/,
		  'ar-AE': /^((\+?971)|0)?5[024568]\d{7}$/,
		  'ar-BH': /^(\+?973)?(3|6)\d{7}$/,
		  'ar-DZ': /^(\+?213|0)(5|6|7)\d{8}$/,
		  'ar-LB': /^(\+?961)?((3|81)\d{6}|7\d{7})$/,
		  'ar-EG': /^((\+?20)|0)?1[0125]\d{8}$/,
		  'ar-IQ': /^(\+?964|0)?7[0-9]\d{8}$/,
		  'ar-JO': /^(\+?962|0)?7[789]\d{7}$/,
		  'ar-KW': /^(\+?965)([569]\d{7}|41\d{6})$/,
		  'ar-LY': /^((\+?218)|0)?(9[1-6]\d{7}|[1-8]\d{7,9})$/,
		  'ar-MA': /^(?:(?:\+|00)212|0)[5-7]\d{8}$/,
		  'ar-OM': /^((\+|00)968)?(9[1-9])\d{6}$/,
		  'ar-PS': /^(\+?970|0)5[6|9](\d{7})$/,
		  'ar-SA': /^(!?(\+?966)|0)?5\d{8}$/,
		  'ar-SY': /^(!?(\+?963)|0)?9\d{8}$/,
		  'ar-TN': /^(\+?216)?[2459]\d{7}$/,
		  'az-AZ': /^(\+994|0)(10|5[015]|7[07]|99)\d{7}$/,
		  'bs-BA': /^((((\+|00)3876)|06))((([0-3]|[5-6])\d{6})|(4\d{7}))$/,
		  'be-BY': /^(\+?375)?(24|25|29|33|44)\d{7}$/,
		  'bg-BG': /^(\+?359|0)?8[789]\d{7}$/,
		  'bn-BD': /^(\+?880|0)1[13456789][0-9]{8}$/,
		  'ca-AD': /^(\+376)?[346]\d{5}$/,
		  'cs-CZ': /^(\+?420)? ?[1-9][0-9]{2} ?[0-9]{3} ?[0-9]{3}$/,
		  'da-DK': /^(\+?45)?\s?\d{2}\s?\d{2}\s?\d{2}\s?\d{2}$/,
		  'de-DE': /^((\+49|0)1)(5[0-25-9]\d|6([23]|0\d?)|7([0-57-9]|6\d))\d{7,9}$/,
		  'de-AT': /^(\+43|0)\d{1,4}\d{3,12}$/,
		  'de-CH': /^(\+41|0)([1-9])\d{1,9}$/,
		  'de-LU': /^(\+352)?((6\d1)\d{6})$/,
		  'dv-MV': /^(\+?960)?(7[2-9]|9[1-9])\d{5}$/,
		  'el-GR': /^(\+?30|0)?6(8[5-9]|9(?![26])[0-9])\d{7}$/,
		  'el-CY': /^(\+?357?)?(9(9|6)\d{6})$/,
		  'en-AI': /^(\+?1|0)264(?:2(35|92)|4(?:6[1-2]|76|97)|5(?:3[6-9]|8[1-4])|7(?:2(4|9)|72))\d{4}$/,
		  'en-AU': /^(\+?61|0)4\d{8}$/,
		  'en-AG': /^(?:\+1|1)268(?:464|7(?:1[3-9]|[28]\d|3[0246]|64|7[0-689]))\d{4}$/,
		  'en-BM': /^(\+?1)?441(((3|7)\d{6}$)|(5[0-3][0-9]\d{4}$)|(59\d{5}$))/,
		  'en-BS': /^(\+?1[-\s]?|0)?\(?242\)?[-\s]?\d{3}[-\s]?\d{4}$/,
		  'en-GB': /^(\+?44|0)7\d{9}$/,
		  'en-GG': /^(\+?44|0)1481\d{6}$/,
		  'en-GH': /^(\+233|0)(20|50|24|54|27|57|26|56|23|28|55|59)\d{7}$/,
		  'en-GY': /^(\+592|0)6\d{6}$/,
		  'en-HK': /^(\+?852[-\s]?)?[456789]\d{3}[-\s]?\d{4}$/,
		  'en-MO': /^(\+?853[-\s]?)?[6]\d{3}[-\s]?\d{4}$/,
		  'en-IE': /^(\+?353|0)8[356789]\d{7}$/,
		  'en-IN': /^(\+?91|0)?[6789]\d{9}$/,
		  'en-JM': /^(\+?876)?\d{7}$/,
		  'en-KE': /^(\+?254|0)(7|1)\d{8}$/,
		  'en-SS': /^(\+?211|0)(9[1257])\d{7}$/,
		  'en-KI': /^((\+686|686)?)?( )?((6|7)(2|3|8)[0-9]{6})$/,
		  'en-KN': /^(?:\+1|1)869(?:46\d|48[89]|55[6-8]|66\d|76[02-7])\d{4}$/,
		  'en-LS': /^(\+?266)(22|28|57|58|59|27|52)\d{6}$/,
		  'en-MT': /^(\+?356|0)?(99|79|77|21|27|22|25)[0-9]{6}$/,
		  'en-MU': /^(\+?230|0)?\d{8}$/,
		  'en-NA': /^(\+?264|0)(6|8)\d{7}$/,
		  'en-NG': /^(\+?234|0)?[789]\d{9}$/,
		  'en-NZ': /^(\+?64|0)[28]\d{7,9}$/,
		  'en-PG': /^(\+?675|0)?(7\d|8[18])\d{6}$/,
		  'en-PK': /^((00|\+)?92|0)3[0-6]\d{8}$/,
		  'en-PH': /^(09|\+639)\d{9}$/,
		  'en-RW': /^(\+?250|0)?[7]\d{8}$/,
		  'en-SG': /^(\+65)?[3689]\d{7}$/,
		  'en-SL': /^(\+?232|0)\d{8}$/,
		  'en-TZ': /^(\+?255|0)?[67]\d{8}$/,
		  'en-UG': /^(\+?256|0)?[7]\d{8}$/,
		  'en-US': /^((\+1|1)?( |-)?)?(\([2-9][0-9]{2}\)|[2-9][0-9]{2})( |-)?([2-9][0-9]{2}( |-)?[0-9]{4})$/,
		  'en-ZA': /^(\+?27|0)\d{9}$/,
		  'en-ZM': /^(\+?26)?09[567]\d{7}$/,
		  'en-ZW': /^(\+263)[0-9]{9}$/,
		  'en-BW': /^(\+?267)?(7[1-8]{1})\d{6}$/,
		  'es-AR': /^\+?549(11|[2368]\d)\d{8}$/,
		  'es-BO': /^(\+?591)?(6|7)\d{7}$/,
		  'es-CO': /^(\+?57)?3(0(0|1|2|4|5)|1\d|2[0-4]|5(0|1))\d{7}$/,
		  'es-CL': /^(\+?56|0)[2-9]\d{1}\d{7}$/,
		  'es-CR': /^(\+506)?[2-8]\d{7}$/,
		  'es-CU': /^(\+53|0053)?5\d{7}/,
		  'es-DO': /^(\+?1)?8[024]9\d{7}$/,
		  'es-HN': /^(\+?504)?[9|8|3|2]\d{7}$/,
		  'es-EC': /^(\+?593|0)([2-7]|9[2-9])\d{7}$/,
		  'es-ES': /^(\+?34)?[6|7]\d{8}$/,
		  'es-PE': /^(\+?51)?9\d{8}$/,
		  'es-MX': /^(\+?52)?(1|01)?\d{10,11}$/,
		  'es-NI': /^(\+?505)\d{7,8}$/,
		  'es-PA': /^(\+?507)\d{7,8}$/,
		  'es-PY': /^(\+?595|0)9[9876]\d{7}$/,
		  'es-SV': /^(\+?503)?[67]\d{7}$/,
		  'es-UY': /^(\+598|0)9[1-9][\d]{6}$/,
		  'es-VE': /^(\+?58)?(2|4)\d{9}$/,
		  'et-EE': /^(\+?372)?\s?(5|8[1-4])\s?([0-9]\s?){6,7}$/,
		  'fa-IR': /^(\+?98[\-\s]?|0)9[0-39]\d[\-\s]?\d{3}[\-\s]?\d{4}$/,
		  'fi-FI': /^(\+?358|0)\s?(4[0-6]|50)\s?(\d\s?){4,8}$/,
		  'fj-FJ': /^(\+?679)?\s?\d{3}\s?\d{4}$/,
		  'fo-FO': /^(\+?298)?\s?\d{2}\s?\d{2}\s?\d{2}$/,
		  'fr-BF': /^(\+226|0)[67]\d{7}$/,
		  'fr-BJ': /^(\+229)\d{8}$/,
		  'fr-CD': /^(\+?243|0)?(8|9)\d{8}$/,
		  'fr-CM': /^(\+?237)6[0-9]{8}$/,
		  'fr-FR': /^(\+?33|0)[67]\d{8}$/,
		  'fr-GF': /^(\+?594|0|00594)[67]\d{8}$/,
		  'fr-GP': /^(\+?590|0|00590)[67]\d{8}$/,
		  'fr-MQ': /^(\+?596|0|00596)[67]\d{8}$/,
		  'fr-PF': /^(\+?689)?8[789]\d{6}$/,
		  'fr-RE': /^(\+?262|0|00262)[67]\d{8}$/,
		  'he-IL': /^(\+972|0)([23489]|5[012345689]|77)[1-9]\d{6}$/,
		  'hu-HU': /^(\+?36|06)(20|30|31|50|70)\d{7}$/,
		  'id-ID': /^(\+?62|0)8(1[123456789]|2[1238]|3[1238]|5[12356789]|7[78]|9[56789]|8[123456789])([\s?|\d]{5,11})$/,
		  'ir-IR': /^(\+98|0)?9\d{9}$/,
		  'it-IT': /^(\+?39)?\s?3\d{2} ?\d{6,7}$/,
		  'it-SM': /^((\+378)|(0549)|(\+390549)|(\+3780549))?6\d{5,9}$/,
		  'ja-JP': /^(\+81[ \-]?(\(0\))?|0)[6789]0[ \-]?\d{4}[ \-]?\d{4}$/,
		  'ka-GE': /^(\+?995)?(79\d{7}|5\d{8})$/,
		  'kk-KZ': /^(\+?7|8)?7\d{9}$/,
		  'kl-GL': /^(\+?299)?\s?\d{2}\s?\d{2}\s?\d{2}$/,
		  'ko-KR': /^((\+?82)[ \-]?)?0?1([0|1|6|7|8|9]{1})[ \-]?\d{3,4}[ \-]?\d{4}$/,
		  'ky-KG': /^(\+?7\s?\+?7|0)\s?\d{2}\s?\d{3}\s?\d{4}$/,
		  'lt-LT': /^(\+370|8)\d{8}$/,
		  'lv-LV': /^(\+?371)2\d{7}$/,
		  'mg-MG': /^((\+?261|0)(2|3)\d)?\d{7}$/,
		  'mn-MN': /^(\+|00|011)?976(77|81|88|91|94|95|96|99)\d{6}$/,
		  'my-MM': /^(\+?959|09|9)(2[5-7]|3[1-2]|4[0-5]|6[6-9]|7[5-9]|9[6-9])[0-9]{7}$/,
		  'ms-MY': /^(\+?60|0)1(([0145](-|\s)?\d{7,8})|([236-9](-|\s)?\d{7}))$/,
		  'mz-MZ': /^(\+?258)?8[234567]\d{7}$/,
		  'nb-NO': /^(\+?47)?[49]\d{7}$/,
		  'ne-NP': /^(\+?977)?9[78]\d{8}$/,
		  'nl-BE': /^(\+?32|0)4\d{8}$/,
		  'nl-NL': /^(((\+|00)?31\(0\))|((\+|00)?31)|0)6{1}\d{8}$/,
		  'nl-AW': /^(\+)?297(56|59|64|73|74|99)\d{5}$/,
		  'nn-NO': /^(\+?47)?[49]\d{7}$/,
		  'pl-PL': /^(\+?48)? ?[5-8]\d ?\d{3} ?\d{2} ?\d{2}$/,
		  'pt-BR': /^((\+?55\ ?[1-9]{2}\ ?)|(\+?55\ ?\([1-9]{2}\)\ ?)|(0[1-9]{2}\ ?)|(\([1-9]{2}\)\ ?)|([1-9]{2}\ ?))((\d{4}\-?\d{4})|(9[1-9]{1}\d{3}\-?\d{4}))$/,
		  'pt-PT': /^(\+?351)?9[1236]\d{7}$/,
		  'pt-AO': /^(\+244)\d{9}$/,
		  'ro-MD': /^(\+?373|0)((6(0|1|2|6|7|8|9))|(7(6|7|8|9)))\d{6}$/,
		  'ro-RO': /^(\+?40|0)\s?7\d{2}(\/|\s|\.|-)?\d{3}(\s|\.|-)?\d{3}$/,
		  'ru-RU': /^(\+?7|8)?9\d{9}$/,
		  'si-LK': /^(?:0|94|\+94)?(7(0|1|2|4|5|6|7|8)( |-)?)\d{7}$/,
		  'sl-SI': /^(\+386\s?|0)(\d{1}\s?\d{3}\s?\d{2}\s?\d{2}|\d{2}\s?\d{3}\s?\d{3})$/,
		  'sk-SK': /^(\+?421)? ?[1-9][0-9]{2} ?[0-9]{3} ?[0-9]{3}$/,
		  'sq-AL': /^(\+355|0)6[789]\d{6}$/,
		  'sr-RS': /^(\+3816|06)[- \d]{5,9}$/,
		  'sv-SE': /^(\+?46|0)[\s\-]?7[\s\-]?[02369]([\s\-]?\d){7}$/,
		  'tg-TJ': /^(\+?992)?[5][5]\d{7}$/,
		  'th-TH': /^(\+66|66|0)\d{9}$/,
		  'tr-TR': /^(\+?90|0)?5\d{9}$/,
		  'tk-TM': /^(\+993|993|8)\d{8}$/,
		  'uk-UA': /^(\+?38|8)?0\d{9}$/,
		  'uz-UZ': /^(\+?998)?(6[125-79]|7[1-69]|88|9\d)\d{7}$/,
		  'vi-VN': /^((\+?84)|0)((3([2-9]))|(5([25689]))|(7([0|6-9]))|(8([1-9]))|(9([0-9])))([0-9]{7})$/,
		  'zh-CN': /^((\+|00)86)?(1[3-9]|9[28])\d{9}$/,
		  'zh-TW': /^(\+?886\-?|0)?9\d{8}$/,
		  'dz-BT': /^(\+?975|0)?(17|16|77|02)\d{6}$/,
		  'ar-YE': /^(((\+|00)9677|0?7)[0137]\d{7}|((\+|00)967|0)[1-7]\d{6})$/,
		  'ar-EH': /^(\+?212|0)[\s\-]?(5288|5289)[\s\-]?\d{5}$/,
		  'fa-AF': /^(\+93|0)?(2{1}[0-8]{1}|[3-5]{1}[0-4]{1})(\d{7})$/
		};
		/* eslint-enable max-len */
		// aliases

		phones['en-CA'] = phones['en-US'];
		phones['fr-CA'] = phones['en-CA'];
		phones['fr-BE'] = phones['nl-BE'];
		phones['zh-HK'] = phones['en-HK'];
		phones['zh-MO'] = phones['en-MO'];
		phones['ga-IE'] = phones['en-IE'];
		phones['fr-CH'] = phones['de-CH'];
		phones['it-CH'] = phones['fr-CH'];

		function isMobilePhone$1(str, locale, options) {
		  (0, _assertString.default)(str);

		  if (options && options.strictMode && !str.startsWith('+')) {
		    return false;
		  }

		  if (Array.isArray(locale)) {
		    return locale.some(function (key) {
		      // https://github.com/gotwarlost/istanbul/blob/master/ignoring-code-for-coverage.md#ignoring-code-for-coverage-purposes
		      // istanbul ignore else
		      if (phones.hasOwnProperty(key)) {
		        var phone = phones[key];

		        if (phone.test(str)) {
		          return true;
		        }
		      }

		      return false;
		    });
		  } else if (locale in phones) {
		    return phones[locale].test(str); // alias falsey locale as 'any'
		  } else if (!locale || locale === 'any') {
		    for (var key in phones) {
		      // istanbul ignore else
		      if (phones.hasOwnProperty(key)) {
		        var phone = phones[key];

		        if (phone.test(str)) {
		          return true;
		        }
		      }
		    }

		    return false;
		  }

		  throw new Error("Invalid locale '".concat(locale, "'"));
		}

		var locales = Object.keys(phones);
		isMobilePhone.locales = locales;
		return isMobilePhone;
	}

	var isEthereumAddress = {exports: {}};

	var hasRequiredIsEthereumAddress;

	function requireIsEthereumAddress () {
		if (hasRequiredIsEthereumAddress) return isEthereumAddress.exports;
		hasRequiredIsEthereumAddress = 1;
		(function (module, exports) {

			Object.defineProperty(exports, "__esModule", {
			  value: true
			});
			exports.default = isEthereumAddress;

			var _assertString = _interopRequireDefault(requireAssertString());

			function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

			var eth = /^(0x)[0-9a-f]{40}$/i;

			function isEthereumAddress(str) {
			  (0, _assertString.default)(str);
			  return eth.test(str);
			}

			module.exports = exports.default;
			module.exports.default = exports.default; 
		} (isEthereumAddress, isEthereumAddress.exports));
		return isEthereumAddress.exports;
	}

	var isCurrency = {exports: {}};

	var hasRequiredIsCurrency;

	function requireIsCurrency () {
		if (hasRequiredIsCurrency) return isCurrency.exports;
		hasRequiredIsCurrency = 1;
		(function (module, exports) {

			Object.defineProperty(exports, "__esModule", {
			  value: true
			});
			exports.default = isCurrency;

			var _merge = _interopRequireDefault(requireMerge$1());

			var _assertString = _interopRequireDefault(requireAssertString());

			function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

			function currencyRegex(options) {
			  var decimal_digits = "\\d{".concat(options.digits_after_decimal[0], "}");
			  options.digits_after_decimal.forEach(function (digit, index) {
			    if (index !== 0) decimal_digits = "".concat(decimal_digits, "|\\d{").concat(digit, "}");
			  });
			  var symbol = "(".concat(options.symbol.replace(/\W/, function (m) {
			    return "\\".concat(m);
			  }), ")").concat(options.require_symbol ? '' : '?'),
			      negative = '-?',
			      whole_dollar_amount_without_sep = '[1-9]\\d*',
			      whole_dollar_amount_with_sep = "[1-9]\\d{0,2}(\\".concat(options.thousands_separator, "\\d{3})*"),
			      valid_whole_dollar_amounts = ['0', whole_dollar_amount_without_sep, whole_dollar_amount_with_sep],
			      whole_dollar_amount = "(".concat(valid_whole_dollar_amounts.join('|'), ")?"),
			      decimal_amount = "(\\".concat(options.decimal_separator, "(").concat(decimal_digits, "))").concat(options.require_decimal ? '' : '?');
			  var pattern = whole_dollar_amount + (options.allow_decimal || options.require_decimal ? decimal_amount : ''); // default is negative sign before symbol, but there are two other options (besides parens)

			  if (options.allow_negatives && !options.parens_for_negatives) {
			    if (options.negative_sign_after_digits) {
			      pattern += negative;
			    } else if (options.negative_sign_before_digits) {
			      pattern = negative + pattern;
			    }
			  } // South African Rand, for example, uses R 123 (space) and R-123 (no space)


			  if (options.allow_negative_sign_placeholder) {
			    pattern = "( (?!\\-))?".concat(pattern);
			  } else if (options.allow_space_after_symbol) {
			    pattern = " ?".concat(pattern);
			  } else if (options.allow_space_after_digits) {
			    pattern += '( (?!$))?';
			  }

			  if (options.symbol_after_digits) {
			    pattern += symbol;
			  } else {
			    pattern = symbol + pattern;
			  }

			  if (options.allow_negatives) {
			    if (options.parens_for_negatives) {
			      pattern = "(\\(".concat(pattern, "\\)|").concat(pattern, ")");
			    } else if (!(options.negative_sign_before_digits || options.negative_sign_after_digits)) {
			      pattern = negative + pattern;
			    }
			  } // ensure there's a dollar and/or decimal amount, and that
			  // it doesn't start with a space or a negative sign followed by a space


			  return new RegExp("^(?!-? )(?=.*\\d)".concat(pattern, "$"));
			}

			var default_currency_options = {
			  symbol: '$',
			  require_symbol: false,
			  allow_space_after_symbol: false,
			  symbol_after_digits: false,
			  allow_negatives: true,
			  parens_for_negatives: false,
			  negative_sign_before_digits: false,
			  negative_sign_after_digits: false,
			  allow_negative_sign_placeholder: false,
			  thousands_separator: ',',
			  decimal_separator: '.',
			  allow_decimal: true,
			  require_decimal: false,
			  digits_after_decimal: [2],
			  allow_space_after_digits: false
			};

			function isCurrency(str, options) {
			  (0, _assertString.default)(str);
			  options = (0, _merge.default)(options, default_currency_options);
			  return currencyRegex(options).test(str);
			}

			module.exports = exports.default;
			module.exports.default = exports.default; 
		} (isCurrency, isCurrency.exports));
		return isCurrency.exports;
	}

	var isBtcAddress = {exports: {}};

	var hasRequiredIsBtcAddress;

	function requireIsBtcAddress () {
		if (hasRequiredIsBtcAddress) return isBtcAddress.exports;
		hasRequiredIsBtcAddress = 1;
		(function (module, exports) {

			Object.defineProperty(exports, "__esModule", {
			  value: true
			});
			exports.default = isBtcAddress;

			var _assertString = _interopRequireDefault(requireAssertString());

			function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

			var bech32 = /^(bc1)[a-z0-9]{25,39}$/;
			var base58 = /^(1|3)[A-HJ-NP-Za-km-z1-9]{25,39}$/;

			function isBtcAddress(str) {
			  (0, _assertString.default)(str);
			  return bech32.test(str) || base58.test(str);
			}

			module.exports = exports.default;
			module.exports.default = exports.default; 
		} (isBtcAddress, isBtcAddress.exports));
		return isBtcAddress.exports;
	}

	var isISO6391 = {exports: {}};

	var hasRequiredIsISO6391;

	function requireIsISO6391 () {
		if (hasRequiredIsISO6391) return isISO6391.exports;
		hasRequiredIsISO6391 = 1;
		(function (module, exports) {

			Object.defineProperty(exports, "__esModule", {
			  value: true
			});
			exports.default = isISO6391;

			var _assertString = _interopRequireDefault(requireAssertString());

			function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

			var isISO6391Set = new Set(['aa', 'ab', 'ae', 'af', 'ak', 'am', 'an', 'ar', 'as', 'av', 'ay', 'az', 'az', 'ba', 'be', 'bg', 'bh', 'bi', 'bm', 'bn', 'bo', 'br', 'bs', 'ca', 'ce', 'ch', 'co', 'cr', 'cs', 'cu', 'cv', 'cy', 'da', 'de', 'dv', 'dz', 'ee', 'el', 'en', 'eo', 'es', 'et', 'eu', 'fa', 'ff', 'fi', 'fj', 'fo', 'fr', 'fy', 'ga', 'gd', 'gl', 'gn', 'gu', 'gv', 'ha', 'he', 'hi', 'ho', 'hr', 'ht', 'hu', 'hy', 'hz', 'ia', 'id', 'ie', 'ig', 'ii', 'ik', 'io', 'is', 'it', 'iu', 'ja', 'jv', 'ka', 'kg', 'ki', 'kj', 'kk', 'kl', 'km', 'kn', 'ko', 'kr', 'ks', 'ku', 'kv', 'kw', 'ky', 'la', 'lb', 'lg', 'li', 'ln', 'lo', 'lt', 'lu', 'lv', 'mg', 'mh', 'mi', 'mk', 'ml', 'mn', 'mr', 'ms', 'mt', 'my', 'na', 'nb', 'nd', 'ne', 'ng', 'nl', 'nn', 'no', 'nr', 'nv', 'ny', 'oc', 'oj', 'om', 'or', 'os', 'pa', 'pi', 'pl', 'ps', 'pt', 'qu', 'rm', 'rn', 'ro', 'ru', 'rw', 'sa', 'sc', 'sd', 'se', 'sg', 'si', 'sk', 'sl', 'sm', 'sn', 'so', 'sq', 'sr', 'ss', 'st', 'su', 'sv', 'sw', 'ta', 'te', 'tg', 'th', 'ti', 'tk', 'tl', 'tn', 'to', 'tr', 'ts', 'tt', 'tw', 'ty', 'ug', 'uk', 'ur', 'uz', 've', 'vi', 'vo', 'wa', 'wo', 'xh', 'yi', 'yo', 'za', 'zh', 'zu']);

			function isISO6391(str) {
			  (0, _assertString.default)(str);
			  return isISO6391Set.has(str);
			}

			module.exports = exports.default;
			module.exports.default = exports.default; 
		} (isISO6391, isISO6391.exports));
		return isISO6391.exports;
	}

	var isISO8601 = {exports: {}};

	var hasRequiredIsISO8601;

	function requireIsISO8601 () {
		if (hasRequiredIsISO8601) return isISO8601.exports;
		hasRequiredIsISO8601 = 1;
		(function (module, exports) {

			Object.defineProperty(exports, "__esModule", {
			  value: true
			});
			exports.default = isISO8601;

			var _assertString = _interopRequireDefault(requireAssertString());

			function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

			/* eslint-disable max-len */
			// from http://goo.gl/0ejHHW
			var iso8601 = /^([\+-]?\d{4}(?!\d{2}\b))((-?)((0[1-9]|1[0-2])(\3([12]\d|0[1-9]|3[01]))?|W([0-4]\d|5[0-3])(-?[1-7])?|(00[1-9]|0[1-9]\d|[12]\d{2}|3([0-5]\d|6[1-6])))([T\s]((([01]\d|2[0-3])((:?)[0-5]\d)?|24:?00)([\.,]\d+(?!:))?)?(\17[0-5]\d([\.,]\d+)?)?([zZ]|([\+-])([01]\d|2[0-3]):?([0-5]\d)?)?)?)?$/; // same as above, except with a strict 'T' separator between date and time

			var iso8601StrictSeparator = /^([\+-]?\d{4}(?!\d{2}\b))((-?)((0[1-9]|1[0-2])(\3([12]\d|0[1-9]|3[01]))?|W([0-4]\d|5[0-3])(-?[1-7])?|(00[1-9]|0[1-9]\d|[12]\d{2}|3([0-5]\d|6[1-6])))([T]((([01]\d|2[0-3])((:?)[0-5]\d)?|24:?00)([\.,]\d+(?!:))?)?(\17[0-5]\d([\.,]\d+)?)?([zZ]|([\+-])([01]\d|2[0-3]):?([0-5]\d)?)?)?)?$/;
			/* eslint-enable max-len */

			var isValidDate = function isValidDate(str) {
			  // str must have passed the ISO8601 check
			  // this check is meant to catch invalid dates
			  // like 2009-02-31
			  // first check for ordinal dates
			  var ordinalMatch = str.match(/^(\d{4})-?(\d{3})([ T]{1}\.*|$)/);

			  if (ordinalMatch) {
			    var oYear = Number(ordinalMatch[1]);
			    var oDay = Number(ordinalMatch[2]); // if is leap year

			    if (oYear % 4 === 0 && oYear % 100 !== 0 || oYear % 400 === 0) return oDay <= 366;
			    return oDay <= 365;
			  }

			  var match = str.match(/(\d{4})-?(\d{0,2})-?(\d*)/).map(Number);
			  var year = match[1];
			  var month = match[2];
			  var day = match[3];
			  var monthString = month ? "0".concat(month).slice(-2) : month;
			  var dayString = day ? "0".concat(day).slice(-2) : day; // create a date object and compare

			  var d = new Date("".concat(year, "-").concat(monthString || '01', "-").concat(dayString || '01'));

			  if (month && day) {
			    return d.getUTCFullYear() === year && d.getUTCMonth() + 1 === month && d.getUTCDate() === day;
			  }

			  return true;
			};

			function isISO8601(str) {
			  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
			  (0, _assertString.default)(str);
			  var check = options.strictSeparator ? iso8601StrictSeparator.test(str) : iso8601.test(str);
			  if (check && options.strict) return isValidDate(str);
			  return check;
			}

			module.exports = exports.default;
			module.exports.default = exports.default; 
		} (isISO8601, isISO8601.exports));
		return isISO8601.exports;
	}

	var isRFC3339 = {exports: {}};

	var hasRequiredIsRFC3339;

	function requireIsRFC3339 () {
		if (hasRequiredIsRFC3339) return isRFC3339.exports;
		hasRequiredIsRFC3339 = 1;
		(function (module, exports) {

			Object.defineProperty(exports, "__esModule", {
			  value: true
			});
			exports.default = isRFC3339;

			var _assertString = _interopRequireDefault(requireAssertString());

			function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

			/* Based on https://tools.ietf.org/html/rfc3339#section-5.6 */
			var dateFullYear = /[0-9]{4}/;
			var dateMonth = /(0[1-9]|1[0-2])/;
			var dateMDay = /([12]\d|0[1-9]|3[01])/;
			var timeHour = /([01][0-9]|2[0-3])/;
			var timeMinute = /[0-5][0-9]/;
			var timeSecond = /([0-5][0-9]|60)/;
			var timeSecFrac = /(\.[0-9]+)?/;
			var timeNumOffset = new RegExp("[-+]".concat(timeHour.source, ":").concat(timeMinute.source));
			var timeOffset = new RegExp("([zZ]|".concat(timeNumOffset.source, ")"));
			var partialTime = new RegExp("".concat(timeHour.source, ":").concat(timeMinute.source, ":").concat(timeSecond.source).concat(timeSecFrac.source));
			var fullDate = new RegExp("".concat(dateFullYear.source, "-").concat(dateMonth.source, "-").concat(dateMDay.source));
			var fullTime = new RegExp("".concat(partialTime.source).concat(timeOffset.source));
			var rfc3339 = new RegExp("^".concat(fullDate.source, "[ tT]").concat(fullTime.source, "$"));

			function isRFC3339(str) {
			  (0, _assertString.default)(str);
			  return rfc3339.test(str);
			}

			module.exports = exports.default;
			module.exports.default = exports.default; 
		} (isRFC3339, isRFC3339.exports));
		return isRFC3339.exports;
	}

	var isISO31661Alpha3 = {exports: {}};

	var hasRequiredIsISO31661Alpha3;

	function requireIsISO31661Alpha3 () {
		if (hasRequiredIsISO31661Alpha3) return isISO31661Alpha3.exports;
		hasRequiredIsISO31661Alpha3 = 1;
		(function (module, exports) {

			Object.defineProperty(exports, "__esModule", {
			  value: true
			});
			exports.default = isISO31661Alpha3;

			var _assertString = _interopRequireDefault(requireAssertString());

			function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

			// from https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3
			var validISO31661Alpha3CountriesCodes = new Set(['AFG', 'ALA', 'ALB', 'DZA', 'ASM', 'AND', 'AGO', 'AIA', 'ATA', 'ATG', 'ARG', 'ARM', 'ABW', 'AUS', 'AUT', 'AZE', 'BHS', 'BHR', 'BGD', 'BRB', 'BLR', 'BEL', 'BLZ', 'BEN', 'BMU', 'BTN', 'BOL', 'BES', 'BIH', 'BWA', 'BVT', 'BRA', 'IOT', 'BRN', 'BGR', 'BFA', 'BDI', 'KHM', 'CMR', 'CAN', 'CPV', 'CYM', 'CAF', 'TCD', 'CHL', 'CHN', 'CXR', 'CCK', 'COL', 'COM', 'COG', 'COD', 'COK', 'CRI', 'CIV', 'HRV', 'CUB', 'CUW', 'CYP', 'CZE', 'DNK', 'DJI', 'DMA', 'DOM', 'ECU', 'EGY', 'SLV', 'GNQ', 'ERI', 'EST', 'ETH', 'FLK', 'FRO', 'FJI', 'FIN', 'FRA', 'GUF', 'PYF', 'ATF', 'GAB', 'GMB', 'GEO', 'DEU', 'GHA', 'GIB', 'GRC', 'GRL', 'GRD', 'GLP', 'GUM', 'GTM', 'GGY', 'GIN', 'GNB', 'GUY', 'HTI', 'HMD', 'VAT', 'HND', 'HKG', 'HUN', 'ISL', 'IND', 'IDN', 'IRN', 'IRQ', 'IRL', 'IMN', 'ISR', 'ITA', 'JAM', 'JPN', 'JEY', 'JOR', 'KAZ', 'KEN', 'KIR', 'PRK', 'KOR', 'KWT', 'KGZ', 'LAO', 'LVA', 'LBN', 'LSO', 'LBR', 'LBY', 'LIE', 'LTU', 'LUX', 'MAC', 'MKD', 'MDG', 'MWI', 'MYS', 'MDV', 'MLI', 'MLT', 'MHL', 'MTQ', 'MRT', 'MUS', 'MYT', 'MEX', 'FSM', 'MDA', 'MCO', 'MNG', 'MNE', 'MSR', 'MAR', 'MOZ', 'MMR', 'NAM', 'NRU', 'NPL', 'NLD', 'NCL', 'NZL', 'NIC', 'NER', 'NGA', 'NIU', 'NFK', 'MNP', 'NOR', 'OMN', 'PAK', 'PLW', 'PSE', 'PAN', 'PNG', 'PRY', 'PER', 'PHL', 'PCN', 'POL', 'PRT', 'PRI', 'QAT', 'REU', 'ROU', 'RUS', 'RWA', 'BLM', 'SHN', 'KNA', 'LCA', 'MAF', 'SPM', 'VCT', 'WSM', 'SMR', 'STP', 'SAU', 'SEN', 'SRB', 'SYC', 'SLE', 'SGP', 'SXM', 'SVK', 'SVN', 'SLB', 'SOM', 'ZAF', 'SGS', 'SSD', 'ESP', 'LKA', 'SDN', 'SUR', 'SJM', 'SWZ', 'SWE', 'CHE', 'SYR', 'TWN', 'TJK', 'TZA', 'THA', 'TLS', 'TGO', 'TKL', 'TON', 'TTO', 'TUN', 'TUR', 'TKM', 'TCA', 'TUV', 'UGA', 'UKR', 'ARE', 'GBR', 'USA', 'UMI', 'URY', 'UZB', 'VUT', 'VEN', 'VNM', 'VGB', 'VIR', 'WLF', 'ESH', 'YEM', 'ZMB', 'ZWE']);

			function isISO31661Alpha3(str) {
			  (0, _assertString.default)(str);
			  return validISO31661Alpha3CountriesCodes.has(str.toUpperCase());
			}

			module.exports = exports.default;
			module.exports.default = exports.default; 
		} (isISO31661Alpha3, isISO31661Alpha3.exports));
		return isISO31661Alpha3.exports;
	}

	var isISO4217 = {};

	var hasRequiredIsISO4217;

	function requireIsISO4217 () {
		if (hasRequiredIsISO4217) return isISO4217;
		hasRequiredIsISO4217 = 1;

		Object.defineProperty(isISO4217, "__esModule", {
		  value: true
		});
		isISO4217.default = isISO4217$1;
		isISO4217.CurrencyCodes = void 0;

		var _assertString = _interopRequireDefault(requireAssertString());

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		// from https://en.wikipedia.org/wiki/ISO_4217
		var validISO4217CurrencyCodes = new Set(['AED', 'AFN', 'ALL', 'AMD', 'ANG', 'AOA', 'ARS', 'AUD', 'AWG', 'AZN', 'BAM', 'BBD', 'BDT', 'BGN', 'BHD', 'BIF', 'BMD', 'BND', 'BOB', 'BOV', 'BRL', 'BSD', 'BTN', 'BWP', 'BYN', 'BZD', 'CAD', 'CDF', 'CHE', 'CHF', 'CHW', 'CLF', 'CLP', 'CNY', 'COP', 'COU', 'CRC', 'CUC', 'CUP', 'CVE', 'CZK', 'DJF', 'DKK', 'DOP', 'DZD', 'EGP', 'ERN', 'ETB', 'EUR', 'FJD', 'FKP', 'GBP', 'GEL', 'GHS', 'GIP', 'GMD', 'GNF', 'GTQ', 'GYD', 'HKD', 'HNL', 'HRK', 'HTG', 'HUF', 'IDR', 'ILS', 'INR', 'IQD', 'IRR', 'ISK', 'JMD', 'JOD', 'JPY', 'KES', 'KGS', 'KHR', 'KMF', 'KPW', 'KRW', 'KWD', 'KYD', 'KZT', 'LAK', 'LBP', 'LKR', 'LRD', 'LSL', 'LYD', 'MAD', 'MDL', 'MGA', 'MKD', 'MMK', 'MNT', 'MOP', 'MRU', 'MUR', 'MVR', 'MWK', 'MXN', 'MXV', 'MYR', 'MZN', 'NAD', 'NGN', 'NIO', 'NOK', 'NPR', 'NZD', 'OMR', 'PAB', 'PEN', 'PGK', 'PHP', 'PKR', 'PLN', 'PYG', 'QAR', 'RON', 'RSD', 'RUB', 'RWF', 'SAR', 'SBD', 'SCR', 'SDG', 'SEK', 'SGD', 'SHP', 'SLL', 'SOS', 'SRD', 'SSP', 'STN', 'SVC', 'SYP', 'SZL', 'THB', 'TJS', 'TMT', 'TND', 'TOP', 'TRY', 'TTD', 'TWD', 'TZS', 'UAH', 'UGX', 'USD', 'USN', 'UYI', 'UYU', 'UYW', 'UZS', 'VES', 'VND', 'VUV', 'WST', 'XAF', 'XAG', 'XAU', 'XBA', 'XBB', 'XBC', 'XBD', 'XCD', 'XDR', 'XOF', 'XPD', 'XPF', 'XPT', 'XSU', 'XTS', 'XUA', 'XXX', 'YER', 'ZAR', 'ZMW', 'ZWL']);

		function isISO4217$1(str) {
		  (0, _assertString.default)(str);
		  return validISO4217CurrencyCodes.has(str.toUpperCase());
		}

		var CurrencyCodes = validISO4217CurrencyCodes;
		isISO4217.CurrencyCodes = CurrencyCodes;
		return isISO4217;
	}

	var isBase32 = {exports: {}};

	var hasRequiredIsBase32;

	function requireIsBase32 () {
		if (hasRequiredIsBase32) return isBase32.exports;
		hasRequiredIsBase32 = 1;
		(function (module, exports) {

			Object.defineProperty(exports, "__esModule", {
			  value: true
			});
			exports.default = isBase32;

			var _assertString = _interopRequireDefault(requireAssertString());

			var _merge = _interopRequireDefault(requireMerge$1());

			function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

			var base32 = /^[A-Z2-7]+=*$/;
			var crockfordBase32 = /^[A-HJKMNP-TV-Z0-9]+$/;
			var defaultBase32Options = {
			  crockford: false
			};

			function isBase32(str, options) {
			  (0, _assertString.default)(str);
			  options = (0, _merge.default)(options, defaultBase32Options);

			  if (options.crockford) {
			    return crockfordBase32.test(str);
			  }

			  var len = str.length;

			  if (len % 8 === 0 && base32.test(str)) {
			    return true;
			  }

			  return false;
			}

			module.exports = exports.default;
			module.exports.default = exports.default; 
		} (isBase32, isBase32.exports));
		return isBase32.exports;
	}

	var isBase58 = {exports: {}};

	var hasRequiredIsBase58;

	function requireIsBase58 () {
		if (hasRequiredIsBase58) return isBase58.exports;
		hasRequiredIsBase58 = 1;
		(function (module, exports) {

			Object.defineProperty(exports, "__esModule", {
			  value: true
			});
			exports.default = isBase58;

			var _assertString = _interopRequireDefault(requireAssertString());

			function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

			// Accepted chars - 123456789ABCDEFGH JKLMN PQRSTUVWXYZabcdefghijk mnopqrstuvwxyz
			var base58Reg = /^[A-HJ-NP-Za-km-z1-9]*$/;

			function isBase58(str) {
			  (0, _assertString.default)(str);

			  if (base58Reg.test(str)) {
			    return true;
			  }

			  return false;
			}

			module.exports = exports.default;
			module.exports.default = exports.default; 
		} (isBase58, isBase58.exports));
		return isBase58.exports;
	}

	var isDataURI = {exports: {}};

	var hasRequiredIsDataURI;

	function requireIsDataURI () {
		if (hasRequiredIsDataURI) return isDataURI.exports;
		hasRequiredIsDataURI = 1;
		(function (module, exports) {

			Object.defineProperty(exports, "__esModule", {
			  value: true
			});
			exports.default = isDataURI;

			var _assertString = _interopRequireDefault(requireAssertString());

			function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

			var validMediaType = /^[a-z]+\/[a-z0-9\-\+\._]+$/i;
			var validAttribute = /^[a-z\-]+=[a-z0-9\-]+$/i;
			var validData = /^[a-z0-9!\$&'\(\)\*\+,;=\-\._~:@\/\?%\s]*$/i;

			function isDataURI(str) {
			  (0, _assertString.default)(str);
			  var data = str.split(',');

			  if (data.length < 2) {
			    return false;
			  }

			  var attributes = data.shift().trim().split(';');
			  var schemeAndMediaType = attributes.shift();

			  if (schemeAndMediaType.slice(0, 5) !== 'data:') {
			    return false;
			  }

			  var mediaType = schemeAndMediaType.slice(5);

			  if (mediaType !== '' && !validMediaType.test(mediaType)) {
			    return false;
			  }

			  for (var i = 0; i < attributes.length; i++) {
			    if (!(i === attributes.length - 1 && attributes[i].toLowerCase() === 'base64') && !validAttribute.test(attributes[i])) {
			      return false;
			    }
			  }

			  for (var _i = 0; _i < data.length; _i++) {
			    if (!validData.test(data[_i])) {
			      return false;
			    }
			  }

			  return true;
			}

			module.exports = exports.default;
			module.exports.default = exports.default; 
		} (isDataURI, isDataURI.exports));
		return isDataURI.exports;
	}

	var isMagnetURI = {exports: {}};

	var hasRequiredIsMagnetURI;

	function requireIsMagnetURI () {
		if (hasRequiredIsMagnetURI) return isMagnetURI.exports;
		hasRequiredIsMagnetURI = 1;
		(function (module, exports) {

			Object.defineProperty(exports, "__esModule", {
			  value: true
			});
			exports.default = isMagnetURI;

			var _assertString = _interopRequireDefault(requireAssertString());

			function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

			var magnetURIComponent = /(?:^magnet:\?|[^?&]&)xt(?:\.1)?=urn:(?:(?:aich|bitprint|btih|ed2k|ed2khash|kzhash|md5|sha1|tree:tiger):[a-z0-9]{32}(?:[a-z0-9]{8})?|btmh:1220[a-z0-9]{64})(?:$|&)/i;

			function isMagnetURI(url) {
			  (0, _assertString.default)(url);

			  if (url.indexOf('magnet:?') !== 0) {
			    return false;
			  }

			  return magnetURIComponent.test(url);
			}

			module.exports = exports.default;
			module.exports.default = exports.default; 
		} (isMagnetURI, isMagnetURI.exports));
		return isMagnetURI.exports;
	}

	var isMimeType = {exports: {}};

	var hasRequiredIsMimeType;

	function requireIsMimeType () {
		if (hasRequiredIsMimeType) return isMimeType.exports;
		hasRequiredIsMimeType = 1;
		(function (module, exports) {

			Object.defineProperty(exports, "__esModule", {
			  value: true
			});
			exports.default = isMimeType;

			var _assertString = _interopRequireDefault(requireAssertString());

			function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

			/*
			  Checks if the provided string matches to a correct Media type format (MIME type)

			  This function only checks is the string format follows the
			  etablished rules by the according RFC specifications.
			  This function supports 'charset' in textual media types
			  (https://tools.ietf.org/html/rfc6657).

			  This function does not check against all the media types listed
			  by the IANA (https://www.iana.org/assignments/media-types/media-types.xhtml)
			  because of lightness purposes : it would require to include
			  all these MIME types in this librairy, which would weigh it
			  significantly. This kind of effort maybe is not worth for the use that
			  this function has in this entire librairy.

			  More informations in the RFC specifications :
			  - https://tools.ietf.org/html/rfc2045
			  - https://tools.ietf.org/html/rfc2046
			  - https://tools.ietf.org/html/rfc7231#section-3.1.1.1
			  - https://tools.ietf.org/html/rfc7231#section-3.1.1.5
			*/
			// Match simple MIME types
			// NB :
			//   Subtype length must not exceed 100 characters.
			//   This rule does not comply to the RFC specs (what is the max length ?).
			var mimeTypeSimple = /^(application|audio|font|image|message|model|multipart|text|video)\/[a-zA-Z0-9\.\-\+_]{1,100}$/i; // eslint-disable-line max-len
			// Handle "charset" in "text/*"

			var mimeTypeText = /^text\/[a-zA-Z0-9\.\-\+]{1,100};\s?charset=("[a-zA-Z0-9\.\-\+\s]{0,70}"|[a-zA-Z0-9\.\-\+]{0,70})(\s?\([a-zA-Z0-9\.\-\+\s]{1,20}\))?$/i; // eslint-disable-line max-len
			// Handle "boundary" in "multipart/*"

			var mimeTypeMultipart = /^multipart\/[a-zA-Z0-9\.\-\+]{1,100}(;\s?(boundary|charset)=("[a-zA-Z0-9\.\-\+\s]{0,70}"|[a-zA-Z0-9\.\-\+]{0,70})(\s?\([a-zA-Z0-9\.\-\+\s]{1,20}\))?){0,2}$/i; // eslint-disable-line max-len

			function isMimeType(str) {
			  (0, _assertString.default)(str);
			  return mimeTypeSimple.test(str) || mimeTypeText.test(str) || mimeTypeMultipart.test(str);
			}

			module.exports = exports.default;
			module.exports.default = exports.default; 
		} (isMimeType, isMimeType.exports));
		return isMimeType.exports;
	}

	var isLatLong = {exports: {}};

	var hasRequiredIsLatLong;

	function requireIsLatLong () {
		if (hasRequiredIsLatLong) return isLatLong.exports;
		hasRequiredIsLatLong = 1;
		(function (module, exports) {

			Object.defineProperty(exports, "__esModule", {
			  value: true
			});
			exports.default = isLatLong;

			var _assertString = _interopRequireDefault(requireAssertString());

			var _merge = _interopRequireDefault(requireMerge$1());

			function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

			var lat = /^\(?[+-]?(90(\.0+)?|[1-8]?\d(\.\d+)?)$/;
			var long = /^\s?[+-]?(180(\.0+)?|1[0-7]\d(\.\d+)?|\d{1,2}(\.\d+)?)\)?$/;
			var latDMS = /^(([1-8]?\d)\D+([1-5]?\d|60)\D+([1-5]?\d|60)(\.\d+)?|90\D+0\D+0)\D+[NSns]?$/i;
			var longDMS = /^\s*([1-7]?\d{1,2}\D+([1-5]?\d|60)\D+([1-5]?\d|60)(\.\d+)?|180\D+0\D+0)\D+[EWew]?$/i;
			var defaultLatLongOptions = {
			  checkDMS: false
			};

			function isLatLong(str, options) {
			  (0, _assertString.default)(str);
			  options = (0, _merge.default)(options, defaultLatLongOptions);
			  if (!str.includes(',')) return false;
			  var pair = str.split(',');
			  if (pair[0].startsWith('(') && !pair[1].endsWith(')') || pair[1].endsWith(')') && !pair[0].startsWith('(')) return false;

			  if (options.checkDMS) {
			    return latDMS.test(pair[0]) && longDMS.test(pair[1]);
			  }

			  return lat.test(pair[0]) && long.test(pair[1]);
			}

			module.exports = exports.default;
			module.exports.default = exports.default; 
		} (isLatLong, isLatLong.exports));
		return isLatLong.exports;
	}

	var isPostalCode = {};

	var hasRequiredIsPostalCode;

	function requireIsPostalCode () {
		if (hasRequiredIsPostalCode) return isPostalCode;
		hasRequiredIsPostalCode = 1;

		Object.defineProperty(isPostalCode, "__esModule", {
		  value: true
		});
		isPostalCode.default = isPostalCode$1;
		isPostalCode.locales = void 0;

		var _assertString = _interopRequireDefault(requireAssertString());

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		// common patterns
		var threeDigit = /^\d{3}$/;
		var fourDigit = /^\d{4}$/;
		var fiveDigit = /^\d{5}$/;
		var sixDigit = /^\d{6}$/;
		var patterns = {
		  AD: /^AD\d{3}$/,
		  AT: fourDigit,
		  AU: fourDigit,
		  AZ: /^AZ\d{4}$/,
		  BA: /^([7-8]\d{4}$)/,
		  BE: fourDigit,
		  BG: fourDigit,
		  BR: /^\d{5}-\d{3}$/,
		  BY: /^2[1-4]\d{4}$/,
		  CA: /^[ABCEGHJKLMNPRSTVXY]\d[ABCEGHJ-NPRSTV-Z][\s\-]?\d[ABCEGHJ-NPRSTV-Z]\d$/i,
		  CH: fourDigit,
		  CN: /^(0[1-7]|1[012356]|2[0-7]|3[0-6]|4[0-7]|5[1-7]|6[1-7]|7[1-5]|8[1345]|9[09])\d{4}$/,
		  CZ: /^\d{3}\s?\d{2}$/,
		  DE: fiveDigit,
		  DK: fourDigit,
		  DO: fiveDigit,
		  DZ: fiveDigit,
		  EE: fiveDigit,
		  ES: /^(5[0-2]{1}|[0-4]{1}\d{1})\d{3}$/,
		  FI: fiveDigit,
		  FR: /^\d{2}\s?\d{3}$/,
		  GB: /^(gir\s?0aa|[a-z]{1,2}\d[\da-z]?\s?(\d[a-z]{2})?)$/i,
		  GR: /^\d{3}\s?\d{2}$/,
		  HR: /^([1-5]\d{4}$)/,
		  HT: /^HT\d{4}$/,
		  HU: fourDigit,
		  ID: fiveDigit,
		  IE: /^(?!.*(?:o))[A-Za-z]\d[\dw]\s\w{4}$/i,
		  IL: /^(\d{5}|\d{7})$/,
		  IN: /^((?!10|29|35|54|55|65|66|86|87|88|89)[1-9][0-9]{5})$/,
		  IR: /^(?!(\d)\1{3})[13-9]{4}[1346-9][013-9]{5}$/,
		  IS: threeDigit,
		  IT: fiveDigit,
		  JP: /^\d{3}\-\d{4}$/,
		  KE: fiveDigit,
		  KR: /^(\d{5}|\d{6})$/,
		  LI: /^(948[5-9]|949[0-7])$/,
		  LT: /^LT\-\d{5}$/,
		  LU: fourDigit,
		  LV: /^LV\-\d{4}$/,
		  LK: fiveDigit,
		  MG: threeDigit,
		  MX: fiveDigit,
		  MT: /^[A-Za-z]{3}\s{0,1}\d{4}$/,
		  MY: fiveDigit,
		  NL: /^\d{4}\s?[a-z]{2}$/i,
		  NO: fourDigit,
		  NP: /^(10|21|22|32|33|34|44|45|56|57)\d{3}$|^(977)$/i,
		  NZ: fourDigit,
		  PL: /^\d{2}\-\d{3}$/,
		  PR: /^00[679]\d{2}([ -]\d{4})?$/,
		  PT: /^\d{4}\-\d{3}?$/,
		  RO: sixDigit,
		  RU: sixDigit,
		  SA: fiveDigit,
		  SE: /^[1-9]\d{2}\s?\d{2}$/,
		  SG: sixDigit,
		  SI: fourDigit,
		  SK: /^\d{3}\s?\d{2}$/,
		  TH: fiveDigit,
		  TN: fourDigit,
		  TW: /^\d{3}(\d{2})?$/,
		  UA: fiveDigit,
		  US: /^\d{5}(-\d{4})?$/,
		  ZA: fourDigit,
		  ZM: fiveDigit
		};
		var locales = Object.keys(patterns);
		isPostalCode.locales = locales;

		function isPostalCode$1(str, locale) {
		  (0, _assertString.default)(str);

		  if (locale in patterns) {
		    return patterns[locale].test(str);
		  } else if (locale === 'any') {
		    for (var key in patterns) {
		      // https://github.com/gotwarlost/istanbul/blob/master/ignoring-code-for-coverage.md#ignoring-code-for-coverage-purposes
		      // istanbul ignore else
		      if (patterns.hasOwnProperty(key)) {
		        var pattern = patterns[key];

		        if (pattern.test(str)) {
		          return true;
		        }
		      }
		    }

		    return false;
		  }

		  throw new Error("Invalid locale '".concat(locale, "'"));
		}
		return isPostalCode;
	}

	var ltrim = {exports: {}};

	var hasRequiredLtrim;

	function requireLtrim () {
		if (hasRequiredLtrim) return ltrim.exports;
		hasRequiredLtrim = 1;
		(function (module, exports) {

			Object.defineProperty(exports, "__esModule", {
			  value: true
			});
			exports.default = ltrim;

			var _assertString = _interopRequireDefault(requireAssertString());

			function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

			function ltrim(str, chars) {
			  (0, _assertString.default)(str); // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions#Escaping

			  var pattern = chars ? new RegExp("^[".concat(chars.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'), "]+"), 'g') : /^\s+/g;
			  return str.replace(pattern, '');
			}

			module.exports = exports.default;
			module.exports.default = exports.default; 
		} (ltrim, ltrim.exports));
		return ltrim.exports;
	}

	var rtrim = {exports: {}};

	var hasRequiredRtrim;

	function requireRtrim () {
		if (hasRequiredRtrim) return rtrim.exports;
		hasRequiredRtrim = 1;
		(function (module, exports) {

			Object.defineProperty(exports, "__esModule", {
			  value: true
			});
			exports.default = rtrim;

			var _assertString = _interopRequireDefault(requireAssertString());

			function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

			function rtrim(str, chars) {
			  (0, _assertString.default)(str);

			  if (chars) {
			    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions#Escaping
			    var pattern = new RegExp("[".concat(chars.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'), "]+$"), 'g');
			    return str.replace(pattern, '');
			  } // Use a faster and more safe than regex trim method https://blog.stevenlevithan.com/archives/faster-trim-javascript


			  var strIndex = str.length - 1;

			  while (/\s/.test(str.charAt(strIndex))) {
			    strIndex -= 1;
			  }

			  return str.slice(0, strIndex + 1);
			}

			module.exports = exports.default;
			module.exports.default = exports.default; 
		} (rtrim, rtrim.exports));
		return rtrim.exports;
	}

	var trim = {exports: {}};

	var hasRequiredTrim;

	function requireTrim () {
		if (hasRequiredTrim) return trim.exports;
		hasRequiredTrim = 1;
		(function (module, exports) {

			Object.defineProperty(exports, "__esModule", {
			  value: true
			});
			exports.default = trim;

			var _rtrim = _interopRequireDefault(requireRtrim());

			var _ltrim = _interopRequireDefault(requireLtrim());

			function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

			function trim(str, chars) {
			  return (0, _rtrim.default)((0, _ltrim.default)(str, chars), chars);
			}

			module.exports = exports.default;
			module.exports.default = exports.default; 
		} (trim, trim.exports));
		return trim.exports;
	}

	var _escape = {exports: {}};

	var hasRequired_escape;

	function require_escape () {
		if (hasRequired_escape) return _escape.exports;
		hasRequired_escape = 1;
		(function (module, exports) {

			Object.defineProperty(exports, "__esModule", {
			  value: true
			});
			exports.default = escape;

			var _assertString = _interopRequireDefault(requireAssertString());

			function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

			function escape(str) {
			  (0, _assertString.default)(str);
			  return str.replace(/&/g, '&amp;').replace(/"/g, '&quot;').replace(/'/g, '&#x27;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\//g, '&#x2F;').replace(/\\/g, '&#x5C;').replace(/`/g, '&#96;');
			}

			module.exports = exports.default;
			module.exports.default = exports.default; 
		} (_escape, _escape.exports));
		return _escape.exports;
	}

	var _unescape = {exports: {}};

	var hasRequired_unescape;

	function require_unescape () {
		if (hasRequired_unescape) return _unescape.exports;
		hasRequired_unescape = 1;
		(function (module, exports) {

			Object.defineProperty(exports, "__esModule", {
			  value: true
			});
			exports.default = unescape;

			var _assertString = _interopRequireDefault(requireAssertString());

			function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

			function unescape(str) {
			  (0, _assertString.default)(str);
			  return str.replace(/&quot;/g, '"').replace(/&#x27;/g, "'").replace(/&lt;/g, '<').replace(/&gt;/g, '>').replace(/&#x2F;/g, '/').replace(/&#x5C;/g, '\\').replace(/&#96;/g, '`').replace(/&amp;/g, '&'); // &amp; replacement has to be the last one to prevent
			  // bugs with intermediate strings containing escape sequences
			  // See: https://github.com/validatorjs/validator.js/issues/1827
			}

			module.exports = exports.default;
			module.exports.default = exports.default; 
		} (_unescape, _unescape.exports));
		return _unescape.exports;
	}

	var stripLow = {exports: {}};

	var blacklist = {exports: {}};

	var hasRequiredBlacklist;

	function requireBlacklist () {
		if (hasRequiredBlacklist) return blacklist.exports;
		hasRequiredBlacklist = 1;
		(function (module, exports) {

			Object.defineProperty(exports, "__esModule", {
			  value: true
			});
			exports.default = blacklist;

			var _assertString = _interopRequireDefault(requireAssertString());

			function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

			function blacklist(str, chars) {
			  (0, _assertString.default)(str);
			  return str.replace(new RegExp("[".concat(chars, "]+"), 'g'), '');
			}

			module.exports = exports.default;
			module.exports.default = exports.default; 
		} (blacklist, blacklist.exports));
		return blacklist.exports;
	}

	var hasRequiredStripLow;

	function requireStripLow () {
		if (hasRequiredStripLow) return stripLow.exports;
		hasRequiredStripLow = 1;
		(function (module, exports) {

			Object.defineProperty(exports, "__esModule", {
			  value: true
			});
			exports.default = stripLow;

			var _assertString = _interopRequireDefault(requireAssertString());

			var _blacklist = _interopRequireDefault(requireBlacklist());

			function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

			function stripLow(str, keep_new_lines) {
			  (0, _assertString.default)(str);
			  var chars = keep_new_lines ? '\\x00-\\x09\\x0B\\x0C\\x0E-\\x1F\\x7F' : '\\x00-\\x1F\\x7F';
			  return (0, _blacklist.default)(str, chars);
			}

			module.exports = exports.default;
			module.exports.default = exports.default; 
		} (stripLow, stripLow.exports));
		return stripLow.exports;
	}

	var whitelist = {exports: {}};

	var hasRequiredWhitelist;

	function requireWhitelist () {
		if (hasRequiredWhitelist) return whitelist.exports;
		hasRequiredWhitelist = 1;
		(function (module, exports) {

			Object.defineProperty(exports, "__esModule", {
			  value: true
			});
			exports.default = whitelist;

			var _assertString = _interopRequireDefault(requireAssertString());

			function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

			function whitelist(str, chars) {
			  (0, _assertString.default)(str);
			  return str.replace(new RegExp("[^".concat(chars, "]+"), 'g'), '');
			}

			module.exports = exports.default;
			module.exports.default = exports.default; 
		} (whitelist, whitelist.exports));
		return whitelist.exports;
	}

	var isWhitelisted = {exports: {}};

	var hasRequiredIsWhitelisted;

	function requireIsWhitelisted () {
		if (hasRequiredIsWhitelisted) return isWhitelisted.exports;
		hasRequiredIsWhitelisted = 1;
		(function (module, exports) {

			Object.defineProperty(exports, "__esModule", {
			  value: true
			});
			exports.default = isWhitelisted;

			var _assertString = _interopRequireDefault(requireAssertString());

			function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

			function isWhitelisted(str, chars) {
			  (0, _assertString.default)(str);

			  for (var i = str.length - 1; i >= 0; i--) {
			    if (chars.indexOf(str[i]) === -1) {
			      return false;
			    }
			  }

			  return true;
			}

			module.exports = exports.default;
			module.exports.default = exports.default; 
		} (isWhitelisted, isWhitelisted.exports));
		return isWhitelisted.exports;
	}

	var normalizeEmail = {exports: {}};

	var hasRequiredNormalizeEmail;

	function requireNormalizeEmail () {
		if (hasRequiredNormalizeEmail) return normalizeEmail.exports;
		hasRequiredNormalizeEmail = 1;
		(function (module, exports) {

			Object.defineProperty(exports, "__esModule", {
			  value: true
			});
			exports.default = normalizeEmail;

			var _merge = _interopRequireDefault(requireMerge$1());

			function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

			var default_normalize_email_options = {
			  // The following options apply to all email addresses
			  // Lowercases the local part of the email address.
			  // Please note this may violate RFC 5321 as per http://stackoverflow.com/a/9808332/192024).
			  // The domain is always lowercased, as per RFC 1035
			  all_lowercase: true,
			  // The following conversions are specific to GMail
			  // Lowercases the local part of the GMail address (known to be case-insensitive)
			  gmail_lowercase: true,
			  // Removes dots from the local part of the email address, as that's ignored by GMail
			  gmail_remove_dots: true,
			  // Removes the subaddress (e.g. "+foo") from the email address
			  gmail_remove_subaddress: true,
			  // Conversts the googlemail.com domain to gmail.com
			  gmail_convert_googlemaildotcom: true,
			  // The following conversions are specific to Outlook.com / Windows Live / Hotmail
			  // Lowercases the local part of the Outlook.com address (known to be case-insensitive)
			  outlookdotcom_lowercase: true,
			  // Removes the subaddress (e.g. "+foo") from the email address
			  outlookdotcom_remove_subaddress: true,
			  // The following conversions are specific to Yahoo
			  // Lowercases the local part of the Yahoo address (known to be case-insensitive)
			  yahoo_lowercase: true,
			  // Removes the subaddress (e.g. "-foo") from the email address
			  yahoo_remove_subaddress: true,
			  // The following conversions are specific to Yandex
			  // Lowercases the local part of the Yandex address (known to be case-insensitive)
			  yandex_lowercase: true,
			  // The following conversions are specific to iCloud
			  // Lowercases the local part of the iCloud address (known to be case-insensitive)
			  icloud_lowercase: true,
			  // Removes the subaddress (e.g. "+foo") from the email address
			  icloud_remove_subaddress: true
			}; // List of domains used by iCloud

			var icloud_domains = ['icloud.com', 'me.com']; // List of domains used by Outlook.com and its predecessors
			// This list is likely incomplete.
			// Partial reference:
			// https://blogs.office.com/2013/04/17/outlook-com-gets-two-step-verification-sign-in-by-alias-and-new-international-domains/

			var outlookdotcom_domains = ['hotmail.at', 'hotmail.be', 'hotmail.ca', 'hotmail.cl', 'hotmail.co.il', 'hotmail.co.nz', 'hotmail.co.th', 'hotmail.co.uk', 'hotmail.com', 'hotmail.com.ar', 'hotmail.com.au', 'hotmail.com.br', 'hotmail.com.gr', 'hotmail.com.mx', 'hotmail.com.pe', 'hotmail.com.tr', 'hotmail.com.vn', 'hotmail.cz', 'hotmail.de', 'hotmail.dk', 'hotmail.es', 'hotmail.fr', 'hotmail.hu', 'hotmail.id', 'hotmail.ie', 'hotmail.in', 'hotmail.it', 'hotmail.jp', 'hotmail.kr', 'hotmail.lv', 'hotmail.my', 'hotmail.ph', 'hotmail.pt', 'hotmail.sa', 'hotmail.sg', 'hotmail.sk', 'live.be', 'live.co.uk', 'live.com', 'live.com.ar', 'live.com.mx', 'live.de', 'live.es', 'live.eu', 'live.fr', 'live.it', 'live.nl', 'msn.com', 'outlook.at', 'outlook.be', 'outlook.cl', 'outlook.co.il', 'outlook.co.nz', 'outlook.co.th', 'outlook.com', 'outlook.com.ar', 'outlook.com.au', 'outlook.com.br', 'outlook.com.gr', 'outlook.com.pe', 'outlook.com.tr', 'outlook.com.vn', 'outlook.cz', 'outlook.de', 'outlook.dk', 'outlook.es', 'outlook.fr', 'outlook.hu', 'outlook.id', 'outlook.ie', 'outlook.in', 'outlook.it', 'outlook.jp', 'outlook.kr', 'outlook.lv', 'outlook.my', 'outlook.ph', 'outlook.pt', 'outlook.sa', 'outlook.sg', 'outlook.sk', 'passport.com']; // List of domains used by Yahoo Mail
			// This list is likely incomplete

			var yahoo_domains = ['rocketmail.com', 'yahoo.ca', 'yahoo.co.uk', 'yahoo.com', 'yahoo.de', 'yahoo.fr', 'yahoo.in', 'yahoo.it', 'ymail.com']; // List of domains used by yandex.ru

			var yandex_domains = ['yandex.ru', 'yandex.ua', 'yandex.kz', 'yandex.com', 'yandex.by', 'ya.ru']; // replace single dots, but not multiple consecutive dots

			function dotsReplacer(match) {
			  if (match.length > 1) {
			    return match;
			  }

			  return '';
			}

			function normalizeEmail(email, options) {
			  options = (0, _merge.default)(options, default_normalize_email_options);
			  var raw_parts = email.split('@');
			  var domain = raw_parts.pop();
			  var user = raw_parts.join('@');
			  var parts = [user, domain]; // The domain is always lowercased, as it's case-insensitive per RFC 1035

			  parts[1] = parts[1].toLowerCase();

			  if (parts[1] === 'gmail.com' || parts[1] === 'googlemail.com') {
			    // Address is GMail
			    if (options.gmail_remove_subaddress) {
			      parts[0] = parts[0].split('+')[0];
			    }

			    if (options.gmail_remove_dots) {
			      // this does not replace consecutive dots like example..email@gmail.com
			      parts[0] = parts[0].replace(/\.+/g, dotsReplacer);
			    }

			    if (!parts[0].length) {
			      return false;
			    }

			    if (options.all_lowercase || options.gmail_lowercase) {
			      parts[0] = parts[0].toLowerCase();
			    }

			    parts[1] = options.gmail_convert_googlemaildotcom ? 'gmail.com' : parts[1];
			  } else if (icloud_domains.indexOf(parts[1]) >= 0) {
			    // Address is iCloud
			    if (options.icloud_remove_subaddress) {
			      parts[0] = parts[0].split('+')[0];
			    }

			    if (!parts[0].length) {
			      return false;
			    }

			    if (options.all_lowercase || options.icloud_lowercase) {
			      parts[0] = parts[0].toLowerCase();
			    }
			  } else if (outlookdotcom_domains.indexOf(parts[1]) >= 0) {
			    // Address is Outlook.com
			    if (options.outlookdotcom_remove_subaddress) {
			      parts[0] = parts[0].split('+')[0];
			    }

			    if (!parts[0].length) {
			      return false;
			    }

			    if (options.all_lowercase || options.outlookdotcom_lowercase) {
			      parts[0] = parts[0].toLowerCase();
			    }
			  } else if (yahoo_domains.indexOf(parts[1]) >= 0) {
			    // Address is Yahoo
			    if (options.yahoo_remove_subaddress) {
			      var components = parts[0].split('-');
			      parts[0] = components.length > 1 ? components.slice(0, -1).join('-') : components[0];
			    }

			    if (!parts[0].length) {
			      return false;
			    }

			    if (options.all_lowercase || options.yahoo_lowercase) {
			      parts[0] = parts[0].toLowerCase();
			    }
			  } else if (yandex_domains.indexOf(parts[1]) >= 0) {
			    if (options.all_lowercase || options.yandex_lowercase) {
			      parts[0] = parts[0].toLowerCase();
			    }

			    parts[1] = 'yandex.ru'; // all yandex domains are equal, 1st preferred
			  } else if (options.all_lowercase) {
			    // Any other address
			    parts[0] = parts[0].toLowerCase();
			  }

			  return parts.join('@');
			}

			module.exports = exports.default;
			module.exports.default = exports.default; 
		} (normalizeEmail, normalizeEmail.exports));
		return normalizeEmail.exports;
	}

	var isSlug = {exports: {}};

	var hasRequiredIsSlug;

	function requireIsSlug () {
		if (hasRequiredIsSlug) return isSlug.exports;
		hasRequiredIsSlug = 1;
		(function (module, exports) {

			Object.defineProperty(exports, "__esModule", {
			  value: true
			});
			exports.default = isSlug;

			var _assertString = _interopRequireDefault(requireAssertString());

			function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

			var charsetRegex = /^[^\s-_](?!.*?[-_]{2,})[a-z0-9-\\][^\s]*[^-_\s]$/;

			function isSlug(str) {
			  (0, _assertString.default)(str);
			  return charsetRegex.test(str);
			}

			module.exports = exports.default;
			module.exports.default = exports.default; 
		} (isSlug, isSlug.exports));
		return isSlug.exports;
	}

	var isLicensePlate = {exports: {}};

	var hasRequiredIsLicensePlate;

	function requireIsLicensePlate () {
		if (hasRequiredIsLicensePlate) return isLicensePlate.exports;
		hasRequiredIsLicensePlate = 1;
		(function (module, exports) {

			Object.defineProperty(exports, "__esModule", {
			  value: true
			});
			exports.default = isLicensePlate;

			var _assertString = _interopRequireDefault(requireAssertString());

			function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

			var validators = {
			  'cs-CZ': function csCZ(str) {
			    return /^(([ABCDEFHIJKLMNPRSTUVXYZ]|[0-9])-?){5,8}$/.test(str);
			  },
			  'de-DE': function deDE(str) {
			    return /^((A|AA|AB|AC|AE|AH|AK|AM|AN|AÖ|AP|AS|AT|AU|AW|AZ|B|BA|BB|BC|BE|BF|BH|BI|BK|BL|BM|BN|BO|BÖ|BS|BT|BZ|C|CA|CB|CE|CO|CR|CW|D|DA|DD|DE|DH|DI|DL|DM|DN|DO|DU|DW|DZ|E|EA|EB|ED|EE|EF|EG|EH|EI|EL|EM|EN|ER|ES|EU|EW|F|FB|FD|FF|FG|FI|FL|FN|FO|FR|FS|FT|FÜ|FW|FZ|G|GA|GC|GD|GE|GF|GG|GI|GK|GL|GM|GN|GÖ|GP|GR|GS|GT|GÜ|GV|GW|GZ|H|HA|HB|HC|HD|HE|HF|HG|HH|HI|HK|HL|HM|HN|HO|HP|HR|HS|HU|HV|HX|HY|HZ|IK|IL|IN|IZ|J|JE|JL|K|KA|KB|KC|KE|KF|KG|KH|KI|KK|KL|KM|KN|KO|KR|KS|KT|KU|KW|KY|L|LA|LB|LC|LD|LF|LG|LH|LI|LL|LM|LN|LÖ|LP|LR|LU|M|MA|MB|MC|MD|ME|MG|MH|MI|MK|ML|MM|MN|MO|MQ|MR|MS|MÜ|MW|MY|MZ|N|NB|ND|NE|NF|NH|NI|NK|NM|NÖ|NP|NR|NT|NU|NW|NY|NZ|OA|OB|OC|OD|OE|OF|OG|OH|OK|OL|OP|OS|OZ|P|PA|PB|PE|PF|PI|PL|PM|PN|PR|PS|PW|PZ|R|RA|RC|RD|RE|RG|RH|RI|RL|RM|RN|RO|RP|RS|RT|RU|RV|RW|RZ|S|SB|SC|SE|SG|SI|SK|SL|SM|SN|SO|SP|SR|ST|SU|SW|SY|SZ|TE|TF|TG|TO|TP|TR|TS|TT|TÜ|ÜB|UE|UH|UL|UM|UN|V|VB|VG|VK|VR|VS|W|WA|WB|WE|WF|WI|WK|WL|WM|WN|WO|WR|WS|WT|WÜ|WW|WZ|Z|ZE|ZI|ZP|ZR|ZW|ZZ)[- ]?[A-Z]{1,2}[- ]?\d{1,4}|(ABG|ABI|AIB|AIC|ALF|ALZ|ANA|ANG|ANK|APD|ARN|ART|ASL|ASZ|AUR|AZE|BAD|BAR|BBG|BCH|BED|BER|BGD|BGL|BID|BIN|BIR|BIT|BIW|BKS|BLB|BLK|BNA|BOG|BOH|BOR|BOT|BRA|BRB|BRG|BRK|BRL|BRV|BSB|BSK|BTF|BÜD|BUL|BÜR|BÜS|BÜZ|CAS|CHA|CLP|CLZ|COC|COE|CUX|DAH|DAN|DAU|DBR|DEG|DEL|DGF|DIL|DIN|DIZ|DKB|DLG|DON|DUD|DÜW|EBE|EBN|EBS|ECK|EIC|EIL|EIN|EIS|EMD|EMS|ERB|ERH|ERK|ERZ|ESB|ESW|FDB|FDS|FEU|FFB|FKB|FLÖ|FOR|FRG|FRI|FRW|FTL|FÜS|GAN|GAP|GDB|GEL|GEO|GER|GHA|GHC|GLA|GMN|GNT|GOA|GOH|GRA|GRH|GRI|GRM|GRZ|GTH|GUB|GUN|GVM|HAB|HAL|HAM|HAS|HBN|HBS|HCH|HDH|HDL|HEB|HEF|HEI|HER|HET|HGN|HGW|HHM|HIG|HIP|HMÜ|HOG|HOH|HOL|HOM|HOR|HÖS|HOT|HRO|HSK|HST|HVL|HWI|IGB|ILL|JÜL|KEH|KEL|KEM|KIB|KLE|KLZ|KÖN|KÖT|KÖZ|KRU|KÜN|KUS|KYF|LAN|LAU|LBS|LBZ|LDK|LDS|LEO|LER|LEV|LIB|LIF|LIP|LÖB|LOS|LRO|LSZ|LÜN|LUP|LWL|MAB|MAI|MAK|MAL|MED|MEG|MEI|MEK|MEL|MER|MET|MGH|MGN|MHL|MIL|MKK|MOD|MOL|MON|MOS|MSE|MSH|MSP|MST|MTK|MTL|MÜB|MÜR|MYK|MZG|NAB|NAI|NAU|NDH|NEA|NEB|NEC|NEN|NES|NEW|NMB|NMS|NOH|NOL|NOM|NOR|NVP|NWM|OAL|OBB|OBG|OCH|OHA|ÖHR|OHV|OHZ|OPR|OSL|OVI|OVL|OVP|PAF|PAN|PAR|PCH|PEG|PIR|PLÖ|PRÜ|QFT|QLB|RDG|REG|REH|REI|RID|RIE|ROD|ROF|ROK|ROL|ROS|ROT|ROW|RSL|RÜD|RÜG|SAB|SAD|SAN|SAW|SBG|SBK|SCZ|SDH|SDL|SDT|SEB|SEE|SEF|SEL|SFB|SFT|SGH|SHA|SHG|SHK|SHL|SIG|SIM|SLE|SLF|SLK|SLN|SLS|SLÜ|SLZ|SMÜ|SOB|SOG|SOK|SÖM|SON|SPB|SPN|SRB|SRO|STA|STB|STD|STE|STL|SUL|SÜW|SWA|SZB|TBB|TDO|TET|TIR|TÖL|TUT|UEM|UER|UFF|USI|VAI|VEC|VER|VIB|VIE|VIT|VOH|WAF|WAK|WAN|WAR|WAT|WBS|WDA|WEL|WEN|WER|WES|WHV|WIL|WIS|WIT|WIZ|WLG|WMS|WND|WOB|WOH|WOL|WOR|WOS|WRN|WSF|WST|WSW|WTL|WTM|WUG|WÜM|WUN|WUR|WZL|ZEL|ZIG)[- ]?(([A-Z][- ]?\d{1,4})|([A-Z]{2}[- ]?\d{1,3})))[- ]?(E|H)?$/.test(str);
			  },
			  'de-LI': function deLI(str) {
			    return /^FL[- ]?\d{1,5}[UZ]?$/.test(str);
			  },
			  'en-IN': function enIN(str) {
			    return /^[A-Z]{2}[ -]?[0-9]{1,2}(?:[ -]?[A-Z])(?:[ -]?[A-Z]*)?[ -]?[0-9]{4}$/.test(str);
			  },
			  'es-AR': function esAR(str) {
			    return /^(([A-Z]{2} ?[0-9]{3} ?[A-Z]{2})|([A-Z]{3} ?[0-9]{3}))$/.test(str);
			  },
			  'fi-FI': function fiFI(str) {
			    return /^(?=.{4,7})(([A-Z]{1,3}|[0-9]{1,3})[\s-]?([A-Z]{1,3}|[0-9]{1,5}))$/.test(str);
			  },
			  'hu-HU': function huHU(str) {
			    return /^((((?!AAA)(([A-NPRSTVZWXY]{1})([A-PR-Z]{1})([A-HJ-NPR-Z]))|(A[ABC]I)|A[ABC]O|A[A-W]Q|BPI|BPO|UCO|UDO|XAO)-(?!000)\d{3})|(M\d{6})|((CK|DT|CD|HC|H[ABEFIKLMNPRSTVX]|MA|OT|R[A-Z]) \d{2}-\d{2})|(CD \d{3}-\d{3})|(C-(C|X) \d{4})|(X-(A|B|C) \d{4})|(([EPVZ]-\d{5}))|(S A[A-Z]{2} \d{2})|(SP \d{2}-\d{2}))$/.test(str);
			  },
			  'pt-BR': function ptBR(str) {
			    return /^[A-Z]{3}[ -]?[0-9][A-Z][0-9]{2}|[A-Z]{3}[ -]?[0-9]{4}$/.test(str);
			  },
			  'pt-PT': function ptPT(str) {
			    return /^([A-Z]{2}|[0-9]{2})[ -·]?([A-Z]{2}|[0-9]{2})[ -·]?([A-Z]{2}|[0-9]{2})$/.test(str);
			  },
			  'sq-AL': function sqAL(str) {
			    return /^[A-Z]{2}[- ]?((\d{3}[- ]?(([A-Z]{2})|T))|(R[- ]?\d{3}))$/.test(str);
			  },
			  'sv-SE': function svSE(str) {
			    return /^[A-HJ-PR-UW-Z]{3} ?[\d]{2}[A-HJ-PR-UW-Z1-9]$|(^[A-ZÅÄÖ ]{2,7}$)/.test(str.trim());
			  }
			};

			function isLicensePlate(str, locale) {
			  (0, _assertString.default)(str);

			  if (locale in validators) {
			    return validators[locale](str);
			  } else if (locale === 'any') {
			    for (var key in validators) {
			      /* eslint guard-for-in: 0 */
			      var validator = validators[key];

			      if (validator(str)) {
			        return true;
			      }
			    }

			    return false;
			  }

			  throw new Error("Invalid locale '".concat(locale, "'"));
			}

			module.exports = exports.default;
			module.exports.default = exports.default; 
		} (isLicensePlate, isLicensePlate.exports));
		return isLicensePlate.exports;
	}

	var isStrongPassword = {exports: {}};

	var hasRequiredIsStrongPassword;

	function requireIsStrongPassword () {
		if (hasRequiredIsStrongPassword) return isStrongPassword.exports;
		hasRequiredIsStrongPassword = 1;
		(function (module, exports) {

			Object.defineProperty(exports, "__esModule", {
			  value: true
			});
			exports.default = isStrongPassword;

			var _merge = _interopRequireDefault(requireMerge$1());

			var _assertString = _interopRequireDefault(requireAssertString());

			function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

			var upperCaseRegex = /^[A-Z]$/;
			var lowerCaseRegex = /^[a-z]$/;
			var numberRegex = /^[0-9]$/;
			var symbolRegex = /^[-#!$@£%^&*()_+|~=`{}\[\]:";'<>?,.\/ ]$/;
			var defaultOptions = {
			  minLength: 8,
			  minLowercase: 1,
			  minUppercase: 1,
			  minNumbers: 1,
			  minSymbols: 1,
			  returnScore: false,
			  pointsPerUnique: 1,
			  pointsPerRepeat: 0.5,
			  pointsForContainingLower: 10,
			  pointsForContainingUpper: 10,
			  pointsForContainingNumber: 10,
			  pointsForContainingSymbol: 10
			};
			/* Counts number of occurrences of each char in a string
			 * could be moved to util/ ?
			*/

			function countChars(str) {
			  var result = {};
			  Array.from(str).forEach(function (char) {
			    var curVal = result[char];

			    if (curVal) {
			      result[char] += 1;
			    } else {
			      result[char] = 1;
			    }
			  });
			  return result;
			}
			/* Return information about a password */


			function analyzePassword(password) {
			  var charMap = countChars(password);
			  var analysis = {
			    length: password.length,
			    uniqueChars: Object.keys(charMap).length,
			    uppercaseCount: 0,
			    lowercaseCount: 0,
			    numberCount: 0,
			    symbolCount: 0
			  };
			  Object.keys(charMap).forEach(function (char) {
			    /* istanbul ignore else */
			    if (upperCaseRegex.test(char)) {
			      analysis.uppercaseCount += charMap[char];
			    } else if (lowerCaseRegex.test(char)) {
			      analysis.lowercaseCount += charMap[char];
			    } else if (numberRegex.test(char)) {
			      analysis.numberCount += charMap[char];
			    } else if (symbolRegex.test(char)) {
			      analysis.symbolCount += charMap[char];
			    }
			  });
			  return analysis;
			}

			function scorePassword(analysis, scoringOptions) {
			  var points = 0;
			  points += analysis.uniqueChars * scoringOptions.pointsPerUnique;
			  points += (analysis.length - analysis.uniqueChars) * scoringOptions.pointsPerRepeat;

			  if (analysis.lowercaseCount > 0) {
			    points += scoringOptions.pointsForContainingLower;
			  }

			  if (analysis.uppercaseCount > 0) {
			    points += scoringOptions.pointsForContainingUpper;
			  }

			  if (analysis.numberCount > 0) {
			    points += scoringOptions.pointsForContainingNumber;
			  }

			  if (analysis.symbolCount > 0) {
			    points += scoringOptions.pointsForContainingSymbol;
			  }

			  return points;
			}

			function isStrongPassword(str) {
			  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
			  (0, _assertString.default)(str);
			  var analysis = analyzePassword(str);
			  options = (0, _merge.default)(options || {}, defaultOptions);

			  if (options.returnScore) {
			    return scorePassword(analysis, options);
			  }

			  return analysis.length >= options.minLength && analysis.lowercaseCount >= options.minLowercase && analysis.uppercaseCount >= options.minUppercase && analysis.numberCount >= options.minNumbers && analysis.symbolCount >= options.minSymbols;
			}

			module.exports = exports.default;
			module.exports.default = exports.default; 
		} (isStrongPassword, isStrongPassword.exports));
		return isStrongPassword.exports;
	}

	var isVAT = {};

	var hasRequiredIsVAT;

	function requireIsVAT () {
		if (hasRequiredIsVAT) return isVAT;
		hasRequiredIsVAT = 1;

		function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

		Object.defineProperty(isVAT, "__esModule", {
		  value: true
		});
		isVAT.default = isVAT$1;
		isVAT.vatMatchers = void 0;

		var _assertString = _interopRequireDefault(requireAssertString());

		var algorithms = _interopRequireWildcard(requireAlgorithms());

		function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

		function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		var PT = function PT(str) {
		  var match = str.match(/^(PT)?(\d{9})$/);

		  if (!match) {
		    return false;
		  }

		  var tin = match[2];
		  var checksum = 11 - algorithms.reverseMultiplyAndSum(tin.split('').slice(0, 8).map(function (a) {
		    return parseInt(a, 10);
		  }), 9) % 11;

		  if (checksum > 9) {
		    return parseInt(tin[8], 10) === 0;
		  }

		  return checksum === parseInt(tin[8], 10);
		};

		var vatMatchers = {
		  /**
		   * European Union VAT identification numbers
		   */
		  AT: function AT(str) {
		    return /^(AT)?U\d{8}$/.test(str);
		  },
		  BE: function BE(str) {
		    return /^(BE)?\d{10}$/.test(str);
		  },
		  BG: function BG(str) {
		    return /^(BG)?\d{9,10}$/.test(str);
		  },
		  HR: function HR(str) {
		    return /^(HR)?\d{11}$/.test(str);
		  },
		  CY: function CY(str) {
		    return /^(CY)?\w{9}$/.test(str);
		  },
		  CZ: function CZ(str) {
		    return /^(CZ)?\d{8,10}$/.test(str);
		  },
		  DK: function DK(str) {
		    return /^(DK)?\d{8}$/.test(str);
		  },
		  EE: function EE(str) {
		    return /^(EE)?\d{9}$/.test(str);
		  },
		  FI: function FI(str) {
		    return /^(FI)?\d{8}$/.test(str);
		  },
		  FR: function FR(str) {
		    return /^(FR)?\w{2}\d{9}$/.test(str);
		  },
		  DE: function DE(str) {
		    return /^(DE)?\d{9}$/.test(str);
		  },
		  EL: function EL(str) {
		    return /^(EL)?\d{9}$/.test(str);
		  },
		  HU: function HU(str) {
		    return /^(HU)?\d{8}$/.test(str);
		  },
		  IE: function IE(str) {
		    return /^(IE)?\d{7}\w{1}(W)?$/.test(str);
		  },
		  IT: function IT(str) {
		    return /^(IT)?\d{11}$/.test(str);
		  },
		  LV: function LV(str) {
		    return /^(LV)?\d{11}$/.test(str);
		  },
		  LT: function LT(str) {
		    return /^(LT)?\d{9,12}$/.test(str);
		  },
		  LU: function LU(str) {
		    return /^(LU)?\d{8}$/.test(str);
		  },
		  MT: function MT(str) {
		    return /^(MT)?\d{8}$/.test(str);
		  },
		  NL: function NL(str) {
		    return /^(NL)?\d{9}B\d{2}$/.test(str);
		  },
		  PL: function PL(str) {
		    return /^(PL)?(\d{10}|(\d{3}-\d{3}-\d{2}-\d{2})|(\d{3}-\d{2}-\d{2}-\d{3}))$/.test(str);
		  },
		  PT: PT,
		  RO: function RO(str) {
		    return /^(RO)?\d{2,10}$/.test(str);
		  },
		  SK: function SK(str) {
		    return /^(SK)?\d{10}$/.test(str);
		  },
		  SI: function SI(str) {
		    return /^(SI)?\d{8}$/.test(str);
		  },
		  ES: function ES(str) {
		    return /^(ES)?\w\d{7}[A-Z]$/.test(str);
		  },
		  SE: function SE(str) {
		    return /^(SE)?\d{12}$/.test(str);
		  },

		  /**
		   * VAT numbers of non-EU countries
		   */
		  AL: function AL(str) {
		    return /^(AL)?\w{9}[A-Z]$/.test(str);
		  },
		  MK: function MK(str) {
		    return /^(MK)?\d{13}$/.test(str);
		  },
		  AU: function AU(str) {
		    return /^(AU)?\d{11}$/.test(str);
		  },
		  BY: function BY(str) {
		    return /^(УНП )?\d{9}$/.test(str);
		  },
		  CA: function CA(str) {
		    return /^(CA)?\d{9}$/.test(str);
		  },
		  IS: function IS(str) {
		    return /^(IS)?\d{5,6}$/.test(str);
		  },
		  IN: function IN(str) {
		    return /^(IN)?\d{15}$/.test(str);
		  },
		  ID: function ID(str) {
		    return /^(ID)?(\d{15}|(\d{2}.\d{3}.\d{3}.\d{1}-\d{3}.\d{3}))$/.test(str);
		  },
		  IL: function IL(str) {
		    return /^(IL)?\d{9}$/.test(str);
		  },
		  KZ: function KZ(str) {
		    return /^(KZ)?\d{9}$/.test(str);
		  },
		  NZ: function NZ(str) {
		    return /^(NZ)?\d{9}$/.test(str);
		  },
		  NG: function NG(str) {
		    return /^(NG)?(\d{12}|(\d{8}-\d{4}))$/.test(str);
		  },
		  NO: function NO(str) {
		    return /^(NO)?\d{9}MVA$/.test(str);
		  },
		  PH: function PH(str) {
		    return /^(PH)?(\d{12}|\d{3} \d{3} \d{3} \d{3})$/.test(str);
		  },
		  RU: function RU(str) {
		    return /^(RU)?(\d{10}|\d{12})$/.test(str);
		  },
		  SM: function SM(str) {
		    return /^(SM)?\d{5}$/.test(str);
		  },
		  SA: function SA(str) {
		    return /^(SA)?\d{15}$/.test(str);
		  },
		  RS: function RS(str) {
		    return /^(RS)?\d{9}$/.test(str);
		  },
		  CH: function CH(str) {
		    return /^(CH)?(\d{6}|\d{9}|(\d{3}.\d{3})|(\d{3}.\d{3}.\d{3}))(TVA|MWST|IVA)$/.test(str);
		  },
		  TR: function TR(str) {
		    return /^(TR)?\d{10}$/.test(str);
		  },
		  UA: function UA(str) {
		    return /^(UA)?\d{12}$/.test(str);
		  },
		  GB: function GB(str) {
		    return /^GB((\d{3} \d{4} ([0-8][0-9]|9[0-6]))|(\d{9} \d{3})|(((GD[0-4])|(HA[5-9]))[0-9]{2}))$/.test(str);
		  },
		  UZ: function UZ(str) {
		    return /^(UZ)?\d{9}$/.test(str);
		  },

		  /**
		   * VAT numbers of Latin American countries
		   */
		  AR: function AR(str) {
		    return /^(AR)?\d{11}$/.test(str);
		  },
		  BO: function BO(str) {
		    return /^(BO)?\d{7}$/.test(str);
		  },
		  BR: function BR(str) {
		    return /^(BR)?((\d{2}.\d{3}.\d{3}\/\d{4}-\d{2})|(\d{3}.\d{3}.\d{3}-\d{2}))$/.test(str);
		  },
		  CL: function CL(str) {
		    return /^(CL)?\d{8}-\d{1}$/.test(str);
		  },
		  CO: function CO(str) {
		    return /^(CO)?\d{10}$/.test(str);
		  },
		  CR: function CR(str) {
		    return /^(CR)?\d{9,12}$/.test(str);
		  },
		  EC: function EC(str) {
		    return /^(EC)?\d{13}$/.test(str);
		  },
		  SV: function SV(str) {
		    return /^(SV)?\d{4}-\d{6}-\d{3}-\d{1}$/.test(str);
		  },
		  GT: function GT(str) {
		    return /^(GT)?\d{7}-\d{1}$/.test(str);
		  },
		  HN: function HN(str) {
		    return /^(HN)?$/.test(str);
		  },
		  MX: function MX(str) {
		    return /^(MX)?\w{3,4}\d{6}\w{3}$/.test(str);
		  },
		  NI: function NI(str) {
		    return /^(NI)?\d{3}-\d{6}-\d{4}\w{1}$/.test(str);
		  },
		  PA: function PA(str) {
		    return /^(PA)?$/.test(str);
		  },
		  PY: function PY(str) {
		    return /^(PY)?\d{6,8}-\d{1}$/.test(str);
		  },
		  PE: function PE(str) {
		    return /^(PE)?\d{11}$/.test(str);
		  },
		  DO: function DO(str) {
		    return /^(DO)?(\d{11}|(\d{3}-\d{7}-\d{1})|[1,4,5]{1}\d{8}|([1,4,5]{1})-\d{2}-\d{5}-\d{1})$/.test(str);
		  },
		  UY: function UY(str) {
		    return /^(UY)?\d{12}$/.test(str);
		  },
		  VE: function VE(str) {
		    return /^(VE)?[J,G,V,E]{1}-(\d{9}|(\d{8}-\d{1}))$/.test(str);
		  }
		};
		isVAT.vatMatchers = vatMatchers;

		function isVAT$1(str, countryCode) {
		  (0, _assertString.default)(str);
		  (0, _assertString.default)(countryCode);

		  if (countryCode in vatMatchers) {
		    return vatMatchers[countryCode](str);
		  }

		  throw new Error("Invalid country code: '".concat(countryCode, "'"));
		}
		return isVAT;
	}

	var hasRequiredValidator;

	function requireValidator () {
		if (hasRequiredValidator) return validator$1.exports;
		hasRequiredValidator = 1;
		(function (module, exports) {

			function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

			Object.defineProperty(exports, "__esModule", {
			  value: true
			});
			exports.default = void 0;

			var _toDate = _interopRequireDefault(requireToDate());

			var _toFloat = _interopRequireDefault(requireToFloat());

			var _toInt = _interopRequireDefault(requireToInt());

			var _toBoolean = _interopRequireDefault(requireToBoolean());

			var _equals = _interopRequireDefault(requireEquals());

			var _contains = _interopRequireDefault(requireContains());

			var _matches = _interopRequireDefault(requireMatches());

			var _isEmail = _interopRequireDefault(requireIsEmail());

			var _isURL = _interopRequireDefault(requireIsURL());

			var _isMACAddress = _interopRequireDefault(requireIsMACAddress());

			var _isIP = _interopRequireDefault(requireIsIP());

			var _isIPRange = _interopRequireDefault(requireIsIPRange());

			var _isFQDN = _interopRequireDefault(requireIsFQDN());

			var _isDate = _interopRequireDefault(requireIsDate());

			var _isTime = _interopRequireDefault(requireIsTime());

			var _isBoolean = _interopRequireDefault(requireIsBoolean());

			var _isLocale = _interopRequireDefault(requireIsLocale());

			var _isAlpha = _interopRequireWildcard(requireIsAlpha());

			var _isAlphanumeric = _interopRequireWildcard(requireIsAlphanumeric());

			var _isNumeric = _interopRequireDefault(requireIsNumeric());

			var _isPassportNumber = _interopRequireDefault(requireIsPassportNumber());

			var _isPort = _interopRequireDefault(requireIsPort());

			var _isLowercase = _interopRequireDefault(requireIsLowercase());

			var _isUppercase = _interopRequireDefault(requireIsUppercase());

			var _isIMEI = _interopRequireDefault(requireIsIMEI());

			var _isAscii = _interopRequireDefault(requireIsAscii());

			var _isFullWidth = _interopRequireDefault(requireIsFullWidth());

			var _isHalfWidth = _interopRequireDefault(requireIsHalfWidth());

			var _isVariableWidth = _interopRequireDefault(requireIsVariableWidth());

			var _isMultibyte = _interopRequireDefault(requireIsMultibyte());

			var _isSemVer = _interopRequireDefault(requireIsSemVer());

			var _isSurrogatePair = _interopRequireDefault(requireIsSurrogatePair());

			var _isInt = _interopRequireDefault(requireIsInt());

			var _isFloat = _interopRequireWildcard(requireIsFloat());

			var _isDecimal = _interopRequireDefault(requireIsDecimal());

			var _isHexadecimal = _interopRequireDefault(requireIsHexadecimal());

			var _isOctal = _interopRequireDefault(requireIsOctal());

			var _isDivisibleBy = _interopRequireDefault(requireIsDivisibleBy());

			var _isHexColor = _interopRequireDefault(requireIsHexColor());

			var _isRgbColor = _interopRequireDefault(requireIsRgbColor());

			var _isHSL = _interopRequireDefault(requireIsHSL());

			var _isISRC = _interopRequireDefault(requireIsISRC());

			var _isIBAN = _interopRequireWildcard(requireIsIBAN());

			var _isBIC = _interopRequireDefault(requireIsBIC());

			var _isMD = _interopRequireDefault(requireIsMD5());

			var _isHash = _interopRequireDefault(requireIsHash());

			var _isJWT = _interopRequireDefault(requireIsJWT());

			var _isJSON = _interopRequireDefault(requireIsJSON());

			var _isEmpty = _interopRequireDefault(requireIsEmpty$1());

			var _isLength = _interopRequireDefault(requireIsLength());

			var _isByteLength = _interopRequireDefault(requireIsByteLength());

			var _isUUID = _interopRequireDefault(requireIsUUID());

			var _isMongoId = _interopRequireDefault(requireIsMongoId());

			var _isAfter = _interopRequireDefault(requireIsAfter());

			var _isBefore = _interopRequireDefault(requireIsBefore());

			var _isIn = _interopRequireDefault(requireIsIn());

			var _isLuhnNumber = _interopRequireDefault(requireIsLuhnNumber());

			var _isCreditCard = _interopRequireDefault(requireIsCreditCard());

			var _isIdentityCard = _interopRequireDefault(requireIsIdentityCard());

			var _isEAN = _interopRequireDefault(requireIsEAN());

			var _isISIN = _interopRequireDefault(requireIsISIN());

			var _isISBN = _interopRequireDefault(requireIsISBN());

			var _isISSN = _interopRequireDefault(requireIsISSN());

			var _isTaxID = _interopRequireDefault(requireIsTaxID());

			var _isMobilePhone = _interopRequireWildcard(requireIsMobilePhone());

			var _isEthereumAddress = _interopRequireDefault(requireIsEthereumAddress());

			var _isCurrency = _interopRequireDefault(requireIsCurrency());

			var _isBtcAddress = _interopRequireDefault(requireIsBtcAddress());

			var _isISO = _interopRequireDefault(requireIsISO6391());

			var _isISO2 = _interopRequireDefault(requireIsISO8601());

			var _isRFC = _interopRequireDefault(requireIsRFC3339());

			var _isISO31661Alpha = _interopRequireDefault(requireIsISO31661Alpha2());

			var _isISO31661Alpha2 = _interopRequireDefault(requireIsISO31661Alpha3());

			var _isISO3 = _interopRequireDefault(requireIsISO4217());

			var _isBase = _interopRequireDefault(requireIsBase32());

			var _isBase2 = _interopRequireDefault(requireIsBase58());

			var _isBase3 = _interopRequireDefault(requireIsBase64());

			var _isDataURI = _interopRequireDefault(requireIsDataURI());

			var _isMagnetURI = _interopRequireDefault(requireIsMagnetURI());

			var _isMimeType = _interopRequireDefault(requireIsMimeType());

			var _isLatLong = _interopRequireDefault(requireIsLatLong());

			var _isPostalCode = _interopRequireWildcard(requireIsPostalCode());

			var _ltrim = _interopRequireDefault(requireLtrim());

			var _rtrim = _interopRequireDefault(requireRtrim());

			var _trim = _interopRequireDefault(requireTrim());

			var _escape = _interopRequireDefault(require_escape());

			var _unescape = _interopRequireDefault(require_unescape());

			var _stripLow = _interopRequireDefault(requireStripLow());

			var _whitelist = _interopRequireDefault(requireWhitelist());

			var _blacklist = _interopRequireDefault(requireBlacklist());

			var _isWhitelisted = _interopRequireDefault(requireIsWhitelisted());

			var _normalizeEmail = _interopRequireDefault(requireNormalizeEmail());

			var _isSlug = _interopRequireDefault(requireIsSlug());

			var _isLicensePlate = _interopRequireDefault(requireIsLicensePlate());

			var _isStrongPassword = _interopRequireDefault(requireIsStrongPassword());

			var _isVAT = _interopRequireDefault(requireIsVAT());

			function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

			function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

			function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

			var version = '13.9.0';
			var validator = {
			  version: version,
			  toDate: _toDate.default,
			  toFloat: _toFloat.default,
			  toInt: _toInt.default,
			  toBoolean: _toBoolean.default,
			  equals: _equals.default,
			  contains: _contains.default,
			  matches: _matches.default,
			  isEmail: _isEmail.default,
			  isURL: _isURL.default,
			  isMACAddress: _isMACAddress.default,
			  isIP: _isIP.default,
			  isIPRange: _isIPRange.default,
			  isFQDN: _isFQDN.default,
			  isBoolean: _isBoolean.default,
			  isIBAN: _isIBAN.default,
			  isBIC: _isBIC.default,
			  isAlpha: _isAlpha.default,
			  isAlphaLocales: _isAlpha.locales,
			  isAlphanumeric: _isAlphanumeric.default,
			  isAlphanumericLocales: _isAlphanumeric.locales,
			  isNumeric: _isNumeric.default,
			  isPassportNumber: _isPassportNumber.default,
			  isPort: _isPort.default,
			  isLowercase: _isLowercase.default,
			  isUppercase: _isUppercase.default,
			  isAscii: _isAscii.default,
			  isFullWidth: _isFullWidth.default,
			  isHalfWidth: _isHalfWidth.default,
			  isVariableWidth: _isVariableWidth.default,
			  isMultibyte: _isMultibyte.default,
			  isSemVer: _isSemVer.default,
			  isSurrogatePair: _isSurrogatePair.default,
			  isInt: _isInt.default,
			  isIMEI: _isIMEI.default,
			  isFloat: _isFloat.default,
			  isFloatLocales: _isFloat.locales,
			  isDecimal: _isDecimal.default,
			  isHexadecimal: _isHexadecimal.default,
			  isOctal: _isOctal.default,
			  isDivisibleBy: _isDivisibleBy.default,
			  isHexColor: _isHexColor.default,
			  isRgbColor: _isRgbColor.default,
			  isHSL: _isHSL.default,
			  isISRC: _isISRC.default,
			  isMD5: _isMD.default,
			  isHash: _isHash.default,
			  isJWT: _isJWT.default,
			  isJSON: _isJSON.default,
			  isEmpty: _isEmpty.default,
			  isLength: _isLength.default,
			  isLocale: _isLocale.default,
			  isByteLength: _isByteLength.default,
			  isUUID: _isUUID.default,
			  isMongoId: _isMongoId.default,
			  isAfter: _isAfter.default,
			  isBefore: _isBefore.default,
			  isIn: _isIn.default,
			  isLuhnNumber: _isLuhnNumber.default,
			  isCreditCard: _isCreditCard.default,
			  isIdentityCard: _isIdentityCard.default,
			  isEAN: _isEAN.default,
			  isISIN: _isISIN.default,
			  isISBN: _isISBN.default,
			  isISSN: _isISSN.default,
			  isMobilePhone: _isMobilePhone.default,
			  isMobilePhoneLocales: _isMobilePhone.locales,
			  isPostalCode: _isPostalCode.default,
			  isPostalCodeLocales: _isPostalCode.locales,
			  isEthereumAddress: _isEthereumAddress.default,
			  isCurrency: _isCurrency.default,
			  isBtcAddress: _isBtcAddress.default,
			  isISO6391: _isISO.default,
			  isISO8601: _isISO2.default,
			  isRFC3339: _isRFC.default,
			  isISO31661Alpha2: _isISO31661Alpha.default,
			  isISO31661Alpha3: _isISO31661Alpha2.default,
			  isISO4217: _isISO3.default,
			  isBase32: _isBase.default,
			  isBase58: _isBase2.default,
			  isBase64: _isBase3.default,
			  isDataURI: _isDataURI.default,
			  isMagnetURI: _isMagnetURI.default,
			  isMimeType: _isMimeType.default,
			  isLatLong: _isLatLong.default,
			  ltrim: _ltrim.default,
			  rtrim: _rtrim.default,
			  trim: _trim.default,
			  escape: _escape.default,
			  unescape: _unescape.default,
			  stripLow: _stripLow.default,
			  whitelist: _whitelist.default,
			  blacklist: _blacklist.default,
			  isWhitelisted: _isWhitelisted.default,
			  normalizeEmail: _normalizeEmail.default,
			  toString: toString,
			  isSlug: _isSlug.default,
			  isStrongPassword: _isStrongPassword.default,
			  isTaxID: _isTaxID.default,
			  isDate: _isDate.default,
			  isTime: _isTime.default,
			  isLicensePlate: _isLicensePlate.default,
			  isVAT: _isVAT.default,
			  ibanLocales: _isIBAN.locales
			};
			var _default = validator;
			exports.default = _default;
			module.exports = exports.default;
			module.exports.default = exports.default; 
		} (validator$1, validator$1.exports));
		return validator$1.exports;
	}

	var __defProp$x = Object.defineProperty;
	var __getOwnPropDesc$x = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames$x = Object.getOwnPropertyNames;
	var __hasOwnProp$x = Object.prototype.hasOwnProperty;
	var __export$x = (target, all) => {
	  for (var name in all)
	    __defProp$x(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps$x = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames$x(from))
	      if (!__hasOwnProp$x.call(to, key) && key !== except)
	        __defProp$x(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc$x(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS$x = (mod) => __copyProps$x(__defProp$x({}, "__esModule", { value: true }), mod);
	var validator_extras_exports = {};
	__export$x(validator_extras_exports, {
	  extensions: () => extensions,
	  validator: () => validator
	});
	var validatorExtras = __toCommonJS$x(validator_extras_exports);
	const _$4 = lodashExports;
	const validator = _$4.cloneDeep(requireValidator());
	const dayjs$1 = dayjs_minExports;
	const extensions = {
	  extend(name, fn) {
	    this[name] = fn;
	    return this;
	  },
	  notEmpty(str) {
	    return !/^\s*$/.test(str);
	  },
	  // TODO: accept { min, max } object
	  len(str, min, max) {
	    return this.isLength(str, min, max);
	  },
	  isUrl(str) {
	    return this.isURL(str);
	  },
	  isIPv6(str) {
	    return this.isIP(str, 6);
	  },
	  isIPv4(str) {
	    return this.isIP(str, 4);
	  },
	  notIn(str, values) {
	    return !this.isIn(str, values);
	  },
	  regex(str, pattern, modifiers) {
	    str = String(str);
	    if (Object.prototype.toString.call(pattern).slice(8, -1) !== "RegExp") {
	      pattern = new RegExp(pattern, modifiers);
	    }
	    return str.match(pattern);
	  },
	  notRegex(str, pattern, modifiers) {
	    return !this.regex(str, pattern, modifiers);
	  },
	  isDecimal(str) {
	    return str !== "" && Boolean(/^(?:-?\d+)?(?:\.\d*)?(?:[Ee][+-]?\d+)?$/.test(str));
	  },
	  min(str, val) {
	    const number = Number.parseFloat(str);
	    return isNaN(number) || number >= val;
	  },
	  max(str, val) {
	    const number = Number.parseFloat(str);
	    return isNaN(number) || number <= val;
	  },
	  not(str, pattern, modifiers) {
	    return this.notRegex(str, pattern, modifiers);
	  },
	  contains(str, elem) {
	    return Boolean(elem) && str.includes(elem);
	  },
	  notContains(str, elem) {
	    return !this.contains(str, elem);
	  },
	  is(str, pattern, modifiers) {
	    return this.regex(str, pattern, modifiers);
	  }
	};
	validator.isImmutable = function(value, validatorArgs, field, modelInstance) {
	  return modelInstance.isNewRecord || modelInstance.dataValues[field] === modelInstance._previousDataValues[field];
	};
	validator.notNull = function(val) {
	  return val !== null && val !== void 0;
	};
	_$4.forEach(extensions, (extend, key) => {
	  validator[key] = extend;
	});
	validator.isNull = validator.isEmpty;
	validator.isDate = function(dateString) {
	  return dayjs$1(dateString).isValid();
	};

	var geoJson;
	var hasRequiredGeoJson;

	function requireGeoJson () {
		if (hasRequiredGeoJson) return geoJson;
		hasRequiredGeoJson = 1;
		var __create = Object.create;
		var __defProp = Object.defineProperty;
		var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
		var __getOwnPropNames = Object.getOwnPropertyNames;
		var __getProtoOf = Object.getPrototypeOf;
		var __hasOwnProp = Object.prototype.hasOwnProperty;
		var __export = (target, all) => {
		  for (var name in all)
		    __defProp(target, name, { get: all[name], enumerable: true });
		};
		var __copyProps = (to, from, except, desc) => {
		  if (from && typeof from === "object" || typeof from === "function") {
		    for (let key of __getOwnPropNames(from))
		      if (!__hasOwnProp.call(to, key) && key !== except)
		        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
		  }
		  return to;
		};
		var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
		  // If the importer is in node compatibility mode or this is not an ESM
		  // file that has been converted to a CommonJS file using a Babel-
		  // compatible transform (i.e. "__esModule" has not been set), then set
		  // "default" to the CommonJS "module.exports" for node compatibility.
		  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
		  mod
		));
		var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
		var geo_json_exports = {};
		__export(geo_json_exports, {
		  GeoJsonType: () => GeoJsonType,
		  assertIsGeoJson: () => assertIsGeoJson,
		  assertIsGeoJsonGeometryCollection: () => assertIsGeoJsonGeometryCollection,
		  assertIsGeoJsonLineString: () => assertIsGeoJsonLineString,
		  assertIsGeoJsonMultiLineString: () => assertIsGeoJsonMultiLineString,
		  assertIsGeoJsonMultiPoint: () => assertIsGeoJsonMultiPoint,
		  assertIsGeoJsonMultiPolygon: () => assertIsGeoJsonMultiPolygon,
		  assertIsGeoJsonPoint: () => assertIsGeoJsonPoint,
		  assertIsGeoJsonPolygon: () => assertIsGeoJsonPolygon
		});
		geoJson = __toCommonJS(geo_json_exports);
		var import_node_util = __toESM(require$$0$1);
		var import_check = requireCheck();
		var import_validator_extras = validatorExtras;
		var GeoJsonType = /* @__PURE__ */ ((GeoJsonType2) => {
		  GeoJsonType2["Point"] = "Point";
		  GeoJsonType2["LineString"] = "LineString";
		  GeoJsonType2["Polygon"] = "Polygon";
		  GeoJsonType2["MultiPoint"] = "MultiPoint";
		  GeoJsonType2["MultiLineString"] = "MultiLineString";
		  GeoJsonType2["MultiPolygon"] = "MultiPolygon";
		  GeoJsonType2["GeometryCollection"] = "GeometryCollection";
		  return GeoJsonType2;
		})(GeoJsonType || {});
		const geoJsonTypeArray = Object.keys(GeoJsonType);
		function assertIsGeoJson(value) {
		  assertIsBaseGeoJson(value);
		  switch (value.type) {
		    case "Point" /* Point */:
		      assertIsGeoJsonPoint(value);
		      break;
		    case "LineString" /* LineString */:
		      assertIsGeoJsonLineString(value);
		      break;
		    case "Polygon" /* Polygon */:
		      assertIsGeoJsonPolygon(value);
		      break;
		    case "MultiPoint" /* MultiPoint */:
		      assertIsGeoJsonMultiPoint(value);
		      break;
		    case "MultiLineString" /* MultiLineString */:
		      assertIsGeoJsonMultiLineString(value);
		      break;
		    case "MultiPolygon" /* MultiPolygon */:
		      assertIsGeoJsonMultiPolygon(value);
		      break;
		    case "GeometryCollection" /* GeometryCollection */:
		      assertIsGeoJsonGeometryCollection(value);
		      break;
		    default:
		      throw new Error(`GeoJSON object ${import_node_util.default.inspect(value)} has an invalid or missing "type" property. Expected one of ${geoJsonTypeArray.join(", ")}`);
		  }
		}
		function validatePosition(tuple, source) {
		  if (!Array.isArray(tuple)) {
		    throw new Error(`GeoJSON ${source.type} object ${import_node_util.default.inspect(source)} specifies an invalid position: ${import_node_util.default.inspect(tuple)}. Expected an array of numeric values.`);
		  }
		  for (const coordinate of tuple) {
		    if (!import_validator_extras.validator.isNumeric(String(coordinate))) {
		      throw new Error(`GeoJSON ${source.type} object ${import_node_util.default.inspect(source)} specifies an invalid point: ${import_node_util.default.inspect(tuple)}. ${import_node_util.default.inspect(coordinate)} is not a numeric value.`);
		    }
		  }
		}
		function assertIsBaseGeoJson(value) {
		  if (!(0, import_check.isPlainObject)(value)) {
		    throw new Error(`${import_node_util.default.inspect(value)} is not a valid GeoJSON object: it must be a plain object.`);
		  }
		}
		function assertIsGeoJsonPoint(value) {
		  assertIsBaseGeoJson(value);
		  if (value.type !== "Point") {
		    throw new Error(`GeoJSON Point object ${import_node_util.default.inspect(value)} has an invalid or missing "type" property. Expected "Point".`);
		  }
		  const coordinates = value.coordinates;
		  if (Array.isArray(coordinates) && coordinates.length === 0) {
		    return;
		  }
		  validatePosition(coordinates, value);
		}
		function assertIsGeoJsonLineString(value) {
		  assertIsBaseGeoJson(value);
		  if (value.type !== "LineString") {
		    throw new Error(`GeoJSON LineString object ${import_node_util.default.inspect(value)} has an invalid or missing "type" property. Expected "LineString".`);
		  }
		  const coordinates = value.coordinates;
		  if (!Array.isArray(coordinates)) {
		    throw new Error(`GeoJSON LineString object ${import_node_util.default.inspect(value)} has an invalid or missing "coordinates" property. Expected an array of positions (array of numeric values).`);
		  }
		  for (const position of coordinates) {
		    validatePosition(position, value);
		  }
		}
		function assertIsGeoJsonPolygon(value) {
		  assertIsBaseGeoJson(value);
		  if (value.type !== "Polygon") {
		    throw new Error(`GeoJSON Polygon object ${import_node_util.default.inspect(value)} has an invalid or missing "type" property. Expected "Polygon".`);
		  }
		  const coordinates = value.coordinates;
		  if (!Array.isArray(coordinates)) {
		    throw new Error(`GeoJSON Polygon object ${import_node_util.default.inspect(value)} has an invalid or missing "coordinates" property. Expected an array of linear ring coordinate arrays. Refer to the GeoJSON specification for more information.`);
		  }
		  for (const ring of coordinates) {
		    if (!Array.isArray(ring)) {
		      throw new Error(`GeoJSON Polygon object ${import_node_util.default.inspect(value)} has an invalid or missing "coordinates" property. Expected an array of linear ring coordinate arrays. Refer to the GeoJSON specification for more information.`);
		    }
		    for (const position of ring) {
		      validatePosition(position, value);
		    }
		  }
		}
		function assertIsGeoJsonMultiPoint(value) {
		  assertIsBaseGeoJson(value);
		  if (value.type !== "MultiPoint") {
		    throw new Error(`GeoJSON MultiPoint object ${import_node_util.default.inspect(value)} has an invalid or missing "type" property. Expected "MultiPoint".`);
		  }
		  const coordinates = value.coordinates;
		  if (!Array.isArray(coordinates)) {
		    throw new Error(`GeoJSON MultiPoint object ${import_node_util.default.inspect(value)} has an invalid or missing "coordinates" property. Expected an array of point coordinates.`);
		  }
		  for (const position of coordinates) {
		    validatePosition(position, value);
		  }
		}
		function assertIsGeoJsonMultiLineString(value) {
		  assertIsBaseGeoJson(value);
		  if (value.type !== "MultiLineString") {
		    throw new Error(`GeoJSON MultiLineString object ${import_node_util.default.inspect(value)} has an invalid or missing "type" property. Expected "MultiLineString".`);
		  }
		  const coordinates = value.coordinates;
		  if (!Array.isArray(coordinates)) {
		    throw new Error(`GeoJSON MultiLineString object ${import_node_util.default.inspect(value)} has an invalid or missing "coordinates" property. Expected an array of line string coordinates.`);
		  }
		  for (const lineString of coordinates) {
		    if (!Array.isArray(lineString)) {
		      throw new Error(`GeoJSON MultiLineString object ${import_node_util.default.inspect(value)} has an invalid or missing "coordinates" property. Expected an array of line string coordinates.`);
		    }
		    for (const position of lineString) {
		      validatePosition(position, value);
		    }
		  }
		}
		function assertIsGeoJsonMultiPolygon(value) {
		  assertIsBaseGeoJson(value);
		  if (value.type !== "MultiPolygon") {
		    throw new Error(`GeoJSON MultiPolygon object ${import_node_util.default.inspect(value)} has an invalid or missing "type" property. Expected "MultiPolygon".`);
		  }
		  const coordinates = value.coordinates;
		  if (!Array.isArray(coordinates)) {
		    throw new Error(`GeoJSON MultiPolygon object ${import_node_util.default.inspect(value)} has an invalid or missing "coordinates" property. Expected an array of polygon coordinates.`);
		  }
		  for (const polygon of coordinates) {
		    if (!Array.isArray(polygon)) {
		      throw new Error(`GeoJSON MultiPolygon object ${import_node_util.default.inspect(value)} has an invalid or missing "coordinates" property. Expected an array of polygon coordinates.`);
		    }
		    for (const ring of polygon) {
		      if (!Array.isArray(ring)) {
		        throw new Error(`GeoJSON MultiPolygon object ${import_node_util.default.inspect(value)} has an invalid or missing "coordinates" property. Expected an array of polygon coordinates.`);
		      }
		      for (const position of ring) {
		        validatePosition(position, value);
		      }
		    }
		  }
		}
		function assertIsGeoJsonGeometryCollection(value) {
		  assertIsBaseGeoJson(value);
		  if (value.type !== "GeometryCollection") {
		    throw new Error(`GeoJSON GeometryCollection object ${import_node_util.default.inspect(value)} has an invalid or missing "type" property. Expected "GeometryCollection".`);
		  }
		  const geometries = value.geometries;
		  if (!Array.isArray(geometries)) {
		    throw new Error(`GeoJSON GeometryCollection object ${import_node_util.default.inspect(value)} has an invalid or missing "geometries" property. Expected an array of GeoJSON geometry objects.`);
		  }
		  for (const geometry of geometries) {
		    assertIsGeoJson(geometry);
		  }
		}
		
		return geoJson;
	}

	var __defProp$w = Object.defineProperty;
	var __getOwnPropDesc$w = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames$w = Object.getOwnPropertyNames;
	var __hasOwnProp$w = Object.prototype.hasOwnProperty;
	var __export$w = (target, all) => {
	  for (var name in all)
	    __defProp$w(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps$w = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames$w(from))
	      if (!__hasOwnProp$w.call(to, key) && key !== except)
	        __defProp$w(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc$w(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS$w = (mod) => __copyProps$w(__defProp$w({}, "__esModule", { value: true }), mod);
	var buffer_exports = {};
	__export$w(buffer_exports, {
	  makeBufferFromTypedArray: () => makeBufferFromTypedArray
	});
	var buffer = __toCommonJS$w(buffer_exports);
	function makeBufferFromTypedArray(arr) {
	  return ArrayBuffer.isView(arr) ? Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength) : Buffer.from(arr);
	}

	var timezone = {exports: {}};

	(function (module, exports) {
		!function(t,e){module.exports=e();}(commonjsGlobal,(function(){var t={year:0,month:1,day:2,hour:3,minute:4,second:5},e={};return function(n,i,o){var r,a=function(t,n,i){void 0===i&&(i={});var o=new Date(t),r=function(t,n){void 0===n&&(n={});var i=n.timeZoneName||"short",o=t+"|"+i,r=e[o];return r||(r=new Intl.DateTimeFormat("en-US",{hour12:!1,timeZone:t,year:"numeric",month:"2-digit",day:"2-digit",hour:"2-digit",minute:"2-digit",second:"2-digit",timeZoneName:i}),e[o]=r),r}(n,i);return r.formatToParts(o)},u=function(e,n){for(var i=a(e,n),r=[],u=0;u<i.length;u+=1){var f=i[u],s=f.type,m=f.value,c=t[s];c>=0&&(r[c]=parseInt(m,10));}var d=r[3],l=24===d?0:d,v=r[0]+"-"+r[1]+"-"+r[2]+" "+l+":"+r[4]+":"+r[5]+":000",h=+e;return (o.utc(v).valueOf()-(h-=h%1e3))/6e4},f=i.prototype;f.tz=function(t,e){void 0===t&&(t=r);var n=this.utcOffset(),i=this.toDate(),a=i.toLocaleString("en-US",{timeZone:t}),u=Math.round((i-new Date(a))/1e3/60),f=o(a).$set("millisecond",this.$ms).utcOffset(15*-Math.round(i.getTimezoneOffset()/15)-u,!0);if(e){var s=f.utcOffset();f=f.add(n-s,"minute");}return f.$x.$timezone=t,f},f.offsetName=function(t){var e=this.$x.$timezone||o.tz.guess(),n=a(this.valueOf(),e,{timeZoneName:t}).find((function(t){return "timezonename"===t.type.toLowerCase()}));return n&&n.value};var s=f.startOf;f.startOf=function(t,e){if(!this.$x||!this.$x.$timezone)return s.call(this,t,e);var n=o(this.format("YYYY-MM-DD HH:mm:ss:SSS"));return s.call(n,t,e).tz(this.$x.$timezone,!0)},o.tz=function(t,e,n){var i=n&&e,a=n||e||r,f=u(+o(),a);if("string"!=typeof t)return o(t).tz(a);var s=function(t,e,n){var i=t-60*e*1e3,o=u(i,n);if(e===o)return [i,e];var r=u(i-=60*(o-e)*1e3,n);return o===r?[i,o]:[t-60*Math.min(o,r)*1e3,Math.max(o,r)]}(o.utc(t,i).valueOf(),f,a),m=s[0],c=s[1],d=o(m).utcOffset(c);return d.$x.$timezone=a,d},o.tz.guess=function(){return Intl.DateTimeFormat().resolvedOptions().timeZone},o.tz.setDefault=function(t){r=t;};}})); 
	} (timezone));

	var timezoneExports = timezone.exports;

	var utc = {exports: {}};

	(function (module, exports) {
		!function(t,i){module.exports=i();}(commonjsGlobal,(function(){var t="minute",i=/[+-]\d\d(?::?\d\d)?/g,e=/([+-]|\d\d)/g;return function(s,f,n){var u=f.prototype;n.utc=function(t){var i={date:t,utc:!0,args:arguments};return new f(i)},u.utc=function(i){var e=n(this.toDate(),{locale:this.$L,utc:!0});return i?e.add(this.utcOffset(),t):e},u.local=function(){return n(this.toDate(),{locale:this.$L,utc:!1})};var o=u.parse;u.parse=function(t){t.utc&&(this.$u=!0),this.$utils().u(t.$offset)||(this.$offset=t.$offset),o.call(this,t);};var r=u.init;u.init=function(){if(this.$u){var t=this.$d;this.$y=t.getUTCFullYear(),this.$M=t.getUTCMonth(),this.$D=t.getUTCDate(),this.$W=t.getUTCDay(),this.$H=t.getUTCHours(),this.$m=t.getUTCMinutes(),this.$s=t.getUTCSeconds(),this.$ms=t.getUTCMilliseconds();}else r.call(this);};var a=u.utcOffset;u.utcOffset=function(s,f){var n=this.$utils().u;if(n(s))return this.$u?0:n(this.$offset)?a.call(this):this.$offset;if("string"==typeof s&&(s=function(t){void 0===t&&(t="");var s=t.match(i);if(!s)return null;var f=(""+s[0]).match(e)||["-",0,0],n=f[0],u=60*+f[1]+ +f[2];return 0===u?0:"+"===n?u:-u}(s),null===s))return this;var u=Math.abs(s)<=16?60*s:s,o=this;if(f)return o.$offset=u,o.$u=0===s,o;if(0!==s){var r=this.$u?this.toDate().getTimezoneOffset():-1*this.utcOffset();(o=this.local().add(u+r,t)).$offset=u,o.$x.$localOffset=r;}else o=this.utc();return o};var h=u.format;u.format=function(t){var i=t||(this.$u?"YYYY-MM-DDTHH:mm:ss[Z]":"");return h.call(this,i)},u.valueOf=function(){var t=this.$utils().u(this.$offset)?0:this.$offset+(this.$x.$localOffset||this.$d.getTimezoneOffset());return this.$d.valueOf()-6e4*t},u.isUTC=function(){return !!this.$u},u.toISOString=function(){return this.toDate().toISOString()},u.toString=function(){return this.toDate().toUTCString()};var l=u.toDate;u.toDate=function(t){return "s"===t&&this.$offset?n(this.format("YYYY-MM-DD HH:mm:ss:SSS")).toDate():l.call(this)};var c=u.diff;u.diff=function(t,i,e){if(t&&this.$u===t.$u)return c.call(this,t,i,e);var s=this.local(),f=n(t).local();return c.call(s,f,i,e)};}})); 
	} (utc));

	var utcExports = utc.exports;

	var __create$a = Object.create;
	var __defProp$v = Object.defineProperty;
	var __getOwnPropDesc$v = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames$v = Object.getOwnPropertyNames;
	var __getProtoOf$a = Object.getPrototypeOf;
	var __hasOwnProp$v = Object.prototype.hasOwnProperty;
	var __export$v = (target, all) => {
	  for (var name in all)
	    __defProp$v(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps$v = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames$v(from))
	      if (!__hasOwnProp$v.call(to, key) && key !== except)
	        __defProp$v(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc$v(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toESM$a = (mod, isNodeMode, target) => (target = mod != null ? __create$a(__getProtoOf$a(mod)) : {}, __copyProps$v(
	  // If the importer is in node compatibility mode or this is not an ESM
	  // file that has been converted to a CommonJS file using a Babel-
	  // compatible transform (i.e. "__esModule" has not been set), then set
	  // "default" to the CommonJS "module.exports" for node compatibility.
	  isNodeMode || !mod || !mod.__esModule ? __defProp$v(target, "default", { value: mod, enumerable: true }) : target,
	  mod
	));
	var __toCommonJS$v = (mod) => __copyProps$v(__defProp$v({}, "__esModule", { value: true }), mod);
	var dayjs_exports = {};
	__export$v(dayjs_exports, {
	  isValidTimeZone: () => isValidTimeZone
	});
	var dayjs = __toCommonJS$v(dayjs_exports);
	var import_dayjs = __toESM$a(dayjs_minExports);
	var import_timezone = __toESM$a(timezoneExports);
	var import_utc = __toESM$a(utcExports);
	import_dayjs.default.extend(import_utc.default);
	import_dayjs.default.extend(import_timezone.default);
	const history = /* @__PURE__ */ new Map();
	function isValidTimeZone(tz) {
	  if (history.has(tz)) {
	    return history.get(tz);
	  }
	  let status;
	  try {
	    Intl.DateTimeFormat(void 0, { timeZone: tz });
	    status = true;
	  } catch {
	    status = false;
	  }
	  history.set(tz, status);
	  return status;
	}

	var __defProp$u = Object.defineProperty;
	var __getOwnPropDesc$u = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames$u = Object.getOwnPropertyNames;
	var __hasOwnProp$u = Object.prototype.hasOwnProperty;
	var __export$u = (target, all) => {
	  for (var name in all)
	    __defProp$u(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps$u = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames$u(from))
	      if (!__hasOwnProp$u.call(to, key) && key !== except)
	        __defProp$u(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc$u(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS$u = (mod) => __copyProps$u(__defProp$u({}, "__esModule", { value: true }), mod);
	var join_sql_fragments_exports = {};
	__export$u(join_sql_fragments_exports, {
	  JoinSQLFragmentsError: () => JoinSQLFragmentsError,
	  joinSQLFragments: () => joinSQLFragments
	});
	var joinSqlFragments = __toCommonJS$u(join_sql_fragments_exports);
	function doesNotWantLeadingSpace(str) {
	  return /^[),;]/.test(str);
	}
	function doesNotWantTrailingSpace(str) {
	  return str.endsWith("(");
	}
	function singleSpaceJoinHelper(parts) {
	  return parts.reduce(
	    ({ skipNextLeadingSpace, result }, part) => {
	      if (skipNextLeadingSpace || doesNotWantLeadingSpace(part)) {
	        result += part.trim();
	      } else {
	        result += ` ${part.trim()}`;
	      }
	      return {
	        skipNextLeadingSpace: doesNotWantTrailingSpace(part),
	        result
	      };
	    },
	    {
	      skipNextLeadingSpace: true,
	      result: ""
	    }
	  ).result;
	}
	function joinSQLFragments(array) {
	  if (array.length === 0) {
	    return "";
	  }
	  const truthyArray = array.filter(
	    (x) => Boolean(x)
	  );
	  const flattenedArray = truthyArray.map(
	    (fragment) => {
	      if (Array.isArray(fragment)) {
	        return joinSQLFragments(fragment);
	      }
	      return fragment;
	    }
	  );
	  for (const fragment of flattenedArray) {
	    if (fragment && typeof fragment !== "string") {
	      throw new JoinSQLFragmentsError(
	        flattenedArray,
	        fragment,
	        `Tried to construct a SQL string with a non-string, non-falsy fragment (${fragment}).`
	      );
	    }
	  }
	  const trimmedArray = flattenedArray.map((x) => x.trim());
	  const nonEmptyStringArray = trimmedArray.filter((x) => x !== "");
	  return singleSpaceJoinHelper(nonEmptyStringArray);
	}
	class JoinSQLFragmentsError extends TypeError {
	  args;
	  fragment;
	  // iirc this error is only used when we get an invalid fragment.
	  constructor(args, fragment, message) {
	    super(message);
	    this.args = args;
	    this.fragment = fragment;
	    this.name = "JoinSQLFragmentsError";
	  }
	}

	var __defProp$t = Object.defineProperty;
	var __getOwnPropDesc$t = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames$t = Object.getOwnPropertyNames;
	var __hasOwnProp$t = Object.prototype.hasOwnProperty;
	var __export$t = (target, all) => {
	  for (var name in all)
	    __defProp$t(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps$t = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames$t(from))
	      if (!__hasOwnProp$t.call(to, key) && key !== except)
	        __defProp$t(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc$t(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS$t = (mod) => __copyProps$t(__defProp$t({}, "__esModule", { value: true }), mod);
	var parse_number_exports = {};
	__export$t(parse_number_exports, {
	  parseBigInt: () => parseBigInt,
	  parseNumber: () => parseNumber,
	  parseNumberOrThrow: () => parseNumberOrThrow
	});
	var parseNumber_1 = __toCommonJS$t(parse_number_exports);
	const BASE10_NUMBER_SCIENTIFIC_REGEX = /^[-+]?[0-9]*(\.[0-9]+)?([eE][-+]?[0-9]+)?$/;
	function parseNumber(value) {
	  if (typeof value === "bigint") {
	    if (value > Number.MAX_SAFE_INTEGER || value < Number.MIN_SAFE_INTEGER) {
	      throw new TypeError(`Cannot cast BigInt ${value} to Number, because the value would be outside of the Safe Integer range.`);
	    }
	    return Number(value);
	  }
	  if (!BASE10_NUMBER_SCIENTIFIC_REGEX.test(value) && value !== "Infinity" && value !== "-Infinity") {
	    return Number.NaN;
	  }
	  if (value === "") {
	    return Number.NaN;
	  }
	  return Number(value);
	}
	function parseNumberOrThrow(value, ErrorClass = SyntaxError) {
	  const result = parseNumber(value);
	  if (Number.isNaN(result)) {
	    throw new ErrorClass(`Cannot parse String ${value} as a Number.`);
	  }
	  return result;
	}
	const BASE10_INTEGER_REGEX = /^[-+]?[0-9]+$/;
	function parseBigInt(value) {
	  if (typeof value === "number") {
	    if (Number.isInteger(value) && !Number.isSafeInteger(value)) {
	      throw new TypeError(`Cannot cast Number ${value} to BigInt, because the value is already outside of the Safe Integer range. You need to use a String or BigInt instead of a Number for this value.`);
	    }
	  } else if (!BASE10_INTEGER_REGEX.test(value)) {
	    throw new SyntaxError(`Cannot parse String ${value} as a BigInt.`);
	  }
	  return BigInt(value);
	}

	var __create$9 = Object.create;
	var __defProp$s = Object.defineProperty;
	var __getOwnPropDesc$s = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames$s = Object.getOwnPropertyNames;
	var __getProtoOf$9 = Object.getPrototypeOf;
	var __hasOwnProp$s = Object.prototype.hasOwnProperty;
	var __export$s = (target, all) => {
	  for (var name in all)
	    __defProp$s(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps$s = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames$s(from))
	      if (!__hasOwnProp$s.call(to, key) && key !== except)
	        __defProp$s(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc$s(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toESM$9 = (mod, isNodeMode, target) => (target = mod != null ? __create$9(__getProtoOf$9(mod)) : {}, __copyProps$s(
	  // If the importer is in node compatibility mode or this is not an ESM
	  // file that has been converted to a CommonJS file using a Babel-
	  // compatible transform (i.e. "__esModule" has not been set), then set
	  // "default" to the CommonJS "module.exports" for node compatibility.
	  isNodeMode || !mod || !mod.__esModule ? __defProp$s(target, "default", { value: mod, enumerable: true }) : target,
	  mod
	));
	var __toCommonJS$s = (mod) => __copyProps$s(__defProp$s({}, "__esModule", { value: true }), mod);
	var range_exports = {};
	__export$s(range_exports, {
	  buildRangeParser: () => buildRangeParser,
	  isInputRangePart: () => isInputRangePart,
	  parse: () => parse$6,
	  stringify: () => stringify$6
	});
	var range$2 = __toCommonJS$s(range_exports);
	var import_node_util$2 = __toESM$9(require$$0$1);
	var import_isPlainObject$1 = __toESM$9(isPlainObject_1);
	function stringifyRangeBound(bound, stringifyBoundary) {
	  if (bound === null) {
	    return "";
	  }
	  if (bound === Number.POSITIVE_INFINITY || bound === Number.NEGATIVE_INFINITY) {
	    return bound.toString().toLowerCase();
	  }
	  return stringifyBoundary(bound);
	}
	function parseRangeBound(bound, parseType) {
	  if (!bound) {
	    return null;
	  }
	  if (bound === "infinity") {
	    return Number.POSITIVE_INFINITY;
	  }
	  if (bound === "-infinity") {
	    return Number.NEGATIVE_INFINITY;
	  }
	  if (bound.startsWith('"')) {
	    bound = bound.slice(1);
	  }
	  if (bound.endsWith('"')) {
	    bound = bound.slice(0, -1);
	  }
	  return parseType(bound);
	}
	function stringify$6(range, stringifyBoundary) {
	  if (range.length === 0) {
	    return "empty";
	  }
	  if (range.length !== 2) {
	    throw new Error("range array length must be 0 (empty) or 2 (lower and upper bounds)");
	  }
	  const inclusivity = [true, false];
	  const bounds = range.map((rangePart, index) => {
	    if (isInputRangePart(rangePart)) {
	      if (typeof rangePart.inclusive === "boolean") {
	        inclusivity[index] = rangePart.inclusive;
	      }
	      rangePart = rangePart.value;
	    }
	    return stringifyRangeBound(rangePart, stringifyBoundary);
	  });
	  return `${(inclusivity[0] ? "[" : "(") + bounds[0]},${bounds[1]}${inclusivity[1] ? "]" : ")"}`;
	}
	function parse$6(value, parser) {
	  if (typeof value !== "string") {
	    throw new TypeError(`Sequelize could not parse range "${value}" as its format is incompatible`);
	  }
	  if (value === "empty") {
	    return [];
	  }
	  const result = value.slice(1, -1).split(",", 2);
	  if (result.length !== 2) {
	    throw new TypeError(`Sequelize could not parse range "${value}" as its format is incompatible`);
	  }
	  return result.map((item, index) => {
	    const part = {
	      value: parseRangeBound(item, parser),
	      inclusive: index === 0 ? value.startsWith("[") : value.endsWith("]")
	    };
	    return part;
	  });
	}
	function isInputRangePart(val) {
	  return (0, import_isPlainObject$1.default)(val) && Object.hasOwn(val, "value");
	}
	function buildRangeParser(subTypeParser) {
	  return (value) => {
	    if (typeof value !== "string") {
	      throw new TypeError(import_node_util$2.default.format(`Sequelize could not parse range "%O" as its format is incompatible`, value));
	    }
	    return parse$6(value, subTypeParser);
	  };
	}

	function commonjsRequire(path) {
		throw new Error('Could not dynamically require "' + path + '". Please configure the dynamicRequireTargets or/and ignoreDynamicRequires option of @rollup/plugin-commonjs appropriately for this require call to work.');
	}

	var moment = {exports: {}};

	var hasRequiredMoment;

	function requireMoment () {
		if (hasRequiredMoment) return moment.exports;
		hasRequiredMoment = 1;
		(function (module, exports) {
	(function (global, factory) {
			    module.exports = factory() ;
			}(commonjsGlobal, (function () {
			    var hookCallback;

			    function hooks() {
			        return hookCallback.apply(null, arguments);
			    }

			    // This is done to register the method called with moment()
			    // without creating circular dependencies.
			    function setHookCallback(callback) {
			        hookCallback = callback;
			    }

			    function isArray(input) {
			        return (
			            input instanceof Array ||
			            Object.prototype.toString.call(input) === '[object Array]'
			        );
			    }

			    function isObject(input) {
			        // IE8 will treat undefined and null as object if it wasn't for
			        // input != null
			        return (
			            input != null &&
			            Object.prototype.toString.call(input) === '[object Object]'
			        );
			    }

			    function hasOwnProp(a, b) {
			        return Object.prototype.hasOwnProperty.call(a, b);
			    }

			    function isObjectEmpty(obj) {
			        if (Object.getOwnPropertyNames) {
			            return Object.getOwnPropertyNames(obj).length === 0;
			        } else {
			            var k;
			            for (k in obj) {
			                if (hasOwnProp(obj, k)) {
			                    return false;
			                }
			            }
			            return true;
			        }
			    }

			    function isUndefined(input) {
			        return input === void 0;
			    }

			    function isNumber(input) {
			        return (
			            typeof input === 'number' ||
			            Object.prototype.toString.call(input) === '[object Number]'
			        );
			    }

			    function isDate(input) {
			        return (
			            input instanceof Date ||
			            Object.prototype.toString.call(input) === '[object Date]'
			        );
			    }

			    function map(arr, fn) {
			        var res = [],
			            i,
			            arrLen = arr.length;
			        for (i = 0; i < arrLen; ++i) {
			            res.push(fn(arr[i], i));
			        }
			        return res;
			    }

			    function extend(a, b) {
			        for (var i in b) {
			            if (hasOwnProp(b, i)) {
			                a[i] = b[i];
			            }
			        }

			        if (hasOwnProp(b, 'toString')) {
			            a.toString = b.toString;
			        }

			        if (hasOwnProp(b, 'valueOf')) {
			            a.valueOf = b.valueOf;
			        }

			        return a;
			    }

			    function createUTC(input, format, locale, strict) {
			        return createLocalOrUTC(input, format, locale, strict, true).utc();
			    }

			    function defaultParsingFlags() {
			        // We need to deep clone this object.
			        return {
			            empty: false,
			            unusedTokens: [],
			            unusedInput: [],
			            overflow: -2,
			            charsLeftOver: 0,
			            nullInput: false,
			            invalidEra: null,
			            invalidMonth: null,
			            invalidFormat: false,
			            userInvalidated: false,
			            iso: false,
			            parsedDateParts: [],
			            era: null,
			            meridiem: null,
			            rfc2822: false,
			            weekdayMismatch: false,
			        };
			    }

			    function getParsingFlags(m) {
			        if (m._pf == null) {
			            m._pf = defaultParsingFlags();
			        }
			        return m._pf;
			    }

			    var some;
			    if (Array.prototype.some) {
			        some = Array.prototype.some;
			    } else {
			        some = function (fun) {
			            var t = Object(this),
			                len = t.length >>> 0,
			                i;

			            for (i = 0; i < len; i++) {
			                if (i in t && fun.call(this, t[i], i, t)) {
			                    return true;
			                }
			            }

			            return false;
			        };
			    }

			    function isValid(m) {
			        if (m._isValid == null) {
			            var flags = getParsingFlags(m),
			                parsedParts = some.call(flags.parsedDateParts, function (i) {
			                    return i != null;
			                }),
			                isNowValid =
			                    !isNaN(m._d.getTime()) &&
			                    flags.overflow < 0 &&
			                    !flags.empty &&
			                    !flags.invalidEra &&
			                    !flags.invalidMonth &&
			                    !flags.invalidWeekday &&
			                    !flags.weekdayMismatch &&
			                    !flags.nullInput &&
			                    !flags.invalidFormat &&
			                    !flags.userInvalidated &&
			                    (!flags.meridiem || (flags.meridiem && parsedParts));

			            if (m._strict) {
			                isNowValid =
			                    isNowValid &&
			                    flags.charsLeftOver === 0 &&
			                    flags.unusedTokens.length === 0 &&
			                    flags.bigHour === undefined;
			            }

			            if (Object.isFrozen == null || !Object.isFrozen(m)) {
			                m._isValid = isNowValid;
			            } else {
			                return isNowValid;
			            }
			        }
			        return m._isValid;
			    }

			    function createInvalid(flags) {
			        var m = createUTC(NaN);
			        if (flags != null) {
			            extend(getParsingFlags(m), flags);
			        } else {
			            getParsingFlags(m).userInvalidated = true;
			        }

			        return m;
			    }

			    // Plugins that add properties should also add the key here (null value),
			    // so we can properly clone ourselves.
			    var momentProperties = (hooks.momentProperties = []),
			        updateInProgress = false;

			    function copyConfig(to, from) {
			        var i,
			            prop,
			            val,
			            momentPropertiesLen = momentProperties.length;

			        if (!isUndefined(from._isAMomentObject)) {
			            to._isAMomentObject = from._isAMomentObject;
			        }
			        if (!isUndefined(from._i)) {
			            to._i = from._i;
			        }
			        if (!isUndefined(from._f)) {
			            to._f = from._f;
			        }
			        if (!isUndefined(from._l)) {
			            to._l = from._l;
			        }
			        if (!isUndefined(from._strict)) {
			            to._strict = from._strict;
			        }
			        if (!isUndefined(from._tzm)) {
			            to._tzm = from._tzm;
			        }
			        if (!isUndefined(from._isUTC)) {
			            to._isUTC = from._isUTC;
			        }
			        if (!isUndefined(from._offset)) {
			            to._offset = from._offset;
			        }
			        if (!isUndefined(from._pf)) {
			            to._pf = getParsingFlags(from);
			        }
			        if (!isUndefined(from._locale)) {
			            to._locale = from._locale;
			        }

			        if (momentPropertiesLen > 0) {
			            for (i = 0; i < momentPropertiesLen; i++) {
			                prop = momentProperties[i];
			                val = from[prop];
			                if (!isUndefined(val)) {
			                    to[prop] = val;
			                }
			            }
			        }

			        return to;
			    }

			    // Moment prototype object
			    function Moment(config) {
			        copyConfig(this, config);
			        this._d = new Date(config._d != null ? config._d.getTime() : NaN);
			        if (!this.isValid()) {
			            this._d = new Date(NaN);
			        }
			        // Prevent infinite loop in case updateOffset creates new moment
			        // objects.
			        if (updateInProgress === false) {
			            updateInProgress = true;
			            hooks.updateOffset(this);
			            updateInProgress = false;
			        }
			    }

			    function isMoment(obj) {
			        return (
			            obj instanceof Moment || (obj != null && obj._isAMomentObject != null)
			        );
			    }

			    function warn(msg) {
			        if (
			            hooks.suppressDeprecationWarnings === false &&
			            typeof console !== 'undefined' &&
			            console.warn
			        ) {
			            console.warn('Deprecation warning: ' + msg);
			        }
			    }

			    function deprecate(msg, fn) {
			        var firstTime = true;

			        return extend(function () {
			            if (hooks.deprecationHandler != null) {
			                hooks.deprecationHandler(null, msg);
			            }
			            if (firstTime) {
			                var args = [],
			                    arg,
			                    i,
			                    key,
			                    argLen = arguments.length;
			                for (i = 0; i < argLen; i++) {
			                    arg = '';
			                    if (typeof arguments[i] === 'object') {
			                        arg += '\n[' + i + '] ';
			                        for (key in arguments[0]) {
			                            if (hasOwnProp(arguments[0], key)) {
			                                arg += key + ': ' + arguments[0][key] + ', ';
			                            }
			                        }
			                        arg = arg.slice(0, -2); // Remove trailing comma and space
			                    } else {
			                        arg = arguments[i];
			                    }
			                    args.push(arg);
			                }
			                warn(
			                    msg +
			                        '\nArguments: ' +
			                        Array.prototype.slice.call(args).join('') +
			                        '\n' +
			                        new Error().stack
			                );
			                firstTime = false;
			            }
			            return fn.apply(this, arguments);
			        }, fn);
			    }

			    var deprecations = {};

			    function deprecateSimple(name, msg) {
			        if (hooks.deprecationHandler != null) {
			            hooks.deprecationHandler(name, msg);
			        }
			        if (!deprecations[name]) {
			            warn(msg);
			            deprecations[name] = true;
			        }
			    }

			    hooks.suppressDeprecationWarnings = false;
			    hooks.deprecationHandler = null;

			    function isFunction(input) {
			        return (
			            (typeof Function !== 'undefined' && input instanceof Function) ||
			            Object.prototype.toString.call(input) === '[object Function]'
			        );
			    }

			    function set(config) {
			        var prop, i;
			        for (i in config) {
			            if (hasOwnProp(config, i)) {
			                prop = config[i];
			                if (isFunction(prop)) {
			                    this[i] = prop;
			                } else {
			                    this['_' + i] = prop;
			                }
			            }
			        }
			        this._config = config;
			        // Lenient ordinal parsing accepts just a number in addition to
			        // number + (possibly) stuff coming from _dayOfMonthOrdinalParse.
			        // TODO: Remove "ordinalParse" fallback in next major release.
			        this._dayOfMonthOrdinalParseLenient = new RegExp(
			            (this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) +
			                '|' +
			                /\d{1,2}/.source
			        );
			    }

			    function mergeConfigs(parentConfig, childConfig) {
			        var res = extend({}, parentConfig),
			            prop;
			        for (prop in childConfig) {
			            if (hasOwnProp(childConfig, prop)) {
			                if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {
			                    res[prop] = {};
			                    extend(res[prop], parentConfig[prop]);
			                    extend(res[prop], childConfig[prop]);
			                } else if (childConfig[prop] != null) {
			                    res[prop] = childConfig[prop];
			                } else {
			                    delete res[prop];
			                }
			            }
			        }
			        for (prop in parentConfig) {
			            if (
			                hasOwnProp(parentConfig, prop) &&
			                !hasOwnProp(childConfig, prop) &&
			                isObject(parentConfig[prop])
			            ) {
			                // make sure changes to properties don't modify parent config
			                res[prop] = extend({}, res[prop]);
			            }
			        }
			        return res;
			    }

			    function Locale(config) {
			        if (config != null) {
			            this.set(config);
			        }
			    }

			    var keys;

			    if (Object.keys) {
			        keys = Object.keys;
			    } else {
			        keys = function (obj) {
			            var i,
			                res = [];
			            for (i in obj) {
			                if (hasOwnProp(obj, i)) {
			                    res.push(i);
			                }
			            }
			            return res;
			        };
			    }

			    var defaultCalendar = {
			        sameDay: '[Today at] LT',
			        nextDay: '[Tomorrow at] LT',
			        nextWeek: 'dddd [at] LT',
			        lastDay: '[Yesterday at] LT',
			        lastWeek: '[Last] dddd [at] LT',
			        sameElse: 'L',
			    };

			    function calendar(key, mom, now) {
			        var output = this._calendar[key] || this._calendar['sameElse'];
			        return isFunction(output) ? output.call(mom, now) : output;
			    }

			    function zeroFill(number, targetLength, forceSign) {
			        var absNumber = '' + Math.abs(number),
			            zerosToFill = targetLength - absNumber.length,
			            sign = number >= 0;
			        return (
			            (sign ? (forceSign ? '+' : '') : '-') +
			            Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) +
			            absNumber
			        );
			    }

			    var formattingTokens =
			            /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|N{1,5}|YYYYYY|YYYYY|YYYY|YY|y{2,4}|yo?|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,
			        localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,
			        formatFunctions = {},
			        formatTokenFunctions = {};

			    // token:    'M'
			    // padded:   ['MM', 2]
			    // ordinal:  'Mo'
			    // callback: function () { this.month() + 1 }
			    function addFormatToken(token, padded, ordinal, callback) {
			        var func = callback;
			        if (typeof callback === 'string') {
			            func = function () {
			                return this[callback]();
			            };
			        }
			        if (token) {
			            formatTokenFunctions[token] = func;
			        }
			        if (padded) {
			            formatTokenFunctions[padded[0]] = function () {
			                return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
			            };
			        }
			        if (ordinal) {
			            formatTokenFunctions[ordinal] = function () {
			                return this.localeData().ordinal(
			                    func.apply(this, arguments),
			                    token
			                );
			            };
			        }
			    }

			    function removeFormattingTokens(input) {
			        if (input.match(/\[[\s\S]/)) {
			            return input.replace(/^\[|\]$/g, '');
			        }
			        return input.replace(/\\/g, '');
			    }

			    function makeFormatFunction(format) {
			        var array = format.match(formattingTokens),
			            i,
			            length;

			        for (i = 0, length = array.length; i < length; i++) {
			            if (formatTokenFunctions[array[i]]) {
			                array[i] = formatTokenFunctions[array[i]];
			            } else {
			                array[i] = removeFormattingTokens(array[i]);
			            }
			        }

			        return function (mom) {
			            var output = '',
			                i;
			            for (i = 0; i < length; i++) {
			                output += isFunction(array[i])
			                    ? array[i].call(mom, format)
			                    : array[i];
			            }
			            return output;
			        };
			    }

			    // format date using native date object
			    function formatMoment(m, format) {
			        if (!m.isValid()) {
			            return m.localeData().invalidDate();
			        }

			        format = expandFormat(format, m.localeData());
			        formatFunctions[format] =
			            formatFunctions[format] || makeFormatFunction(format);

			        return formatFunctions[format](m);
			    }

			    function expandFormat(format, locale) {
			        var i = 5;

			        function replaceLongDateFormatTokens(input) {
			            return locale.longDateFormat(input) || input;
			        }

			        localFormattingTokens.lastIndex = 0;
			        while (i >= 0 && localFormattingTokens.test(format)) {
			            format = format.replace(
			                localFormattingTokens,
			                replaceLongDateFormatTokens
			            );
			            localFormattingTokens.lastIndex = 0;
			            i -= 1;
			        }

			        return format;
			    }

			    var defaultLongDateFormat = {
			        LTS: 'h:mm:ss A',
			        LT: 'h:mm A',
			        L: 'MM/DD/YYYY',
			        LL: 'MMMM D, YYYY',
			        LLL: 'MMMM D, YYYY h:mm A',
			        LLLL: 'dddd, MMMM D, YYYY h:mm A',
			    };

			    function longDateFormat(key) {
			        var format = this._longDateFormat[key],
			            formatUpper = this._longDateFormat[key.toUpperCase()];

			        if (format || !formatUpper) {
			            return format;
			        }

			        this._longDateFormat[key] = formatUpper
			            .match(formattingTokens)
			            .map(function (tok) {
			                if (
			                    tok === 'MMMM' ||
			                    tok === 'MM' ||
			                    tok === 'DD' ||
			                    tok === 'dddd'
			                ) {
			                    return tok.slice(1);
			                }
			                return tok;
			            })
			            .join('');

			        return this._longDateFormat[key];
			    }

			    var defaultInvalidDate = 'Invalid date';

			    function invalidDate() {
			        return this._invalidDate;
			    }

			    var defaultOrdinal = '%d',
			        defaultDayOfMonthOrdinalParse = /\d{1,2}/;

			    function ordinal(number) {
			        return this._ordinal.replace('%d', number);
			    }

			    var defaultRelativeTime = {
			        future: 'in %s',
			        past: '%s ago',
			        s: 'a few seconds',
			        ss: '%d seconds',
			        m: 'a minute',
			        mm: '%d minutes',
			        h: 'an hour',
			        hh: '%d hours',
			        d: 'a day',
			        dd: '%d days',
			        w: 'a week',
			        ww: '%d weeks',
			        M: 'a month',
			        MM: '%d months',
			        y: 'a year',
			        yy: '%d years',
			    };

			    function relativeTime(number, withoutSuffix, string, isFuture) {
			        var output = this._relativeTime[string];
			        return isFunction(output)
			            ? output(number, withoutSuffix, string, isFuture)
			            : output.replace(/%d/i, number);
			    }

			    function pastFuture(diff, output) {
			        var format = this._relativeTime[diff > 0 ? 'future' : 'past'];
			        return isFunction(format) ? format(output) : format.replace(/%s/i, output);
			    }

			    var aliases = {};

			    function addUnitAlias(unit, shorthand) {
			        var lowerCase = unit.toLowerCase();
			        aliases[lowerCase] = aliases[lowerCase + 's'] = aliases[shorthand] = unit;
			    }

			    function normalizeUnits(units) {
			        return typeof units === 'string'
			            ? aliases[units] || aliases[units.toLowerCase()]
			            : undefined;
			    }

			    function normalizeObjectUnits(inputObject) {
			        var normalizedInput = {},
			            normalizedProp,
			            prop;

			        for (prop in inputObject) {
			            if (hasOwnProp(inputObject, prop)) {
			                normalizedProp = normalizeUnits(prop);
			                if (normalizedProp) {
			                    normalizedInput[normalizedProp] = inputObject[prop];
			                }
			            }
			        }

			        return normalizedInput;
			    }

			    var priorities = {};

			    function addUnitPriority(unit, priority) {
			        priorities[unit] = priority;
			    }

			    function getPrioritizedUnits(unitsObj) {
			        var units = [],
			            u;
			        for (u in unitsObj) {
			            if (hasOwnProp(unitsObj, u)) {
			                units.push({ unit: u, priority: priorities[u] });
			            }
			        }
			        units.sort(function (a, b) {
			            return a.priority - b.priority;
			        });
			        return units;
			    }

			    function isLeapYear(year) {
			        return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;
			    }

			    function absFloor(number) {
			        if (number < 0) {
			            // -0 -> 0
			            return Math.ceil(number) || 0;
			        } else {
			            return Math.floor(number);
			        }
			    }

			    function toInt(argumentForCoercion) {
			        var coercedNumber = +argumentForCoercion,
			            value = 0;

			        if (coercedNumber !== 0 && isFinite(coercedNumber)) {
			            value = absFloor(coercedNumber);
			        }

			        return value;
			    }

			    function makeGetSet(unit, keepTime) {
			        return function (value) {
			            if (value != null) {
			                set$1(this, unit, value);
			                hooks.updateOffset(this, keepTime);
			                return this;
			            } else {
			                return get(this, unit);
			            }
			        };
			    }

			    function get(mom, unit) {
			        return mom.isValid()
			            ? mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]()
			            : NaN;
			    }

			    function set$1(mom, unit, value) {
			        if (mom.isValid() && !isNaN(value)) {
			            if (
			                unit === 'FullYear' &&
			                isLeapYear(mom.year()) &&
			                mom.month() === 1 &&
			                mom.date() === 29
			            ) {
			                value = toInt(value);
			                mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](
			                    value,
			                    mom.month(),
			                    daysInMonth(value, mom.month())
			                );
			            } else {
			                mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);
			            }
			        }
			    }

			    // MOMENTS

			    function stringGet(units) {
			        units = normalizeUnits(units);
			        if (isFunction(this[units])) {
			            return this[units]();
			        }
			        return this;
			    }

			    function stringSet(units, value) {
			        if (typeof units === 'object') {
			            units = normalizeObjectUnits(units);
			            var prioritized = getPrioritizedUnits(units),
			                i,
			                prioritizedLen = prioritized.length;
			            for (i = 0; i < prioritizedLen; i++) {
			                this[prioritized[i].unit](units[prioritized[i].unit]);
			            }
			        } else {
			            units = normalizeUnits(units);
			            if (isFunction(this[units])) {
			                return this[units](value);
			            }
			        }
			        return this;
			    }

			    var match1 = /\d/, //       0 - 9
			        match2 = /\d\d/, //      00 - 99
			        match3 = /\d{3}/, //     000 - 999
			        match4 = /\d{4}/, //    0000 - 9999
			        match6 = /[+-]?\d{6}/, // -999999 - 999999
			        match1to2 = /\d\d?/, //       0 - 99
			        match3to4 = /\d\d\d\d?/, //     999 - 9999
			        match5to6 = /\d\d\d\d\d\d?/, //   99999 - 999999
			        match1to3 = /\d{1,3}/, //       0 - 999
			        match1to4 = /\d{1,4}/, //       0 - 9999
			        match1to6 = /[+-]?\d{1,6}/, // -999999 - 999999
			        matchUnsigned = /\d+/, //       0 - inf
			        matchSigned = /[+-]?\d+/, //    -inf - inf
			        matchOffset = /Z|[+-]\d\d:?\d\d/gi, // +00:00 -00:00 +0000 -0000 or Z
			        matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi, // +00 -00 +00:00 -00:00 +0000 -0000 or Z
			        matchTimestamp = /[+-]?\d+(\.\d{1,3})?/, // 123456789 123456789.123
			        // any word (or two) characters or numbers including two/three word month in arabic.
			        // includes scottish gaelic two word and hyphenated months
			        matchWord =
			            /[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i,
			        regexes;

			    regexes = {};

			    function addRegexToken(token, regex, strictRegex) {
			        regexes[token] = isFunction(regex)
			            ? regex
			            : function (isStrict, localeData) {
			                  return isStrict && strictRegex ? strictRegex : regex;
			              };
			    }

			    function getParseRegexForToken(token, config) {
			        if (!hasOwnProp(regexes, token)) {
			            return new RegExp(unescapeFormat(token));
			        }

			        return regexes[token](config._strict, config._locale);
			    }

			    // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript
			    function unescapeFormat(s) {
			        return regexEscape(
			            s
			                .replace('\\', '')
			                .replace(
			                    /\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g,
			                    function (matched, p1, p2, p3, p4) {
			                        return p1 || p2 || p3 || p4;
			                    }
			                )
			        );
			    }

			    function regexEscape(s) {
			        return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
			    }

			    var tokens = {};

			    function addParseToken(token, callback) {
			        var i,
			            func = callback,
			            tokenLen;
			        if (typeof token === 'string') {
			            token = [token];
			        }
			        if (isNumber(callback)) {
			            func = function (input, array) {
			                array[callback] = toInt(input);
			            };
			        }
			        tokenLen = token.length;
			        for (i = 0; i < tokenLen; i++) {
			            tokens[token[i]] = func;
			        }
			    }

			    function addWeekParseToken(token, callback) {
			        addParseToken(token, function (input, array, config, token) {
			            config._w = config._w || {};
			            callback(input, config._w, config, token);
			        });
			    }

			    function addTimeToArrayFromToken(token, input, config) {
			        if (input != null && hasOwnProp(tokens, token)) {
			            tokens[token](input, config._a, config, token);
			        }
			    }

			    var YEAR = 0,
			        MONTH = 1,
			        DATE = 2,
			        HOUR = 3,
			        MINUTE = 4,
			        SECOND = 5,
			        MILLISECOND = 6,
			        WEEK = 7,
			        WEEKDAY = 8;

			    function mod(n, x) {
			        return ((n % x) + x) % x;
			    }

			    var indexOf;

			    if (Array.prototype.indexOf) {
			        indexOf = Array.prototype.indexOf;
			    } else {
			        indexOf = function (o) {
			            // I know
			            var i;
			            for (i = 0; i < this.length; ++i) {
			                if (this[i] === o) {
			                    return i;
			                }
			            }
			            return -1;
			        };
			    }

			    function daysInMonth(year, month) {
			        if (isNaN(year) || isNaN(month)) {
			            return NaN;
			        }
			        var modMonth = mod(month, 12);
			        year += (month - modMonth) / 12;
			        return modMonth === 1
			            ? isLeapYear(year)
			                ? 29
			                : 28
			            : 31 - ((modMonth % 7) % 2);
			    }

			    // FORMATTING

			    addFormatToken('M', ['MM', 2], 'Mo', function () {
			        return this.month() + 1;
			    });

			    addFormatToken('MMM', 0, 0, function (format) {
			        return this.localeData().monthsShort(this, format);
			    });

			    addFormatToken('MMMM', 0, 0, function (format) {
			        return this.localeData().months(this, format);
			    });

			    // ALIASES

			    addUnitAlias('month', 'M');

			    // PRIORITY

			    addUnitPriority('month', 8);

			    // PARSING

			    addRegexToken('M', match1to2);
			    addRegexToken('MM', match1to2, match2);
			    addRegexToken('MMM', function (isStrict, locale) {
			        return locale.monthsShortRegex(isStrict);
			    });
			    addRegexToken('MMMM', function (isStrict, locale) {
			        return locale.monthsRegex(isStrict);
			    });

			    addParseToken(['M', 'MM'], function (input, array) {
			        array[MONTH] = toInt(input) - 1;
			    });

			    addParseToken(['MMM', 'MMMM'], function (input, array, config, token) {
			        var month = config._locale.monthsParse(input, token, config._strict);
			        // if we didn't find a month name, mark the date as invalid.
			        if (month != null) {
			            array[MONTH] = month;
			        } else {
			            getParsingFlags(config).invalidMonth = input;
			        }
			    });

			    // LOCALES

			    var defaultLocaleMonths =
			            'January_February_March_April_May_June_July_August_September_October_November_December'.split(
			                '_'
			            ),
			        defaultLocaleMonthsShort =
			            'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
			        MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/,
			        defaultMonthsShortRegex = matchWord,
			        defaultMonthsRegex = matchWord;

			    function localeMonths(m, format) {
			        if (!m) {
			            return isArray(this._months)
			                ? this._months
			                : this._months['standalone'];
			        }
			        return isArray(this._months)
			            ? this._months[m.month()]
			            : this._months[
			                  (this._months.isFormat || MONTHS_IN_FORMAT).test(format)
			                      ? 'format'
			                      : 'standalone'
			              ][m.month()];
			    }

			    function localeMonthsShort(m, format) {
			        if (!m) {
			            return isArray(this._monthsShort)
			                ? this._monthsShort
			                : this._monthsShort['standalone'];
			        }
			        return isArray(this._monthsShort)
			            ? this._monthsShort[m.month()]
			            : this._monthsShort[
			                  MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'
			              ][m.month()];
			    }

			    function handleStrictParse(monthName, format, strict) {
			        var i,
			            ii,
			            mom,
			            llc = monthName.toLocaleLowerCase();
			        if (!this._monthsParse) {
			            // this is not used
			            this._monthsParse = [];
			            this._longMonthsParse = [];
			            this._shortMonthsParse = [];
			            for (i = 0; i < 12; ++i) {
			                mom = createUTC([2000, i]);
			                this._shortMonthsParse[i] = this.monthsShort(
			                    mom,
			                    ''
			                ).toLocaleLowerCase();
			                this._longMonthsParse[i] = this.months(mom, '').toLocaleLowerCase();
			            }
			        }

			        if (strict) {
			            if (format === 'MMM') {
			                ii = indexOf.call(this._shortMonthsParse, llc);
			                return ii !== -1 ? ii : null;
			            } else {
			                ii = indexOf.call(this._longMonthsParse, llc);
			                return ii !== -1 ? ii : null;
			            }
			        } else {
			            if (format === 'MMM') {
			                ii = indexOf.call(this._shortMonthsParse, llc);
			                if (ii !== -1) {
			                    return ii;
			                }
			                ii = indexOf.call(this._longMonthsParse, llc);
			                return ii !== -1 ? ii : null;
			            } else {
			                ii = indexOf.call(this._longMonthsParse, llc);
			                if (ii !== -1) {
			                    return ii;
			                }
			                ii = indexOf.call(this._shortMonthsParse, llc);
			                return ii !== -1 ? ii : null;
			            }
			        }
			    }

			    function localeMonthsParse(monthName, format, strict) {
			        var i, mom, regex;

			        if (this._monthsParseExact) {
			            return handleStrictParse.call(this, monthName, format, strict);
			        }

			        if (!this._monthsParse) {
			            this._monthsParse = [];
			            this._longMonthsParse = [];
			            this._shortMonthsParse = [];
			        }

			        // TODO: add sorting
			        // Sorting makes sure if one month (or abbr) is a prefix of another
			        // see sorting in computeMonthsParse
			        for (i = 0; i < 12; i++) {
			            // make the regex if we don't have it already
			            mom = createUTC([2000, i]);
			            if (strict && !this._longMonthsParse[i]) {
			                this._longMonthsParse[i] = new RegExp(
			                    '^' + this.months(mom, '').replace('.', '') + '$',
			                    'i'
			                );
			                this._shortMonthsParse[i] = new RegExp(
			                    '^' + this.monthsShort(mom, '').replace('.', '') + '$',
			                    'i'
			                );
			            }
			            if (!strict && !this._monthsParse[i]) {
			                regex =
			                    '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');
			                this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');
			            }
			            // test the regex
			            if (
			                strict &&
			                format === 'MMMM' &&
			                this._longMonthsParse[i].test(monthName)
			            ) {
			                return i;
			            } else if (
			                strict &&
			                format === 'MMM' &&
			                this._shortMonthsParse[i].test(monthName)
			            ) {
			                return i;
			            } else if (!strict && this._monthsParse[i].test(monthName)) {
			                return i;
			            }
			        }
			    }

			    // MOMENTS

			    function setMonth(mom, value) {
			        var dayOfMonth;

			        if (!mom.isValid()) {
			            // No op
			            return mom;
			        }

			        if (typeof value === 'string') {
			            if (/^\d+$/.test(value)) {
			                value = toInt(value);
			            } else {
			                value = mom.localeData().monthsParse(value);
			                // TODO: Another silent failure?
			                if (!isNumber(value)) {
			                    return mom;
			                }
			            }
			        }

			        dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));
			        mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);
			        return mom;
			    }

			    function getSetMonth(value) {
			        if (value != null) {
			            setMonth(this, value);
			            hooks.updateOffset(this, true);
			            return this;
			        } else {
			            return get(this, 'Month');
			        }
			    }

			    function getDaysInMonth() {
			        return daysInMonth(this.year(), this.month());
			    }

			    function monthsShortRegex(isStrict) {
			        if (this._monthsParseExact) {
			            if (!hasOwnProp(this, '_monthsRegex')) {
			                computeMonthsParse.call(this);
			            }
			            if (isStrict) {
			                return this._monthsShortStrictRegex;
			            } else {
			                return this._monthsShortRegex;
			            }
			        } else {
			            if (!hasOwnProp(this, '_monthsShortRegex')) {
			                this._monthsShortRegex = defaultMonthsShortRegex;
			            }
			            return this._monthsShortStrictRegex && isStrict
			                ? this._monthsShortStrictRegex
			                : this._monthsShortRegex;
			        }
			    }

			    function monthsRegex(isStrict) {
			        if (this._monthsParseExact) {
			            if (!hasOwnProp(this, '_monthsRegex')) {
			                computeMonthsParse.call(this);
			            }
			            if (isStrict) {
			                return this._monthsStrictRegex;
			            } else {
			                return this._monthsRegex;
			            }
			        } else {
			            if (!hasOwnProp(this, '_monthsRegex')) {
			                this._monthsRegex = defaultMonthsRegex;
			            }
			            return this._monthsStrictRegex && isStrict
			                ? this._monthsStrictRegex
			                : this._monthsRegex;
			        }
			    }

			    function computeMonthsParse() {
			        function cmpLenRev(a, b) {
			            return b.length - a.length;
			        }

			        var shortPieces = [],
			            longPieces = [],
			            mixedPieces = [],
			            i,
			            mom;
			        for (i = 0; i < 12; i++) {
			            // make the regex if we don't have it already
			            mom = createUTC([2000, i]);
			            shortPieces.push(this.monthsShort(mom, ''));
			            longPieces.push(this.months(mom, ''));
			            mixedPieces.push(this.months(mom, ''));
			            mixedPieces.push(this.monthsShort(mom, ''));
			        }
			        // Sorting makes sure if one month (or abbr) is a prefix of another it
			        // will match the longer piece.
			        shortPieces.sort(cmpLenRev);
			        longPieces.sort(cmpLenRev);
			        mixedPieces.sort(cmpLenRev);
			        for (i = 0; i < 12; i++) {
			            shortPieces[i] = regexEscape(shortPieces[i]);
			            longPieces[i] = regexEscape(longPieces[i]);
			        }
			        for (i = 0; i < 24; i++) {
			            mixedPieces[i] = regexEscape(mixedPieces[i]);
			        }

			        this._monthsRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
			        this._monthsShortRegex = this._monthsRegex;
			        this._monthsStrictRegex = new RegExp(
			            '^(' + longPieces.join('|') + ')',
			            'i'
			        );
			        this._monthsShortStrictRegex = new RegExp(
			            '^(' + shortPieces.join('|') + ')',
			            'i'
			        );
			    }

			    // FORMATTING

			    addFormatToken('Y', 0, 0, function () {
			        var y = this.year();
			        return y <= 9999 ? zeroFill(y, 4) : '+' + y;
			    });

			    addFormatToken(0, ['YY', 2], 0, function () {
			        return this.year() % 100;
			    });

			    addFormatToken(0, ['YYYY', 4], 0, 'year');
			    addFormatToken(0, ['YYYYY', 5], 0, 'year');
			    addFormatToken(0, ['YYYYYY', 6, true], 0, 'year');

			    // ALIASES

			    addUnitAlias('year', 'y');

			    // PRIORITIES

			    addUnitPriority('year', 1);

			    // PARSING

			    addRegexToken('Y', matchSigned);
			    addRegexToken('YY', match1to2, match2);
			    addRegexToken('YYYY', match1to4, match4);
			    addRegexToken('YYYYY', match1to6, match6);
			    addRegexToken('YYYYYY', match1to6, match6);

			    addParseToken(['YYYYY', 'YYYYYY'], YEAR);
			    addParseToken('YYYY', function (input, array) {
			        array[YEAR] =
			            input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);
			    });
			    addParseToken('YY', function (input, array) {
			        array[YEAR] = hooks.parseTwoDigitYear(input);
			    });
			    addParseToken('Y', function (input, array) {
			        array[YEAR] = parseInt(input, 10);
			    });

			    // HELPERS

			    function daysInYear(year) {
			        return isLeapYear(year) ? 366 : 365;
			    }

			    // HOOKS

			    hooks.parseTwoDigitYear = function (input) {
			        return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);
			    };

			    // MOMENTS

			    var getSetYear = makeGetSet('FullYear', true);

			    function getIsLeapYear() {
			        return isLeapYear(this.year());
			    }

			    function createDate(y, m, d, h, M, s, ms) {
			        // can't just apply() to create a date:
			        // https://stackoverflow.com/q/181348
			        var date;
			        // the date constructor remaps years 0-99 to 1900-1999
			        if (y < 100 && y >= 0) {
			            // preserve leap years using a full 400 year cycle, then reset
			            date = new Date(y + 400, m, d, h, M, s, ms);
			            if (isFinite(date.getFullYear())) {
			                date.setFullYear(y);
			            }
			        } else {
			            date = new Date(y, m, d, h, M, s, ms);
			        }

			        return date;
			    }

			    function createUTCDate(y) {
			        var date, args;
			        // the Date.UTC function remaps years 0-99 to 1900-1999
			        if (y < 100 && y >= 0) {
			            args = Array.prototype.slice.call(arguments);
			            // preserve leap years using a full 400 year cycle, then reset
			            args[0] = y + 400;
			            date = new Date(Date.UTC.apply(null, args));
			            if (isFinite(date.getUTCFullYear())) {
			                date.setUTCFullYear(y);
			            }
			        } else {
			            date = new Date(Date.UTC.apply(null, arguments));
			        }

			        return date;
			    }

			    // start-of-first-week - start-of-year
			    function firstWeekOffset(year, dow, doy) {
			        var // first-week day -- which january is always in the first week (4 for iso, 1 for other)
			            fwd = 7 + dow - doy,
			            // first-week day local weekday -- which local weekday is fwd
			            fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;

			        return -fwdlw + fwd - 1;
			    }

			    // https://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday
			    function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
			        var localWeekday = (7 + weekday - dow) % 7,
			            weekOffset = firstWeekOffset(year, dow, doy),
			            dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset,
			            resYear,
			            resDayOfYear;

			        if (dayOfYear <= 0) {
			            resYear = year - 1;
			            resDayOfYear = daysInYear(resYear) + dayOfYear;
			        } else if (dayOfYear > daysInYear(year)) {
			            resYear = year + 1;
			            resDayOfYear = dayOfYear - daysInYear(year);
			        } else {
			            resYear = year;
			            resDayOfYear = dayOfYear;
			        }

			        return {
			            year: resYear,
			            dayOfYear: resDayOfYear,
			        };
			    }

			    function weekOfYear(mom, dow, doy) {
			        var weekOffset = firstWeekOffset(mom.year(), dow, doy),
			            week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1,
			            resWeek,
			            resYear;

			        if (week < 1) {
			            resYear = mom.year() - 1;
			            resWeek = week + weeksInYear(resYear, dow, doy);
			        } else if (week > weeksInYear(mom.year(), dow, doy)) {
			            resWeek = week - weeksInYear(mom.year(), dow, doy);
			            resYear = mom.year() + 1;
			        } else {
			            resYear = mom.year();
			            resWeek = week;
			        }

			        return {
			            week: resWeek,
			            year: resYear,
			        };
			    }

			    function weeksInYear(year, dow, doy) {
			        var weekOffset = firstWeekOffset(year, dow, doy),
			            weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
			        return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;
			    }

			    // FORMATTING

			    addFormatToken('w', ['ww', 2], 'wo', 'week');
			    addFormatToken('W', ['WW', 2], 'Wo', 'isoWeek');

			    // ALIASES

			    addUnitAlias('week', 'w');
			    addUnitAlias('isoWeek', 'W');

			    // PRIORITIES

			    addUnitPriority('week', 5);
			    addUnitPriority('isoWeek', 5);

			    // PARSING

			    addRegexToken('w', match1to2);
			    addRegexToken('ww', match1to2, match2);
			    addRegexToken('W', match1to2);
			    addRegexToken('WW', match1to2, match2);

			    addWeekParseToken(
			        ['w', 'ww', 'W', 'WW'],
			        function (input, week, config, token) {
			            week[token.substr(0, 1)] = toInt(input);
			        }
			    );

			    // HELPERS

			    // LOCALES

			    function localeWeek(mom) {
			        return weekOfYear(mom, this._week.dow, this._week.doy).week;
			    }

			    var defaultLocaleWeek = {
			        dow: 0, // Sunday is the first day of the week.
			        doy: 6, // The week that contains Jan 6th is the first week of the year.
			    };

			    function localeFirstDayOfWeek() {
			        return this._week.dow;
			    }

			    function localeFirstDayOfYear() {
			        return this._week.doy;
			    }

			    // MOMENTS

			    function getSetWeek(input) {
			        var week = this.localeData().week(this);
			        return input == null ? week : this.add((input - week) * 7, 'd');
			    }

			    function getSetISOWeek(input) {
			        var week = weekOfYear(this, 1, 4).week;
			        return input == null ? week : this.add((input - week) * 7, 'd');
			    }

			    // FORMATTING

			    addFormatToken('d', 0, 'do', 'day');

			    addFormatToken('dd', 0, 0, function (format) {
			        return this.localeData().weekdaysMin(this, format);
			    });

			    addFormatToken('ddd', 0, 0, function (format) {
			        return this.localeData().weekdaysShort(this, format);
			    });

			    addFormatToken('dddd', 0, 0, function (format) {
			        return this.localeData().weekdays(this, format);
			    });

			    addFormatToken('e', 0, 0, 'weekday');
			    addFormatToken('E', 0, 0, 'isoWeekday');

			    // ALIASES

			    addUnitAlias('day', 'd');
			    addUnitAlias('weekday', 'e');
			    addUnitAlias('isoWeekday', 'E');

			    // PRIORITY
			    addUnitPriority('day', 11);
			    addUnitPriority('weekday', 11);
			    addUnitPriority('isoWeekday', 11);

			    // PARSING

			    addRegexToken('d', match1to2);
			    addRegexToken('e', match1to2);
			    addRegexToken('E', match1to2);
			    addRegexToken('dd', function (isStrict, locale) {
			        return locale.weekdaysMinRegex(isStrict);
			    });
			    addRegexToken('ddd', function (isStrict, locale) {
			        return locale.weekdaysShortRegex(isStrict);
			    });
			    addRegexToken('dddd', function (isStrict, locale) {
			        return locale.weekdaysRegex(isStrict);
			    });

			    addWeekParseToken(['dd', 'ddd', 'dddd'], function (input, week, config, token) {
			        var weekday = config._locale.weekdaysParse(input, token, config._strict);
			        // if we didn't get a weekday name, mark the date as invalid
			        if (weekday != null) {
			            week.d = weekday;
			        } else {
			            getParsingFlags(config).invalidWeekday = input;
			        }
			    });

			    addWeekParseToken(['d', 'e', 'E'], function (input, week, config, token) {
			        week[token] = toInt(input);
			    });

			    // HELPERS

			    function parseWeekday(input, locale) {
			        if (typeof input !== 'string') {
			            return input;
			        }

			        if (!isNaN(input)) {
			            return parseInt(input, 10);
			        }

			        input = locale.weekdaysParse(input);
			        if (typeof input === 'number') {
			            return input;
			        }

			        return null;
			    }

			    function parseIsoWeekday(input, locale) {
			        if (typeof input === 'string') {
			            return locale.weekdaysParse(input) % 7 || 7;
			        }
			        return isNaN(input) ? null : input;
			    }

			    // LOCALES
			    function shiftWeekdays(ws, n) {
			        return ws.slice(n, 7).concat(ws.slice(0, n));
			    }

			    var defaultLocaleWeekdays =
			            'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
			        defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
			        defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
			        defaultWeekdaysRegex = matchWord,
			        defaultWeekdaysShortRegex = matchWord,
			        defaultWeekdaysMinRegex = matchWord;

			    function localeWeekdays(m, format) {
			        var weekdays = isArray(this._weekdays)
			            ? this._weekdays
			            : this._weekdays[
			                  m && m !== true && this._weekdays.isFormat.test(format)
			                      ? 'format'
			                      : 'standalone'
			              ];
			        return m === true
			            ? shiftWeekdays(weekdays, this._week.dow)
			            : m
			            ? weekdays[m.day()]
			            : weekdays;
			    }

			    function localeWeekdaysShort(m) {
			        return m === true
			            ? shiftWeekdays(this._weekdaysShort, this._week.dow)
			            : m
			            ? this._weekdaysShort[m.day()]
			            : this._weekdaysShort;
			    }

			    function localeWeekdaysMin(m) {
			        return m === true
			            ? shiftWeekdays(this._weekdaysMin, this._week.dow)
			            : m
			            ? this._weekdaysMin[m.day()]
			            : this._weekdaysMin;
			    }

			    function handleStrictParse$1(weekdayName, format, strict) {
			        var i,
			            ii,
			            mom,
			            llc = weekdayName.toLocaleLowerCase();
			        if (!this._weekdaysParse) {
			            this._weekdaysParse = [];
			            this._shortWeekdaysParse = [];
			            this._minWeekdaysParse = [];

			            for (i = 0; i < 7; ++i) {
			                mom = createUTC([2000, 1]).day(i);
			                this._minWeekdaysParse[i] = this.weekdaysMin(
			                    mom,
			                    ''
			                ).toLocaleLowerCase();
			                this._shortWeekdaysParse[i] = this.weekdaysShort(
			                    mom,
			                    ''
			                ).toLocaleLowerCase();
			                this._weekdaysParse[i] = this.weekdays(mom, '').toLocaleLowerCase();
			            }
			        }

			        if (strict) {
			            if (format === 'dddd') {
			                ii = indexOf.call(this._weekdaysParse, llc);
			                return ii !== -1 ? ii : null;
			            } else if (format === 'ddd') {
			                ii = indexOf.call(this._shortWeekdaysParse, llc);
			                return ii !== -1 ? ii : null;
			            } else {
			                ii = indexOf.call(this._minWeekdaysParse, llc);
			                return ii !== -1 ? ii : null;
			            }
			        } else {
			            if (format === 'dddd') {
			                ii = indexOf.call(this._weekdaysParse, llc);
			                if (ii !== -1) {
			                    return ii;
			                }
			                ii = indexOf.call(this._shortWeekdaysParse, llc);
			                if (ii !== -1) {
			                    return ii;
			                }
			                ii = indexOf.call(this._minWeekdaysParse, llc);
			                return ii !== -1 ? ii : null;
			            } else if (format === 'ddd') {
			                ii = indexOf.call(this._shortWeekdaysParse, llc);
			                if (ii !== -1) {
			                    return ii;
			                }
			                ii = indexOf.call(this._weekdaysParse, llc);
			                if (ii !== -1) {
			                    return ii;
			                }
			                ii = indexOf.call(this._minWeekdaysParse, llc);
			                return ii !== -1 ? ii : null;
			            } else {
			                ii = indexOf.call(this._minWeekdaysParse, llc);
			                if (ii !== -1) {
			                    return ii;
			                }
			                ii = indexOf.call(this._weekdaysParse, llc);
			                if (ii !== -1) {
			                    return ii;
			                }
			                ii = indexOf.call(this._shortWeekdaysParse, llc);
			                return ii !== -1 ? ii : null;
			            }
			        }
			    }

			    function localeWeekdaysParse(weekdayName, format, strict) {
			        var i, mom, regex;

			        if (this._weekdaysParseExact) {
			            return handleStrictParse$1.call(this, weekdayName, format, strict);
			        }

			        if (!this._weekdaysParse) {
			            this._weekdaysParse = [];
			            this._minWeekdaysParse = [];
			            this._shortWeekdaysParse = [];
			            this._fullWeekdaysParse = [];
			        }

			        for (i = 0; i < 7; i++) {
			            // make the regex if we don't have it already

			            mom = createUTC([2000, 1]).day(i);
			            if (strict && !this._fullWeekdaysParse[i]) {
			                this._fullWeekdaysParse[i] = new RegExp(
			                    '^' + this.weekdays(mom, '').replace('.', '\\.?') + '$',
			                    'i'
			                );
			                this._shortWeekdaysParse[i] = new RegExp(
			                    '^' + this.weekdaysShort(mom, '').replace('.', '\\.?') + '$',
			                    'i'
			                );
			                this._minWeekdaysParse[i] = new RegExp(
			                    '^' + this.weekdaysMin(mom, '').replace('.', '\\.?') + '$',
			                    'i'
			                );
			            }
			            if (!this._weekdaysParse[i]) {
			                regex =
			                    '^' +
			                    this.weekdays(mom, '') +
			                    '|^' +
			                    this.weekdaysShort(mom, '') +
			                    '|^' +
			                    this.weekdaysMin(mom, '');
			                this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');
			            }
			            // test the regex
			            if (
			                strict &&
			                format === 'dddd' &&
			                this._fullWeekdaysParse[i].test(weekdayName)
			            ) {
			                return i;
			            } else if (
			                strict &&
			                format === 'ddd' &&
			                this._shortWeekdaysParse[i].test(weekdayName)
			            ) {
			                return i;
			            } else if (
			                strict &&
			                format === 'dd' &&
			                this._minWeekdaysParse[i].test(weekdayName)
			            ) {
			                return i;
			            } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {
			                return i;
			            }
			        }
			    }

			    // MOMENTS

			    function getSetDayOfWeek(input) {
			        if (!this.isValid()) {
			            return input != null ? this : NaN;
			        }
			        var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
			        if (input != null) {
			            input = parseWeekday(input, this.localeData());
			            return this.add(input - day, 'd');
			        } else {
			            return day;
			        }
			    }

			    function getSetLocaleDayOfWeek(input) {
			        if (!this.isValid()) {
			            return input != null ? this : NaN;
			        }
			        var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
			        return input == null ? weekday : this.add(input - weekday, 'd');
			    }

			    function getSetISODayOfWeek(input) {
			        if (!this.isValid()) {
			            return input != null ? this : NaN;
			        }

			        // behaves the same as moment#day except
			        // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)
			        // as a setter, sunday should belong to the previous week.

			        if (input != null) {
			            var weekday = parseIsoWeekday(input, this.localeData());
			            return this.day(this.day() % 7 ? weekday : weekday - 7);
			        } else {
			            return this.day() || 7;
			        }
			    }

			    function weekdaysRegex(isStrict) {
			        if (this._weekdaysParseExact) {
			            if (!hasOwnProp(this, '_weekdaysRegex')) {
			                computeWeekdaysParse.call(this);
			            }
			            if (isStrict) {
			                return this._weekdaysStrictRegex;
			            } else {
			                return this._weekdaysRegex;
			            }
			        } else {
			            if (!hasOwnProp(this, '_weekdaysRegex')) {
			                this._weekdaysRegex = defaultWeekdaysRegex;
			            }
			            return this._weekdaysStrictRegex && isStrict
			                ? this._weekdaysStrictRegex
			                : this._weekdaysRegex;
			        }
			    }

			    function weekdaysShortRegex(isStrict) {
			        if (this._weekdaysParseExact) {
			            if (!hasOwnProp(this, '_weekdaysRegex')) {
			                computeWeekdaysParse.call(this);
			            }
			            if (isStrict) {
			                return this._weekdaysShortStrictRegex;
			            } else {
			                return this._weekdaysShortRegex;
			            }
			        } else {
			            if (!hasOwnProp(this, '_weekdaysShortRegex')) {
			                this._weekdaysShortRegex = defaultWeekdaysShortRegex;
			            }
			            return this._weekdaysShortStrictRegex && isStrict
			                ? this._weekdaysShortStrictRegex
			                : this._weekdaysShortRegex;
			        }
			    }

			    function weekdaysMinRegex(isStrict) {
			        if (this._weekdaysParseExact) {
			            if (!hasOwnProp(this, '_weekdaysRegex')) {
			                computeWeekdaysParse.call(this);
			            }
			            if (isStrict) {
			                return this._weekdaysMinStrictRegex;
			            } else {
			                return this._weekdaysMinRegex;
			            }
			        } else {
			            if (!hasOwnProp(this, '_weekdaysMinRegex')) {
			                this._weekdaysMinRegex = defaultWeekdaysMinRegex;
			            }
			            return this._weekdaysMinStrictRegex && isStrict
			                ? this._weekdaysMinStrictRegex
			                : this._weekdaysMinRegex;
			        }
			    }

			    function computeWeekdaysParse() {
			        function cmpLenRev(a, b) {
			            return b.length - a.length;
			        }

			        var minPieces = [],
			            shortPieces = [],
			            longPieces = [],
			            mixedPieces = [],
			            i,
			            mom,
			            minp,
			            shortp,
			            longp;
			        for (i = 0; i < 7; i++) {
			            // make the regex if we don't have it already
			            mom = createUTC([2000, 1]).day(i);
			            minp = regexEscape(this.weekdaysMin(mom, ''));
			            shortp = regexEscape(this.weekdaysShort(mom, ''));
			            longp = regexEscape(this.weekdays(mom, ''));
			            minPieces.push(minp);
			            shortPieces.push(shortp);
			            longPieces.push(longp);
			            mixedPieces.push(minp);
			            mixedPieces.push(shortp);
			            mixedPieces.push(longp);
			        }
			        // Sorting makes sure if one weekday (or abbr) is a prefix of another it
			        // will match the longer piece.
			        minPieces.sort(cmpLenRev);
			        shortPieces.sort(cmpLenRev);
			        longPieces.sort(cmpLenRev);
			        mixedPieces.sort(cmpLenRev);

			        this._weekdaysRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
			        this._weekdaysShortRegex = this._weekdaysRegex;
			        this._weekdaysMinRegex = this._weekdaysRegex;

			        this._weekdaysStrictRegex = new RegExp(
			            '^(' + longPieces.join('|') + ')',
			            'i'
			        );
			        this._weekdaysShortStrictRegex = new RegExp(
			            '^(' + shortPieces.join('|') + ')',
			            'i'
			        );
			        this._weekdaysMinStrictRegex = new RegExp(
			            '^(' + minPieces.join('|') + ')',
			            'i'
			        );
			    }

			    // FORMATTING

			    function hFormat() {
			        return this.hours() % 12 || 12;
			    }

			    function kFormat() {
			        return this.hours() || 24;
			    }

			    addFormatToken('H', ['HH', 2], 0, 'hour');
			    addFormatToken('h', ['hh', 2], 0, hFormat);
			    addFormatToken('k', ['kk', 2], 0, kFormat);

			    addFormatToken('hmm', 0, 0, function () {
			        return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2);
			    });

			    addFormatToken('hmmss', 0, 0, function () {
			        return (
			            '' +
			            hFormat.apply(this) +
			            zeroFill(this.minutes(), 2) +
			            zeroFill(this.seconds(), 2)
			        );
			    });

			    addFormatToken('Hmm', 0, 0, function () {
			        return '' + this.hours() + zeroFill(this.minutes(), 2);
			    });

			    addFormatToken('Hmmss', 0, 0, function () {
			        return (
			            '' +
			            this.hours() +
			            zeroFill(this.minutes(), 2) +
			            zeroFill(this.seconds(), 2)
			        );
			    });

			    function meridiem(token, lowercase) {
			        addFormatToken(token, 0, 0, function () {
			            return this.localeData().meridiem(
			                this.hours(),
			                this.minutes(),
			                lowercase
			            );
			        });
			    }

			    meridiem('a', true);
			    meridiem('A', false);

			    // ALIASES

			    addUnitAlias('hour', 'h');

			    // PRIORITY
			    addUnitPriority('hour', 13);

			    // PARSING

			    function matchMeridiem(isStrict, locale) {
			        return locale._meridiemParse;
			    }

			    addRegexToken('a', matchMeridiem);
			    addRegexToken('A', matchMeridiem);
			    addRegexToken('H', match1to2);
			    addRegexToken('h', match1to2);
			    addRegexToken('k', match1to2);
			    addRegexToken('HH', match1to2, match2);
			    addRegexToken('hh', match1to2, match2);
			    addRegexToken('kk', match1to2, match2);

			    addRegexToken('hmm', match3to4);
			    addRegexToken('hmmss', match5to6);
			    addRegexToken('Hmm', match3to4);
			    addRegexToken('Hmmss', match5to6);

			    addParseToken(['H', 'HH'], HOUR);
			    addParseToken(['k', 'kk'], function (input, array, config) {
			        var kInput = toInt(input);
			        array[HOUR] = kInput === 24 ? 0 : kInput;
			    });
			    addParseToken(['a', 'A'], function (input, array, config) {
			        config._isPm = config._locale.isPM(input);
			        config._meridiem = input;
			    });
			    addParseToken(['h', 'hh'], function (input, array, config) {
			        array[HOUR] = toInt(input);
			        getParsingFlags(config).bigHour = true;
			    });
			    addParseToken('hmm', function (input, array, config) {
			        var pos = input.length - 2;
			        array[HOUR] = toInt(input.substr(0, pos));
			        array[MINUTE] = toInt(input.substr(pos));
			        getParsingFlags(config).bigHour = true;
			    });
			    addParseToken('hmmss', function (input, array, config) {
			        var pos1 = input.length - 4,
			            pos2 = input.length - 2;
			        array[HOUR] = toInt(input.substr(0, pos1));
			        array[MINUTE] = toInt(input.substr(pos1, 2));
			        array[SECOND] = toInt(input.substr(pos2));
			        getParsingFlags(config).bigHour = true;
			    });
			    addParseToken('Hmm', function (input, array, config) {
			        var pos = input.length - 2;
			        array[HOUR] = toInt(input.substr(0, pos));
			        array[MINUTE] = toInt(input.substr(pos));
			    });
			    addParseToken('Hmmss', function (input, array, config) {
			        var pos1 = input.length - 4,
			            pos2 = input.length - 2;
			        array[HOUR] = toInt(input.substr(0, pos1));
			        array[MINUTE] = toInt(input.substr(pos1, 2));
			        array[SECOND] = toInt(input.substr(pos2));
			    });

			    // LOCALES

			    function localeIsPM(input) {
			        // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays
			        // Using charAt should be more compatible.
			        return (input + '').toLowerCase().charAt(0) === 'p';
			    }

			    var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i,
			        // Setting the hour should keep the time, because the user explicitly
			        // specified which hour they want. So trying to maintain the same hour (in
			        // a new timezone) makes sense. Adding/subtracting hours does not follow
			        // this rule.
			        getSetHour = makeGetSet('Hours', true);

			    function localeMeridiem(hours, minutes, isLower) {
			        if (hours > 11) {
			            return isLower ? 'pm' : 'PM';
			        } else {
			            return isLower ? 'am' : 'AM';
			        }
			    }

			    var baseConfig = {
			        calendar: defaultCalendar,
			        longDateFormat: defaultLongDateFormat,
			        invalidDate: defaultInvalidDate,
			        ordinal: defaultOrdinal,
			        dayOfMonthOrdinalParse: defaultDayOfMonthOrdinalParse,
			        relativeTime: defaultRelativeTime,

			        months: defaultLocaleMonths,
			        monthsShort: defaultLocaleMonthsShort,

			        week: defaultLocaleWeek,

			        weekdays: defaultLocaleWeekdays,
			        weekdaysMin: defaultLocaleWeekdaysMin,
			        weekdaysShort: defaultLocaleWeekdaysShort,

			        meridiemParse: defaultLocaleMeridiemParse,
			    };

			    // internal storage for locale config files
			    var locales = {},
			        localeFamilies = {},
			        globalLocale;

			    function commonPrefix(arr1, arr2) {
			        var i,
			            minl = Math.min(arr1.length, arr2.length);
			        for (i = 0; i < minl; i += 1) {
			            if (arr1[i] !== arr2[i]) {
			                return i;
			            }
			        }
			        return minl;
			    }

			    function normalizeLocale(key) {
			        return key ? key.toLowerCase().replace('_', '-') : key;
			    }

			    // pick the locale from the array
			    // try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each
			    // substring from most specific to least, but move to the next array item if it's a more specific variant than the current root
			    function chooseLocale(names) {
			        var i = 0,
			            j,
			            next,
			            locale,
			            split;

			        while (i < names.length) {
			            split = normalizeLocale(names[i]).split('-');
			            j = split.length;
			            next = normalizeLocale(names[i + 1]);
			            next = next ? next.split('-') : null;
			            while (j > 0) {
			                locale = loadLocale(split.slice(0, j).join('-'));
			                if (locale) {
			                    return locale;
			                }
			                if (
			                    next &&
			                    next.length >= j &&
			                    commonPrefix(split, next) >= j - 1
			                ) {
			                    //the next array item is better than a shallower substring of this one
			                    break;
			                }
			                j--;
			            }
			            i++;
			        }
			        return globalLocale;
			    }

			    function isLocaleNameSane(name) {
			        // Prevent names that look like filesystem paths, i.e contain '/' or '\'
			        return name.match('^[^/\\\\]*$') != null;
			    }

			    function loadLocale(name) {
			        var oldLocale = null,
			            aliasedRequire;
			        // TODO: Find a better way to register and load all the locales in Node
			        if (
			            locales[name] === undefined &&
			            'object' !== 'undefined' &&
			            module &&
			            module.exports &&
			            isLocaleNameSane(name)
			        ) {
			            try {
			                oldLocale = globalLocale._abbr;
			                aliasedRequire = commonjsRequire;
			                aliasedRequire('./locale/' + name);
			                getSetGlobalLocale(oldLocale);
			            } catch (e) {
			                // mark as not found to avoid repeating expensive file require call causing high CPU
			                // when trying to find en-US, en_US, en-us for every format call
			                locales[name] = null; // null means not found
			            }
			        }
			        return locales[name];
			    }

			    // This function will load locale and then set the global locale.  If
			    // no arguments are passed in, it will simply return the current global
			    // locale key.
			    function getSetGlobalLocale(key, values) {
			        var data;
			        if (key) {
			            if (isUndefined(values)) {
			                data = getLocale(key);
			            } else {
			                data = defineLocale(key, values);
			            }

			            if (data) {
			                // moment.duration._locale = moment._locale = data;
			                globalLocale = data;
			            } else {
			                if (typeof console !== 'undefined' && console.warn) {
			                    //warn user if arguments are passed but the locale could not be set
			                    console.warn(
			                        'Locale ' + key + ' not found. Did you forget to load it?'
			                    );
			                }
			            }
			        }

			        return globalLocale._abbr;
			    }

			    function defineLocale(name, config) {
			        if (config !== null) {
			            var locale,
			                parentConfig = baseConfig;
			            config.abbr = name;
			            if (locales[name] != null) {
			                deprecateSimple(
			                    'defineLocaleOverride',
			                    'use moment.updateLocale(localeName, config) to change ' +
			                        'an existing locale. moment.defineLocale(localeName, ' +
			                        'config) should only be used for creating a new locale ' +
			                        'See http://momentjs.com/guides/#/warnings/define-locale/ for more info.'
			                );
			                parentConfig = locales[name]._config;
			            } else if (config.parentLocale != null) {
			                if (locales[config.parentLocale] != null) {
			                    parentConfig = locales[config.parentLocale]._config;
			                } else {
			                    locale = loadLocale(config.parentLocale);
			                    if (locale != null) {
			                        parentConfig = locale._config;
			                    } else {
			                        if (!localeFamilies[config.parentLocale]) {
			                            localeFamilies[config.parentLocale] = [];
			                        }
			                        localeFamilies[config.parentLocale].push({
			                            name: name,
			                            config: config,
			                        });
			                        return null;
			                    }
			                }
			            }
			            locales[name] = new Locale(mergeConfigs(parentConfig, config));

			            if (localeFamilies[name]) {
			                localeFamilies[name].forEach(function (x) {
			                    defineLocale(x.name, x.config);
			                });
			            }

			            // backwards compat for now: also set the locale
			            // make sure we set the locale AFTER all child locales have been
			            // created, so we won't end up with the child locale set.
			            getSetGlobalLocale(name);

			            return locales[name];
			        } else {
			            // useful for testing
			            delete locales[name];
			            return null;
			        }
			    }

			    function updateLocale(name, config) {
			        if (config != null) {
			            var locale,
			                tmpLocale,
			                parentConfig = baseConfig;

			            if (locales[name] != null && locales[name].parentLocale != null) {
			                // Update existing child locale in-place to avoid memory-leaks
			                locales[name].set(mergeConfigs(locales[name]._config, config));
			            } else {
			                // MERGE
			                tmpLocale = loadLocale(name);
			                if (tmpLocale != null) {
			                    parentConfig = tmpLocale._config;
			                }
			                config = mergeConfigs(parentConfig, config);
			                if (tmpLocale == null) {
			                    // updateLocale is called for creating a new locale
			                    // Set abbr so it will have a name (getters return
			                    // undefined otherwise).
			                    config.abbr = name;
			                }
			                locale = new Locale(config);
			                locale.parentLocale = locales[name];
			                locales[name] = locale;
			            }

			            // backwards compat for now: also set the locale
			            getSetGlobalLocale(name);
			        } else {
			            // pass null for config to unupdate, useful for tests
			            if (locales[name] != null) {
			                if (locales[name].parentLocale != null) {
			                    locales[name] = locales[name].parentLocale;
			                    if (name === getSetGlobalLocale()) {
			                        getSetGlobalLocale(name);
			                    }
			                } else if (locales[name] != null) {
			                    delete locales[name];
			                }
			            }
			        }
			        return locales[name];
			    }

			    // returns locale data
			    function getLocale(key) {
			        var locale;

			        if (key && key._locale && key._locale._abbr) {
			            key = key._locale._abbr;
			        }

			        if (!key) {
			            return globalLocale;
			        }

			        if (!isArray(key)) {
			            //short-circuit everything else
			            locale = loadLocale(key);
			            if (locale) {
			                return locale;
			            }
			            key = [key];
			        }

			        return chooseLocale(key);
			    }

			    function listLocales() {
			        return keys(locales);
			    }

			    function checkOverflow(m) {
			        var overflow,
			            a = m._a;

			        if (a && getParsingFlags(m).overflow === -2) {
			            overflow =
			                a[MONTH] < 0 || a[MONTH] > 11
			                    ? MONTH
			                    : a[DATE] < 1 || a[DATE] > daysInMonth(a[YEAR], a[MONTH])
			                    ? DATE
			                    : a[HOUR] < 0 ||
			                      a[HOUR] > 24 ||
			                      (a[HOUR] === 24 &&
			                          (a[MINUTE] !== 0 ||
			                              a[SECOND] !== 0 ||
			                              a[MILLISECOND] !== 0))
			                    ? HOUR
			                    : a[MINUTE] < 0 || a[MINUTE] > 59
			                    ? MINUTE
			                    : a[SECOND] < 0 || a[SECOND] > 59
			                    ? SECOND
			                    : a[MILLISECOND] < 0 || a[MILLISECOND] > 999
			                    ? MILLISECOND
			                    : -1;

			            if (
			                getParsingFlags(m)._overflowDayOfYear &&
			                (overflow < YEAR || overflow > DATE)
			            ) {
			                overflow = DATE;
			            }
			            if (getParsingFlags(m)._overflowWeeks && overflow === -1) {
			                overflow = WEEK;
			            }
			            if (getParsingFlags(m)._overflowWeekday && overflow === -1) {
			                overflow = WEEKDAY;
			            }

			            getParsingFlags(m).overflow = overflow;
			        }

			        return m;
			    }

			    // iso 8601 regex
			    // 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)
			    var extendedIsoRegex =
			            /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/,
			        basicIsoRegex =
			            /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d|))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/,
			        tzRegex = /Z|[+-]\d\d(?::?\d\d)?/,
			        isoDates = [
			            ['YYYYYY-MM-DD', /[+-]\d{6}-\d\d-\d\d/],
			            ['YYYY-MM-DD', /\d{4}-\d\d-\d\d/],
			            ['GGGG-[W]WW-E', /\d{4}-W\d\d-\d/],
			            ['GGGG-[W]WW', /\d{4}-W\d\d/, false],
			            ['YYYY-DDD', /\d{4}-\d{3}/],
			            ['YYYY-MM', /\d{4}-\d\d/, false],
			            ['YYYYYYMMDD', /[+-]\d{10}/],
			            ['YYYYMMDD', /\d{8}/],
			            ['GGGG[W]WWE', /\d{4}W\d{3}/],
			            ['GGGG[W]WW', /\d{4}W\d{2}/, false],
			            ['YYYYDDD', /\d{7}/],
			            ['YYYYMM', /\d{6}/, false],
			            ['YYYY', /\d{4}/, false],
			        ],
			        // iso time formats and regexes
			        isoTimes = [
			            ['HH:mm:ss.SSSS', /\d\d:\d\d:\d\d\.\d+/],
			            ['HH:mm:ss,SSSS', /\d\d:\d\d:\d\d,\d+/],
			            ['HH:mm:ss', /\d\d:\d\d:\d\d/],
			            ['HH:mm', /\d\d:\d\d/],
			            ['HHmmss.SSSS', /\d\d\d\d\d\d\.\d+/],
			            ['HHmmss,SSSS', /\d\d\d\d\d\d,\d+/],
			            ['HHmmss', /\d\d\d\d\d\d/],
			            ['HHmm', /\d\d\d\d/],
			            ['HH', /\d\d/],
			        ],
			        aspNetJsonRegex = /^\/?Date\((-?\d+)/i,
			        // RFC 2822 regex: For details see https://tools.ietf.org/html/rfc2822#section-3.3
			        rfc2822 =
			            /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/,
			        obsOffsets = {
			            UT: 0,
			            GMT: 0,
			            EDT: -4 * 60,
			            EST: -5 * 60,
			            CDT: -5 * 60,
			            CST: -6 * 60,
			            MDT: -6 * 60,
			            MST: -7 * 60,
			            PDT: -7 * 60,
			            PST: -8 * 60,
			        };

			    // date from iso format
			    function configFromISO(config) {
			        var i,
			            l,
			            string = config._i,
			            match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string),
			            allowTime,
			            dateFormat,
			            timeFormat,
			            tzFormat,
			            isoDatesLen = isoDates.length,
			            isoTimesLen = isoTimes.length;

			        if (match) {
			            getParsingFlags(config).iso = true;
			            for (i = 0, l = isoDatesLen; i < l; i++) {
			                if (isoDates[i][1].exec(match[1])) {
			                    dateFormat = isoDates[i][0];
			                    allowTime = isoDates[i][2] !== false;
			                    break;
			                }
			            }
			            if (dateFormat == null) {
			                config._isValid = false;
			                return;
			            }
			            if (match[3]) {
			                for (i = 0, l = isoTimesLen; i < l; i++) {
			                    if (isoTimes[i][1].exec(match[3])) {
			                        // match[2] should be 'T' or space
			                        timeFormat = (match[2] || ' ') + isoTimes[i][0];
			                        break;
			                    }
			                }
			                if (timeFormat == null) {
			                    config._isValid = false;
			                    return;
			                }
			            }
			            if (!allowTime && timeFormat != null) {
			                config._isValid = false;
			                return;
			            }
			            if (match[4]) {
			                if (tzRegex.exec(match[4])) {
			                    tzFormat = 'Z';
			                } else {
			                    config._isValid = false;
			                    return;
			                }
			            }
			            config._f = dateFormat + (timeFormat || '') + (tzFormat || '');
			            configFromStringAndFormat(config);
			        } else {
			            config._isValid = false;
			        }
			    }

			    function extractFromRFC2822Strings(
			        yearStr,
			        monthStr,
			        dayStr,
			        hourStr,
			        minuteStr,
			        secondStr
			    ) {
			        var result = [
			            untruncateYear(yearStr),
			            defaultLocaleMonthsShort.indexOf(monthStr),
			            parseInt(dayStr, 10),
			            parseInt(hourStr, 10),
			            parseInt(minuteStr, 10),
			        ];

			        if (secondStr) {
			            result.push(parseInt(secondStr, 10));
			        }

			        return result;
			    }

			    function untruncateYear(yearStr) {
			        var year = parseInt(yearStr, 10);
			        if (year <= 49) {
			            return 2000 + year;
			        } else if (year <= 999) {
			            return 1900 + year;
			        }
			        return year;
			    }

			    function preprocessRFC2822(s) {
			        // Remove comments and folding whitespace and replace multiple-spaces with a single space
			        return s
			            .replace(/\([^()]*\)|[\n\t]/g, ' ')
			            .replace(/(\s\s+)/g, ' ')
			            .replace(/^\s\s*/, '')
			            .replace(/\s\s*$/, '');
			    }

			    function checkWeekday(weekdayStr, parsedInput, config) {
			        if (weekdayStr) {
			            // TODO: Replace the vanilla JS Date object with an independent day-of-week check.
			            var weekdayProvided = defaultLocaleWeekdaysShort.indexOf(weekdayStr),
			                weekdayActual = new Date(
			                    parsedInput[0],
			                    parsedInput[1],
			                    parsedInput[2]
			                ).getDay();
			            if (weekdayProvided !== weekdayActual) {
			                getParsingFlags(config).weekdayMismatch = true;
			                config._isValid = false;
			                return false;
			            }
			        }
			        return true;
			    }

			    function calculateOffset(obsOffset, militaryOffset, numOffset) {
			        if (obsOffset) {
			            return obsOffsets[obsOffset];
			        } else if (militaryOffset) {
			            // the only allowed military tz is Z
			            return 0;
			        } else {
			            var hm = parseInt(numOffset, 10),
			                m = hm % 100,
			                h = (hm - m) / 100;
			            return h * 60 + m;
			        }
			    }

			    // date and time from ref 2822 format
			    function configFromRFC2822(config) {
			        var match = rfc2822.exec(preprocessRFC2822(config._i)),
			            parsedArray;
			        if (match) {
			            parsedArray = extractFromRFC2822Strings(
			                match[4],
			                match[3],
			                match[2],
			                match[5],
			                match[6],
			                match[7]
			            );
			            if (!checkWeekday(match[1], parsedArray, config)) {
			                return;
			            }

			            config._a = parsedArray;
			            config._tzm = calculateOffset(match[8], match[9], match[10]);

			            config._d = createUTCDate.apply(null, config._a);
			            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);

			            getParsingFlags(config).rfc2822 = true;
			        } else {
			            config._isValid = false;
			        }
			    }

			    // date from 1) ASP.NET, 2) ISO, 3) RFC 2822 formats, or 4) optional fallback if parsing isn't strict
			    function configFromString(config) {
			        var matched = aspNetJsonRegex.exec(config._i);
			        if (matched !== null) {
			            config._d = new Date(+matched[1]);
			            return;
			        }

			        configFromISO(config);
			        if (config._isValid === false) {
			            delete config._isValid;
			        } else {
			            return;
			        }

			        configFromRFC2822(config);
			        if (config._isValid === false) {
			            delete config._isValid;
			        } else {
			            return;
			        }

			        if (config._strict) {
			            config._isValid = false;
			        } else {
			            // Final attempt, use Input Fallback
			            hooks.createFromInputFallback(config);
			        }
			    }

			    hooks.createFromInputFallback = deprecate(
			        'value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), ' +
			            'which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are ' +
			            'discouraged. Please refer to http://momentjs.com/guides/#/warnings/js-date/ for more info.',
			        function (config) {
			            config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));
			        }
			    );

			    // Pick the first defined of two or three arguments.
			    function defaults(a, b, c) {
			        if (a != null) {
			            return a;
			        }
			        if (b != null) {
			            return b;
			        }
			        return c;
			    }

			    function currentDateArray(config) {
			        // hooks is actually the exported moment object
			        var nowValue = new Date(hooks.now());
			        if (config._useUTC) {
			            return [
			                nowValue.getUTCFullYear(),
			                nowValue.getUTCMonth(),
			                nowValue.getUTCDate(),
			            ];
			        }
			        return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];
			    }

			    // convert an array to a date.
			    // the array should mirror the parameters below
			    // note: all values past the year are optional and will default to the lowest possible value.
			    // [year, month, day , hour, minute, second, millisecond]
			    function configFromArray(config) {
			        var i,
			            date,
			            input = [],
			            currentDate,
			            expectedWeekday,
			            yearToUse;

			        if (config._d) {
			            return;
			        }

			        currentDate = currentDateArray(config);

			        //compute day of the year from weeks and weekdays
			        if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
			            dayOfYearFromWeekInfo(config);
			        }

			        //if the day of the year is set, figure out what it is
			        if (config._dayOfYear != null) {
			            yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);

			            if (
			                config._dayOfYear > daysInYear(yearToUse) ||
			                config._dayOfYear === 0
			            ) {
			                getParsingFlags(config)._overflowDayOfYear = true;
			            }

			            date = createUTCDate(yearToUse, 0, config._dayOfYear);
			            config._a[MONTH] = date.getUTCMonth();
			            config._a[DATE] = date.getUTCDate();
			        }

			        // Default to current date.
			        // * if no year, month, day of month are given, default to today
			        // * if day of month is given, default month and year
			        // * if month is given, default only year
			        // * if year is given, don't default anything
			        for (i = 0; i < 3 && config._a[i] == null; ++i) {
			            config._a[i] = input[i] = currentDate[i];
			        }

			        // Zero out whatever was not defaulted, including time
			        for (; i < 7; i++) {
			            config._a[i] = input[i] =
			                config._a[i] == null ? (i === 2 ? 1 : 0) : config._a[i];
			        }

			        // Check for 24:00:00.000
			        if (
			            config._a[HOUR] === 24 &&
			            config._a[MINUTE] === 0 &&
			            config._a[SECOND] === 0 &&
			            config._a[MILLISECOND] === 0
			        ) {
			            config._nextDay = true;
			            config._a[HOUR] = 0;
			        }

			        config._d = (config._useUTC ? createUTCDate : createDate).apply(
			            null,
			            input
			        );
			        expectedWeekday = config._useUTC
			            ? config._d.getUTCDay()
			            : config._d.getDay();

			        // Apply timezone offset from input. The actual utcOffset can be changed
			        // with parseZone.
			        if (config._tzm != null) {
			            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
			        }

			        if (config._nextDay) {
			            config._a[HOUR] = 24;
			        }

			        // check for mismatching day of week
			        if (
			            config._w &&
			            typeof config._w.d !== 'undefined' &&
			            config._w.d !== expectedWeekday
			        ) {
			            getParsingFlags(config).weekdayMismatch = true;
			        }
			    }

			    function dayOfYearFromWeekInfo(config) {
			        var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow, curWeek;

			        w = config._w;
			        if (w.GG != null || w.W != null || w.E != null) {
			            dow = 1;
			            doy = 4;

			            // TODO: We need to take the current isoWeekYear, but that depends on
			            // how we interpret now (local, utc, fixed offset). So create
			            // a now version of current config (take local/utc/offset flags, and
			            // create now).
			            weekYear = defaults(
			                w.GG,
			                config._a[YEAR],
			                weekOfYear(createLocal(), 1, 4).year
			            );
			            week = defaults(w.W, 1);
			            weekday = defaults(w.E, 1);
			            if (weekday < 1 || weekday > 7) {
			                weekdayOverflow = true;
			            }
			        } else {
			            dow = config._locale._week.dow;
			            doy = config._locale._week.doy;

			            curWeek = weekOfYear(createLocal(), dow, doy);

			            weekYear = defaults(w.gg, config._a[YEAR], curWeek.year);

			            // Default to current week.
			            week = defaults(w.w, curWeek.week);

			            if (w.d != null) {
			                // weekday -- low day numbers are considered next week
			                weekday = w.d;
			                if (weekday < 0 || weekday > 6) {
			                    weekdayOverflow = true;
			                }
			            } else if (w.e != null) {
			                // local weekday -- counting starts from beginning of week
			                weekday = w.e + dow;
			                if (w.e < 0 || w.e > 6) {
			                    weekdayOverflow = true;
			                }
			            } else {
			                // default to beginning of week
			                weekday = dow;
			            }
			        }
			        if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {
			            getParsingFlags(config)._overflowWeeks = true;
			        } else if (weekdayOverflow != null) {
			            getParsingFlags(config)._overflowWeekday = true;
			        } else {
			            temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
			            config._a[YEAR] = temp.year;
			            config._dayOfYear = temp.dayOfYear;
			        }
			    }

			    // constant that refers to the ISO standard
			    hooks.ISO_8601 = function () {};

			    // constant that refers to the RFC 2822 form
			    hooks.RFC_2822 = function () {};

			    // date from string and format string
			    function configFromStringAndFormat(config) {
			        // TODO: Move this to another part of the creation flow to prevent circular deps
			        if (config._f === hooks.ISO_8601) {
			            configFromISO(config);
			            return;
			        }
			        if (config._f === hooks.RFC_2822) {
			            configFromRFC2822(config);
			            return;
			        }
			        config._a = [];
			        getParsingFlags(config).empty = true;

			        // This array is used to make a Date, either with `new Date` or `Date.UTC`
			        var string = '' + config._i,
			            i,
			            parsedInput,
			            tokens,
			            token,
			            skipped,
			            stringLength = string.length,
			            totalParsedInputLength = 0,
			            era,
			            tokenLen;

			        tokens =
			            expandFormat(config._f, config._locale).match(formattingTokens) || [];
			        tokenLen = tokens.length;
			        for (i = 0; i < tokenLen; i++) {
			            token = tokens[i];
			            parsedInput = (string.match(getParseRegexForToken(token, config)) ||
			                [])[0];
			            if (parsedInput) {
			                skipped = string.substr(0, string.indexOf(parsedInput));
			                if (skipped.length > 0) {
			                    getParsingFlags(config).unusedInput.push(skipped);
			                }
			                string = string.slice(
			                    string.indexOf(parsedInput) + parsedInput.length
			                );
			                totalParsedInputLength += parsedInput.length;
			            }
			            // don't parse if it's not a known token
			            if (formatTokenFunctions[token]) {
			                if (parsedInput) {
			                    getParsingFlags(config).empty = false;
			                } else {
			                    getParsingFlags(config).unusedTokens.push(token);
			                }
			                addTimeToArrayFromToken(token, parsedInput, config);
			            } else if (config._strict && !parsedInput) {
			                getParsingFlags(config).unusedTokens.push(token);
			            }
			        }

			        // add remaining unparsed input length to the string
			        getParsingFlags(config).charsLeftOver =
			            stringLength - totalParsedInputLength;
			        if (string.length > 0) {
			            getParsingFlags(config).unusedInput.push(string);
			        }

			        // clear _12h flag if hour is <= 12
			        if (
			            config._a[HOUR] <= 12 &&
			            getParsingFlags(config).bigHour === true &&
			            config._a[HOUR] > 0
			        ) {
			            getParsingFlags(config).bigHour = undefined;
			        }

			        getParsingFlags(config).parsedDateParts = config._a.slice(0);
			        getParsingFlags(config).meridiem = config._meridiem;
			        // handle meridiem
			        config._a[HOUR] = meridiemFixWrap(
			            config._locale,
			            config._a[HOUR],
			            config._meridiem
			        );

			        // handle era
			        era = getParsingFlags(config).era;
			        if (era !== null) {
			            config._a[YEAR] = config._locale.erasConvertYear(era, config._a[YEAR]);
			        }

			        configFromArray(config);
			        checkOverflow(config);
			    }

			    function meridiemFixWrap(locale, hour, meridiem) {
			        var isPm;

			        if (meridiem == null) {
			            // nothing to do
			            return hour;
			        }
			        if (locale.meridiemHour != null) {
			            return locale.meridiemHour(hour, meridiem);
			        } else if (locale.isPM != null) {
			            // Fallback
			            isPm = locale.isPM(meridiem);
			            if (isPm && hour < 12) {
			                hour += 12;
			            }
			            if (!isPm && hour === 12) {
			                hour = 0;
			            }
			            return hour;
			        } else {
			            // this is not supposed to happen
			            return hour;
			        }
			    }

			    // date from string and array of format strings
			    function configFromStringAndArray(config) {
			        var tempConfig,
			            bestMoment,
			            scoreToBeat,
			            i,
			            currentScore,
			            validFormatFound,
			            bestFormatIsValid = false,
			            configfLen = config._f.length;

			        if (configfLen === 0) {
			            getParsingFlags(config).invalidFormat = true;
			            config._d = new Date(NaN);
			            return;
			        }

			        for (i = 0; i < configfLen; i++) {
			            currentScore = 0;
			            validFormatFound = false;
			            tempConfig = copyConfig({}, config);
			            if (config._useUTC != null) {
			                tempConfig._useUTC = config._useUTC;
			            }
			            tempConfig._f = config._f[i];
			            configFromStringAndFormat(tempConfig);

			            if (isValid(tempConfig)) {
			                validFormatFound = true;
			            }

			            // if there is any input that was not parsed add a penalty for that format
			            currentScore += getParsingFlags(tempConfig).charsLeftOver;

			            //or tokens
			            currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;

			            getParsingFlags(tempConfig).score = currentScore;

			            if (!bestFormatIsValid) {
			                if (
			                    scoreToBeat == null ||
			                    currentScore < scoreToBeat ||
			                    validFormatFound
			                ) {
			                    scoreToBeat = currentScore;
			                    bestMoment = tempConfig;
			                    if (validFormatFound) {
			                        bestFormatIsValid = true;
			                    }
			                }
			            } else {
			                if (currentScore < scoreToBeat) {
			                    scoreToBeat = currentScore;
			                    bestMoment = tempConfig;
			                }
			            }
			        }

			        extend(config, bestMoment || tempConfig);
			    }

			    function configFromObject(config) {
			        if (config._d) {
			            return;
			        }

			        var i = normalizeObjectUnits(config._i),
			            dayOrDate = i.day === undefined ? i.date : i.day;
			        config._a = map(
			            [i.year, i.month, dayOrDate, i.hour, i.minute, i.second, i.millisecond],
			            function (obj) {
			                return obj && parseInt(obj, 10);
			            }
			        );

			        configFromArray(config);
			    }

			    function createFromConfig(config) {
			        var res = new Moment(checkOverflow(prepareConfig(config)));
			        if (res._nextDay) {
			            // Adding is smart enough around DST
			            res.add(1, 'd');
			            res._nextDay = undefined;
			        }

			        return res;
			    }

			    function prepareConfig(config) {
			        var input = config._i,
			            format = config._f;

			        config._locale = config._locale || getLocale(config._l);

			        if (input === null || (format === undefined && input === '')) {
			            return createInvalid({ nullInput: true });
			        }

			        if (typeof input === 'string') {
			            config._i = input = config._locale.preparse(input);
			        }

			        if (isMoment(input)) {
			            return new Moment(checkOverflow(input));
			        } else if (isDate(input)) {
			            config._d = input;
			        } else if (isArray(format)) {
			            configFromStringAndArray(config);
			        } else if (format) {
			            configFromStringAndFormat(config);
			        } else {
			            configFromInput(config);
			        }

			        if (!isValid(config)) {
			            config._d = null;
			        }

			        return config;
			    }

			    function configFromInput(config) {
			        var input = config._i;
			        if (isUndefined(input)) {
			            config._d = new Date(hooks.now());
			        } else if (isDate(input)) {
			            config._d = new Date(input.valueOf());
			        } else if (typeof input === 'string') {
			            configFromString(config);
			        } else if (isArray(input)) {
			            config._a = map(input.slice(0), function (obj) {
			                return parseInt(obj, 10);
			            });
			            configFromArray(config);
			        } else if (isObject(input)) {
			            configFromObject(config);
			        } else if (isNumber(input)) {
			            // from milliseconds
			            config._d = new Date(input);
			        } else {
			            hooks.createFromInputFallback(config);
			        }
			    }

			    function createLocalOrUTC(input, format, locale, strict, isUTC) {
			        var c = {};

			        if (format === true || format === false) {
			            strict = format;
			            format = undefined;
			        }

			        if (locale === true || locale === false) {
			            strict = locale;
			            locale = undefined;
			        }

			        if (
			            (isObject(input) && isObjectEmpty(input)) ||
			            (isArray(input) && input.length === 0)
			        ) {
			            input = undefined;
			        }
			        // object construction must be done this way.
			        // https://github.com/moment/moment/issues/1423
			        c._isAMomentObject = true;
			        c._useUTC = c._isUTC = isUTC;
			        c._l = locale;
			        c._i = input;
			        c._f = format;
			        c._strict = strict;

			        return createFromConfig(c);
			    }

			    function createLocal(input, format, locale, strict) {
			        return createLocalOrUTC(input, format, locale, strict, false);
			    }

			    var prototypeMin = deprecate(
			            'moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/',
			            function () {
			                var other = createLocal.apply(null, arguments);
			                if (this.isValid() && other.isValid()) {
			                    return other < this ? this : other;
			                } else {
			                    return createInvalid();
			                }
			            }
			        ),
			        prototypeMax = deprecate(
			            'moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/',
			            function () {
			                var other = createLocal.apply(null, arguments);
			                if (this.isValid() && other.isValid()) {
			                    return other > this ? this : other;
			                } else {
			                    return createInvalid();
			                }
			            }
			        );

			    // Pick a moment m from moments so that m[fn](other) is true for all
			    // other. This relies on the function fn to be transitive.
			    //
			    // moments should either be an array of moment objects or an array, whose
			    // first element is an array of moment objects.
			    function pickBy(fn, moments) {
			        var res, i;
			        if (moments.length === 1 && isArray(moments[0])) {
			            moments = moments[0];
			        }
			        if (!moments.length) {
			            return createLocal();
			        }
			        res = moments[0];
			        for (i = 1; i < moments.length; ++i) {
			            if (!moments[i].isValid() || moments[i][fn](res)) {
			                res = moments[i];
			            }
			        }
			        return res;
			    }

			    // TODO: Use [].sort instead?
			    function min() {
			        var args = [].slice.call(arguments, 0);

			        return pickBy('isBefore', args);
			    }

			    function max() {
			        var args = [].slice.call(arguments, 0);

			        return pickBy('isAfter', args);
			    }

			    var now = function () {
			        return Date.now ? Date.now() : +new Date();
			    };

			    var ordering = [
			        'year',
			        'quarter',
			        'month',
			        'week',
			        'day',
			        'hour',
			        'minute',
			        'second',
			        'millisecond',
			    ];

			    function isDurationValid(m) {
			        var key,
			            unitHasDecimal = false,
			            i,
			            orderLen = ordering.length;
			        for (key in m) {
			            if (
			                hasOwnProp(m, key) &&
			                !(
			                    indexOf.call(ordering, key) !== -1 &&
			                    (m[key] == null || !isNaN(m[key]))
			                )
			            ) {
			                return false;
			            }
			        }

			        for (i = 0; i < orderLen; ++i) {
			            if (m[ordering[i]]) {
			                if (unitHasDecimal) {
			                    return false; // only allow non-integers for smallest unit
			                }
			                if (parseFloat(m[ordering[i]]) !== toInt(m[ordering[i]])) {
			                    unitHasDecimal = true;
			                }
			            }
			        }

			        return true;
			    }

			    function isValid$1() {
			        return this._isValid;
			    }

			    function createInvalid$1() {
			        return createDuration(NaN);
			    }

			    function Duration(duration) {
			        var normalizedInput = normalizeObjectUnits(duration),
			            years = normalizedInput.year || 0,
			            quarters = normalizedInput.quarter || 0,
			            months = normalizedInput.month || 0,
			            weeks = normalizedInput.week || normalizedInput.isoWeek || 0,
			            days = normalizedInput.day || 0,
			            hours = normalizedInput.hour || 0,
			            minutes = normalizedInput.minute || 0,
			            seconds = normalizedInput.second || 0,
			            milliseconds = normalizedInput.millisecond || 0;

			        this._isValid = isDurationValid(normalizedInput);

			        // representation for dateAddRemove
			        this._milliseconds =
			            +milliseconds +
			            seconds * 1e3 + // 1000
			            minutes * 6e4 + // 1000 * 60
			            hours * 1000 * 60 * 60; //using 1000 * 60 * 60 instead of 36e5 to avoid floating point rounding errors https://github.com/moment/moment/issues/2978
			        // Because of dateAddRemove treats 24 hours as different from a
			        // day when working around DST, we need to store them separately
			        this._days = +days + weeks * 7;
			        // It is impossible to translate months into days without knowing
			        // which months you are are talking about, so we have to store
			        // it separately.
			        this._months = +months + quarters * 3 + years * 12;

			        this._data = {};

			        this._locale = getLocale();

			        this._bubble();
			    }

			    function isDuration(obj) {
			        return obj instanceof Duration;
			    }

			    function absRound(number) {
			        if (number < 0) {
			            return Math.round(-1 * number) * -1;
			        } else {
			            return Math.round(number);
			        }
			    }

			    // compare two arrays, return the number of differences
			    function compareArrays(array1, array2, dontConvert) {
			        var len = Math.min(array1.length, array2.length),
			            lengthDiff = Math.abs(array1.length - array2.length),
			            diffs = 0,
			            i;
			        for (i = 0; i < len; i++) {
			            if (
			                (dontConvert && array1[i] !== array2[i]) ||
			                (!dontConvert && toInt(array1[i]) !== toInt(array2[i]))
			            ) {
			                diffs++;
			            }
			        }
			        return diffs + lengthDiff;
			    }

			    // FORMATTING

			    function offset(token, separator) {
			        addFormatToken(token, 0, 0, function () {
			            var offset = this.utcOffset(),
			                sign = '+';
			            if (offset < 0) {
			                offset = -offset;
			                sign = '-';
			            }
			            return (
			                sign +
			                zeroFill(~~(offset / 60), 2) +
			                separator +
			                zeroFill(~~offset % 60, 2)
			            );
			        });
			    }

			    offset('Z', ':');
			    offset('ZZ', '');

			    // PARSING

			    addRegexToken('Z', matchShortOffset);
			    addRegexToken('ZZ', matchShortOffset);
			    addParseToken(['Z', 'ZZ'], function (input, array, config) {
			        config._useUTC = true;
			        config._tzm = offsetFromString(matchShortOffset, input);
			    });

			    // HELPERS

			    // timezone chunker
			    // '+10:00' > ['10',  '00']
			    // '-1530'  > ['-15', '30']
			    var chunkOffset = /([\+\-]|\d\d)/gi;

			    function offsetFromString(matcher, string) {
			        var matches = (string || '').match(matcher),
			            chunk,
			            parts,
			            minutes;

			        if (matches === null) {
			            return null;
			        }

			        chunk = matches[matches.length - 1] || [];
			        parts = (chunk + '').match(chunkOffset) || ['-', 0, 0];
			        minutes = +(parts[1] * 60) + toInt(parts[2]);

			        return minutes === 0 ? 0 : parts[0] === '+' ? minutes : -minutes;
			    }

			    // Return a moment from input, that is local/utc/zone equivalent to model.
			    function cloneWithOffset(input, model) {
			        var res, diff;
			        if (model._isUTC) {
			            res = model.clone();
			            diff =
			                (isMoment(input) || isDate(input)
			                    ? input.valueOf()
			                    : createLocal(input).valueOf()) - res.valueOf();
			            // Use low-level api, because this fn is low-level api.
			            res._d.setTime(res._d.valueOf() + diff);
			            hooks.updateOffset(res, false);
			            return res;
			        } else {
			            return createLocal(input).local();
			        }
			    }

			    function getDateOffset(m) {
			        // On Firefox.24 Date#getTimezoneOffset returns a floating point.
			        // https://github.com/moment/moment/pull/1871
			        return -Math.round(m._d.getTimezoneOffset());
			    }

			    // HOOKS

			    // This function will be called whenever a moment is mutated.
			    // It is intended to keep the offset in sync with the timezone.
			    hooks.updateOffset = function () {};

			    // MOMENTS

			    // keepLocalTime = true means only change the timezone, without
			    // affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->
			    // 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset
			    // +0200, so we adjust the time as needed, to be valid.
			    //
			    // Keeping the time actually adds/subtracts (one hour)
			    // from the actual represented time. That is why we call updateOffset
			    // a second time. In case it wants us to change the offset again
			    // _changeInProgress == true case, then we have to adjust, because
			    // there is no such time in the given timezone.
			    function getSetOffset(input, keepLocalTime, keepMinutes) {
			        var offset = this._offset || 0,
			            localAdjust;
			        if (!this.isValid()) {
			            return input != null ? this : NaN;
			        }
			        if (input != null) {
			            if (typeof input === 'string') {
			                input = offsetFromString(matchShortOffset, input);
			                if (input === null) {
			                    return this;
			                }
			            } else if (Math.abs(input) < 16 && !keepMinutes) {
			                input = input * 60;
			            }
			            if (!this._isUTC && keepLocalTime) {
			                localAdjust = getDateOffset(this);
			            }
			            this._offset = input;
			            this._isUTC = true;
			            if (localAdjust != null) {
			                this.add(localAdjust, 'm');
			            }
			            if (offset !== input) {
			                if (!keepLocalTime || this._changeInProgress) {
			                    addSubtract(
			                        this,
			                        createDuration(input - offset, 'm'),
			                        1,
			                        false
			                    );
			                } else if (!this._changeInProgress) {
			                    this._changeInProgress = true;
			                    hooks.updateOffset(this, true);
			                    this._changeInProgress = null;
			                }
			            }
			            return this;
			        } else {
			            return this._isUTC ? offset : getDateOffset(this);
			        }
			    }

			    function getSetZone(input, keepLocalTime) {
			        if (input != null) {
			            if (typeof input !== 'string') {
			                input = -input;
			            }

			            this.utcOffset(input, keepLocalTime);

			            return this;
			        } else {
			            return -this.utcOffset();
			        }
			    }

			    function setOffsetToUTC(keepLocalTime) {
			        return this.utcOffset(0, keepLocalTime);
			    }

			    function setOffsetToLocal(keepLocalTime) {
			        if (this._isUTC) {
			            this.utcOffset(0, keepLocalTime);
			            this._isUTC = false;

			            if (keepLocalTime) {
			                this.subtract(getDateOffset(this), 'm');
			            }
			        }
			        return this;
			    }

			    function setOffsetToParsedOffset() {
			        if (this._tzm != null) {
			            this.utcOffset(this._tzm, false, true);
			        } else if (typeof this._i === 'string') {
			            var tZone = offsetFromString(matchOffset, this._i);
			            if (tZone != null) {
			                this.utcOffset(tZone);
			            } else {
			                this.utcOffset(0, true);
			            }
			        }
			        return this;
			    }

			    function hasAlignedHourOffset(input) {
			        if (!this.isValid()) {
			            return false;
			        }
			        input = input ? createLocal(input).utcOffset() : 0;

			        return (this.utcOffset() - input) % 60 === 0;
			    }

			    function isDaylightSavingTime() {
			        return (
			            this.utcOffset() > this.clone().month(0).utcOffset() ||
			            this.utcOffset() > this.clone().month(5).utcOffset()
			        );
			    }

			    function isDaylightSavingTimeShifted() {
			        if (!isUndefined(this._isDSTShifted)) {
			            return this._isDSTShifted;
			        }

			        var c = {},
			            other;

			        copyConfig(c, this);
			        c = prepareConfig(c);

			        if (c._a) {
			            other = c._isUTC ? createUTC(c._a) : createLocal(c._a);
			            this._isDSTShifted =
			                this.isValid() && compareArrays(c._a, other.toArray()) > 0;
			        } else {
			            this._isDSTShifted = false;
			        }

			        return this._isDSTShifted;
			    }

			    function isLocal() {
			        return this.isValid() ? !this._isUTC : false;
			    }

			    function isUtcOffset() {
			        return this.isValid() ? this._isUTC : false;
			    }

			    function isUtc() {
			        return this.isValid() ? this._isUTC && this._offset === 0 : false;
			    }

			    // ASP.NET json date format regex
			    var aspNetRegex = /^(-|\+)?(?:(\d*)[. ])?(\d+):(\d+)(?::(\d+)(\.\d*)?)?$/,
			        // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html
			        // somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere
			        // and further modified to allow for strings containing both week and day
			        isoRegex =
			            /^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;

			    function createDuration(input, key) {
			        var duration = input,
			            // matching against regexp is expensive, do it on demand
			            match = null,
			            sign,
			            ret,
			            diffRes;

			        if (isDuration(input)) {
			            duration = {
			                ms: input._milliseconds,
			                d: input._days,
			                M: input._months,
			            };
			        } else if (isNumber(input) || !isNaN(+input)) {
			            duration = {};
			            if (key) {
			                duration[key] = +input;
			            } else {
			                duration.milliseconds = +input;
			            }
			        } else if ((match = aspNetRegex.exec(input))) {
			            sign = match[1] === '-' ? -1 : 1;
			            duration = {
			                y: 0,
			                d: toInt(match[DATE]) * sign,
			                h: toInt(match[HOUR]) * sign,
			                m: toInt(match[MINUTE]) * sign,
			                s: toInt(match[SECOND]) * sign,
			                ms: toInt(absRound(match[MILLISECOND] * 1000)) * sign, // the millisecond decimal point is included in the match
			            };
			        } else if ((match = isoRegex.exec(input))) {
			            sign = match[1] === '-' ? -1 : 1;
			            duration = {
			                y: parseIso(match[2], sign),
			                M: parseIso(match[3], sign),
			                w: parseIso(match[4], sign),
			                d: parseIso(match[5], sign),
			                h: parseIso(match[6], sign),
			                m: parseIso(match[7], sign),
			                s: parseIso(match[8], sign),
			            };
			        } else if (duration == null) {
			            // checks for null or undefined
			            duration = {};
			        } else if (
			            typeof duration === 'object' &&
			            ('from' in duration || 'to' in duration)
			        ) {
			            diffRes = momentsDifference(
			                createLocal(duration.from),
			                createLocal(duration.to)
			            );

			            duration = {};
			            duration.ms = diffRes.milliseconds;
			            duration.M = diffRes.months;
			        }

			        ret = new Duration(duration);

			        if (isDuration(input) && hasOwnProp(input, '_locale')) {
			            ret._locale = input._locale;
			        }

			        if (isDuration(input) && hasOwnProp(input, '_isValid')) {
			            ret._isValid = input._isValid;
			        }

			        return ret;
			    }

			    createDuration.fn = Duration.prototype;
			    createDuration.invalid = createInvalid$1;

			    function parseIso(inp, sign) {
			        // We'd normally use ~~inp for this, but unfortunately it also
			        // converts floats to ints.
			        // inp may be undefined, so careful calling replace on it.
			        var res = inp && parseFloat(inp.replace(',', '.'));
			        // apply sign while we're at it
			        return (isNaN(res) ? 0 : res) * sign;
			    }

			    function positiveMomentsDifference(base, other) {
			        var res = {};

			        res.months =
			            other.month() - base.month() + (other.year() - base.year()) * 12;
			        if (base.clone().add(res.months, 'M').isAfter(other)) {
			            --res.months;
			        }

			        res.milliseconds = +other - +base.clone().add(res.months, 'M');

			        return res;
			    }

			    function momentsDifference(base, other) {
			        var res;
			        if (!(base.isValid() && other.isValid())) {
			            return { milliseconds: 0, months: 0 };
			        }

			        other = cloneWithOffset(other, base);
			        if (base.isBefore(other)) {
			            res = positiveMomentsDifference(base, other);
			        } else {
			            res = positiveMomentsDifference(other, base);
			            res.milliseconds = -res.milliseconds;
			            res.months = -res.months;
			        }

			        return res;
			    }

			    // TODO: remove 'name' arg after deprecation is removed
			    function createAdder(direction, name) {
			        return function (val, period) {
			            var dur, tmp;
			            //invert the arguments, but complain about it
			            if (period !== null && !isNaN(+period)) {
			                deprecateSimple(
			                    name,
			                    'moment().' +
			                        name +
			                        '(period, number) is deprecated. Please use moment().' +
			                        name +
			                        '(number, period). ' +
			                        'See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.'
			                );
			                tmp = val;
			                val = period;
			                period = tmp;
			            }

			            dur = createDuration(val, period);
			            addSubtract(this, dur, direction);
			            return this;
			        };
			    }

			    function addSubtract(mom, duration, isAdding, updateOffset) {
			        var milliseconds = duration._milliseconds,
			            days = absRound(duration._days),
			            months = absRound(duration._months);

			        if (!mom.isValid()) {
			            // No op
			            return;
			        }

			        updateOffset = updateOffset == null ? true : updateOffset;

			        if (months) {
			            setMonth(mom, get(mom, 'Month') + months * isAdding);
			        }
			        if (days) {
			            set$1(mom, 'Date', get(mom, 'Date') + days * isAdding);
			        }
			        if (milliseconds) {
			            mom._d.setTime(mom._d.valueOf() + milliseconds * isAdding);
			        }
			        if (updateOffset) {
			            hooks.updateOffset(mom, days || months);
			        }
			    }

			    var add = createAdder(1, 'add'),
			        subtract = createAdder(-1, 'subtract');

			    function isString(input) {
			        return typeof input === 'string' || input instanceof String;
			    }

			    // type MomentInput = Moment | Date | string | number | (number | string)[] | MomentInputObject | void; // null | undefined
			    function isMomentInput(input) {
			        return (
			            isMoment(input) ||
			            isDate(input) ||
			            isString(input) ||
			            isNumber(input) ||
			            isNumberOrStringArray(input) ||
			            isMomentInputObject(input) ||
			            input === null ||
			            input === undefined
			        );
			    }

			    function isMomentInputObject(input) {
			        var objectTest = isObject(input) && !isObjectEmpty(input),
			            propertyTest = false,
			            properties = [
			                'years',
			                'year',
			                'y',
			                'months',
			                'month',
			                'M',
			                'days',
			                'day',
			                'd',
			                'dates',
			                'date',
			                'D',
			                'hours',
			                'hour',
			                'h',
			                'minutes',
			                'minute',
			                'm',
			                'seconds',
			                'second',
			                's',
			                'milliseconds',
			                'millisecond',
			                'ms',
			            ],
			            i,
			            property,
			            propertyLen = properties.length;

			        for (i = 0; i < propertyLen; i += 1) {
			            property = properties[i];
			            propertyTest = propertyTest || hasOwnProp(input, property);
			        }

			        return objectTest && propertyTest;
			    }

			    function isNumberOrStringArray(input) {
			        var arrayTest = isArray(input),
			            dataTypeTest = false;
			        if (arrayTest) {
			            dataTypeTest =
			                input.filter(function (item) {
			                    return !isNumber(item) && isString(input);
			                }).length === 0;
			        }
			        return arrayTest && dataTypeTest;
			    }

			    function isCalendarSpec(input) {
			        var objectTest = isObject(input) && !isObjectEmpty(input),
			            propertyTest = false,
			            properties = [
			                'sameDay',
			                'nextDay',
			                'lastDay',
			                'nextWeek',
			                'lastWeek',
			                'sameElse',
			            ],
			            i,
			            property;

			        for (i = 0; i < properties.length; i += 1) {
			            property = properties[i];
			            propertyTest = propertyTest || hasOwnProp(input, property);
			        }

			        return objectTest && propertyTest;
			    }

			    function getCalendarFormat(myMoment, now) {
			        var diff = myMoment.diff(now, 'days', true);
			        return diff < -6
			            ? 'sameElse'
			            : diff < -1
			            ? 'lastWeek'
			            : diff < 0
			            ? 'lastDay'
			            : diff < 1
			            ? 'sameDay'
			            : diff < 2
			            ? 'nextDay'
			            : diff < 7
			            ? 'nextWeek'
			            : 'sameElse';
			    }

			    function calendar$1(time, formats) {
			        // Support for single parameter, formats only overload to the calendar function
			        if (arguments.length === 1) {
			            if (!arguments[0]) {
			                time = undefined;
			                formats = undefined;
			            } else if (isMomentInput(arguments[0])) {
			                time = arguments[0];
			                formats = undefined;
			            } else if (isCalendarSpec(arguments[0])) {
			                formats = arguments[0];
			                time = undefined;
			            }
			        }
			        // We want to compare the start of today, vs this.
			        // Getting start-of-today depends on whether we're local/utc/offset or not.
			        var now = time || createLocal(),
			            sod = cloneWithOffset(now, this).startOf('day'),
			            format = hooks.calendarFormat(this, sod) || 'sameElse',
			            output =
			                formats &&
			                (isFunction(formats[format])
			                    ? formats[format].call(this, now)
			                    : formats[format]);

			        return this.format(
			            output || this.localeData().calendar(format, this, createLocal(now))
			        );
			    }

			    function clone() {
			        return new Moment(this);
			    }

			    function isAfter(input, units) {
			        var localInput = isMoment(input) ? input : createLocal(input);
			        if (!(this.isValid() && localInput.isValid())) {
			            return false;
			        }
			        units = normalizeUnits(units) || 'millisecond';
			        if (units === 'millisecond') {
			            return this.valueOf() > localInput.valueOf();
			        } else {
			            return localInput.valueOf() < this.clone().startOf(units).valueOf();
			        }
			    }

			    function isBefore(input, units) {
			        var localInput = isMoment(input) ? input : createLocal(input);
			        if (!(this.isValid() && localInput.isValid())) {
			            return false;
			        }
			        units = normalizeUnits(units) || 'millisecond';
			        if (units === 'millisecond') {
			            return this.valueOf() < localInput.valueOf();
			        } else {
			            return this.clone().endOf(units).valueOf() < localInput.valueOf();
			        }
			    }

			    function isBetween(from, to, units, inclusivity) {
			        var localFrom = isMoment(from) ? from : createLocal(from),
			            localTo = isMoment(to) ? to : createLocal(to);
			        if (!(this.isValid() && localFrom.isValid() && localTo.isValid())) {
			            return false;
			        }
			        inclusivity = inclusivity || '()';
			        return (
			            (inclusivity[0] === '('
			                ? this.isAfter(localFrom, units)
			                : !this.isBefore(localFrom, units)) &&
			            (inclusivity[1] === ')'
			                ? this.isBefore(localTo, units)
			                : !this.isAfter(localTo, units))
			        );
			    }

			    function isSame(input, units) {
			        var localInput = isMoment(input) ? input : createLocal(input),
			            inputMs;
			        if (!(this.isValid() && localInput.isValid())) {
			            return false;
			        }
			        units = normalizeUnits(units) || 'millisecond';
			        if (units === 'millisecond') {
			            return this.valueOf() === localInput.valueOf();
			        } else {
			            inputMs = localInput.valueOf();
			            return (
			                this.clone().startOf(units).valueOf() <= inputMs &&
			                inputMs <= this.clone().endOf(units).valueOf()
			            );
			        }
			    }

			    function isSameOrAfter(input, units) {
			        return this.isSame(input, units) || this.isAfter(input, units);
			    }

			    function isSameOrBefore(input, units) {
			        return this.isSame(input, units) || this.isBefore(input, units);
			    }

			    function diff(input, units, asFloat) {
			        var that, zoneDelta, output;

			        if (!this.isValid()) {
			            return NaN;
			        }

			        that = cloneWithOffset(input, this);

			        if (!that.isValid()) {
			            return NaN;
			        }

			        zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;

			        units = normalizeUnits(units);

			        switch (units) {
			            case 'year':
			                output = monthDiff(this, that) / 12;
			                break;
			            case 'month':
			                output = monthDiff(this, that);
			                break;
			            case 'quarter':
			                output = monthDiff(this, that) / 3;
			                break;
			            case 'second':
			                output = (this - that) / 1e3;
			                break; // 1000
			            case 'minute':
			                output = (this - that) / 6e4;
			                break; // 1000 * 60
			            case 'hour':
			                output = (this - that) / 36e5;
			                break; // 1000 * 60 * 60
			            case 'day':
			                output = (this - that - zoneDelta) / 864e5;
			                break; // 1000 * 60 * 60 * 24, negate dst
			            case 'week':
			                output = (this - that - zoneDelta) / 6048e5;
			                break; // 1000 * 60 * 60 * 24 * 7, negate dst
			            default:
			                output = this - that;
			        }

			        return asFloat ? output : absFloor(output);
			    }

			    function monthDiff(a, b) {
			        if (a.date() < b.date()) {
			            // end-of-month calculations work correct when the start month has more
			            // days than the end month.
			            return -monthDiff(b, a);
			        }
			        // difference in months
			        var wholeMonthDiff = (b.year() - a.year()) * 12 + (b.month() - a.month()),
			            // b is in (anchor - 1 month, anchor + 1 month)
			            anchor = a.clone().add(wholeMonthDiff, 'months'),
			            anchor2,
			            adjust;

			        if (b - anchor < 0) {
			            anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');
			            // linear across the month
			            adjust = (b - anchor) / (anchor - anchor2);
			        } else {
			            anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');
			            // linear across the month
			            adjust = (b - anchor) / (anchor2 - anchor);
			        }

			        //check for negative zero, return zero if negative zero
			        return -(wholeMonthDiff + adjust) || 0;
			    }

			    hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';
			    hooks.defaultFormatUtc = 'YYYY-MM-DDTHH:mm:ss[Z]';

			    function toString() {
			        return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');
			    }

			    function toISOString(keepOffset) {
			        if (!this.isValid()) {
			            return null;
			        }
			        var utc = keepOffset !== true,
			            m = utc ? this.clone().utc() : this;
			        if (m.year() < 0 || m.year() > 9999) {
			            return formatMoment(
			                m,
			                utc
			                    ? 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]'
			                    : 'YYYYYY-MM-DD[T]HH:mm:ss.SSSZ'
			            );
			        }
			        if (isFunction(Date.prototype.toISOString)) {
			            // native implementation is ~50x faster, use it when we can
			            if (utc) {
			                return this.toDate().toISOString();
			            } else {
			                return new Date(this.valueOf() + this.utcOffset() * 60 * 1000)
			                    .toISOString()
			                    .replace('Z', formatMoment(m, 'Z'));
			            }
			        }
			        return formatMoment(
			            m,
			            utc ? 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYY-MM-DD[T]HH:mm:ss.SSSZ'
			        );
			    }

			    /**
			     * Return a human readable representation of a moment that can
			     * also be evaluated to get a new moment which is the same
			     *
			     * @link https://nodejs.org/dist/latest/docs/api/util.html#util_custom_inspect_function_on_objects
			     */
			    function inspect() {
			        if (!this.isValid()) {
			            return 'moment.invalid(/* ' + this._i + ' */)';
			        }
			        var func = 'moment',
			            zone = '',
			            prefix,
			            year,
			            datetime,
			            suffix;
			        if (!this.isLocal()) {
			            func = this.utcOffset() === 0 ? 'moment.utc' : 'moment.parseZone';
			            zone = 'Z';
			        }
			        prefix = '[' + func + '("]';
			        year = 0 <= this.year() && this.year() <= 9999 ? 'YYYY' : 'YYYYYY';
			        datetime = '-MM-DD[T]HH:mm:ss.SSS';
			        suffix = zone + '[")]';

			        return this.format(prefix + year + datetime + suffix);
			    }

			    function format(inputString) {
			        if (!inputString) {
			            inputString = this.isUtc()
			                ? hooks.defaultFormatUtc
			                : hooks.defaultFormat;
			        }
			        var output = formatMoment(this, inputString);
			        return this.localeData().postformat(output);
			    }

			    function from(time, withoutSuffix) {
			        if (
			            this.isValid() &&
			            ((isMoment(time) && time.isValid()) || createLocal(time).isValid())
			        ) {
			            return createDuration({ to: this, from: time })
			                .locale(this.locale())
			                .humanize(!withoutSuffix);
			        } else {
			            return this.localeData().invalidDate();
			        }
			    }

			    function fromNow(withoutSuffix) {
			        return this.from(createLocal(), withoutSuffix);
			    }

			    function to(time, withoutSuffix) {
			        if (
			            this.isValid() &&
			            ((isMoment(time) && time.isValid()) || createLocal(time).isValid())
			        ) {
			            return createDuration({ from: this, to: time })
			                .locale(this.locale())
			                .humanize(!withoutSuffix);
			        } else {
			            return this.localeData().invalidDate();
			        }
			    }

			    function toNow(withoutSuffix) {
			        return this.to(createLocal(), withoutSuffix);
			    }

			    // If passed a locale key, it will set the locale for this
			    // instance.  Otherwise, it will return the locale configuration
			    // variables for this instance.
			    function locale(key) {
			        var newLocaleData;

			        if (key === undefined) {
			            return this._locale._abbr;
			        } else {
			            newLocaleData = getLocale(key);
			            if (newLocaleData != null) {
			                this._locale = newLocaleData;
			            }
			            return this;
			        }
			    }

			    var lang = deprecate(
			        'moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.',
			        function (key) {
			            if (key === undefined) {
			                return this.localeData();
			            } else {
			                return this.locale(key);
			            }
			        }
			    );

			    function localeData() {
			        return this._locale;
			    }

			    var MS_PER_SECOND = 1000,
			        MS_PER_MINUTE = 60 * MS_PER_SECOND,
			        MS_PER_HOUR = 60 * MS_PER_MINUTE,
			        MS_PER_400_YEARS = (365 * 400 + 97) * 24 * MS_PER_HOUR;

			    // actual modulo - handles negative numbers (for dates before 1970):
			    function mod$1(dividend, divisor) {
			        return ((dividend % divisor) + divisor) % divisor;
			    }

			    function localStartOfDate(y, m, d) {
			        // the date constructor remaps years 0-99 to 1900-1999
			        if (y < 100 && y >= 0) {
			            // preserve leap years using a full 400 year cycle, then reset
			            return new Date(y + 400, m, d) - MS_PER_400_YEARS;
			        } else {
			            return new Date(y, m, d).valueOf();
			        }
			    }

			    function utcStartOfDate(y, m, d) {
			        // Date.UTC remaps years 0-99 to 1900-1999
			        if (y < 100 && y >= 0) {
			            // preserve leap years using a full 400 year cycle, then reset
			            return Date.UTC(y + 400, m, d) - MS_PER_400_YEARS;
			        } else {
			            return Date.UTC(y, m, d);
			        }
			    }

			    function startOf(units) {
			        var time, startOfDate;
			        units = normalizeUnits(units);
			        if (units === undefined || units === 'millisecond' || !this.isValid()) {
			            return this;
			        }

			        startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;

			        switch (units) {
			            case 'year':
			                time = startOfDate(this.year(), 0, 1);
			                break;
			            case 'quarter':
			                time = startOfDate(
			                    this.year(),
			                    this.month() - (this.month() % 3),
			                    1
			                );
			                break;
			            case 'month':
			                time = startOfDate(this.year(), this.month(), 1);
			                break;
			            case 'week':
			                time = startOfDate(
			                    this.year(),
			                    this.month(),
			                    this.date() - this.weekday()
			                );
			                break;
			            case 'isoWeek':
			                time = startOfDate(
			                    this.year(),
			                    this.month(),
			                    this.date() - (this.isoWeekday() - 1)
			                );
			                break;
			            case 'day':
			            case 'date':
			                time = startOfDate(this.year(), this.month(), this.date());
			                break;
			            case 'hour':
			                time = this._d.valueOf();
			                time -= mod$1(
			                    time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE),
			                    MS_PER_HOUR
			                );
			                break;
			            case 'minute':
			                time = this._d.valueOf();
			                time -= mod$1(time, MS_PER_MINUTE);
			                break;
			            case 'second':
			                time = this._d.valueOf();
			                time -= mod$1(time, MS_PER_SECOND);
			                break;
			        }

			        this._d.setTime(time);
			        hooks.updateOffset(this, true);
			        return this;
			    }

			    function endOf(units) {
			        var time, startOfDate;
			        units = normalizeUnits(units);
			        if (units === undefined || units === 'millisecond' || !this.isValid()) {
			            return this;
			        }

			        startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;

			        switch (units) {
			            case 'year':
			                time = startOfDate(this.year() + 1, 0, 1) - 1;
			                break;
			            case 'quarter':
			                time =
			                    startOfDate(
			                        this.year(),
			                        this.month() - (this.month() % 3) + 3,
			                        1
			                    ) - 1;
			                break;
			            case 'month':
			                time = startOfDate(this.year(), this.month() + 1, 1) - 1;
			                break;
			            case 'week':
			                time =
			                    startOfDate(
			                        this.year(),
			                        this.month(),
			                        this.date() - this.weekday() + 7
			                    ) - 1;
			                break;
			            case 'isoWeek':
			                time =
			                    startOfDate(
			                        this.year(),
			                        this.month(),
			                        this.date() - (this.isoWeekday() - 1) + 7
			                    ) - 1;
			                break;
			            case 'day':
			            case 'date':
			                time = startOfDate(this.year(), this.month(), this.date() + 1) - 1;
			                break;
			            case 'hour':
			                time = this._d.valueOf();
			                time +=
			                    MS_PER_HOUR -
			                    mod$1(
			                        time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE),
			                        MS_PER_HOUR
			                    ) -
			                    1;
			                break;
			            case 'minute':
			                time = this._d.valueOf();
			                time += MS_PER_MINUTE - mod$1(time, MS_PER_MINUTE) - 1;
			                break;
			            case 'second':
			                time = this._d.valueOf();
			                time += MS_PER_SECOND - mod$1(time, MS_PER_SECOND) - 1;
			                break;
			        }

			        this._d.setTime(time);
			        hooks.updateOffset(this, true);
			        return this;
			    }

			    function valueOf() {
			        return this._d.valueOf() - (this._offset || 0) * 60000;
			    }

			    function unix() {
			        return Math.floor(this.valueOf() / 1000);
			    }

			    function toDate() {
			        return new Date(this.valueOf());
			    }

			    function toArray() {
			        var m = this;
			        return [
			            m.year(),
			            m.month(),
			            m.date(),
			            m.hour(),
			            m.minute(),
			            m.second(),
			            m.millisecond(),
			        ];
			    }

			    function toObject() {
			        var m = this;
			        return {
			            years: m.year(),
			            months: m.month(),
			            date: m.date(),
			            hours: m.hours(),
			            minutes: m.minutes(),
			            seconds: m.seconds(),
			            milliseconds: m.milliseconds(),
			        };
			    }

			    function toJSON() {
			        // new Date(NaN).toJSON() === null
			        return this.isValid() ? this.toISOString() : null;
			    }

			    function isValid$2() {
			        return isValid(this);
			    }

			    function parsingFlags() {
			        return extend({}, getParsingFlags(this));
			    }

			    function invalidAt() {
			        return getParsingFlags(this).overflow;
			    }

			    function creationData() {
			        return {
			            input: this._i,
			            format: this._f,
			            locale: this._locale,
			            isUTC: this._isUTC,
			            strict: this._strict,
			        };
			    }

			    addFormatToken('N', 0, 0, 'eraAbbr');
			    addFormatToken('NN', 0, 0, 'eraAbbr');
			    addFormatToken('NNN', 0, 0, 'eraAbbr');
			    addFormatToken('NNNN', 0, 0, 'eraName');
			    addFormatToken('NNNNN', 0, 0, 'eraNarrow');

			    addFormatToken('y', ['y', 1], 'yo', 'eraYear');
			    addFormatToken('y', ['yy', 2], 0, 'eraYear');
			    addFormatToken('y', ['yyy', 3], 0, 'eraYear');
			    addFormatToken('y', ['yyyy', 4], 0, 'eraYear');

			    addRegexToken('N', matchEraAbbr);
			    addRegexToken('NN', matchEraAbbr);
			    addRegexToken('NNN', matchEraAbbr);
			    addRegexToken('NNNN', matchEraName);
			    addRegexToken('NNNNN', matchEraNarrow);

			    addParseToken(
			        ['N', 'NN', 'NNN', 'NNNN', 'NNNNN'],
			        function (input, array, config, token) {
			            var era = config._locale.erasParse(input, token, config._strict);
			            if (era) {
			                getParsingFlags(config).era = era;
			            } else {
			                getParsingFlags(config).invalidEra = input;
			            }
			        }
			    );

			    addRegexToken('y', matchUnsigned);
			    addRegexToken('yy', matchUnsigned);
			    addRegexToken('yyy', matchUnsigned);
			    addRegexToken('yyyy', matchUnsigned);
			    addRegexToken('yo', matchEraYearOrdinal);

			    addParseToken(['y', 'yy', 'yyy', 'yyyy'], YEAR);
			    addParseToken(['yo'], function (input, array, config, token) {
			        var match;
			        if (config._locale._eraYearOrdinalRegex) {
			            match = input.match(config._locale._eraYearOrdinalRegex);
			        }

			        if (config._locale.eraYearOrdinalParse) {
			            array[YEAR] = config._locale.eraYearOrdinalParse(input, match);
			        } else {
			            array[YEAR] = parseInt(input, 10);
			        }
			    });

			    function localeEras(m, format) {
			        var i,
			            l,
			            date,
			            eras = this._eras || getLocale('en')._eras;
			        for (i = 0, l = eras.length; i < l; ++i) {
			            switch (typeof eras[i].since) {
			                case 'string':
			                    // truncate time
			                    date = hooks(eras[i].since).startOf('day');
			                    eras[i].since = date.valueOf();
			                    break;
			            }

			            switch (typeof eras[i].until) {
			                case 'undefined':
			                    eras[i].until = +Infinity;
			                    break;
			                case 'string':
			                    // truncate time
			                    date = hooks(eras[i].until).startOf('day').valueOf();
			                    eras[i].until = date.valueOf();
			                    break;
			            }
			        }
			        return eras;
			    }

			    function localeErasParse(eraName, format, strict) {
			        var i,
			            l,
			            eras = this.eras(),
			            name,
			            abbr,
			            narrow;
			        eraName = eraName.toUpperCase();

			        for (i = 0, l = eras.length; i < l; ++i) {
			            name = eras[i].name.toUpperCase();
			            abbr = eras[i].abbr.toUpperCase();
			            narrow = eras[i].narrow.toUpperCase();

			            if (strict) {
			                switch (format) {
			                    case 'N':
			                    case 'NN':
			                    case 'NNN':
			                        if (abbr === eraName) {
			                            return eras[i];
			                        }
			                        break;

			                    case 'NNNN':
			                        if (name === eraName) {
			                            return eras[i];
			                        }
			                        break;

			                    case 'NNNNN':
			                        if (narrow === eraName) {
			                            return eras[i];
			                        }
			                        break;
			                }
			            } else if ([name, abbr, narrow].indexOf(eraName) >= 0) {
			                return eras[i];
			            }
			        }
			    }

			    function localeErasConvertYear(era, year) {
			        var dir = era.since <= era.until ? +1 : -1;
			        if (year === undefined) {
			            return hooks(era.since).year();
			        } else {
			            return hooks(era.since).year() + (year - era.offset) * dir;
			        }
			    }

			    function getEraName() {
			        var i,
			            l,
			            val,
			            eras = this.localeData().eras();
			        for (i = 0, l = eras.length; i < l; ++i) {
			            // truncate time
			            val = this.clone().startOf('day').valueOf();

			            if (eras[i].since <= val && val <= eras[i].until) {
			                return eras[i].name;
			            }
			            if (eras[i].until <= val && val <= eras[i].since) {
			                return eras[i].name;
			            }
			        }

			        return '';
			    }

			    function getEraNarrow() {
			        var i,
			            l,
			            val,
			            eras = this.localeData().eras();
			        for (i = 0, l = eras.length; i < l; ++i) {
			            // truncate time
			            val = this.clone().startOf('day').valueOf();

			            if (eras[i].since <= val && val <= eras[i].until) {
			                return eras[i].narrow;
			            }
			            if (eras[i].until <= val && val <= eras[i].since) {
			                return eras[i].narrow;
			            }
			        }

			        return '';
			    }

			    function getEraAbbr() {
			        var i,
			            l,
			            val,
			            eras = this.localeData().eras();
			        for (i = 0, l = eras.length; i < l; ++i) {
			            // truncate time
			            val = this.clone().startOf('day').valueOf();

			            if (eras[i].since <= val && val <= eras[i].until) {
			                return eras[i].abbr;
			            }
			            if (eras[i].until <= val && val <= eras[i].since) {
			                return eras[i].abbr;
			            }
			        }

			        return '';
			    }

			    function getEraYear() {
			        var i,
			            l,
			            dir,
			            val,
			            eras = this.localeData().eras();
			        for (i = 0, l = eras.length; i < l; ++i) {
			            dir = eras[i].since <= eras[i].until ? +1 : -1;

			            // truncate time
			            val = this.clone().startOf('day').valueOf();

			            if (
			                (eras[i].since <= val && val <= eras[i].until) ||
			                (eras[i].until <= val && val <= eras[i].since)
			            ) {
			                return (
			                    (this.year() - hooks(eras[i].since).year()) * dir +
			                    eras[i].offset
			                );
			            }
			        }

			        return this.year();
			    }

			    function erasNameRegex(isStrict) {
			        if (!hasOwnProp(this, '_erasNameRegex')) {
			            computeErasParse.call(this);
			        }
			        return isStrict ? this._erasNameRegex : this._erasRegex;
			    }

			    function erasAbbrRegex(isStrict) {
			        if (!hasOwnProp(this, '_erasAbbrRegex')) {
			            computeErasParse.call(this);
			        }
			        return isStrict ? this._erasAbbrRegex : this._erasRegex;
			    }

			    function erasNarrowRegex(isStrict) {
			        if (!hasOwnProp(this, '_erasNarrowRegex')) {
			            computeErasParse.call(this);
			        }
			        return isStrict ? this._erasNarrowRegex : this._erasRegex;
			    }

			    function matchEraAbbr(isStrict, locale) {
			        return locale.erasAbbrRegex(isStrict);
			    }

			    function matchEraName(isStrict, locale) {
			        return locale.erasNameRegex(isStrict);
			    }

			    function matchEraNarrow(isStrict, locale) {
			        return locale.erasNarrowRegex(isStrict);
			    }

			    function matchEraYearOrdinal(isStrict, locale) {
			        return locale._eraYearOrdinalRegex || matchUnsigned;
			    }

			    function computeErasParse() {
			        var abbrPieces = [],
			            namePieces = [],
			            narrowPieces = [],
			            mixedPieces = [],
			            i,
			            l,
			            eras = this.eras();

			        for (i = 0, l = eras.length; i < l; ++i) {
			            namePieces.push(regexEscape(eras[i].name));
			            abbrPieces.push(regexEscape(eras[i].abbr));
			            narrowPieces.push(regexEscape(eras[i].narrow));

			            mixedPieces.push(regexEscape(eras[i].name));
			            mixedPieces.push(regexEscape(eras[i].abbr));
			            mixedPieces.push(regexEscape(eras[i].narrow));
			        }

			        this._erasRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
			        this._erasNameRegex = new RegExp('^(' + namePieces.join('|') + ')', 'i');
			        this._erasAbbrRegex = new RegExp('^(' + abbrPieces.join('|') + ')', 'i');
			        this._erasNarrowRegex = new RegExp(
			            '^(' + narrowPieces.join('|') + ')',
			            'i'
			        );
			    }

			    // FORMATTING

			    addFormatToken(0, ['gg', 2], 0, function () {
			        return this.weekYear() % 100;
			    });

			    addFormatToken(0, ['GG', 2], 0, function () {
			        return this.isoWeekYear() % 100;
			    });

			    function addWeekYearFormatToken(token, getter) {
			        addFormatToken(0, [token, token.length], 0, getter);
			    }

			    addWeekYearFormatToken('gggg', 'weekYear');
			    addWeekYearFormatToken('ggggg', 'weekYear');
			    addWeekYearFormatToken('GGGG', 'isoWeekYear');
			    addWeekYearFormatToken('GGGGG', 'isoWeekYear');

			    // ALIASES

			    addUnitAlias('weekYear', 'gg');
			    addUnitAlias('isoWeekYear', 'GG');

			    // PRIORITY

			    addUnitPriority('weekYear', 1);
			    addUnitPriority('isoWeekYear', 1);

			    // PARSING

			    addRegexToken('G', matchSigned);
			    addRegexToken('g', matchSigned);
			    addRegexToken('GG', match1to2, match2);
			    addRegexToken('gg', match1to2, match2);
			    addRegexToken('GGGG', match1to4, match4);
			    addRegexToken('gggg', match1to4, match4);
			    addRegexToken('GGGGG', match1to6, match6);
			    addRegexToken('ggggg', match1to6, match6);

			    addWeekParseToken(
			        ['gggg', 'ggggg', 'GGGG', 'GGGGG'],
			        function (input, week, config, token) {
			            week[token.substr(0, 2)] = toInt(input);
			        }
			    );

			    addWeekParseToken(['gg', 'GG'], function (input, week, config, token) {
			        week[token] = hooks.parseTwoDigitYear(input);
			    });

			    // MOMENTS

			    function getSetWeekYear(input) {
			        return getSetWeekYearHelper.call(
			            this,
			            input,
			            this.week(),
			            this.weekday(),
			            this.localeData()._week.dow,
			            this.localeData()._week.doy
			        );
			    }

			    function getSetISOWeekYear(input) {
			        return getSetWeekYearHelper.call(
			            this,
			            input,
			            this.isoWeek(),
			            this.isoWeekday(),
			            1,
			            4
			        );
			    }

			    function getISOWeeksInYear() {
			        return weeksInYear(this.year(), 1, 4);
			    }

			    function getISOWeeksInISOWeekYear() {
			        return weeksInYear(this.isoWeekYear(), 1, 4);
			    }

			    function getWeeksInYear() {
			        var weekInfo = this.localeData()._week;
			        return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
			    }

			    function getWeeksInWeekYear() {
			        var weekInfo = this.localeData()._week;
			        return weeksInYear(this.weekYear(), weekInfo.dow, weekInfo.doy);
			    }

			    function getSetWeekYearHelper(input, week, weekday, dow, doy) {
			        var weeksTarget;
			        if (input == null) {
			            return weekOfYear(this, dow, doy).year;
			        } else {
			            weeksTarget = weeksInYear(input, dow, doy);
			            if (week > weeksTarget) {
			                week = weeksTarget;
			            }
			            return setWeekAll.call(this, input, week, weekday, dow, doy);
			        }
			    }

			    function setWeekAll(weekYear, week, weekday, dow, doy) {
			        var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy),
			            date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);

			        this.year(date.getUTCFullYear());
			        this.month(date.getUTCMonth());
			        this.date(date.getUTCDate());
			        return this;
			    }

			    // FORMATTING

			    addFormatToken('Q', 0, 'Qo', 'quarter');

			    // ALIASES

			    addUnitAlias('quarter', 'Q');

			    // PRIORITY

			    addUnitPriority('quarter', 7);

			    // PARSING

			    addRegexToken('Q', match1);
			    addParseToken('Q', function (input, array) {
			        array[MONTH] = (toInt(input) - 1) * 3;
			    });

			    // MOMENTS

			    function getSetQuarter(input) {
			        return input == null
			            ? Math.ceil((this.month() + 1) / 3)
			            : this.month((input - 1) * 3 + (this.month() % 3));
			    }

			    // FORMATTING

			    addFormatToken('D', ['DD', 2], 'Do', 'date');

			    // ALIASES

			    addUnitAlias('date', 'D');

			    // PRIORITY
			    addUnitPriority('date', 9);

			    // PARSING

			    addRegexToken('D', match1to2);
			    addRegexToken('DD', match1to2, match2);
			    addRegexToken('Do', function (isStrict, locale) {
			        // TODO: Remove "ordinalParse" fallback in next major release.
			        return isStrict
			            ? locale._dayOfMonthOrdinalParse || locale._ordinalParse
			            : locale._dayOfMonthOrdinalParseLenient;
			    });

			    addParseToken(['D', 'DD'], DATE);
			    addParseToken('Do', function (input, array) {
			        array[DATE] = toInt(input.match(match1to2)[0]);
			    });

			    // MOMENTS

			    var getSetDayOfMonth = makeGetSet('Date', true);

			    // FORMATTING

			    addFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear');

			    // ALIASES

			    addUnitAlias('dayOfYear', 'DDD');

			    // PRIORITY
			    addUnitPriority('dayOfYear', 4);

			    // PARSING

			    addRegexToken('DDD', match1to3);
			    addRegexToken('DDDD', match3);
			    addParseToken(['DDD', 'DDDD'], function (input, array, config) {
			        config._dayOfYear = toInt(input);
			    });

			    // HELPERS

			    // MOMENTS

			    function getSetDayOfYear(input) {
			        var dayOfYear =
			            Math.round(
			                (this.clone().startOf('day') - this.clone().startOf('year')) / 864e5
			            ) + 1;
			        return input == null ? dayOfYear : this.add(input - dayOfYear, 'd');
			    }

			    // FORMATTING

			    addFormatToken('m', ['mm', 2], 0, 'minute');

			    // ALIASES

			    addUnitAlias('minute', 'm');

			    // PRIORITY

			    addUnitPriority('minute', 14);

			    // PARSING

			    addRegexToken('m', match1to2);
			    addRegexToken('mm', match1to2, match2);
			    addParseToken(['m', 'mm'], MINUTE);

			    // MOMENTS

			    var getSetMinute = makeGetSet('Minutes', false);

			    // FORMATTING

			    addFormatToken('s', ['ss', 2], 0, 'second');

			    // ALIASES

			    addUnitAlias('second', 's');

			    // PRIORITY

			    addUnitPriority('second', 15);

			    // PARSING

			    addRegexToken('s', match1to2);
			    addRegexToken('ss', match1to2, match2);
			    addParseToken(['s', 'ss'], SECOND);

			    // MOMENTS

			    var getSetSecond = makeGetSet('Seconds', false);

			    // FORMATTING

			    addFormatToken('S', 0, 0, function () {
			        return ~~(this.millisecond() / 100);
			    });

			    addFormatToken(0, ['SS', 2], 0, function () {
			        return ~~(this.millisecond() / 10);
			    });

			    addFormatToken(0, ['SSS', 3], 0, 'millisecond');
			    addFormatToken(0, ['SSSS', 4], 0, function () {
			        return this.millisecond() * 10;
			    });
			    addFormatToken(0, ['SSSSS', 5], 0, function () {
			        return this.millisecond() * 100;
			    });
			    addFormatToken(0, ['SSSSSS', 6], 0, function () {
			        return this.millisecond() * 1000;
			    });
			    addFormatToken(0, ['SSSSSSS', 7], 0, function () {
			        return this.millisecond() * 10000;
			    });
			    addFormatToken(0, ['SSSSSSSS', 8], 0, function () {
			        return this.millisecond() * 100000;
			    });
			    addFormatToken(0, ['SSSSSSSSS', 9], 0, function () {
			        return this.millisecond() * 1000000;
			    });

			    // ALIASES

			    addUnitAlias('millisecond', 'ms');

			    // PRIORITY

			    addUnitPriority('millisecond', 16);

			    // PARSING

			    addRegexToken('S', match1to3, match1);
			    addRegexToken('SS', match1to3, match2);
			    addRegexToken('SSS', match1to3, match3);

			    var token, getSetMillisecond;
			    for (token = 'SSSS'; token.length <= 9; token += 'S') {
			        addRegexToken(token, matchUnsigned);
			    }

			    function parseMs(input, array) {
			        array[MILLISECOND] = toInt(('0.' + input) * 1000);
			    }

			    for (token = 'S'; token.length <= 9; token += 'S') {
			        addParseToken(token, parseMs);
			    }

			    getSetMillisecond = makeGetSet('Milliseconds', false);

			    // FORMATTING

			    addFormatToken('z', 0, 0, 'zoneAbbr');
			    addFormatToken('zz', 0, 0, 'zoneName');

			    // MOMENTS

			    function getZoneAbbr() {
			        return this._isUTC ? 'UTC' : '';
			    }

			    function getZoneName() {
			        return this._isUTC ? 'Coordinated Universal Time' : '';
			    }

			    var proto = Moment.prototype;

			    proto.add = add;
			    proto.calendar = calendar$1;
			    proto.clone = clone;
			    proto.diff = diff;
			    proto.endOf = endOf;
			    proto.format = format;
			    proto.from = from;
			    proto.fromNow = fromNow;
			    proto.to = to;
			    proto.toNow = toNow;
			    proto.get = stringGet;
			    proto.invalidAt = invalidAt;
			    proto.isAfter = isAfter;
			    proto.isBefore = isBefore;
			    proto.isBetween = isBetween;
			    proto.isSame = isSame;
			    proto.isSameOrAfter = isSameOrAfter;
			    proto.isSameOrBefore = isSameOrBefore;
			    proto.isValid = isValid$2;
			    proto.lang = lang;
			    proto.locale = locale;
			    proto.localeData = localeData;
			    proto.max = prototypeMax;
			    proto.min = prototypeMin;
			    proto.parsingFlags = parsingFlags;
			    proto.set = stringSet;
			    proto.startOf = startOf;
			    proto.subtract = subtract;
			    proto.toArray = toArray;
			    proto.toObject = toObject;
			    proto.toDate = toDate;
			    proto.toISOString = toISOString;
			    proto.inspect = inspect;
			    if (typeof Symbol !== 'undefined' && Symbol.for != null) {
			        proto[Symbol.for('nodejs.util.inspect.custom')] = function () {
			            return 'Moment<' + this.format() + '>';
			        };
			    }
			    proto.toJSON = toJSON;
			    proto.toString = toString;
			    proto.unix = unix;
			    proto.valueOf = valueOf;
			    proto.creationData = creationData;
			    proto.eraName = getEraName;
			    proto.eraNarrow = getEraNarrow;
			    proto.eraAbbr = getEraAbbr;
			    proto.eraYear = getEraYear;
			    proto.year = getSetYear;
			    proto.isLeapYear = getIsLeapYear;
			    proto.weekYear = getSetWeekYear;
			    proto.isoWeekYear = getSetISOWeekYear;
			    proto.quarter = proto.quarters = getSetQuarter;
			    proto.month = getSetMonth;
			    proto.daysInMonth = getDaysInMonth;
			    proto.week = proto.weeks = getSetWeek;
			    proto.isoWeek = proto.isoWeeks = getSetISOWeek;
			    proto.weeksInYear = getWeeksInYear;
			    proto.weeksInWeekYear = getWeeksInWeekYear;
			    proto.isoWeeksInYear = getISOWeeksInYear;
			    proto.isoWeeksInISOWeekYear = getISOWeeksInISOWeekYear;
			    proto.date = getSetDayOfMonth;
			    proto.day = proto.days = getSetDayOfWeek;
			    proto.weekday = getSetLocaleDayOfWeek;
			    proto.isoWeekday = getSetISODayOfWeek;
			    proto.dayOfYear = getSetDayOfYear;
			    proto.hour = proto.hours = getSetHour;
			    proto.minute = proto.minutes = getSetMinute;
			    proto.second = proto.seconds = getSetSecond;
			    proto.millisecond = proto.milliseconds = getSetMillisecond;
			    proto.utcOffset = getSetOffset;
			    proto.utc = setOffsetToUTC;
			    proto.local = setOffsetToLocal;
			    proto.parseZone = setOffsetToParsedOffset;
			    proto.hasAlignedHourOffset = hasAlignedHourOffset;
			    proto.isDST = isDaylightSavingTime;
			    proto.isLocal = isLocal;
			    proto.isUtcOffset = isUtcOffset;
			    proto.isUtc = isUtc;
			    proto.isUTC = isUtc;
			    proto.zoneAbbr = getZoneAbbr;
			    proto.zoneName = getZoneName;
			    proto.dates = deprecate(
			        'dates accessor is deprecated. Use date instead.',
			        getSetDayOfMonth
			    );
			    proto.months = deprecate(
			        'months accessor is deprecated. Use month instead',
			        getSetMonth
			    );
			    proto.years = deprecate(
			        'years accessor is deprecated. Use year instead',
			        getSetYear
			    );
			    proto.zone = deprecate(
			        'moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/',
			        getSetZone
			    );
			    proto.isDSTShifted = deprecate(
			        'isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information',
			        isDaylightSavingTimeShifted
			    );

			    function createUnix(input) {
			        return createLocal(input * 1000);
			    }

			    function createInZone() {
			        return createLocal.apply(null, arguments).parseZone();
			    }

			    function preParsePostFormat(string) {
			        return string;
			    }

			    var proto$1 = Locale.prototype;

			    proto$1.calendar = calendar;
			    proto$1.longDateFormat = longDateFormat;
			    proto$1.invalidDate = invalidDate;
			    proto$1.ordinal = ordinal;
			    proto$1.preparse = preParsePostFormat;
			    proto$1.postformat = preParsePostFormat;
			    proto$1.relativeTime = relativeTime;
			    proto$1.pastFuture = pastFuture;
			    proto$1.set = set;
			    proto$1.eras = localeEras;
			    proto$1.erasParse = localeErasParse;
			    proto$1.erasConvertYear = localeErasConvertYear;
			    proto$1.erasAbbrRegex = erasAbbrRegex;
			    proto$1.erasNameRegex = erasNameRegex;
			    proto$1.erasNarrowRegex = erasNarrowRegex;

			    proto$1.months = localeMonths;
			    proto$1.monthsShort = localeMonthsShort;
			    proto$1.monthsParse = localeMonthsParse;
			    proto$1.monthsRegex = monthsRegex;
			    proto$1.monthsShortRegex = monthsShortRegex;
			    proto$1.week = localeWeek;
			    proto$1.firstDayOfYear = localeFirstDayOfYear;
			    proto$1.firstDayOfWeek = localeFirstDayOfWeek;

			    proto$1.weekdays = localeWeekdays;
			    proto$1.weekdaysMin = localeWeekdaysMin;
			    proto$1.weekdaysShort = localeWeekdaysShort;
			    proto$1.weekdaysParse = localeWeekdaysParse;

			    proto$1.weekdaysRegex = weekdaysRegex;
			    proto$1.weekdaysShortRegex = weekdaysShortRegex;
			    proto$1.weekdaysMinRegex = weekdaysMinRegex;

			    proto$1.isPM = localeIsPM;
			    proto$1.meridiem = localeMeridiem;

			    function get$1(format, index, field, setter) {
			        var locale = getLocale(),
			            utc = createUTC().set(setter, index);
			        return locale[field](utc, format);
			    }

			    function listMonthsImpl(format, index, field) {
			        if (isNumber(format)) {
			            index = format;
			            format = undefined;
			        }

			        format = format || '';

			        if (index != null) {
			            return get$1(format, index, field, 'month');
			        }

			        var i,
			            out = [];
			        for (i = 0; i < 12; i++) {
			            out[i] = get$1(format, i, field, 'month');
			        }
			        return out;
			    }

			    // ()
			    // (5)
			    // (fmt, 5)
			    // (fmt)
			    // (true)
			    // (true, 5)
			    // (true, fmt, 5)
			    // (true, fmt)
			    function listWeekdaysImpl(localeSorted, format, index, field) {
			        if (typeof localeSorted === 'boolean') {
			            if (isNumber(format)) {
			                index = format;
			                format = undefined;
			            }

			            format = format || '';
			        } else {
			            format = localeSorted;
			            index = format;
			            localeSorted = false;

			            if (isNumber(format)) {
			                index = format;
			                format = undefined;
			            }

			            format = format || '';
			        }

			        var locale = getLocale(),
			            shift = localeSorted ? locale._week.dow : 0,
			            i,
			            out = [];

			        if (index != null) {
			            return get$1(format, (index + shift) % 7, field, 'day');
			        }

			        for (i = 0; i < 7; i++) {
			            out[i] = get$1(format, (i + shift) % 7, field, 'day');
			        }
			        return out;
			    }

			    function listMonths(format, index) {
			        return listMonthsImpl(format, index, 'months');
			    }

			    function listMonthsShort(format, index) {
			        return listMonthsImpl(format, index, 'monthsShort');
			    }

			    function listWeekdays(localeSorted, format, index) {
			        return listWeekdaysImpl(localeSorted, format, index, 'weekdays');
			    }

			    function listWeekdaysShort(localeSorted, format, index) {
			        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysShort');
			    }

			    function listWeekdaysMin(localeSorted, format, index) {
			        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysMin');
			    }

			    getSetGlobalLocale('en', {
			        eras: [
			            {
			                since: '0001-01-01',
			                until: +Infinity,
			                offset: 1,
			                name: 'Anno Domini',
			                narrow: 'AD',
			                abbr: 'AD',
			            },
			            {
			                since: '0000-12-31',
			                until: -Infinity,
			                offset: 1,
			                name: 'Before Christ',
			                narrow: 'BC',
			                abbr: 'BC',
			            },
			        ],
			        dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
			        ordinal: function (number) {
			            var b = number % 10,
			                output =
			                    toInt((number % 100) / 10) === 1
			                        ? 'th'
			                        : b === 1
			                        ? 'st'
			                        : b === 2
			                        ? 'nd'
			                        : b === 3
			                        ? 'rd'
			                        : 'th';
			            return number + output;
			        },
			    });

			    // Side effect imports

			    hooks.lang = deprecate(
			        'moment.lang is deprecated. Use moment.locale instead.',
			        getSetGlobalLocale
			    );
			    hooks.langData = deprecate(
			        'moment.langData is deprecated. Use moment.localeData instead.',
			        getLocale
			    );

			    var mathAbs = Math.abs;

			    function abs() {
			        var data = this._data;

			        this._milliseconds = mathAbs(this._milliseconds);
			        this._days = mathAbs(this._days);
			        this._months = mathAbs(this._months);

			        data.milliseconds = mathAbs(data.milliseconds);
			        data.seconds = mathAbs(data.seconds);
			        data.minutes = mathAbs(data.minutes);
			        data.hours = mathAbs(data.hours);
			        data.months = mathAbs(data.months);
			        data.years = mathAbs(data.years);

			        return this;
			    }

			    function addSubtract$1(duration, input, value, direction) {
			        var other = createDuration(input, value);

			        duration._milliseconds += direction * other._milliseconds;
			        duration._days += direction * other._days;
			        duration._months += direction * other._months;

			        return duration._bubble();
			    }

			    // supports only 2.0-style add(1, 's') or add(duration)
			    function add$1(input, value) {
			        return addSubtract$1(this, input, value, 1);
			    }

			    // supports only 2.0-style subtract(1, 's') or subtract(duration)
			    function subtract$1(input, value) {
			        return addSubtract$1(this, input, value, -1);
			    }

			    function absCeil(number) {
			        if (number < 0) {
			            return Math.floor(number);
			        } else {
			            return Math.ceil(number);
			        }
			    }

			    function bubble() {
			        var milliseconds = this._milliseconds,
			            days = this._days,
			            months = this._months,
			            data = this._data,
			            seconds,
			            minutes,
			            hours,
			            years,
			            monthsFromDays;

			        // if we have a mix of positive and negative values, bubble down first
			        // check: https://github.com/moment/moment/issues/2166
			        if (
			            !(
			                (milliseconds >= 0 && days >= 0 && months >= 0) ||
			                (milliseconds <= 0 && days <= 0 && months <= 0)
			            )
			        ) {
			            milliseconds += absCeil(monthsToDays(months) + days) * 864e5;
			            days = 0;
			            months = 0;
			        }

			        // The following code bubbles up values, see the tests for
			        // examples of what that means.
			        data.milliseconds = milliseconds % 1000;

			        seconds = absFloor(milliseconds / 1000);
			        data.seconds = seconds % 60;

			        minutes = absFloor(seconds / 60);
			        data.minutes = minutes % 60;

			        hours = absFloor(minutes / 60);
			        data.hours = hours % 24;

			        days += absFloor(hours / 24);

			        // convert days to months
			        monthsFromDays = absFloor(daysToMonths(days));
			        months += monthsFromDays;
			        days -= absCeil(monthsToDays(monthsFromDays));

			        // 12 months -> 1 year
			        years = absFloor(months / 12);
			        months %= 12;

			        data.days = days;
			        data.months = months;
			        data.years = years;

			        return this;
			    }

			    function daysToMonths(days) {
			        // 400 years have 146097 days (taking into account leap year rules)
			        // 400 years have 12 months === 4800
			        return (days * 4800) / 146097;
			    }

			    function monthsToDays(months) {
			        // the reverse of daysToMonths
			        return (months * 146097) / 4800;
			    }

			    function as(units) {
			        if (!this.isValid()) {
			            return NaN;
			        }
			        var days,
			            months,
			            milliseconds = this._milliseconds;

			        units = normalizeUnits(units);

			        if (units === 'month' || units === 'quarter' || units === 'year') {
			            days = this._days + milliseconds / 864e5;
			            months = this._months + daysToMonths(days);
			            switch (units) {
			                case 'month':
			                    return months;
			                case 'quarter':
			                    return months / 3;
			                case 'year':
			                    return months / 12;
			            }
			        } else {
			            // handle milliseconds separately because of floating point math errors (issue #1867)
			            days = this._days + Math.round(monthsToDays(this._months));
			            switch (units) {
			                case 'week':
			                    return days / 7 + milliseconds / 6048e5;
			                case 'day':
			                    return days + milliseconds / 864e5;
			                case 'hour':
			                    return days * 24 + milliseconds / 36e5;
			                case 'minute':
			                    return days * 1440 + milliseconds / 6e4;
			                case 'second':
			                    return days * 86400 + milliseconds / 1000;
			                // Math.floor prevents floating point math errors here
			                case 'millisecond':
			                    return Math.floor(days * 864e5) + milliseconds;
			                default:
			                    throw new Error('Unknown unit ' + units);
			            }
			        }
			    }

			    // TODO: Use this.as('ms')?
			    function valueOf$1() {
			        if (!this.isValid()) {
			            return NaN;
			        }
			        return (
			            this._milliseconds +
			            this._days * 864e5 +
			            (this._months % 12) * 2592e6 +
			            toInt(this._months / 12) * 31536e6
			        );
			    }

			    function makeAs(alias) {
			        return function () {
			            return this.as(alias);
			        };
			    }

			    var asMilliseconds = makeAs('ms'),
			        asSeconds = makeAs('s'),
			        asMinutes = makeAs('m'),
			        asHours = makeAs('h'),
			        asDays = makeAs('d'),
			        asWeeks = makeAs('w'),
			        asMonths = makeAs('M'),
			        asQuarters = makeAs('Q'),
			        asYears = makeAs('y');

			    function clone$1() {
			        return createDuration(this);
			    }

			    function get$2(units) {
			        units = normalizeUnits(units);
			        return this.isValid() ? this[units + 's']() : NaN;
			    }

			    function makeGetter(name) {
			        return function () {
			            return this.isValid() ? this._data[name] : NaN;
			        };
			    }

			    var milliseconds = makeGetter('milliseconds'),
			        seconds = makeGetter('seconds'),
			        minutes = makeGetter('minutes'),
			        hours = makeGetter('hours'),
			        days = makeGetter('days'),
			        months = makeGetter('months'),
			        years = makeGetter('years');

			    function weeks() {
			        return absFloor(this.days() / 7);
			    }

			    var round = Math.round,
			        thresholds = {
			            ss: 44, // a few seconds to seconds
			            s: 45, // seconds to minute
			            m: 45, // minutes to hour
			            h: 22, // hours to day
			            d: 26, // days to month/week
			            w: null, // weeks to month
			            M: 11, // months to year
			        };

			    // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize
			    function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {
			        return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
			    }

			    function relativeTime$1(posNegDuration, withoutSuffix, thresholds, locale) {
			        var duration = createDuration(posNegDuration).abs(),
			            seconds = round(duration.as('s')),
			            minutes = round(duration.as('m')),
			            hours = round(duration.as('h')),
			            days = round(duration.as('d')),
			            months = round(duration.as('M')),
			            weeks = round(duration.as('w')),
			            years = round(duration.as('y')),
			            a =
			                (seconds <= thresholds.ss && ['s', seconds]) ||
			                (seconds < thresholds.s && ['ss', seconds]) ||
			                (minutes <= 1 && ['m']) ||
			                (minutes < thresholds.m && ['mm', minutes]) ||
			                (hours <= 1 && ['h']) ||
			                (hours < thresholds.h && ['hh', hours]) ||
			                (days <= 1 && ['d']) ||
			                (days < thresholds.d && ['dd', days]);

			        if (thresholds.w != null) {
			            a =
			                a ||
			                (weeks <= 1 && ['w']) ||
			                (weeks < thresholds.w && ['ww', weeks]);
			        }
			        a = a ||
			            (months <= 1 && ['M']) ||
			            (months < thresholds.M && ['MM', months]) ||
			            (years <= 1 && ['y']) || ['yy', years];

			        a[2] = withoutSuffix;
			        a[3] = +posNegDuration > 0;
			        a[4] = locale;
			        return substituteTimeAgo.apply(null, a);
			    }

			    // This function allows you to set the rounding function for relative time strings
			    function getSetRelativeTimeRounding(roundingFunction) {
			        if (roundingFunction === undefined) {
			            return round;
			        }
			        if (typeof roundingFunction === 'function') {
			            round = roundingFunction;
			            return true;
			        }
			        return false;
			    }

			    // This function allows you to set a threshold for relative time strings
			    function getSetRelativeTimeThreshold(threshold, limit) {
			        if (thresholds[threshold] === undefined) {
			            return false;
			        }
			        if (limit === undefined) {
			            return thresholds[threshold];
			        }
			        thresholds[threshold] = limit;
			        if (threshold === 's') {
			            thresholds.ss = limit - 1;
			        }
			        return true;
			    }

			    function humanize(argWithSuffix, argThresholds) {
			        if (!this.isValid()) {
			            return this.localeData().invalidDate();
			        }

			        var withSuffix = false,
			            th = thresholds,
			            locale,
			            output;

			        if (typeof argWithSuffix === 'object') {
			            argThresholds = argWithSuffix;
			            argWithSuffix = false;
			        }
			        if (typeof argWithSuffix === 'boolean') {
			            withSuffix = argWithSuffix;
			        }
			        if (typeof argThresholds === 'object') {
			            th = Object.assign({}, thresholds, argThresholds);
			            if (argThresholds.s != null && argThresholds.ss == null) {
			                th.ss = argThresholds.s - 1;
			            }
			        }

			        locale = this.localeData();
			        output = relativeTime$1(this, !withSuffix, th, locale);

			        if (withSuffix) {
			            output = locale.pastFuture(+this, output);
			        }

			        return locale.postformat(output);
			    }

			    var abs$1 = Math.abs;

			    function sign(x) {
			        return (x > 0) - (x < 0) || +x;
			    }

			    function toISOString$1() {
			        // for ISO strings we do not use the normal bubbling rules:
			        //  * milliseconds bubble up until they become hours
			        //  * days do not bubble at all
			        //  * months bubble up until they become years
			        // This is because there is no context-free conversion between hours and days
			        // (think of clock changes)
			        // and also not between days and months (28-31 days per month)
			        if (!this.isValid()) {
			            return this.localeData().invalidDate();
			        }

			        var seconds = abs$1(this._milliseconds) / 1000,
			            days = abs$1(this._days),
			            months = abs$1(this._months),
			            minutes,
			            hours,
			            years,
			            s,
			            total = this.asSeconds(),
			            totalSign,
			            ymSign,
			            daysSign,
			            hmsSign;

			        if (!total) {
			            // this is the same as C#'s (Noda) and python (isodate)...
			            // but not other JS (goog.date)
			            return 'P0D';
			        }

			        // 3600 seconds -> 60 minutes -> 1 hour
			        minutes = absFloor(seconds / 60);
			        hours = absFloor(minutes / 60);
			        seconds %= 60;
			        minutes %= 60;

			        // 12 months -> 1 year
			        years = absFloor(months / 12);
			        months %= 12;

			        // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js
			        s = seconds ? seconds.toFixed(3).replace(/\.?0+$/, '') : '';

			        totalSign = total < 0 ? '-' : '';
			        ymSign = sign(this._months) !== sign(total) ? '-' : '';
			        daysSign = sign(this._days) !== sign(total) ? '-' : '';
			        hmsSign = sign(this._milliseconds) !== sign(total) ? '-' : '';

			        return (
			            totalSign +
			            'P' +
			            (years ? ymSign + years + 'Y' : '') +
			            (months ? ymSign + months + 'M' : '') +
			            (days ? daysSign + days + 'D' : '') +
			            (hours || minutes || seconds ? 'T' : '') +
			            (hours ? hmsSign + hours + 'H' : '') +
			            (minutes ? hmsSign + minutes + 'M' : '') +
			            (seconds ? hmsSign + s + 'S' : '')
			        );
			    }

			    var proto$2 = Duration.prototype;

			    proto$2.isValid = isValid$1;
			    proto$2.abs = abs;
			    proto$2.add = add$1;
			    proto$2.subtract = subtract$1;
			    proto$2.as = as;
			    proto$2.asMilliseconds = asMilliseconds;
			    proto$2.asSeconds = asSeconds;
			    proto$2.asMinutes = asMinutes;
			    proto$2.asHours = asHours;
			    proto$2.asDays = asDays;
			    proto$2.asWeeks = asWeeks;
			    proto$2.asMonths = asMonths;
			    proto$2.asQuarters = asQuarters;
			    proto$2.asYears = asYears;
			    proto$2.valueOf = valueOf$1;
			    proto$2._bubble = bubble;
			    proto$2.clone = clone$1;
			    proto$2.get = get$2;
			    proto$2.milliseconds = milliseconds;
			    proto$2.seconds = seconds;
			    proto$2.minutes = minutes;
			    proto$2.hours = hours;
			    proto$2.days = days;
			    proto$2.weeks = weeks;
			    proto$2.months = months;
			    proto$2.years = years;
			    proto$2.humanize = humanize;
			    proto$2.toISOString = toISOString$1;
			    proto$2.toString = toISOString$1;
			    proto$2.toJSON = toISOString$1;
			    proto$2.locale = locale;
			    proto$2.localeData = localeData;

			    proto$2.toIsoString = deprecate(
			        'toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)',
			        toISOString$1
			    );
			    proto$2.lang = lang;

			    // FORMATTING

			    addFormatToken('X', 0, 0, 'unix');
			    addFormatToken('x', 0, 0, 'valueOf');

			    // PARSING

			    addRegexToken('x', matchSigned);
			    addRegexToken('X', matchTimestamp);
			    addParseToken('X', function (input, array, config) {
			        config._d = new Date(parseFloat(input) * 1000);
			    });
			    addParseToken('x', function (input, array, config) {
			        config._d = new Date(toInt(input));
			    });

			    //! moment.js

			    hooks.version = '2.29.4';

			    setHookCallback(createLocal);

			    hooks.fn = proto;
			    hooks.min = min;
			    hooks.max = max;
			    hooks.now = now;
			    hooks.utc = createUTC;
			    hooks.unix = createUnix;
			    hooks.months = listMonths;
			    hooks.isDate = isDate;
			    hooks.locale = getSetGlobalLocale;
			    hooks.invalid = createInvalid;
			    hooks.duration = createDuration;
			    hooks.isMoment = isMoment;
			    hooks.weekdays = listWeekdays;
			    hooks.parseZone = createInZone;
			    hooks.localeData = getLocale;
			    hooks.isDuration = isDuration;
			    hooks.monthsShort = listMonthsShort;
			    hooks.weekdaysMin = listWeekdaysMin;
			    hooks.defineLocale = defineLocale;
			    hooks.updateLocale = updateLocale;
			    hooks.locales = listLocales;
			    hooks.weekdaysShort = listWeekdaysShort;
			    hooks.normalizeUnits = normalizeUnits;
			    hooks.relativeTimeRounding = getSetRelativeTimeRounding;
			    hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;
			    hooks.calendarFormat = getCalendarFormat;
			    hooks.prototype = proto;

			    // currently HTML5 input type only supports 24-hour formats
			    hooks.HTML5_FMT = {
			        DATETIME_LOCAL: 'YYYY-MM-DDTHH:mm', // <input type="datetime-local" />
			        DATETIME_LOCAL_SECONDS: 'YYYY-MM-DDTHH:mm:ss', // <input type="datetime-local" step="1" />
			        DATETIME_LOCAL_MS: 'YYYY-MM-DDTHH:mm:ss.SSS', // <input type="datetime-local" step="0.001" />
			        DATE: 'YYYY-MM-DD', // <input type="date" />
			        TIME: 'HH:mm', // <input type="time" />
			        TIME_SECONDS: 'HH:mm:ss', // <input type="time" step="1" />
			        TIME_MS: 'HH:mm:ss.SSS', // <input type="time" step="0.001" />
			        WEEK: 'GGGG-[W]WW', // <input type="week" />
			        MONTH: 'YYYY-MM', // <input type="month" />
			    };

			    return hooks;

			}))); 
		} (moment));
		return moment.exports;
	}

	var dataTypes$9;
	var hasRequiredDataTypes$8;

	function requireDataTypes$8 () {
		if (hasRequiredDataTypes$8) return dataTypes$9;
		hasRequiredDataTypes$8 = 1;
		var __create = Object.create;
		var __defProp = Object.defineProperty;
		var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
		var __getOwnPropNames = Object.getOwnPropertyNames;
		var __getProtoOf = Object.getPrototypeOf;
		var __hasOwnProp = Object.prototype.hasOwnProperty;
		var __export = (target, all) => {
		  for (var name in all)
		    __defProp(target, name, { get: all[name], enumerable: true });
		};
		var __copyProps = (to, from, except, desc) => {
		  if (from && typeof from === "object" || typeof from === "function") {
		    for (let key of __getOwnPropNames(from))
		      if (!__hasOwnProp.call(to, key) && key !== except)
		        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
		  }
		  return to;
		};
		var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
		  // If the importer is in node compatibility mode or this is not an ESM
		  // file that has been converted to a CommonJS file using a Babel-
		  // compatible transform (i.e. "__esModule" has not been set), then set
		  // "default" to the CommonJS "module.exports" for node compatibility.
		  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
		  mod
		));
		var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
		var data_types_exports = {};
		__export(data_types_exports, {
		  ARRAY: () => ARRAY,
		  AbstractDataType: () => AbstractDataType,
		  BIGINT: () => BIGINT,
		  BLOB: () => BLOB,
		  BOOLEAN: () => BOOLEAN,
		  BaseDecimalNumberDataType: () => BaseDecimalNumberDataType,
		  BaseIntegerDataType: () => BaseIntegerDataType,
		  BaseNumberDataType: () => BaseNumberDataType,
		  CHAR: () => CHAR,
		  CIDR: () => CIDR,
		  CITEXT: () => CITEXT,
		  DATE: () => DATE,
		  DATEONLY: () => DATEONLY,
		  DECIMAL: () => DECIMAL,
		  DOUBLE: () => DOUBLE,
		  ENUM: () => ENUM,
		  FLOAT: () => FLOAT,
		  GEOGRAPHY: () => GEOGRAPHY,
		  GEOMETRY: () => GEOMETRY,
		  HSTORE: () => HSTORE,
		  INET: () => INET,
		  INTEGER: () => INTEGER,
		  JSON: () => JSON,
		  JSONB: () => JSONB,
		  MACADDR: () => MACADDR,
		  MEDIUMINT: () => MEDIUMINT,
		  NOW: () => NOW,
		  RANGE: () => RANGE,
		  REAL: () => REAL,
		  SMALLINT: () => SMALLINT,
		  STRING: () => STRING,
		  TEXT: () => TEXT,
		  TIME: () => TIME,
		  TINYINT: () => TINYINT,
		  TSVECTOR: () => TSVECTOR,
		  UUID: () => UUID,
		  UUIDV1: () => UUIDV1,
		  UUIDV4: () => UUIDV4,
		  VIRTUAL: () => VIRTUAL
		});
		dataTypes$9 = __toCommonJS(data_types_exports);
		var import_node_buffer = require$$0$2;
		var import_node_util = __toESM(require$$0$1);
		var import_dayjs = __toESM(dayjs_minExports);
		var import_identity = __toESM(identity_1);
		var import_isEqual = __toESM(isEqual_1);
		var import_isObject = __toESM(isObject_1);
		var import_errors = errors;
		var import_geo_json = requireGeoJson();
		var import_buffer = buffer;
		var import_check = requireCheck();
		var import_dayjs2 = dayjs;
		var import_deprecations = deprecations;
		var import_join_sql_fragments = joinSqlFragments;
		var import_parse_number = parseNumber_1;
		var import_validator_extras = validatorExtras;
		var import_range = range$2;
		var import_data_types_utils = requireDataTypesUtils();
		let Moment;
		try {
		  Moment = requireMoment();
		} catch {
		}
		function isMoment(value) {
		  return (Moment == null ? void 0 : Moment.isMoment(value)) ?? false;
		}
		const kDataTypeIdentifier = Symbol("sequelize.DataTypeIdentifier");
		class AbstractDataType {
		  static getDataTypeId() {
		    return this[kDataTypeIdentifier];
		  }
		  getDataTypeId() {
		    return this.constructor.getDataTypeId();
		  }
		  /**
		   * Where this DataType is being used.
		   */
		  usageContext;
		  #dialect;
		  _getDialect() {
		    if (!this.#dialect) {
		      throw new Error("toDialectDataType has not yet been called on this DataType");
		    }
		    return this.#dialect;
		  }
		  // TODO: Remove in v8
		  /**
		   * @hidden
		   */
		  static get escape() {
		    throw new Error('The "escape" static property has been removed. Each DataType is responsible for escaping its value correctly.');
		  }
		  // TODO: Remove in v8
		  /**
		   * @hidden
		   */
		  static get types() {
		    throw new Error('The "types" static property has been removed. Use getDataTypeDialectMeta.');
		  }
		  // TODO: Remove in v8
		  /**
		   * @hidden
		   */
		  static get key() {
		    throw new Error('The "key" static property has been removed.');
		  }
		  // TODO: Remove in v8
		  /**
		   * @hidden
		   */
		  get types() {
		    throw new Error('The "types" instance property has been removed.');
		  }
		  // TODO: Remove in v8
		  /**
		   * @hidden
		   */
		  get key() {
		    throw new Error('The "key" instance property has been removed.');
		  }
		  // TODO: move to utils?
		  _construct(...args) {
		    const constructor = this.constructor;
		    return new constructor(...args);
		  }
		  areValuesEqual(value, originalValue) {
		    return (0, import_isEqual.default)(value, originalValue);
		  }
		  /**
		   * Whether this DataType wishes to handle NULL values itself.
		   * This is almost exclusively used by {@link JSON} and {@link JSONB} which serialize `null` as the JSON string `'null'`.
		   */
		  acceptsNull() {
		    return false;
		  }
		  /**
		   * Called when a value is retrieved from the Database, and its DataType is specified.
		   * Used to normalize values from the database.
		   *
		   * Note: It is also possible to do an initial parsing of a Database value using {@link AbstractDialect#registerDataTypeParser}.
		   * That normalization uses the type ID from the database instead of a Sequelize Data Type to determine which parser to use,
		   * and is called before this method.
		   *
		   * @param value The value to parse.
		   */
		  parseDatabaseValue(value) {
		    return value;
		  }
		  /**
		   * Used to normalize a value when {@link Model#set} is called.
		   * That is, when a user sets a value on a Model instance.
		   *
		   * @param value
		   */
		  sanitize(value) {
		    return value;
		  }
		  /**
		   * Checks whether the JS value is compatible with (or can be converted to) the SQL data type.
		   * Throws if that is not the case.
		   *
		   * @param value
		   */
		  validate(value) {
		  }
		  /**
		   * Escapes a value for the purposes of inlining it in a SQL query.
		   * The resulting value will be inlined as-is with no further escaping.
		   *
		   * @param value The value to escape.
		   */
		  escape(value) {
		    const asBindValue = this.toBindableValue(value);
		    if (!(0, import_check.isString)(asBindValue)) {
		      throw new Error(`${this.constructor.name}#stringify has been overridden to return a non-string value, so ${this.constructor.name}#escape must be implemented to handle that value correctly.`);
		    }
		    return this._getDialect().escapeString(asBindValue);
		  }
		  /**
		   * This method is called when {@link AbstractQueryGenerator} needs to add a bind parameter to a query it is building.
		   * This method allows for customizing both the SQL to add to the query, and convert the bind parameter value to a DB-compatible value.
		   *
		   * If you only need to prepare the bind param value, implement {@link toBindableValue} instead.
		   *
		   * This method must return the SQL to add to the query. You can obtain a bind parameter ID by calling {@link BindParamOptions#bindParam}
		   * with the value associated to that bind parameter.
		   *
		   * An example of a data type that requires customizing the SQL is the {@link GEOMETRY} data type.
		   *
		   * @param value The value to bind.
		   * @param options Options.
		   */
		  getBindParamSql(value, options) {
		    return options.bindParam(this.toBindableValue(value));
		  }
		  /**
		   * Converts a JS value to a value compatible with the connector library for this Data Type.
		   * Unlike {@link escape}, this value does not need to be escaped. It is passed separately to the database, which
		   * will handle escaping.
		   *
		   * @param value The value to convert.
		   */
		  toBindableValue(value) {
		    return String(value);
		  }
		  toString() {
		    try {
		      return this.toSql();
		    } catch {
		      return this.constructor.toString();
		    }
		  }
		  static toString() {
		    return this.name;
		  }
		  /**
		   * Override this method to emit an error or a warning if the Data Type, as it is configured, is not compatible
		   * with the current dialect.
		   *
		   * @param dialect The dialect using this data type.
		   */
		  _checkOptionSupport(dialect) {
		    assertDataTypeSupported(dialect, this);
		  }
		  belongsToDialect(dialect) {
		    return this.#dialect === dialect;
		  }
		  /**
		   * Returns this DataType, using its dialect-specific subclass.
		   *
		   * @param dialect
		   */
		  toDialectDataType(dialect) {
		    if (this.#dialect === dialect) {
		      return this;
		    }
		    const DataTypeClass = this.constructor;
		    const subClass = dialect.getDataTypeForDialect(DataTypeClass);
		    const replacement = !subClass || subClass === DataTypeClass ? this.#dialect == null ? this : this.clone() : new subClass(this.options);
		    replacement.#dialect = dialect;
		    replacement._checkOptionSupport(dialect);
		    if (this.usageContext) {
		      replacement.attachUsageContext(this.usageContext);
		    }
		    return replacement;
		  }
		  /**
		   * Returns a copy of this DataType, without usage context.
		   * Designed to re-use a DataType on another Model.
		   */
		  clone() {
		    return this._construct(this.options);
		  }
		  withUsageContext(usageContext) {
		    const out = this.clone().attachUsageContext(usageContext);
		    if (this.#dialect) {
		      out.#dialect = this.#dialect;
		    }
		    return out;
		  }
		  /**
		   * @param usageContext
		   * @private
		   */
		  attachUsageContext(usageContext) {
		    if (this.usageContext && !(0, import_isEqual.default)(this.usageContext, usageContext)) {
		      throw new Error(`This DataType is already attached to ${printContext(this.usageContext)}, and therefore cannot be attached to ${printContext(usageContext)}.`);
		    }
		    this.usageContext = Object.freeze(usageContext);
		    return this;
		  }
		}
		function printContext(usageContext) {
		  if ("model" in usageContext) {
		    return `attribute ${usageContext.model.name}#${usageContext.attributeName}`;
		  }
		  return `column "${usageContext.tableName}"."${usageContext.columnName}"`;
		}
		class STRING extends AbstractDataType {
		  /** @hidden */
		  static [kDataTypeIdentifier] = "STRING";
		  options;
		  constructor(lengthOrOptions, binary) {
		    super();
		    if ((0, import_isObject.default)(lengthOrOptions)) {
		      this.options = {
		        length: lengthOrOptions.length,
		        binary: lengthOrOptions.binary ?? false
		      };
		    } else {
		      this.options = {
		        length: lengthOrOptions,
		        binary: binary ?? false
		      };
		    }
		  }
		  _checkOptionSupport(dialect) {
		    if (!dialect.supports.dataTypes.COLLATE_BINARY && this.options.binary) {
		      (0, import_data_types_utils.throwUnsupportedDataType)(dialect, "STRING.BINARY");
		    }
		  }
		  toSql() {
		    return (0, import_join_sql_fragments.joinSQLFragments)([
		      `VARCHAR(${this.options.length ?? 255})`,
		      this.options.binary && "BINARY"
		    ]);
		  }
		  validate(value) {
		    if (typeof value === "string") {
		      return;
		    }
		    if (!this.options.binary) {
		      import_errors.ValidationErrorItem.throwDataTypeValidationError(
		        `${import_node_util.default.inspect(value)} is not a valid string. Only the string type is accepted for non-binary strings.`
		      );
		    }
		    rejectBlobs(value);
		    if (Buffer.isBuffer(value)) {
		      return;
		    }
		    if (value instanceof Uint8Array || value instanceof ArrayBuffer) {
		      return;
		    }
		    import_errors.ValidationErrorItem.throwDataTypeValidationError(
		      `${import_node_util.default.inspect(value)} is not a valid binary value: Only strings, Buffer, Uint8Array and ArrayBuffer are supported.`
		    );
		  }
		  get BINARY() {
		    return this._construct({
		      ...this.options,
		      binary: true
		    });
		  }
		  static get BINARY() {
		    return new this({ binary: true });
		  }
		  escape(value) {
		    if (Buffer.isBuffer(value)) {
		      return this._getDialect().escapeBuffer(value);
		    }
		    return this._getDialect().escapeString(value);
		  }
		  toBindableValue(value) {
		    return this.sanitize(value);
		  }
		}
		class CHAR extends STRING {
		  /** @hidden */
		  static [kDataTypeIdentifier] = "CHAR";
		  _checkOptionSupport(dialect) {
		    if (!dialect.supports.dataTypes.CHAR) {
		      (0, import_data_types_utils.throwUnsupportedDataType)(dialect, "CHAR");
		    }
		    if (!dialect.supports.dataTypes.COLLATE_BINARY && this.options.binary) {
		      (0, import_data_types_utils.throwUnsupportedDataType)(dialect, "CHAR.BINARY");
		    }
		  }
		  toSql() {
		    return (0, import_join_sql_fragments.joinSQLFragments)([
		      `CHAR(${this.options.length ?? 255})`,
		      this.options.binary && "BINARY"
		    ]);
		  }
		}
		const validTextLengths = ["tiny", "medium", "long"];
		class TEXT extends AbstractDataType {
		  /** @hidden */
		  static [kDataTypeIdentifier] = "TEXT";
		  options;
		  /**
		   * @param lengthOrOptions could be tiny, medium, long.
		   */
		  constructor(lengthOrOptions) {
		    var _a;
		    super();
		    const length = (_a = typeof lengthOrOptions === "object" ? lengthOrOptions.length : lengthOrOptions) == null ? void 0 : _a.toLowerCase();
		    if (length != null && !validTextLengths.includes(length)) {
		      throw new TypeError(`If specified, the "length" option must be one of: ${validTextLengths.join(", ")}`);
		    }
		    this.options = {
		      length
		    };
		  }
		  toSql() {
		    switch (this.options.length) {
		      case "tiny":
		        return "TINYTEXT";
		      case "medium":
		        return "MEDIUMTEXT";
		      case "long":
		        return "LONGTEXT";
		      default:
		        return "TEXT";
		    }
		  }
		  validate(value) {
		    if (typeof value !== "string") {
		      import_errors.ValidationErrorItem.throwDataTypeValidationError(
		        import_node_util.default.format("%s is not a valid string", value)
		      );
		    }
		  }
		}
		class CITEXT extends AbstractDataType {
		  /** @hidden */
		  static [kDataTypeIdentifier] = "CITEXT";
		  toSql() {
		    return "CITEXT";
		  }
		  _checkOptionSupport(dialect) {
		    if (!dialect.supports.dataTypes.CITEXT) {
		      (0, import_data_types_utils.throwUnsupportedDataType)(dialect, "case-insensitive text (CITEXT)");
		    }
		  }
		  validate(value) {
		    if (typeof value !== "string") {
		      import_errors.ValidationErrorItem.throwDataTypeValidationError(
		        import_node_util.default.format("%s is not a valid string", value)
		      );
		    }
		  }
		}
		class BaseNumberDataType extends AbstractDataType {
		  options;
		  constructor(options) {
		    super();
		    this.options = { ...options };
		  }
		  getNumberSqlTypeName() {
		    throw new Error(`getNumberSqlTypeName has not been implemented in ${this.constructor.name}`);
		  }
		  toSql() {
		    let result = this.getNumberSqlTypeName();
		    if (this.options.unsigned && this._supportsNativeUnsigned(this._getDialect())) {
		      result += " UNSIGNED";
		    }
		    if (this.options.zerofill) {
		      result += " ZEROFILL";
		    }
		    return result;
		  }
		  _supportsNativeUnsigned(_dialect) {
		    return false;
		  }
		  validate(value) {
		    if (typeof value === "number" && Number.isInteger(value) && !Number.isSafeInteger(value)) {
		      import_errors.ValidationErrorItem.throwDataTypeValidationError(
		        import_node_util.default.format(`${this.constructor.name} received an integer % that is not a safely represented using the JavaScript number type. Use a JavaScript bigint or a string instead.`, value)
		      );
		    }
		    if (!import_validator_extras.validator.isFloat(String(value))) {
		      import_errors.ValidationErrorItem.throwDataTypeValidationError(
		        `${import_node_util.default.inspect(value)} is not a valid ${this.toString().toLowerCase()}`
		      );
		    }
		  }
		  escape(value) {
		    return String(this.toBindableValue(value));
		  }
		  toBindableValue(num) {
		    this.validate(num);
		    if (Number.isNaN(num)) {
		      return "NaN";
		    }
		    if (num === Number.NEGATIVE_INFINITY || num === Number.POSITIVE_INFINITY) {
		      const sign = num < 0 ? "-" : "";
		      return `${sign}Infinity`;
		    }
		    return num;
		  }
		  getBindParamSql(value, options) {
		    return options.bindParam(value);
		  }
		  get UNSIGNED() {
		    return this._construct({ ...this.options, unsigned: true });
		  }
		  get ZEROFILL() {
		    return this._construct({ ...this.options, zerofill: true });
		  }
		  static get UNSIGNED() {
		    return new this({ unsigned: true });
		  }
		  static get ZEROFILL() {
		    return new this({ zerofill: true });
		  }
		}
		class BaseIntegerDataType extends BaseNumberDataType {
		  constructor(optionsOrLength) {
		    if (typeof optionsOrLength === "number") {
		      super({ length: optionsOrLength });
		    } else {
		      super(optionsOrLength ?? {});
		    }
		  }
		  validate(value) {
		    super.validate(value);
		    if (typeof value === "number" && !Number.isInteger(value)) {
		      import_errors.ValidationErrorItem.throwDataTypeValidationError(`${import_node_util.default.inspect(value)} is not a valid ${this.toString().toLowerCase()}`);
		    }
		    if (!import_validator_extras.validator.isInt(String(value))) {
		      import_errors.ValidationErrorItem.throwDataTypeValidationError(`${import_node_util.default.inspect(value)} is not a valid ${this.toString().toLowerCase()}`);
		    }
		  }
		  sanitize(value) {
		    if (typeof value === "string" || typeof value === "bigint") {
		      const out = (0, import_parse_number.parseNumber)(value);
		      if (Number.isNaN(out)) {
		        return value;
		      }
		      return out;
		    }
		    return value;
		  }
		  parseDatabaseValue(value) {
		    return this.sanitize(value);
		  }
		  _checkOptionSupport(dialect) {
		    super._checkOptionSupport(dialect);
		    if (this.options.zerofill && !dialect.supports.dataTypes.INTS.zerofill) {
		      (0, import_data_types_utils.throwUnsupportedDataType)(dialect, `${this.getDataTypeId()}.ZEROFILL`);
		    }
		  }
		  _supportsNativeUnsigned(_dialect) {
		    return _dialect.supports.dataTypes.INTS.unsigned;
		  }
		  toSql() {
		    let result = this.getNumberSqlTypeName();
		    if (this.options.length != null) {
		      result += `(${this.options.length})`;
		    }
		    if (this.options.unsigned && this._supportsNativeUnsigned(this._getDialect())) {
		      result += " UNSIGNED";
		    }
		    if (this.options.zerofill) {
		      result += " ZEROFILL";
		    }
		    return result;
		  }
		}
		class TINYINT extends BaseIntegerDataType {
		  /** @hidden */
		  static [kDataTypeIdentifier] = "TINYINT";
		  getNumberSqlTypeName() {
		    return "TINYINT";
		  }
		}
		class SMALLINT extends BaseIntegerDataType {
		  /** @hidden */
		  static [kDataTypeIdentifier] = "SMALLINT";
		  getNumberSqlTypeName() {
		    return "SMALLINT";
		  }
		}
		class MEDIUMINT extends BaseIntegerDataType {
		  /** @hidden */
		  static [kDataTypeIdentifier] = "MEDIUMINT";
		  getNumberSqlTypeName() {
		    return "MEDIUMINT";
		  }
		}
		class INTEGER extends BaseIntegerDataType {
		  /** @hidden */
		  static [kDataTypeIdentifier] = "INTEGER";
		  getNumberSqlTypeName() {
		    return "INTEGER";
		  }
		}
		class BIGINT extends BaseIntegerDataType {
		  /** @hidden */
		  static [kDataTypeIdentifier] = "BIGINT";
		  getNumberSqlTypeName() {
		    return "BIGINT";
		  }
		  _checkOptionSupport(dialect) {
		    super._checkOptionSupport(dialect);
		    if (this.options.unsigned && !this._supportsNativeUnsigned(dialect)) {
		      (0, import_data_types_utils.throwUnsupportedDataType)(dialect, `${this.getDataTypeId()}.UNSIGNED`);
		    }
		  }
		  sanitize(value) {
		    if (typeof value === "bigint") {
		      return value;
		    }
		    if (typeof value !== "string" && typeof value !== "number") {
		      return value;
		    }
		    return String((0, import_parse_number.parseBigInt)(value));
		  }
		}
		class BaseDecimalNumberDataType extends BaseNumberDataType {
		  constructor(precisionOrOptions, scale) {
		    if ((0, import_isObject.default)(precisionOrOptions)) {
		      super(precisionOrOptions);
		    } else {
		      super({});
		      this.options.precision = precisionOrOptions;
		      this.options.scale = scale;
		    }
		    if (this.options.scale != null && this.options.precision == null) {
		      throw new Error(`The ${this.getDataTypeId()} DataType requires that the "precision" option be specified if the "scale" option is specified.`);
		    }
		    if (this.options.scale == null && this.options.precision != null) {
		      throw new Error(`The ${this.getDataTypeId()} DataType requires that the "scale" option be specified if the "precision" option is specified.`);
		    }
		  }
		  validate(value) {
		    var _a, _b;
		    if (Number.isNaN(value)) {
		      const typeId = this.getDataTypeId();
		      const dialect = this._getDialect();
		      if ((_a = dialect.supports.dataTypes[typeId]) == null ? void 0 : _a.NaN) {
		        return;
		      }
		      import_errors.ValidationErrorItem.throwDataTypeValidationError(`${import_node_util.default.inspect(value)} is not a valid ${this.toString().toLowerCase()}`);
		    }
		    if (value === Number.POSITIVE_INFINITY || value === Number.NEGATIVE_INFINITY) {
		      const typeId = this.getDataTypeId();
		      const dialect = this._getDialect();
		      if ((_b = dialect.supports.dataTypes[typeId]) == null ? void 0 : _b.infinity) {
		        return;
		      }
		      import_errors.ValidationErrorItem.throwDataTypeValidationError(`${import_node_util.default.inspect(value)} is not a valid ${this.toString().toLowerCase()}`);
		    }
		    super.validate(value);
		  }
		  isUnconstrained() {
		    return this.options.scale == null && this.options.precision == null;
		  }
		  _checkOptionSupport(dialect) {
		    super._checkOptionSupport(dialect);
		    const typeId = this.getDataTypeId();
		    if (typeId !== "FLOAT" && typeId !== "DOUBLE" && typeId !== "DECIMAL" && typeId !== "REAL") {
		      return;
		    }
		    const supportTable = dialect.supports.dataTypes[typeId];
		    if (!supportTable) {
		      (0, import_data_types_utils.throwUnsupportedDataType)(dialect, this.getDataTypeId());
		    }
		    if (!supportTable.zerofill && this.options.zerofill) {
		      (0, import_data_types_utils.throwUnsupportedDataType)(dialect, `${this.getDataTypeId()}.ZEROFILL`);
		    }
		    if (typeId === "DECIMAL") {
		      return;
		    }
		    const supportTable2 = dialect.supports.dataTypes[typeId];
		    if (!supportTable2.scaleAndPrecision && (this.options.scale != null || this.options.precision != null)) {
		      dialect.warnDataTypeIssue(`${dialect.name} does not support ${this.getDataTypeId()} with scale or precision specified. These options are ignored.`);
		      delete this.options.scale;
		      delete this.options.precision;
		    }
		  }
		  toSql() {
		    let sql = this.getNumberSqlTypeName();
		    if (!this.isUnconstrained()) {
		      sql += `(${this.options.precision}, ${this.options.scale})`;
		    }
		    if (this.options.unsigned && this._supportsNativeUnsigned(this._getDialect())) {
		      sql += " UNSIGNED";
		    }
		    if (this.options.zerofill) {
		      sql += " ZEROFILL";
		    }
		    return sql;
		  }
		}
		class FLOAT extends BaseDecimalNumberDataType {
		  /** @hidden */
		  static [kDataTypeIdentifier] = "FLOAT";
		  getNumberSqlTypeName() {
		    throw new Error(`getNumberSqlTypeName is not implemented by default in the FLOAT DataType because 'float' has very different meanings in different dialects.
In Sequelize, DataTypes.FLOAT must be a single-precision floating point, and DataTypes.DOUBLE must be a double-precision floating point.
Please override this method in your dialect, and provide the best available type for single-precision floating points.
If single-precision floating points are not available in your dialect, you may return a double-precision floating point type instead, as long as you print a warning.
If neither single precision nor double precision IEEE 754 floating point numbers are available in your dialect, you must throw an error in the _checkOptionSupport method.`);
		  }
		  _supportsNativeUnsigned(_dialect) {
		    return _dialect.supports.dataTypes.FLOAT.unsigned;
		  }
		}
		class REAL extends BaseDecimalNumberDataType {
		  /** @hidden */
		  static [kDataTypeIdentifier] = "REAL";
		  _checkOptionSupport(dialect) {
		    super._checkOptionSupport(dialect);
		    (0, import_deprecations.doNotUseRealDataType)();
		  }
		  _supportsNativeUnsigned(_dialect) {
		    return _dialect.supports.dataTypes.REAL.unsigned;
		  }
		  getNumberSqlTypeName() {
		    return "REAL";
		  }
		}
		class DOUBLE extends BaseDecimalNumberDataType {
		  /** @hidden */
		  static [kDataTypeIdentifier] = "DOUBLE";
		  _supportsNativeUnsigned(_dialect) {
		    return _dialect.supports.dataTypes.DOUBLE.unsigned;
		  }
		  getNumberSqlTypeName() {
		    return "DOUBLE PRECISION";
		  }
		}
		class DECIMAL extends BaseDecimalNumberDataType {
		  /** @hidden */
		  static [kDataTypeIdentifier] = "DECIMAL";
		  _checkOptionSupport(dialect) {
		    super._checkOptionSupport(dialect);
		    const decimalSupport = dialect.supports.dataTypes.DECIMAL;
		    if (!decimalSupport) {
		      (0, import_data_types_utils.throwUnsupportedDataType)(dialect, "DECIMAL");
		    }
		    if (this.isUnconstrained() && !decimalSupport.unconstrained) {
		      throw new Error(`${dialect.name} does not support unconstrained DECIMAL types. Please specify the "precision" and "scale" options.`);
		    }
		    if (!this.isUnconstrained() && !decimalSupport.constrained) {
		      dialect.warnDataTypeIssue(`${dialect.name} does not support constrained DECIMAL types. The "precision" and "scale" options will be ignored.`);
		      this.options.scale = void 0;
		      this.options.precision = void 0;
		    }
		  }
		  sanitize(value) {
		    if (typeof value === "number") {
		      if (Number.isNaN(value)) {
		        return value;
		      }
		      if (Number.isInteger(value) && !Number.isSafeInteger(value)) {
		        throw new Error(`${this.getDataTypeId()} received an integer ${import_node_util.default.inspect(value)} that is not a safely represented using the JavaScript number type. Use a JavaScript bigint or a string instead.`);
		      }
		    }
		    return String(value);
		  }
		  _supportsNativeUnsigned(_dialect) {
		    const decimalSupport = _dialect.supports.dataTypes.DECIMAL;
		    return decimalSupport && decimalSupport.unsigned;
		  }
		  getNumberSqlTypeName() {
		    return "DECIMAL";
		  }
		}
		class BOOLEAN extends AbstractDataType {
		  /** @hidden */
		  static [kDataTypeIdentifier] = "BOOLEAN";
		  toSql() {
		    return "BOOLEAN";
		  }
		  validate(value) {
		    if (typeof value !== "boolean") {
		      import_errors.ValidationErrorItem.throwDataTypeValidationError(
		        import_node_util.default.format("%O is not a valid boolean", value)
		      );
		    }
		  }
		  parseDatabaseValue(value) {
		    if (typeof value === "boolean") {
		      return value;
		    }
		    if (value === 1) {
		      return true;
		    }
		    if (value === 0) {
		      return false;
		    }
		    if (Buffer.isBuffer(value) && value.length === 1) {
		      if (value[0] === 1) {
		        return true;
		      }
		      if (value[0] === 0) {
		        return false;
		      }
		    }
		    throw new Error(`Received invalid boolean value from DB: ${import_node_util.default.inspect(value)}`);
		  }
		  escape(value) {
		    return value ? "true" : "false";
		  }
		  toBindableValue(value) {
		    return Boolean(value);
		  }
		}
		class TIME extends AbstractDataType {
		  /** @hidden */
		  static [kDataTypeIdentifier] = "TIME";
		  options;
		  /**
		   * @param precisionOrOptions precision to allow storing milliseconds
		   */
		  constructor(precisionOrOptions) {
		    super();
		    this.options = {
		      precision: typeof precisionOrOptions === "object" ? precisionOrOptions.precision : precisionOrOptions
		    };
		  }
		  _checkOptionSupport(dialect) {
		    super._checkOptionSupport(dialect);
		    if (this.options.precision != null && !dialect.supports.dataTypes.TIME.precision) {
		      (0, import_data_types_utils.throwUnsupportedDataType)(dialect, "TIME(precision)");
		    }
		  }
		  toSql() {
		    if (this.options.precision != null) {
		      return `TIME(${this.options.precision})`;
		    }
		    return "TIME";
		  }
		}
		class DATE extends AbstractDataType {
		  /** @hidden */
		  static [kDataTypeIdentifier] = "DATE";
		  options;
		  /**
		   * @param precisionOrOptions precision to allow storing milliseconds
		   */
		  constructor(precisionOrOptions) {
		    super();
		    this.options = {
		      precision: typeof precisionOrOptions === "object" ? precisionOrOptions.precision : precisionOrOptions
		    };
		    if (this.options.precision != null && (this.options.precision < 0 || !Number.isInteger(this.options.precision))) {
		      throw new TypeError('Option "precision" must be a positive integer');
		    }
		  }
		  toSql() {
		    if (this.options.precision != null) {
		      return `DATETIME(${this.options.precision})`;
		    }
		    return "DATETIME";
		  }
		  validate(value) {
		    if (!import_validator_extras.validator.isDate(String(value))) {
		      import_errors.ValidationErrorItem.throwDataTypeValidationError(
		        import_node_util.default.format("%O is not a valid date", value)
		      );
		    }
		  }
		  sanitize(value) {
		    if (value instanceof Date || import_dayjs.default.isDayjs(value) || isMoment(value)) {
		      return value;
		    }
		    if (typeof value === "string" || typeof value === "number") {
		      return new Date(value);
		    }
		    throw new TypeError(`${import_node_util.default.inspect(value)} cannot be converted to a Date object, and is not a DayJS nor Moment object`);
		  }
		  parseDatabaseValue(value) {
		    return this.sanitize(value);
		  }
		  areValuesEqual(value, originalValue) {
		    if (originalValue && Boolean(value) && (value === originalValue || value instanceof Date && originalValue instanceof Date && value.getTime() === originalValue.getTime())) {
		      return true;
		    }
		    if (!originalValue && !value && originalValue === value) {
		      return true;
		    }
		    return false;
		  }
		  _applyTimezone(date) {
		    const timezone = this._getDialect().sequelize.options.timezone;
		    if (timezone) {
		      if ((0, import_dayjs2.isValidTimeZone)(timezone)) {
		        return (0, import_dayjs.default)(date).tz(timezone);
		      }
		      return (0, import_dayjs.default)(date).utcOffset(timezone);
		    }
		    return (0, import_dayjs.default)(date);
		  }
		  toBindableValue(date) {
		    return this._applyTimezone(date).format("YYYY-MM-DD HH:mm:ss.SSS Z");
		  }
		}
		class DATEONLY extends AbstractDataType {
		  /** @hidden */
		  static [kDataTypeIdentifier] = "DATEONLY";
		  toSql() {
		    return "DATE";
		  }
		  toBindableValue(date) {
		    return import_dayjs.default.utc(date).format("YYYY-MM-DD");
		  }
		  sanitize(value) {
		    if (typeof value !== "string" && typeof value !== "number" && !(value instanceof Date)) {
		      throw new TypeError(`${value} cannot be normalized into a DateOnly string.`);
		    }
		    if (value) {
		      return import_dayjs.default.utc(value).format("YYYY-MM-DD");
		    }
		    return value;
		  }
		  areValuesEqual(value, originalValue) {
		    if (originalValue && Boolean(value) && originalValue === value) {
		      return true;
		    }
		    if (!originalValue && !value && originalValue === value) {
		      return true;
		    }
		    return false;
		  }
		}
		class HSTORE extends AbstractDataType {
		  /** @hidden */
		  static [kDataTypeIdentifier] = "HSTORE";
		  _checkOptionSupport(dialect) {
		    super._checkOptionSupport(dialect);
		    if (!dialect.supports.dataTypes.HSTORE) {
		      (0, import_data_types_utils.throwUnsupportedDataType)(dialect, "HSTORE");
		    }
		  }
		  validate(value) {
		    if (!(0, import_check.isPlainObject)(value)) {
		      import_errors.ValidationErrorItem.throwDataTypeValidationError(import_node_util.default.format("%O is not a valid hstore, it must be a plain object", value));
		    }
		    const hstore = value;
		    for (const key of Object.keys(hstore)) {
		      if (!(0, import_check.isString)(hstore[key])) {
		        import_errors.ValidationErrorItem.throwDataTypeValidationError(import_node_util.default.format(`%O is not a valid hstore, its values must be strings but ${key} is %O`, hstore, hstore[key]));
		      }
		    }
		  }
		  toSql() {
		    return "HSTORE";
		  }
		}
		class JSON extends AbstractDataType {
		  /** @hidden */
		  static [kDataTypeIdentifier] = "JSON";
		  _checkOptionSupport(dialect) {
		    super._checkOptionSupport(dialect);
		    if (!dialect.supports.dataTypes.JSON) {
		      (0, import_data_types_utils.throwUnsupportedDataType)(dialect, "JSON");
		    }
		  }
		  /**
		   * We stringify null too.
		   */
		  acceptsNull() {
		    return true;
		  }
		  toBindableValue(value) {
		    return globalThis.JSON.stringify(value);
		  }
		  toSql() {
		    return "JSON";
		  }
		}
		class JSONB extends JSON {
		  /** @hidden */
		  static [kDataTypeIdentifier] = "JSONB";
		  _checkOptionSupport(dialect) {
		    super._checkOptionSupport(dialect);
		    if (!dialect.supports.dataTypes.JSONB) {
		      (0, import_data_types_utils.throwUnsupportedDataType)(dialect, "JSONB");
		    }
		  }
		  toSql() {
		    return "JSONB";
		  }
		}
		class NOW extends AbstractDataType {
		  /** @hidden */
		  static [kDataTypeIdentifier] = "NOW";
		  toSql() {
		    return "NOW";
		  }
		}
		class BLOB extends AbstractDataType {
		  /** @hidden */
		  static [kDataTypeIdentifier] = "BLOB";
		  options;
		  /**
		   * @param lengthOrOptions could be tiny, medium, long.
		   */
		  constructor(lengthOrOptions) {
		    super();
		    this.options = {
		      length: typeof lengthOrOptions === "object" ? lengthOrOptions.length : lengthOrOptions
		    };
		  }
		  toSql() {
		    switch (this.options.length) {
		      case "tiny":
		        return "TINYBLOB";
		      case "medium":
		        return "MEDIUMBLOB";
		      case "long":
		        return "LONGBLOB";
		      default:
		        return "BLOB";
		    }
		  }
		  validate(value) {
		    if (Buffer.isBuffer(value) || typeof value === "string" || value instanceof Uint8Array || value instanceof ArrayBuffer) {
		      return;
		    }
		    rejectBlobs(value);
		    import_errors.ValidationErrorItem.throwDataTypeValidationError(
		      `${import_node_util.default.inspect(value)} is not a valid binary value: Only strings, Buffer, Uint8Array and ArrayBuffer are supported.`
		    );
		  }
		  sanitize(value) {
		    if (value instanceof Uint8Array || value instanceof ArrayBuffer) {
		      return (0, import_buffer.makeBufferFromTypedArray)(value);
		    }
		    if (typeof value === "string") {
		      return Buffer.from(value);
		    }
		    return value;
		  }
		  escape(value) {
		    const buf = typeof value === "string" ? Buffer.from(value, "binary") : value;
		    return this._getDialect().escapeBuffer(buf);
		  }
		  getBindParamSql(value, options) {
		    return options.bindParam(value);
		  }
		}
		const defaultRangeParser = (0, import_range.buildRangeParser)(import_identity.default);
		class RANGE extends AbstractDataType {
		  /** @hidden */
		  static [kDataTypeIdentifier] = "RANGE";
		  options;
		  /**
		   * @param subtypeOrOptions A subtype for range, like RANGE(DATE)
		   */
		  constructor(subtypeOrOptions) {
		    super();
		    const subtypeRaw = ((0, import_data_types_utils.isDataType)(subtypeOrOptions) ? subtypeOrOptions : subtypeOrOptions == null ? void 0 : subtypeOrOptions.subtype) ?? new INTEGER();
		    const subtype = (0, import_data_types_utils.isDataTypeClass)(subtypeRaw) ? new subtypeRaw() : subtypeRaw;
		    this.options = {
		      subtype
		    };
		  }
		  _checkOptionSupport(dialect) {
		    super._checkOptionSupport(dialect);
		    if (!dialect.supports.dataTypes.RANGE) {
		      (0, import_data_types_utils.throwUnsupportedDataType)(dialect, "RANGE");
		    }
		  }
		  toDialectDataType(dialect) {
		    let replacement = super.toDialectDataType(dialect);
		    if (replacement === this) {
		      replacement = replacement.clone();
		    }
		    replacement.options.subtype = replacement.options.subtype.toDialectDataType(dialect);
		    return replacement;
		  }
		  parseDatabaseValue(value) {
		    if (typeof value === "string") {
		      value = defaultRangeParser(value);
		    }
		    if (!Array.isArray(value)) {
		      throw new Error(`DataTypes.RANGE received a non-range value from the database: ${import_node_util.default.inspect(value)}`);
		    }
		    return value.map((part) => {
		      return {
		        ...part,
		        value: this.options.subtype.parseDatabaseValue(part.value)
		      };
		    });
		  }
		  sanitize(value) {
		    if (!Array.isArray(value)) {
		      return value;
		    }
		    if (value.length === 0) {
		      return value;
		    }
		    let [low, high] = value;
		    if (!(0, import_check.isPlainObject)(low)) {
		      low = { value: low ?? null, inclusive: true };
		    }
		    if (!(0, import_check.isPlainObject)(high)) {
		      high = { value: high ?? null, inclusive: false };
		    }
		    return [this.#sanitizeSide(low), this.#sanitizeSide(high)];
		  }
		  #sanitizeSide(rangePart) {
		    if (rangePart.value == null) {
		      return rangePart;
		    }
		    return { ...rangePart, value: this.options.subtype.sanitize(rangePart.value) };
		  }
		  validate(value) {
		    if (!Array.isArray(value) || value.length !== 2 && value.length !== 0) {
		      import_errors.ValidationErrorItem.throwDataTypeValidationError(
		        `A range must either be an array with two elements, or an empty array for the empty range. Got ${import_node_util.default.inspect(value)}.`
		      );
		    }
		  }
		  toSql() {
		    throw new Error("RANGE has not been implemented in this dialect.");
		  }
		}
		class UUID extends AbstractDataType {
		  /** @hidden */
		  static [kDataTypeIdentifier] = "UUID";
		  validate(value) {
		    if (typeof value !== "string" || !import_validator_extras.validator.isUUID(value)) {
		      import_errors.ValidationErrorItem.throwDataTypeValidationError(
		        import_node_util.default.format("%O is not a valid uuid", value)
		      );
		    }
		  }
		  toSql() {
		    return "UUID";
		  }
		}
		class UUIDV1 extends AbstractDataType {
		  /** @hidden */
		  static [kDataTypeIdentifier] = "UUIDV1";
		  validate(value) {
		    if (typeof value !== "string" || !import_validator_extras.validator.isUUID(value, 1)) {
		      import_errors.ValidationErrorItem.throwDataTypeValidationError(
		        import_node_util.default.format("%O is not a valid uuidv1", value)
		      );
		    }
		  }
		  toSql() {
		    throw new Error("toSQL should not be called on DataTypes.UUIDV1");
		  }
		}
		class UUIDV4 extends AbstractDataType {
		  /** @hidden */
		  static [kDataTypeIdentifier] = "UUIDV4";
		  validate(value) {
		    if (typeof value !== "string" || !import_validator_extras.validator.isUUID(value, 4)) {
		      import_errors.ValidationErrorItem.throwDataTypeValidationError(
		        import_node_util.default.format("%O is not a valid uuidv4", value)
		      );
		    }
		  }
		  toSql() {
		    throw new Error("toSQL should not be called on DataTypes.UUIDV4");
		  }
		}
		class VIRTUAL extends AbstractDataType {
		  /** @hidden */
		  static [kDataTypeIdentifier] = "VIRTUAL";
		  options;
		  /**
		   * @param [returnTypeOrOptions] return type for virtual type, or an option bag
		   * @param [attributeDependencies] array of attributes this virtual type is dependent on
		   */
		  constructor(returnTypeOrOptions, attributeDependencies) {
		    super();
		    const returnType = returnTypeOrOptions == null ? void 0 : (0, import_data_types_utils.isDataType)(returnTypeOrOptions) ? returnTypeOrOptions : returnTypeOrOptions.returnType;
		    this.options = {
		      returnType: returnType ? (0, import_data_types_utils.dataTypeClassOrInstanceToInstance)(returnType) : void 0,
		      attributeDependencies: ((0, import_data_types_utils.isDataType)(returnTypeOrOptions) ? attributeDependencies : returnTypeOrOptions == null ? void 0 : returnTypeOrOptions.attributeDependencies) ?? []
		    };
		  }
		  toSql() {
		    throw new Error("toSQL should not be called on DataTypes.VIRTUAL");
		  }
		  get returnType() {
		    return this.options.returnType;
		  }
		  get attributeDependencies() {
		    return this.options.attributeDependencies;
		  }
		}
		class ENUM extends AbstractDataType {
		  /** @hidden */
		  static [kDataTypeIdentifier] = "ENUM";
		  options;
		  constructor(...args) {
		    super();
		    let values;
		    if ((0, import_isObject.default)(args[0])) {
		      if (args.length > 1) {
		        throw new TypeError("DataTypes.ENUM has been constructed incorrectly: Its first parameter is the option bag or the array of values, but more than one parameter has been provided.");
		      }
		      if (Array.isArray(args[0])) {
		        values = args[0];
		      } else {
		        values = args[0].values;
		      }
		    } else {
		      values = args;
		    }
		    if (values.length === 0) {
		      throw new TypeError(`
DataTypes.ENUM cannot be used without specifying its possible enum values.

Note that the "values" property has been removed from column definitions. The following is no longer supported:

sequelize.define('MyModel', {
  roles: {
    type: DataTypes.ENUM,
    values: ['admin', 'user'],
  },
});

Instead, define enum values like this:

sequelize.define('MyModel', {
  roles: {
    type: DataTypes.ENUM(['admin', 'user']),
  },
});
`.trim());
		    }
		    for (const value of values) {
		      if (typeof value !== "string") {
		        throw new TypeError(import_node_util.default.format(`One of the possible values passed to DataTypes.ENUM (%O) is not a string. Only strings can be used as enum values.`, value));
		      }
		    }
		    this.options = {
		      values
		    };
		  }
		  validate(value) {
		    if (!this.options.values.includes(value)) {
		      import_errors.ValidationErrorItem.throwDataTypeValidationError(
		        import_node_util.default.format("%O is not a valid choice for enum %O", value, this.options.values)
		      );
		    }
		  }
		  toSql() {
		    throw new Error(`ENUM has not been implemented in the ${this._getDialect().name} dialect.`);
		  }
		}
		class ARRAY extends AbstractDataType {
		  /** @hidden */
		  static [kDataTypeIdentifier] = "ARRAY";
		  options;
		  /**
		   * @param typeOrOptions type of array values
		   */
		  constructor(typeOrOptions) {
		    super();
		    const rawType = (0, import_data_types_utils.isDataType)(typeOrOptions) ? typeOrOptions : typeOrOptions == null ? void 0 : typeOrOptions.type;
		    if (!rawType) {
		      throw new TypeError("DataTypes.ARRAY is missing type definition for its values.");
		    }
		    this.options = {
		      type: (0, import_check.isString)(rawType) ? rawType : (0, import_data_types_utils.dataTypeClassOrInstanceToInstance)(rawType)
		    };
		  }
		  toSql() {
		    return `${(0, import_data_types_utils.attributeTypeToSql)(this.options.type)}[]`;
		  }
		  validate(value) {
		    if (!Array.isArray(value)) {
		      import_errors.ValidationErrorItem.throwDataTypeValidationError(
		        import_node_util.default.format("%O is not a valid array", value)
		      );
		    }
		    if ((0, import_check.isString)(this.options.type)) {
		      return;
		    }
		    const subType = this.options.type;
		    for (const item of value) {
		      subType.validate(item);
		    }
		  }
		  sanitize(value) {
		    if (!Array.isArray(value)) {
		      return value;
		    }
		    if ((0, import_check.isString)(this.options.type)) {
		      return;
		    }
		    const subType = this.options.type;
		    return value.map((item) => subType.sanitize(item));
		  }
		  parseDatabaseValue(value) {
		    if (!Array.isArray(value)) {
		      throw new Error(`DataTypes.ARRAY Received a non-array value from database: ${import_node_util.default.inspect(value)}`);
		    }
		    if ((0, import_check.isString)(this.options.type)) {
		      return value;
		    }
		    const subType = this.options.type;
		    return value.map((item) => subType.parseDatabaseValue(item));
		  }
		  toBindableValue(value) {
		    if ((0, import_check.isString)(this.options.type)) {
		      return value;
		    }
		    const subType = this.options.type;
		    return value.map((val) => subType.toBindableValue(val));
		  }
		  _checkOptionSupport(dialect) {
		    super._checkOptionSupport(dialect);
		    if (!dialect.supports.dataTypes.ARRAY) {
		      (0, import_data_types_utils.throwUnsupportedDataType)(dialect, "ARRAY");
		    }
		  }
		  toDialectDataType(dialect) {
		    let replacement = super.toDialectDataType(dialect);
		    if (replacement === this) {
		      replacement = replacement.clone();
		    }
		    if (!(0, import_check.isString)(replacement.options.type)) {
		      replacement.options.type = replacement.options.type.toDialectDataType(dialect);
		    }
		    return replacement;
		  }
		  attachUsageContext(usageContext) {
		    if (!(0, import_check.isString)(this.options.type)) {
		      this.options.type.attachUsageContext(usageContext);
		    }
		    return super.attachUsageContext(usageContext);
		  }
		  static is(obj, type) {
		    return obj instanceof ARRAY && obj.options.type instanceof type;
		  }
		}
		class GEOMETRY extends AbstractDataType {
		  /** @hidden */
		  static [kDataTypeIdentifier] = "GEOMETRY";
		  options;
		  constructor(typeOrOptions, srid) {
		    super();
		    this.options = (0, import_isObject.default)(typeOrOptions) ? { ...typeOrOptions } : { type: typeOrOptions, srid };
		  }
		  _checkOptionSupport(dialect) {
		    super._checkOptionSupport(dialect);
		    if (!dialect.supports.dataTypes.GEOMETRY) {
		      (0, import_data_types_utils.throwUnsupportedDataType)(dialect, "GEOMETRY");
		    }
		  }
		  validate(value) {
		    try {
		      (0, import_geo_json.assertIsGeoJson)(value);
		    } catch (error) {
		      if (!(error instanceof Error)) {
		        throw error;
		      }
		      import_errors.ValidationErrorItem.throwDataTypeValidationError(error.message);
		    }
		    return super.validate(value);
		  }
		  toSql() {
		    return "GEOMETRY";
		  }
		}
		class GEOGRAPHY extends GEOMETRY {
		  /** @hidden */
		  static [kDataTypeIdentifier] = "GEOGRAPHY";
		  _checkOptionSupport(dialect) {
		    if (!dialect.supports.dataTypes.GEOGRAPHY) {
		      (0, import_data_types_utils.throwUnsupportedDataType)(dialect, "GEOGRAPHY");
		    }
		  }
		  toSql() {
		    return "GEOGRAPHY";
		  }
		}
		class CIDR extends AbstractDataType {
		  /** @hidden */
		  static [kDataTypeIdentifier] = "CIDR";
		  _checkOptionSupport(dialect) {
		    if (!dialect.supports.dataTypes.CIDR) {
		      (0, import_data_types_utils.throwUnsupportedDataType)(dialect, "CIDR");
		    }
		  }
		  validate(value) {
		    if (typeof value !== "string" || !import_validator_extras.validator.isIPRange(value)) {
		      import_errors.ValidationErrorItem.throwDataTypeValidationError(
		        import_node_util.default.format("%O is not a valid CIDR", value)
		      );
		    }
		  }
		  toSql() {
		    return "CIDR";
		  }
		}
		class INET extends AbstractDataType {
		  /** @hidden */
		  static [kDataTypeIdentifier] = "INET";
		  _checkOptionSupport(dialect) {
		    if (!dialect.supports.dataTypes.INET) {
		      (0, import_data_types_utils.throwUnsupportedDataType)(dialect, "INET");
		    }
		  }
		  validate(value) {
		    if (typeof value !== "string" || !import_validator_extras.validator.isIP(value)) {
		      import_errors.ValidationErrorItem.throwDataTypeValidationError(
		        import_node_util.default.format("%O is not a valid INET", value)
		      );
		    }
		  }
		  toSql() {
		    return "INET";
		  }
		}
		class MACADDR extends AbstractDataType {
		  /** @hidden */
		  static [kDataTypeIdentifier] = "MACADDR";
		  _checkOptionSupport(dialect) {
		    if (!dialect.supports.dataTypes.MACADDR) {
		      (0, import_data_types_utils.throwUnsupportedDataType)(dialect, "MACADDR");
		    }
		  }
		  validate(value) {
		    if (typeof value !== "string" || !import_validator_extras.validator.isMACAddress(value)) {
		      import_errors.ValidationErrorItem.throwDataTypeValidationError(
		        import_node_util.default.format("%O is not a valid MACADDR", value)
		      );
		    }
		  }
		  toSql() {
		    return "MACADDR";
		  }
		}
		class TSVECTOR extends AbstractDataType {
		  /** @hidden */
		  static [kDataTypeIdentifier] = "TSVECTOR";
		  validate(value) {
		    if (typeof value !== "string") {
		      import_errors.ValidationErrorItem.throwDataTypeValidationError(
		        import_node_util.default.format("%O is not a valid string", value)
		      );
		    }
		  }
		  _checkOptionSupport(dialect) {
		    if (!dialect.supports.dataTypes.TSVECTOR) {
		      (0, import_data_types_utils.throwUnsupportedDataType)(dialect, "TSVECTOR");
		    }
		  }
		  toSql() {
		    return "TSVECTOR";
		  }
		}
		function rejectBlobs(value) {
		  if (import_node_buffer.Blob && value instanceof import_node_buffer.Blob) {
		    import_errors.ValidationErrorItem.throwDataTypeValidationError("Blob instances are not supported values, because reading their data is an async operation. Call blob.arrayBuffer() to get a buffer, and pass that to Sequelize instead.");
		  }
		}
		function assertDataTypeSupported(dialect, dataType) {
		  const typeId = dataType.getDataTypeId();
		  if (typeId in dialect.supports.dataTypes && !dialect.supports.dataTypes[typeId]) {
		    (0, import_data_types_utils.throwUnsupportedDataType)(dialect, typeId);
		  }
		}
		
		return dataTypes$9;
	}

	var dataTypesUtils;
	var hasRequiredDataTypesUtils;

	function requireDataTypesUtils () {
		if (hasRequiredDataTypesUtils) return dataTypesUtils;
		hasRequiredDataTypesUtils = 1;
		var __create = Object.create;
		var __defProp = Object.defineProperty;
		var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
		var __getOwnPropNames = Object.getOwnPropertyNames;
		var __getProtoOf = Object.getPrototypeOf;
		var __hasOwnProp = Object.prototype.hasOwnProperty;
		var __export = (target, all) => {
		  for (var name in all)
		    __defProp(target, name, { get: all[name], enumerable: true });
		};
		var __copyProps = (to, from, except, desc) => {
		  if (from && typeof from === "object" || typeof from === "function") {
		    for (let key of __getOwnPropNames(from))
		      if (!__hasOwnProp.call(to, key) && key !== except)
		        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
		  }
		  return to;
		};
		var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
		  // If the importer is in node compatibility mode or this is not an ESM
		  // file that has been converted to a CommonJS file using a Babel-
		  // compatible transform (i.e. "__esModule" has not been set), then set
		  // "default" to the CommonJS "module.exports" for node compatibility.
		  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
		  mod
		));
		var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
		var data_types_utils_exports = {};
		__export(data_types_utils_exports, {
		  attributeTypeToSql: () => attributeTypeToSql,
		  cloneDataType: () => cloneDataType,
		  dataTypeClassOrInstanceToInstance: () => dataTypeClassOrInstanceToInstance,
		  getDataTypeParser: () => getDataTypeParser,
		  isDataType: () => isDataType,
		  isDataTypeClass: () => isDataTypeClass,
		  normalizeDataType: () => normalizeDataType,
		  throwUnsupportedDataType: () => throwUnsupportedDataType,
		  validateDataType: () => validateDataType
		});
		dataTypesUtils = __toCommonJS(data_types_utils_exports);
		var import_node_util = __toESM(require$$0$1);
		var import_errors = errors;
		var import_data_types = requireDataTypes$8();
		function isDataType(value) {
		  return isDataTypeClass(value) || value instanceof import_data_types.AbstractDataType;
		}
		function isDataTypeClass(value) {
		  return typeof value === "function" && value.prototype instanceof import_data_types.AbstractDataType;
		}
		function cloneDataType(value) {
		  if (typeof value === "string") {
		    return value;
		  }
		  return value.clone();
		}
		function normalizeDataType(Type, dialect) {
		  if (typeof Type === "string") {
		    return Type;
		  }
		  if (typeof Type !== "function" && !(Type instanceof import_data_types.AbstractDataType)) {
		    throw new TypeError(`Expected type to be a string, a DataType class, or a DataType instance, but got ${import_node_util.default.inspect(Type)}.`);
		  }
		  const type = dataTypeClassOrInstanceToInstance(Type);
		  if (!type.belongsToDialect(dialect)) {
		    return type.toDialectDataType(dialect);
		  }
		  return type;
		}
		function dataTypeClassOrInstanceToInstance(Type) {
		  return typeof Type === "function" ? new Type() : Type;
		}
		function validateDataType(value, type, attributeName = "[unnamed]", modelInstance = null) {
		  try {
		    type.validate(value);
		    return null;
		  } catch (error) {
		    if (!(error instanceof import_errors.ValidationErrorItem)) {
		      throw new import_errors.BaseError(`Validation encountered an unexpected error while validating attribute ${attributeName}. (Note: If this error is intended, ${type.constructor.name}#validate must throw an instance of ValidationErrorItem instead)`, {
		        cause: error
		      });
		    }
		    error.path = attributeName;
		    error.value = value;
		    error.instance = modelInstance;
		    error.validatorKey = `${type.constructor.getDataTypeId()} validator`;
		    return error;
		  }
		}
		function attributeTypeToSql(type) {
		  if (typeof type === "string") {
		    return type;
		  }
		  if (type instanceof import_data_types.AbstractDataType) {
		    return type.toSql();
		  }
		  throw new Error("attributeTypeToSql received a type that is neither a string or an instance of AbstractDataType");
		}
		function getDataTypeParser(dialect, dataType) {
		  const type = normalizeDataType(dataType, dialect);
		  return (value) => {
		    return type.parseDatabaseValue(value);
		  };
		}
		function throwUnsupportedDataType(dialect, typeName) {
		  throw new Error(`${dialect.name} does not support the ${typeName} data type.
See https://sequelize.org/docs/v7/other-topics/other-data-types/ for a list of supported data types.`);
		}
		
		return dataTypesUtils;
	}

	var __defProp$r = Object.defineProperty;
	var __getOwnPropDesc$r = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames$r = Object.getOwnPropertyNames;
	var __hasOwnProp$r = Object.prototype.hasOwnProperty;
	var __export$r = (target, all) => {
	  for (var name in all)
	    __defProp$r(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps$r = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames$r(from))
	      if (!__hasOwnProp$r.call(to, key) && key !== except)
	        __defProp$r(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc$r(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS$r = (mod) => __copyProps$r(__defProp$r({}, "__esModule", { value: true }), mod);
	var identifier_exports = {};
	__export$r(identifier_exports, {
	  Identifier: () => Identifier,
	  identifier: () => identifier$1
	});
	var identifier_1 = __toCommonJS$r(identifier_exports);
	var import_base_sql_expression$4 = baseSqlExpression;
	class Identifier extends import_base_sql_expression$4.BaseSqlExpression {
	  constructor(value) {
	    super();
	    this.value = value;
	  }
	}
	function identifier$1(value) {
	  return new Identifier(value);
	}

	var __defProp$q = Object.defineProperty;
	var __getOwnPropDesc$q = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames$q = Object.getOwnPropertyNames;
	var __hasOwnProp$q = Object.prototype.hasOwnProperty;
	var __export$q = (target, all) => {
	  for (var name in all)
	    __defProp$q(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps$q = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames$q(from))
	      if (!__hasOwnProp$q.call(to, key) && key !== except)
	        __defProp$q(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc$q(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS$q = (mod) => __copyProps$q(__defProp$q({}, "__esModule", { value: true }), mod);
	var list_exports = {};
	__export$q(list_exports, {
	  List: () => List,
	  list: () => list
	});
	var list_1 = __toCommonJS$q(list_exports);
	var import_base_sql_expression$3 = baseSqlExpression;
	class List extends import_base_sql_expression$3.BaseSqlExpression {
	  constructor(values) {
	    super();
	    this.values = values;
	  }
	}
	function list(values) {
	  return new List(values);
	}

	var __defProp$p = Object.defineProperty;
	var __getOwnPropDesc$p = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames$p = Object.getOwnPropertyNames;
	var __hasOwnProp$p = Object.prototype.hasOwnProperty;
	var __export$p = (target, all) => {
	  for (var name in all)
	    __defProp$p(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps$p = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames$p(from))
	      if (!__hasOwnProp$p.call(to, key) && key !== except)
	        __defProp$p(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc$p(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS$p = (mod) => __copyProps$p(__defProp$p({}, "__esModule", { value: true }), mod);
	var fn_exports = {};
	__export$p(fn_exports, {
	  Fn: () => Fn,
	  fn: () => fn
	});
	var fn_1 = __toCommonJS$p(fn_exports);
	var import_operators = operators;
	var import_check$1 = requireCheck();
	var import_base_sql_expression$2 = baseSqlExpression;
	var import_where$2 = requireWhere();
	class Fn extends import_base_sql_expression$2.BaseSqlExpression {
	  fn;
	  args;
	  constructor(fnName, args) {
	    super();
	    this.fn = fnName;
	    this.args = args;
	  }
	}
	function fn(fnName, ...args) {
	  for (let i = 0; i < args.length; i++) {
	    if ((0, import_check$1.isPlainObject)(args[i]) && !(import_operators.Op.col in args[i])) {
	      args[i] = (0, import_where$2.where)(args[i]);
	    }
	  }
	  return new Fn(fnName, args);
	}

	var __defProp$o = Object.defineProperty;
	var __getOwnPropDesc$o = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames$o = Object.getOwnPropertyNames;
	var __hasOwnProp$o = Object.prototype.hasOwnProperty;
	var __export$o = (target, all) => {
	  for (var name in all)
	    __defProp$o(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps$o = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames$o(from))
	      if (!__hasOwnProp$o.call(to, key) && key !== except)
	        __defProp$o(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc$o(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS$o = (mod) => __copyProps$o(__defProp$o({}, "__esModule", { value: true }), mod);
	var sql_exports$1 = {};
	__export$o(sql_exports$1, {
	  sql: () => sql$1
	});
	var sql_1 = __toCommonJS$o(sql_exports$1);
	var import_attribute$1 = requireAttribute();
	var import_base_sql_expression$1 = baseSqlExpression;
	var import_cast = requireCast();
	var import_col = col_1;
	var import_dialect_aware_fn = dialectAwareFn;
	var import_fn = fn_1;
	var import_identifier = identifier_1;
	var import_json_path = jsonPath_1;
	var import_list = list_1;
	var import_literal = literal_1;
	var import_value = value;
	var import_where$1 = requireWhere();
	function sql$1(rawSql, ...values) {
	  const arg = [];
	  for (const [i, element] of rawSql.entries()) {
	    arg.push(element);
	    if (i < values.length) {
	      const value = values[i];
	      arg.push(value instanceof import_base_sql_expression$1.BaseSqlExpression ? value : new import_value.Value(value));
	    }
	  }
	  return new import_literal.Literal(arg);
	}
	sql$1.attribute = import_attribute$1.attribute;
	sql$1.cast = import_cast.cast;
	sql$1.col = import_col.col;
	sql$1.fn = import_fn.fn;
	sql$1.identifier = import_identifier.identifier;
	sql$1.jsonPath = import_json_path.jsonPath;
	sql$1.list = import_list.list;
	sql$1.literal = import_literal.literal;
	sql$1.where = import_where$1.where;
	sql$1.unquote = import_dialect_aware_fn.Unquote.build.bind(import_dialect_aware_fn.Unquote);

	var __defProp$n = Object.defineProperty;
	var __getOwnPropDesc$n = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames$n = Object.getOwnPropertyNames;
	var __hasOwnProp$n = Object.prototype.hasOwnProperty;
	var __export$n = (target, all) => {
	  for (var name in all)
	    __defProp$n(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps$n = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames$n(from))
	      if (!__hasOwnProp$n.call(to, key) && key !== except)
	        __defProp$n(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc$n(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS$n = (mod) => __copyProps$n(__defProp$n({}, "__esModule", { value: true }), mod);
	var json_exports = {};
	__export$n(json_exports, {
	  json: () => json$1
	});
	var json_1 = __toCommonJS$n(json_exports);
	var import_deprecations$2 = deprecations;
	var import_attribute = requireAttribute();
	var import_where = requireWhere();
	function json$1(conditionsOrPath, value) {
	  (0, import_deprecations$2.noSqlJson)();
	  if (typeof conditionsOrPath === "string") {
	    const attr = (0, import_attribute.attribute)(conditionsOrPath);
	    if (value === void 0) {
	      return attr;
	    }
	    return (0, import_where.where)(attr, value);
	  }
	  if (value === void 0 && typeof conditionsOrPath === "string") {
	    return (0, import_attribute.attribute)(conditionsOrPath);
	  }
	  return (0, import_where.where)(conditionsOrPath);
	}

	/**
	 * Gets the last element of `array`.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Array
	 * @param {Array} array The array to query.
	 * @returns {*} Returns the last element of `array`.
	 * @example
	 *
	 * _.last([1, 2, 3]);
	 * // => 3
	 */

	var last_1;
	var hasRequiredLast;

	function requireLast () {
		if (hasRequiredLast) return last_1;
		hasRequiredLast = 1;
		function last(array) {
		  var length = array == null ? 0 : array.length;
		  return length ? array[length - 1] : undefined;
		}

		last_1 = last;
		return last_1;
	}

	/**
	 * The base implementation of `_.slice` without an iteratee call guard.
	 *
	 * @private
	 * @param {Array} array The array to slice.
	 * @param {number} [start=0] The start position.
	 * @param {number} [end=array.length] The end position.
	 * @returns {Array} Returns the slice of `array`.
	 */

	var _baseSlice;
	var hasRequired_baseSlice;

	function require_baseSlice () {
		if (hasRequired_baseSlice) return _baseSlice;
		hasRequired_baseSlice = 1;
		function baseSlice(array, start, end) {
		  var index = -1,
		      length = array.length;

		  if (start < 0) {
		    start = -start > length ? 0 : (length + start);
		  }
		  end = end > length ? length : end;
		  if (end < 0) {
		    end += length;
		  }
		  length = start > end ? 0 : ((end - start) >>> 0);
		  start >>>= 0;

		  var result = Array(length);
		  while (++index < length) {
		    result[index] = array[index + start];
		  }
		  return result;
		}

		_baseSlice = baseSlice;
		return _baseSlice;
	}

	var _parent;
	var hasRequired_parent;

	function require_parent () {
		if (hasRequired_parent) return _parent;
		hasRequired_parent = 1;
		var baseGet = _baseGet,
		    baseSlice = require_baseSlice();

		/**
		 * Gets the parent value at `path` of `object`.
		 *
		 * @private
		 * @param {Object} object The object to query.
		 * @param {Array} path The path to get the parent value of.
		 * @returns {*} Returns the parent value.
		 */
		function parent(object, path) {
		  return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
		}

		_parent = parent;
		return _parent;
	}

	var _baseUnset;
	var hasRequired_baseUnset;

	function require_baseUnset () {
		if (hasRequired_baseUnset) return _baseUnset;
		hasRequired_baseUnset = 1;
		var castPath = require_castPath(),
		    last = requireLast(),
		    parent = require_parent(),
		    toKey = require_toKey();

		/**
		 * The base implementation of `_.unset`.
		 *
		 * @private
		 * @param {Object} object The object to modify.
		 * @param {Array|string} path The property path to unset.
		 * @returns {boolean} Returns `true` if the property is deleted, else `false`.
		 */
		function baseUnset(object, path) {
		  path = castPath(path, object);
		  object = parent(object, path);
		  return object == null || delete object[toKey(last(path))];
		}

		_baseUnset = baseUnset;
		return _baseUnset;
	}

	var _customOmitClone;
	var hasRequired_customOmitClone;

	function require_customOmitClone () {
		if (hasRequired_customOmitClone) return _customOmitClone;
		hasRequired_customOmitClone = 1;
		var isPlainObject = isPlainObject_1;

		/**
		 * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain
		 * objects.
		 *
		 * @private
		 * @param {*} value The value to inspect.
		 * @param {string} key The key of the property to inspect.
		 * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.
		 */
		function customOmitClone(value) {
		  return isPlainObject(value) ? undefined : value;
		}

		_customOmitClone = customOmitClone;
		return _customOmitClone;
	}

	var _isFlattenable;
	var hasRequired_isFlattenable;

	function require_isFlattenable () {
		if (hasRequired_isFlattenable) return _isFlattenable;
		hasRequired_isFlattenable = 1;
		var Symbol = _Symbol,
		    isArguments = requireIsArguments(),
		    isArray = isArray_1;

		/** Built-in value references. */
		var spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined;

		/**
		 * Checks if `value` is a flattenable `arguments` object or array.
		 *
		 * @private
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
		 */
		function isFlattenable(value) {
		  return isArray(value) || isArguments(value) ||
		    !!(spreadableSymbol && value && value[spreadableSymbol]);
		}

		_isFlattenable = isFlattenable;
		return _isFlattenable;
	}

	var _baseFlatten;
	var hasRequired_baseFlatten;

	function require_baseFlatten () {
		if (hasRequired_baseFlatten) return _baseFlatten;
		hasRequired_baseFlatten = 1;
		var arrayPush = require_arrayPush(),
		    isFlattenable = require_isFlattenable();

		/**
		 * The base implementation of `_.flatten` with support for restricting flattening.
		 *
		 * @private
		 * @param {Array} array The array to flatten.
		 * @param {number} depth The maximum recursion depth.
		 * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
		 * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
		 * @param {Array} [result=[]] The initial result value.
		 * @returns {Array} Returns the new flattened array.
		 */
		function baseFlatten(array, depth, predicate, isStrict, result) {
		  var index = -1,
		      length = array.length;

		  predicate || (predicate = isFlattenable);
		  result || (result = []);

		  while (++index < length) {
		    var value = array[index];
		    if (depth > 0 && predicate(value)) {
		      if (depth > 1) {
		        // Recursively flatten arrays (susceptible to call stack limits).
		        baseFlatten(value, depth - 1, predicate, isStrict, result);
		      } else {
		        arrayPush(result, value);
		      }
		    } else if (!isStrict) {
		      result[result.length] = value;
		    }
		  }
		  return result;
		}

		_baseFlatten = baseFlatten;
		return _baseFlatten;
	}

	var flatten_1;
	var hasRequiredFlatten;

	function requireFlatten () {
		if (hasRequiredFlatten) return flatten_1;
		hasRequiredFlatten = 1;
		var baseFlatten = require_baseFlatten();

		/**
		 * Flattens `array` a single level deep.
		 *
		 * @static
		 * @memberOf _
		 * @since 0.1.0
		 * @category Array
		 * @param {Array} array The array to flatten.
		 * @returns {Array} Returns the new flattened array.
		 * @example
		 *
		 * _.flatten([1, [2, [3, [4]], 5]]);
		 * // => [1, 2, [3, [4]], 5]
		 */
		function flatten(array) {
		  var length = array == null ? 0 : array.length;
		  return length ? baseFlatten(array, 1) : [];
		}

		flatten_1 = flatten;
		return flatten_1;
	}

	var _flatRest;
	var hasRequired_flatRest;

	function require_flatRest () {
		if (hasRequired_flatRest) return _flatRest;
		hasRequired_flatRest = 1;
		var flatten = requireFlatten(),
		    overRest = require_overRest(),
		    setToString = require_setToString();

		/**
		 * A specialized version of `baseRest` which flattens the rest array.
		 *
		 * @private
		 * @param {Function} func The function to apply a rest parameter to.
		 * @returns {Function} Returns the new function.
		 */
		function flatRest(func) {
		  return setToString(overRest(func, undefined, flatten), func + '');
		}

		_flatRest = flatRest;
		return _flatRest;
	}

	var omit_1;
	var hasRequiredOmit;

	function requireOmit () {
		if (hasRequiredOmit) return omit_1;
		hasRequiredOmit = 1;
		var arrayMap = require_arrayMap(),
		    baseClone = require_baseClone(),
		    baseUnset = require_baseUnset(),
		    castPath = require_castPath(),
		    copyObject = require_copyObject(),
		    customOmitClone = require_customOmitClone(),
		    flatRest = require_flatRest(),
		    getAllKeysIn = require_getAllKeysIn();

		/** Used to compose bitmasks for cloning. */
		var CLONE_DEEP_FLAG = 1,
		    CLONE_FLAT_FLAG = 2,
		    CLONE_SYMBOLS_FLAG = 4;

		/**
		 * The opposite of `_.pick`; this method creates an object composed of the
		 * own and inherited enumerable property paths of `object` that are not omitted.
		 *
		 * **Note:** This method is considerably slower than `_.pick`.
		 *
		 * @static
		 * @since 0.1.0
		 * @memberOf _
		 * @category Object
		 * @param {Object} object The source object.
		 * @param {...(string|string[])} [paths] The property paths to omit.
		 * @returns {Object} Returns the new object.
		 * @example
		 *
		 * var object = { 'a': 1, 'b': '2', 'c': 3 };
		 *
		 * _.omit(object, ['a', 'c']);
		 * // => { 'b': '2' }
		 */
		var omit = flatRest(function(object, paths) {
		  var result = {};
		  if (object == null) {
		    return result;
		  }
		  var isDeep = false;
		  paths = arrayMap(paths, function(path) {
		    path = castPath(path, object);
		    isDeep || (isDeep = path.length > 1);
		    return path;
		  });
		  copyObject(object, getAllKeysIn(object), result);
		  if (isDeep) {
		    result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
		  }
		  var length = paths.length;
		  while (length--) {
		    baseUnset(result, paths[length]);
		  }
		  return result;
		});

		omit_1 = omit;
		return omit_1;
	}

	var array$2;
	var hasRequiredArray;

	function requireArray () {
		if (hasRequiredArray) return array$2;
		hasRequiredArray = 1;
		var __defProp = Object.defineProperty;
		var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
		var __getOwnPropNames = Object.getOwnPropertyNames;
		var __hasOwnProp = Object.prototype.hasOwnProperty;
		var __export = (target, all) => {
		  for (var name in all)
		    __defProp(target, name, { get: all[name], enumerable: true });
		};
		var __copyProps = (to, from, except, desc) => {
		  if (from && typeof from === "object" || typeof from === "function") {
		    for (let key of __getOwnPropNames(from))
		      if (!__hasOwnProp.call(to, key) && key !== except)
		        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
		  }
		  return to;
		};
		var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
		var array_exports = {};
		__export(array_exports, {
		  intersects: () => intersects
		});
		array$2 = __toCommonJS(array_exports);
		function intersects(arr1, arr2) {
		  return arr1.some((v) => arr2.includes(v));
		}
		
		return array$2;
	}

	var commonjsBrowser = {};

	var v1 = {};

	var rng = {};

	var hasRequiredRng;

	function requireRng () {
		if (hasRequiredRng) return rng;
		hasRequiredRng = 1;

		Object.defineProperty(rng, "__esModule", {
		  value: true
		});
		rng.default = rng$1;
		// Unique ID creation requires a high quality random # generator. In the browser we therefore
		// require the crypto API and do not support built-in fallback to lower quality random number
		// generators (like Math.random()).
		let getRandomValues;
		const rnds8 = new Uint8Array(16);

		function rng$1() {
		  // lazy load so that environments that need to polyfill have a chance to do so
		  if (!getRandomValues) {
		    // getRandomValues needs to be invoked in a context where "this" is a Crypto implementation.
		    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto);

		    if (!getRandomValues) {
		      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');
		    }
		  }

		  return getRandomValues(rnds8);
		}
		return rng;
	}

	var stringify$5 = {};

	var validate = {};

	var regex = {};

	var hasRequiredRegex;

	function requireRegex () {
		if (hasRequiredRegex) return regex;
		hasRequiredRegex = 1;

		Object.defineProperty(regex, "__esModule", {
		  value: true
		});
		regex.default = void 0;
		var _default = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;
		regex.default = _default;
		return regex;
	}

	var hasRequiredValidate;

	function requireValidate () {
		if (hasRequiredValidate) return validate;
		hasRequiredValidate = 1;

		Object.defineProperty(validate, "__esModule", {
		  value: true
		});
		validate.default = void 0;

		var _regex = _interopRequireDefault(requireRegex());

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		function validate$1(uuid) {
		  return typeof uuid === 'string' && _regex.default.test(uuid);
		}

		var _default = validate$1;
		validate.default = _default;
		return validate;
	}

	var hasRequiredStringify;

	function requireStringify () {
		if (hasRequiredStringify) return stringify$5;
		hasRequiredStringify = 1;

		Object.defineProperty(stringify$5, "__esModule", {
		  value: true
		});
		stringify$5.default = void 0;
		stringify$5.unsafeStringify = unsafeStringify;

		var _validate = _interopRequireDefault(requireValidate());

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		/**
		 * Convert array of 16 byte values to UUID string format of the form:
		 * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
		 */
		const byteToHex = [];

		for (let i = 0; i < 256; ++i) {
		  byteToHex.push((i + 0x100).toString(16).slice(1));
		}

		function unsafeStringify(arr, offset = 0) {
		  // Note: Be careful editing this code!  It's been tuned for performance
		  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434
		  return (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase();
		}

		function stringify(arr, offset = 0) {
		  const uuid = unsafeStringify(arr, offset); // Consistency check for valid UUID.  If this throws, it's likely due to one
		  // of the following:
		  // - One or more input array values don't map to a hex octet (leading to
		  // "undefined" in the uuid)
		  // - Invalid input values for the RFC `version` or `variant` fields

		  if (!(0, _validate.default)(uuid)) {
		    throw TypeError('Stringified UUID is invalid');
		  }

		  return uuid;
		}

		var _default = stringify;
		stringify$5.default = _default;
		return stringify$5;
	}

	var hasRequiredV1;

	function requireV1 () {
		if (hasRequiredV1) return v1;
		hasRequiredV1 = 1;

		Object.defineProperty(v1, "__esModule", {
		  value: true
		});
		v1.default = void 0;

		var _rng = _interopRequireDefault(requireRng());

		var _stringify = requireStringify();

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		// **`v1()` - Generate time-based UUID**
		//
		// Inspired by https://github.com/LiosK/UUID.js
		// and http://docs.python.org/library/uuid.html
		let _nodeId;

		let _clockseq; // Previous uuid creation time


		let _lastMSecs = 0;
		let _lastNSecs = 0; // See https://github.com/uuidjs/uuid for API details

		function v1$1(options, buf, offset) {
		  let i = buf && offset || 0;
		  const b = buf || new Array(16);
		  options = options || {};
		  let node = options.node || _nodeId;
		  let clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq; // node and clockseq need to be initialized to random values if they're not
		  // specified.  We do this lazily to minimize issues related to insufficient
		  // system entropy.  See #189

		  if (node == null || clockseq == null) {
		    const seedBytes = options.random || (options.rng || _rng.default)();

		    if (node == null) {
		      // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)
		      node = _nodeId = [seedBytes[0] | 0x01, seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]];
		    }

		    if (clockseq == null) {
		      // Per 4.2.2, randomize (14 bit) clockseq
		      clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;
		    }
		  } // UUID timestamps are 100 nano-second units since the Gregorian epoch,
		  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so
		  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'
		  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.


		  let msecs = options.msecs !== undefined ? options.msecs : Date.now(); // Per 4.2.1.2, use count of uuid's generated during the current clock
		  // cycle to simulate higher resolution clock

		  let nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1; // Time since last uuid creation (in msecs)

		  const dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 10000; // Per 4.2.1.2, Bump clockseq on clock regression

		  if (dt < 0 && options.clockseq === undefined) {
		    clockseq = clockseq + 1 & 0x3fff;
		  } // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new
		  // time interval


		  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {
		    nsecs = 0;
		  } // Per 4.2.1.2 Throw error if too many uuids are requested


		  if (nsecs >= 10000) {
		    throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");
		  }

		  _lastMSecs = msecs;
		  _lastNSecs = nsecs;
		  _clockseq = clockseq; // Per 4.1.4 - Convert from unix epoch to Gregorian epoch

		  msecs += 12219292800000; // `time_low`

		  const tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;
		  b[i++] = tl >>> 24 & 0xff;
		  b[i++] = tl >>> 16 & 0xff;
		  b[i++] = tl >>> 8 & 0xff;
		  b[i++] = tl & 0xff; // `time_mid`

		  const tmh = msecs / 0x100000000 * 10000 & 0xfffffff;
		  b[i++] = tmh >>> 8 & 0xff;
		  b[i++] = tmh & 0xff; // `time_high_and_version`

		  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version

		  b[i++] = tmh >>> 16 & 0xff; // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)

		  b[i++] = clockseq >>> 8 | 0x80; // `clock_seq_low`

		  b[i++] = clockseq & 0xff; // `node`

		  for (let n = 0; n < 6; ++n) {
		    b[i + n] = node[n];
		  }

		  return buf || (0, _stringify.unsafeStringify)(b);
		}

		var _default = v1$1;
		v1.default = _default;
		return v1;
	}

	var v3 = {};

	var v35 = {};

	var parse$5 = {};

	var hasRequiredParse$1;

	function requireParse$1 () {
		if (hasRequiredParse$1) return parse$5;
		hasRequiredParse$1 = 1;

		Object.defineProperty(parse$5, "__esModule", {
		  value: true
		});
		parse$5.default = void 0;

		var _validate = _interopRequireDefault(requireValidate());

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		function parse(uuid) {
		  if (!(0, _validate.default)(uuid)) {
		    throw TypeError('Invalid UUID');
		  }

		  let v;
		  const arr = new Uint8Array(16); // Parse ########-....-....-....-............

		  arr[0] = (v = parseInt(uuid.slice(0, 8), 16)) >>> 24;
		  arr[1] = v >>> 16 & 0xff;
		  arr[2] = v >>> 8 & 0xff;
		  arr[3] = v & 0xff; // Parse ........-####-....-....-............

		  arr[4] = (v = parseInt(uuid.slice(9, 13), 16)) >>> 8;
		  arr[5] = v & 0xff; // Parse ........-....-####-....-............

		  arr[6] = (v = parseInt(uuid.slice(14, 18), 16)) >>> 8;
		  arr[7] = v & 0xff; // Parse ........-....-....-####-............

		  arr[8] = (v = parseInt(uuid.slice(19, 23), 16)) >>> 8;
		  arr[9] = v & 0xff; // Parse ........-....-....-....-############
		  // (Use "/" to avoid 32-bit truncation when bit-shifting high-order bytes)

		  arr[10] = (v = parseInt(uuid.slice(24, 36), 16)) / 0x10000000000 & 0xff;
		  arr[11] = v / 0x100000000 & 0xff;
		  arr[12] = v >>> 24 & 0xff;
		  arr[13] = v >>> 16 & 0xff;
		  arr[14] = v >>> 8 & 0xff;
		  arr[15] = v & 0xff;
		  return arr;
		}

		var _default = parse;
		parse$5.default = _default;
		return parse$5;
	}

	var hasRequiredV35;

	function requireV35 () {
		if (hasRequiredV35) return v35;
		hasRequiredV35 = 1;

		Object.defineProperty(v35, "__esModule", {
		  value: true
		});
		v35.URL = v35.DNS = void 0;
		v35.default = v35$1;

		var _stringify = requireStringify();

		var _parse = _interopRequireDefault(requireParse$1());

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		function stringToBytes(str) {
		  str = unescape(encodeURIComponent(str)); // UTF8 escape

		  const bytes = [];

		  for (let i = 0; i < str.length; ++i) {
		    bytes.push(str.charCodeAt(i));
		  }

		  return bytes;
		}

		const DNS = '6ba7b810-9dad-11d1-80b4-00c04fd430c8';
		v35.DNS = DNS;
		const URL = '6ba7b811-9dad-11d1-80b4-00c04fd430c8';
		v35.URL = URL;

		function v35$1(name, version, hashfunc) {
		  function generateUUID(value, namespace, buf, offset) {
		    var _namespace;

		    if (typeof value === 'string') {
		      value = stringToBytes(value);
		    }

		    if (typeof namespace === 'string') {
		      namespace = (0, _parse.default)(namespace);
		    }

		    if (((_namespace = namespace) === null || _namespace === void 0 ? void 0 : _namespace.length) !== 16) {
		      throw TypeError('Namespace must be array-like (16 iterable integer values, 0-255)');
		    } // Compute hash of namespace and value, Per 4.3
		    // Future: Use spread syntax when supported on all platforms, e.g. `bytes =
		    // hashfunc([...namespace, ... value])`


		    let bytes = new Uint8Array(16 + value.length);
		    bytes.set(namespace);
		    bytes.set(value, namespace.length);
		    bytes = hashfunc(bytes);
		    bytes[6] = bytes[6] & 0x0f | version;
		    bytes[8] = bytes[8] & 0x3f | 0x80;

		    if (buf) {
		      offset = offset || 0;

		      for (let i = 0; i < 16; ++i) {
		        buf[offset + i] = bytes[i];
		      }

		      return buf;
		    }

		    return (0, _stringify.unsafeStringify)(bytes);
		  } // Function#name is not settable on some platforms (#270)


		  try {
		    generateUUID.name = name; // eslint-disable-next-line no-empty
		  } catch (err) {} // For CommonJS default export support


		  generateUUID.DNS = DNS;
		  generateUUID.URL = URL;
		  return generateUUID;
		}
		return v35;
	}

	var md5 = {};

	var hasRequiredMd5;

	function requireMd5 () {
		if (hasRequiredMd5) return md5;
		hasRequiredMd5 = 1;

		Object.defineProperty(md5, "__esModule", {
		  value: true
		});
		md5.default = void 0;

		/*
		 * Browser-compatible JavaScript MD5
		 *
		 * Modification of JavaScript MD5
		 * https://github.com/blueimp/JavaScript-MD5
		 *
		 * Copyright 2011, Sebastian Tschan
		 * https://blueimp.net
		 *
		 * Licensed under the MIT license:
		 * https://opensource.org/licenses/MIT
		 *
		 * Based on
		 * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message
		 * Digest Algorithm, as defined in RFC 1321.
		 * Version 2.2 Copyright (C) Paul Johnston 1999 - 2009
		 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
		 * Distributed under the BSD License
		 * See http://pajhome.org.uk/crypt/md5 for more info.
		 */
		function md5$1(bytes) {
		  if (typeof bytes === 'string') {
		    const msg = unescape(encodeURIComponent(bytes)); // UTF8 escape

		    bytes = new Uint8Array(msg.length);

		    for (let i = 0; i < msg.length; ++i) {
		      bytes[i] = msg.charCodeAt(i);
		    }
		  }

		  return md5ToHexEncodedArray(wordsToMd5(bytesToWords(bytes), bytes.length * 8));
		}
		/*
		 * Convert an array of little-endian words to an array of bytes
		 */


		function md5ToHexEncodedArray(input) {
		  const output = [];
		  const length32 = input.length * 32;
		  const hexTab = '0123456789abcdef';

		  for (let i = 0; i < length32; i += 8) {
		    const x = input[i >> 5] >>> i % 32 & 0xff;
		    const hex = parseInt(hexTab.charAt(x >>> 4 & 0x0f) + hexTab.charAt(x & 0x0f), 16);
		    output.push(hex);
		  }

		  return output;
		}
		/**
		 * Calculate output length with padding and bit length
		 */


		function getOutputLength(inputLength8) {
		  return (inputLength8 + 64 >>> 9 << 4) + 14 + 1;
		}
		/*
		 * Calculate the MD5 of an array of little-endian words, and a bit length.
		 */


		function wordsToMd5(x, len) {
		  /* append padding */
		  x[len >> 5] |= 0x80 << len % 32;
		  x[getOutputLength(len) - 1] = len;
		  let a = 1732584193;
		  let b = -271733879;
		  let c = -1732584194;
		  let d = 271733878;

		  for (let i = 0; i < x.length; i += 16) {
		    const olda = a;
		    const oldb = b;
		    const oldc = c;
		    const oldd = d;
		    a = md5ff(a, b, c, d, x[i], 7, -680876936);
		    d = md5ff(d, a, b, c, x[i + 1], 12, -389564586);
		    c = md5ff(c, d, a, b, x[i + 2], 17, 606105819);
		    b = md5ff(b, c, d, a, x[i + 3], 22, -1044525330);
		    a = md5ff(a, b, c, d, x[i + 4], 7, -176418897);
		    d = md5ff(d, a, b, c, x[i + 5], 12, 1200080426);
		    c = md5ff(c, d, a, b, x[i + 6], 17, -1473231341);
		    b = md5ff(b, c, d, a, x[i + 7], 22, -45705983);
		    a = md5ff(a, b, c, d, x[i + 8], 7, 1770035416);
		    d = md5ff(d, a, b, c, x[i + 9], 12, -1958414417);
		    c = md5ff(c, d, a, b, x[i + 10], 17, -42063);
		    b = md5ff(b, c, d, a, x[i + 11], 22, -1990404162);
		    a = md5ff(a, b, c, d, x[i + 12], 7, 1804603682);
		    d = md5ff(d, a, b, c, x[i + 13], 12, -40341101);
		    c = md5ff(c, d, a, b, x[i + 14], 17, -1502002290);
		    b = md5ff(b, c, d, a, x[i + 15], 22, 1236535329);
		    a = md5gg(a, b, c, d, x[i + 1], 5, -165796510);
		    d = md5gg(d, a, b, c, x[i + 6], 9, -1069501632);
		    c = md5gg(c, d, a, b, x[i + 11], 14, 643717713);
		    b = md5gg(b, c, d, a, x[i], 20, -373897302);
		    a = md5gg(a, b, c, d, x[i + 5], 5, -701558691);
		    d = md5gg(d, a, b, c, x[i + 10], 9, 38016083);
		    c = md5gg(c, d, a, b, x[i + 15], 14, -660478335);
		    b = md5gg(b, c, d, a, x[i + 4], 20, -405537848);
		    a = md5gg(a, b, c, d, x[i + 9], 5, 568446438);
		    d = md5gg(d, a, b, c, x[i + 14], 9, -1019803690);
		    c = md5gg(c, d, a, b, x[i + 3], 14, -187363961);
		    b = md5gg(b, c, d, a, x[i + 8], 20, 1163531501);
		    a = md5gg(a, b, c, d, x[i + 13], 5, -1444681467);
		    d = md5gg(d, a, b, c, x[i + 2], 9, -51403784);
		    c = md5gg(c, d, a, b, x[i + 7], 14, 1735328473);
		    b = md5gg(b, c, d, a, x[i + 12], 20, -1926607734);
		    a = md5hh(a, b, c, d, x[i + 5], 4, -378558);
		    d = md5hh(d, a, b, c, x[i + 8], 11, -2022574463);
		    c = md5hh(c, d, a, b, x[i + 11], 16, 1839030562);
		    b = md5hh(b, c, d, a, x[i + 14], 23, -35309556);
		    a = md5hh(a, b, c, d, x[i + 1], 4, -1530992060);
		    d = md5hh(d, a, b, c, x[i + 4], 11, 1272893353);
		    c = md5hh(c, d, a, b, x[i + 7], 16, -155497632);
		    b = md5hh(b, c, d, a, x[i + 10], 23, -1094730640);
		    a = md5hh(a, b, c, d, x[i + 13], 4, 681279174);
		    d = md5hh(d, a, b, c, x[i], 11, -358537222);
		    c = md5hh(c, d, a, b, x[i + 3], 16, -722521979);
		    b = md5hh(b, c, d, a, x[i + 6], 23, 76029189);
		    a = md5hh(a, b, c, d, x[i + 9], 4, -640364487);
		    d = md5hh(d, a, b, c, x[i + 12], 11, -421815835);
		    c = md5hh(c, d, a, b, x[i + 15], 16, 530742520);
		    b = md5hh(b, c, d, a, x[i + 2], 23, -995338651);
		    a = md5ii(a, b, c, d, x[i], 6, -198630844);
		    d = md5ii(d, a, b, c, x[i + 7], 10, 1126891415);
		    c = md5ii(c, d, a, b, x[i + 14], 15, -1416354905);
		    b = md5ii(b, c, d, a, x[i + 5], 21, -57434055);
		    a = md5ii(a, b, c, d, x[i + 12], 6, 1700485571);
		    d = md5ii(d, a, b, c, x[i + 3], 10, -1894986606);
		    c = md5ii(c, d, a, b, x[i + 10], 15, -1051523);
		    b = md5ii(b, c, d, a, x[i + 1], 21, -2054922799);
		    a = md5ii(a, b, c, d, x[i + 8], 6, 1873313359);
		    d = md5ii(d, a, b, c, x[i + 15], 10, -30611744);
		    c = md5ii(c, d, a, b, x[i + 6], 15, -1560198380);
		    b = md5ii(b, c, d, a, x[i + 13], 21, 1309151649);
		    a = md5ii(a, b, c, d, x[i + 4], 6, -145523070);
		    d = md5ii(d, a, b, c, x[i + 11], 10, -1120210379);
		    c = md5ii(c, d, a, b, x[i + 2], 15, 718787259);
		    b = md5ii(b, c, d, a, x[i + 9], 21, -343485551);
		    a = safeAdd(a, olda);
		    b = safeAdd(b, oldb);
		    c = safeAdd(c, oldc);
		    d = safeAdd(d, oldd);
		  }

		  return [a, b, c, d];
		}
		/*
		 * Convert an array bytes to an array of little-endian words
		 * Characters >255 have their high-byte silently ignored.
		 */


		function bytesToWords(input) {
		  if (input.length === 0) {
		    return [];
		  }

		  const length8 = input.length * 8;
		  const output = new Uint32Array(getOutputLength(length8));

		  for (let i = 0; i < length8; i += 8) {
		    output[i >> 5] |= (input[i / 8] & 0xff) << i % 32;
		  }

		  return output;
		}
		/*
		 * Add integers, wrapping at 2^32. This uses 16-bit operations internally
		 * to work around bugs in some JS interpreters.
		 */


		function safeAdd(x, y) {
		  const lsw = (x & 0xffff) + (y & 0xffff);
		  const msw = (x >> 16) + (y >> 16) + (lsw >> 16);
		  return msw << 16 | lsw & 0xffff;
		}
		/*
		 * Bitwise rotate a 32-bit number to the left.
		 */


		function bitRotateLeft(num, cnt) {
		  return num << cnt | num >>> 32 - cnt;
		}
		/*
		 * These functions implement the four basic operations the algorithm uses.
		 */


		function md5cmn(q, a, b, x, s, t) {
		  return safeAdd(bitRotateLeft(safeAdd(safeAdd(a, q), safeAdd(x, t)), s), b);
		}

		function md5ff(a, b, c, d, x, s, t) {
		  return md5cmn(b & c | ~b & d, a, b, x, s, t);
		}

		function md5gg(a, b, c, d, x, s, t) {
		  return md5cmn(b & d | c & ~d, a, b, x, s, t);
		}

		function md5hh(a, b, c, d, x, s, t) {
		  return md5cmn(b ^ c ^ d, a, b, x, s, t);
		}

		function md5ii(a, b, c, d, x, s, t) {
		  return md5cmn(c ^ (b | ~d), a, b, x, s, t);
		}

		var _default = md5$1;
		md5.default = _default;
		return md5;
	}

	var hasRequiredV3;

	function requireV3 () {
		if (hasRequiredV3) return v3;
		hasRequiredV3 = 1;

		Object.defineProperty(v3, "__esModule", {
		  value: true
		});
		v3.default = void 0;

		var _v = _interopRequireDefault(requireV35());

		var _md = _interopRequireDefault(requireMd5());

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		const v3$1 = (0, _v.default)('v3', 0x30, _md.default);
		var _default = v3$1;
		v3.default = _default;
		return v3;
	}

	var v4 = {};

	var native = {};

	var hasRequiredNative;

	function requireNative () {
		if (hasRequiredNative) return native;
		hasRequiredNative = 1;

		Object.defineProperty(native, "__esModule", {
		  value: true
		});
		native.default = void 0;
		const randomUUID = typeof crypto !== 'undefined' && crypto.randomUUID && crypto.randomUUID.bind(crypto);
		var _default = {
		  randomUUID
		};
		native.default = _default;
		return native;
	}

	var hasRequiredV4;

	function requireV4 () {
		if (hasRequiredV4) return v4;
		hasRequiredV4 = 1;

		Object.defineProperty(v4, "__esModule", {
		  value: true
		});
		v4.default = void 0;

		var _native = _interopRequireDefault(requireNative());

		var _rng = _interopRequireDefault(requireRng());

		var _stringify = requireStringify();

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		function v4$1(options, buf, offset) {
		  if (_native.default.randomUUID && !buf && !options) {
		    return _native.default.randomUUID();
		  }

		  options = options || {};

		  const rnds = options.random || (options.rng || _rng.default)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`


		  rnds[6] = rnds[6] & 0x0f | 0x40;
		  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided

		  if (buf) {
		    offset = offset || 0;

		    for (let i = 0; i < 16; ++i) {
		      buf[offset + i] = rnds[i];
		    }

		    return buf;
		  }

		  return (0, _stringify.unsafeStringify)(rnds);
		}

		var _default = v4$1;
		v4.default = _default;
		return v4;
	}

	var v5 = {};

	var sha1 = {};

	var hasRequiredSha1;

	function requireSha1 () {
		if (hasRequiredSha1) return sha1;
		hasRequiredSha1 = 1;

		Object.defineProperty(sha1, "__esModule", {
		  value: true
		});
		sha1.default = void 0;

		// Adapted from Chris Veness' SHA1 code at
		// http://www.movable-type.co.uk/scripts/sha1.html
		function f(s, x, y, z) {
		  switch (s) {
		    case 0:
		      return x & y ^ ~x & z;

		    case 1:
		      return x ^ y ^ z;

		    case 2:
		      return x & y ^ x & z ^ y & z;

		    case 3:
		      return x ^ y ^ z;
		  }
		}

		function ROTL(x, n) {
		  return x << n | x >>> 32 - n;
		}

		function sha1$1(bytes) {
		  const K = [0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xca62c1d6];
		  const H = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];

		  if (typeof bytes === 'string') {
		    const msg = unescape(encodeURIComponent(bytes)); // UTF8 escape

		    bytes = [];

		    for (let i = 0; i < msg.length; ++i) {
		      bytes.push(msg.charCodeAt(i));
		    }
		  } else if (!Array.isArray(bytes)) {
		    // Convert Array-like to Array
		    bytes = Array.prototype.slice.call(bytes);
		  }

		  bytes.push(0x80);
		  const l = bytes.length / 4 + 2;
		  const N = Math.ceil(l / 16);
		  const M = new Array(N);

		  for (let i = 0; i < N; ++i) {
		    const arr = new Uint32Array(16);

		    for (let j = 0; j < 16; ++j) {
		      arr[j] = bytes[i * 64 + j * 4] << 24 | bytes[i * 64 + j * 4 + 1] << 16 | bytes[i * 64 + j * 4 + 2] << 8 | bytes[i * 64 + j * 4 + 3];
		    }

		    M[i] = arr;
		  }

		  M[N - 1][14] = (bytes.length - 1) * 8 / Math.pow(2, 32);
		  M[N - 1][14] = Math.floor(M[N - 1][14]);
		  M[N - 1][15] = (bytes.length - 1) * 8 & 0xffffffff;

		  for (let i = 0; i < N; ++i) {
		    const W = new Uint32Array(80);

		    for (let t = 0; t < 16; ++t) {
		      W[t] = M[i][t];
		    }

		    for (let t = 16; t < 80; ++t) {
		      W[t] = ROTL(W[t - 3] ^ W[t - 8] ^ W[t - 14] ^ W[t - 16], 1);
		    }

		    let a = H[0];
		    let b = H[1];
		    let c = H[2];
		    let d = H[3];
		    let e = H[4];

		    for (let t = 0; t < 80; ++t) {
		      const s = Math.floor(t / 20);
		      const T = ROTL(a, 5) + f(s, b, c, d) + e + K[s] + W[t] >>> 0;
		      e = d;
		      d = c;
		      c = ROTL(b, 30) >>> 0;
		      b = a;
		      a = T;
		    }

		    H[0] = H[0] + a >>> 0;
		    H[1] = H[1] + b >>> 0;
		    H[2] = H[2] + c >>> 0;
		    H[3] = H[3] + d >>> 0;
		    H[4] = H[4] + e >>> 0;
		  }

		  return [H[0] >> 24 & 0xff, H[0] >> 16 & 0xff, H[0] >> 8 & 0xff, H[0] & 0xff, H[1] >> 24 & 0xff, H[1] >> 16 & 0xff, H[1] >> 8 & 0xff, H[1] & 0xff, H[2] >> 24 & 0xff, H[2] >> 16 & 0xff, H[2] >> 8 & 0xff, H[2] & 0xff, H[3] >> 24 & 0xff, H[3] >> 16 & 0xff, H[3] >> 8 & 0xff, H[3] & 0xff, H[4] >> 24 & 0xff, H[4] >> 16 & 0xff, H[4] >> 8 & 0xff, H[4] & 0xff];
		}

		var _default = sha1$1;
		sha1.default = _default;
		return sha1;
	}

	var hasRequiredV5;

	function requireV5 () {
		if (hasRequiredV5) return v5;
		hasRequiredV5 = 1;

		Object.defineProperty(v5, "__esModule", {
		  value: true
		});
		v5.default = void 0;

		var _v = _interopRequireDefault(requireV35());

		var _sha = _interopRequireDefault(requireSha1());

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		const v5$1 = (0, _v.default)('v5', 0x50, _sha.default);
		var _default = v5$1;
		v5.default = _default;
		return v5;
	}

	var nil = {};

	var hasRequiredNil;

	function requireNil () {
		if (hasRequiredNil) return nil;
		hasRequiredNil = 1;

		Object.defineProperty(nil, "__esModule", {
		  value: true
		});
		nil.default = void 0;
		var _default = '00000000-0000-0000-0000-000000000000';
		nil.default = _default;
		return nil;
	}

	var version$1 = {};

	var hasRequiredVersion;

	function requireVersion () {
		if (hasRequiredVersion) return version$1;
		hasRequiredVersion = 1;

		Object.defineProperty(version$1, "__esModule", {
		  value: true
		});
		version$1.default = void 0;

		var _validate = _interopRequireDefault(requireValidate());

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		function version(uuid) {
		  if (!(0, _validate.default)(uuid)) {
		    throw TypeError('Invalid UUID');
		  }

		  return parseInt(uuid.slice(14, 15), 16);
		}

		var _default = version;
		version$1.default = _default;
		return version$1;
	}

	var hasRequiredCommonjsBrowser;

	function requireCommonjsBrowser () {
		if (hasRequiredCommonjsBrowser) return commonjsBrowser;
		hasRequiredCommonjsBrowser = 1;
		(function (exports) {

			Object.defineProperty(exports, "__esModule", {
			  value: true
			});
			Object.defineProperty(exports, "NIL", {
			  enumerable: true,
			  get: function get() {
			    return _nil.default;
			  }
			});
			Object.defineProperty(exports, "parse", {
			  enumerable: true,
			  get: function get() {
			    return _parse.default;
			  }
			});
			Object.defineProperty(exports, "stringify", {
			  enumerable: true,
			  get: function get() {
			    return _stringify.default;
			  }
			});
			Object.defineProperty(exports, "v1", {
			  enumerable: true,
			  get: function get() {
			    return _v.default;
			  }
			});
			Object.defineProperty(exports, "v3", {
			  enumerable: true,
			  get: function get() {
			    return _v2.default;
			  }
			});
			Object.defineProperty(exports, "v4", {
			  enumerable: true,
			  get: function get() {
			    return _v3.default;
			  }
			});
			Object.defineProperty(exports, "v5", {
			  enumerable: true,
			  get: function get() {
			    return _v4.default;
			  }
			});
			Object.defineProperty(exports, "validate", {
			  enumerable: true,
			  get: function get() {
			    return _validate.default;
			  }
			});
			Object.defineProperty(exports, "version", {
			  enumerable: true,
			  get: function get() {
			    return _version.default;
			  }
			});

			var _v = _interopRequireDefault(requireV1());

			var _v2 = _interopRequireDefault(requireV3());

			var _v3 = _interopRequireDefault(requireV4());

			var _v4 = _interopRequireDefault(requireV5());

			var _nil = _interopRequireDefault(requireNil());

			var _version = _interopRequireDefault(requireVersion());

			var _validate = _interopRequireDefault(requireValidate());

			var _stringify = _interopRequireDefault(requireStringify());

			var _parse = _interopRequireDefault(requireParse$1());

			function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; } 
		} (commonjsBrowser));
		return commonjsBrowser;
	}

	var dialect;
	var hasRequiredDialect;

	function requireDialect () {
		if (hasRequiredDialect) return dialect;
		hasRequiredDialect = 1;
		var __create = Object.create;
		var __defProp = Object.defineProperty;
		var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
		var __getOwnPropNames = Object.getOwnPropertyNames;
		var __getProtoOf = Object.getPrototypeOf;
		var __hasOwnProp = Object.prototype.hasOwnProperty;
		var __export = (target, all) => {
		  for (var name in all)
		    __defProp(target, name, { get: all[name], enumerable: true });
		};
		var __copyProps = (to, from, except, desc) => {
		  if (from && typeof from === "object" || typeof from === "function") {
		    for (let key of __getOwnPropNames(from))
		      if (!__hasOwnProp.call(to, key) && key !== except)
		        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
		  }
		  return to;
		};
		var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
		  // If the importer is in node compatibility mode or this is not an ESM
		  // file that has been converted to a CommonJS file using a Babel-
		  // compatible transform (i.e. "__esModule" has not been set), then set
		  // "default" to the CommonJS "module.exports" for node compatibility.
		  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
		  mod
		));
		var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
		var dialect_exports = {};
		__export(dialect_exports, {
		  quoteIdentifier: () => quoteIdentifier,
		  toDefaultValue: () => toDefaultValue
		});
		dialect = __toCommonJS(dialect_exports);
		var import_node_crypto = require$$0$3;
		var import_node_util = __toESM(require$$0$1);
		var import_isPlainObject = __toESM(isPlainObject_1);
		var import_uuid = requireCommonjsBrowser();
		var DataTypes = __toESM(requireDataTypes$8());
		var import_check = requireCheck();
		function toDefaultValue(value) {
		  if (typeof value === "function") {
		    const tmp = value();
		    if (tmp instanceof DataTypes.AbstractDataType) {
		      return tmp.toSql();
		    }
		    return tmp;
		  }
		  if (value instanceof DataTypes.UUIDV1) {
		    return (0, import_uuid.v1)();
		  }
		  if (value instanceof DataTypes.UUIDV4) {
		    return (0, import_node_crypto.randomUUID)();
		  }
		  if (value instanceof DataTypes.NOW) {
		    return /* @__PURE__ */ new Date();
		  }
		  if (Array.isArray(value)) {
		    return [...value];
		  }
		  if ((0, import_isPlainObject.default)(value)) {
		    return { ...value };
		  }
		  return value;
		}
		function quoteIdentifier(identifier, leftTick, rightTick) {
		  if (!(0, import_check.isString)(identifier)) {
		    throw new Error(`quoteIdentifier received a non-string identifier: ${import_node_util.default.inspect(identifier)}`);
		  }
		  const leftTickRegExp = new RegExp(`\\${leftTick}`, "g");
		  if (leftTick === rightTick) {
		    return leftTick + identifier.replace(leftTickRegExp, leftTick + leftTick) + rightTick;
		  }
		  const rightTickRegExp = new RegExp(`\\${rightTick}`, "g");
		  return leftTick + identifier.replace(leftTickRegExp, leftTick + leftTick).replace(rightTickRegExp, rightTick + rightTick) + rightTick;
		}
		
		return dialect;
	}

	var forIn_1;
	var hasRequiredForIn;

	function requireForIn () {
		if (hasRequiredForIn) return forIn_1;
		hasRequiredForIn = 1;
		var baseFor = require_baseFor(),
		    castFunction = _castFunction,
		    keysIn = requireKeysIn();

		/**
		 * Iterates over own and inherited enumerable string keyed properties of an
		 * object and invokes `iteratee` for each property. The iteratee is invoked
		 * with three arguments: (value, key, object). Iteratee functions may exit
		 * iteration early by explicitly returning `false`.
		 *
		 * @static
		 * @memberOf _
		 * @since 0.3.0
		 * @category Object
		 * @param {Object} object The object to iterate over.
		 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
		 * @returns {Object} Returns `object`.
		 * @see _.forInRight
		 * @example
		 *
		 * function Foo() {
		 *   this.a = 1;
		 *   this.b = 2;
		 * }
		 *
		 * Foo.prototype.c = 3;
		 *
		 * _.forIn(new Foo, function(value, key) {
		 *   console.log(key);
		 * });
		 * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).
		 */
		function forIn(object, iteratee) {
		  return object == null
		    ? object
		    : baseFor(object, castFunction(iteratee), keysIn);
		}

		forIn_1 = forIn;
		return forIn_1;
	}

	var format;
	var hasRequiredFormat;

	function requireFormat () {
		if (hasRequiredFormat) return format;
		hasRequiredFormat = 1;
		var __create = Object.create;
		var __defProp = Object.defineProperty;
		var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
		var __getOwnPropNames = Object.getOwnPropertyNames;
		var __getProtoOf = Object.getPrototypeOf;
		var __hasOwnProp = Object.prototype.hasOwnProperty;
		var __export = (target, all) => {
		  for (var name in all)
		    __defProp(target, name, { get: all[name], enumerable: true });
		};
		var __copyProps = (to, from, except, desc) => {
		  if (from && typeof from === "object" || typeof from === "function") {
		    for (let key of __getOwnPropNames(from))
		      if (!__hasOwnProp.call(to, key) && key !== except)
		        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
		  }
		  return to;
		};
		var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
		  // If the importer is in node compatibility mode or this is not an ESM
		  // file that has been converted to a CommonJS file using a Babel-
		  // compatible transform (i.e. "__esModule" has not been set), then set
		  // "default" to the CommonJS "module.exports" for node compatibility.
		  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
		  mod
		));
		var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
		var format_exports = {};
		__export(format_exports, {
		  getAttributeName: () => getAttributeName,
		  getColumnName: () => getColumnName,
		  mapFinderOptions: () => mapFinderOptions,
		  mapOptionFieldNames: () => mapOptionFieldNames,
		  mapValueFieldNames: () => mapValueFieldNames,
		  removeNullishValuesFromHash: () => removeNullishValuesFromHash
		});
		format = __toCommonJS(format_exports);
		var import_node_assert = __toESM(require$$0$4);
		var import_forIn = __toESM(requireForIn());
		function mapFinderOptions(options, Model) {
		  if (Array.isArray(options.attributes)) {
		    options.attributes = Model._injectDependentVirtualAttributes(
		      options.attributes
		    );
		    const modelDefinition = Model.modelDefinition;
		    options.attributes = options.attributes.filter(
		      (attributeName) => !modelDefinition.virtualAttributeNames.has(attributeName)
		    );
		  }
		  mapOptionFieldNames(options, Model);
		  return options;
		}
		function mapOptionFieldNames(options, Model) {
		  const out = options;
		  if (Array.isArray(options.attributes)) {
		    out.attributes = options.attributes.map((attributeName) => {
		      if (typeof attributeName !== "string") {
		        return attributeName;
		      }
		      const columnName = Model.modelDefinition.getColumnNameLoose(attributeName);
		      if (columnName !== attributeName) {
		        return [columnName, attributeName];
		      }
		      return attributeName;
		    });
		  }
		  return out;
		}
		function mapValueFieldNames(dataValues, attributeNames, ModelClass) {
		  const values = /* @__PURE__ */ Object.create(null);
		  const modelDefinition = ModelClass.modelDefinition;
		  for (const attributeName of attributeNames) {
		    if (dataValues[attributeName] !== void 0 && !modelDefinition.virtualAttributeNames.has(attributeName)) {
		      const columnName = modelDefinition.getColumnNameLoose(attributeName);
		      values[columnName] = dataValues[attributeName];
		    }
		  }
		  return values;
		}
		function removeNullishValuesFromHash(hash, omitNull, options) {
		  let result = hash;
		  const allowNull = (options == null ? void 0 : options.allowNull) ?? [];
		  if (!omitNull) {
		    return result;
		  }
		  const _hash = /* @__PURE__ */ Object.create(null);
		  (0, import_forIn.default)(hash, (val, key) => {
		    if (allowNull.includes(key) || key.endsWith("Id") || val !== null && val !== void 0) {
		      _hash[key] = val;
		    }
		  });
		  result = _hash;
		  return result;
		}
		function getColumnName(attribute) {
		  (0, import_node_assert.default)(attribute.fieldName != null, "getColumnName expects a normalized attribute meta");
		  return attribute.field || attribute.fieldName;
		}
		function getAttributeName(model, columnName) {
		  var _a;
		  return ((_a = Object.values(model.getAttributes()).find((attribute) => attribute.field === columnName)) == null ? void 0 : _a.fieldName) ?? null;
		}
		
		return format;
	}

	var isEmpty_1;
	var hasRequiredIsEmpty;

	function requireIsEmpty () {
		if (hasRequiredIsEmpty) return isEmpty_1;
		hasRequiredIsEmpty = 1;
		var baseKeys = require_baseKeys(),
		    getTag = require_getTag(),
		    isArguments = requireIsArguments(),
		    isArray = isArray_1,
		    isArrayLike = requireIsArrayLike(),
		    isBuffer = requireIsBuffer(),
		    isPrototype = require_isPrototype(),
		    isTypedArray = isTypedArray_1;

		/** `Object#toString` result references. */
		var mapTag = '[object Map]',
		    setTag = '[object Set]';

		/** Used for built-in method references. */
		var objectProto = Object.prototype;

		/** Used to check objects for own properties. */
		var hasOwnProperty = objectProto.hasOwnProperty;

		/**
		 * Checks if `value` is an empty object, collection, map, or set.
		 *
		 * Objects are considered empty if they have no own enumerable string keyed
		 * properties.
		 *
		 * Array-like values such as `arguments` objects, arrays, buffers, strings, or
		 * jQuery-like collections are considered empty if they have a `length` of `0`.
		 * Similarly, maps and sets are considered empty if they have a `size` of `0`.
		 *
		 * @static
		 * @memberOf _
		 * @since 0.1.0
		 * @category Lang
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is empty, else `false`.
		 * @example
		 *
		 * _.isEmpty(null);
		 * // => true
		 *
		 * _.isEmpty(true);
		 * // => true
		 *
		 * _.isEmpty(1);
		 * // => true
		 *
		 * _.isEmpty([1, 2, 3]);
		 * // => false
		 *
		 * _.isEmpty({ 'a': 1 });
		 * // => false
		 */
		function isEmpty(value) {
		  if (value == null) {
		    return true;
		  }
		  if (isArrayLike(value) &&
		      (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||
		        isBuffer(value) || isTypedArray(value) || isArguments(value))) {
		    return !value.length;
		  }
		  var tag = getTag(value);
		  if (tag == mapTag || tag == setTag) {
		    return !value.size;
		  }
		  if (isPrototype(value)) {
		    return !baseKeys(value).length;
		  }
		  for (var key in value) {
		    if (hasOwnProperty.call(value, key)) {
		      return false;
		    }
		  }
		  return true;
		}

		isEmpty_1 = isEmpty;
		return isEmpty_1;
	}

	var __defProp$m = Object.defineProperty;
	var __getOwnPropDesc$m = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames$m = Object.getOwnPropertyNames;
	var __hasOwnProp$m = Object.prototype.hasOwnProperty;
	var __export$m = (target, all) => {
	  for (var name in all)
	    __defProp$m(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps$m = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames$m(from))
	      if (!__hasOwnProp$m.call(to, key) && key !== except)
	        __defProp$m(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc$m(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS$m = (mod) => __copyProps$m(__defProp$m({}, "__esModule", { value: true }), mod);
	var class_to_invokable_exports = {};
	__export$m(class_to_invokable_exports, {
	  classToInvokable: () => classToInvokable
	});
	var classToInvokable_1 = __toCommonJS$m(class_to_invokable_exports);
	function classToInvokable(constructor) {
	  return new Proxy(constructor, {
	    apply(_target, _thisArg, args) {
	      return new constructor(...args);
	    }
	  });
	}

	var __create$8 = Object.create;
	var __defProp$l = Object.defineProperty;
	var __getOwnPropDesc$l = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames$l = Object.getOwnPropertyNames;
	var __getProtoOf$8 = Object.getPrototypeOf;
	var __hasOwnProp$l = Object.prototype.hasOwnProperty;
	var __export$l = (target, all) => {
	  for (var name in all)
	    __defProp$l(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps$l = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames$l(from))
	      if (!__hasOwnProp$l.call(to, key) && key !== except)
	        __defProp$l(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc$l(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toESM$8 = (mod, isNodeMode, target) => (target = mod != null ? __create$8(__getProtoOf$8(mod)) : {}, __copyProps$l(
	  // If the importer is in node compatibility mode or this is not an ESM
	  // file that has been converted to a CommonJS file using a Babel-
	  // compatible transform (i.e. "__esModule" has not been set), then set
	  // "default" to the CommonJS "module.exports" for node compatibility.
	  isNodeMode || !mod || !mod.__esModule ? __defProp$l(target, "default", { value: mod, enumerable: true }) : target,
	  mod
	));
	var __toCommonJS$l = (mod) => __copyProps$l(__defProp$l({}, "__esModule", { value: true }), mod);
	var data_types_exports = {};
	__export$l(data_types_exports, {
	  ABSTRACT: () => import_data_types$1.AbstractDataType,
	  ARRAY: () => ARRAY,
	  BIGINT: () => BIGINT,
	  BLOB: () => BLOB,
	  BOOLEAN: () => BOOLEAN,
	  CHAR: () => CHAR,
	  CIDR: () => CIDR,
	  CITEXT: () => CITEXT,
	  DATE: () => DATE,
	  DATEONLY: () => DATEONLY,
	  DECIMAL: () => DECIMAL,
	  DOUBLE: () => DOUBLE,
	  ENUM: () => ENUM,
	  FLOAT: () => FLOAT,
	  GEOGRAPHY: () => GEOGRAPHY,
	  GEOMETRY: () => GEOMETRY,
	  HSTORE: () => HSTORE,
	  INET: () => INET,
	  INTEGER: () => INTEGER,
	  JSON: () => JSON$1,
	  JSONB: () => JSONB,
	  MACADDR: () => MACADDR,
	  MEDIUMINT: () => MEDIUMINT,
	  NOW: () => NOW,
	  RANGE: () => RANGE,
	  REAL: () => REAL,
	  SMALLINT: () => SMALLINT,
	  STRING: () => STRING,
	  TEXT: () => TEXT,
	  TIME: () => TIME,
	  TINYINT: () => TINYINT,
	  TSVECTOR: () => TSVECTOR,
	  UUID: () => UUID,
	  UUIDV1: () => UUIDV1,
	  UUIDV4: () => UUIDV4,
	  VIRTUAL: () => VIRTUAL
	});
	var dataTypes$8 = __toCommonJS$l(data_types_exports);
	var DataTypes$1 = __toESM$8(requireDataTypes$8());
	var import_class_to_invokable$1 = classToInvokable_1;
	var import_data_types$1 = requireDataTypes$8();
	const STRING = (0, import_class_to_invokable$1.classToInvokable)(DataTypes$1.STRING);
	const CHAR = (0, import_class_to_invokable$1.classToInvokable)(DataTypes$1.CHAR);
	const TEXT = (0, import_class_to_invokable$1.classToInvokable)(DataTypes$1.TEXT);
	const TINYINT = (0, import_class_to_invokable$1.classToInvokable)(DataTypes$1.TINYINT);
	const SMALLINT = (0, import_class_to_invokable$1.classToInvokable)(DataTypes$1.SMALLINT);
	const MEDIUMINT = (0, import_class_to_invokable$1.classToInvokable)(DataTypes$1.MEDIUMINT);
	const INTEGER = (0, import_class_to_invokable$1.classToInvokable)(DataTypes$1.INTEGER);
	const BIGINT = (0, import_class_to_invokable$1.classToInvokable)(DataTypes$1.BIGINT);
	const FLOAT = (0, import_class_to_invokable$1.classToInvokable)(DataTypes$1.FLOAT);
	const TIME = (0, import_class_to_invokable$1.classToInvokable)(DataTypes$1.TIME);
	const DATE = (0, import_class_to_invokable$1.classToInvokable)(DataTypes$1.DATE);
	const DATEONLY = (0, import_class_to_invokable$1.classToInvokable)(DataTypes$1.DATEONLY);
	const BOOLEAN = (0, import_class_to_invokable$1.classToInvokable)(DataTypes$1.BOOLEAN);
	const NOW = (0, import_class_to_invokable$1.classToInvokable)(DataTypes$1.NOW);
	const BLOB = (0, import_class_to_invokable$1.classToInvokable)(DataTypes$1.BLOB);
	const DECIMAL = (0, import_class_to_invokable$1.classToInvokable)(DataTypes$1.DECIMAL);
	const UUID = (0, import_class_to_invokable$1.classToInvokable)(DataTypes$1.UUID);
	const UUIDV1 = (0, import_class_to_invokable$1.classToInvokable)(DataTypes$1.UUIDV1);
	const UUIDV4 = (0, import_class_to_invokable$1.classToInvokable)(DataTypes$1.UUIDV4);
	const HSTORE = (0, import_class_to_invokable$1.classToInvokable)(DataTypes$1.HSTORE);
	const JSON$1 = (0, import_class_to_invokable$1.classToInvokable)(DataTypes$1.JSON);
	const JSONB = (0, import_class_to_invokable$1.classToInvokable)(DataTypes$1.JSONB);
	const VIRTUAL = (0, import_class_to_invokable$1.classToInvokable)(DataTypes$1.VIRTUAL);
	const ARRAY = (0, import_class_to_invokable$1.classToInvokable)(DataTypes$1.ARRAY);
	const ENUM = (0, import_class_to_invokable$1.classToInvokable)(DataTypes$1.ENUM);
	const RANGE = (0, import_class_to_invokable$1.classToInvokable)(DataTypes$1.RANGE);
	const REAL = (0, import_class_to_invokable$1.classToInvokable)(DataTypes$1.REAL);
	const DOUBLE = (0, import_class_to_invokable$1.classToInvokable)(DataTypes$1.DOUBLE);
	const GEOMETRY = (0, import_class_to_invokable$1.classToInvokable)(DataTypes$1.GEOMETRY);
	const GEOGRAPHY = (0, import_class_to_invokable$1.classToInvokable)(DataTypes$1.GEOGRAPHY);
	const CIDR = (0, import_class_to_invokable$1.classToInvokable)(DataTypes$1.CIDR);
	const INET = (0, import_class_to_invokable$1.classToInvokable)(DataTypes$1.INET);
	const MACADDR = (0, import_class_to_invokable$1.classToInvokable)(DataTypes$1.MACADDR);
	const CITEXT = (0, import_class_to_invokable$1.classToInvokable)(DataTypes$1.CITEXT);
	const TSVECTOR = (0, import_class_to_invokable$1.classToInvokable)(DataTypes$1.TSVECTOR);

	var queryBuilderUtils;
	var hasRequiredQueryBuilderUtils;

	function requireQueryBuilderUtils () {
		if (hasRequiredQueryBuilderUtils) return queryBuilderUtils;
		hasRequiredQueryBuilderUtils = 1;
		var __create = Object.create;
		var __defProp = Object.defineProperty;
		var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
		var __getOwnPropNames = Object.getOwnPropertyNames;
		var __getProtoOf = Object.getPrototypeOf;
		var __hasOwnProp = Object.prototype.hasOwnProperty;
		var __export = (target, all) => {
		  for (var name in all)
		    __defProp(target, name, { get: all[name], enumerable: true });
		};
		var __copyProps = (to, from, except, desc) => {
		  if (from && typeof from === "object" || typeof from === "function") {
		    for (let key of __getOwnPropNames(from))
		      if (!__hasOwnProp.call(to, key) && key !== except)
		        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
		  }
		  return to;
		};
		var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
		  // If the importer is in node compatibility mode or this is not an ESM
		  // file that has been converted to a CommonJS file using a Babel-
		  // compatible transform (i.e. "__esModule" has not been set), then set
		  // "default" to the CommonJS "module.exports" for node compatibility.
		  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
		  mod
		));
		var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
		var query_builder_utils_exports = {};
		__export(query_builder_utils_exports, {
		  defaultValueSchemable: () => defaultValueSchemable,
		  isWhereEmpty: () => isWhereEmpty
		});
		queryBuilderUtils = __toCommonJS(query_builder_utils_exports);
		var import_isEmpty = __toESM(requireIsEmpty());
		var DataTypes = __toESM(dataTypes$8);
		var import_where = where$1;
		function defaultValueSchemable(value) {
		  if (value === void 0) {
		    return false;
		  }
		  if (value instanceof DataTypes.NOW) {
		    return false;
		  }
		  if (value instanceof DataTypes.UUIDV1 || value instanceof DataTypes.UUIDV4) {
		    return false;
		  }
		  return typeof value !== "function";
		}
		function isWhereEmpty(obj) {
		  return Boolean(obj) && (0, import_isEmpty.default)(obj) && (0, import_where.getOperators)(obj).length === 0;
		}
		
		return queryBuilderUtils;
	}

	var __defProp$k = Object.defineProperty;
	var __getOwnPropDesc$k = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames$k = Object.getOwnPropertyNames;
	var __hasOwnProp$k = Object.prototype.hasOwnProperty;
	var __export$k = (target, all) => {
	  for (var name in all)
	    __defProp$k(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps$k = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames$k(from))
	      if (!__hasOwnProp$k.call(to, key) && key !== except)
	        __defProp$k(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc$k(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS$k = (mod) => __copyProps$k(__defProp$k({}, "__esModule", { value: true }), mod);
	var multimap_exports = {};
	__export$k(multimap_exports, {
	  Multimap: () => Multimap
	});
	var multimap = __toCommonJS$k(multimap_exports);
	class Multimap {
	  #internalMap = /* @__PURE__ */ new Map();
	  clear() {
	    this.#internalMap.clear();
	  }
	  append(key, value) {
	    const valueSet = this.#internalMap.get(key);
	    if (valueSet != null) {
	      valueSet.push(value);
	      return this;
	    }
	    this.#internalMap.set(key, [value]);
	    return this;
	  }
	  delete(key, value) {
	    const valueSet = this.#internalMap.get(key);
	    if (valueSet == null) {
	      return false;
	    }
	    const index = valueSet.indexOf(value);
	    if (index === -1) {
	      return false;
	    }
	    valueSet.splice(index, 1);
	    return true;
	  }
	  keys() {
	    return this.#internalMap.keys();
	  }
	  getAll(key) {
	    const values = this.#internalMap.get(key);
	    if (values) {
	      return [...values];
	    }
	    return [];
	  }
	  count(key) {
	    const values = this.#internalMap.get(key);
	    return (values == null ? void 0 : values.length) ?? 0;
	  }
	}

	var __defProp$j = Object.defineProperty;
	var __getOwnPropDesc$j = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames$j = Object.getOwnPropertyNames;
	var __hasOwnProp$j = Object.prototype.hasOwnProperty;
	var __export$j = (target, all) => {
	  for (var name in all)
	    __defProp$j(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps$j = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames$j(from))
	      if (!__hasOwnProp$j.call(to, key) && key !== except)
	        __defProp$j(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc$j(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS$j = (mod) => __copyProps$j(__defProp$j({}, "__esModule", { value: true }), mod);
	var hooks_exports = {};
	__export$j(hooks_exports, {
	  HookHandler: () => HookHandler,
	  HookHandlerBuilder: () => HookHandlerBuilder
	});
	var hooks = __toCommonJS$j(hooks_exports);
	var import_multimap = multimap;
	class HookHandler {
	  #validHookNames;
	  #eventTarget;
	  #listeners = new import_multimap.Multimap();
	  #onRunHook;
	  constructor(eventTarget, validHookNames, onRunHook) {
	    this.#eventTarget = eventTarget;
	    this.#validHookNames = validHookNames;
	    this.#onRunHook = onRunHook;
	  }
	  removeListener(hookName, listenerOrListenerName) {
	    this.#assertValidHookName(hookName);
	    if (typeof listenerOrListenerName === "string") {
	      const listener = this.#getNamedListener(hookName, listenerOrListenerName);
	      if (listener) {
	        this.#listeners.delete(hookName, listener);
	      }
	    } else {
	      const listeners = this.#listeners.getAll(hookName);
	      for (const listener of listeners) {
	        if (listener.callback === listenerOrListenerName) {
	          this.#listeners.delete(hookName, listener);
	        }
	      }
	    }
	  }
	  removeAllListeners() {
	    this.#listeners.clear();
	  }
	  #getNamedListener(hookName, listenerName) {
	    const listeners = this.#listeners.getAll(hookName);
	    for (const listener of listeners) {
	      if (listener.listenerName === listenerName) {
	        return listener;
	      }
	    }
	    return null;
	  }
	  hasListeners(hookName) {
	    this.#assertValidHookName(hookName);
	    return this.#listeners.count(hookName) > 0;
	  }
	  getListenerCount(hookName) {
	    this.#assertValidHookName(hookName);
	    return this.#listeners.count(hookName);
	  }
	  runSync(hookName, ...args) {
	    this.#assertValidHookName(hookName);
	    const listeners = this.#listeners.getAll(hookName);
	    for (const listener of listeners) {
	      const out = listener.callback(...args);
	      if (out && "then" in out) {
	        throw new Error(`${listener.listenerName ? `Listener ${listener.listenerName}` : `An unnamed listener`} of hook ${String(hookName)} on ${getName(this.#eventTarget)} returned a Promise, but the hook is synchronous.`);
	      }
	    }
	    if (this.#onRunHook) {
	      void this.#onRunHook(this.#eventTarget, false, hookName, args);
	    }
	  }
	  async runAsync(hookName, ...args) {
	    this.#assertValidHookName(hookName);
	    const listeners = this.#listeners.getAll(hookName);
	    for (const listener of listeners) {
	      await listener.callback(...args);
	    }
	    if (this.#onRunHook) {
	      await this.#onRunHook(this.#eventTarget, true, hookName, args);
	    }
	  }
	  /**
	   * Registers a listener for a hook.
	   *
	   * Returns a function that can be called to deregister the listener.
	   *
	   * @param hookName
	   * @param listener
	   * @param listenerName
	   */
	  addListener(hookName, listener, listenerName) {
	    this.#assertValidHookName(hookName);
	    if (listenerName) {
	      const existingListener = this.#getNamedListener(hookName, listenerName);
	      if (existingListener) {
	        throw new Error(`Named listener ${listenerName} already exists for hook ${String(hookName)} on ${getName(this.#eventTarget)}.`);
	      }
	    }
	    this.#listeners.append(hookName, { callback: listener, listenerName });
	    return () => {
	      this.removeListener(hookName, listenerName || listener);
	    };
	  }
	  addListeners(listeners) {
	    for (const hookName of this.#validHookNames) {
	      const hookListeners = listeners[hookName];
	      if (!hookListeners) {
	        continue;
	      }
	      const hookListenersArray = Array.isArray(hookListeners) ? hookListeners : [hookListeners];
	      for (const listener of hookListenersArray) {
	        if (typeof listener === "function") {
	          this.addListener(hookName, listener);
	        } else {
	          this.addListener(hookName, listener.callback, listener.name);
	        }
	      }
	    }
	  }
	  #assertValidHookName(hookName) {
	    if (!this.#validHookNames.includes(hookName)) {
	      throw new Error(`Target ${getName(this.#eventTarget)} does not support a hook named "${String(hookName)}".`);
	    }
	  }
	}
	class HookHandlerBuilder {
	  #validHookNames;
	  #hookHandlers = /* @__PURE__ */ new WeakMap();
	  #onRunHook;
	  constructor(validHookNames, onRunHook) {
	    this.#validHookNames = validHookNames;
	    this.#onRunHook = onRunHook;
	  }
	  getFor(target) {
	    let hookHandler = this.#hookHandlers.get(target);
	    if (!hookHandler) {
	      hookHandler = new HookHandler(target, this.#validHookNames, this.#onRunHook);
	      this.#hookHandlers.set(target, hookHandler);
	    }
	    return hookHandler;
	  }
	}
	function getName(obj) {
	  if (typeof obj === "function") {
	    return `[class ${obj.name}]`;
	  }
	  return `[instance ${obj.constructor.name}]`;
	}

	var __defProp$i = Object.defineProperty;
	var __getOwnPropDesc$i = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames$i = Object.getOwnPropertyNames;
	var __hasOwnProp$i = Object.prototype.hasOwnProperty;
	var __export$i = (target, all) => {
	  for (var name in all)
	    __defProp$i(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps$i = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames$i(from))
	      if (!__hasOwnProp$i.call(to, key) && key !== except)
	        __defProp$i(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc$i(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS$i = (mod) => __copyProps$i(__defProp$i({}, "__esModule", { value: true }), mod);
	var model_hooks_exports = {};
	__export$i(model_hooks_exports, {
	  staticModelHooks: () => staticModelHooks,
	  validModelHooks: () => validModelHooks
	});
	var modelHooks = __toCommonJS$i(model_hooks_exports);
	var import_hooks$1 = hooks;
	const validModelHooks = [
	  "beforeValidate",
	  "afterValidate",
	  "validationFailed",
	  "beforeCreate",
	  "afterCreate",
	  "beforeDestroy",
	  "afterDestroy",
	  "beforeRestore",
	  "afterRestore",
	  "beforeUpdate",
	  "afterUpdate",
	  "beforeUpsert",
	  "afterUpsert",
	  "beforeSave",
	  "afterSave",
	  "beforeBulkCreate",
	  "afterBulkCreate",
	  "beforeBulkDestroy",
	  "afterBulkDestroy",
	  "beforeBulkRestore",
	  "afterBulkRestore",
	  "beforeBulkUpdate",
	  "afterBulkUpdate",
	  "beforeCount",
	  "beforeFind",
	  "beforeFindAfterExpandIncludeAll",
	  "beforeFindAfterOptions",
	  "afterFind",
	  "beforeSync",
	  "afterSync",
	  "beforeAssociate",
	  "afterAssociate",
	  "beforeDefinitionRefresh",
	  "afterDefinitionRefresh"
	];
	const staticModelHooks = new import_hooks$1.HookHandlerBuilder(validModelHooks, async (eventTarget, isAsync, hookName, args) => {
	  const model = eventTarget;
	  if (!model.sequelize) {
	    throw new Error("Model must be initialized before running hooks on it.");
	  }
	  if (isAsync) {
	    await model.sequelize.hooks.runAsync(hookName, ...args);
	  } else {
	    model.sequelize.hooks.runSync(hookName, ...args);
	  }
	});

	var __create$7 = Object.create;
	var __defProp$h = Object.defineProperty;
	var __getOwnPropDesc$h = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames$h = Object.getOwnPropertyNames;
	var __getProtoOf$7 = Object.getPrototypeOf;
	var __hasOwnProp$h = Object.prototype.hasOwnProperty;
	var __export$h = (target, all) => {
	  for (var name in all)
	    __defProp$h(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps$h = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames$h(from))
	      if (!__hasOwnProp$h.call(to, key) && key !== except)
	        __defProp$h(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc$h(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toESM$7 = (mod, isNodeMode, target) => (target = mod != null ? __create$7(__getProtoOf$7(mod)) : {}, __copyProps$h(
	  // If the importer is in node compatibility mode or this is not an ESM
	  // file that has been converted to a CommonJS file using a Babel-
	  // compatible transform (i.e. "__esModule" has not been set), then set
	  // "default" to the CommonJS "module.exports" for node compatibility.
	  isNodeMode || !mod || !mod.__esModule ? __defProp$h(target, "default", { value: mod, enumerable: true }) : target,
	  mod
	));
	var __toCommonJS$h = (mod) => __copyProps$h(__defProp$h({}, "__esModule", { value: true }), mod);
	var immutability_exports = {};
	__export$h(immutability_exports, {
	  MapView: () => MapView,
	  SetView: () => SetView
	});
	var immutability = __toCommonJS$h(immutability_exports);
	var import_node_util$1 = __toESM$7(require$$0$1);
	class SetView {
	  #target;
	  constructor(target) {
	    this.#target = target;
	  }
	  /**
	   * @param value
	   * @returns a boolean indicating whether an element with the specified value exists in the Set or not.
	   */
	  has(value) {
	    return this.#target.has(value);
	  }
	  /**
	   * @returns the number of (unique) elements in Set.
	   */
	  get size() {
	    return this.#target.size;
	  }
	  [Symbol.iterator]() {
	    return this.#target[Symbol.iterator]();
	  }
	  values() {
	    return this.#target.values();
	  }
	  toJSON() {
	    return [...this.#target];
	  }
	  [import_node_util$1.default.inspect.custom](depth, options) {
	    const newOptions = Object.assign({}, options, {
	      depth: options.depth == null ? null : options.depth - 1
	    });
	    return import_node_util$1.default.inspect(this.#target, newOptions).replace(/^Set/, "SetView");
	  }
	}
	class MapView {
	  #target;
	  constructor(target) {
	    this.#target = target;
	  }
	  /**
	   * Returns a specified element from the Map object. If the value that is associated to the provided key is an object, then you will get a reference to that object and any change made to that object will effectively modify it inside the Map.
	   *
	   * @param key
	   * @returns Returns the element associated with the specified key. If no element is associated with the specified key, undefined is returned.
	   */
	  get(key) {
	    return this.#target.get(key);
	  }
	  /**
	   * @param key
	   * @returns boolean indicating whether an element with the specified key exists or not.
	   */
	  has(key) {
	    return this.#target.has(key);
	  }
	  /**
	   * @returns the number of elements in the Map.
	   */
	  get size() {
	    return this.#target.size;
	  }
	  [Symbol.iterator]() {
	    return this.#target[Symbol.iterator]();
	  }
	  entries() {
	    return this.#target.entries();
	  }
	  keys() {
	    return this.#target.keys();
	  }
	  values() {
	    return this.#target.values();
	  }
	  toJSON() {
	    return [...this.#target.entries()];
	  }
	  [import_node_util$1.default.inspect.custom](depth, options) {
	    const newOptions = Object.assign({}, options, {
	      depth: options.depth == null ? null : options.depth - 1
	    });
	    return import_node_util$1.default.inspect(this.#target, newOptions).replace(/^Map/, "MapView");
	  }
	}

	var modelDefinition;
	var hasRequiredModelDefinition;

	function requireModelDefinition () {
		if (hasRequiredModelDefinition) return modelDefinition;
		hasRequiredModelDefinition = 1;
		var __create = Object.create;
		var __defProp = Object.defineProperty;
		var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
		var __getOwnPropNames = Object.getOwnPropertyNames;
		var __getProtoOf = Object.getPrototypeOf;
		var __hasOwnProp = Object.prototype.hasOwnProperty;
		var __export = (target, all) => {
		  for (var name in all)
		    __defProp(target, name, { get: all[name], enumerable: true });
		};
		var __copyProps = (to, from, except, desc) => {
		  if (from && typeof from === "object" || typeof from === "function") {
		    for (let key of __getOwnPropNames(from))
		      if (!__hasOwnProp.call(to, key) && key !== except)
		        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
		  }
		  return to;
		};
		var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
		  // If the importer is in node compatibility mode or this is not an ESM
		  // file that has been converted to a CommonJS file using a Babel-
		  // compatible transform (i.e. "__esModule" has not been set), then set
		  // "default" to the CommonJS "module.exports" for node compatibility.
		  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
		  mod
		));
		var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
		var model_definition_exports = {};
		__export(model_definition_exports, {
		  ModelDefinition: () => ModelDefinition,
		  getModelDefinition: () => getModelDefinition,
		  hasModelDefinition: () => hasModelDefinition,
		  mergeModelOptions: () => mergeModelOptions,
		  normalizeReference: () => normalizeReference,
		  registerModelDefinition: () => registerModelDefinition
		});
		modelDefinition = __toCommonJS(model_definition_exports);
		var import_node_util = __toESM(require$$0$1);
		var import_isPlainObject = __toESM(isPlainObject_1);
		var import_omit = __toESM(requireOmit());
		var DataTypes = __toESM(dataTypes$8);
		var import_data_types_utils = requireDataTypesUtils();
		var import_data_types = requireDataTypes$8();
		var import_errors = errors;
		var import_model_hooks = modelHooks;
		var import_model_internals = requireModelInternals();
		var import_deprecations = deprecations;
		var import_dialect = requireDialect();
		var import_immutability = immutability;
		var import_iterators = requireIterators();
		var import_model_utils = requireModelUtils();
		var import_object = object$1;
		var import_string = string$2;
		class ModelDefinition {
		  #sequelize;
		  options;
		  #table;
		  get table() {
		    return this.#table;
		  }
		  associations = /* @__PURE__ */ Object.create(null);
		  /**
		   * The list of attributes that have *not* been normalized.
		   * This list can be mutated. Call {@link refreshAttributes} to update the normalized attributes ({@link attributes)}.
		   */
		  rawAttributes;
		  #attributes = /* @__PURE__ */ new Map();
		  /**
		   * The list of attributes that have been normalized.
		   *
		   * This map is fully frozen and cannot be modified directly.
		   * Modify {@link rawAttributes} then call {@link refreshAttributes} instead.
		   */
		  attributes = new import_immutability.MapView(this.#attributes);
		  #physicalAttributes = /* @__PURE__ */ new Map();
		  /**
		   * The list of attributes that actually exist in the database, as opposed to {@link virtualAttributeNames}.
		   */
		  physicalAttributes = new import_immutability.MapView(this.#physicalAttributes);
		  #columns = /* @__PURE__ */ new Map();
		  columns = new import_immutability.MapView(this.#columns);
		  #primaryKeyAttributeNames = /* @__PURE__ */ new Set();
		  primaryKeysAttributeNames = new import_immutability.SetView(this.#primaryKeyAttributeNames);
		  /**
		   * List of attributes that cannot be modified by the user
		   */
		  #readOnlyAttributeNames = /* @__PURE__ */ new Set();
		  /**
		   * List of attributes that cannot be modified by the user (read-only)
		   */
		  readOnlyAttributeNames = new import_immutability.SetView(this.#readOnlyAttributeNames);
		  /**
		   * Records which attributes are the different built-in timestamp attributes
		   */
		  timestampAttributeNames = /* @__PURE__ */ Object.create(null);
		  /**
		   * The name of the attribute that records the version of the model instance.
		   */
		  #versionAttributeName;
		  get versionAttributeName() {
		    return this.#versionAttributeName;
		  }
		  #jsonAttributeNames = /* @__PURE__ */ new Set();
		  jsonAttributeNames = new import_immutability.SetView(this.#jsonAttributeNames);
		  #virtualAttributeNames = /* @__PURE__ */ new Set();
		  /**
		   * The list of attributes that do not really exist in the database.
		   */
		  virtualAttributeNames = new import_immutability.SetView(this.#virtualAttributeNames);
		  #attributesWithGetters = /* @__PURE__ */ new Set();
		  attributesWithGetters = new import_immutability.SetView(this.#attributesWithGetters);
		  #attributesWithSetters = /* @__PURE__ */ new Set();
		  attributesWithSetters = new import_immutability.SetView(this.#attributesWithSetters);
		  /**
		   * @deprecated Code should not rely on this as users can create custom attributes.
		   */
		  #booleanAttributeNames = /* @__PURE__ */ new Set();
		  /**
		   * @deprecated Code should not rely on this as users can create custom attributes.
		   */
		  booleanAttributeNames = new import_immutability.SetView(this.#booleanAttributeNames);
		  /**
		   * @deprecated Code should not rely on this as users can create custom attributes.
		   */
		  #dateAttributeNames = /* @__PURE__ */ new Set();
		  /**
		   * @deprecated Code should not rely on this as users can create custom attributes.
		   */
		  dateAttributeNames = new import_immutability.SetView(this.#dateAttributeNames);
		  #autoIncrementAttributeName = null;
		  get autoIncrementAttributeName() {
		    return this.#autoIncrementAttributeName;
		  }
		  #defaultValues = /* @__PURE__ */ new Map();
		  defaultValues = new import_immutability.MapView(this.#defaultValues);
		  /**
		   * Final list of indexes, built by refreshIndexes
		   */
		  #indexes = [];
		  /**
		   * @deprecated Temporary property to be able to use elements that have not migrated to ModelDefinition yet.
		   */
		  #model;
		  get modelName() {
		    return this.options.modelName;
		  }
		  get underscored() {
		    return this.options.underscored;
		  }
		  get sequelize() {
		    return this.#sequelize;
		  }
		  // TODO: add generic type to ModelHooks (model, attributes)
		  get hooks() {
		    return import_model_hooks.staticModelHooks.getFor(this);
		  }
		  constructor(attributesOptions, modelOptions, model) {
		    var _a;
		    if (!modelOptions.sequelize) {
		      throw new Error("new ModelDefinition() expects a Sequelize instance to be passed through the option bag, which is the second parameter.");
		    }
		    if (!modelOptions.modelName) {
		      throw new Error("new ModelDefinition() expects a modelName to be passed through the option bag, which is the second parameter.");
		    }
		    this.#sequelize = modelOptions.sequelize;
		    this.#model = model;
		    const globalOptions = this.#sequelize.options;
		    this.options = mergeModelOptions(
		      Object.assign(
		        // default options
		        {
		          noPrimaryKey: false,
		          timestamps: true,
		          validate: {},
		          freezeTableName: false,
		          underscored: false,
		          paranoid: false,
		          schema: "",
		          schemaDelimiter: "",
		          defaultScope: {},
		          scopes: {},
		          name: {},
		          indexes: []
		        },
		        globalOptions.define
		      ),
		      (0, import_object.removeUndefined)(modelOptions),
		      true
		    );
		    if (this.options.getterMethods || this.options.setterMethods) {
		      throw new Error(`Error in the definition of Model ${this.modelName}: The "getterMethods" and "setterMethods" options have been removed.

If you need to use getters & setters that behave like attributes, use VIRTUAL attributes.
If you need regular getters & setters, define your model as a class and add getter & setters.
See https://sequelize.org/docs/v6/core-concepts/getters-setters-virtuals/#deprecated-in-sequelize-v7-gettermethods-and-settermethods for more information.`);
		    }
		    this.options.name.plural ??= (0, import_string.pluralize)(this.options.modelName);
		    this.options.name.singular ??= this.options.modelName;
		    this.#sequelize.hooks.runSync("beforeDefine", attributesOptions, this.options);
		    if (this.sequelize.isDefined(this.modelName)) {
		      this.sequelize.modelManager.removeModel(this.sequelize.modelManager.getModel(this.modelName));
		    }
		    if (this.options.hooks) {
		      this.hooks.addListeners(this.options.hooks);
		    }
		    if (!this.options.tableName) {
		      this.options.tableName = this.options.freezeTableName ? this.modelName : (0, import_string.underscoredIf)(this.options.name.plural, this.underscored);
		    }
		    this.#table = Object.freeze(this.sequelize.queryInterface.queryGenerator.extractTableDetails((0, import_object.removeUndefined)({
		      tableName: this.options.tableName,
		      schema: this.options.schema,
		      delimiter: this.options.schemaDelimiter
		    })));
		    for (const [validatorName, validator] of (0, import_object.getAllOwnEntries)(this.options.validate)) {
		      if (typeof validator !== "function") {
		        throw new TypeError(`Members of the validate option must be functions. Model: ${this.modelName}, error with validate member ${String(validatorName)}`);
		      }
		    }
		    const rawAttributes = /* @__PURE__ */ Object.create(null);
		    for (const [attributeName, rawAttributeOrDataType] of (0, import_object.getAllOwnEntries)(attributesOptions)) {
		      if (typeof attributeName === "symbol") {
		        throw new TypeError("Symbol attributes are not supported");
		      }
		      let rawAttribute;
		      try {
		        rawAttribute = this.sequelize.normalizeAttribute(rawAttributeOrDataType);
		      } catch (error) {
		        throw new import_errors.BaseError(`An error occurred for attribute ${attributeName} on model ${this.modelName}.`, { cause: error });
		      }
		      rawAttributes[attributeName] = rawAttribute;
		      if (rawAttribute.field) {
		        (0, import_deprecations.fieldToColumn)();
		      }
		    }
		    if (this.options.timestamps) {
		      for (const key of ["createdAt", "updatedAt", "deletedAt"]) {
		        if (!["undefined", "string", "boolean"].includes(typeof this.options[key])) {
		          throw new Error(`Value for "${key}" option must be a string or a boolean, got ${typeof this.options[key]}`);
		        }
		        if (this.options[key] === "") {
		          throw new Error(`Value for "${key}" option cannot be an empty string`);
		        }
		      }
		      if (this.options.createdAt !== false) {
		        this.timestampAttributeNames.createdAt = typeof this.options.createdAt === "string" ? this.options.createdAt : "createdAt";
		        this.#readOnlyAttributeNames.add(this.timestampAttributeNames.createdAt);
		      }
		      if (this.options.updatedAt !== false) {
		        this.timestampAttributeNames.updatedAt = typeof this.options.updatedAt === "string" ? this.options.updatedAt : "updatedAt";
		        this.#readOnlyAttributeNames.add(this.timestampAttributeNames.updatedAt);
		      }
		      if (this.options.paranoid && this.options.deletedAt !== false) {
		        this.timestampAttributeNames.deletedAt = typeof this.options.deletedAt === "string" ? this.options.deletedAt : "deletedAt";
		        this.#readOnlyAttributeNames.add(this.timestampAttributeNames.deletedAt);
		      }
		    }
		    if (this.options.version) {
		      this.#versionAttributeName = typeof this.options.version === "string" ? this.options.version : "version";
		      this.#readOnlyAttributeNames.add(this.#versionAttributeName);
		    }
		    this.rawAttributes = /* @__PURE__ */ Object.create(null);
		    if (!this.options.noPrimaryKey && !(0, import_iterators.some)(Object.values(rawAttributes), (attr) => Boolean(attr.primaryKey))) {
		      if ("id" in rawAttributes && ((_a = rawAttributes.id) == null ? void 0 : _a.primaryKey) === void 0) {
		        throw new Error(`An attribute called 'id' was defined in model '${this.options.tableName}' but primaryKey is not set. This is likely to be an error, which can be fixed by setting its 'primaryKey' option to true. If this is intended, explicitly set its 'primaryKey' option to false`);
		      }
		      this.rawAttributes.id = {
		        type: DataTypes.INTEGER(),
		        allowNull: false,
		        primaryKey: true,
		        autoIncrement: true,
		        _autoGenerated: true
		      };
		    }
		    for (const [attributeName, rawAttribute] of Object.entries(rawAttributes)) {
		      this.rawAttributes[attributeName] = rawAttribute;
		    }
		    if (this.timestampAttributeNames.createdAt) {
		      this.#addTimestampAttribute(this.timestampAttributeNames.createdAt, false);
		    }
		    if (this.timestampAttributeNames.updatedAt) {
		      this.#addTimestampAttribute(this.timestampAttributeNames.updatedAt, false);
		    }
		    if (this.timestampAttributeNames.deletedAt) {
		      this.#addTimestampAttribute(this.timestampAttributeNames.deletedAt, true);
		    }
		    if (this.#versionAttributeName) {
		      const existingAttribute = this.rawAttributes[this.#versionAttributeName];
		      if ((existingAttribute == null ? void 0 : existingAttribute.type) && !(existingAttribute.type instanceof DataTypes.INTEGER)) {
		        throw new Error(`Sequelize is trying to add the version attribute ${import_node_util.default.inspect(this.#versionAttributeName)} to Model ${import_node_util.default.inspect(this.modelName)},
but an attribute with the same name already exists and declares a data type.
The "version" attribute is managed automatically by Sequelize, and its type must be DataTypes.INTEGER. Please either:
- remove the "type" property from your attribute definition,
- rename either your attribute or the version attribute,
- or disable the automatic timestamp attributes.`);
		      }
		      if ((existingAttribute == null ? void 0 : existingAttribute.allowNull) === true) {
		        throw new Error(`Sequelize is trying to add the timestamp attribute ${import_node_util.default.inspect(this.#versionAttributeName)} to Model ${import_node_util.default.inspect(this.modelName)},
but an attribute with the same name already exists and its allowNull option (${existingAttribute.allowNull}) conflicts with the one Sequelize is trying to set (false).
The "version" attribute is managed automatically by Sequelize, and its nullability is not configurable. Please either:
- remove the "allowNull" property from your attribute definition,
- rename either your attribute or the version attribute,
- or disable the automatic version attribute.`);
		      }
		      this.rawAttributes[this.#versionAttributeName] = {
		        ...existingAttribute,
		        type: DataTypes.INTEGER,
		        allowNull: false,
		        defaultValue: 0,
		        _autoGenerated: true
		      };
		    }
		    this.refreshAttributes();
		  }
		  #addTimestampAttribute(attributeName, allowNull) {
		    const existingAttribute = this.rawAttributes[attributeName];
		    if ((existingAttribute == null ? void 0 : existingAttribute.type) && !(existingAttribute.type instanceof DataTypes.DATE)) {
		      throw new Error(`Sequelize is trying to add the timestamp attribute ${import_node_util.default.inspect(attributeName)} to Model ${import_node_util.default.inspect(this.modelName)},
but an attribute with the same name already exists and declares a data type.
Timestamp attributes are managed automatically by Sequelize, and their data type must be DataTypes.DATE (https://github.com/sequelize/sequelize/issues/2572). Please either:
- remove the "type" property from your attribute definition,
- rename either your attribute or the timestamp attribute,
- or disable the automatic timestamp attributes.`);
		    }
		    if ((existingAttribute == null ? void 0 : existingAttribute.allowNull) != null && (existingAttribute == null ? void 0 : existingAttribute.allowNull) !== allowNull) {
		      throw new Error(`Sequelize is trying to add the timestamp attribute ${import_node_util.default.inspect(attributeName)} to Model ${import_node_util.default.inspect(this.modelName)},
but an attribute with the same name already exists and its allowNull option (${existingAttribute.allowNull}) conflicts with the one Sequelize is trying to set (${allowNull}).
Timestamp attributes are managed automatically by Sequelize, and their nullability is not configurable. Please either:
- remove the "allowNull" property from your attribute definition,
- rename either your attribute or the timestamp attribute,
- or disable the automatic timestamp attributes.`);
		    }
		    this.rawAttributes[attributeName] = {
		      // @ts-expect-error -- this property is not mandatory in timestamp attributes
		      type: DataTypes.DATE(6),
		      ...this.rawAttributes[attributeName],
		      allowNull,
		      _autoGenerated: true
		    };
		  }
		  /**
		   * Normalizes all attribute definitions, using {@link rawAttributes} as the source.
		   */
		  refreshAttributes() {
		    var _a;
		    this.hooks.runSync("beforeDefinitionRefresh");
		    this.#attributes.clear();
		    this.#booleanAttributeNames.clear();
		    this.#dateAttributeNames.clear();
		    this.#jsonAttributeNames.clear();
		    this.#virtualAttributeNames.clear();
		    this.#physicalAttributes.clear();
		    this.#defaultValues.clear();
		    this.#columns.clear();
		    this.#primaryKeyAttributeNames.clear();
		    this.#autoIncrementAttributeName = null;
		    this.#attributesWithGetters.clear();
		    this.#attributesWithSetters.clear();
		    const attributeIndexes = [];
		    for (const [attributeName, rawAttribute] of Object.entries(this.rawAttributes)) {
		      if (typeof attributeName !== "string") {
		        throw new TypeError(`Attribute names must be strings, but "${this.modelName}" declared a non-string attribute: ${import_node_util.default.inspect(attributeName)}`);
		      }
		      if (attributeName.startsWith("$") || attributeName.endsWith("$")) {
		        throw new Error(`Name of attribute "${attributeName}" in model "${this.modelName}" cannot start or end with "$" as "$attribute$" is reserved syntax used to reference nested columns in queries.`);
		      }
		      if (attributeName.includes(".")) {
		        throw new Error(`Name of attribute "${attributeName}" in model "${this.modelName}" cannot include the character "." as it would be ambiguous with the syntax used to reference nested columns, and nested json keys, in queries.`);
		      }
		      if (attributeName.includes("::")) {
		        throw new Error(`Name of attribute "${attributeName}" in model "${this.modelName}" cannot include the character sequence "::" as it is reserved syntax used to cast attributes in queries.`);
		      }
		      if (attributeName.includes("->")) {
		        throw new Error(`Name of attribute "${attributeName}" in model "${this.modelName}" cannot include the character sequence "->" as it is reserved syntax used in SQL generated by Sequelize to target nested associations.`);
		      }
		      if (!(0, import_isPlainObject.default)(rawAttribute)) {
		        throw new Error(`Attribute "${this.modelName}.${attributeName}" must be specified as a plain object.`);
		      }
		      if (!rawAttribute.type) {
		        throw new Error(`Attribute "${this.modelName}.${attributeName}" does not specify its DataType.`);
		      }
		      try {
		        const columnName = rawAttribute.columnName ?? rawAttribute.field ?? (0, import_string.underscoredIf)(attributeName, this.underscored);
		        const builtAttribute = (0, import_object.noPrototype)({
		          ...(0, import_omit.default)(rawAttribute, ["unique", "index"]),
		          type: this.#sequelize.normalizeDataType(rawAttribute.type),
		          references: normalizeReference(rawAttribute.references),
		          // fieldName is a legacy name, renamed to attributeName.
		          fieldName: attributeName,
		          attributeName,
		          // field is a legacy name, renamed to columnName.
		          field: columnName,
		          columnName,
		          // @ts-expect-error -- undocumented legacy property, to be removed.
		          Model: this.#model,
		          // undocumented legacy property, to be removed.
		          _modelAttribute: true
		        });
		        if (builtAttribute.type instanceof import_data_types.AbstractDataType) {
		          builtAttribute.type = builtAttribute.type.withUsageContext({
		            // TODO: Repository Pattern - replace with ModelDefinition
		            model: this.#model,
		            attributeName,
		            sequelize: this.sequelize
		          });
		        }
		        if (Object.hasOwn(builtAttribute, "defaultValue")) {
		          if ((0, import_data_types_utils.isDataTypeClass)(builtAttribute.defaultValue)) {
		            builtAttribute.defaultValue = new builtAttribute.defaultValue();
		          }
		          this.#defaultValues.set(attributeName, () => (0, import_dialect.toDefaultValue)(builtAttribute.defaultValue));
		        }
		        if (rawAttribute.allowNull !== false && ((_a = rawAttribute.validate) == null ? void 0 : _a.notNull)) {
		          throw new Error(`"notNull" validator is only allowed with "allowNull:false"`);
		        }
		        if (builtAttribute.primaryKey === true) {
		          this.#primaryKeyAttributeNames.add(attributeName);
		        }
		        if (builtAttribute.type instanceof DataTypes.BOOLEAN) {
		          this.#booleanAttributeNames.add(attributeName);
		        } else if (builtAttribute.type instanceof DataTypes.DATE || rawAttribute.type instanceof DataTypes.DATEONLY) {
		          this.#dateAttributeNames.add(attributeName);
		        } else if (builtAttribute.type instanceof DataTypes.JSON) {
		          this.#jsonAttributeNames.add(attributeName);
		        }
		        if (Object.hasOwn(rawAttribute, "unique") && rawAttribute.unique) {
		          const uniqueIndexes = Array.isArray(rawAttribute.unique) ? rawAttribute.unique : [rawAttribute.unique];
		          for (const uniqueIndex of uniqueIndexes) {
		            if (uniqueIndex === true || typeof uniqueIndex === "string") {
		              attributeIndexes.push({
		                unique: true,
		                fields: [builtAttribute.columnName],
		                ...typeof uniqueIndex === "string" ? { name: uniqueIndex } : void 0
		              });
		            } else {
		              attributeIndexes.push({
		                ...uniqueIndex,
		                unique: true,
		                fields: [builtAttribute.columnName]
		              });
		            }
		          }
		        }
		        if (Object.hasOwn(rawAttribute, "index") && rawAttribute.index) {
		          const indexes = Array.isArray(rawAttribute.index) ? rawAttribute.index : [rawAttribute.index];
		          for (const index of indexes) {
		            const jsonbIndexDefaults = rawAttribute.type instanceof DataTypes.JSONB ? { using: "gin" } : void 0;
		            if (!index) {
		              continue;
		            }
		            if (index === true || typeof index === "string") {
		              attributeIndexes.push({
		                fields: [builtAttribute.columnName],
		                ...typeof index === "string" ? { name: index } : void 0,
		                ...jsonbIndexDefaults
		              });
		            } else {
		              if (index.fields) {
		                throw new Error('"fields" cannot be specified for indexes defined on attributes. Use the "indexes" option on the table definition instead. You can also customize how this attribute is part of the index by specifying the "attribute" option on the index.');
		              }
		              const { attribute: indexAttributeOptions, ...indexOptions } = index;
		              attributeIndexes.push({
		                ...jsonbIndexDefaults,
		                ...indexOptions,
		                fields: [
		                  indexAttributeOptions ? {
		                    ...indexAttributeOptions,
		                    name: builtAttribute.columnName
		                  } : builtAttribute.columnName
		                ]
		              });
		            }
		          }
		        }
		        if (builtAttribute.autoIncrement) {
		          if (this.#autoIncrementAttributeName) {
		            throw new Error(`Only one autoIncrement attribute is allowed per model, but both ${import_node_util.default.inspect(attributeName)} and ${import_node_util.default.inspect(this.#autoIncrementAttributeName)} are marked as autoIncrement.`);
		          }
		          this.#autoIncrementAttributeName = attributeName;
		        }
		        Object.freeze(builtAttribute);
		        this.#attributes.set(attributeName, builtAttribute);
		        this.#columns.set(builtAttribute.columnName, builtAttribute);
		        if (builtAttribute.type instanceof DataTypes.VIRTUAL) {
		          this.#virtualAttributeNames.add(attributeName);
		        } else {
		          this.#physicalAttributes.set(attributeName, builtAttribute);
		        }
		        if (builtAttribute.get) {
		          this.#attributesWithGetters.add(attributeName);
		        }
		        if (builtAttribute.set) {
		          this.#attributesWithSetters.add(attributeName);
		        }
		      } catch (error) {
		        throw new import_errors.BaseError(`An error occurred while normalizing attribute ${JSON.stringify(attributeName)} in model ${JSON.stringify(this.modelName)}.`, { cause: error });
		      }
		    }
		    this.#refreshIndexes(attributeIndexes);
		    this.hooks.runSync("afterDefinitionRefresh");
		  }
		  #refreshIndexes(attributeIndexes) {
		    this.#indexes = [];
		    for (const index of this.options.indexes) {
		      this.#addIndex(index);
		    }
		    for (const index of attributeIndexes) {
		      this.#addIndex(index);
		    }
		  }
		  #addIndex(index) {
		    var _a, _b;
		    index = this.#nameIndex((0, import_model_internals.conformIndex)(index));
		    if (typeof ((_a = index.fields) == null ? void 0 : _a[0]) === "string") {
		      const column = (_b = this.columns.get(index.fields[0])) == null ? void 0 : _b.attributeName;
		      if (column) {
		        index.column = column;
		      }
		    }
		    const existingIndex = this.#indexes.find((i) => i.name === index.name);
		    if (existingIndex == null) {
		      this.#indexes.push(index);
		      return;
		    }
		    for (const key of Object.keys(index)) {
		      if (index[key] === void 0) {
		        continue;
		      }
		      if (key === "column") {
		        continue;
		      }
		      if (key === "fields") {
		        if (existingIndex.fields == null) {
		          existingIndex.fields = index.fields;
		        } else {
		          existingIndex.fields = [...existingIndex.fields, ...index.fields];
		        }
		        continue;
		      }
		      if (existingIndex[key] === void 0) {
		        existingIndex[key] = index[key];
		      }
		      if (existingIndex[key] !== index[key]) {
		        throw new Error(`Index "${index.name}" has conflicting options: "${key}" was defined with different values ${import_node_util.default.inspect(existingIndex[key])} and ${import_node_util.default.inspect(index[key])}.`);
		      }
		    }
		  }
		  #nameIndex(newIndex) {
		    if (Object.hasOwn(newIndex, "name")) {
		      return newIndex;
		    }
		    const newName = (0, import_string.generateIndexName)(this.table, newIndex);
		    for (const index of this.getIndexes()) {
		      if (index.name === newName) {
		        throw new Error(`Sequelize tried to give the name "${newName}" to index:
${import_node_util.default.inspect(newIndex)}
on model "${this.#model.name}", but that name is already taken by index:
${import_node_util.default.inspect(index)}

Specify a different name for either index to resolve this issue.`);
		      }
		    }
		    newIndex.name = newName;
		    return newIndex;
		  }
		  getIndexes() {
		    return this.#indexes;
		  }
		  /**
		   * Returns the column name corresponding to the given attribute name.
		   *
		   * @param attributeName
		   */
		  getColumnName(attributeName) {
		    const attribute = this.#attributes.get(attributeName);
		    if (attribute == null) {
		      throw new Error(`Attribute "${attributeName}" does not exist on model "${this.modelName}".`);
		    }
		    return attribute.columnName;
		  }
		  /**
		   * Returns the column name corresponding to the given attribute name if it exists, otherwise returns the attribute name.
		   *
		   * ⚠️ Using this method is highly discouraged. Users should specify column names & attribute names separately, to prevent any ambiguity.
		   *
		   * @param attributeName
		   */
		  getColumnNameLoose(attributeName) {
		    const attribute = this.#attributes.get(attributeName);
		    return (attribute == null ? void 0 : attribute.columnName) ?? attributeName;
		  }
		  /**
		   * Follows the association path and returns the association at the end of the path.
		   * For instance, say we have a model User, associated to a model Profile, associated to a model Address.
		   *
		   * If we call `User.modelDefinition.getAssociation(['profile', 'address'])`, we will get the association named `address` in the model Profile.
		   * If we call `User.modelDefinition.getAssociation(['profile'])`, we will get the association named `profile` in the model User.
		   *
		   * @param associationPath
		   */
		  getAssociation(associationPath) {
		    if (typeof associationPath === "string") {
		      return this.associations[associationPath];
		    }
		    return this.#getAssociationFromPathMut([...associationPath]);
		  }
		  #getAssociationFromPathMut(associationPath) {
		    if (associationPath.length === 0) {
		      return void 0;
		    }
		    const associationName = associationPath.shift();
		    const association = this.associations[associationName];
		    if (association == null) {
		      return void 0;
		    }
		    if (associationPath.length === 0) {
		      return association;
		    }
		    return association.target.modelDefinition.#getAssociationFromPathMut(associationPath);
		  }
		}
		const modelDefinitions = /* @__PURE__ */ new WeakMap();
		function registerModelDefinition(model, modelDefinition) {
		  if (modelDefinitions.has(model)) {
		    throw new Error(`Model ${model.name} has already been initialized. Models can only belong to one Sequelize instance. Registering the same model with multiple Sequelize instances is not yet supported. Please see https://github.com/sequelize/sequelize/issues/15389`);
		  }
		  modelDefinitions.set(model, modelDefinition);
		}
		function hasModelDefinition(model) {
		  return modelDefinitions.has(model);
		}
		function getModelDefinition(model) {
		  const definition = modelDefinitions.get(model);
		  if (!definition) {
		    throw new Error(`Model ${model.name} has not been initialized yet.`);
		  }
		  return definition;
		}
		function normalizeReference(references) {
		  if (!references) {
		    return void 0;
		  }
		  if (typeof references === "string") {
		    return Object.freeze(banReferenceModel({
		      table: references
		    }));
		  }
		  if ((0, import_model_utils.isModelStatic)(references)) {
		    return Object.freeze(banReferenceModel({
		      table: references.table
		    }));
		  }
		  const { model, table, ...referencePassDown } = references;
		  if (model && table) {
		    throw new Error('"references" cannot contain both "model" and "tableName"');
		  }
		  if (!model && !table) {
		    return void 0;
		  }
		  if (model || table) {
		    return Object.freeze(banReferenceModel({
		      table: model ? model.table : table,
		      ...referencePassDown
		    }));
		  }
		}
		function banReferenceModel(reference) {
		  Object.defineProperty(reference, "model", {
		    enumerable: false,
		    get() {
		      throw new Error("references.model has been renamed to references.tableName in normalized references options.");
		    }
		  });
		  return reference;
		}
		function mergeModelOptions(existingModelOptions, options, overrideOnConflict) {
		  for (const [optionName, optionValue] of Object.entries(options)) {
		    if (!(optionName in existingModelOptions)) {
		      existingModelOptions[optionName] = optionValue;
		      continue;
		    }
		    if (optionName === "scopes" || optionName === "validate") {
		      for (const [subOptionName, subOptionValue] of (0, import_object.getAllOwnEntries)(optionValue)) {
		        if (existingModelOptions[optionName][subOptionName] === subOptionValue) {
		          continue;
		        }
		        if (!overrideOnConflict && subOptionName in existingModelOptions[optionName]) {
		          throw new Error(`Trying to set the option ${optionName}[${JSON.stringify(subOptionName)}], but a value already exists.`);
		        }
		        existingModelOptions[optionName][subOptionName] = subOptionValue;
		      }
		      continue;
		    }
		    if (optionName === "hooks") {
		      const existingHooks = existingModelOptions.hooks;
		      for (const hookType of Object.keys(optionValue)) {
		        if (!existingHooks[hookType]) {
		          existingHooks[hookType] = optionValue[hookType];
		          continue;
		        }
		        const existingHooksOfType = Array.isArray(existingHooks[hookType]) ? existingHooks[hookType] : [existingHooks[hookType]];
		        if (!Array.isArray(optionValue[hookType])) {
		          existingHooks[hookType] = [...existingHooksOfType, optionValue[hookType]];
		        } else {
		          existingHooks[hookType] = [...existingHooksOfType, ...optionValue[hookType]];
		        }
		      }
		      continue;
		    }
		    if (optionName === "indexes") {
		      existingModelOptions.indexes = [...existingModelOptions.indexes, ...optionValue];
		      continue;
		    }
		    if (!overrideOnConflict && optionValue !== existingModelOptions[optionName]) {
		      throw new Error(`Trying to set the option ${optionName}, but a value already exists.`);
		    }
		    existingModelOptions[optionName] = optionValue;
		  }
		  return existingModelOptions;
		}
		
		return modelDefinition;
	}

	var model$1;
	var hasRequiredModel$1;

	function requireModel$1 () {
		if (hasRequiredModel$1) return model$1;
		hasRequiredModel$1 = 1;
		var __defProp = Object.defineProperty;
		var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
		var __getOwnPropNames = Object.getOwnPropertyNames;
		var __hasOwnProp = Object.prototype.hasOwnProperty;
		var __export = (target, all) => {
		  for (var name in all)
		    __defProp(target, name, { get: all[name], enumerable: true });
		};
		var __copyProps = (to, from, except, desc) => {
		  if (from && typeof from === "object" || typeof from === "function") {
		    for (let key of __getOwnPropNames(from))
		      if (!__hasOwnProp.call(to, key) && key !== except)
		        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
		  }
		  return to;
		};
		var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
		var model_exports = {};
		__export(model_exports, {
		  initDecoratedModel: () => initDecoratedModel,
		  isDecoratedModel: () => isDecoratedModel,
		  mergeAttributeOptions: () => mergeAttributeOptions,
		  registerModelAttributeOptions: () => registerModelAttributeOptions,
		  registerModelOptions: () => registerModelOptions
		});
		model$1 = __toCommonJS(model_exports);
		var import_data_types_utils = requireDataTypesUtils();
		var import_base_error = baseError;
		var import_model_definition = requireModelDefinition();
		var import_model_typescript = requireModelTypescript();
		var import_model_utils = requireModelUtils();
		var import_object = object$1;
		const registeredOptions = /* @__PURE__ */ new WeakMap();
		function registerModelOptions(model, options) {
		  if (!registeredOptions.has(model)) {
		    registeredOptions.set(model, { model: options, attributes: {} });
		    return;
		  }
		  const existingModelOptions = registeredOptions.get(model).model;
		  try {
		    (0, import_model_definition.mergeModelOptions)(existingModelOptions, options, false);
		  } catch (error) {
		    throw new import_base_error.BaseError(`Multiple decorators are trying to register conflicting options on model ${model.name}`, { cause: error });
		  }
		}
		function registerModelAttributeOptions(model, attributeName, options) {
		  if (!registeredOptions.has(model)) {
		    registeredOptions.set(model, {
		      model: {},
		      attributes: {
		        [attributeName]: options
		      }
		    });
		    return;
		  }
		  const existingAttributesOptions = registeredOptions.get(model).attributes;
		  if (!(attributeName in existingAttributesOptions)) {
		    existingAttributesOptions[attributeName] = options;
		    return;
		  }
		  const existingOptions = existingAttributesOptions[attributeName];
		  mergeAttributeOptions(attributeName, model, existingOptions, options, false);
		}
		function mergeAttributeOptions(attributeName, model, existingOptions, options, overrideOnConflict) {
		  for (const [optionName, optionValue] of Object.entries(options)) {
		    if (!(optionName in existingOptions)) {
		      existingOptions[optionName] = optionValue;
		      continue;
		    }
		    if (optionName === "validate") {
		      for (const [subOptionName, subOptionValue] of (0, import_object.getAllOwnEntries)(optionValue)) {
		        if (subOptionName in existingOptions[optionName] && !overrideOnConflict) {
		          throw new Error(`Multiple decorators are attempting to register option ${optionName}[${JSON.stringify(subOptionName)}] of attribute ${attributeName} on model ${model.name}.`);
		        }
		        existingOptions[optionName][subOptionName] = subOptionValue;
		      }
		      continue;
		    }
		    if (optionName === "index" || optionName === "unique") {
		      if (!existingOptions[optionName]) {
		        existingOptions[optionName] = [];
		      } else if (!Array.isArray(existingOptions[optionName])) {
		        existingOptions[optionName] = [existingOptions[optionName]];
		      }
		      if (Array.isArray(optionValue)) {
		        existingOptions[optionName] = [...existingOptions[optionName], ...optionValue];
		      } else {
		        existingOptions[optionName] = [...existingOptions[optionName], optionValue];
		      }
		      continue;
		    }
		    if (optionValue === existingOptions[optionName] || overrideOnConflict) {
		      continue;
		    }
		    throw new Error(`Multiple decorators are attempting to set different values for the option ${optionName} of attribute ${attributeName} on model ${model.name}.`);
		  }
		  return existingOptions;
		}
		function initDecoratedModel(model, sequelize) {
		  var _a;
		  const isAbstract = (_a = registeredOptions.get(model)) == null ? void 0 : _a.model.abstract;
		  if (isAbstract) {
		    return false;
		  }
		  const modelOptions = getRegisteredModelOptions(model);
		  const attributeOptions = getRegisteredAttributeOptions(model);
		  (0, import_model_typescript.initModel)(model, attributeOptions, {
		    ...modelOptions,
		    sequelize
		  });
		  return true;
		}
		const NON_INHERITABLE_MODEL_OPTIONS = [
		  "modelName",
		  "name",
		  "tableName"
		];
		function getRegisteredModelOptions(model) {
		  var _a;
		  const modelOptions = ((_a = registeredOptions.get(model)) == null ? void 0 : _a.model) ?? import_object.EMPTY_OBJECT;
		  const parentModel = Object.getPrototypeOf(model);
		  if ((0, import_model_utils.isModelStatic)(parentModel)) {
		    const parentModelOptions = { ...getRegisteredModelOptions(parentModel) };
		    for (const nonInheritableOption of NON_INHERITABLE_MODEL_OPTIONS) {
		      delete parentModelOptions[nonInheritableOption];
		    }
		    parentModelOptions.indexes = (0, import_object.cloneDeep)(parentModelOptions.indexes);
		    parentModelOptions.defaultScope = (0, import_object.cloneDeep)(parentModelOptions.defaultScope);
		    parentModelOptions.scopes = (0, import_object.cloneDeep)(parentModelOptions.scopes);
		    parentModelOptions.validate = (0, import_object.cloneDeep)(parentModelOptions.validate);
		    parentModelOptions.hooks = (0, import_object.cloneDeep)(parentModelOptions.hooks);
		    return (0, import_model_definition.mergeModelOptions)(parentModelOptions, modelOptions, true);
		  }
		  return modelOptions;
		}
		function getRegisteredAttributeOptions(model) {
		  var _a;
		  const descendantAttributes = {
		    ...((_a = registeredOptions.get(model)) == null ? void 0 : _a.attributes) ?? import_object.EMPTY_OBJECT
		  };
		  const parentModel = Object.getPrototypeOf(model);
		  if ((0, import_model_utils.isModelStatic)(parentModel)) {
		    const parentAttributes = getRegisteredAttributeOptions(parentModel);
		    for (const attributeName of Object.keys(parentAttributes)) {
		      const descendantAttribute = descendantAttributes[attributeName];
		      const parentAttribute = { ...parentAttributes[attributeName] };
		      if (parentAttribute.type) {
		        if (typeof parentAttribute.type === "function") {
		          parentAttribute.type = new parentAttribute.type();
		        } else {
		          parentAttribute.type = (0, import_data_types_utils.cloneDataType)(parentAttribute.type);
		        }
		      }
		      parentAttribute.unique = (0, import_object.cloneDeep)(parentAttribute.unique);
		      parentAttribute.index = (0, import_object.cloneDeep)(parentAttribute.index);
		      parentAttribute.references = (0, import_object.cloneDeep)(parentAttribute.references);
		      parentAttribute.validate = (0, import_object.cloneDeep)(parentAttribute.validate);
		      if (!descendantAttribute) {
		        descendantAttributes[attributeName] = parentAttribute;
		      } else {
		        descendantAttributes[attributeName] = mergeAttributeOptions(
		          attributeName,
		          model,
		          parentAttribute,
		          descendantAttribute,
		          true
		        );
		      }
		    }
		  }
		  return descendantAttributes;
		}
		function isDecoratedModel(model) {
		  return registeredOptions.has(model);
		}
		
		return model$1;
	}

	var __defProp$g = Object.defineProperty;
	var __getOwnPropDesc$g = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames$g = Object.getOwnPropertyNames;
	var __hasOwnProp$g = Object.prototype.hasOwnProperty;
	var __export$g = (target, all) => {
	  for (var name in all)
	    __defProp$g(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps$g = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames$g(from))
	      if (!__hasOwnProp$g.call(to, key) && key !== except)
	        __defProp$g(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc$g(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS$g = (mod) => __copyProps$g(__defProp$g({}, "__esModule", { value: true }), mod);
	var hooks_legacy_exports = {};
	__export$g(hooks_legacy_exports, {
	  legacyBuildAddAnyHook: () => legacyBuildAddAnyHook,
	  legacyBuildAddHook: () => legacyBuildAddHook,
	  legacyBuildHasHook: () => legacyBuildHasHook,
	  legacyBuildRemoveHook: () => legacyBuildRemoveHook,
	  legacyBuildRunHook: () => legacyBuildRunHook
	});
	var hooksLegacy = __toCommonJS$g(hooks_legacy_exports);
	var import_deprecations$1 = deprecations;
	function legacyBuildRunHook(_hookHandlerBuilder) {
	  return async function runHooks(hookName, ...args) {
	    (0, import_deprecations$1.hooksReworked)();
	    return this.hooks.runAsync(hookName, ...args);
	  };
	}
	function legacyBuildAddAnyHook(_hookHandlerBuilder) {
	  return function addHook(hookName, listenerNameOrHook, hook) {
	    (0, import_deprecations$1.hooksReworked)();
	    if (hook) {
	      this.hooks.addListener(hookName, hook, listenerNameOrHook);
	    } else {
	      this.hooks.addListener(hookName, listenerNameOrHook);
	    }
	    return this;
	  };
	}
	function legacyBuildAddHook(hookHandlerBuilder, hookName) {
	  return function addHook(listenerNameOrHook, hook) {
	    (0, import_deprecations$1.hooksReworked)();
	    if (hook) {
	      this.hooks.addListener(hookName, hook, listenerNameOrHook);
	    } else {
	      this.hooks.addListener(hookName, listenerNameOrHook);
	    }
	    return this;
	  };
	}
	function legacyBuildHasHook(_hookHandlerBuilder) {
	  return function hasHook(hookName) {
	    (0, import_deprecations$1.hooksReworked)();
	    return this.hooks.hasListeners(hookName);
	  };
	}
	function legacyBuildRemoveHook(_hookHandlerBuilder) {
	  return function removeHook(hookName, listenerNameOrListener) {
	    (0, import_deprecations$1.hooksReworked)();
	    return this.hooks.removeListener(hookName, listenerNameOrListener);
	  };
	}

	var modelTypescript;
	var hasRequiredModelTypescript;

	function requireModelTypescript () {
		if (hasRequiredModelTypescript) return modelTypescript;
		hasRequiredModelTypescript = 1;
		var __defProp = Object.defineProperty;
		var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
		var __getOwnPropNames = Object.getOwnPropertyNames;
		var __hasOwnProp = Object.prototype.hasOwnProperty;
		var __export = (target, all) => {
		  for (var name in all)
		    __defProp(target, name, { get: all[name], enumerable: true });
		};
		var __copyProps = (to, from, except, desc) => {
		  if (from && typeof from === "object" || typeof from === "function") {
		    for (let key of __getOwnPropNames(from))
		      if (!__hasOwnProp.call(to, key) && key !== except)
		        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
		  }
		  return to;
		};
		var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
		var model_typescript_exports = {};
		__export(model_typescript_exports, {
		  ModelTypeScript: () => ModelTypeScript,
		  initModel: () => initModel
		});
		modelTypescript = __toCommonJS(model_typescript_exports);
		var import_model = requireModel$1();
		var import_hooks_legacy = hooksLegacy;
		var import_model_definition = requireModelDefinition();
		var import_model_hooks = modelHooks;
		var import_deprecations = deprecations;
		var import_object = object$1;
		class ModelTypeScript {
		  static get queryInterface() {
		    return this.sequelize.queryInterface;
		  }
		  static get queryGenerator() {
		    return this.queryInterface.queryGenerator;
		  }
		  /**
		   * A reference to the sequelize instance.
		   */
		  get sequelize() {
		    return this.constructor.sequelize;
		  }
		  /**
		   * A reference to the sequelize instance.
		   *
		   * Accessing this property throws if the model has not been registered with a Sequelize instance yet.
		   */
		  static get sequelize() {
		    return this.modelDefinition.sequelize;
		  }
		  /**
		   * Returns the model definition of this model.
		   * The model definition contains all metadata about this model.
		   */
		  static get modelDefinition() {
		    return (0, import_model_definition.getModelDefinition)(this);
		  }
		  /**
		   * An object hash from alias to association object
		   */
		  static get associations() {
		    return this.modelDefinition.associations;
		  }
		  /**
		   * The name of the primary key attribute (on the JS side).
		   *
		   * @deprecated This property doesn't work for composed primary keys. Use {@link primaryKeyAttributes} instead.
		   */
		  static get primaryKeyAttribute() {
		    return this.primaryKeyAttributes[0] ?? null;
		  }
		  /**
		   * The name of the primary key attributes (on the JS side).
		   *
		   * @deprecated use {@link modelDefinition}.
		   */
		  static get primaryKeyAttributes() {
		    return [...this.modelDefinition.primaryKeysAttributeNames];
		  }
		  /**
		   * The column name of the primary key.
		   *
		   * @deprecated don't use this. It doesn't work with composite PKs. It may be removed in the future to reduce duplication.
		   *  Use the. Use {@link Model.primaryKeys} instead.
		   */
		  static get primaryKeyField() {
		    const primaryKeyAttribute = this.primaryKeyAttribute;
		    if (!primaryKeyAttribute) {
		      return null;
		    }
		    return this.modelDefinition.getColumnName(primaryKeyAttribute);
		  }
		  /**
		   * Like {@link Model.rawAttributes}, but only includes attributes that are part of the Primary Key.
		   */
		  static get primaryKeys() {
		    const out = /* @__PURE__ */ Object.create(null);
		    const definition = this.modelDefinition;
		    for (const primaryKey of definition.primaryKeysAttributeNames) {
		      out[primaryKey] = definition.attributes.get(primaryKey);
		    }
		    return out;
		  }
		  /**
		   * The options that the model was initialized with
		   */
		  static get options() {
		    return this.modelDefinition.options;
		  }
		  /**
		   * The name of the database table
		   *
		   * @deprecated use {@link modelDefinition} or {@link table}.
		   */
		  static get tableName() {
		    (0, import_deprecations.noModelTableName)();
		    return this.modelDefinition.table.tableName;
		  }
		  static get table() {
		    return this.modelDefinition.table;
		  }
		  /**
		   * @deprecated use {@link modelDefinition}'s {@link ModelDefinition#rawAttributes} or {@link ModelDefinition#attributes} instead.
		   */
		  static get rawAttributes() {
		    throw new Error(`${this.name}.rawAttributes has been removed, as it has been split in two:
- If you only need to read the final attributes, use ${this.name}.modelDefinition.attributes
- If you need to modify the attributes, mutate ${this.name}.modelDefinition.rawAttributes, then call ${this.name}.modelDefinition.refreshAttributes()`);
		  }
		  /**
		   * @deprecated use {@link modelDefinition}'s {@link ModelDefinition#rawAttributes} or {@link ModelDefinition#attributes} instead.
		   */
		  get rawAttributes() {
		    return this.constructor.rawAttributes;
		  }
		  /**
		   * @deprecated use {@link modelDefinition}'s {@link ModelDefinition#columns}.
		   */
		  static get fieldRawAttributesMap() {
		    return (0, import_object.getObjectFromMap)(this.modelDefinition.columns);
		  }
		  /**
		   * @deprecated use {@link modelDefinition}'s {@link ModelDefinition#physicalAttributes}.
		   */
		  static get tableAttributes() {
		    return (0, import_object.getObjectFromMap)(this.modelDefinition.physicalAttributes);
		  }
		  /**
		   * A mapping of column name to attribute name
		   *
		   * @private
		   */
		  static get fieldAttributeMap() {
		    const out = /* @__PURE__ */ Object.create(null);
		    const attributes = this.modelDefinition.attributes;
		    for (const attribute of attributes.values()) {
		      out[attribute.columnName] = attribute.attributeName;
		    }
		    return out;
		  }
		  static get hooks() {
		    return this.modelDefinition.hooks;
		  }
		  static addHook = (0, import_hooks_legacy.legacyBuildAddAnyHook)(import_model_hooks.staticModelHooks);
		  static hasHook = (0, import_hooks_legacy.legacyBuildHasHook)(import_model_hooks.staticModelHooks);
		  static hasHooks = (0, import_hooks_legacy.legacyBuildHasHook)(import_model_hooks.staticModelHooks);
		  static removeHook = (0, import_hooks_legacy.legacyBuildRemoveHook)(import_model_hooks.staticModelHooks);
		  static runHooks = (0, import_hooks_legacy.legacyBuildRunHook)(import_model_hooks.staticModelHooks);
		  static beforeValidate = (0, import_hooks_legacy.legacyBuildAddHook)(import_model_hooks.staticModelHooks, "beforeValidate");
		  static afterValidate = (0, import_hooks_legacy.legacyBuildAddHook)(import_model_hooks.staticModelHooks, "afterValidate");
		  static validationFailed = (0, import_hooks_legacy.legacyBuildAddHook)(import_model_hooks.staticModelHooks, "validationFailed");
		  static beforeCreate = (0, import_hooks_legacy.legacyBuildAddHook)(import_model_hooks.staticModelHooks, "beforeCreate");
		  static afterCreate = (0, import_hooks_legacy.legacyBuildAddHook)(import_model_hooks.staticModelHooks, "afterCreate");
		  static beforeDestroy = (0, import_hooks_legacy.legacyBuildAddHook)(import_model_hooks.staticModelHooks, "beforeDestroy");
		  static afterDestroy = (0, import_hooks_legacy.legacyBuildAddHook)(import_model_hooks.staticModelHooks, "afterDestroy");
		  static beforeRestore = (0, import_hooks_legacy.legacyBuildAddHook)(import_model_hooks.staticModelHooks, "beforeRestore");
		  static afterRestore = (0, import_hooks_legacy.legacyBuildAddHook)(import_model_hooks.staticModelHooks, "afterRestore");
		  static beforeUpdate = (0, import_hooks_legacy.legacyBuildAddHook)(import_model_hooks.staticModelHooks, "beforeUpdate");
		  static afterUpdate = (0, import_hooks_legacy.legacyBuildAddHook)(import_model_hooks.staticModelHooks, "afterUpdate");
		  static beforeUpsert = (0, import_hooks_legacy.legacyBuildAddHook)(import_model_hooks.staticModelHooks, "beforeUpsert");
		  static afterUpsert = (0, import_hooks_legacy.legacyBuildAddHook)(import_model_hooks.staticModelHooks, "afterUpsert");
		  static beforeSave = (0, import_hooks_legacy.legacyBuildAddHook)(import_model_hooks.staticModelHooks, "beforeSave");
		  static afterSave = (0, import_hooks_legacy.legacyBuildAddHook)(import_model_hooks.staticModelHooks, "afterSave");
		  static beforeBulkCreate = (0, import_hooks_legacy.legacyBuildAddHook)(import_model_hooks.staticModelHooks, "beforeBulkCreate");
		  static afterBulkCreate = (0, import_hooks_legacy.legacyBuildAddHook)(import_model_hooks.staticModelHooks, "afterBulkCreate");
		  static beforeBulkDestroy = (0, import_hooks_legacy.legacyBuildAddHook)(import_model_hooks.staticModelHooks, "beforeBulkDestroy");
		  static afterBulkDestroy = (0, import_hooks_legacy.legacyBuildAddHook)(import_model_hooks.staticModelHooks, "afterBulkDestroy");
		  static beforeBulkRestore = (0, import_hooks_legacy.legacyBuildAddHook)(import_model_hooks.staticModelHooks, "beforeBulkRestore");
		  static afterBulkRestore = (0, import_hooks_legacy.legacyBuildAddHook)(import_model_hooks.staticModelHooks, "afterBulkRestore");
		  static beforeBulkUpdate = (0, import_hooks_legacy.legacyBuildAddHook)(import_model_hooks.staticModelHooks, "beforeBulkUpdate");
		  static afterBulkUpdate = (0, import_hooks_legacy.legacyBuildAddHook)(import_model_hooks.staticModelHooks, "afterBulkUpdate");
		  static beforeCount = (0, import_hooks_legacy.legacyBuildAddHook)(import_model_hooks.staticModelHooks, "beforeCount");
		  static beforeFind = (0, import_hooks_legacy.legacyBuildAddHook)(import_model_hooks.staticModelHooks, "beforeFind");
		  static beforeFindAfterExpandIncludeAll = (0, import_hooks_legacy.legacyBuildAddHook)(import_model_hooks.staticModelHooks, "beforeFindAfterExpandIncludeAll");
		  static beforeFindAfterOptions = (0, import_hooks_legacy.legacyBuildAddHook)(import_model_hooks.staticModelHooks, "beforeFindAfterOptions");
		  static afterFind = (0, import_hooks_legacy.legacyBuildAddHook)(import_model_hooks.staticModelHooks, "afterFind");
		  static beforeSync = (0, import_hooks_legacy.legacyBuildAddHook)(import_model_hooks.staticModelHooks, "beforeSync");
		  static afterSync = (0, import_hooks_legacy.legacyBuildAddHook)(import_model_hooks.staticModelHooks, "afterSync");
		  static beforeAssociate = (0, import_hooks_legacy.legacyBuildAddHook)(import_model_hooks.staticModelHooks, "beforeAssociate");
		  static afterAssociate = (0, import_hooks_legacy.legacyBuildAddHook)(import_model_hooks.staticModelHooks, "afterAssociate");
		  /**
		   * Initialize a model, representing a table in the DB, with attributes and options.
		   *
		   * The table columns are defined by the hash that is given as the first argument.
		   * Each attribute of the hash represents a column.
		   *
		   * @example
		   * ```javascript
		   * Project.init({
		   *   columnA: {
		   *     type: Sequelize.BOOLEAN,
		   *     validate: {
		   *       is: ['[a-z]','i'],        // will only allow letters
		   *       max: 23,                  // only allow values <= 23
		   *       isIn: {
		   *         args: [['en', 'zh']],
		   *         msg: "Must be English or Chinese"
		   *       }
		   *     },
		   *     field: 'column_a'
		   *     // Other attributes here
		   *   },
		   *   columnB: Sequelize.STRING,
		   *   columnC: 'MY VERY OWN COLUMN TYPE'
		   * }, {sequelize})
		   * ```
		   *
		   * sequelize.models.modelName // The model will now be available in models under the class name
		   *
		   * @see https://sequelize.org/docs/v7/core-concepts/model-basics/
		   * @see https://sequelize.org/docs/v7/core-concepts/validations-and-constraints/
		   *
		   * @param attributes An object, where each attribute is a column of the table. Each column can be either a
		   *   DataType, a string or a type-description object.
		   * @param options These options are merged with the default define options provided to the Sequelize constructor
		   */
		  static init(attributes, options) {
		    if ((0, import_model.isDecoratedModel)(this)) {
		      throw new Error(`Model.init cannot be used if the model uses one of Sequelize's decorators. You must pass your model to the Sequelize constructor using the "models" option instead.`);
		    }
		    if (!options.sequelize) {
		      throw new Error("Model.init expects a Sequelize instance to be passed through the option bag, which is the second parameter.");
		    }
		    initModel(this, attributes, options);
		    return this;
		  }
		  static getIndexes() {
		    return this.modelDefinition.getIndexes();
		  }
		  /**
		   * Unique indexes that can be declared as part of a CREATE TABLE query.
		   *
		   * @deprecated prefer using {@link getIndexes}, this will eventually be removed.
		   */
		  static get uniqueKeys() {
		    const indexes = this.getIndexes();
		    const uniqueKeys = /* @__PURE__ */ Object.create(null);
		    const supportedOptions = ["unique", "fields", "column", "name"];
		    for (const index of indexes) {
		      if (!index.unique) {
		        continue;
		      }
		      if (!index.name) {
		        continue;
		      }
		      if (!index.fields) {
		        continue;
		      }
		      if (!index.fields.every((field) => typeof field === "string")) {
		        continue;
		      }
		      if (!Object.keys(index).every((optionName) => supportedOptions.includes(optionName))) {
		        continue;
		      }
		      uniqueKeys[index.name] = index;
		    }
		    return uniqueKeys;
		  }
		  // TODO [>7]: Remove this
		  static get _indexes() {
		    throw new Error("Model._indexes has been replaced with Model.getIndexes()");
		  }
		  /**
		   * Refreshes the Model's attribute definition.
		   *
		   * @deprecated use {@link modelDefinition}.
		   */
		  static refreshAttributes() {
		    this.modelDefinition.refreshAttributes();
		  }
		  static assertIsInitialized() {
		    if (!this.isInitialized()) {
		      throw new Error(`Model "${this.name}" has not been initialized yet. You can check whether a model has been initialized by calling its isInitialized method.`);
		    }
		  }
		  static isInitialized() {
		    return (0, import_model_definition.hasModelDefinition)(this);
		  }
		  /**
		   * Get the table name of the model, taking schema into account. The method will an object with `tableName`, `schema` and `delimiter` properties.
		   *
		   * @deprecated use {@link modelDefinition} or {@link table}.
		   */
		  static getTableName() {
		    const queryGenerator = this.sequelize.queryInterface.queryGenerator;
		    return {
		      ...this.table,
		      /**
		       * @deprecated This should not be relied upon!
		       */
		      // @ts-expect-error -- This toString is a hacky property that must be removed
		      toString() {
		        return queryGenerator.quoteTable(this);
		      }
		    };
		  }
		}
		function initModel(model, attributes, options) {
		  options.modelName ||= model.name;
		  const modelDefinition = new import_model_definition.ModelDefinition(
		    attributes,
		    options,
		    model
		  );
		  (0, import_model_definition.registerModelDefinition)(model, modelDefinition);
		  Object.defineProperty(model, "name", { value: modelDefinition.modelName });
		  model._scope = model.options.defaultScope;
		  model._scopeNames = ["defaultScope"];
		  model.sequelize.modelManager.addModel(model);
		  model.sequelize.hooks.runSync("afterDefine", model);
		  addAttributeGetterAndSetters(model);
		  model.hooks.addListener("afterDefinitionRefresh", () => {
		    addAttributeGetterAndSetters(model);
		  });
		}
		function addAttributeGetterAndSetters(model) {
		  const modelDefinition = model.modelDefinition;
		  const { Model: TmpModel } = requireModel();
		  for (const attribute of modelDefinition.attributes.values()) {
		    const attributeName = attribute.attributeName;
		    if (attributeName in TmpModel.prototype) {
		      model.sequelize.log(`Attribute ${attributeName} in model ${model.name} is shadowing a built-in property of the Model prototype. This is not recommended. Consider renaming your attribute.`);
		      continue;
		    }
		    const attributeProperty = {
		      configurable: true,
		      get() {
		        return this.get(attributeName);
		      },
		      set(value) {
		        return this.set(attributeName, value);
		      }
		    };
		    Object.defineProperty(model.prototype, attributeName, attributeProperty);
		  }
		}
		
		return modelTypescript;
	}

	var associations$1 = {exports: {}};

	var baseSlice = require_baseSlice();

	/**
	 * Casts `array` to a slice if it's needed.
	 *
	 * @private
	 * @param {Array} array The array to inspect.
	 * @param {number} start The start position.
	 * @param {number} [end=array.length] The end position.
	 * @returns {Array} Returns the cast slice.
	 */
	function castSlice$1(array, start, end) {
	  var length = array.length;
	  end = end === undefined ? length : end;
	  return (!start && end >= length) ? array : baseSlice(array, start, end);
	}

	var _castSlice = castSlice$1;

	/** Used to compose unicode character classes. */

	var rsAstralRange$1 = '\\ud800-\\udfff',
	    rsComboMarksRange$1 = '\\u0300-\\u036f',
	    reComboHalfMarksRange$1 = '\\ufe20-\\ufe2f',
	    rsComboSymbolsRange$1 = '\\u20d0-\\u20ff',
	    rsComboRange$1 = rsComboMarksRange$1 + reComboHalfMarksRange$1 + rsComboSymbolsRange$1,
	    rsVarRange$1 = '\\ufe0e\\ufe0f';

	/** Used to compose unicode capture groups. */
	var rsZWJ$1 = '\\u200d';

	/** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
	var reHasUnicode = RegExp('[' + rsZWJ$1 + rsAstralRange$1  + rsComboRange$1 + rsVarRange$1 + ']');

	/**
	 * Checks if `string` contains Unicode symbols.
	 *
	 * @private
	 * @param {string} string The string to inspect.
	 * @returns {boolean} Returns `true` if a symbol is found, else `false`.
	 */
	function hasUnicode$2(string) {
	  return reHasUnicode.test(string);
	}

	var _hasUnicode = hasUnicode$2;

	/**
	 * Converts an ASCII `string` to an array.
	 *
	 * @private
	 * @param {string} string The string to convert.
	 * @returns {Array} Returns the converted array.
	 */

	function asciiToArray$1(string) {
	  return string.split('');
	}

	var _asciiToArray = asciiToArray$1;

	/** Used to compose unicode character classes. */

	var rsAstralRange = '\\ud800-\\udfff',
	    rsComboMarksRange = '\\u0300-\\u036f',
	    reComboHalfMarksRange = '\\ufe20-\\ufe2f',
	    rsComboSymbolsRange = '\\u20d0-\\u20ff',
	    rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
	    rsVarRange = '\\ufe0e\\ufe0f';

	/** Used to compose unicode capture groups. */
	var rsAstral = '[' + rsAstralRange + ']',
	    rsCombo = '[' + rsComboRange + ']',
	    rsFitz = '\\ud83c[\\udffb-\\udfff]',
	    rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
	    rsNonAstral = '[^' + rsAstralRange + ']',
	    rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
	    rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
	    rsZWJ = '\\u200d';

	/** Used to compose unicode regexes. */
	var reOptMod = rsModifier + '?',
	    rsOptVar = '[' + rsVarRange + ']?',
	    rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
	    rsSeq = rsOptVar + reOptMod + rsOptJoin,
	    rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';

	/** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
	var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');

	/**
	 * Converts a Unicode `string` to an array.
	 *
	 * @private
	 * @param {string} string The string to convert.
	 * @returns {Array} Returns the converted array.
	 */
	function unicodeToArray$1(string) {
	  return string.match(reUnicode) || [];
	}

	var _unicodeToArray = unicodeToArray$1;

	var asciiToArray = _asciiToArray,
	    hasUnicode$1 = _hasUnicode,
	    unicodeToArray = _unicodeToArray;

	/**
	 * Converts `string` to an array.
	 *
	 * @private
	 * @param {string} string The string to convert.
	 * @returns {Array} Returns the converted array.
	 */
	function stringToArray$1(string) {
	  return hasUnicode$1(string)
	    ? unicodeToArray(string)
	    : asciiToArray(string);
	}

	var _stringToArray = stringToArray$1;

	var castSlice = _castSlice,
	    hasUnicode = _hasUnicode,
	    stringToArray = _stringToArray,
	    toString$2 = toString_1;

	/**
	 * Creates a function like `_.lowerFirst`.
	 *
	 * @private
	 * @param {string} methodName The name of the `String` case method to use.
	 * @returns {Function} Returns the new case function.
	 */
	function createCaseFirst$1(methodName) {
	  return function(string) {
	    string = toString$2(string);

	    var strSymbols = hasUnicode(string)
	      ? stringToArray(string)
	      : undefined;

	    var chr = strSymbols
	      ? strSymbols[0]
	      : string.charAt(0);

	    var trailing = strSymbols
	      ? castSlice(strSymbols, 1).join('')
	      : string.slice(1);

	    return chr[methodName]() + trailing;
	  };
	}

	var _createCaseFirst = createCaseFirst$1;

	var lowerFirst_1;
	var hasRequiredLowerFirst;

	function requireLowerFirst () {
		if (hasRequiredLowerFirst) return lowerFirst_1;
		hasRequiredLowerFirst = 1;
		var createCaseFirst = _createCaseFirst;

		/**
		 * Converts the first character of `string` to lower case.
		 *
		 * @static
		 * @memberOf _
		 * @since 4.0.0
		 * @category String
		 * @param {string} [string=''] The string to convert.
		 * @returns {string} Returns the converted string.
		 * @example
		 *
		 * _.lowerFirst('Fred');
		 * // => 'fred'
		 *
		 * _.lowerFirst('FRED');
		 * // => 'fRED'
		 */
		var lowerFirst = createCaseFirst('toLowerCase');

		lowerFirst_1 = lowerFirst;
		return lowerFirst_1;
	}

	var helpers;
	var hasRequiredHelpers;

	function requireHelpers () {
		if (hasRequiredHelpers) return helpers;
		hasRequiredHelpers = 1;
		var __create = Object.create;
		var __defProp = Object.defineProperty;
		var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
		var __getOwnPropNames = Object.getOwnPropertyNames;
		var __getProtoOf = Object.getPrototypeOf;
		var __hasOwnProp = Object.prototype.hasOwnProperty;
		var __export = (target, all) => {
		  for (var name in all)
		    __defProp(target, name, { get: all[name], enumerable: true });
		};
		var __copyProps = (to, from, except, desc) => {
		  if (from && typeof from === "object" || typeof from === "function") {
		    for (let key of __getOwnPropNames(from))
		      if (!__hasOwnProp.call(to, key) && key !== except)
		        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
		  }
		  return to;
		};
		var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
		  // If the importer is in node compatibility mode or this is not an ESM
		  // file that has been converted to a CommonJS file using a Babel-
		  // compatible transform (i.e. "__esModule" has not been set), then set
		  // "default" to the CommonJS "module.exports" for node compatibility.
		  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
		  mod
		));
		var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
		var helpers_exports = {};
		__export(helpers_exports, {
		  AssociationSecret: () => AssociationSecret,
		  assertAssociationModelIsDefined: () => assertAssociationModelIsDefined,
		  assertAssociationUnique: () => assertAssociationUnique,
		  checkNamingCollision: () => checkNamingCollision,
		  defineAssociation: () => defineAssociation,
		  getForwardedModel: () => getForwardedModel,
		  getModel: () => getModel,
		  isThroughOptions: () => isThroughOptions,
		  mixinMethods: () => mixinMethods,
		  normalizeBaseAssociationOptions: () => normalizeBaseAssociationOptions,
		  normalizeForeignKeyOptions: () => normalizeForeignKeyOptions
		});
		helpers = __toCommonJS(helpers_exports);
		var import_node_assert = __toESM(require$$0$4);
		var import_node_util = __toESM(require$$0$1);
		var import_isEqual = __toESM(isEqual_1);
		var import_isPlainObject = __toESM(isPlainObject_1);
		var import_lowerFirst = __toESM(requireLowerFirst());
		var import_omit = __toESM(requireOmit());
		var import_errors = errors;
		var deprecations$1 = __toESM(deprecations);
		var import_model_utils = requireModelUtils();
		var import_object = object$1;
		var import_string = string$2;
		function checkNamingCollision(source, associationName) {
		  if (Object.hasOwn(source.getAttributes(), associationName)) {
		    throw new Error(
		      `Naming collision between attribute '${associationName}' and association '${associationName}' on model ${source.name}. To remedy this, change the "as" options in your association definition`
		    );
		  }
		}
		function mixinMethods(association, mixinTargetPrototype, methods, aliases) {
		  for (const method of methods) {
		    const targetMethodName = association.accessors[method];
		    if (Object.hasOwn(mixinTargetPrototype, targetMethodName)) {
		      continue;
		    }
		    const realMethod = (aliases == null ? void 0 : aliases[method]) || method;
		    Object.defineProperty(mixinTargetPrototype, targetMethodName, {
		      enumerable: false,
		      value(...params) {
		        return association[realMethod](this, ...params);
		      }
		    });
		  }
		}
		const AssociationSecret = Symbol("AssociationConstructorPrivateKey");
		function getModel(sequelize, model) {
		  if (typeof model === "string") {
		    if (!sequelize.isDefined(model)) {
		      return null;
		    }
		    return sequelize.model(model);
		  }
		  return model;
		}
		function assertAssociationUnique(type, source, target, options, parent) {
		  const as = options.as;
		  const existingAssociation = source.associations[as];
		  if (!existingAssociation) {
		    return;
		  }
		  const incompatibilityStatus = getAssociationsIncompatibilityStatus(existingAssociation, type, target, options);
		  if ((parent || existingAssociation.parentAssociation) && incompatibilityStatus == null) {
		    return;
		  }
		  const existingRoot = existingAssociation.rootAssociation;
		  if (!parent && existingRoot === existingAssociation) {
		    throw new import_errors.AssociationError(`You have defined two associations with the same name "${as}" on the model "${source.name}". Use another alias using the "as" parameter.`);
		  }
		  throw new import_errors.AssociationError(`
${parent ? `The association "${parent.as}" needs to define` : `You are trying to define`} the ${type.name} association "${options.as}" from ${source.name} to ${target.name},
but that child association has already been defined as ${existingAssociation.associationType}, to ${target.name} by this call:

${existingRoot.source.name}.${(0, import_lowerFirst.default)(existingRoot.associationType)}(${existingRoot.target.name}, ${import_node_util.default.inspect(existingRoot.options)})

That association would be re-used if compatible, but it is incompatible because ${incompatibilityStatus === 0 /* DIFFERENT_TYPES */ ? `their types are different (${type.name} vs ${existingAssociation.associationType})` : incompatibilityStatus === 1 /* DIFFERENT_TARGETS */ ? `they target different models (${target.name} vs ${existingAssociation.target.name})` : `their options are not reconcilable:

Options of the association to create:
${import_node_util.default.inspect((0, import_omit.default)(options, "inverse"), { sorted: true })}

Options of the existing association:
${import_node_util.default.inspect((0, import_omit.default)(existingAssociation.options, "inverse"), { sorted: true })}
`}`.trim());
		}
		function getAssociationsIncompatibilityStatus(existingAssociation, newAssociationType, newTarget, newOptions) {
		  if (existingAssociation.associationType !== newAssociationType.name) {
		    return 0 /* DIFFERENT_TYPES */;
		  }
		  if (!(0, import_model_utils.isSameInitialModel)(existingAssociation.target, newTarget)) {
		    return 1 /* DIFFERENT_TARGETS */;
		  }
		  const opts1 = (0, import_omit.default)(existingAssociation.options, "inverse");
		  const opts2 = (0, import_omit.default)(newOptions, "inverse");
		  if (!(0, import_isEqual.default)(opts1, opts2)) {
		    return 2 /* DIFFERENT_OPTIONS */;
		  }
		  return null;
		}
		function assertAssociationModelIsDefined(model) {
		  if (!model.sequelize) {
		    throw new Error(`Model ${model.name} must be defined (through Model.init or Sequelize#define) before calling one of its association declaration methods.`);
		  }
		}
		function defineAssociation(type, source, target, options, parent, normalizeOptions, construct) {
		  if (!(0, import_model_utils.isModelStatic)(target)) {
		    throw new Error(`${source.name}.${(0, import_lowerFirst.default)(type.name)} was called with ${import_node_util.default.inspect(target)} as the target model, but it is not a subclass of Sequelize's Model class`);
		  }
		  assertAssociationModelIsDefined(source);
		  assertAssociationModelIsDefined(target);
		  const normalizedOptions = normalizeOptions(type, options, source, target);
		  checkNamingCollision(source, normalizedOptions.as);
		  assertAssociationUnique(type, source, target, normalizedOptions, parent);
		  const sequelize = source.sequelize;
		  Object.defineProperty(normalizedOptions, "sequelize", {
		    configurable: true,
		    get() {
		      deprecations$1.movedSequelizeParam();
		      return sequelize;
		    }
		  });
		  if (normalizedOptions.hooks) {
		    source.hooks.runSync("beforeAssociate", { source, target, type, sequelize }, normalizedOptions);
		  }
		  let association;
		  try {
		    association = source.associations[normalizedOptions.as] ?? construct(normalizedOptions);
		  } catch (error) {
		    throw new import_errors.AssociationError(
		      parent ? `Association "${parent.as}" needs to create the ${type.name} association "${normalizedOptions.as}" from ${source.name} to ${target.name}, but it failed` : `Defining ${type.name} association "${normalizedOptions.as}" from ${source.name} to ${target.name} failed`,
		      { cause: error }
		    );
		  }
		  if (normalizedOptions.hooks) {
		    source.hooks.runSync("afterAssociate", { source, target, type, association, sequelize }, normalizedOptions);
		  }
		  checkNamingCollision(source, normalizedOptions.as);
		  return association;
		}
		function normalizeBaseAssociationOptions(associationType, options, source, target) {
		  if ("onDelete" in options || "onUpdate" in options) {
		    throw new Error('Options "onDelete" and "onUpdate" have been moved to "foreignKey.onDelete" and "foreignKey.onUpdate" (also available as "otherKey" in belongsToMany)');
		  }
		  if ("constraints" in options) {
		    throw new Error('Option "constraints" has been renamed to "foreignKeyConstraints"');
		  }
		  if ("foreignKeyConstraint" in options) {
		    throw new Error('Option "foreignKeyConstraint" has been renamed to "foreignKeyConstraints" (with a "s" at the end)');
		  }
		  const isMultiAssociation = associationType.isMultiAssociation;
		  let name;
		  let as;
		  if (options == null ? void 0 : options.as) {
		    if ((0, import_isPlainObject.default)(options.as)) {
		      (0, import_node_assert.default)(typeof options.as === "object");
		      name = options.as;
		      as = isMultiAssociation ? options.as.plural : options.as.singular;
		    } else {
		      (0, import_node_assert.default)(typeof options.as === "string");
		      as = options.as;
		      name = {
		        plural: isMultiAssociation ? options.as : (0, import_string.pluralize)(options.as),
		        singular: isMultiAssociation ? (0, import_string.singularize)(options.as) : options.as
		      };
		    }
		  } else {
		    as = isMultiAssociation ? target.options.name.plural : target.options.name.singular;
		    name = target.options.name;
		  }
		  return (0, import_object.removeUndefined)({
		    ...options,
		    foreignKey: normalizeForeignKeyOptions(options.foreignKey),
		    hooks: options.hooks ?? false,
		    as,
		    name
		  });
		}
		function normalizeForeignKeyOptions(foreignKey) {
		  return typeof foreignKey === "string" ? { name: foreignKey } : (0, import_object.removeUndefined)({
		    ...foreignKey,
		    name: (foreignKey == null ? void 0 : foreignKey.name) ?? (foreignKey == null ? void 0 : foreignKey.fieldName),
		    fieldName: void 0
		  });
		}
		function getForwardedModel(model, sequelize) {
		  return typeof model === "function" && !(0, import_model_utils.isModelStatic)(model) ? model(sequelize) : model;
		}
		function isThroughOptions(val) {
		  return (0, import_isPlainObject.default)(val) && "model" in val;
		}
		
		return helpers;
	}

	var base;
	var hasRequiredBase;

	function requireBase () {
		if (hasRequiredBase) return base;
		hasRequiredBase = 1;
		var __defProp = Object.defineProperty;
		var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
		var __getOwnPropNames = Object.getOwnPropertyNames;
		var __hasOwnProp = Object.prototype.hasOwnProperty;
		var __export = (target, all) => {
		  for (var name in all)
		    __defProp(target, name, { get: all[name], enumerable: true });
		};
		var __copyProps = (to, from, except, desc) => {
		  if (from && typeof from === "object" || typeof from === "function") {
		    for (let key of __getOwnPropNames(from))
		      if (!__hasOwnProp.call(to, key) && key !== except)
		        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
		  }
		  return to;
		};
		var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
		var base_exports = {};
		__export(base_exports, {
		  Association: () => Association,
		  MultiAssociation: () => MultiAssociation
		});
		base = __toCommonJS(base_exports);
		var import_object = object$1;
		var import_helpers = requireHelpers();
		class Association {
		  source;
		  target;
		  isSelfAssociation;
		  isAliased;
		  options;
		  /**
		   * A reference to the association that created this one.
		   */
		  parentAssociation;
		  /**
		   * Creating an associations can automatically create other associations.
		   * This returns the initial association that caused the creation of the descendant associations.
		   */
		  // eslint-disable-next-line @typescript-eslint/prefer-return-this-type -- false positive
		  get rootAssociation() {
		    if (this.parentAssociation) {
		      return this.parentAssociation.rootAssociation;
		    }
		    return this;
		  }
		  /**
		   * The type of the association. One of `HasMany`, `BelongsTo`, `HasOne`, `BelongsToMany`
		   *
		   * @type {string}
		   */
		  get associationType() {
		    return this.constructor.name;
		  }
		  get isMultiAssociation() {
		    return this.constructor.isMultiAssociation;
		  }
		  /**
		   * @deprecated negate {@link isMultiAssociation} instead
		   */
		  get isSingleAssociation() {
		    return !this.isMultiAssociation;
		  }
		  static get isMultiAssociation() {
		    return false;
		  }
		  constructor(secret, source, target, options, parent) {
		    if (secret !== import_helpers.AssociationSecret) {
		      throw new Error(`Class ${this.constructor.name} cannot be instantiated directly due to it mutating the source model. Use one of the static methods on Model instead.`);
		    }
		    this.source = source;
		    this.target = target;
		    this.parentAssociation = parent ?? null;
		    this.isSelfAssociation = this.source === this.target;
		    this.isAliased = Boolean(options == null ? void 0 : options.as);
		    this.options = (0, import_object.cloneDeep)(options) ?? {};
		    source.associations[this.as] = this;
		  }
		  /**
		   * The identifier of the relation on the source model.
		   */
		  get as() {
		    return this.options.as;
		  }
		  get name() {
		    return this.options.name;
		  }
		  get scope() {
		    return this.options.scope;
		  }
		  [Symbol.for("nodejs.util.inspect.custom")]() {
		    return this.as;
		  }
		}
		class MultiAssociation extends Association {
		  static get isMultiAssociation() {
		    return true;
		  }
		  /**
		   * Normalize input
		   *
		   * @param input it may be array or single obj, instance or primary key
		   *
		   * @private
		   * @returns built objects
		   */
		  toInstanceArray(input) {
		    if (!Array.isArray(input)) {
		      input = [input];
		    }
		    return input.map((element) => {
		      if (element instanceof this.target) {
		        return element;
		      }
		      const tmpInstance = /* @__PURE__ */ Object.create(null);
		      tmpInstance[this.target.primaryKeyAttribute] = element;
		      return this.target.build(tmpInstance, { isNewRecord: false });
		    });
		  }
		}
		
		return base;
	}

	var createCaseFirst = _createCaseFirst;

	/**
	 * Converts the first character of `string` to upper case.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category String
	 * @param {string} [string=''] The string to convert.
	 * @returns {string} Returns the converted string.
	 * @example
	 *
	 * _.upperFirst('fred');
	 * // => 'Fred'
	 *
	 * _.upperFirst('FRED');
	 * // => 'FRED'
	 */
	var upperFirst = createCaseFirst('toUpperCase');

	var upperFirst_1 = upperFirst;

	var hasMany;
	var hasRequiredHasMany;

	function requireHasMany () {
		if (hasRequiredHasMany) return hasMany;
		hasRequiredHasMany = 1;
		var __create = Object.create;
		var __defProp = Object.defineProperty;
		var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
		var __getOwnPropNames = Object.getOwnPropertyNames;
		var __getProtoOf = Object.getPrototypeOf;
		var __hasOwnProp = Object.prototype.hasOwnProperty;
		var __export = (target, all) => {
		  for (var name in all)
		    __defProp(target, name, { get: all[name], enumerable: true });
		};
		var __copyProps = (to, from, except, desc) => {
		  if (from && typeof from === "object" || typeof from === "function") {
		    for (let key of __getOwnPropNames(from))
		      if (!__hasOwnProp.call(to, key) && key !== except)
		        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
		  }
		  return to;
		};
		var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
		  // If the importer is in node compatibility mode or this is not an ESM
		  // file that has been converted to a CommonJS file using a Babel-
		  // compatible transform (i.e. "__esModule" has not been set), then set
		  // "default" to the CommonJS "module.exports" for node compatibility.
		  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
		  mod
		));
		var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
		var has_many_exports = {};
		__export(has_many_exports, {
		  HasMany: () => HasMany
		});
		hasMany = __toCommonJS(has_many_exports);
		var import_isObject = __toESM(isObject_1);
		var import_upperFirst = __toESM(upperFirst_1);
		var import_errors = errors;
		var import_col = col_1;
		var import_fn = fn_1;
		var import_operators = operators;
		var import_check = requireCheck();
		var import_model_utils = requireModelUtils();
		var import_object = object$1;
		var import_base = requireBase();
		var import_belongs_to = requireBelongsTo();
		var import_helpers = requireHelpers();
		class HasMany extends import_base.MultiAssociation {
		  accessors;
		  get foreignKey() {
		    return this.inverse.foreignKey;
		  }
		  /**
		   * The column name of the foreign key (on the target model)
		   */
		  get identifierField() {
		    return this.inverse.identifierField;
		  }
		  /**
		   * The name of the attribute the foreign key points to.
		   *
		   * This key is on the Source Model.
		   * The {@link Association.foreignKey} is on the Target Model.
		   */
		  get sourceKey() {
		    return this.inverse.targetKey;
		  }
		  /**
		   * @deprecated use {@link sourceKey}
		   */
		  get sourceKeyAttribute() {
		    return this.sourceKey;
		  }
		  get sourceKeyField() {
		    return this.inverse.targetKeyField;
		  }
		  inverse;
		  constructor(secret, source, target, options, parent, inverse) {
		    var _a, _b;
		    if (options.sourceKey && !source.getAttributes()[options.sourceKey]) {
		      throw new Error(`Unknown attribute "${options.sourceKey}" passed as sourceKey, define this attribute on model "${source.name}" first`);
		    }
		    if ("keyType" in options) {
		      throw new TypeError(`Option "keyType" has been removed from the BelongsTo's options. Set "foreignKey.type" instead.`);
		    }
		    if ("through" in options) {
		      throw new Error('The "through" option is not available in hasMany. N:M associations are defined using belongsToMany instead.');
		    }
		    super(secret, source, target, options, parent);
		    this.inverse = inverse ?? import_belongs_to.BelongsTo.associate(secret, target, source, (0, import_object.removeUndefined)({
		      as: (_a = options.inverse) == null ? void 0 : _a.as,
		      scope: (_b = options.inverse) == null ? void 0 : _b.scope,
		      foreignKey: options.foreignKey,
		      targetKey: options.sourceKey,
		      foreignKeyConstraints: options.foreignKeyConstraints,
		      hooks: options.hooks
		    }), this);
		    const plural = (0, import_upperFirst.default)(this.options.name.plural);
		    const singular = (0, import_upperFirst.default)(this.options.name.singular);
		    this.accessors = {
		      get: `get${plural}`,
		      set: `set${plural}`,
		      addMultiple: `add${plural}`,
		      add: `add${singular}`,
		      create: `create${singular}`,
		      remove: `remove${singular}`,
		      removeMultiple: `remove${plural}`,
		      hasSingle: `has${singular}`,
		      hasAll: `has${plural}`,
		      count: `count${plural}`
		    };
		    this.#mixin(source.prototype);
		  }
		  static associate(secret, source, target, options = {}, parent, inverse) {
		    return (0, import_helpers.defineAssociation)(HasMany, source, target, options, parent, import_helpers.normalizeBaseAssociationOptions, (normalizedOptions) => {
		      var _a;
		      if ((0, import_model_utils.isSameInitialModel)(source, target) && (!options.as || !((_a = options.inverse) == null ? void 0 : _a.as) || options.as === options.inverse.as)) {
		        throw new import_errors.AssociationError('Both options "as" and "inverse.as" must be defined for hasMany self-associations, and their value must be different.');
		      }
		      return new HasMany(secret, source, target, normalizedOptions, parent, inverse);
		    });
		  }
		  #mixin(mixinTargetPrototype) {
		    (0, import_helpers.mixinMethods)(
		      this,
		      mixinTargetPrototype,
		      ["get", "count", "hasSingle", "hasAll", "set", "add", "addMultiple", "remove", "removeMultiple", "create"],
		      {
		        hasSingle: "has",
		        hasAll: "has",
		        addMultiple: "add",
		        removeMultiple: "remove"
		      }
		    );
		  }
		  async get(instances, options = {}) {
		    let isManyMode = true;
		    if (!Array.isArray(instances)) {
		      isManyMode = false;
		      instances = [instances];
		    }
		    const findOptions = { ...options };
		    const where = /* @__PURE__ */ Object.create(null);
		    if (this.scope) {
		      Object.assign(where, this.scope);
		    }
		    let values;
		    if (instances.length > 1) {
		      values = instances.map((instance) => instance.get(this.sourceKey, { raw: true }));
		      if (findOptions.limit && instances.length > 1) {
		        findOptions.groupedLimit = {
		          limit: findOptions.limit,
		          on: this,
		          // association
		          values
		        };
		        delete findOptions.limit;
		      } else {
		        where[this.foreignKey] = {
		          [import_operators.Op.in]: values
		        };
		        delete findOptions.groupedLimit;
		      }
		    } else {
		      where[this.foreignKey] = instances[0].get(this.sourceKey, { raw: true });
		    }
		    findOptions.where = findOptions.where ? { [import_operators.Op.and]: [where, findOptions.where] } : where;
		    let Model = this.target;
		    if (options.scope != null) {
		      if (!options.scope) {
		        Model = Model.withoutScope();
		      } else if (options.scope !== true) {
		        Model = Model.withScope(options.scope);
		      }
		    }
		    if (options.schema != null) {
		      Model = Model.withSchema({ schema: options.schema, schemaDelimiter: options.schemaDelimiter });
		    }
		    const results = await Model.findAll(findOptions);
		    if (!isManyMode) {
		      return results;
		    }
		    const result = /* @__PURE__ */ new Map();
		    for (const instance of instances) {
		      result.set(instance.get(this.sourceKey, { raw: true }), []);
		    }
		    for (const instance of results) {
		      const value = instance.get(this.foreignKey, { raw: true });
		      result.get(value).push(instance);
		    }
		    return result;
		  }
		  /**
		   * Count everything currently associated with this, using an optional where clause.
		   *
		   * @param instance the source instance
		   * @param options find & count options
		   */
		  async count(instance, options) {
		    const findOptions = {
		      ...options,
		      raw: true,
		      plain: true,
		      attributes: [
		        [
		          (0, import_fn.fn)(
		            "COUNT",
		            (0, import_col.col)(`${this.target.name}.${this.target.primaryKeyField}`)
		          ),
		          "count"
		        ]
		      ]
		    };
		    const result = await this.get(instance, findOptions);
		    return Number.parseInt(
		      // @ts-expect-error -- this.get() isn't designed to expect returning a raw output.
		      result.count,
		      10
		    );
		  }
		  /**
		   * Check if one or more rows are associated with `this`.
		   *
		   * @param sourceInstance the source instance
		   * @param targetInstances Can be an array of instances or their primary keys
		   * @param options Options passed to getAssociations
		   */
		  async has(sourceInstance, targetInstances, options) {
		    if (!Array.isArray(targetInstances)) {
		      targetInstances = [targetInstances];
		    }
		    const where = {
		      [import_operators.Op.or]: targetInstances.map((instance) => {
		        if (instance instanceof this.target) {
		          return instance.where();
		        }
		        return {
		          // @ts-expect-error -- TODO: what if the target has no primary key?
		          [this.target.primaryKeyAttribute]: instance
		        };
		      })
		    };
		    const findOptions = {
		      ...options,
		      scope: false,
		      // @ts-expect-error -- TODO: what if the target has no primary key?
		      attributes: [this.target.primaryKeyAttribute],
		      raw: true,
		      // @ts-expect-error -- TODO: current WhereOptions typings do not allow having 'WhereOptions' inside another 'WhereOptions'
		      where: {
		        [import_operators.Op.and]: [
		          where,
		          options == null ? void 0 : options.where
		        ]
		      }
		    };
		    const associatedObjects = await this.get(sourceInstance, findOptions);
		    return associatedObjects.length === targetInstances.length;
		  }
		  /**
		   * Set the associated models by passing an array of persisted instances or their primary keys. Everything that is not in the passed array will be un-associated
		   *
		   * @param sourceInstance source instance to associate new instances with
		   * @param rawTargetInstances An array of persisted instances or primary key of instances to associate with this. Pass `null` to remove all associations.
		   * @param options Options passed to `target.findAll` and `update`.
		   */
		  async set(sourceInstance, rawTargetInstances, options) {
		    const targetInstances = rawTargetInstances === null ? [] : this.toInstanceArray(rawTargetInstances);
		    const oldAssociations = await this.get(sourceInstance, { ...options, scope: false, raw: true });
		    const promises = [];
		    const obsoleteAssociations = oldAssociations.filter((old) => {
		      return !targetInstances.some((obj) => {
		        return obj.get(this.target.primaryKeyAttribute) === old[this.target.primaryKeyAttribute];
		      });
		    });
		    const unassociatedObjects = targetInstances.filter((obj) => {
		      return !oldAssociations.some((old) => {
		        return obj.get(this.target.primaryKeyAttribute) === old[this.target.primaryKeyAttribute];
		      });
		    });
		    if (obsoleteAssociations.length > 0) {
		      promises.push(this.remove(sourceInstance, obsoleteAssociations, {
		        ...options,
		        destroy: options == null ? void 0 : options.destroyPrevious
		      }));
		    }
		    if (unassociatedObjects.length > 0) {
		      const update = {
		        [this.foreignKey]: sourceInstance.get(this.sourceKey),
		        ...this.scope
		      };
		      const updateWhere = {
		        // @ts-expect-error -- TODO: what if the target has no primary key?
		        [this.target.primaryKeyAttribute]: unassociatedObjects.map((unassociatedObject) => {
		          return unassociatedObject.get(this.target.primaryKeyAttribute);
		        })
		      };
		      promises.push(this.target.withoutScope().update(
		        update,
		        {
		          ...options,
		          where: updateWhere
		        }
		      ));
		    }
		    await Promise.all(promises);
		  }
		  /**
		   * Associate one or more target rows with `this`. This method accepts a Model / string / number to associate a single row,
		   * or a mixed array of Model / string / numbers to associate multiple rows.
		   *
		   * @param sourceInstance the source instance
		   * @param [rawTargetInstances] A single instance or primary key, or a mixed array of persisted instances or primary keys
		   * @param [options] Options passed to `target.update`.
		   */
		  async add(sourceInstance, rawTargetInstances, options = {}) {
		    const targetInstances = this.toInstanceArray(rawTargetInstances);
		    if (targetInstances.length === 0) {
		      return;
		    }
		    const update = {
		      [this.foreignKey]: sourceInstance.get(this.sourceKey),
		      ...this.scope
		    };
		    const where = {
		      // @ts-expect-error -- TODO: what if the target has no primary key?
		      [this.target.primaryKeyAttribute]: targetInstances.map((unassociatedObject) => {
		        return unassociatedObject.get(this.target.primaryKeyAttribute);
		      })
		    };
		    await this.target.withoutScope().update(update, { ...options, where });
		  }
		  /**
		   * Un-associate one or several target rows.
		   *
		   * @param sourceInstance instance to un associate instances with
		   * @param targetInstances Can be an Instance or its primary key, or a mixed array of instances and primary keys
		   * @param options Options passed to `target.update`
		   */
		  async remove(sourceInstance, targetInstances, options = {}) {
		    var _a;
		    if (targetInstances == null) {
		      return;
		    }
		    if (!Array.isArray(targetInstances)) {
		      targetInstances = [targetInstances];
		    }
		    if (targetInstances.length === 0) {
		      return;
		    }
		    const where = {
		      [this.foreignKey]: sourceInstance.get(this.sourceKey),
		      // @ts-expect-error -- TODO: what if the target has no primary key?
		      [this.target.primaryKeyAttribute]: targetInstances.map((targetInstance) => {
		        if (targetInstance instanceof this.target) {
		          return targetInstance.get(this.target.primaryKeyAttribute);
		        }
		        if ((0, import_check.isPlainObject)(targetInstance) && this.target.primaryKeyAttribute in targetInstance) {
		          return targetInstance[this.target.primaryKeyAttribute];
		        }
		        return targetInstance;
		      })
		    };
		    const foreignKeyIsNullable = ((_a = this.target.modelDefinition.attributes.get(this.foreignKey)) == null ? void 0 : _a.allowNull) ?? true;
		    if (options.destroy || !foreignKeyIsNullable) {
		      await this.target.withoutScope().destroy({
		        ...(0, import_isObject.default)(options.destroy) ? options.destroy : void 0,
		        logging: options.logging,
		        benchmark: options.benchmark,
		        transaction: options.transaction,
		        where
		      });
		    } else {
		      const update = {
		        [this.foreignKey]: null
		      };
		      await this.target.withoutScope().update(update, { ...options, where });
		    }
		  }
		  /**
		   * Create a new instance of the associated model and associate it with this.
		   *
		   * @param sourceInstance source instance
		   * @param values values for target model instance
		   * @param options Options passed to `target.create`
		   */
		  async create(sourceInstance, values = {}, options = {}) {
		    if (Array.isArray(options)) {
		      options = {
		        fields: options
		      };
		    }
		    if (this.scope) {
		      for (const attribute of Object.keys(this.scope)) {
		        values[attribute] = this.scope[attribute];
		        if (options.fields) {
		          options.fields.push(attribute);
		        }
		      }
		    }
		    if (options.fields) {
		      options.fields.push(this.foreignKey);
		    }
		    return this.target.create({
		      ...values,
		      [this.foreignKey]: sourceInstance.get(this.sourceKey)
		    }, options);
		  }
		}
		Object.defineProperty(HasMany, "name", {
		  value: "HasMany"
		});
		
		return hasMany;
	}

	var hasOne;
	var hasRequiredHasOne;

	function requireHasOne () {
		if (hasRequiredHasOne) return hasOne;
		hasRequiredHasOne = 1;
		var __create = Object.create;
		var __defProp = Object.defineProperty;
		var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
		var __getOwnPropNames = Object.getOwnPropertyNames;
		var __getProtoOf = Object.getPrototypeOf;
		var __hasOwnProp = Object.prototype.hasOwnProperty;
		var __export = (target, all) => {
		  for (var name in all)
		    __defProp(target, name, { get: all[name], enumerable: true });
		};
		var __copyProps = (to, from, except, desc) => {
		  if (from && typeof from === "object" || typeof from === "function") {
		    for (let key of __getOwnPropNames(from))
		      if (!__hasOwnProp.call(to, key) && key !== except)
		        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
		  }
		  return to;
		};
		var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
		  // If the importer is in node compatibility mode or this is not an ESM
		  // file that has been converted to a CommonJS file using a Babel-
		  // compatible transform (i.e. "__esModule" has not been set), then set
		  // "default" to the CommonJS "module.exports" for node compatibility.
		  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
		  mod
		));
		var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
		var has_one_exports = {};
		__export(has_one_exports, {
		  HasOne: () => HasOne
		});
		hasOne = __toCommonJS(has_one_exports);
		var import_isObject = __toESM(isObject_1);
		var import_upperFirst = __toESM(upperFirst_1);
		var import_errors = errors;
		var import_model = requireModel();
		var import_operators = operators;
		var import_model_utils = requireModelUtils();
		var import_object = object$1;
		var import_base = requireBase();
		var import_belongs_to = requireBelongsTo();
		var import_helpers = requireHelpers();
		class HasOne extends import_base.Association {
		  get foreignKey() {
		    return this.inverse.foreignKey;
		  }
		  /**
		   * The column name of the foreign key (on the target model)
		   */
		  get identifierField() {
		    return this.inverse.identifierField;
		  }
		  /**
		   * The name of the attribute the foreign key points to.
		   * In HasOne, it is on the Source Model, instead of the Target Model (unlike {@link BelongsTo.targetKey}).
		   * The {@link Association.foreignKey} is on the Target Model.
		   */
		  get sourceKey() {
		    return this.inverse.targetKey;
		  }
		  /**
		   * The Column Name of the source key.
		   */
		  get sourceKeyField() {
		    return this.inverse.targetKeyField;
		  }
		  /**
		   * @deprecated use {@link sourceKey}
		   */
		  get sourceKeyAttribute() {
		    return this.sourceKey;
		  }
		  inverse;
		  accessors;
		  constructor(secret, source, target, options, parent, inverse) {
		    var _a, _b;
		    if ((options == null ? void 0 : options.sourceKey) && !source.getAttributes()[options.sourceKey]) {
		      throw new Error(`Unknown attribute "${options.sourceKey}" passed as sourceKey, define this attribute on model "${source.name}" first`);
		    }
		    if ("keyType" in options) {
		      throw new TypeError(`Option "keyType" has been removed from the BelongsTo's options. Set "foreignKey.type" instead.`);
		    }
		    super(secret, source, target, options, parent);
		    this.inverse = inverse ?? import_belongs_to.BelongsTo.associate(secret, target, source, (0, import_object.removeUndefined)({
		      as: (_a = options.inverse) == null ? void 0 : _a.as,
		      scope: (_b = options.inverse) == null ? void 0 : _b.scope,
		      foreignKey: options.foreignKey,
		      targetKey: options.sourceKey,
		      foreignKeyConstraints: options.foreignKeyConstraints,
		      hooks: options.hooks
		    }), this);
		    const singular = (0, import_upperFirst.default)(this.options.name.singular);
		    this.accessors = {
		      get: `get${singular}`,
		      set: `set${singular}`,
		      create: `create${singular}`
		    };
		    this.#mixin(source.prototype);
		  }
		  #mixin(mixinTargetPrototype) {
		    (0, import_helpers.mixinMethods)(this, mixinTargetPrototype, ["get", "set", "create"]);
		  }
		  static associate(secret, source, target, options = {}, parent, inverse) {
		    return (0, import_helpers.defineAssociation)(HasOne, source, target, options, parent, import_helpers.normalizeBaseAssociationOptions, (normalizedOptions) => {
		      var _a;
		      if ((0, import_model_utils.isSameInitialModel)(source, target) && (!options.as || !((_a = options.inverse) == null ? void 0 : _a.as) || options.as === options.inverse.as)) {
		        throw new import_errors.AssociationError(`Both options "as" and "inverse.as" must be defined for hasOne self-associations, and their value must be different.
This is because hasOne associations automatically create the corresponding belongsTo association, but they cannot share the same name.

If having two associations does not make sense (for instance a "spouse" association from user to user), consider using belongsTo instead of hasOne.`);
		      }
		      return new HasOne(secret, source, target, normalizedOptions, parent, inverse);
		    });
		  }
		  async get(instances, options) {
		    options = options ? (0, import_object.cloneDeep)(options) : {};
		    let Target = this.target;
		    if (options.scope != null) {
		      if (!options.scope) {
		        Target = Target.withoutScope();
		      } else if (options.scope !== true) {
		        Target = Target.withScope(options.scope);
		      }
		    }
		    if (options.schema != null) {
		      Target = Target.withSchema({ schema: options.schema, schemaDelimiter: options.schemaDelimiter });
		    }
		    let isManyMode = true;
		    if (!Array.isArray(instances)) {
		      isManyMode = false;
		      instances = [instances];
		    }
		    const where = /* @__PURE__ */ Object.create(null);
		    if (instances.length > 1) {
		      where[this.foreignKey] = {
		        [import_operators.Op.in]: instances.map((instance) => instance.get(this.sourceKey))
		      };
		    } else {
		      where[this.foreignKey] = instances[0].get(this.sourceKey);
		    }
		    if (this.scope) {
		      Object.assign(where, this.scope);
		    }
		    options.where = options.where ? { [import_operators.Op.and]: [where, options.where] } : where;
		    if (isManyMode) {
		      const results = await Target.findAll(options);
		      const result = /* @__PURE__ */ new Map();
		      for (const targetInstance of results) {
		        result.set(targetInstance.get(this.foreignKey, { raw: true }), targetInstance);
		      }
		      return result;
		    }
		    return Target.findOne(options);
		  }
		  async set(sourceInstance, associatedInstanceOrPk, options) {
		    var _a;
		    options = { ...options, scope: false };
		    if (options.save === false) {
		      throw new Error(`The "save: false" option cannot be honoured in ${this.source.name}#${this.accessors.set}
because, as this is a hasOne association, the foreign key we need to update is located on the model ${this.target.name}.

This option is only available in BelongsTo associations.`);
		    }
		    const oldInstance = await this.get(sourceInstance, options);
		    const alreadyAssociated = !oldInstance || !associatedInstanceOrPk ? false : associatedInstanceOrPk instanceof import_model.Model ? associatedInstanceOrPk.equals(oldInstance) : oldInstance.get(this.target.primaryKeyAttribute) === associatedInstanceOrPk;
		    if (alreadyAssociated) {
		      if (associatedInstanceOrPk instanceof import_model.Model) {
		        return associatedInstanceOrPk;
		      }
		      return oldInstance;
		    }
		    if (oldInstance) {
		      const foreignKeyIsNullable = ((_a = this.target.modelDefinition.attributes.get(this.foreignKey)) == null ? void 0 : _a.allowNull) ?? true;
		      if (options.destroyPrevious || !foreignKeyIsNullable) {
		        await oldInstance.destroy({
		          ...(0, import_isObject.default)(options.destroyPrevious) ? options.destroyPrevious : void 0,
		          logging: options.logging,
		          benchmark: options.benchmark,
		          transaction: options.transaction
		        });
		      } else {
		        await oldInstance.update({
		          [this.foreignKey]: null
		        }, {
		          ...options,
		          association: true
		        });
		      }
		    }
		    if (associatedInstanceOrPk) {
		      let associatedInstance;
		      if (associatedInstanceOrPk instanceof this.target) {
		        associatedInstance = associatedInstanceOrPk;
		      } else {
		        const tmpInstance = /* @__PURE__ */ Object.create(null);
		        tmpInstance[this.target.primaryKeyAttribute] = associatedInstanceOrPk;
		        associatedInstance = this.target.build(tmpInstance, {
		          isNewRecord: false
		        });
		      }
		      Object.assign(associatedInstance, this.scope);
		      associatedInstance.set(this.foreignKey, sourceInstance.get(this.sourceKeyAttribute));
		      return associatedInstance.save(options);
		    }
		    return null;
		  }
		  /**
		   * Create a new instance of the associated model and associate it with this.
		   *
		   * See {@link Model.create} for a full explanation of options.
		   *
		   * @param sourceInstance - the source instance
		   * @param values - values to create associated model instance with
		   * @param options - Options passed to `target.create` and setAssociation.
		   *
		   * @returns The created target model
		   */
		  async create(sourceInstance, values = {}, options = {}) {
		    if (this.scope) {
		      for (const attribute of Object.keys(this.scope)) {
		        values[attribute] = this.scope[attribute];
		        if (options.fields) {
		          options.fields.push(attribute);
		        }
		      }
		    }
		    values[this.foreignKey] = sourceInstance.get(this.sourceKeyAttribute);
		    if (options.fields) {
		      options.fields.push(this.foreignKey);
		    }
		    return this.target.create(values, options);
		  }
		}
		Object.defineProperty(HasOne, "name", {
		  value: "HasOne"
		});
		
		return hasOne;
	}

	var belongsTo;
	var hasRequiredBelongsTo;

	function requireBelongsTo () {
		if (hasRequiredBelongsTo) return belongsTo;
		hasRequiredBelongsTo = 1;
		var __create = Object.create;
		var __defProp = Object.defineProperty;
		var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
		var __getOwnPropNames = Object.getOwnPropertyNames;
		var __getProtoOf = Object.getPrototypeOf;
		var __hasOwnProp = Object.prototype.hasOwnProperty;
		var __export = (target, all) => {
		  for (var name in all)
		    __defProp(target, name, { get: all[name], enumerable: true });
		};
		var __copyProps = (to, from, except, desc) => {
		  if (from && typeof from === "object" || typeof from === "function") {
		    for (let key of __getOwnPropNames(from))
		      if (!__hasOwnProp.call(to, key) && key !== except)
		        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
		  }
		  return to;
		};
		var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
		  // If the importer is in node compatibility mode or this is not an ESM
		  // file that has been converted to a CommonJS file using a Babel-
		  // compatible transform (i.e. "__esModule" has not been set), then set
		  // "default" to the CommonJS "module.exports" for node compatibility.
		  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
		  mod
		));
		var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
		var belongs_to_exports = {};
		__export(belongs_to_exports, {
		  BelongsTo: () => BelongsTo
		});
		belongsTo = __toCommonJS(belongs_to_exports);
		var import_node_assert = __toESM(require$$0$4);
		var import_isEqual = __toESM(isEqual_1);
		var import_isObject = __toESM(isObject_1);
		var import_upperFirst = __toESM(upperFirst_1);
		var import_data_types_utils = requireDataTypesUtils();
		var import_errors = errors;
		var import_model_definition = requireModelDefinition();
		var import_operators = operators;
		var import_format = requireFormat();
		var import_model_utils = requireModelUtils();
		var import_object = object$1;
		var import_string = string$2;
		var import_base = requireBase();
		var import_has_many = requireHasMany();
		var import_has_one = requireHasOne();
		var import_helpers = requireHelpers();
		class BelongsTo extends import_base.Association {
		  accessors;
		  /**
		   * The attribute name of the identifier
		   *
		   * @deprecated use {@link foreignKey} instead
		   */
		  get identifier() {
		    return this.foreignKey;
		  }
		  foreignKey;
		  /**
		   * The column name of the foreign key
		   */
		  // TODO: rename to foreignKeyColumnName
		  identifierField;
		  /**
		   * The name of the attribute the foreign key points to.
		   * In belongsTo, this key is on the Target Model, instead of the Source Model  (unlike {@link HasOne.sourceKey}).
		   * The {@link Association.foreignKey} is on the Source Model.
		   */
		  targetKey;
		  /**
		   * The column name of the target key
		   */
		  // TODO: rename to targetKeyColumnName
		  targetKeyField;
		  targetKeyIsPrimary;
		  /**
		   * @deprecated use {@link BelongsTo.targetKey}
		   */
		  get targetIdentifier() {
		    return this.targetKey;
		  }
		  inverse;
		  constructor(secret, source, target, options, parent) {
		    var _a, _b, _c, _d;
		    const targetKey = (options == null ? void 0 : options.targetKey) || target.primaryKeyAttribute;
		    const targetAttributes = target.modelDefinition.attributes;
		    if (!targetAttributes.has(targetKey)) {
		      throw new Error(`Unknown attribute "${options.targetKey}" passed as targetKey, define this attribute on model "${target.name}" first`);
		    }
		    if ("keyType" in options) {
		      throw new TypeError(`Option "keyType" has been removed from the BelongsTo's options. Set "foreignKey.type" instead.`);
		    }
		    super(secret, source, target, options, parent);
		    this.targetKey = targetKey;
		    if (target.sequelize.options.dialect === "db2" && targetAttributes.get(this.targetKey).primaryKey !== true) {
		      this.target.modelDefinition.rawAttributes[this.targetKey].unique = true;
		    }
		    let foreignKey;
		    let foreignKeyAttributeOptions;
		    if ((0, import_isObject.default)((_a = this.options) == null ? void 0 : _a.foreignKey)) {
		      (0, import_node_assert.default)(typeof ((_b = this.options) == null ? void 0 : _b.foreignKey) === "object");
		      foreignKeyAttributeOptions = this.options.foreignKey;
		      foreignKey = this.options.foreignKey.name || this.options.foreignKey.fieldName;
		    } else if ((_c = this.options) == null ? void 0 : _c.foreignKey) {
		      foreignKey = this.options.foreignKey;
		    }
		    if (!foreignKey) {
		      foreignKey = this.inferForeignKey();
		    }
		    this.foreignKey = foreignKey;
		    this.targetKeyField = (0, import_format.getColumnName)(targetAttributes.get(this.targetKey));
		    this.targetKeyIsPrimary = this.targetKey === this.target.primaryKeyAttribute;
		    const targetAttribute = targetAttributes.get(this.targetKey);
		    const existingForeignKey = source.modelDefinition.rawAttributes[this.foreignKey];
		    const newForeignKeyAttribute = (0, import_object.removeUndefined)({
		      type: (0, import_data_types_utils.cloneDataType)(targetAttribute.type),
		      ...foreignKeyAttributeOptions,
		      allowNull: (existingForeignKey == null ? void 0 : existingForeignKey.allowNull) ?? (foreignKeyAttributeOptions == null ? void 0 : foreignKeyAttributeOptions.allowNull)
		    });
		    if (options.foreignKeyConstraints !== false) {
		      const existingReference = (existingForeignKey == null ? void 0 : existingForeignKey.references) ? (0, import_model_definition.normalizeReference)(existingForeignKey.references) ?? existingForeignKey.references : void 0;
		      const queryGenerator = this.source.sequelize.getQueryInterface().queryGenerator;
		      const existingReferencedTable = (existingReference == null ? void 0 : existingReference.table) ? queryGenerator.extractTableDetails(existingReference.table) : void 0;
		      const newReferencedTable = queryGenerator.extractTableDetails(this.target);
		      const newReference = {};
		      if (existingReferencedTable) {
		        if (!(0, import_isEqual.default)(existingReferencedTable, newReferencedTable)) {
		          throw new Error(`Foreign key ${this.foreignKey} on ${this.source.name} already references ${queryGenerator.quoteTable(existingReferencedTable)}, but this association needs to make it reference ${queryGenerator.quoteTable(newReferencedTable)} instead.`);
		        }
		      } else {
		        newReference.table = newReferencedTable;
		      }
		      if ((existingReference == null ? void 0 : existingReference.key) && existingReference.key !== this.targetKeyField) {
		        throw new Error(`Foreign key ${this.foreignKey} on ${this.source.name} already references column ${existingReference.key}, but this association needs to make it reference ${this.targetKeyField} instead.`);
		      }
		      newReference.key = this.targetKeyField;
		      newForeignKeyAttribute.references = newReference;
		      newForeignKeyAttribute.onDelete ??= newForeignKeyAttribute.allowNull !== false ? "SET NULL" : "CASCADE";
		      newForeignKeyAttribute.onUpdate ??= newForeignKeyAttribute.onUpdate ?? "CASCADE";
		    }
		    this.source.mergeAttributesDefault({
		      [this.foreignKey]: newForeignKeyAttribute
		    });
		    this.identifierField = (0, import_format.getColumnName)(this.source.getAttributes()[this.foreignKey]);
		    const singular = (0, import_upperFirst.default)(this.options.name.singular);
		    this.accessors = {
		      get: `get${singular}`,
		      set: `set${singular}`,
		      create: `create${singular}`
		    };
		    this.#mixin(source.prototype);
		    if (options.inverse) {
		      const passDown = (0, import_object.removeUndefined)({
		        ...options,
		        as: options.inverse.as,
		        scope: (_d = options.inverse) == null ? void 0 : _d.scope,
		        sourceKey: options.targetKey,
		        inverse: void 0
		      });
		      delete passDown.targetKey;
		      switch (options.inverse.type) {
		        case "hasMany":
		          import_has_many.HasMany.associate(secret, target, source, passDown, this, this);
		          break;
		        case "hasOne":
		          import_has_one.HasOne.associate(secret, target, source, passDown, this, this);
		          break;
		        default:
		          throw new Error(`Invalid option received for "inverse.type": ${options.inverse.type} is not recognised. Expected "hasMany" or "hasOne"`);
		      }
		    }
		  }
		  static associate(secret, source, target, options = {}, parent) {
		    return (0, import_helpers.defineAssociation)(BelongsTo, source, target, options, parent, import_helpers.normalizeBaseAssociationOptions, (normalizedOptions) => {
		      if ((0, import_model_utils.isSameInitialModel)(source, target) && options.inverse && (!options.as || !options.inverse.as || options.as === options.inverse.as)) {
		        throw new import_errors.AssociationError(`Both options "as" and "inverse.as" must be defined for belongsTo self-associations, and their value must be different, if you specify the 'inverse' option.`);
		      }
		      return new BelongsTo(secret, source, target, normalizedOptions, parent);
		    });
		  }
		  #mixin(modelPrototype) {
		    (0, import_helpers.mixinMethods)(this, modelPrototype, ["get", "set", "create"]);
		  }
		  inferForeignKey() {
		    const associationName = this.options.name.singular;
		    if (!associationName) {
		      throw new Error("Sanity check: Could not guess the name of the association");
		    }
		    return (0, import_string.camelize)(`${associationName}_${this.targetKey}`);
		  }
		  async get(instances, options) {
		    options = (0, import_object.cloneDeep)(options) ?? {};
		    let Target = this.target;
		    if (options.scope != null) {
		      if (!options.scope) {
		        Target = Target.withoutScope();
		      } else if (options.scope !== true) {
		        Target = Target.withScope(options.scope);
		      }
		    }
		    if (options.schema != null) {
		      Target = Target.withSchema({ schema: options.schema, schemaDelimiter: options.schemaDelimiter });
		    }
		    let isManyMode = true;
		    if (!Array.isArray(instances)) {
		      isManyMode = false;
		      instances = [instances];
		    }
		    const where = /* @__PURE__ */ Object.create(null);
		    if (instances.length > 1) {
		      where[this.targetKey] = {
		        [import_operators.Op.in]: instances.map((instance) => instance.get(this.foreignKey)).filter((foreignKey) => foreignKey != null)
		      };
		    } else {
		      const foreignKeyValue = instances[0].get(this.foreignKey);
		      if (this.targetKeyIsPrimary && !options.where) {
		        return Target.findByPk(
		          foreignKeyValue,
		          options
		        );
		      }
		      where[this.targetKey] = foreignKeyValue;
		      options.limit = null;
		    }
		    options.where = options.where ? { [import_operators.Op.and]: [where, options.where] } : where;
		    if (isManyMode) {
		      const results = await Target.findAll(options);
		      const result = /* @__PURE__ */ new Map();
		      for (const instance of results) {
		        result.set(instance.get(this.targetKey, { raw: true }), instance);
		      }
		      return result;
		    }
		    return Target.findOne(options);
		  }
		  /**
		   * Set the associated model.
		   *
		   * @param sourceInstance the source instance
		   * @param associatedInstance An persisted instance or the primary key of an instance to associate with this. Pass `null` to remove the association.
		   * @param options options passed to `this.save`
		   */
		  async set(sourceInstance, associatedInstance, options = {}) {
		    let value = associatedInstance;
		    if (associatedInstance != null && associatedInstance instanceof this.target) {
		      value = associatedInstance[this.targetKey];
		    }
		    sourceInstance.set(this.foreignKey, value);
		    if (options.save === false) {
		      return;
		    }
		    await sourceInstance.save({
		      fields: [this.foreignKey],
		      association: true,
		      ...options
		    });
		  }
		  /**
		   * Create a new instance of the associated model and associate it with this.
		   *
		   * @param sourceInstance the source instance
		   * @param values values to create associated model instance with
		   * @param options Options passed to `target.create` and setAssociation.
		   *
		   * @returns The created target model
		   */
		  async create(sourceInstance, values = {}, options = {}) {
		    values = values || {};
		    options = options || {};
		    const newAssociatedObject = await this.target.create(values, options);
		    await this.set(sourceInstance, newAssociatedObject, options);
		    return newAssociatedObject;
		  }
		}
		Object.defineProperty(BelongsTo, "name", {
		  value: "BelongsTo"
		});
		
		return belongsTo;
	}

	var isArrayLike$1 = requireIsArrayLike();

	/**
	 * Creates a `baseEach` or `baseEachRight` function.
	 *
	 * @private
	 * @param {Function} eachFunc The function to iterate over a collection.
	 * @param {boolean} [fromRight] Specify iterating from right to left.
	 * @returns {Function} Returns the new base function.
	 */
	function createBaseEach$1(eachFunc, fromRight) {
	  return function(collection, iteratee) {
	    if (collection == null) {
	      return collection;
	    }
	    if (!isArrayLike$1(collection)) {
	      return eachFunc(collection, iteratee);
	    }
	    var length = collection.length,
	        index = fromRight ? length : -1,
	        iterable = Object(collection);

	    while ((fromRight ? index-- : ++index < length)) {
	      if (iteratee(iterable[index], index, iterable) === false) {
	        break;
	      }
	    }
	    return collection;
	  };
	}

	var _createBaseEach = createBaseEach$1;

	var baseForOwn = _baseForOwn,
	    createBaseEach = _createBaseEach;

	/**
	 * The base implementation of `_.forEach` without support for iteratee shorthands.
	 *
	 * @private
	 * @param {Array|Object} collection The collection to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array|Object} Returns `collection`.
	 */
	var baseEach$1 = createBaseEach(baseForOwn);

	var _baseEach = baseEach$1;

	var arrayEach = require_arrayEach(),
	    baseEach = _baseEach,
	    castFunction = _castFunction,
	    isArray$1 = isArray_1;

	/**
	 * Iterates over elements of `collection` and invokes `iteratee` for each element.
	 * The iteratee is invoked with three arguments: (value, index|key, collection).
	 * Iteratee functions may exit iteration early by explicitly returning `false`.
	 *
	 * **Note:** As with other "Collections" methods, objects with a "length"
	 * property are iterated like arrays. To avoid this behavior use `_.forIn`
	 * or `_.forOwn` for object iteration.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @alias each
	 * @category Collection
	 * @param {Array|Object} collection The collection to iterate over.
	 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	 * @returns {Array|Object} Returns `collection`.
	 * @see _.forEachRight
	 * @example
	 *
	 * _.forEach([1, 2], function(value) {
	 *   console.log(value);
	 * });
	 * // => Logs `1` then `2`.
	 *
	 * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
	 *   console.log(key);
	 * });
	 * // => Logs 'a' then 'b' (iteration order is not guaranteed).
	 */
	function forEach(collection, iteratee) {
	  var func = isArray$1(collection) ? arrayEach : baseEach;
	  return func(collection, castFunction(iteratee));
	}

	var forEach_1 = forEach;

	var each$1 = forEach_1;

	var belongsToMany;
	var hasRequiredBelongsToMany;

	function requireBelongsToMany () {
		if (hasRequiredBelongsToMany) return belongsToMany;
		hasRequiredBelongsToMany = 1;
		var __create = Object.create;
		var __defProp = Object.defineProperty;
		var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
		var __getOwnPropNames = Object.getOwnPropertyNames;
		var __getProtoOf = Object.getPrototypeOf;
		var __hasOwnProp = Object.prototype.hasOwnProperty;
		var __export = (target, all) => {
		  for (var name in all)
		    __defProp(target, name, { get: all[name], enumerable: true });
		};
		var __copyProps = (to, from, except, desc) => {
		  if (from && typeof from === "object" || typeof from === "function") {
		    for (let key of __getOwnPropNames(from))
		      if (!__hasOwnProp.call(to, key) && key !== except)
		        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
		  }
		  return to;
		};
		var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
		  // If the importer is in node compatibility mode or this is not an ESM
		  // file that has been converted to a CommonJS file using a Babel-
		  // compatible transform (i.e. "__esModule" has not been set), then set
		  // "default" to the CommonJS "module.exports" for node compatibility.
		  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
		  mod
		));
		var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
		var belongs_to_many_exports = {};
		__export(belongs_to_many_exports, {
		  BelongsToMany: () => BelongsToMany
		});
		belongsToMany = __toCommonJS(belongs_to_many_exports);
		var import_each = __toESM(each$1);
		var import_isEqual = __toESM(isEqual_1);
		var import_omit = __toESM(requireOmit());
		var import_upperFirst = __toESM(upperFirst_1);
		var import_errors = errors;
		var import_col = col_1;
		var import_fn = fn_1;
		var import_operators = operators;
		var import_model_utils = requireModelUtils();
		var import_object = object$1;
		var import_string = string$2;
		var import_base = requireBase();
		var import_has_many = requireHasMany();
		var import_has_one = requireHasOne();
		var import_helpers = requireHelpers();
		function addInclude(findOptions, include) {
		  if (Array.isArray(findOptions.include)) {
		    findOptions.include.push(include);
		  } else if (!findOptions.include) {
		    findOptions.include = [include];
		  } else {
		    findOptions.include = [findOptions.include, include];
		  }
		}
		class BelongsToMany extends import_base.MultiAssociation {
		  accessors;
		  get foreignKey() {
		    return this.fromSourceToThrough.foreignKey;
		  }
		  /**
		   * The name of the Foreign Key attribute, located on the through table, that points to the Target model.
		   *
		   * Not to be confused with @link {BelongsToMany.foreignKey}, which points to the Source model instead.
		   */
		  get otherKey() {
		    return this.pairedWith.foreignKey;
		  }
		  /**
		   * @deprecated use {@link BelongsToMany#foreignKey}
		   */
		  get identifier() {
		    return this.foreignKey;
		  }
		  /**
		   * The corresponding column name of {@link BelongsToMany#foreignKey}
		   */
		  get identifierField() {
		    return this.fromThroughToSource.identifierField;
		  }
		  /**
		   * The corresponding column name of {@link BelongsToMany#otherKey}
		   */
		  get foreignIdentifierField() {
		    return this.pairedWith.identifierField;
		  }
		  /**
		   * The name of the Attribute that the {@link foreignKey} fk (located on the Through Model) will reference on the Source model.
		   */
		  get sourceKey() {
		    return this.fromThroughToSource.targetKey;
		  }
		  /**
		   * The name of the Column that the {@link foreignKey} fk (located on the Through Table) will reference on the Source model.
		   */
		  get sourceKeyField() {
		    return this.fromThroughToSource.targetKeyField;
		  }
		  /**
		   * The name of the Attribute that the {@link otherKey} fk (located on the Through Model) will reference on the Target model.
		   */
		  get targetKey() {
		    return this.pairedWith.sourceKey;
		  }
		  /**
		   * The name of the Column that the {@link otherKey} fk (located on the Through Table) will reference on the Target model.
		   */
		  get targetKeyField() {
		    return this.pairedWith.sourceKeyField;
		  }
		  /**
		   * The corresponding association this entity is paired with.
		   */
		  pairedWith;
		  // intermediary associations
		  // these create the actual associations on the model. Remove them would be a breaking change.
		  fromSourceToThrough;
		  fromSourceToThroughOne;
		  get fromThroughToSource() {
		    return this.fromSourceToThrough.inverse;
		  }
		  get fromTargetToThrough() {
		    return this.pairedWith.fromSourceToThrough;
		  }
		  get fromTargetToThroughOne() {
		    return this.pairedWith.fromSourceToThroughOne;
		  }
		  get fromThroughToTarget() {
		    return this.pairedWith.fromThroughToSource;
		  }
		  get through() {
		    return this.options.through;
		  }
		  get throughModel() {
		    return this.through.model;
		  }
		  constructor(secret, source, target, options, pair, parent) {
		    var _a, _b, _c;
		    super(secret, source, target, options, parent);
		    try {
		      this.pairedWith = pair ?? BelongsToMany.associate(
		        secret,
		        target,
		        source,
		        (0, import_object.removeUndefined)({
		          ...options,
		          // note: we can't just use '...options.inverse' because we need to set to underfined if the option wasn't set
		          as: (_a = options.inverse) == null ? void 0 : _a.as,
		          scope: (_b = options.inverse) == null ? void 0 : _b.scope,
		          foreignKeyConstraints: (_c = options.inverse) == null ? void 0 : _c.foreignKeyConstraints,
		          inverse: (0, import_object.removeUndefined)({
		            as: options.as,
		            scope: options.scope,
		            foreignKeyConstraints: options.foreignKeyConstraints
		          }),
		          sourceKey: options.targetKey,
		          targetKey: options.sourceKey,
		          foreignKey: options.otherKey,
		          otherKey: options.foreignKey,
		          through: (0, import_object.removeUndefined)({
		            ...options.through,
		            scope: void 0
		          })
		        }),
		        this,
		        this
		      );
		    } catch (error) {
		      throw new import_errors.AssociationError(`BelongsToMany associations automatically create the corresponding association on the target model,
    but this association failed to create its paired association (BelongsToMany from ${target.name} to ${source.name}).

    This may happen if you try to define the same BelongsToMany association on both sides of the association.
    If that is the case, instead of doing this:
    A.belongsToMany(B, { as: 'b', through: 'AB' });
    B.belongsToMany(A, { as: 'a', through: 'AB' });

    Do this:
    A.belongsToMany(B, { as: 'b', through: 'AB', inverse: { as: 'a' } });
          `, { cause: error });
		    }
		    this.pairedWith.pairedWith = this;
		    const sourceKey = (options == null ? void 0 : options.sourceKey) || source.primaryKeyAttribute;
		    this.fromSourceToThrough = import_has_many.HasMany.associate(import_helpers.AssociationSecret, this.source, this.throughModel, (0, import_object.removeUndefined)({
		      as: `${this.name.plural}${(0, import_upperFirst.default)(this.pairedWith.name.plural)}`,
		      scope: this.through.scope,
		      foreignKey: {
		        ...this.options.foreignKey,
		        allowNull: this.options.foreignKey.allowNull ?? false,
		        name: this.options.foreignKey.name || (this.isSelfAssociation ? (0, import_string.camelize)(`${this.pairedWith.name.singular}_${sourceKey}`) : (0, import_string.camelize)(`${this.source.options.name.singular}_${sourceKey}`))
		      },
		      sourceKey: this.options.sourceKey,
		      foreignKeyConstraints: this.options.foreignKeyConstraints,
		      hooks: this.options.hooks,
		      inverse: {
		        as: this.pairedWith.name.singular
		      }
		    }), this);
		    this.fromSourceToThroughOne = import_has_one.HasOne.associate(import_helpers.AssociationSecret, this.source, this.throughModel, (0, import_object.removeUndefined)({
		      as: `${this.name.singular}${(0, import_upperFirst.default)(this.pairedWith.name.singular)}`,
		      scope: this.through.scope,
		      // foreignKey: this.options.foreignKey,
		      foreignKey: {
		        ...this.options.foreignKey,
		        allowNull: this.options.foreignKey.allowNull ?? false,
		        name: this.options.foreignKey.name || (this.isSelfAssociation ? (0, import_string.camelize)(`${this.pairedWith.name.singular}_${sourceKey}`) : (0, import_string.camelize)(`${this.source.options.name.singular}_${sourceKey}`))
		      },
		      sourceKey: this.options.sourceKey,
		      foreignKeyConstraints: this.options.foreignKeyConstraints,
		      hooks: this.options.hooks,
		      inverse: {
		        as: this.pairedWith.name.singular
		      }
		    }), this);
		    const plural = (0, import_upperFirst.default)(this.options.name.plural);
		    const singular = (0, import_upperFirst.default)(this.options.name.singular);
		    this.accessors = {
		      get: `get${plural}`,
		      set: `set${plural}`,
		      addMultiple: `add${plural}`,
		      add: `add${singular}`,
		      create: `create${singular}`,
		      remove: `remove${singular}`,
		      removeMultiple: `remove${plural}`,
		      hasSingle: `has${singular}`,
		      hasAll: `has${plural}`,
		      count: `count${plural}`
		    };
		    this.#mixin(source.prototype);
		    if (pair == null) {
		      this.#makeFkPairUnique();
		    }
		  }
		  #makeFkPairUnique() {
		    let hasPrimaryKey = false;
		    const throughModelDefinition = this.throughModel.modelDefinition;
		    const { rawAttributes: throughRawAttributes } = throughModelDefinition;
		    (0, import_each.default)(throughRawAttributes, (attribute, attributeName) => {
		      if (!attribute.primaryKey) {
		        return;
		      }
		      if ([this.foreignKey, this.otherKey].includes(attributeName)) {
		        return;
		      }
		      if (attribute._autoGenerated) {
		        delete throughRawAttributes[attributeName];
		        return;
		      }
		      hasPrimaryKey = true;
		    });
		    if (!hasPrimaryKey) {
		      if (typeof this.through.unique === "string") {
		        throw new TypeError(`BelongsToMany: Option "through.unique" can only be used if the through model's foreign keys are not also the primary keys.
Add your own primary key to the through model, on different attributes than the foreign keys, to be able to use this option.`);
		      }
		      throughRawAttributes[this.foreignKey].primaryKey = true;
		      throughRawAttributes[this.otherKey].primaryKey = true;
		    } else if (this.through.unique !== false) {
		      let uniqueKey;
		      if (typeof this.through.unique === "string" && this.through.unique !== "") {
		        uniqueKey = this.through.unique;
		      } else {
		        const keys = [this.foreignKey, this.otherKey].sort();
		        uniqueKey = [this.through.model.table.tableName, ...keys, "unique"].join("_");
		      }
		      throughRawAttributes[this.foreignKey].unique = [{ name: uniqueKey }];
		      throughRawAttributes[this.otherKey].unique = [{ name: uniqueKey }];
		    }
		    throughModelDefinition.refreshAttributes();
		  }
		  static associate(secret, source, target, options, pair, parent) {
		    return (0, import_helpers.defineAssociation)(BelongsToMany, source, target, options, parent, normalizeOptions, (newOptions) => {
		      var _a;
		      if ((0, import_model_utils.isSameInitialModel)(source, target) && (!options.as || !((_a = options.inverse) == null ? void 0 : _a.as) || options.as === options.inverse.as)) {
		        throw new import_errors.AssociationError('Both options "as" and "inverse.as" must be defined for belongsToMany self-associations, and their value must be different.');
		      }
		      return new BelongsToMany(secret, source, target, newOptions, pair, parent);
		    });
		  }
		  #mixin(modelPrototype) {
		    (0, import_helpers.mixinMethods)(
		      this,
		      modelPrototype,
		      ["get", "count", "hasSingle", "hasAll", "set", "add", "addMultiple", "remove", "removeMultiple", "create"],
		      {
		        hasSingle: "has",
		        hasAll: "has",
		        addMultiple: "add",
		        removeMultiple: "remove"
		      }
		    );
		  }
		  /**
		   * Get everything currently associated with this, using an optional where clause.
		   *
		   * See {@link Model} for a full explanation of options
		   *
		   * @param instance instance
		   * @param options find options
		   */
		  async get(instance, options) {
		    var _a, _b;
		    const through = this.through;
		    const findOptions = {
		      ...options,
		      // @ts-expect-error -- TODO: current WhereOptions typings do not allow having 'WhereOptions' inside another 'WhereOptions'
		      where: {
		        [import_operators.Op.and]: [
		          options == null ? void 0 : options.where,
		          this.scope
		        ]
		      }
		    };
		    let throughWhere = {
		      [this.foreignKey]: instance.get(this.sourceKey)
		    };
		    if (through.scope) {
		      Object.assign(throughWhere, through.scope);
		    }
		    if ((_a = options == null ? void 0 : options.through) == null ? void 0 : _a.where) {
		      throughWhere = {
		        [import_operators.Op.and]: [throughWhere, options.through.where]
		      };
		    }
		    addInclude(findOptions, (0, import_object.removeUndefined)({
		      association: this.fromTargetToThroughOne,
		      attributes: options == null ? void 0 : options.joinTableAttributes,
		      required: true,
		      paranoid: ((_b = options == null ? void 0 : options.through) == null ? void 0 : _b.paranoid) ?? true,
		      where: throughWhere
		    }));
		    let model = this.target;
		    if ((options == null ? void 0 : options.scope) != null) {
		      if (!options.scope) {
		        model = model.withoutScope();
		      } else if (options.scope !== true) {
		        model = model.withScope(options.scope);
		      }
		    }
		    if (options == null ? void 0 : options.schema) {
		      model = model.withSchema({ schema: options.schema, schemaDelimiter: options.schemaDelimiter });
		    }
		    return model.findAll(findOptions);
		  }
		  /**
		   * Count everything currently associated with this, using an optional where clause.
		   *
		   * @param instance instance
		   * @param options find options
		   */
		  async count(instance, options) {
		    const getOptions = {
		      ...options,
		      attributes: [
		        [(0, import_fn.fn)("COUNT", (0, import_col.col)([this.target.name, this.targetKeyField].join("."))), "count"]
		      ],
		      joinTableAttributes: [],
		      raw: true,
		      plain: true
		    };
		    const result = await this.get(instance, getOptions);
		    return Number.parseInt(result.count, 10);
		  }
		  /**
		   * Check if one or more instance(s) are associated with this. If a list of instances is passed, the function returns true if _all_ instances are associated
		   *
		   * @param sourceInstance source instance to check for an association with
		   * @param targetInstancesOrPks Can be an array of instances or their primary keys
		   * @param options Options passed to getAssociations
		   */
		  async has(sourceInstance, targetInstancesOrPks, options) {
		    if (!Array.isArray(targetInstancesOrPks)) {
		      targetInstancesOrPks = [targetInstancesOrPks];
		    }
		    const targetPrimaryKeys = targetInstancesOrPks.map((instance) => {
		      if (instance instanceof this.target) {
		        return instance.get(this.targetKey);
		      }
		      return instance;
		    });
		    const associatedObjects = await this.get(sourceInstance, {
		      ...options,
		      raw: true,
		      scope: false,
		      attributes: [this.targetKey],
		      joinTableAttributes: [],
		      // @ts-expect-error -- TODO: current WhereOptions typings do not allow having 'WhereOptions' inside another 'WhereOptions'
		      where: {
		        [import_operators.Op.and]: [
		          { [this.targetKey]: { [import_operators.Op.in]: targetPrimaryKeys } },
		          options == null ? void 0 : options.where
		        ]
		      }
		    });
		    return targetPrimaryKeys.every((pk) => {
		      return associatedObjects.some((instance) => {
		        return (0, import_isEqual.default)(instance[this.targetKey], pk);
		      });
		    });
		  }
		  /**
		   * Set the associated models by passing an array of instances or their primary keys.
		   * Everything that it not in the passed array will be un-associated.
		   *
		   * @param sourceInstance source instance to associate new instances with
		   * @param newInstancesOrPrimaryKeys A single instance or primary key, or a mixed array of persisted instances or primary keys
		   * @param options Options passed to `through.findAll`, `bulkCreate`, `update` and `destroy`
		   */
		  async set(sourceInstance, newInstancesOrPrimaryKeys, options = {}) {
		    const sourceKey = this.sourceKey;
		    const targetKey = this.targetKey;
		    const foreignKey = this.foreignKey;
		    const otherKey = this.otherKey;
		    const newInstances = newInstancesOrPrimaryKeys === null ? [] : this.toInstanceArray(newInstancesOrPrimaryKeys);
		    const where = {
		      [foreignKey]: sourceInstance.get(sourceKey),
		      ...this.through.scope
		    };
		    const currentThroughRows = await this.through.model.findAll({
		      ...options,
		      where,
		      raw: true,
		      // force this option to be false, in case the user enabled
		      rejectOnEmpty: false,
		      include: this.scope ? [{
		        association: this.fromThroughToTarget,
		        where: this.scope,
		        required: true
		      }] : []
		    });
		    const obsoleteTargets = [];
		    for (const currentRow of currentThroughRows) {
		      const newTarget = newInstances.find((obj) => {
		        return currentRow[otherKey] === obj.get(targetKey);
		      });
		      if (!newTarget) {
		        obsoleteTargets.push(currentRow[this.otherKey]);
		      }
		    }
		    const promises = [];
		    if (obsoleteTargets.length > 0) {
		      promises.push(this.remove(sourceInstance, obsoleteTargets, options));
		    }
		    if (newInstances.length > 0) {
		      promises.push(this.#updateAssociations(sourceInstance, currentThroughRows, newInstances, options));
		    }
		    await Promise.all(promises);
		  }
		  /**
		   * Associate one or several rows with source instance. It will not un-associate any already associated instance
		   * that may be missing from `newInstances`.
		   *
		   * @param sourceInstance source instance to associate new instances with
		   * @param newInstancesOrPrimaryKeys A single instance or primary key, or a mixed array of persisted instances or primary keys
		   * @param options Options passed to `through.findAll`, `bulkCreate` and `update`
		   */
		  async add(sourceInstance, newInstancesOrPrimaryKeys, options) {
		    var _a;
		    if (!newInstancesOrPrimaryKeys) {
		      return;
		    }
		    const newInstances = this.toInstanceArray(newInstancesOrPrimaryKeys);
		    const where = {
		      [this.foreignKey]: sourceInstance.get(this.sourceKey),
		      [this.otherKey]: newInstances.map((newInstance) => newInstance.get(this.targetKey)),
		      ...this.through.scope
		    };
		    let currentRows = [];
		    if (((_a = this.through) == null ? void 0 : _a.unique) ?? true) {
		      currentRows = await this.through.model.findAll({
		        ...options,
		        raw: true,
		        where,
		        // force this option to be false, in case the user enabled
		        rejectOnEmpty: false
		      });
		    }
		    await this.#updateAssociations(sourceInstance, currentRows, newInstances, options);
		  }
		  /**
		   * Adds new target instances that were not already present in the through table.
		   * Updates the through table row of the instances that already were present.
		   *
		   * @param sourceInstance
		   * @param currentThroughRows
		   * @param newTargets
		   * @param options
		   * @private
		   */
		  async #updateAssociations(sourceInstance, currentThroughRows, newTargets, options) {
		    const sourceKey = this.sourceKey;
		    const targetKey = this.targetKey;
		    const foreignKey = this.foreignKey;
		    const otherKey = this.otherKey;
		    const defaultAttributes = (options == null ? void 0 : options.through) || {};
		    const promises = [];
		    const unassociatedTargets = [];
		    const changedTargets = [];
		    for (const newInstance of newTargets) {
		      const existingThroughRow = currentThroughRows.find((throughRow) => {
		        return throughRow[otherKey] === newInstance.get(targetKey);
		      });
		      if (!existingThroughRow) {
		        unassociatedTargets.push(newInstance);
		        continue;
		      }
		      const throughAttributes = newInstance[this.through.model.name];
		      const attributes = { ...defaultAttributes, ...throughAttributes };
		      if (Object.keys(attributes).some((attribute) => {
		        return attributes[attribute] !== existingThroughRow[attribute];
		      })) {
		        changedTargets.push(newInstance);
		      }
		    }
		    if (unassociatedTargets.length > 0) {
		      const bulk = unassociatedTargets.map((unassociatedTarget) => {
		        const throughAttributes = unassociatedTarget[this.through.model.name];
		        const attributes = { ...defaultAttributes, ...throughAttributes };
		        attributes[foreignKey] = sourceInstance.get(sourceKey);
		        attributes[otherKey] = unassociatedTarget.get(targetKey);
		        Object.assign(attributes, this.through.scope);
		        return attributes;
		      });
		      promises.push(this.through.model.bulkCreate(bulk, { validate: true, ...options }));
		    }
		    for (const changedTarget of changedTargets) {
		      let throughAttributes = changedTarget[this.through.model.name];
		      const attributes = { ...defaultAttributes, ...throughAttributes };
		      if (throughAttributes instanceof this.through.model) {
		        throughAttributes = {};
		      }
		      const where = {
		        [foreignKey]: sourceInstance.get(sourceKey),
		        [otherKey]: changedTarget.get(targetKey)
		      };
		      promises.push(this.through.model.update(attributes, {
		        ...options,
		        where
		      }));
		    }
		    await Promise.all(promises);
		  }
		  /**
		   * Un-associate one or more instance(s).
		   *
		   * @param sourceInstance instance to un associate instances with
		   * @param targetInstanceOrPks Can be an Instance or its primary key, or a mixed array of instances and primary keys
		   * @param options Options passed to `through.destroy`
		   */
		  async remove(sourceInstance, targetInstanceOrPks, options) {
		    const targetInstance = this.toInstanceArray(targetInstanceOrPks);
		    const where = {
		      [this.foreignKey]: sourceInstance.get(this.sourceKey),
		      [this.otherKey]: targetInstance.map((newInstance) => newInstance.get(this.targetKey)),
		      ...this.through.scope
		    };
		    await this.through.model.destroy({ ...options, where });
		  }
		  /**
		   * Create a new instance of the associated model and associate it with this.
		   *
		   * @param sourceInstance source instance
		   * @param values values for target model
		   * @param options Options passed to create and add
		   */
		  async create(sourceInstance, values = {}, options = {}) {
		    if (Array.isArray(options)) {
		      options = {
		        fields: options
		      };
		    }
		    if (this.scope) {
		      Object.assign(values, this.scope);
		      if (options.fields) {
		        options.fields = [...options.fields, ...Object.keys(this.scope)];
		      }
		    }
		    const newAssociatedObject = await this.target.create(values, options);
		    await this.add(sourceInstance, newAssociatedObject, (0, import_omit.default)(options, ["fields"]));
		    return newAssociatedObject;
		  }
		}
		Object.defineProperty(BelongsToMany, "name", {
		  value: "BelongsToMany"
		});
		function normalizeThroughOptions(source, target, through, sequelize) {
		  var _a;
		  const timestamps = through.timestamps ?? ((_a = sequelize.options.define) == null ? void 0 : _a.timestamps);
		  let model;
		  if (!through || typeof through.model !== "string" && typeof through.model !== "function") {
		    throw new import_errors.AssociationError(`${source.name}.belongsToMany(${target.name}) requires a through model, set the "through", or "through.model" options to either a string or a model`);
		  }
		  if ((0, import_model_utils.isModelStatic)(through.model)) {
		    model = through.model;
		  } else if (typeof through.model === "function") {
		    model = through.model(sequelize);
		  } else if (sequelize.isDefined(through.model)) {
		    model = sequelize.model(through.model);
		  } else {
		    const sourceTable = source.table;
		    model = sequelize.define(through.model, {}, (0, import_object.removeUndefined)({
		      tableName: through.model,
		      indexes: [],
		      // we don't want indexes here (as referenced in #2416)
		      paranoid: through.paranoid || false,
		      // Default to non-paranoid join (referenced in #11991)
		      validate: {},
		      // Don't propagate model-level validations
		      timestamps: through.timestamps,
		      schema: sourceTable.schema,
		      schemaDelimiter: sourceTable.delimiter
		    }));
		  }
		  return (0, import_object.removeUndefined)({
		    ...through,
		    timestamps,
		    model
		  });
		}
		function normalizeOptions(type, options, source, target) {
		  if ("timestamps" in options) {
		    throw new TypeError('The "timestamps" option in belongsToMany has been renamed to through.timestamps');
		  }
		  if ("uniqueKey" in options) {
		    throw new TypeError('The "uniqueKey" option in belongsToMany has been renamed to through.unique');
		  }
		  const sequelize = target.sequelize;
		  return (0, import_helpers.normalizeBaseAssociationOptions)(type, {
		    ...options,
		    otherKey: (0, import_helpers.normalizeForeignKeyOptions)(options.otherKey),
		    through: (0, import_object.removeUndefined)((0, import_helpers.isThroughOptions)(options.through) ? normalizeThroughOptions(source, target, options.through, sequelize) : normalizeThroughOptions(source, target, { model: options.through }, sequelize))
		  }, source, target);
		}
		
		return belongsToMany;
	}

	var hasRequiredAssociations;

	function requireAssociations () {
		if (hasRequiredAssociations) return associations$1.exports;
		hasRequiredAssociations = 1;
		(function (module) {
			var __defProp = Object.defineProperty;
			var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
			var __getOwnPropNames = Object.getOwnPropertyNames;
			var __hasOwnProp = Object.prototype.hasOwnProperty;
			var __copyProps = (to, from, except, desc) => {
			  if (from && typeof from === "object" || typeof from === "function") {
			    for (let key of __getOwnPropNames(from))
			      if (!__hasOwnProp.call(to, key) && key !== except)
			        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
			  }
			  return to;
			};
			var __reExport = (target, mod, secondTarget) => (__copyProps(target, mod, "default"), secondTarget && __copyProps(secondTarget, mod, "default"));
			var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
			var associations_exports = {};
			module.exports = __toCommonJS(associations_exports);
			__reExport(associations_exports, requireBase(), module.exports);
			__reExport(associations_exports, requireBelongsTo(), module.exports);
			__reExport(associations_exports, requireHasOne(), module.exports);
			__reExport(associations_exports, requireHasMany(), module.exports);
			__reExport(associations_exports, requireBelongsToMany(), module.exports);
			
		} (associations$1));
		return associations$1.exports;
	}

	var __defProp$f = Object.defineProperty;
	var __getOwnPropDesc$f = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames$f = Object.getOwnPropertyNames;
	var __hasOwnProp$f = Object.prototype.hasOwnProperty;
	var __export$f = (target, all) => {
	  for (var name in all)
	    __defProp$f(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps$f = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames$f(from))
	      if (!__hasOwnProp$f.call(to, key) && key !== except)
	        __defProp$f(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc$f(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS$f = (mod) => __copyProps$f(__defProp$f({}, "__esModule", { value: true }), mod);
	var query_types_exports = {};
	__export$f(query_types_exports, {
	  QueryTypes: () => QueryTypes$1
	});
	var queryTypes = __toCommonJS$f(query_types_exports);
	var QueryTypes$1 = /* @__PURE__ */ ((QueryTypes2) => {
	  QueryTypes2["SELECT"] = "SELECT";
	  QueryTypes2["INSERT"] = "INSERT";
	  QueryTypes2["UPDATE"] = "UPDATE";
	  QueryTypes2["BULKUPDATE"] = "BULKUPDATE";
	  QueryTypes2["BULKDELETE"] = "BULKDELETE";
	  QueryTypes2["DELETE"] = "DELETE";
	  QueryTypes2["UPSERT"] = "UPSERT";
	  QueryTypes2["SHOWTABLES"] = "SHOWTABLES";
	  QueryTypes2["SHOWINDEXES"] = "SHOWINDEXES";
	  QueryTypes2["DESCRIBE"] = "DESCRIBE";
	  QueryTypes2["RAW"] = "RAW";
	  QueryTypes2["FOREIGNKEYS"] = "FOREIGNKEYS";
	  QueryTypes2["SHOWCONSTRAINTS"] = "SHOWCONSTRAINTS";
	  return QueryTypes2;
	})(QueryTypes$1 || {});

	var dottie = {exports: {}};

	var hasRequiredDottie;

	function requireDottie () {
		if (hasRequiredDottie) return dottie.exports;
		hasRequiredDottie = 1;
		(function (module, exports) {
			(function(undefined$1) {
			  var root = this;

			  // Weird IE shit, objects do not have hasOwn, but the prototype does...
			  var hasOwnProp = Object.prototype.hasOwnProperty;

			  var reverseDupArray = function (array) {
			    var result = new Array(array.length);
			    var index  = array.length;
			    var arrayMaxIndex = index - 1;

			    while (index--) {
			      result[arrayMaxIndex - index] = array[index];
			    }

			    return result;
			  };

			  var Dottie = function() {
			    var args = Array.prototype.slice.call(arguments);

			    if (args.length == 2) {
			      return Dottie.find.apply(this, args);
			    }
			    return Dottie.transform.apply(this, args);
			  };

			  // Legacy syntax, changed syntax to have get/set be similar in arg order
			  Dottie.find = function(path, object) {
			    return Dottie.get(object, path);
			  };

			  // Dottie memoization flag
			  Dottie.memoizePath = true;
			  var memoized = {};

			  // Traverse object according to path, return value if found - Return undefined if destination is unreachable
			  Dottie.get = function(object, path, defaultVal) {
			    if ((object === undefined$1) || (object === null) || (path === undefined$1) || (path === null)) {
			        return defaultVal;
			    }

			    var names;

			    if (typeof path === "string") {
			      if (Dottie.memoizePath) {
			        if (memoized[path]) {
			          names = memoized[path].slice(0);
			        } else {
			          names = path.split('.').reverse();
			          memoized[path] = names.slice(0);
			        }
			      } else {
			        names = path.split('.').reverse();
			      }
			    } else if (Array.isArray(path)) {
			      names = reverseDupArray(path);
			    }

			    while (names.length && (object = object[names.pop()]) !== undefined$1 && object !== null);

			    // Handle cases where accessing a childprop of a null value
			    if (object === null && names.length) object = undefined$1;

			    return (object === undefined$1 ? defaultVal : object);
			  };

			  Dottie.exists = function(object, path) {
			    return Dottie.get(object, path) !== undefined$1;
			  };

			  // Set nested value
			  Dottie.set = function(object, path, value, options) {
			    var pieces = Array.isArray(path) ? path : path.split('.'), current = object, piece, length = pieces.length;
			    if (pieces[0] === '__proto__') return;

			    if (typeof current !== 'object') {
			        throw new Error('Parent is not an object.');
			    }

			    for (var index = 0; index < length; index++) {
			      piece = pieces[index];

			      // Create namespace (object) where none exists.
			      // If `force === true`, bruteforce the path without throwing errors.
			      if (
			        !hasOwnProp.call(current, piece)
			        || current[piece] === undefined$1
			        || ((typeof current[piece] !== 'object' || current[piece] === null) && options && options.force === true)) {
			        current[piece] = {};
			      }

			      if (index == (length - 1)) {
			        // Set final value
			        current[piece] = value;
			      } else {
			        // We do not overwrite existing path pieces by default
			        if (typeof current[piece] !== 'object' || current[piece] === null) {
			          throw new Error('Target key "' + piece + '" is not suitable for a nested value. (It is in use as non-object. Set `force` to `true` to override.)');
			        }

			        // Traverse next in path
			        current = current[piece];
			      }
			    }

			    // Is there any case when this is relevant? It's also the last line in the above for-loop
			    current[piece] = value;
			  };

			  // Set default nested value
			  Dottie['default'] = function(object, path, value) {
			    if (Dottie.get(object, path) === undefined$1) {
			      Dottie.set(object, path, value);
			    }
			  };

			  // Transform unnested object with .-seperated keys into a nested object.
			  Dottie.transform = function Dottie$transformfunction(object, options) {
			    if (Array.isArray(object)) {
			      return object.map(function(o) {
			        return Dottie.transform(o, options);
			      });
			    }

			    options = options || {};
			    options.delimiter = options.delimiter || '.';

			    var pieces
			      , piecesLength
			      , piece
			      , current
			      , transformed = {}
			      , key
			      , keys = Object.keys(object)
			      , length = keys.length
			      , i;

			    for (i = 0; i < length; i++) {
			      key = keys[i];

			      if (key.indexOf(options.delimiter) !== -1) {
			        pieces = key.split(options.delimiter);

			        if (pieces[0] === '__proto__') break;

			        piecesLength = pieces.length;
			        current = transformed;

			        for (var index = 0; index < piecesLength; index++) {
			          piece = pieces[index];
			          if (index != (piecesLength - 1) && !current.hasOwnProperty(piece)) {
			            current[piece] = {};
			          }

			          if (index == (piecesLength - 1)) {
			            current[piece] = object[key];
			          }

			          current = current[piece];
			          if (current === null) {
			            break;
			          }
			        }
			      } else {
			        transformed[key] = object[key];
			      }
			    }

			    return transformed;
			  };

			  Dottie.flatten = function(object, seperator) {
			    if (typeof seperator === "undefined") seperator = '.';
			    var flattened = {}
			      , current
			      , nested;

			    for (var key in object) {
			      if (hasOwnProp.call(object, key)) {
			        current = object[key];
			        if (Object.prototype.toString.call(current) === "[object Object]") {
			          nested = Dottie.flatten(current, seperator);

			          for (var _key in nested) {
			            flattened[key+seperator+_key] = nested[_key];
			          }
			        } else {
			          flattened[key] = current;
			        }
			      }
			    }

			    return flattened;
			  };

			  Dottie.paths = function(object, prefixes) {
			    var paths = [];
			    var value;
			    var key;

			    prefixes = prefixes || [];

			    if (typeof object === 'object') {
			      for (key in object) {
			        value = object[key];

			        if (typeof value === 'object' && value !== null) {
			          paths = paths.concat(Dottie.paths(value, prefixes.concat([key])));
			        } else {
			          paths.push(prefixes.concat(key).join('.'));
			        }
			      }
			    } else {
			      throw new Error('Paths was called with non-object argument.');
			    }

			    return paths;
			  };

			  if (module.exports) {
			    module.exports = Dottie;
			  } else {
			    root['Dottie'] = Dottie;
			    root['Dot'] = Dottie; //BC

			    if (typeof undefined$1 === "function") {
			      undefined$1([], function () { return Dottie; });
			    }
			  }
			})(); 
		} (dottie));
		return dottie.exports;
	}

	var browser = {exports: {}};

	/**
	 * Helpers.
	 */

	var ms;
	var hasRequiredMs;

	function requireMs () {
		if (hasRequiredMs) return ms;
		hasRequiredMs = 1;
		var s = 1000;
		var m = s * 60;
		var h = m * 60;
		var d = h * 24;
		var w = d * 7;
		var y = d * 365.25;

		/**
		 * Parse or format the given `val`.
		 *
		 * Options:
		 *
		 *  - `long` verbose formatting [false]
		 *
		 * @param {String|Number} val
		 * @param {Object} [options]
		 * @throws {Error} throw an error if val is not a non-empty string or a number
		 * @return {String|Number}
		 * @api public
		 */

		ms = function(val, options) {
		  options = options || {};
		  var type = typeof val;
		  if (type === 'string' && val.length > 0) {
		    return parse(val);
		  } else if (type === 'number' && isFinite(val)) {
		    return options.long ? fmtLong(val) : fmtShort(val);
		  }
		  throw new Error(
		    'val is not a non-empty string or a valid number. val=' +
		      JSON.stringify(val)
		  );
		};

		/**
		 * Parse the given `str` and return milliseconds.
		 *
		 * @param {String} str
		 * @return {Number}
		 * @api private
		 */

		function parse(str) {
		  str = String(str);
		  if (str.length > 100) {
		    return;
		  }
		  var match = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(
		    str
		  );
		  if (!match) {
		    return;
		  }
		  var n = parseFloat(match[1]);
		  var type = (match[2] || 'ms').toLowerCase();
		  switch (type) {
		    case 'years':
		    case 'year':
		    case 'yrs':
		    case 'yr':
		    case 'y':
		      return n * y;
		    case 'weeks':
		    case 'week':
		    case 'w':
		      return n * w;
		    case 'days':
		    case 'day':
		    case 'd':
		      return n * d;
		    case 'hours':
		    case 'hour':
		    case 'hrs':
		    case 'hr':
		    case 'h':
		      return n * h;
		    case 'minutes':
		    case 'minute':
		    case 'mins':
		    case 'min':
		    case 'm':
		      return n * m;
		    case 'seconds':
		    case 'second':
		    case 'secs':
		    case 'sec':
		    case 's':
		      return n * s;
		    case 'milliseconds':
		    case 'millisecond':
		    case 'msecs':
		    case 'msec':
		    case 'ms':
		      return n;
		    default:
		      return undefined;
		  }
		}

		/**
		 * Short format for `ms`.
		 *
		 * @param {Number} ms
		 * @return {String}
		 * @api private
		 */

		function fmtShort(ms) {
		  var msAbs = Math.abs(ms);
		  if (msAbs >= d) {
		    return Math.round(ms / d) + 'd';
		  }
		  if (msAbs >= h) {
		    return Math.round(ms / h) + 'h';
		  }
		  if (msAbs >= m) {
		    return Math.round(ms / m) + 'm';
		  }
		  if (msAbs >= s) {
		    return Math.round(ms / s) + 's';
		  }
		  return ms + 'ms';
		}

		/**
		 * Long format for `ms`.
		 *
		 * @param {Number} ms
		 * @return {String}
		 * @api private
		 */

		function fmtLong(ms) {
		  var msAbs = Math.abs(ms);
		  if (msAbs >= d) {
		    return plural(ms, msAbs, d, 'day');
		  }
		  if (msAbs >= h) {
		    return plural(ms, msAbs, h, 'hour');
		  }
		  if (msAbs >= m) {
		    return plural(ms, msAbs, m, 'minute');
		  }
		  if (msAbs >= s) {
		    return plural(ms, msAbs, s, 'second');
		  }
		  return ms + ' ms';
		}

		/**
		 * Pluralization helper.
		 */

		function plural(ms, msAbs, n, name) {
		  var isPlural = msAbs >= n * 1.5;
		  return Math.round(ms / n) + ' ' + name + (isPlural ? 's' : '');
		}
		return ms;
	}

	var common$7;
	var hasRequiredCommon;

	function requireCommon () {
		if (hasRequiredCommon) return common$7;
		hasRequiredCommon = 1;
		/**
		 * This is the common logic for both the Node.js and web browser
		 * implementations of `debug()`.
		 */

		function setup(env) {
			createDebug.debug = createDebug;
			createDebug.default = createDebug;
			createDebug.coerce = coerce;
			createDebug.disable = disable;
			createDebug.enable = enable;
			createDebug.enabled = enabled;
			createDebug.humanize = requireMs();
			createDebug.destroy = destroy;

			Object.keys(env).forEach(key => {
				createDebug[key] = env[key];
			});

			/**
			* The currently active debug mode names, and names to skip.
			*/

			createDebug.names = [];
			createDebug.skips = [];

			/**
			* Map of special "%n" handling functions, for the debug "format" argument.
			*
			* Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
			*/
			createDebug.formatters = {};

			/**
			* Selects a color for a debug namespace
			* @param {String} namespace The namespace string for the debug instance to be colored
			* @return {Number|String} An ANSI color code for the given namespace
			* @api private
			*/
			function selectColor(namespace) {
				let hash = 0;

				for (let i = 0; i < namespace.length; i++) {
					hash = ((hash << 5) - hash) + namespace.charCodeAt(i);
					hash |= 0; // Convert to 32bit integer
				}

				return createDebug.colors[Math.abs(hash) % createDebug.colors.length];
			}
			createDebug.selectColor = selectColor;

			/**
			* Create a debugger with the given `namespace`.
			*
			* @param {String} namespace
			* @return {Function}
			* @api public
			*/
			function createDebug(namespace) {
				let prevTime;
				let enableOverride = null;
				let namespacesCache;
				let enabledCache;

				function debug(...args) {
					// Disabled?
					if (!debug.enabled) {
						return;
					}

					const self = debug;

					// Set `diff` timestamp
					const curr = Number(new Date());
					const ms = curr - (prevTime || curr);
					self.diff = ms;
					self.prev = prevTime;
					self.curr = curr;
					prevTime = curr;

					args[0] = createDebug.coerce(args[0]);

					if (typeof args[0] !== 'string') {
						// Anything else let's inspect with %O
						args.unshift('%O');
					}

					// Apply any `formatters` transformations
					let index = 0;
					args[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format) => {
						// If we encounter an escaped % then don't increase the array index
						if (match === '%%') {
							return '%';
						}
						index++;
						const formatter = createDebug.formatters[format];
						if (typeof formatter === 'function') {
							const val = args[index];
							match = formatter.call(self, val);

							// Now we need to remove `args[index]` since it's inlined in the `format`
							args.splice(index, 1);
							index--;
						}
						return match;
					});

					// Apply env-specific formatting (colors, etc.)
					createDebug.formatArgs.call(self, args);

					const logFn = self.log || createDebug.log;
					logFn.apply(self, args);
				}

				debug.namespace = namespace;
				debug.useColors = createDebug.useColors();
				debug.color = createDebug.selectColor(namespace);
				debug.extend = extend;
				debug.destroy = createDebug.destroy; // XXX Temporary. Will be removed in the next major release.

				Object.defineProperty(debug, 'enabled', {
					enumerable: true,
					configurable: false,
					get: () => {
						if (enableOverride !== null) {
							return enableOverride;
						}
						if (namespacesCache !== createDebug.namespaces) {
							namespacesCache = createDebug.namespaces;
							enabledCache = createDebug.enabled(namespace);
						}

						return enabledCache;
					},
					set: v => {
						enableOverride = v;
					}
				});

				// Env-specific initialization logic for debug instances
				if (typeof createDebug.init === 'function') {
					createDebug.init(debug);
				}

				return debug;
			}

			function extend(namespace, delimiter) {
				const newDebug = createDebug(this.namespace + (typeof delimiter === 'undefined' ? ':' : delimiter) + namespace);
				newDebug.log = this.log;
				return newDebug;
			}

			/**
			* Enables a debug mode by namespaces. This can include modes
			* separated by a colon and wildcards.
			*
			* @param {String} namespaces
			* @api public
			*/
			function enable(namespaces) {
				createDebug.save(namespaces);
				createDebug.namespaces = namespaces;

				createDebug.names = [];
				createDebug.skips = [];

				let i;
				const split = (typeof namespaces === 'string' ? namespaces : '').split(/[\s,]+/);
				const len = split.length;

				for (i = 0; i < len; i++) {
					if (!split[i]) {
						// ignore empty strings
						continue;
					}

					namespaces = split[i].replace(/\*/g, '.*?');

					if (namespaces[0] === '-') {
						createDebug.skips.push(new RegExp('^' + namespaces.slice(1) + '$'));
					} else {
						createDebug.names.push(new RegExp('^' + namespaces + '$'));
					}
				}
			}

			/**
			* Disable debug output.
			*
			* @return {String} namespaces
			* @api public
			*/
			function disable() {
				const namespaces = [
					...createDebug.names.map(toNamespace),
					...createDebug.skips.map(toNamespace).map(namespace => '-' + namespace)
				].join(',');
				createDebug.enable('');
				return namespaces;
			}

			/**
			* Returns true if the given mode name is enabled, false otherwise.
			*
			* @param {String} name
			* @return {Boolean}
			* @api public
			*/
			function enabled(name) {
				if (name[name.length - 1] === '*') {
					return true;
				}

				let i;
				let len;

				for (i = 0, len = createDebug.skips.length; i < len; i++) {
					if (createDebug.skips[i].test(name)) {
						return false;
					}
				}

				for (i = 0, len = createDebug.names.length; i < len; i++) {
					if (createDebug.names[i].test(name)) {
						return true;
					}
				}

				return false;
			}

			/**
			* Convert regexp to namespace
			*
			* @param {RegExp} regxep
			* @return {String} namespace
			* @api private
			*/
			function toNamespace(regexp) {
				return regexp.toString()
					.substring(2, regexp.toString().length - 2)
					.replace(/\.\*\?$/, '*');
			}

			/**
			* Coerce `val`.
			*
			* @param {Mixed} val
			* @return {Mixed}
			* @api private
			*/
			function coerce(val) {
				if (val instanceof Error) {
					return val.stack || val.message;
				}
				return val;
			}

			/**
			* XXX DO NOT USE. This is a temporary stub function.
			* XXX It WILL be removed in the next major release.
			*/
			function destroy() {
				console.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');
			}

			createDebug.enable(createDebug.load());

			return createDebug;
		}

		common$7 = setup;
		return common$7;
	}

	/* eslint-env browser */

	var hasRequiredBrowser;

	function requireBrowser () {
		if (hasRequiredBrowser) return browser.exports;
		hasRequiredBrowser = 1;
		(function (module, exports) {
			/**
			 * This is the web browser implementation of `debug()`.
			 */

			exports.formatArgs = formatArgs;
			exports.save = save;
			exports.load = load;
			exports.useColors = useColors;
			exports.storage = localstorage();
			exports.destroy = (() => {
				let warned = false;

				return () => {
					if (!warned) {
						warned = true;
						console.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');
					}
				};
			})();

			/**
			 * Colors.
			 */

			exports.colors = [
				'#0000CC',
				'#0000FF',
				'#0033CC',
				'#0033FF',
				'#0066CC',
				'#0066FF',
				'#0099CC',
				'#0099FF',
				'#00CC00',
				'#00CC33',
				'#00CC66',
				'#00CC99',
				'#00CCCC',
				'#00CCFF',
				'#3300CC',
				'#3300FF',
				'#3333CC',
				'#3333FF',
				'#3366CC',
				'#3366FF',
				'#3399CC',
				'#3399FF',
				'#33CC00',
				'#33CC33',
				'#33CC66',
				'#33CC99',
				'#33CCCC',
				'#33CCFF',
				'#6600CC',
				'#6600FF',
				'#6633CC',
				'#6633FF',
				'#66CC00',
				'#66CC33',
				'#9900CC',
				'#9900FF',
				'#9933CC',
				'#9933FF',
				'#99CC00',
				'#99CC33',
				'#CC0000',
				'#CC0033',
				'#CC0066',
				'#CC0099',
				'#CC00CC',
				'#CC00FF',
				'#CC3300',
				'#CC3333',
				'#CC3366',
				'#CC3399',
				'#CC33CC',
				'#CC33FF',
				'#CC6600',
				'#CC6633',
				'#CC9900',
				'#CC9933',
				'#CCCC00',
				'#CCCC33',
				'#FF0000',
				'#FF0033',
				'#FF0066',
				'#FF0099',
				'#FF00CC',
				'#FF00FF',
				'#FF3300',
				'#FF3333',
				'#FF3366',
				'#FF3399',
				'#FF33CC',
				'#FF33FF',
				'#FF6600',
				'#FF6633',
				'#FF9900',
				'#FF9933',
				'#FFCC00',
				'#FFCC33'
			];

			/**
			 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
			 * and the Firebug extension (any Firefox version) are known
			 * to support "%c" CSS customizations.
			 *
			 * TODO: add a `localStorage` variable to explicitly enable/disable colors
			 */

			// eslint-disable-next-line complexity
			function useColors() {
				// NB: In an Electron preload script, document will be defined but not fully
				// initialized. Since we know we're in Chrome, we'll just detect this case
				// explicitly
				if (typeof window !== 'undefined' && window.process && (window.process.type === 'renderer' || window.process.__nwjs)) {
					return true;
				}

				// Internet Explorer and Edge do not support colors.
				if (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
					return false;
				}

				// Is webkit? http://stackoverflow.com/a/16459606/376773
				// document is undefined in react-native: https://github.com/facebook/react-native/pull/1632
				return (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||
					// Is firebug? http://stackoverflow.com/a/398120/376773
					(typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||
					// Is firefox >= v31?
					// https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
					(typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||
					// Double check webkit in userAgent just in case we are in a worker
					(typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/));
			}

			/**
			 * Colorize log arguments if enabled.
			 *
			 * @api public
			 */

			function formatArgs(args) {
				args[0] = (this.useColors ? '%c' : '') +
					this.namespace +
					(this.useColors ? ' %c' : ' ') +
					args[0] +
					(this.useColors ? '%c ' : ' ') +
					'+' + module.exports.humanize(this.diff);

				if (!this.useColors) {
					return;
				}

				const c = 'color: ' + this.color;
				args.splice(1, 0, c, 'color: inherit');

				// The final "%c" is somewhat tricky, because there could be other
				// arguments passed either before or after the %c, so we need to
				// figure out the correct index to insert the CSS into
				let index = 0;
				let lastC = 0;
				args[0].replace(/%[a-zA-Z%]/g, match => {
					if (match === '%%') {
						return;
					}
					index++;
					if (match === '%c') {
						// We only are interested in the *last* %c
						// (the user may have provided their own)
						lastC = index;
					}
				});

				args.splice(lastC, 0, c);
			}

			/**
			 * Invokes `console.debug()` when available.
			 * No-op when `console.debug` is not a "function".
			 * If `console.debug` is not available, falls back
			 * to `console.log`.
			 *
			 * @api public
			 */
			exports.log = console.debug || console.log || (() => {});

			/**
			 * Save `namespaces`.
			 *
			 * @param {String} namespaces
			 * @api private
			 */
			function save(namespaces) {
				try {
					if (namespaces) {
						exports.storage.setItem('debug', namespaces);
					} else {
						exports.storage.removeItem('debug');
					}
				} catch (error) {
					// Swallow
					// XXX (@Qix-) should we be logging these?
				}
			}

			/**
			 * Load `namespaces`.
			 *
			 * @return {String} returns the previously persisted debug modes
			 * @api private
			 */
			function load() {
				let r;
				try {
					r = exports.storage.getItem('debug');
				} catch (error) {
					// Swallow
					// XXX (@Qix-) should we be logging these?
				}

				// If debug isn't set in LS, and we're in Electron, try to load $DEBUG
				if (!r && typeof process !== 'undefined' && 'env' in process) {
					r = process.env.DEBUG;
				}

				return r;
			}

			/**
			 * Localstorage attempts to return the localstorage.
			 *
			 * This is necessary because safari throws
			 * when a user disables cookies/localstorage
			 * and you attempt to access it.
			 *
			 * @return {LocalStorage}
			 * @api private
			 */

			function localstorage() {
				try {
					// TVMLKit (Apple TV JS Runtime) does not have a window object, just localStorage in the global context
					// The Browser also has localStorage in the global context.
					return localStorage;
				} catch (error) {
					// Swallow
					// XXX (@Qix-) should we be logging these?
				}
			}

			module.exports = requireCommon()(exports);

			const {formatters} = module.exports;

			/**
			 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
			 */

			formatters.j = function (v) {
				try {
					return JSON.stringify(v);
				} catch (error) {
					return '[UnexpectedJSONParseError]: ' + error.message;
				}
			}; 
		} (browser, browser.exports));
		return browser.exports;
	}

	var logger_1;
	var hasRequiredLogger;

	function requireLogger () {
		if (hasRequiredLogger) return logger_1;
		hasRequiredLogger = 1;
		var __create = Object.create;
		var __defProp = Object.defineProperty;
		var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
		var __getOwnPropNames = Object.getOwnPropertyNames;
		var __getProtoOf = Object.getPrototypeOf;
		var __hasOwnProp = Object.prototype.hasOwnProperty;
		var __export = (target, all) => {
		  for (var name in all)
		    __defProp(target, name, { get: all[name], enumerable: true });
		};
		var __copyProps = (to, from, except, desc) => {
		  if (from && typeof from === "object" || typeof from === "function") {
		    for (let key of __getOwnPropNames(from))
		      if (!__hasOwnProp.call(to, key) && key !== except)
		        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
		  }
		  return to;
		};
		var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
		  // If the importer is in node compatibility mode or this is not an ESM
		  // file that has been converted to a CommonJS file using a Babel-
		  // compatible transform (i.e. "__esModule" has not been set), then set
		  // "default" to the CommonJS "module.exports" for node compatibility.
		  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
		  mod
		));
		var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
		var logger_exports = {};
		__export(logger_exports, {
		  Logger: () => Logger,
		  logger: () => logger
		});
		logger_1 = __toCommonJS(logger_exports);
		var import_node_util = __toESM(require$$0$1);
		var import_debug = __toESM(requireBrowser());
		class Logger {
		  config;
		  constructor({ context = "sequelize", ...rest } = {}) {
		    this.config = {
		      context,
		      ...rest
		    };
		  }
		  /**
		   * Logs a warning in the logger's context.
		   *
		   * @param message The message of the warning.
		   */
		  warn(message) {
		    console.warn(`(${this.config.context}) Warning: ${message}`);
		  }
		  /**
		   * Uses node's util.inspect to stringify a value.
		   *
		   * @param value The value which should be inspected.
		   * @returns The string of the inspected value.
		   */
		  inspect(value) {
		    return import_node_util.default.inspect(value, {
		      showHidden: false,
		      depth: 1
		    });
		  }
		  /**
		   * Gets a debugger for a context.
		   *
		   * @param name The name of the context.
		   * @returns A debugger interace which can be used to debug.
		   */
		  debugContext(name) {
		    return (0, import_debug.default)(`${this.config.context}:${name}`);
		  }
		}
		const logger = new Logger();
		
		return logger_1;
	}

	var instanceValidator;
	var hasRequiredInstanceValidator;

	function requireInstanceValidator () {
		if (hasRequiredInstanceValidator) return instanceValidator;
		hasRequiredInstanceValidator = 1;
		var __defProp = Object.defineProperty;
		var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
		var __getOwnPropNames = Object.getOwnPropertyNames;
		var __hasOwnProp = Object.prototype.hasOwnProperty;
		var __export = (target, all) => {
		  for (var name in all)
		    __defProp(target, name, { get: all[name], enumerable: true });
		};
		var __copyProps = (to, from, except, desc) => {
		  if (from && typeof from === "object" || typeof from === "function") {
		    for (let key of __getOwnPropNames(from))
		      if (!__hasOwnProp.call(to, key) && key !== except)
		        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
		  }
		  return to;
		};
		var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
		var instance_validator_exports = {};
		__export(instance_validator_exports, {
		  InstanceValidator: () => InstanceValidator
		});
		instanceValidator = __toCommonJS(instance_validator_exports);
		var import_data_types = requireDataTypes$8();
		var import_data_types_utils = requireDataTypesUtils();
		var import_base_sql_expression = baseSqlExpression;
		var import_object = object$1;
		var import_belongs_to = requireBelongsTo();
		const _ = lodashExports;
		const sequelizeError = errors;
		const validator = validatorExtras.validator;
		const { promisify } = require$$0$1;
		class InstanceValidator {
		  constructor(modelInstance, options) {
		    options = {
		      // assign defined and default options
		      hooks: true,
		      ...options
		    };
		    if (options.fields && !options.skip) {
		      options.skip = _.difference(Array.from(modelInstance.constructor.modelDefinition.attributes.keys()), options.fields);
		    } else {
		      options.skip ??= [];
		    }
		    this.options = options;
		    this.modelInstance = modelInstance;
		    this.validator = validator;
		    this.errors = [];
		    this.inProgress = false;
		  }
		  /**
		   * The main entry point for the Validation module, invoke to start the dance.
		   *
		   * @returns {Promise}
		   * @private
		   */
		  async _validate() {
		    if (this.inProgress) {
		      throw new Error("Validations already in progress.");
		    }
		    this.inProgress = true;
		    await Promise.all([
		      this._perAttributeValidators(),
		      this._customValidators()
		    ]);
		    if (this.errors.length > 0) {
		      throw new sequelizeError.ValidationError(null, this.errors);
		    }
		  }
		  /**
		   * Invoke the Validation sequence and run validation hooks if defined
		   *   - Before Validation Model Hooks
		   *   - Validation
		   *   - On validation success: After Validation Model Hooks
		   *   - On validation failure: Validation Failed Model Hooks
		   *
		   * @returns {Promise}
		   * @private
		   */
		  async validate() {
		    return await (this.options.hooks ? this._validateAndRunHooks() : this._validate());
		  }
		  /**
		   * Invoke the Validation sequence and run hooks
		   *   - Before Validation Model Hooks
		   *   - Validation
		   *   - On validation success: After Validation Model Hooks
		   *   - On validation failure: Validation Failed Model Hooks
		   *
		   * @returns {Promise}
		   * @private
		   */
		  async _validateAndRunHooks() {
		    await this.modelInstance.constructor.hooks.runAsync("beforeValidate", this.modelInstance, this.options);
		    try {
		      await this._validate();
		    } catch (error) {
		      const newError = await this.modelInstance.constructor.hooks.runAsync("validationFailed", this.modelInstance, this.options, error);
		      throw newError || error;
		    }
		    await this.modelInstance.constructor.hooks.runAsync("afterValidate", this.modelInstance, this.options);
		    return this.modelInstance;
		  }
		  /**
		   * Will run all the validators defined per attribute (built-in validators and custom validators)
		   *
		   * @returns {Promise<Array>}
		   * @private
		   */
		  async _perAttributeValidators() {
		    const validators = [];
		    const { attributes } = this.modelInstance.constructor.modelDefinition;
		    for (const attribute of attributes.values()) {
		      const attrName = attribute.attributeName;
		      if (this.options.skip.includes(attrName)) {
		        continue;
		      }
		      const value = this.modelInstance.dataValues[attrName];
		      if (value instanceof import_base_sql_expression.BaseSqlExpression) {
		        continue;
		      }
		      if (!attribute._autoGenerated && !attribute.autoIncrement) {
		        this._validateSchema(attribute, attrName, value);
		      }
		      if (attribute.validate) {
		        validators.push(this._singleAttrValidate(value, attrName, attribute.allowNull));
		      }
		    }
		    return await Promise.all(validators);
		  }
		  /**
		   * Will run all the custom validators defined in the model's options.
		   *
		   * @returns {Promise<Array>}
		   * @private
		   */
		  async _customValidators() {
		    const validators = [];
		    const validateOptions = this.modelInstance.constructor.options.validate;
		    for (const validatorName of (0, import_object.getAllOwnKeys)(validateOptions)) {
		      if (this.options.skip.includes(validatorName)) {
		        continue;
		      }
		      const validator2 = validateOptions[validatorName];
		      const valprom = this._invokeCustomValidator(validator2, validatorName).catch(() => {
		      });
		      validators.push(valprom);
		    }
		    return await Promise.all(validators);
		  }
		  /**
		   * Validate a single attribute with all the defined built-in validators and custom validators.
		   *
		   * @private
		   *
		   * @param {*} value Anything.
		   * @param {string} attributeName The attribute name.
		   * @param {boolean} allowNull Whether or not the schema allows null values
		   *
		   * @returns {Promise} A promise, will always resolve, auto populates error on this.error local object.
		   */
		  async _singleAttrValidate(value, attributeName, allowNull) {
		    if (value == null && !allowNull) {
		      return;
		    }
		    const validators = [];
		    const attribute = this.modelInstance.constructor.modelDefinition.attributes.get(attributeName);
		    _.forIn(attribute.validate, (test, validatorType) => {
		      if (["isUrl", "isURL", "isEmail"].includes(validatorType)) {
		        if (typeof test === "object" && test !== null && test.msg) {
		          test = {
		            msg: test.msg
		          };
		        } else if (test === true) {
		          test = {};
		        }
		      }
		      if (typeof test === "function") {
		        validators.push(this._invokeCustomValidator(test, validatorType, true, value, attributeName));
		        return;
		      }
		      if (value === null || value === void 0) {
		        return;
		      }
		      const validatorPromise = this._invokeBuiltinValidator(value, test, validatorType, attributeName);
		      validatorPromise.catch(() => {
		      });
		      validators.push(validatorPromise);
		    });
		    return Promise.all(validators.map((validator2) => validator2.catch((error) => {
		      const isBuiltIn = Boolean(error.validatorName);
		      this._pushError(isBuiltIn, attributeName, error, value, error.validatorName, error.validatorArgs);
		    })));
		  }
		  /**
		   * Prepare and invoke a custom validator.
		   *
		   * @private
		   *
		   * @param {Function} validator The custom validator.
		   * @param {string} validatorType the custom validator type (name).
		   * @param {boolean} optAttrDefined Set to true if custom validator was defined from the attribute
		   * @param {*} optValue value for attribute
		   * @param {string} optField field for attribute
		   *
		   * @returns {Promise} A promise.
		   */
		  async _invokeCustomValidator(validator2, validatorType, optAttrDefined, optValue, optField) {
		    let isAsync = false;
		    const validatorArity = validator2.length;
		    let asyncArity = 1;
		    let errorKey = validatorType;
		    let invokeArgs;
		    if (optAttrDefined) {
		      asyncArity = 2;
		      invokeArgs = optValue;
		      errorKey = optField;
		    }
		    if (validatorArity === asyncArity) {
		      isAsync = true;
		    }
		    if (isAsync) {
		      try {
		        if (optAttrDefined) {
		          return await promisify(validator2.bind(this.modelInstance, invokeArgs))();
		        }
		        return await promisify(validator2.bind(this.modelInstance))();
		      } catch (error) {
		        return this._pushError(false, errorKey, error, optValue, validatorType);
		      }
		    }
		    try {
		      return await validator2.call(this.modelInstance, invokeArgs);
		    } catch (error) {
		      return this._pushError(false, errorKey, error, optValue, validatorType);
		    }
		  }
		  /**
		   * Prepare and invoke a build-in validator.
		   *
		   * @private
		   *
		   * @param {*} value Anything.
		   * @param {*} test The test case.
		   * @param {string} validatorType One of known to Sequelize validators.
		   * @param {string} field The field that is being validated
		   *
		   * @returns {object} An object with specific keys to invoke the validator.
		   */
		  async _invokeBuiltinValidator(value, test, validatorType, field) {
		    const valueString = String(value);
		    if (typeof validator[validatorType] !== "function") {
		      throw new TypeError(`Invalid validator function: ${validatorType}`);
		    }
		    const validatorArgs = this._extractValidatorArgs(test, validatorType, field);
		    if (!validator[validatorType](valueString, ...validatorArgs)) {
		      throw Object.assign(new Error(test.msg || `Validation ${validatorType} on ${field} failed`), { validatorName: validatorType, validatorArgs });
		    }
		  }
		  /**
		   * Will extract arguments for the validator.
		   *
		   * @param {*} test The test case.
		   * @param {string} validatorType One of known to Sequelize validators.
		   * @param {string} field The field that is being validated.
		   *
		   * @private
		   */
		  _extractValidatorArgs(test, validatorType, field) {
		    let validatorArgs = test.args || test;
		    const isLocalizedValidator = typeof validatorArgs !== "string" && ["isAlpha", "isAlphanumeric", "isMobilePhone"].includes(validatorType);
		    if (!Array.isArray(validatorArgs)) {
		      if (validatorType === "isImmutable") {
		        validatorArgs = [validatorArgs, field, this.modelInstance];
		      } else if (isLocalizedValidator || validatorType === "isIP") {
		        validatorArgs = [];
		      } else {
		        validatorArgs = [validatorArgs];
		      }
		    } else {
		      validatorArgs = [...validatorArgs];
		    }
		    return validatorArgs;
		  }
		  /**
		   * Will validate a single field against its schema definition (isnull).
		   *
		   * @param {object} attribute As defined in the Schema.
		   * @param {string} attributeName The field name.
		   * @param {*} value anything.
		   *
		   * @private
		   */
		  _validateSchema(attribute, attributeName, value) {
		    var _a;
		    if (attribute.allowNull === false && value == null) {
		      const association = Object.values(this.modelInstance.constructor.associations).find((association2) => association2 instanceof import_belongs_to.BelongsTo && association2.foreignKey === attribute.fieldName);
		      if (!association || !this.modelInstance.get(association.as)) {
		        const modelDefinition = this.modelInstance.constructor.modelDefinition;
		        const validators = (_a = modelDefinition.attributes.get(attributeName)) == null ? void 0 : _a.validate;
		        const errMsg = _.get(validators, "notNull.msg", `${this.modelInstance.constructor.name}.${attributeName} cannot be null`);
		        this.errors.push(new sequelizeError.ValidationErrorItem(
		          errMsg,
		          "notNull violation",
		          // sequelizeError.ValidationErrorItem.Origins.CORE,
		          attributeName,
		          value,
		          this.modelInstance,
		          "is_null"
		        ));
		      }
		    }
		    const type = attribute.type;
		    if (value != null && !(value instanceof import_base_sql_expression.BaseSqlExpression) && type instanceof import_data_types.AbstractDataType) {
		      const error = (0, import_data_types_utils.validateDataType)(value, type, attributeName, this.modelInstance);
		      if (error) {
		        this.errors.push(error);
		      }
		    }
		  }
		  /**
		   * Signs all errors retaining the original.
		   *
		   * @param {boolean}       isBuiltin   - Determines if error is from builtin validator.
		   * @param {string}        errorKey    - name of invalid attribute.
		   * @param {Error|string}  rawError    - The original error.
		   * @param {string|number} value       - The data that triggered the error.
		   * @param {string}        fnName      - Name of the validator, if any
		   * @param {Array}         fnArgs      - Arguments for the validator [function], if any
		   *
		   * @private
		   */
		  _pushError(isBuiltin, errorKey, rawError, value, fnName, fnArgs) {
		    const message = rawError.message || rawError || "Validation error";
		    const error = new sequelizeError.ValidationErrorItem(
		      message,
		      "Validation error",
		      // sequelizeError.ValidationErrorItem.Origins.FUNCTION,
		      errorKey,
		      value,
		      this.modelInstance,
		      fnName,
		      isBuiltin ? fnName : void 0,
		      isBuiltin ? fnArgs : void 0
		    );
		    error[InstanceValidator.RAW_KEY_NAME] = rawError;
		    this.errors.push(error);
		  }
		}
		InstanceValidator.RAW_KEY_NAME = "original";
		
		return instanceValidator;
	}

	var model;
	var hasRequiredModel;

	function requireModel () {
		if (hasRequiredModel) return model;
		hasRequiredModel = 1;
		var __create = Object.create;
		var __defProp = Object.defineProperty;
		var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
		var __getOwnPropNames = Object.getOwnPropertyNames;
		var __getProtoOf = Object.getPrototypeOf;
		var __hasOwnProp = Object.prototype.hasOwnProperty;
		var __export = (target, all) => {
		  for (var name in all)
		    __defProp(target, name, { get: all[name], enumerable: true });
		};
		var __copyProps = (to, from, except, desc) => {
		  if (from && typeof from === "object" || typeof from === "function") {
		    for (let key of __getOwnPropNames(from))
		      if (!__hasOwnProp.call(to, key) && key !== except)
		        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
		  }
		  return to;
		};
		var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
		  // If the importer is in node compatibility mode or this is not an ESM
		  // file that has been converted to a CommonJS file using a Babel-
		  // compatible transform (i.e. "__esModule" has not been set), then set
		  // "default" to the CommonJS "module.exports" for node compatibility.
		  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
		  mod
		));
		var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
		var model_exports = {};
		__export(model_exports, {
		  Model: () => Model
		});
		model = __toCommonJS(model_exports);
		var import_omit = __toESM(requireOmit());
		var import_data_types = requireDataTypes$8();
		var import_base_sql_expression = baseSqlExpression;
		var import_array = requireArray();
		var import_deprecations = deprecations;
		var import_dialect = requireDialect();
		var import_format = requireFormat();
		var import_iterators = requireIterators();
		var import_object = object$1;
		var import_query_builder_utils = requireQueryBuilderUtils();
		var import_model_typescript = requireModelTypescript();
		var import_model_utils = requireModelUtils();
		var import_associations = requireAssociations();
		var import_helpers = requireHelpers();
		var import_operators = operators;
		var import_model_internals = requireModelInternals();
		var import_query_types = queryTypes;
		var import_where = where$1;
		const assert = require$$0$4;
		const NodeUtil = require$$0$1;
		const _ = lodashExports;
		const Dottie = requireDottie();
		const { logger } = requireLogger();
		const { InstanceValidator } = requireInstanceValidator();
		const sequelizeErrors = errors;
		const DataTypes = dataTypes$8;
		const validQueryKeywords = /* @__PURE__ */ new Set([
		  "where",
		  "attributes",
		  "paranoid",
		  "include",
		  "order",
		  "limit",
		  "offset",
		  "transaction",
		  "lock",
		  "raw",
		  "logging",
		  "benchmark",
		  "having",
		  "searchPath",
		  "rejectOnEmpty",
		  "plain",
		  "scope",
		  "group",
		  "through",
		  "defaults",
		  "distinct",
		  "primary",
		  "exception",
		  "type",
		  "hooks",
		  "force",
		  "name"
		]);
		const nonCascadingOptions = ["include", "attributes", "originalAttributes", "order", "where", "limit", "offset", "plain", "group", "having"];
		const CONSTRUCTOR_SECRET = Symbol("model-constructor-secret");
		class Model extends import_model_typescript.ModelTypeScript {
		  /**
		   * Builds a new model instance.
		   *
		   * Cannot be used directly. Use {@link Model.build} instead.
		   *
		   * @param {object}  [values={}] an object of key value pairs
		   * @param {object}  [options] instance construction options
		   * @param {boolean} [options.raw=false] If set to true, values will ignore field and virtual setters.
		   * @param {boolean} [options.isNewRecord=true] Is this a new record
		   * @param {Array}   [options.include] an array of include options - Used to build prefetched/included model instances. See
		   *   `set`
		   * @param {symbol}  secret Secret used to ensure Model.build is used instead of new Model(). Don't forget to pass it up if
		   *   you define a custom constructor.
		   */
		  constructor(values = {}, options = {}, secret) {
		    super();
		    if (secret !== CONSTRUCTOR_SECRET) {
		      (0, import_deprecations.noNewModel)();
		    }
		    this.constructor.assertIsInitialized();
		    options = {
		      isNewRecord: true,
		      _schema: this.constructor.modelDefinition.table.schema,
		      _schemaDelimiter: this.constructor.modelDefinition.table.delimiter,
		      ...options,
		      model: this.constructor
		    };
		    if (options.attributes) {
		      options.attributes = options.attributes.map((attribute) => Array.isArray(attribute) ? attribute[1] : attribute);
		    }
		    if (!options.includeValidated) {
		      this.constructor._conformIncludes(options, this.constructor);
		      if (options.include) {
		        this.constructor._expandIncludeAll(options);
		        (0, import_model_internals._validateIncludedElements)(options);
		      }
		    }
		    this.dataValues = {};
		    this._previousDataValues = {};
		    this.uniqno = 1;
		    this._changed = /* @__PURE__ */ new Set();
		    this._options = (0, import_omit.default)(options, ["comesFromDatabase"]);
		    this.isNewRecord = options.isNewRecord;
		    this._initValues(values, options);
		  }
		  _initValues(values, options) {
		    values = { ...values };
		    if (options.isNewRecord) {
		      const modelDefinition = this.constructor.modelDefinition;
		      const defaults2 = modelDefinition.defaultValues.size > 0 ? _.mapValues((0, import_object.getObjectFromMap)(modelDefinition.defaultValues), (getDefaultValue) => {
		        const value = getDefaultValue();
		        return value && value instanceof import_base_sql_expression.BaseSqlExpression ? value : _.cloneDeep(value);
		      }) : /* @__PURE__ */ Object.create(null);
		      if (modelDefinition.primaryKeysAttributeNames.size > 0) {
		        for (const primaryKeyAttribute of modelDefinition.primaryKeysAttributeNames) {
		          if (!Object.hasOwn(defaults2, primaryKeyAttribute)) {
		            defaults2[primaryKeyAttribute] = null;
		          }
		        }
		      }
		      const { createdAt: createdAtAttrName, updatedAt: updatedAtAttrName, deletedAt: deletedAtAttrName } = modelDefinition.timestampAttributeNames;
		      if (createdAtAttrName && defaults2[createdAtAttrName]) {
		        this.dataValues[createdAtAttrName] = (0, import_dialect.toDefaultValue)(defaults2[createdAtAttrName]);
		        delete defaults2[createdAtAttrName];
		      }
		      if (updatedAtAttrName && defaults2[updatedAtAttrName]) {
		        this.dataValues[updatedAtAttrName] = (0, import_dialect.toDefaultValue)(defaults2[updatedAtAttrName]);
		        delete defaults2[updatedAtAttrName];
		      }
		      if (deletedAtAttrName && defaults2[deletedAtAttrName]) {
		        this.dataValues[deletedAtAttrName] = (0, import_dialect.toDefaultValue)(defaults2[deletedAtAttrName]);
		        delete defaults2[deletedAtAttrName];
		      }
		      for (const key in defaults2) {
		        if (values[key] === void 0) {
		          this.set(key, (0, import_dialect.toDefaultValue)(defaults2[key]), { raw: true });
		          delete values[key];
		        }
		      }
		    }
		    this.set(values, options);
		  }
		  // validateIncludedElements should have been called before this method
		  static _paranoidClause(model, options = {}) {
		    if (options.include) {
		      for (const include of options.include) {
		        this._paranoidClause(include.model, include);
		      }
		    }
		    if (_.get(options, "groupedLimit.on.through.model.options.paranoid")) {
		      const throughModel = _.get(options, "groupedLimit.on.through.model");
		      if (throughModel) {
		        options.groupedLimit.through = this._paranoidClause(throughModel, options.groupedLimit.through);
		      }
		    }
		    if (!model.options.timestamps || !model.options.paranoid || options.paranoid === false) {
		      return options;
		    }
		    const modelDefinition = model.modelDefinition;
		    const deletedAtCol = modelDefinition.timestampAttributeNames.deletedAt;
		    const deletedAtAttribute = modelDefinition.attributes.get(deletedAtCol);
		    const deletedAtObject = /* @__PURE__ */ Object.create(null);
		    let deletedAtDefaultValue = deletedAtAttribute.defaultValue ?? null;
		    deletedAtDefaultValue = deletedAtDefaultValue || {
		      [import_operators.Op.eq]: null
		    };
		    deletedAtObject[deletedAtAttribute.field || deletedAtCol] = deletedAtDefaultValue;
		    if ((0, import_query_builder_utils.isWhereEmpty)(options.where)) {
		      options.where = deletedAtObject;
		    } else {
		      options.where = { [import_operators.Op.and]: [deletedAtObject, options.where] };
		    }
		    return options;
		  }
		  /**
		   * Returns the attributes of the model.
		   *
		   * @returns {object|any}
		  */
		  static getAttributes() {
		    return (0, import_object.getObjectFromMap)(this.modelDefinition.attributes);
		  }
		  get validators() {
		    throw new Error("Model#validators has been removed. Use the validators option on Model.modelDefinition.attributes instead.");
		  }
		  static get _schema() {
		    throw new Error("Model._schema has been removed. Use Model.modelDefinition instead.");
		  }
		  static get _schemaDelimiter() {
		    throw new Error("Model._schemaDelimiter has been removed. Use Model.modelDefinition instead.");
		  }
		  static _getAssociationDebugList() {
		    return `The following associations are defined on "${this.name}": ${Object.keys(this.associations).map((associationName) => `"${associationName}"`).join(", ")}`;
		  }
		  static getAssociation(associationName) {
		    if (!Object.hasOwn(this.associations, associationName)) {
		      throw new Error(`Association with alias "${associationName}" does not exist on ${this.name}.
${this._getAssociationDebugList()}`);
		    }
		    return this.associations[associationName];
		  }
		  static _getAssociationsByModel(model) {
		    const matchingAssociations = [];
		    for (const associationName of Object.keys(this.associations)) {
		      const association = this.associations[associationName];
		      if (!(0, import_model_utils.isSameInitialModel)(association.target, model)) {
		        continue;
		      }
		      matchingAssociations.push(association);
		    }
		    return matchingAssociations;
		  }
		  static _normalizeIncludes(options, associationOwner) {
		    this._conformIncludes(options, associationOwner);
		    this._expandIncludeAll(options, associationOwner);
		  }
		  static _conformIncludes(options, associationOwner) {
		    if (!options.include) {
		      return;
		    }
		    if (!Array.isArray(options.include)) {
		      options.include = [options.include];
		    } else if (options.include.length === 0) {
		      delete options.include;
		      return;
		    }
		    options.include = options.include.map((include) => this._conformInclude(include, associationOwner));
		  }
		  static _conformInclude(include, associationOwner) {
		    if (!include) {
		      (0, import_model_internals.throwInvalidInclude)(include);
		    }
		    if (!associationOwner || !(0, import_model_utils.isModelStatic)(associationOwner)) {
		      throw new TypeError(`Sequelize sanity check: associationOwner must be a model subclass. Got ${NodeUtil.inspect(associationOwner)} (${typeof associationOwner})`);
		    }
		    if (include._pseudo) {
		      return include;
		    }
		    if (include.all) {
		      this._conformIncludes(include, associationOwner);
		      return include;
		    }
		    if (!_.isPlainObject(include)) {
		      if ((0, import_model_utils.isModelStatic)(include)) {
		        include = {
		          model: include
		        };
		      } else {
		        include = {
		          association: include
		        };
		      }
		    } else {
		      include = { ...include };
		    }
		    if (include.as && !include.association) {
		      include.association = include.as;
		    }
		    if (!include.association) {
		      include.association = associationOwner.getAssociationWithModel(include.model, include.as);
		    } else if (typeof include.association === "string") {
		      include.association = associationOwner.getAssociation(include.association);
		    } else {
		      if (!(include.association instanceof import_associations.Association)) {
		        (0, import_model_internals.throwInvalidInclude)(include);
		      }
		      if (!(0, import_model_utils.isSameInitialModel)(include.association.source, associationOwner)) {
		        throw new Error(`Invalid Include received: the specified association "${include.association.as}" is not defined on model "${associationOwner.name}". It is owned by model "${include.association.source.name}".
${associationOwner._getAssociationDebugList()}`);
		      }
		    }
		    if (!include.model) {
		      include.model = include.association.target;
		    }
		    if (!(0, import_model_utils.isSameInitialModel)(include.model, include.association.target)) {
		      throw new TypeError(`Invalid Include received: the specified "model" option ("${include.model.name}") does not match the target ("${include.association.target.name}") of the "${include.association.as}" association.`);
		    }
		    if (!include.as) {
		      include.as = include.association.as;
		    }
		    this._conformIncludes(include, include.model);
		    return include;
		  }
		  static _expandIncludeAllElement(includes, include) {
		    let { all, nested, ...includeOptions } = include;
		    if (Object.keys(includeOptions).length > 0) {
		      throw new Error('"include: { all: true }" does not allow extra options (except for "nested") because they are unsafe. Select includes one by one if you want to specify more options.');
		    }
		    if (all !== true) {
		      if (!Array.isArray(all)) {
		        all = [all];
		      }
		      const validTypes = {
		        BelongsTo: true,
		        HasOne: true,
		        HasMany: true,
		        One: ["BelongsTo", "HasOne"],
		        Has: ["HasOne", "HasMany"],
		        Many: ["HasMany"]
		      };
		      for (let i = 0; i < all.length; i++) {
		        const type = all[i];
		        if (type === "All") {
		          all = true;
		          break;
		        }
		        const types = validTypes[type];
		        if (!types) {
		          throw new sequelizeErrors.EagerLoadingError(`include all '${type}' is not valid - must be BelongsTo, HasOne, HasMany, One, Has, Many or All`);
		        }
		        if (types !== true) {
		          all.splice(i, 1);
		          i--;
		          for (const type_ of types) {
		            if (!all.includes(type_)) {
		              all.unshift(type_);
		              i++;
		            }
		          }
		        }
		      }
		    }
		    const visitedModels = [];
		    const addAllIncludes = (parent, includes2) => {
		      _.forEach(parent.associations, (association) => {
		        if (all !== true && !all.includes(association.associationType)) {
		          return;
		        }
		        if (association.parentAssociation instanceof import_associations.BelongsToMany && association === association.parentAssociation.fromSourceToThroughOne) {
		          return;
		        }
		        if (includes2.some((existingInclude) => existingInclude.association === association)) {
		          return;
		        }
		        const newInclude = { association };
		        const model = association.target;
		        if (nested && visitedModels.includes(model)) {
		          return;
		        }
		        const normalizedNewInclude = this._conformInclude(newInclude, parent);
		        includes2.push(normalizedNewInclude);
		        if (nested) {
		          visitedModels.push(parent);
		          const subIncludes = [];
		          addAllIncludes(model, subIncludes);
		          visitedModels.pop();
		          if (subIncludes.length > 0) {
		            normalizedNewInclude.include = subIncludes;
		          }
		        }
		      });
		    };
		    addAllIncludes(this, includes);
		  }
		  static _validateIncludedElement(include, tableNames, options) {
		    tableNames[include.model.getTableName()] = true;
		    if (include.attributes && !options.raw) {
		      include.model._expandAttributes(include);
		      include.originalAttributes = include.model._injectDependentVirtualAttributes(include.attributes);
		      include = (0, import_format.mapFinderOptions)(include, include.model);
		      if (include.attributes.length > 0) {
		        _.each(include.model.primaryKeys, (attr, key) => {
		          if (!include.attributes.some((includeAttr) => {
		            if (attr.field !== key) {
		              return Array.isArray(includeAttr) && includeAttr[0] === attr.field && includeAttr[1] === key;
		            }
		            return includeAttr === key;
		          })) {
		            include.attributes.unshift(key);
		          }
		        });
		      }
		    } else {
		      include = (0, import_format.mapFinderOptions)(include, include.model);
		    }
		    if (include._pseudo) {
		      if (!include.attributes) {
		        include.attributes = Object.keys(include.model.tableAttributes);
		      }
		      return (0, import_format.mapFinderOptions)(include, include.model);
		    }
		    const association = include.association || this.getAssociationWithModel(include.model, include.as);
		    include.association = association;
		    include.as ||= association.as;
		    if (association instanceof import_associations.BelongsToMany) {
		      if (!include.include) {
		        include.include = [];
		      }
		      const through = include.association.through;
		      include.through = _.defaults(include.through || {}, {
		        model: through.model,
		        // Through Models are a special case: we always want to load them as the name of the model, not the name of the association
		        as: through.model.name,
		        association: {
		          isSingleAssociation: true
		        },
		        _pseudo: true,
		        parent: include
		      });
		      if (through.scope) {
		        include.through.where = include.through.where ? { [import_operators.Op.and]: [include.through.where, through.scope] } : through.scope;
		      }
		      include.include.push(include.through);
		      tableNames[through.tableName] = true;
		    }
		    let model;
		    if (include.model.scoped === true) {
		      model = include.model;
		    } else {
		      model = include.association.target.name === include.model.name ? include.association.target : include.association.source;
		    }
		    model._injectScope(include);
		    if (!include.attributes) {
		      include.attributes = Object.keys(include.model.tableAttributes);
		    }
		    include = (0, import_format.mapFinderOptions)(include, include.model);
		    if (include.required === void 0) {
		      include.required = Boolean(include.where);
		    }
		    if (include.association.scope) {
		      include.where = include.where ? { [import_operators.Op.and]: [include.where, include.association.scope] } : include.association.scope;
		    }
		    if (include.limit && include.separate === void 0) {
		      include.separate = true;
		    }
		    if (include.separate === true) {
		      if (!(include.association instanceof import_associations.HasMany)) {
		        throw new TypeError("Only HasMany associations support include.separate");
		      }
		      include.duplicating = false;
		      if (options.attributes && options.attributes.length > 0 && !_.flattenDepth(options.attributes, 2).includes(association.sourceKey)) {
		        options.attributes.push(association.sourceKey);
		      }
		      if (include.attributes && include.attributes.length > 0 && !_.flattenDepth(include.attributes, 2).includes(association.foreignKey)) {
		        include.attributes.push(association.foreignKey);
		      }
		    }
		    if (Object.hasOwn(include, "include")) {
		      (0, import_model_internals._validateIncludedElements)(include, tableNames);
		    }
		    return include;
		  }
		  static _expandIncludeAll(options, associationOwner) {
		    const includes = options.include;
		    if (!includes) {
		      return;
		    }
		    for (let index = 0; index < includes.length; index++) {
		      const include = includes[index];
		      if (include.all) {
		        includes.splice(index, 1);
		        index--;
		        associationOwner._expandIncludeAllElement(includes, include);
		      }
		    }
		    for (const include of includes) {
		      this._expandIncludeAll(include, include.model);
		    }
		  }
		  static _baseMerge(...args) {
		    _.assignWith(...args);
		    return args[0];
		  }
		  static _mergeFunction(objValue, srcValue, key) {
		    if (key === "include") {
		      return (0, import_model_internals.combineIncludes)(objValue, srcValue);
		    }
		    if (Array.isArray(objValue) && Array.isArray(srcValue)) {
		      return _.union(objValue, srcValue);
		    }
		    if (["where", "having"].includes(key)) {
		      return combineWheresWithAnd(objValue, srcValue);
		    } else if (key === "attributes" && _.isPlainObject(objValue) && _.isPlainObject(srcValue)) {
		      return _.assignWith(objValue, srcValue, (objValue2, srcValue2) => {
		        if (Array.isArray(objValue2) && Array.isArray(srcValue2)) {
		          return _.union(objValue2, srcValue2);
		        }
		      });
		    }
		    if (srcValue) {
		      return (0, import_object.cloneDeep)(srcValue, true);
		    }
		    return srcValue === void 0 ? objValue : srcValue;
		  }
		  static _assignOptions(...args) {
		    return this._baseMerge(...args, this._mergeFunction);
		  }
		  static _defaultsOptions(target, opts) {
		    return this._baseMerge(target, opts, (srcValue, objValue, key) => {
		      return this._mergeFunction(objValue, srcValue, key);
		    });
		  }
		  /**
		   * Remove attribute from model definition.
		   * Only use if you know what you're doing.
		   *
		   * @param {string} attribute name of attribute to remove
		   */
		  static removeAttribute(attribute) {
		    delete this.modelDefinition.rawAttributes[attribute];
		    this.modelDefinition.refreshAttributes();
		  }
		  /**
		   * Merges new attributes with the existing ones.
		   * Only use if you know what you're doing.
		   *
		   * Warning: Attributes are not replaced, they are merged.
		   *
		   * @param {object} newAttributes
		   */
		  static mergeAttributesDefault(newAttributes) {
		    const rawAttributes = this.modelDefinition.rawAttributes;
		    (0, import_object.mergeDefaults)(rawAttributes, newAttributes);
		    this.modelDefinition.refreshAttributes();
		    return rawAttributes;
		  }
		  /**
		   * Sync this Model to the DB, that is create the table.
		   * See {@link Sequelize#sync} for options
		   *
		   * @param {object} [options] sync options
		   *
		   * @returns {Promise<Model>}
		   */
		  static async sync(options) {
		    options = { ...this.options, ...options };
		    options.hooks = options.hooks === void 0 ? true : Boolean(options.hooks);
		    const modelDefinition = this.modelDefinition;
		    const physicalAttributes = (0, import_object.getObjectFromMap)(modelDefinition.physicalAttributes);
		    const columnDefs = (0, import_object.getObjectFromMap)(modelDefinition.columns);
		    if (options.hooks) {
		      await this.hooks.runAsync("beforeSync", options);
		    }
		    const tableName = { ...this.table };
		    if (options.schema && options.schema !== tableName.schema) {
		      if (tableName.schema !== this.sequelize.dialect.getDefaultSchema()) {
		        throw new Error(`The "schema" option in sync can only be used on models that do not already specify a schema, or that are using the default schema. Model ${this.name} already specifies schema ${tableName.schema}`);
		      }
		      tableName.schema = options.schema;
		    }
		    let tableExists;
		    if (options.force) {
		      await this.drop(options);
		      tableExists = false;
		    } else {
		      tableExists = await this.queryInterface.tableExists(tableName, options);
		    }
		    if (!tableExists) {
		      await this.queryInterface.createTable(tableName, physicalAttributes, options, this);
		    } else {
		      await this.queryInterface.ensureEnums(tableName, physicalAttributes, options, this);
		    }
		    if (tableExists && options.alter) {
		      const tableInfos = await Promise.all([
		        this.queryInterface.describeTable(tableName, options),
		        this.queryInterface.getForeignKeyReferencesForTable(tableName, options)
		      ]);
		      const columns = tableInfos[0];
		      const foreignKeyReferences = tableInfos[1];
		      const removedConstraints = {};
		      for (const columnName in physicalAttributes) {
		        if (!Object.hasOwn(physicalAttributes, columnName)) {
		          continue;
		        }
		        if (!columns[columnName] && !columns[physicalAttributes[columnName].field]) {
		          await this.queryInterface.addColumn(tableName, physicalAttributes[columnName].field || columnName, physicalAttributes[columnName], options);
		        }
		      }
		      if (options.alter === true || typeof options.alter === "object" && options.alter.drop !== false) {
		        for (const columnName in columns) {
		          if (!Object.hasOwn(columns, columnName)) {
		            continue;
		          }
		          const currentAttribute = columnDefs[columnName];
		          if (!currentAttribute) {
		            await this.queryInterface.removeColumn(tableName, columnName, options);
		            continue;
		          }
		          if (currentAttribute.primaryKey) {
		            continue;
		          }
		          const references = currentAttribute.references;
		          if (currentAttribute.references) {
		            let database = this.sequelize.config.database;
		            const schema = tableName.schema;
		            if (schema && this.sequelize.options.dialect === "mariadb") {
		              database = schema;
		            }
		            const foreignReferenceSchema = currentAttribute.references.table.schema;
		            const foreignReferenceTableName = typeof references.table === "object" ? references.table.tableName : references.table;
		            for (const foreignKeyReference of foreignKeyReferences) {
		              const constraintName = foreignKeyReference.constraintName;
		              if (Boolean(constraintName) && foreignKeyReference.tableCatalog === database && (schema ? foreignKeyReference.tableSchema === schema : true) && foreignKeyReference.referencedTableName === foreignReferenceTableName && foreignKeyReference.referencedColumnName === references.key && (foreignReferenceSchema ? foreignKeyReference.referencedTableSchema === foreignReferenceSchema : true) && !removedConstraints[constraintName] || this.sequelize.options.dialect === "ibmi") {
		                await this.queryInterface.removeConstraint(tableName, constraintName, options);
		                removedConstraints[constraintName] = true;
		              }
		            }
		          }
		          await this.queryInterface.changeColumn(tableName, columnName, currentAttribute, options);
		        }
		      }
		    }
		    const existingIndexes = await this.queryInterface.showIndex(tableName, options);
		    const missingIndexes = this.getIndexes().filter((item1) => !existingIndexes.some((item2) => item1.name === item2.name)).sort((index1, index2) => {
		      if (this.sequelize.options.dialect === "postgres") {
		        if (index1.concurrently === true) {
		          return 1;
		        }
		        if (index2.concurrently === true) {
		          return -1;
		        }
		      }
		      return 0;
		    });
		    for (const index of missingIndexes) {
		      await this.queryInterface.addIndex(tableName, index, options);
		    }
		    if (options.hooks) {
		      await this.hooks.runAsync("afterSync", options);
		    }
		    return this;
		  }
		  /**
		   * Drop the table represented by this Model
		   *
		   * @param {object} [options] drop options
		   * @returns {Promise}
		   */
		  static async drop(options) {
		    return await this.queryInterface.dropTable(this.getTableName(options), options);
		  }
		  /**
		   * @param {object | string} schema
		   * @deprecated use {@link Sequelize#dropSchema} or {@link QueryInterface#dropSchema}
		   */
		  // TODO [>=2023-01-01]: remove me in Sequelize >= 8
		  static async dropSchema(schema) {
		    (0, import_deprecations.noModelDropSchema)();
		    return await this.queryInterface.dropSchema(schema);
		  }
		  /**
		   * Returns a copy of this model with the corresponding table located in the specified schema.
		   *
		   * For postgres, this will actually place the schema in front of the table name (`"schema"."tableName"`),
		   * while the schema will be prepended to the table name for mysql and sqlite (`'schema.tablename'`).
		   *
		   * This method is intended for use cases where the same model is needed in multiple schemas.
		   * In such a use case it is important to call {@link Model.sync} (or use migrations!) for each model created by this method
		   * to ensure the models are created in the correct schema.
		   *
		   * If a single default schema per model is needed, set the {@link ModelOptions.schema} option instead.
		   *
		   * @param {string|object} schema The name of the schema
		   *
		   * @returns {Model}
		   */
		  static withSchema(schema) {
		    if (arguments.length > 1) {
		      throw new TypeError("Unlike Model.schema, Model.withSchema only accepts 1 argument which may be either a string or an option bag.");
		    }
		    const schemaOptions = typeof schema === "string" ? { schema } : schema;
		    schemaOptions.schema ||= this.sequelize.options.schema || this.sequelize.dialect.getDefaultSchema();
		    return this.getInitialModel()._withScopeAndSchema(schemaOptions, this._scope, this._scopeNames);
		  }
		  // TODO [>=2023-01-01]: remove in Sequelize 8
		  static schema(schema, options) {
		    (0, import_deprecations.schemaRenamedToWithSchema)();
		    return this.withSchema({
		      schema,
		      schemaDelimiter: typeof options === "string" ? options : options == null ? void 0 : options.schemaDelimiter
		    });
		  }
		  /**
		   * Returns the initial model, the one returned by {@link Model.init} or {@link Sequelize#define},
		   * before any scope or schema was applied.
		   */
		  static getInitialModel() {
		    return this._initialModel ?? this;
		  }
		  /**
		   * Add a new scope to the model
		   *
		   * This is especially useful for adding scopes with includes, when the model you want to
		   * include is not available at the time this model is defined.
		   *
		   * By default, this will throw an error if a scope with that name already exists.
		   * Use {@link AddScopeOptions.override} in the options object to silence this error.
		   *
		   * See {@link https://sequelize.org/docs/v7/other-topics/scopes/} to learn more about scopes.
		   *
		   * @param {string}          name The name of the scope. Use `defaultScope` to override the default scope
		   * @param {object|Function} scope scope or options
		   * @param {object}          [options] scope options
		   */
		  static addScope(name, scope, options) {
		    if (this !== this.getInitialModel()) {
		      throw new Error(`Model.addScope can only be called on the initial model. Use "${this.name}.getInitialModel()" to access the initial model.`);
		    }
		    options = { override: false, ...options };
		    if ((name === "defaultScope" && Object.keys(this.options.defaultScope).length > 0 || name in this.options.scopes) && options.override === false) {
		      throw new Error(`The scope ${name} already exists. Pass { override: true } as options to silence this error`);
		    }
		    if (name === "defaultScope") {
		      this.options.defaultScope = this._scope = scope;
		    } else {
		      this.options.scopes[name] = scope;
		    }
		  }
		  // TODO [>=2023-01-01]: remove in Sequelize 8
		  static scope(...options) {
		    (0, import_deprecations.scopeRenamedToWithScope)();
		    return this.withScope(...options);
		  }
		  /**
		   * Creates a copy of this model, with one or more scopes applied.
		   *
		   * See {@link https://sequelize.org/docs/v7/other-topics/scopes/} to learn more about scopes.
		   *
		   * @param {?Array|object|string} [scopes] The scope(s) to apply. Scopes can either be passed as consecutive arguments, or
		   *   as an array of arguments. To apply simple scopes and scope functions with no arguments, pass them as strings. For
		   *   scope function, pass an object, with a `method` property. The value can either be a string, if the method does not
		   *   take any arguments, or an array, where the first element is the name of the method, and consecutive elements are
		   *   arguments to that method. Pass null to remove all scopes, including the default.
		   *
		   * @example To invoke scope functions you can do
		   * ```ts
		   * Model.scope({ method: ['complexFunction', 'dan@sequelize.com', 42]}).findAll()
		   * // WHERE email like 'dan@sequelize.com%' AND access_level >= 42
		   * ```
		   *
		   * @returns {Model} A reference to the model, with the scope(s) applied. Calling scope again on the returned model will
		   *   clear the previous scope.
		   */
		  static withScope(...scopes) {
		    scopes = scopes.flat().filter(Boolean);
		    const initialModel = this.getInitialModel();
		    const mergedScope = {};
		    const scopeNames = [];
		    for (const option of scopes) {
		      let scope = null;
		      let scopeName = null;
		      if (_.isPlainObject(option)) {
		        if (option.method) {
		          if (Array.isArray(option.method) && Boolean(initialModel.options.scopes[option.method[0]])) {
		            scopeName = option.method[0];
		            scope = initialModel.options.scopes[scopeName].apply(initialModel, option.method.slice(1));
		          } else if (initialModel.options.scopes[option.method]) {
		            scopeName = option.method;
		            scope = initialModel.options.scopes[scopeName].apply(initialModel);
		          }
		        } else {
		          scope = option;
		        }
		      } else if (option === "defaultScope" && _.isPlainObject(initialModel.options.defaultScope)) {
		        scope = initialModel.options.defaultScope;
		      } else {
		        scopeName = option;
		        scope = initialModel.options.scopes[scopeName];
		        if (typeof scope === "function") {
		          scope = scope();
		        }
		      }
		      if (!scope) {
		        throw new sequelizeErrors.SequelizeScopeError(`"${this.name}.withScope()" has been called with an invalid scope: "${scopeName}" does not exist.`);
		      }
		      this._conformIncludes(scope, this);
		      this._assignOptions(mergedScope, (0, import_object.cloneDeep)(scope) ?? {});
		      scopeNames.push(scopeName ? scopeName : "defaultScope");
		    }
		    const modelDefinition = this.modelDefinition;
		    return initialModel._withScopeAndSchema({
		      schema: modelDefinition.table.schema || "",
		      schemaDelimiter: modelDefinition.table.delimiter || ""
		    }, mergedScope, scopeNames);
		  }
		  // TODO [>=2023-01-01]: remove in Sequelize 8
		  /**
		   * Returns a model without scope. The default scope is also omitted.
		   *
		   * See {@link https://sequelize.org/docs/v7/other-topics/scopes/} to learn more about scopes.
		   */
		  static unscoped() {
		    (0, import_deprecations.scopeRenamedToWithScope)();
		    return this.withoutScope();
		  }
		  /**
		   * Returns a model without scope. The default scope is also omitted.
		   *
		   * See {@link https://sequelize.org/docs/v7/other-topics/scopes/} to learn more about scopes.
		   */
		  static withoutScope() {
		    return this.withScope(null);
		  }
		  /**
		   * Returns the base model, with its initial scope.
		   */
		  static withInitialScope() {
		    const initialModel = this.getInitialModel();
		    const modelDefinition = this.modelDefinition;
		    const initialModelDefinition = initialModel.modelDefinition;
		    if (modelDefinition.table.schema !== initialModelDefinition.table.schema || modelDefinition.table.delimiter !== initialModelDefinition.table.delimiter) {
		      return initialModel.withSchema({
		        schema: modelDefinition.table.schema,
		        schemaDelimiter: modelDefinition.table.delimiter
		      });
		    }
		    return initialModel;
		  }
		  static _withScopeAndSchema(schemaOptions, mergedScope, scopeNames) {
		    if (!this._modelVariantRefs) {
		      this._modelVariantRefs = /* @__PURE__ */ new Set([new WeakRef(this)]);
		    }
		    const newTable = this.queryGenerator.extractTableDetails({
		      tableName: this.modelDefinition.table.tableName,
		      schema: schemaOptions.schema,
		      delimiter: schemaOptions.delimiter
		    });
		    for (const modelVariantRef of this._modelVariantRefs) {
		      const modelVariant = modelVariantRef.deref();
		      if (!modelVariant) {
		        this._modelVariantRefs.delete(modelVariantRef);
		        continue;
		      }
		      const variantTable = modelVariant.table;
		      if (variantTable.schema !== newTable.schema) {
		        continue;
		      }
		      if (variantTable.delimiter !== newTable.delimiter) {
		        continue;
		      }
		      if (!_.isEqual(modelVariant._scopeNames, scopeNames)) {
		        continue;
		      }
		      if (!_.isEqual(modelVariant._scope, mergedScope)) {
		        continue;
		      }
		      return modelVariant;
		    }
		    const clone = this._createModelVariant({
		      schema: schemaOptions.schema,
		      schemaDelimiter: schemaOptions.schemaDelimiter
		    });
		    this._modelVariantRefs.add(new WeakRef(clone));
		    clone._scope = mergedScope;
		    clone._scopeNames = scopeNames;
		    if (scopeNames.length !== 1 || scopeNames[0] !== "defaultScope") {
		      clone.scoped = true;
		    }
		    return clone;
		  }
		  static _createModelVariant(optionOverrides) {
		    const model = class extends this {
		    };
		    model._initialModel = this;
		    Object.defineProperty(model, "name", { value: this.name });
		    model.init(this.modelDefinition.rawAttributes, {
		      ...this.options,
		      ...optionOverrides
		    });
		    Object.assign(model.modelDefinition.associations, this.modelDefinition.associations);
		    return model;
		  }
		  /**
		   * Search for multiple instances.
		   * See {@link https://sequelize.org/docs/v7/core-concepts/model-querying-basics/} for more information about querying.
		   *
		   * __Example of a simple search:__
		   * ```js
		   * Model.findAll({
		   *   where: {
		   *     attr1: 42,
		   *     attr2: 'cake'
		   *   }
		   * })
		   * ```
		   *
		   * See also:
		   * - {@link Model.findOne}
		   * - {@link Sequelize#query}
		   *
		   * @param {object} options
		   * @returns {Promise} A promise that will resolve with the array containing the results of the SELECT query.
		   */
		  static async findAll(options) {
		    if (options !== void 0 && !_.isPlainObject(options)) {
		      throw new sequelizeErrors.QueryError("The argument passed to findAll must be an options object, use findByPk if you wish to pass a single primary key value");
		    }
		    if (options !== void 0 && options.attributes && !Array.isArray(options.attributes) && !_.isPlainObject(options.attributes)) {
		      throw new sequelizeErrors.QueryError("The attributes option must be an array of column names or an object");
		    }
		    const modelDefinition = this.modelDefinition;
		    this._warnOnInvalidOptions(options, Object.keys(modelDefinition.attributes));
		    const tableNames = {};
		    tableNames[this.getTableName(options)] = true;
		    options = (0, import_object.cloneDeep)(options) ?? {};
		    (0, import_model_internals.setTransactionFromCls)(options, this.sequelize);
		    _.defaults(options, { hooks: true, model: this });
		    options.rejectOnEmpty = Object.hasOwn(options, "rejectOnEmpty") ? options.rejectOnEmpty : this.options.rejectOnEmpty;
		    this._conformIncludes(options, this);
		    this._injectScope(options);
		    if (options.hooks) {
		      await this.hooks.runAsync("beforeFind", options);
		      this._conformIncludes(options, this);
		    }
		    this._expandAttributes(options);
		    this._expandIncludeAll(options, options.model);
		    if (options.hooks) {
		      await this.hooks.runAsync("beforeFindAfterExpandIncludeAll", options);
		    }
		    options.originalAttributes = this._injectDependentVirtualAttributes(options.attributes);
		    if (options.include) {
		      options.hasJoin = true;
		      (0, import_model_internals._validateIncludedElements)(options, tableNames);
		      if (options.attributes && !options.raw && this.primaryKeyAttribute && !options.attributes.includes(this.primaryKeyAttribute) && (!options.group || !options.hasSingleAssociation || options.hasMultiAssociation)) {
		        options.attributes = [this.primaryKeyAttribute].concat(options.attributes);
		      }
		    }
		    if (!options.attributes) {
		      options.attributes = Array.from(modelDefinition.attributes.keys());
		      options.originalAttributes = this._injectDependentVirtualAttributes(options.attributes);
		    }
		    (0, import_format.mapFinderOptions)(options, this);
		    options = this._paranoidClause(this, options);
		    if (options.hooks) {
		      await this.hooks.runAsync("beforeFindAfterOptions", options);
		    }
		    const selectOptions = { ...options, tableNames: Object.keys(tableNames) };
		    const results = await this.queryInterface.select(this, this.table, selectOptions);
		    if (options.hooks) {
		      await this.hooks.runAsync("afterFind", results, options);
		    }
		    if (_.isEmpty(results) && options.rejectOnEmpty) {
		      if (typeof options.rejectOnEmpty === "function") {
		        throw new options.rejectOnEmpty();
		      }
		      if (typeof options.rejectOnEmpty === "object") {
		        throw options.rejectOnEmpty;
		      }
		      throw new sequelizeErrors.EmptyResultError();
		    }
		    return await Model._findSeparate(results, options);
		  }
		  static _warnOnInvalidOptions(options, validColumnNames) {
		    if (!_.isPlainObject(options)) {
		      return;
		    }
		    const unrecognizedOptions = Object.keys(options).filter((k) => !validQueryKeywords.has(k));
		    const unexpectedModelAttributes = _.intersection(unrecognizedOptions, validColumnNames);
		    if (!options.where && unexpectedModelAttributes.length > 0) {
		      logger.warn(`Model attributes (${unexpectedModelAttributes.join(", ")}) passed into finder method options of model ${this.name}, but the options.where object is empty. Did you forget to use options.where?`);
		    }
		  }
		  static _injectDependentVirtualAttributes(attributes) {
		    const modelDefinition = this.modelDefinition;
		    if (modelDefinition.virtualAttributeNames.size === 0) {
		      return attributes;
		    }
		    if (!attributes || !Array.isArray(attributes)) {
		      return attributes;
		    }
		    for (const attribute of attributes) {
		      if (modelDefinition.virtualAttributeNames.has(attribute) && modelDefinition.attributes.get(attribute).type.attributeDependencies) {
		        attributes = attributes.concat(modelDefinition.attributes.get(attribute).type.attributeDependencies);
		      }
		    }
		    attributes = _.uniq(attributes);
		    return attributes;
		  }
		  static async _findSeparate(results, options) {
		    if (!options.include || options.raw || !results) {
		      return results;
		    }
		    const original = results;
		    if (options.plain) {
		      results = [results];
		    }
		    if (!Array.isArray(results) || results.length === 0) {
		      return original;
		    }
		    await Promise.all(options.include.map(async (include) => {
		      if (!include.separate) {
		        return await Model._findSeparate(
		          results.reduce((memo, result) => {
		            let associations = result.get(include.association.as);
		            if (!associations) {
		              return memo;
		            }
		            if (!Array.isArray(associations)) {
		              associations = [associations];
		            }
		            for (let i = 0, len = associations.length; i !== len; ++i) {
		              memo.push(associations[i]);
		            }
		            return memo;
		          }, []),
		          {
		            ..._.omit(options, "include", "attributes", "order", "where", "limit", "offset", "plain", "scope"),
		            include: include.include || []
		          }
		        );
		      }
		      const map = await include.association.get(results, {
		        ..._.omit(options, nonCascadingOptions),
		        ..._.omit(include, ["parent", "association", "as", "originalAttributes"])
		      });
		      for (const result of results) {
		        result.set(
		          include.association.as,
		          map.get(result.get(include.association.sourceKey)),
		          { raw: true }
		        );
		      }
		    }));
		    return original;
		  }
		  /**
		   * Search for a single instance by its primary key.
		   *
		   * This applies LIMIT 1, only a single instance will be returned.
		   *
		   * Returns the model with the matching primary key.
		   * If not found, returns null or throws an error if {@link FindOptions.rejectOnEmpty} is set.
		   *
		   * @param  {number|bigint|string|Buffer}      param The value of the desired instance's primary key.
		   * @param  {object}                           [options] find options
		   * @returns {Promise<Model|null>}
		   */
		  static async findByPk(param, options) {
		    if (param == null) {
		      return null;
		    }
		    options = (0, import_object.cloneDeep)(options) ?? {};
		    if (typeof param === "number" || typeof param === "bigint" || typeof param === "string" || Buffer.isBuffer(param)) {
		      options.where = {
		        // TODO: support composite primary keys
		        [this.primaryKeyAttribute]: param
		      };
		    } else {
		      throw new TypeError(`Argument passed to findByPk is invalid: ${param}`);
		    }
		    return await Model.findOne.call(this, options);
		  }
		  /**
		   * Search for a single instance.
		   *
		   * Returns the first instance corresponding matching the query.
		   * If not found, returns null or throws an error if {@link FindOptions.rejectOnEmpty} is set.
		   *
		   * @param  {object}       [options] A hash of options to describe the scope of the search
		   * @returns {Promise<Model|null>}
		   */
		  static async findOne(options) {
		    if (options !== void 0 && !_.isPlainObject(options)) {
		      throw new Error("The argument passed to findOne must be an options object, use findByPk if you wish to pass a single primary key value");
		    }
		    options = (0, import_object.cloneDeep)(options) ?? {};
		    if (options.limit === void 0) {
		      options.limit = 1;
		    }
		    return await Model.findAll.call(this, _.defaults(options, {
		      model: this,
		      plain: true
		    }));
		  }
		  /**
		   * Run an aggregation method on the specified field.
		   *
		   * Returns the aggregate result cast to {@link AggregateOptions.dataType},
		   * unless `options.plain` is false, in which case the complete data result is returned.
		   *
		   * @param {string}          attribute The attribute to aggregate over. Can be a field name or *
		   * @param {string}          aggregateFunction The function to use for aggregation, e.g. sum, max etc.
		   * @param {object}          [options] Query options. See sequelize.query for full options
		   *
		   * @returns {Promise<DataTypes|object>}
		   */
		  static async aggregate(attribute, aggregateFunction, options) {
		    options = (0, import_object.cloneDeep)(options) ?? {};
		    options.model = this;
		    const prevAttributes = options.attributes;
		    this._injectScope(options);
		    options.attributes = prevAttributes;
		    this._conformIncludes(options, this);
		    if (options.include) {
		      this._expandIncludeAll(options);
		      (0, import_model_internals._validateIncludedElements)(options);
		    }
		    const attrOptions = this.getAttributes()[attribute];
		    const field = attrOptions && attrOptions.field || attribute;
		    let aggregateColumn = this.sequelize.col(field);
		    if (options.distinct) {
		      aggregateColumn = this.sequelize.fn("DISTINCT", aggregateColumn);
		    }
		    let { group } = options;
		    if (Array.isArray(group) && Array.isArray(group[0])) {
		      (0, import_deprecations.noDoubleNestedGroup)();
		      group = group.flat();
		    }
		    options.attributes = _.unionBy(
		      options.attributes,
		      group,
		      [[this.sequelize.fn(aggregateFunction, aggregateColumn), aggregateFunction]],
		      (a) => Array.isArray(a) ? a[1] : a
		    );
		    if (!options.dataType) {
		      if (attrOptions) {
		        options.dataType = attrOptions.type;
		      } else {
		        options.dataType = new DataTypes.FLOAT();
		      }
		    } else {
		      options.dataType = this.sequelize.normalizeDataType(options.dataType);
		    }
		    (0, import_format.mapOptionFieldNames)(options, this);
		    options = this._paranoidClause(this, options);
		    const value = await this.queryInterface.rawSelect(this.getTableName(options), options, aggregateFunction, this);
		    return value;
		  }
		  /**
		   * Count the number of records matching the provided where clause.
		   *
		   * If you provide an `include` option, the number of matching associations will be counted instead.
		   *
		   * @param {object}        [options] options
		   * @returns {Promise<number>}
		   */
		  static async count(options) {
		    options = (0, import_object.cloneDeep)(options) ?? {};
		    options = _.defaults(options, { hooks: true });
		    (0, import_model_internals.setTransactionFromCls)(options, this.sequelize);
		    options.raw = true;
		    if (options.hooks) {
		      await this.hooks.runAsync("beforeCount", options);
		    }
		    let col = options.col || "*";
		    if (options.include) {
		      col = `${this.name}.${options.col || this.primaryKeyField}`;
		    }
		    if (options.distinct && col === "*") {
		      col = this.primaryKeyField;
		    }
		    options.plain = !options.group;
		    options.dataType = new DataTypes.INTEGER();
		    options.includeIgnoreAttributes = false;
		    options.limit = null;
		    options.offset = null;
		    options.order = null;
		    const result = await this.aggregate(col, "count", options);
		    if (Array.isArray(result)) {
		      return result.map((item) => ({
		        ...item,
		        count: Number(item.count)
		      }));
		    }
		    return result;
		  }
		  /**
		   * Finds all the rows matching your query, within a specified offset / limit, and get the total number of
		   * rows matching your query. This is very useful for pagination.
		   *
		   * ```js
		   * Model.findAndCountAll({
		   *   where: ...,
		   *   limit: 12,
		   *   offset: 12
		   * }).then(result => {
		   *   ...
		   * })
		   * ```
		   * In the above example, `result.rows` will contain rows 13 through 24, while `result.count` will return
		   * the total number of rows that matched your query.
		   *
		   * When you add includes, only those which are required (either because they have a where clause, or
		   * because required` is explicitly set to true on the include) will be added to the count part.
		   *
		   * Suppose you want to find all users who have a profile attached:
		   * ```js
		   * User.findAndCountAll({
		   *   include: [
		   *      { model: Profile, required: true}
		   *   ],
		   *   limit: 3
		   * });
		   * ```
		   * Because the include for `Profile` has `required` set it will result in an inner join, and only the users
		   * who have a profile will be counted. If we remove `required` from the include, both users with and
		   * without profiles will be counted
		   *
		   * This function also support grouping, when `group` is provided, the count will be an array of objects
		   * containing the count for each group and the projected attributes.
		   * ```js
		   * User.findAndCountAll({
		   *   group: 'type'
		   * });
		   * ```
		   *
		   * @param {object} [options] See findAll options
		   * @returns {Promise<{count: number | number[], rows: Model[]}>}
		   */
		  static async findAndCountAll(options) {
		    if (options !== void 0 && !_.isPlainObject(options)) {
		      throw new Error("The argument passed to findAndCountAll must be an options object, use findByPk if you wish to pass a single primary key value");
		    }
		    const countOptions = (0, import_object.cloneDeep)(options) ?? {};
		    if (countOptions.attributes) {
		      countOptions.attributes = void 0;
		    }
		    const [count, rows] = await Promise.all([
		      this.count(countOptions),
		      this.findAll(options)
		    ]);
		    return {
		      count,
		      rows: count === 0 ? [] : rows
		    };
		  }
		  /**
		   * Finds the maximum value of field
		   *
		   * @param {string} field attribute / field name
		   * @param {object} [options] See aggregate
		   * @returns {Promise<*>}
		   */
		  static async max(field, options) {
		    return await this.aggregate(field, "max", options);
		  }
		  /**
		   * Finds the minimum value of field
		   *
		   * @param {string} field attribute / field name
		   * @param {object} [options] See aggregate
		   * @returns {Promise<*>}
		   */
		  static async min(field, options) {
		    return await this.aggregate(field, "min", options);
		  }
		  /**
		   * Retrieves the sum of field
		   *
		   * @param {string} field attribute / field name
		   * @param {object} [options] See aggregate
		   * @returns {Promise<number>}
		   */
		  static async sum(field, options) {
		    return await this.aggregate(field, "sum", options);
		  }
		  /**
		   * Builds a new model instance.
		   * Unlike {@link Model.create}, the instance is not persisted, you need to call {@link Model#save} yourself.
		   *
		   * @param {object|Array} values An object of key value pairs or an array of such. If an array, the function will return an
		   *   array of instances.
		   * @param {object}  [options] Instance build options
		   *
		   * @returns {Model|Array<Model>}
		   */
		  static build(values, options) {
		    if (Array.isArray(values)) {
		      return this.bulkBuild(values, options);
		    }
		    const instance = new this(values, options, CONSTRUCTOR_SECRET);
		    for (const attributeName of this.modelDefinition.attributes.keys()) {
		      delete instance[attributeName];
		    }
		    return instance;
		  }
		  /**
		   * Builds multiple new model instances.
		   * Unlike {@link Model.create}, the instances are not persisted, you need to call {@link Model#save} yourself.
		   *
		   * @param {Array} valueSets An array of objects with key value pairs.
		   * @param {object}  [options] Instance build options
		   */
		  static bulkBuild(valueSets, options) {
		    options = { isNewRecord: true, ...options };
		    if (!options.includeValidated) {
		      this._conformIncludes(options, this);
		      if (options.include) {
		        this._expandIncludeAll(options);
		        (0, import_model_internals._validateIncludedElements)(options);
		      }
		    }
		    if (options.attributes) {
		      options.attributes = options.attributes.map((attribute) => Array.isArray(attribute) ? attribute[1] : attribute);
		    }
		    return valueSets.map((values) => this.build(values, options));
		  }
		  /**
		   * Builds a new model instance and persists it.
		   * Equivalent to calling {@link Model.build} then {@link Model.save}.
		   *
		   * @param {object} values
		   * @param {object} options
		   * @returns {Promise<Model>}
		   */
		  static async create(values, options) {
		    options = (0, import_object.cloneDeep)(options) ?? {};
		    return await this.build(values, {
		      isNewRecord: true,
		      attributes: options.fields,
		      include: options.include,
		      raw: options.raw,
		      silent: options.silent
		    }).save(options);
		  }
		  /**
		   * Find an entity that matches the query, or build (but don't save) the entity if none is found.
		   * The successful result of the promise will be the tuple [instance, initialized].
		   *
		   * @param {object} options find options
		   * @returns {Promise<Model,boolean>}
		   */
		  static async findOrBuild(options) {
		    if (!options || !options.where || arguments.length > 1) {
		      throw new Error(
		        "Missing where attribute in the options parameter passed to findOrBuild. Please note that the API has changed, and is now options only (an object with where, defaults keys, transaction etc.)"
		      );
		    }
		    let values;
		    let instance = await this.findOne(options);
		    if (instance === null) {
		      values = { ...options.defaults };
		      if (_.isPlainObject(options.where)) {
		        values = (0, import_object.defaults)(values, options.where);
		      }
		      instance = this.build(values, options);
		      return [instance, true];
		    }
		    return [instance, false];
		  }
		  /**
		   * Find an entity that matches the query, or {@link Model.create} the entity if none is found
		   * The successful result of the promise will be the tuple [instance, initialized].
		   *
		   * If no transaction is passed in the `options` object, a new transaction will be created internally, to
		   * prevent the race condition where a matching row is created by another connection after the find but
		   * before the insert call.
		   * However, it is not always possible to handle this case in SQLite, specifically if one transaction inserts
		   * and another tries to select before the first one has committed.
		   * In this case, an instance of {@link TimeoutError} will be thrown instead.
		   *
		   * If a transaction is passed, a savepoint will be created instead,
		   * and any unique constraint violation will be handled internally.
		   *
		   * @param {object} options find and create options
		   * @returns {Promise<Model,boolean>}
		   */
		  static async findOrCreate(options) {
		    if (!options || !options.where || arguments.length > 1) {
		      throw new Error(
		        "Missing where attribute in the options parameter passed to findOrCreate. Please note that the API has changed, and is now options only (an object with where, defaults keys, transaction etc.)"
		      );
		    }
		    if (options.connection) {
		      throw new Error("findOrCreate does not support specifying which connection must be used, because findOrCreate must run in a transaction.");
		    }
		    options = { ...options };
		    const modelDefinition = this.modelDefinition;
		    if (options.defaults) {
		      const defaults2 = Object.keys(options.defaults);
		      const unknownDefaults = defaults2.filter((name) => !modelDefinition.attributes.has(name));
		      if (unknownDefaults.length > 0) {
		        logger.warn(`Unknown attributes (${unknownDefaults}) passed to defaults option of findOrCreate`);
		      }
		    }
		    (0, import_model_internals.setTransactionFromCls)(options, this.sequelize);
		    const internalTransaction = !options.transaction;
		    let values;
		    let transaction;
		    try {
		      transaction = await this.sequelize.startUnmanagedTransaction(options);
		      options.transaction = transaction;
		      const found = await this.findOne(options);
		      if (found !== null) {
		        return [found, false];
		      }
		      values = { ...options.defaults };
		      if (_.isPlainObject(options.where)) {
		        values = (0, import_object.defaults)(values, options.where);
		      }
		      options.exception = true;
		      options.returning = true;
		      try {
		        const created = await this.create(values, options);
		        if (created.get(this.primaryKeyAttribute, { raw: true }) === null) {
		          throw new sequelizeErrors.UniqueConstraintError();
		        }
		        return [created, true];
		      } catch (error) {
		        if (!(error instanceof sequelizeErrors.UniqueConstraintError)) {
		          throw error;
		        }
		        const flattenedWhere = (0, import_object.flattenObjectDeep)(options.where);
		        const flattenedWhereKeys = Object.keys(flattenedWhere).map((name) => name.split(".").at(-1));
		        const whereFields = flattenedWhereKeys.map((name) => {
		          var _a;
		          return ((_a = modelDefinition.attributes.get(name)) == null ? void 0 : _a.columnName) ?? name;
		        });
		        const defaultFields = options.defaults && Object.keys(options.defaults).filter((name) => modelDefinition.attributes.get(name)).map((name) => modelDefinition.getColumnNameLoose(name));
		        const errFieldKeys = Object.keys(error.fields);
		        const errFieldsWhereIntersects = (0, import_array.intersects)(errFieldKeys, whereFields);
		        if (defaultFields && !errFieldsWhereIntersects && (0, import_array.intersects)(errFieldKeys, defaultFields)) {
		          throw error;
		        }
		        if (errFieldsWhereIntersects) {
		          _.each(error.fields, (value, key) => {
		            const name = modelDefinition.columns.get(key).attributeName;
		            if (value.toString() !== options.where[name].toString()) {
		              throw new Error(`${this.name}#findOrCreate: value used for ${name} was not equal for both the find and the create calls, '${options.where[name]}' vs '${value}'`);
		            }
		          });
		        }
		        const otherCreated = await this.findOne((0, import_object.defaults)({
		          transaction: internalTransaction ? null : transaction
		        }, options));
		        if (otherCreated === null) {
		          throw error;
		        }
		        return [otherCreated, false];
		      }
		    } finally {
		      if (internalTransaction && transaction) {
		        await transaction.commit();
		      }
		    }
		  }
		  /**
		   * A more performant {@link Model.findOrCreate} that will not start its own transaction or savepoint (at least not in
		   * postgres)
		   *
		   * It will execute a find call, attempt to create if empty, then attempt to find again if a unique constraint fails.
		   *
		   * The successful result of the promise will be the tuple [instance, initialized].
		   *
		   * @param {object} options find options
		   * @returns {Promise<Model,boolean>}
		   */
		  static async findCreateFind(options) {
		    if (!options || !options.where) {
		      throw new Error(
		        "Missing where attribute in the options parameter passed to findCreateFind."
		      );
		    }
		    let values = { ...options.defaults };
		    if (_.isPlainObject(options.where)) {
		      values = (0, import_object.defaults)(values, options.where);
		    }
		    const found = await this.findOne(options);
		    if (found) {
		      return [found, false];
		    }
		    try {
		      const createOptions = { ...options };
		      if (this.sequelize.options.dialect === "postgres" && options.transaction) {
		        createOptions.ignoreDuplicates = true;
		      }
		      const created = await this.create(values, createOptions);
		      return [created, true];
		    } catch (error) {
		      if (!(error instanceof sequelizeErrors.UniqueConstraintError || error instanceof sequelizeErrors.EmptyResultError)) {
		        throw error;
		      }
		      const foundAgain = await this.findOne(options);
		      return [foundAgain, false];
		    }
		  }
		  /**
		   * Inserts or updates a single entity. An update will be executed if a row which matches the supplied values on
		   * either the primary key or a unique key is found. Note that the unique index must be defined in your
		   * sequelize model and not just in the table. Otherwise, you may experience a unique constraint violation,
		   * because sequelize fails to identify the row that should be updated.
		   *
		   * **Implementation details:**
		   *
		   * * MySQL - Implemented as a single query `INSERT values ON DUPLICATE KEY UPDATE values`
		   * * PostgreSQL - Implemented as a temporary function with exception handling: INSERT EXCEPTION WHEN
		   *   unique_constraint UPDATE
		   * * SQLite - Implemented as two queries `INSERT; UPDATE`. This means that the update is executed regardless
		   *   of whether the row already existed or not
		   *
		   * **Note:** SQLite returns null for created, no matter if the row was created or updated. This is
		   * because SQLite always runs INSERT OR IGNORE + UPDATE, in a single query, so there is no way to know
		   * whether the row was inserted or not.
		   *
		   * @param  {object} values hash of values to upsert
		   * @param  {object} [options] upsert options
		   * @returns {Promise<Array<Model, boolean | null>>} an array with two elements, the first being the new record and
		   *   the second being `true` if it was just created or `false` if it already existed (except on Postgres and SQLite, which
		   *   can't detect this and will always return `null` instead of a boolean).
		   */
		  static async upsert(values, options) {
		    options = {
		      hooks: true,
		      returning: true,
		      validate: true,
		      ...(0, import_object.cloneDeep)(options)
		    };
		    (0, import_model_internals.setTransactionFromCls)(options, this.sequelize);
		    const modelDefinition = this.modelDefinition;
		    const createdAtAttr = modelDefinition.timestampAttributeNames.createdAt;
		    const updatedAtAttr = modelDefinition.timestampAttributeNames.updatedAt;
		    const hasPrimary = this.primaryKeyField in values || this.primaryKeyAttribute in values;
		    const instance = this.build(values);
		    options.model = this;
		    options.instance = instance;
		    const changed = [...instance._changed];
		    if (!options.fields) {
		      options.fields = changed;
		    }
		    if (options.validate) {
		      await instance.validate(options);
		    }
		    const updatedDataValues = _.pick(instance.dataValues, changed);
		    const insertValues = (0, import_format.mapValueFieldNames)(instance.dataValues, modelDefinition.attributes.keys(), this);
		    const updateValues = (0, import_format.mapValueFieldNames)(updatedDataValues, options.fields, this);
		    const now = /* @__PURE__ */ new Date();
		    if (createdAtAttr && !insertValues[createdAtAttr]) {
		      const field = modelDefinition.attributes.get(createdAtAttr).columnName || createdAtAttr;
		      insertValues[field] = this._getDefaultTimestamp(createdAtAttr) || now;
		    }
		    if (updatedAtAttr && !updateValues[updatedAtAttr]) {
		      const field = modelDefinition.attributes.get(updatedAtAttr).columnName || updatedAtAttr;
		      insertValues[field] = updateValues[field] = this._getDefaultTimestamp(updatedAtAttr) || now;
		    }
		    if (this.sequelize.options.dialect === "db2") {
		      this.uniqno = this.sequelize.dialect.queryGenerator.addUniqueFields(
		        insertValues,
		        this.modelDefinition.rawAttributes,
		        this.uniqno
		      );
		    }
		    if (!hasPrimary && this.primaryKeyAttribute && !modelDefinition.attributes.get(this.primaryKeyAttribute).defaultValue) {
		      delete insertValues[this.primaryKeyField];
		      delete updateValues[this.primaryKeyField];
		    }
		    if (options.hooks) {
		      await this.hooks.runAsync("beforeUpsert", values, options);
		    }
		    const result = await this.queryInterface.upsert(
		      this.getTableName(options),
		      insertValues,
		      updateValues,
		      // TODO: this is only used by DB2 & MSSQL, as these dialects require a WHERE clause in their UPSERT implementation.
		      //  but the user should be able to specify a WHERE clause themselves (because we can't perfectly include all UNIQUE constraints in our implementation)
		      //  there is also some incoherence in our implementation: This "where" returns the Primary Key constraint, but all other unique constraints
		      //  are added inside of QueryInterface. Everything should be done inside of QueryInterface instead.
		      instance.where(false, true) ?? {},
		      options
		    );
		    const [record] = result;
		    record.isNewRecord = false;
		    if (options.hooks) {
		      await this.hooks.runAsync("afterUpsert", result, options);
		    }
		    return result;
		  }
		  /**
		   * Creates and inserts multiple instances in bulk.
		   *
		   * The promise resolves with an array of instances.
		   *
		   * Please note that, depending on your dialect, the resulting instances may not accurately
		   * represent the state of their rows in the database.
		   * This is because MySQL and SQLite do not make it easy to obtain back automatically generated IDs
		   * and other default values in a way that can be mapped to multiple records.
		   * To obtain the correct data for the newly created instance, you will need to query for them again.
		   *
		   * If validation fails, the promise is rejected with {@link AggregateError}
		   *
		   * @param  {Array}          records                          List of objects (key/value pairs) to create instances from
		   * @param  {object}         [options]                        Bulk create options
		   * @returns {Promise<Array<Model>>}
		   */
		  static async bulkCreate(records, options = {}) {
		    if (records.length === 0) {
		      return [];
		    }
		    const dialect = this.sequelize.options.dialect;
		    const now = /* @__PURE__ */ new Date();
		    options = (0, import_object.cloneDeep)(options) ?? {};
		    (0, import_model_internals.setTransactionFromCls)(options, this.sequelize);
		    options.model = this;
		    if (!options.includeValidated) {
		      this._conformIncludes(options, this);
		      if (options.include) {
		        this._expandIncludeAll(options);
		        (0, import_model_internals._validateIncludedElements)(options);
		      }
		    }
		    const instances = records.map((values) => this.build(values, { isNewRecord: true, include: options.include }));
		    const recursiveBulkCreate = async (instances2, options2) => {
		      options2 = {
		        validate: false,
		        hooks: true,
		        individualHooks: false,
		        ignoreDuplicates: false,
		        ...options2
		      };
		      if (options2.returning === void 0) {
		        if (options2.association) {
		          options2.returning = false;
		        } else {
		          options2.returning = true;
		        }
		      }
		      if (options2.ignoreDuplicates && ["mssql", "db2", "ibmi"].includes(dialect)) {
		        throw new Error(`${dialect} does not support the ignoreDuplicates option.`);
		      }
		      if (options2.updateOnDuplicate && !["mysql", "mariadb", "sqlite", "postgres", "ibmi"].includes(dialect)) {
		        throw new Error(`${dialect} does not support the updateOnDuplicate option.`);
		      }
		      const model = options2.model;
		      const modelDefinition = model.modelDefinition;
		      options2.fields = options2.fields || Array.from(modelDefinition.attributes.keys());
		      const createdAtAttr = modelDefinition.timestampAttributeNames.createdAt;
		      const updatedAtAttr = modelDefinition.timestampAttributeNames.updatedAt;
		      if (options2.updateOnDuplicate !== void 0) {
		        if (Array.isArray(options2.updateOnDuplicate) && options2.updateOnDuplicate.length > 0) {
		          options2.updateOnDuplicate = _.intersection(
		            _.without(Object.keys(model.tableAttributes), createdAtAttr),
		            options2.updateOnDuplicate
		          );
		        } else {
		          throw new Error("updateOnDuplicate option only supports non-empty array.");
		        }
		      }
		      if (options2.hooks) {
		        await model.hooks.runAsync("beforeBulkCreate", instances2, options2);
		      }
		      if (options2.validate) {
		        const errors = [];
		        const validateOptions = { ...options2 };
		        validateOptions.hooks = options2.individualHooks;
		        await Promise.all(instances2.map(async (instance) => {
		          try {
		            await instance.validate(validateOptions);
		          } catch (error) {
		            errors.push(new sequelizeErrors.BulkRecordError(error, instance));
		          }
		        }));
		        delete options2.skip;
		        if (errors.length > 0) {
		          throw new sequelizeErrors.AggregateError(errors);
		        }
		      }
		      if (options2.individualHooks) {
		        await Promise.all(instances2.map(async (instance) => {
		          const individualOptions = {
		            ...options2,
		            validate: false,
		            hooks: true
		          };
		          delete individualOptions.fields;
		          delete individualOptions.individualHooks;
		          delete individualOptions.ignoreDuplicates;
		          await instance.save(individualOptions);
		        }));
		      } else {
		        if (options2.include && options2.include.length > 0) {
		          await Promise.all(options2.include.filter((include) => include.association instanceof import_associations.BelongsTo).map(async (include) => {
		            const associationInstances = [];
		            const associationInstanceIndexToInstanceMap = [];
		            for (const instance of instances2) {
		              const associationInstance = instance.get(include.as);
		              if (associationInstance) {
		                associationInstances.push(associationInstance);
		                associationInstanceIndexToInstanceMap.push(instance);
		              }
		            }
		            if (associationInstances.length === 0) {
		              return;
		            }
		            const includeOptions = _((0, import_object.cloneDeep)(include)).omit(["association"]).defaults({
		              connection: options2.connection,
		              transaction: options2.transaction,
		              logging: options2.logging
		            }).value();
		            const createdAssociationInstances = await recursiveBulkCreate(associationInstances, includeOptions);
		            for (const idx in createdAssociationInstances) {
		              const associationInstance = createdAssociationInstances[idx];
		              const instance = associationInstanceIndexToInstanceMap[idx];
		              await include.association.set(instance, associationInstance, { save: false, logging: options2.logging });
		            }
		          }));
		        }
		        records = instances2.map((instance) => {
		          const values = instance.dataValues;
		          if (createdAtAttr && !values[createdAtAttr]) {
		            values[createdAtAttr] = now;
		            if (!options2.fields.includes(createdAtAttr)) {
		              options2.fields.push(createdAtAttr);
		            }
		          }
		          if (updatedAtAttr && !values[updatedAtAttr]) {
		            values[updatedAtAttr] = now;
		            if (!options2.fields.includes(updatedAtAttr)) {
		              options2.fields.push(updatedAtAttr);
		            }
		          }
		          const out = (0, import_format.mapValueFieldNames)(values, options2.fields, model);
		          for (const key of modelDefinition.virtualAttributeNames) {
		            delete out[key];
		          }
		          return out;
		        });
		        const fieldMappedAttributes = /* @__PURE__ */ Object.create(null);
		        for (const attrName in model.tableAttributes) {
		          const attribute = modelDefinition.attributes.get(attrName);
		          fieldMappedAttributes[attribute.columnName] = attribute;
		        }
		        if (options2.updateOnDuplicate) {
		          options2.updateOnDuplicate = options2.updateOnDuplicate.map((attrName) => {
		            return modelDefinition.getColumnName(attrName);
		          });
		          if (options2.conflictAttributes) {
		            options2.upsertKeys = options2.conflictAttributes.map(
		              (attrName) => modelDefinition.getColumnName(attrName)
		            );
		          } else {
		            const upsertKeys = [];
		            for (const i of model.getIndexes()) {
		              if (i.unique && !i.where) {
		                upsertKeys.push(...i.fields);
		              }
		            }
		            options2.upsertKeys = upsertKeys.length > 0 ? upsertKeys : Object.values(model.primaryKeys).map((x) => x.field);
		          }
		        }
		        if (options2.returning && Array.isArray(options2.returning)) {
		          options2.returning = options2.returning.map((attr) => modelDefinition.getColumnNameLoose(attr));
		        }
		        const results = await model.queryInterface.bulkInsert(model.getTableName(options2), records, options2, fieldMappedAttributes);
		        if (Array.isArray(results)) {
		          for (const [i, result] of results.entries()) {
		            const instance = instances2[i];
		            for (const key in result) {
		              if (!Object.hasOwn(result, key)) {
		                continue;
		              }
		              if (!instance || key === model.primaryKeyAttribute && instance.get(model.primaryKeyAttribute) && ["mysql", "mariadb", "sqlite"].includes(dialect)) {
		                continue;
		              }
		              const value = result[key];
		              const attr = (0, import_iterators.find)(
		                modelDefinition.attributes.values(),
		                (attribute) => attribute.attributeName === key || attribute.columnName === key
		              );
		              const attributeName = (attr == null ? void 0 : attr.attributeName) || key;
		              instance.dataValues[attributeName] = value != null && (attr == null ? void 0 : attr.type) instanceof import_data_types.AbstractDataType ? attr.type.parseDatabaseValue(value) : value;
		              instance._previousDataValues[attributeName] = instance.dataValues[attributeName];
		            }
		          }
		        }
		      }
		      if (options2.include && options2.include.length > 0) {
		        await Promise.all(options2.include.filter((include) => !(include.association instanceof import_associations.BelongsTo || include.parent && include.parent.association instanceof import_associations.BelongsToMany)).map(async (include) => {
		          const associationInstances = [];
		          const associationInstanceIndexToInstanceMap = [];
		          for (const instance of instances2) {
		            let associated = instance.get(include.as);
		            if (!Array.isArray(associated)) {
		              associated = [associated];
		            }
		            for (const associationInstance of associated) {
		              if (associationInstance) {
		                if (!(include.association instanceof import_associations.BelongsToMany)) {
		                  associationInstance.set(include.association.foreignKey, instance.get(include.association.sourceKey || instance.constructor.primaryKeyAttribute, { raw: true }), { raw: true });
		                  Object.assign(associationInstance, include.association.scope);
		                }
		                associationInstances.push(associationInstance);
		                associationInstanceIndexToInstanceMap.push(instance);
		              }
		            }
		          }
		          if (associationInstances.length === 0) {
		            return;
		          }
		          const includeOptions = _((0, import_object.cloneDeep)(include)).omit(["association"]).defaults({
		            connection: options2.connection,
		            transaction: options2.transaction,
		            logging: options2.logging
		          }).value();
		          const createdAssociationInstances = await recursiveBulkCreate(associationInstances, includeOptions);
		          if (include.association instanceof import_associations.BelongsToMany) {
		            const valueSets = [];
		            for (const idx in createdAssociationInstances) {
		              const associationInstance = createdAssociationInstances[idx];
		              const instance = associationInstanceIndexToInstanceMap[idx];
		              const values = {
		                [include.association.foreignKey]: instance.get(instance.constructor.primaryKeyAttribute, { raw: true }),
		                [include.association.otherKey]: associationInstance.get(associationInstance.constructor.primaryKeyAttribute, { raw: true }),
		                // Include values defined in the association
		                ...include.association.through.scope
		              };
		              if (associationInstance[include.association.through.model.name]) {
		                const throughDefinition = include.association.through.model.modelDefinition;
		                for (const attributeName of throughDefinition.attributes.keys()) {
		                  const attribute = throughDefinition.attributes.get(attributeName);
		                  if (attribute._autoGenerated || attributeName === include.association.foreignKey || attributeName === include.association.otherKey || typeof associationInstance[include.association.through.model.name][attributeName] === "undefined") {
		                    continue;
		                  }
		                  values[attributeName] = associationInstance[include.association.through.model.name][attributeName];
		                }
		              }
		              valueSets.push(values);
		            }
		            const throughOptions = _((0, import_object.cloneDeep)(include)).omit(["association", "attributes"]).defaults({
		              connection: options2.connection,
		              transaction: options2.transaction,
		              logging: options2.logging
		            }).value();
		            throughOptions.model = include.association.throughModel;
		            const throughInstances = include.association.throughModel.bulkBuild(valueSets, throughOptions);
		            await recursiveBulkCreate(throughInstances, throughOptions);
		          }
		        }));
		      }
		      for (const instance of instances2) {
		        const attributeDefs = modelDefinition.attributes;
		        for (const attribute of attributeDefs.values()) {
		          if (instance.dataValues[attribute.columnName] !== void 0 && attribute.columnName !== attribute.attributeName) {
		            instance.dataValues[attribute.attributeName] = instance.dataValues[attribute.columnName];
		            delete instance.dataValues[attribute.columnName];
		          }
		          instance._previousDataValues[attribute.attributeName] = instance.dataValues[attribute.attributeName];
		          instance.changed(attribute.attributeName, false);
		        }
		        instance.isNewRecord = false;
		      }
		      if (options2.hooks) {
		        await model.hooks.runAsync("afterBulkCreate", instances2, options2);
		      }
		      return instances2;
		    };
		    return await recursiveBulkCreate(instances, options);
		  }
		  /**
		   * Destroys all instances of the model.
		   * This is a convenient method for `MyModel.destroy({ truncate: true })`.
		   *
		   * __Danger__: This will completely empty your table!
		   *
		   * @param {object} [options] truncate options
		   * @returns {Promise}
		   */
		  static async truncate(options) {
		    options = (0, import_object.cloneDeep)(options) ?? {};
		    options.truncate = true;
		    return await this.destroy(options);
		  }
		  /**
		   * Deletes multiple instances, or set their deletedAt timestamp to the current time if `paranoid` is enabled.
		   *
		   * @param  {object} options destroy options
		   * @returns {Promise<number>} The number of destroyed rows
		   */
		  static async destroy(options) {
		    options = (0, import_object.cloneDeep)(options) ?? {};
		    (0, import_model_internals.setTransactionFromCls)(options, this.sequelize);
		    this._injectScope(options);
		    if (!options || !(options.where || options.truncate)) {
		      throw new Error("Missing where or truncate attribute in the options parameter of model.destroy.");
		    }
		    if (!options.truncate && !_.isPlainObject(options.where) && !Array.isArray(options.where) && !(options.where instanceof import_base_sql_expression.BaseSqlExpression)) {
		      throw new Error("Expected plain object, array or sequelize method in the options.where parameter of model.destroy.");
		    }
		    const modelDefinition = this.modelDefinition;
		    const attributes = modelDefinition.attributes;
		    options = _.defaults(options, {
		      hooks: true,
		      individualHooks: false,
		      force: false,
		      cascade: false,
		      restartIdentity: false
		    });
		    options.type = import_query_types.QueryTypes.BULKDELETE;
		    (0, import_format.mapOptionFieldNames)(options, this);
		    options.model = this;
		    if (options.hooks) {
		      await this.hooks.runAsync("beforeBulkDestroy", options);
		    }
		    let instances;
		    if (options.individualHooks) {
		      instances = await this.findAll({
		        where: options.where,
		        connection: options.connection,
		        transaction: options.transaction,
		        logging: options.logging,
		        benchmark: options.benchmark
		      });
		      await Promise.all(instances.map((instance) => {
		        return this.hooks.runAsync("beforeDestroy", instance, options);
		      }));
		    }
		    let result;
		    if (modelDefinition.timestampAttributeNames.deletedAt && !options.force) {
		      options.type = import_query_types.QueryTypes.BULKUPDATE;
		      const attrValueHash = {};
		      const deletedAtAttribute = attributes.get(modelDefinition.timestampAttributeNames.deletedAt);
		      const deletedAtColumnName = deletedAtAttribute.columnName;
		      const where = {
		        [deletedAtColumnName]: Object.hasOwn(deletedAtAttribute, "defaultValue") ? deletedAtAttribute.defaultValue : null
		      };
		      attrValueHash[deletedAtColumnName] = /* @__PURE__ */ new Date();
		      result = await this.queryInterface.bulkUpdate(this.getTableName(options), attrValueHash, Object.assign(where, options.where), options, (0, import_object.getObjectFromMap)(modelDefinition.attributes));
		    } else {
		      result = await this.queryInterface.bulkDelete(this.getTableName(options), options.where, options, this);
		    }
		    if (options.individualHooks) {
		      await Promise.all(
		        instances.map((instance) => {
		          return this.hooks.runAsync("afterDestroy", instance, options);
		        })
		      );
		    }
		    if (options.hooks) {
		      await this.hooks.runAsync("afterBulkDestroy", options);
		    }
		    return result;
		  }
		  /**
		   * Restores multiple paranoid instances.
		   * Only usable if {@link ModelOptions.paranoid} is true.
		   *
		   * @param {object} options restore options
		   * @returns {Promise}
		   */
		  static async restore(options) {
		    const modelDefinition = this.modelDefinition;
		    if (!modelDefinition.timestampAttributeNames.deletedAt) {
		      throw new Error("Model is not paranoid");
		    }
		    options = {
		      hooks: true,
		      individualHooks: false,
		      ...options
		    };
		    (0, import_model_internals.setTransactionFromCls)(options, this.sequelize);
		    options.type = import_query_types.QueryTypes.RAW;
		    options.model = this;
		    (0, import_format.mapOptionFieldNames)(options, this);
		    if (options.hooks) {
		      await this.hooks.runAsync("beforeBulkRestore", options);
		    }
		    let instances;
		    if (options.individualHooks) {
		      instances = await this.findAll({
		        where: options.where,
		        connection: options.connection,
		        transaction: options.transaction,
		        logging: options.logging,
		        benchmark: options.benchmark,
		        paranoid: false
		      });
		      await Promise.all(instances.map((instance) => {
		        return this.hooks.runAsync("beforeRestore", instance, options);
		      }));
		    }
		    const attrValueHash = {};
		    const deletedAtAttributeName = modelDefinition.timestampAttributeNames.deletedAt;
		    const deletedAtAttribute = modelDefinition.attributes.get(deletedAtAttributeName);
		    const deletedAtDefaultValue = deletedAtAttribute.defaultValue ?? null;
		    attrValueHash[deletedAtAttribute.columnName || deletedAtAttributeName] = deletedAtDefaultValue;
		    options.omitNull = false;
		    const result = await this.queryInterface.bulkUpdate(this.getTableName(options), attrValueHash, options.where, options, (0, import_object.getObjectFromMap)(modelDefinition.attributes));
		    if (options.individualHooks) {
		      await Promise.all(
		        instances.map((instance) => {
		          return this.hooks.runAsync("afterRestore", instance, options);
		        })
		      );
		    }
		    if (options.hooks) {
		      await this.hooks.runAsync("afterBulkRestore", options);
		    }
		    return result;
		  }
		  /**
		   * Updates multiple instances that match the where options.
		   *
		   * The promise resolves with an array of one or two elements:
		   * - The first element is always the number of affected rows,
		   * - the second element is the list of affected entities (only supported in postgres and mssql with
		   * {@link UpdateOptions.returning} true.)
		   *
		   * @param  {object} values hash of values to update
		   * @param  {object} options update options
		   * @returns {Promise<Array<number,number>>}
		   */
		  static async update(values, options) {
		    options = (0, import_object.cloneDeep)(options) ?? {};
		    (0, import_model_internals.setTransactionFromCls)(options, this.sequelize);
		    this._injectScope(options);
		    this._optionsMustContainWhere(options);
		    const modelDefinition = this.modelDefinition;
		    options = this._paranoidClause(this, _.defaults(options, {
		      validate: true,
		      hooks: true,
		      individualHooks: false,
		      returning: false,
		      force: false,
		      sideEffects: true
		    }));
		    options.type = import_query_types.QueryTypes.BULKUPDATE;
		    values = _.omitBy(values, (value) => value === void 0);
		    const updatedAtAttrName = modelDefinition.timestampAttributeNames.updatedAt;
		    if (options.fields && Array.isArray(options.fields)) {
		      for (const key of Object.keys(values)) {
		        if (!options.fields.includes(key)) {
		          delete values[key];
		        }
		      }
		    } else {
		      options.fields = _.intersection(Object.keys(values), Array.from(modelDefinition.physicalAttributes.keys()));
		      if (updatedAtAttrName && !options.fields.includes(updatedAtAttrName)) {
		        options.fields.push(updatedAtAttrName);
		      }
		    }
		    if (updatedAtAttrName && !options.silent) {
		      values[updatedAtAttrName] = this._getDefaultTimestamp(updatedAtAttrName) || /* @__PURE__ */ new Date();
		    }
		    options.model = this;
		    let valuesUse;
		    if (options.validate) {
		      const build = this.build(values);
		      build.set(updatedAtAttrName, values[updatedAtAttrName], { raw: true });
		      if (options.sideEffects) {
		        Object.assign(values, _.pick(build.get(), build.changed()));
		        options.fields = _.union(options.fields, Object.keys(values));
		      }
		      options.skip = _.difference(Array.from(modelDefinition.attributes.keys()), Object.keys(values));
		      const attributes = await build.validate(options);
		      options.skip = void 0;
		      if (attributes && attributes.dataValues) {
		        values = _.pick(attributes.dataValues, Object.keys(values));
		      }
		    }
		    if (options.hooks) {
		      options.attributes = values;
		      await this.hooks.runAsync("beforeBulkUpdate", options);
		      values = options.attributes;
		      delete options.attributes;
		    }
		    valuesUse = values;
		    let instances;
		    let updateDoneRowByRow = false;
		    if (options.individualHooks) {
		      instances = await this.findAll({
		        where: options.where,
		        connection: options.connection,
		        transaction: options.transaction,
		        logging: options.logging,
		        benchmark: options.benchmark,
		        paranoid: options.paranoid
		      });
		      if (instances.length > 0) {
		        let changedValues;
		        let different = false;
		        instances = await Promise.all(instances.map(async (instance) => {
		          Object.assign(instance.dataValues, values);
		          _.forIn(valuesUse, (newValue, attr) => {
		            if (newValue !== instance._previousDataValues[attr]) {
		              instance.setDataValue(attr, newValue);
		            }
		          });
		          await this.hooks.runAsync("beforeUpdate", instance, options);
		          await this.hooks.runAsync("beforeSave", instance, options);
		          if (!different) {
		            const thisChangedValues = {};
		            _.forIn(instance.dataValues, (newValue, attr) => {
		              if (newValue !== instance._previousDataValues[attr]) {
		                thisChangedValues[attr] = newValue;
		              }
		            });
		            if (!changedValues) {
		              changedValues = thisChangedValues;
		            } else {
		              different = !_.isEqual(changedValues, thisChangedValues);
		            }
		          }
		          return instance;
		        }));
		        if (!different) {
		          const keys = Object.keys(changedValues);
		          if (keys.length > 0) {
		            valuesUse = changedValues;
		            options.fields = _.union(options.fields, keys);
		          }
		        } else {
		          instances = await Promise.all(instances.map(async (instance) => {
		            const individualOptions = {
		              ...options,
		              hooks: false,
		              validate: false
		            };
		            delete individualOptions.individualHooks;
		            return instance.save(individualOptions);
		          }));
		          updateDoneRowByRow = true;
		        }
		      }
		    }
		    let result;
		    if (updateDoneRowByRow) {
		      result = [instances.length, instances];
		    } else if (_.isEmpty(valuesUse) || Object.keys(valuesUse).length === 1 && valuesUse[updatedAtAttrName]) {
		      result = [0];
		    } else {
		      valuesUse = (0, import_format.mapValueFieldNames)(valuesUse, options.fields, this);
		      options = (0, import_format.mapOptionFieldNames)(options, this);
		      options.hasTrigger = this.options ? this.options.hasTrigger : false;
		      const affectedRows = await this.queryInterface.bulkUpdate(this.getTableName(options), valuesUse, options.where, options, (0, import_object.getObjectFromMap)(this.modelDefinition.physicalAttributes));
		      if (options.returning) {
		        result = [affectedRows.length, affectedRows];
		        instances = affectedRows;
		      } else {
		        result = [affectedRows];
		      }
		    }
		    if (options.individualHooks) {
		      await Promise.all(instances.map(async (instance) => {
		        await this.hooks.runAsync("afterUpdate", instance, options);
		        await this.hooks.runAsync("afterSave", instance, options);
		      }));
		      result[1] = instances;
		    }
		    if (options.hooks) {
		      options.attributes = values;
		      await this.hooks.runAsync("afterBulkUpdate", options);
		      delete options.attributes;
		    }
		    return result;
		  }
		  /**
		   * Runs a describe query on the table.
		   *
		   * @param {string} [schema] schema name to search table in
		   * @param {object} [options] query options
		   *
		   * @returns {Promise} hash of attributes and their types
		   */
		  // TODO: move "schema" to options
		  static async describe(schema, options) {
		    const table = this.modelDefinition.table;
		    return await this.queryInterface.describeTable({ ...table, schema: schema || table.schema }, options);
		  }
		  static _getDefaultTimestamp(attributeName) {
		    const attributes = this.modelDefinition.attributes;
		    const attribute = attributes.get(attributeName);
		    if (attribute == null ? void 0 : attribute.defaultValue) {
		      return (0, import_dialect.toDefaultValue)(attribute.defaultValue);
		    }
		  }
		  static _expandAttributes(options) {
		    if (!_.isPlainObject(options.attributes)) {
		      return;
		    }
		    let attributes = Array.from(this.modelDefinition.attributes.keys());
		    if (options.attributes.exclude) {
		      attributes = attributes.filter((elem) => !options.attributes.exclude.includes(elem));
		    }
		    if (options.attributes.include) {
		      attributes = attributes.concat(options.attributes.include);
		    }
		    options.attributes = attributes;
		  }
		  // Inject _scope into options.
		  static _injectScope(options) {
		    const scope = (0, import_object.cloneDeep)(this._scope) ?? {};
		    this._normalizeIncludes(scope, this);
		    this._defaultsOptions(options, scope);
		  }
		  static [Symbol.for("nodejs.util.inspect.custom")]() {
		    return this.name;
		  }
		  static hasAlias(alias) {
		    return Object.hasOwn(this.associations, alias);
		  }
		  static getAssociations(target) {
		    return Object.values(this.associations).filter((association) => association.target.name === target.name);
		  }
		  static getAssociationWithModel(targetModel, targetAlias) {
		    if (targetAlias) {
		      return this.getAssociation(targetAlias);
		    }
		    if (!targetModel) {
		      (0, import_model_internals.throwInvalidInclude)({ model: targetModel, as: targetAlias });
		    }
		    const matchingAssociations = this._getAssociationsByModel(targetModel);
		    if (matchingAssociations.length === 0) {
		      throw new sequelizeErrors.EagerLoadingError(`Invalid Include received: no associations exist between "${this.name}" and "${targetModel.name}"`);
		    }
		    if (matchingAssociations.length > 1) {
		      throw new sequelizeErrors.EagerLoadingError(`
Ambiguous Include received:
You're trying to include the model "${targetModel.name}", but is associated to "${this.name}" multiple times.

Instead of specifying a Model, either:
1. pass one of the Association object (available in "${this.name}.associations") in the "association" option, e.g.:
   include: {
     association: ${this.name}.associations.${matchingAssociations[0].as},
   },

2. pass the name of one of the associations in the "association" option, e.g.:
   include: {
     association: '${matchingAssociations[0].as}',
   },

"${this.name}" is associated to "${targetModel.name}" through the following associations: ${matchingAssociations.map((association) => `"${association.as}"`).join(", ")}
`.trim());
		    }
		    return matchingAssociations[0];
		  }
		  /**
		   * Increments the value of one or more attributes.
		   *
		   * The increment is done using a `SET column = column + X WHERE foo = 'bar'` query.
		   *
		   * @example increment number by 1
		   * ```ts
		   * Model.increment('number', { where: { foo: 'bar' });
		   * ```
		   *
		   * @example increment number and count by 2
		   * ```ts
		   * Model.increment(['number', 'count'], { by: 2, where: { foo: 'bar' } });
		   * ```
		   *
		   * @example increment answer by 42, and decrement tries by 1
		   * ```ts
		   * // `by` cannot be used, as each attribute specifies its own value
		   * Model.increment({ answer: 42, tries: -1}, { where: { foo: 'bar' } });
		   * ```
		   *
		   * @param  {string|Array|object} fields If a string is provided, that column is incremented by the
		   *   value of `by` given in options. If an array is provided, the same is true for each column.
		   *   If an object is provided, each key is incremented by the corresponding value, `by` is ignored.
		   * @param  {object} options increment options
		   * @param  {object} options.where conditions hash
		   *
		   * @returns {Promise<Model[],?number>} an array of affected rows and affected count with `options.returning` true,
		   *   whenever supported by dialect
		   */
		  static async increment(fields, options) {
		    options = options || {};
		    if (typeof fields === "string") {
		      fields = [fields];
		    }
		    const modelDefinition = this.modelDefinition;
		    const attributeDefs = modelDefinition.attributes;
		    if (Array.isArray(fields)) {
		      fields = fields.map((attributeName) => {
		        const attributeDef = attributeDefs.get(attributeName);
		        if (attributeDef && attributeDef.columnName !== attributeName) {
		          return attributeDef.columnName;
		        }
		        return attributeName;
		      });
		    } else if (fields && typeof fields === "object") {
		      fields = Object.keys(fields).reduce((rawFields, attributeName) => {
		        const attributeDef = attributeDefs.get(attributeName);
		        if (attributeDef && attributeDef.columnName !== attributeName) {
		          rawFields[attributeDef.columnName] = fields[attributeName];
		        } else {
		          rawFields[attributeName] = fields[attributeName];
		        }
		        return rawFields;
		      }, {});
		    }
		    this._injectScope(options);
		    this._optionsMustContainWhere(options);
		    options = (0, import_object.defaults)({}, options, {
		      by: 1,
		      where: {},
		      increment: true
		    });
		    const isSubtraction = !options.increment;
		    (0, import_format.mapOptionFieldNames)(options, this);
		    const where = { ...options.where };
		    let incrementAmountsByField = {};
		    if (Array.isArray(fields)) {
		      incrementAmountsByField = {};
		      for (const field of fields) {
		        incrementAmountsByField[field] = options.by;
		      }
		    } else {
		      incrementAmountsByField = fields;
		    }
		    if (modelDefinition.versionAttributeName) {
		      incrementAmountsByField[modelDefinition.versionAttributeName] = isSubtraction ? -1 : 1;
		    }
		    const extraAttributesToBeUpdated = {};
		    const updatedAtAttrName = modelDefinition.timestampAttributeNames.updatedAt;
		    if (!options.silent && updatedAtAttrName && !incrementAmountsByField[updatedAtAttrName]) {
		      const columnName = modelDefinition.getColumnName(updatedAtAttrName);
		      extraAttributesToBeUpdated[columnName] = this._getDefaultTimestamp(updatedAtAttrName) || /* @__PURE__ */ new Date();
		    }
		    const tableName = this.getTableName(options);
		    let affectedRows;
		    if (isSubtraction) {
		      affectedRows = await this.queryInterface.decrement(
		        this,
		        tableName,
		        where,
		        incrementAmountsByField,
		        extraAttributesToBeUpdated,
		        options
		      );
		    } else {
		      affectedRows = await this.queryInterface.increment(
		        this,
		        tableName,
		        where,
		        incrementAmountsByField,
		        extraAttributesToBeUpdated,
		        options
		      );
		    }
		    if (options.returning) {
		      return [affectedRows, affectedRows.length];
		    }
		    return [affectedRows];
		  }
		  /**
		   * Decrement the value of one or more columns. This is done in the database, which means it does not use the values
		   * currently stored on the Instance. The decrement is done using a
		   * ```sql SET column = column - X WHERE foo = 'bar'``` query. To get the correct value after a decrement into the Instance
		   * you should do a reload.
		   *
		   * @example decrement number by 1
		   * ```ts
		   * Model.decrement('number', { where: { foo: 'bar' });
		   * ```
		   *
		   * @example decrement number and count by 2
		   * ```ts
		   * Model.decrement(['number', 'count'], { by: 2, where: { foo: 'bar' } });
		   * ```
		   *
		   * @example decrement answer by 42, and decrement tries by -1
		   * ```ts
		   * // `by` is ignored, since each column has its own value
		   * Model.decrement({ answer: 42, tries: -1}, { by: 2, where: { foo: 'bar' } });
		   * ```
		   *
		   * @param {string|Array|object} fields If a string is provided, that column is incremented by the value of `by` given in
		   *   options. If an array is provided, the same is true for each column. If and object is provided, each column is
		   *   incremented by the value given.
		   * @param {object} options decrement options, similar to increment
		   *
		   * @since 4.36.0
		   *
		   * @returns {Promise<Model[],?number>} returns an array of affected rows and affected count with `options.returning` true,
		   *   whenever supported by dialect
		   */
		  static async decrement(fields, options) {
		    return this.increment(fields, {
		      by: 1,
		      ...options,
		      increment: false
		    });
		  }
		  static _optionsMustContainWhere(options) {
		    assert(options && options.where, "Missing where attribute in the options parameter");
		    assert(
		      _.isPlainObject(options.where) || Array.isArray(options.where) || options.where instanceof import_base_sql_expression.BaseSqlExpression,
		      "Expected plain object, array or sequelize method in the options.where parameter"
		    );
		  }
		  /**
		   * Returns a Where Object that can be used to uniquely select this instance, using the instance's primary keys.
		   *
		   * @param {boolean} [checkVersion=false] include version attribute in where hash
		   * @param {boolean} [nullIfImpossible=false] return null instead of throwing an error if the instance is missing its
		   *   primary keys and therefore no Where object can be built.
		   *
		   * @returns {object}
		   */
		  where(checkVersion, nullIfImpossible) {
		    const modelDefinition = this.constructor.modelDefinition;
		    if (modelDefinition.primaryKeysAttributeNames.size === 0) {
		      if (nullIfImpossible) {
		        return null;
		      }
		      throw new Error(
		        `This model instance method needs to be able to identify the entity in a stable way, but the model does not have a primary key attribute definition. Either add a primary key to this model, or use one of the following alternatives:

- instance methods "save", "update", "decrement", "increment": Use the static "update" method instead.
- instance method "reload": Use the static "findOne" method instead.
- instance methods "destroy" and "restore": use the static "destroy" and "restore" methods instead.
        `.trim()
		      );
		    }
		    const where = /* @__PURE__ */ Object.create(null);
		    for (const attributeName of modelDefinition.primaryKeysAttributeNames) {
		      const attrVal = this.get(attributeName, { raw: true });
		      if (attrVal == null) {
		        if (nullIfImpossible) {
		          return null;
		        }
		        throw new TypeError(`This model instance method needs to be able to identify the entity in a stable way, but this model instance is missing the value of its primary key "${attributeName}". Make sure that attribute was not excluded when retrieving the model from the database.`);
		      }
		      where[attributeName] = attrVal;
		    }
		    const versionAttr = modelDefinition.versionAttributeName;
		    if (checkVersion && versionAttr) {
		      where[versionAttr] = this.get(versionAttr, { raw: true });
		    }
		    return where;
		  }
		  toString() {
		    return `[object SequelizeInstance:${this.constructor.name}]`;
		  }
		  /**
		   * Returns the underlying data value
		   *
		   * Unlike {@link Model#get}, this method returns the value as it was retrieved, bypassing
		   * getters, cloning, virtual attributes.
		   *
		   * @param {string} key The name of the attribute to return.
		   * @returns {any}
		   */
		  getDataValue(key) {
		    return this.dataValues[key];
		  }
		  /**
		   * Updates the underlying data value
		   *
		   * Unlike {@link Model#set}, this method skips any special behavior and directly replaces the raw value.
		   *
		   * @param {string} key The name of the attribute to update.
		   * @param {any} value The new value for that attribute.
		   */
		  setDataValue(key, value) {
		    const originalValue = this._previousDataValues[key];
		    if (!_.isEqual(value, originalValue)) {
		      this.changed(key, true);
		    }
		    this.dataValues[key] = value;
		  }
		  /**
		   * If no key is given, returns all values of the instance, also invoking virtual getters.
		   *
		   * If key is given and a field or virtual getter is present for the key it will call that getter - else it will return the
		   * value for key.
		   *
		   * @param {string}  [attributeName] key to get value of
		   * @param {object}  [options] get options
		   *
		   * @returns {object|any}
		   */
		  get(attributeName, options) {
		    var _a;
		    if (options === void 0 && typeof attributeName === "object") {
		      options = attributeName;
		      attributeName = void 0;
		    }
		    options = options ?? import_object.EMPTY_OBJECT;
		    const { attributes, attributesWithGetters } = this.constructor.modelDefinition;
		    if (attributeName) {
		      const attribute = attributes.get(attributeName);
		      if ((attribute == null ? void 0 : attribute.get) && !options.raw) {
		        return attribute.get.call(this, attributeName, options);
		      }
		      if (options.plain && this._options.include && this._options.includeNames.includes(attributeName)) {
		        if (Array.isArray(this.dataValues[attributeName])) {
		          return this.dataValues[attributeName].map((instance) => instance.get(options));
		        }
		        if (this.dataValues[attributeName] instanceof Model) {
		          return this.dataValues[attributeName].get(options);
		        }
		        return this.dataValues[attributeName];
		      }
		      return this.dataValues[attributeName];
		    }
		    if (attributesWithGetters.size > 0 || options.plain && this._options.include || options.clone) {
		      const values = /* @__PURE__ */ Object.create(null);
		      if (attributesWithGetters.size > 0) {
		        for (const attributeName2 of attributesWithGetters) {
		          if (!((_a = this._options.attributes) == null ? void 0 : _a.includes(attributeName2))) {
		            continue;
		          }
		          values[attributeName2] = this.get(attributeName2, options);
		        }
		      }
		      for (const attributeName2 in this.dataValues) {
		        if (!Object.hasOwn(values, attributeName2) && Object.hasOwn(this.dataValues, attributeName2)) {
		          values[attributeName2] = this.get(attributeName2, options);
		        }
		      }
		      return values;
		    }
		    return this.dataValues;
		  }
		  /**
		   * Set is used to update values on the instance (the Sequelize representation of the instance that is, remember that
		   * nothing will be persisted before you actually call `save`). In its most basic form `set` will update a value stored in
		   * the underlying `dataValues` object. However, if a custom setter function is defined for the key, that function will be
		   * called instead. To bypass the setter, you can pass `raw: true` in the options object.
		   *
		   * If set is called with an object, it will loop over the object, and call set recursively for each key, value pair. If
		   * you set raw to true, the underlying dataValues will either be set directly to the object passed, or used to extend
		   * dataValues, if dataValues already contain values.
		   *
		   * When set is called, the previous value of the field is stored and sets a changed flag(see `changed`).
		   *
		   * Set can also be used to build instances for associations, if you have values for those.
		   * When using set with associations you need to make sure the property key matches the alias of the association
		   * while also making sure that the proper include options have been set (from .build() or .findOne())
		   *
		   * If called with a dot.separated key on a JSON/JSONB attribute it will set the value nested and flag the entire object as
		   * changed.
		   *
		   * @param {string|object} key key to set, it can be string or object. When string it will set that key, for object it will
		   *   loop over all object properties nd set them.
		   * @param {any} value value to set
		   * @param {object} [options] set options
		   *
		   * @returns {Model}
		   */
		  set(key, value, options) {
		    let values;
		    let originalValue;
		    const modelDefinition = this.constructor.modelDefinition;
		    if (typeof key === "object" && key !== null) {
		      values = key;
		      options = value || {};
		      if (options.reset) {
		        this.dataValues = {};
		        for (const key2 in values) {
		          this.changed(key2, false);
		        }
		      }
		      const hasDateAttributes = modelDefinition.dateAttributeNames.size > 0;
		      const hasBooleanAttributes = modelDefinition.booleanAttributeNames.size > 0;
		      if (options.raw && !(this._options && this._options.include) && !(options && options.attributes) && !hasDateAttributes && !hasBooleanAttributes) {
		        if (Object.keys(this.dataValues).length > 0) {
		          Object.assign(this.dataValues, values);
		        } else {
		          this.dataValues = values;
		        }
		        this._previousDataValues = { ...this.dataValues };
		      } else {
		        if (options.attributes) {
		          const setKeys = (data) => {
		            for (const k of data) {
		              if (values[k] === void 0) {
		                continue;
		              }
		              this.set(k, values[k], options);
		            }
		          };
		          setKeys(options.attributes);
		          const virtualAttributes = modelDefinition.virtualAttributeNames;
		          if (virtualAttributes.size > 0) {
		            setKeys(virtualAttributes);
		          }
		          if (this._options.includeNames) {
		            setKeys(this._options.includeNames);
		          }
		        } else {
		          for (const key2 in values) {
		            this.set(key2, values[key2], options);
		          }
		        }
		        if (options.raw) {
		          this._previousDataValues = { ...this.dataValues };
		        }
		      }
		      return this;
		    }
		    if (!options) {
		      options = {};
		    }
		    if (!options.raw) {
		      originalValue = this.dataValues[key];
		    }
		    const attributeDefinition = modelDefinition.attributes.get(key);
		    if (!options.raw && (attributeDefinition == null ? void 0 : attributeDefinition.set)) {
		      attributeDefinition.set.call(this, value, key);
		      const newValue = this.dataValues[key];
		      if (!_.isEqual(newValue, originalValue)) {
		        this._previousDataValues[key] = originalValue;
		        this.changed(key, true);
		      }
		    } else {
		      if (this._options && this._options.include && this._options.includeNames.includes(key)) {
		        this._setInclude(key, value, options);
		        return this;
		      }
		      if (!options.raw) {
		        if (!attributeDefinition) {
		          const jsonAttributeNames = modelDefinition.jsonAttributeNames;
		          if (key.includes(".") && jsonAttributeNames.has(key.split(".")[0])) {
		            const previousNestedValue = Dottie.get(this.dataValues, key);
		            if (!_.isEqual(previousNestedValue, value)) {
		              Dottie.set(this.dataValues, key, value);
		              this.changed(key.split(".")[0], true);
		            }
		          }
		          return this;
		        }
		        const primaryKeyNames = modelDefinition.primaryKeysAttributeNames;
		        if (originalValue && primaryKeyNames.has(key)) {
		          return this;
		        }
		        const readOnlyAttributeNames = modelDefinition.readOnlyAttributeNames;
		        if (!this.isNewRecord && readOnlyAttributeNames.has(key)) {
		          return this;
		        }
		      }
		      const attributeType = attributeDefinition == null ? void 0 : attributeDefinition.type;
		      if (!options.comesFromDatabase && value != null && !(value instanceof import_base_sql_expression.BaseSqlExpression) && attributeType && attributeType instanceof import_data_types.AbstractDataType) {
		        value = attributeType.sanitize(value, options);
		      }
		      if (!options.raw && // True when sequelize method
		      (value instanceof import_base_sql_expression.BaseSqlExpression || value != null && attributeType && attributeType instanceof import_data_types.AbstractDataType && !attributeType.areValuesEqual(value, originalValue, options) || (value == null || !attributeType || !(attributeType instanceof import_data_types.AbstractDataType)) && !_.isEqual(value, originalValue))) {
		        this._previousDataValues[key] = originalValue;
		        this.changed(key, true);
		      }
		      this.dataValues[key] = value;
		    }
		    return this;
		  }
		  setAttributes(updates) {
		    return this.set(updates);
		  }
		  /**
		   * If changed is called with a string it will return a boolean indicating whether the value of that key in `dataValues` is
		   * different from the value in `_previousDataValues`.
		   *
		   * If changed is called without an argument, it will return an array of keys that have changed.
		   *
		   * If changed is called without an argument and no keys have changed, it will return `false`.
		   *
		   * Please note that this function will return `false` when a property from a nested (for example JSON) property
		   * was edited manually, you must call `changed('key', true)` manually in these cases.
		   * Writing an entirely new object (eg. deep cloned) will be detected.
		   *
		   * @example
		   * ```
		   * const mdl = await MyModel.findOne();
		   * mdl.myJsonField.a = 1;
		   * console.log(mdl.changed()) => false
		   * mdl.save(); // this will not save anything
		   * mdl.changed('myJsonField', true);
		   * console.log(mdl.changed()) => ['myJsonField']
		   * mdl.save(); // will save
		   * ```
		   *
		   * @param {string} [key] key to check or change status of
		   * @param {any} [value] value to set
		   *
		   * @returns {boolean|Array}
		   */
		  changed(key, value) {
		    if (key === void 0) {
		      if (this._changed.size > 0) {
		        return [...this._changed];
		      }
		      return false;
		    }
		    if (value === true) {
		      this._changed.add(key);
		      return this;
		    }
		    if (value === false) {
		      this._changed.delete(key);
		      return this;
		    }
		    return this._changed.has(key);
		  }
		  /**
		   * Returns the previous value for key from `_previousDataValues`.
		   *
		   * If called without a key, returns the previous values for all values which have changed
		   *
		   * @param {string} [key] key to get previous value of
		   *
		   * @returns {any|Array<any>}
		   */
		  previous(key) {
		    if (key) {
		      return this._previousDataValues[key];
		    }
		    return _.pickBy(this._previousDataValues, (value, key2) => this.changed(key2));
		  }
		  _setInclude(key, value, options) {
		    if (!Array.isArray(value)) {
		      value = [value];
		    }
		    if (value[0] instanceof Model) {
		      value = value.map((instance) => instance.dataValues);
		    }
		    const include = this._options.includeMap[key];
		    const association = include.association;
		    const accessor = key;
		    const primaryKeyAttribute = include.model.primaryKeyAttribute;
		    const childOptions = {
		      isNewRecord: this.isNewRecord,
		      include: include.include,
		      includeNames: include.includeNames,
		      includeMap: include.includeMap,
		      includeValidated: true,
		      raw: options.raw,
		      attributes: include.originalAttributes,
		      comesFromDatabase: options.comesFromDatabase
		    };
		    let isEmpty;
		    if (include.originalAttributes === void 0 || include.originalAttributes.length > 0) {
		      if (association.isSingleAssociation) {
		        if (Array.isArray(value)) {
		          value = value[0];
		        }
		        isEmpty = value && value[primaryKeyAttribute] === null || value === null;
		        this[accessor] = this.dataValues[accessor] = isEmpty ? null : include.model.build(value, childOptions);
		      } else {
		        isEmpty = value[0] && value[0][primaryKeyAttribute] === null;
		        this[accessor] = this.dataValues[accessor] = isEmpty ? [] : include.model.bulkBuild(value, childOptions);
		      }
		    }
		  }
		  /**
		   * Validates this instance, and if the validation passes, persists it to the database.
		   *
		   * Returns a Promise that resolves to the saved instance (or rejects with a {@link ValidationError},
		   * which will have a property for each of the fields for which the validation failed, with the error message for that
		   * field).
		   *
		   * This method is optimized to perform an UPDATE only into the fields that changed.
		   * If nothing has changed, no SQL query will be performed.
		   *
		   * This method is not aware of eager loaded associations.
		   * In other words, if some other model instance (child) was eager loaded with this instance (parent),
		   * and you change something in the child, calling `save()` will simply ignore the change that happened on the child.
		   *
		   * @param {object} [options] save options
		   * @returns {Promise<Model>}
		   */
		  async save(options) {
		    if (arguments.length > 1) {
		      throw new Error("The second argument was removed in favor of the options object.");
		    }
		    options = (0, import_object.cloneDeep)(options) ?? {};
		    options = _.defaults(options, {
		      hooks: true,
		      validate: true
		    });
		    (0, import_model_internals.setTransactionFromCls)(options, this.sequelize);
		    const modelDefinition = this.constructor.modelDefinition;
		    if (!options.fields) {
		      if (this.isNewRecord) {
		        options.fields = Array.from(modelDefinition.attributes.keys());
		      } else {
		        options.fields = _.intersection(this.changed(), Array.from(modelDefinition.attributes.keys()));
		      }
		      options.defaultFields = options.fields;
		    }
		    if (options.returning === void 0) {
		      if (options.association) {
		        options.returning = false;
		      } else if (this.isNewRecord) {
		        options.returning = true;
		      }
		    }
		    const primaryKeyName = this.constructor.primaryKeyAttribute;
		    const primaryKeyAttribute = primaryKeyName && modelDefinition.attributes.get(primaryKeyName);
		    const createdAtAttr = modelDefinition.timestampAttributeNames.createdAt;
		    const versionAttr = modelDefinition.versionAttributeName;
		    const hook = this.isNewRecord ? "Create" : "Update";
		    const wasNewRecord = this.isNewRecord;
		    const now = /* @__PURE__ */ new Date();
		    let updatedAtAttr = modelDefinition.timestampAttributeNames.updatedAt;
		    if (updatedAtAttr && options.fields.length > 0 && !options.fields.includes(updatedAtAttr)) {
		      options.fields.push(updatedAtAttr);
		    }
		    if (versionAttr && options.fields.length > 0 && !options.fields.includes(versionAttr)) {
		      options.fields.push(versionAttr);
		    }
		    if (options.silent === true && !(this.isNewRecord && this.get(updatedAtAttr, { raw: true }))) {
		      _.remove(options.fields, (val) => val === updatedAtAttr);
		      updatedAtAttr = false;
		    }
		    if (this.isNewRecord === true) {
		      if (createdAtAttr && !options.fields.includes(createdAtAttr)) {
		        options.fields.push(createdAtAttr);
		      }
		      if (primaryKeyAttribute && primaryKeyAttribute.defaultValue && !options.fields.includes(primaryKeyName)) {
		        options.fields.unshift(primaryKeyName);
		      }
		    }
		    if (this.isNewRecord === false && primaryKeyName && this.get(primaryKeyName, { raw: true }) === void 0) {
		      throw new Error("You attempted to save an instance with no primary key, this is not allowed since it would result in a global update");
		    }
		    if (updatedAtAttr && !options.silent && options.fields.includes(updatedAtAttr)) {
		      this.dataValues[updatedAtAttr] = this.constructor._getDefaultTimestamp(updatedAtAttr) || now;
		    }
		    if (this.isNewRecord && createdAtAttr && !this.dataValues[createdAtAttr]) {
		      this.dataValues[createdAtAttr] = this.constructor._getDefaultTimestamp(createdAtAttr) || now;
		    }
		    if (this.sequelize.options.dialect === "db2" && this.isNewRecord) {
		      this.uniqno = this.sequelize.dialect.queryGenerator.addUniqueFields(
		        this.dataValues,
		        modelDefinition.rawAttributes,
		        this.uniqno
		      );
		    }
		    if (options.validate) {
		      await this.validate(options);
		    }
		    if (options.hooks) {
		      const beforeHookValues = _.pick(this.dataValues, options.fields);
		      let ignoreChanged = _.difference(this.changed(), options.fields);
		      let hookChanged;
		      let afterHookValues;
		      if (updatedAtAttr && options.fields.includes(updatedAtAttr)) {
		        ignoreChanged = _.without(ignoreChanged, updatedAtAttr);
		      }
		      await this.constructor.hooks.runAsync(`before${hook}`, this, options);
		      await this.constructor.hooks.runAsync(`beforeSave`, this, options);
		      if (options.defaultFields && !this.isNewRecord) {
		        afterHookValues = _.pick(this.dataValues, _.difference(this.changed(), ignoreChanged));
		        hookChanged = [];
		        for (const key of Object.keys(afterHookValues)) {
		          if (afterHookValues[key] !== beforeHookValues[key]) {
		            hookChanged.push(key);
		          }
		        }
		        options.fields = _.uniq(options.fields.concat(hookChanged));
		      }
		      if (hookChanged && options.validate) {
		        options.skip = _.difference(Array.from(modelDefinition.attributes.keys()), hookChanged);
		        await this.validate(options);
		        delete options.skip;
		      }
		    }
		    if (options.fields.length > 0 && this.isNewRecord && this._options.include && this._options.include.length > 0) {
		      await Promise.all(this._options.include.filter((include) => include.association instanceof import_associations.BelongsTo).map(async (include) => {
		        const instance = this.get(include.as);
		        if (!instance) {
		          return;
		        }
		        const includeOptions = _((0, import_object.cloneDeep)(include)).omit(["association"]).defaults({
		          connection: options.connection,
		          transaction: options.transaction,
		          logging: options.logging,
		          parentRecord: this
		        }).value();
		        await instance.save(includeOptions);
		        await this[include.association.accessors.set](instance, { save: false, logging: options.logging });
		      }));
		    }
		    const realFields = options.fields.filter((attributeName) => !modelDefinition.virtualAttributeNames.has(attributeName));
		    if (realFields.length === 0) {
		      return this;
		    }
		    const versionColumnName = versionAttr && modelDefinition.getColumnName(versionAttr);
		    const values = (0, import_format.mapValueFieldNames)(this.dataValues, options.fields, this.constructor);
		    let query;
		    let args;
		    let where;
		    if (!this.isNewRecord) {
		      where = this.where(true);
		      if (versionAttr) {
		        values[versionColumnName] = Number.parseInt(values[versionColumnName], 10) + 1;
		      }
		      query = "update";
		      args = [this, this.constructor.getTableName(options), values, where, options];
		    }
		    if (!this.changed() && !this.isNewRecord) {
		      return this;
		    }
		    if (this.isNewRecord) {
		      query = "insert";
		      args = [this, this.constructor.getTableName(options), values, options];
		    }
		    const [result, rowsUpdated] = await this.constructor.queryInterface[query](...args);
		    if (versionAttr) {
		      if (rowsUpdated < 1) {
		        throw new sequelizeErrors.OptimisticLockError({
		          modelName: this.constructor.name,
		          values,
		          where
		        });
		      } else {
		        result.dataValues[versionAttr] = values[versionColumnName];
		      }
		    }
		    for (const attribute of modelDefinition.attributes.values()) {
		      if (attribute.columnName && values[attribute.columnName] !== void 0 && attribute.columnName !== attribute.attributeName) {
		        values[attribute.attributeName] = values[attribute.columnName];
		        delete values[attribute.columnName];
		      }
		    }
		    Object.assign(values, result.dataValues);
		    Object.assign(result.dataValues, values);
		    if (wasNewRecord && this._options.include && this._options.include.length > 0) {
		      await Promise.all(
		        this._options.include.filter((include) => !(include.association instanceof import_associations.BelongsTo || include.parent && include.parent.association instanceof import_associations.BelongsToMany)).map(async (include) => {
		          let instances = this.get(include.as);
		          if (!instances) {
		            return;
		          }
		          if (!Array.isArray(instances)) {
		            instances = [instances];
		          }
		          const includeOptions = _((0, import_object.cloneDeep)(include)).omit(["association"]).defaults({
		            connection: options.connection,
		            transaction: options.transaction,
		            logging: options.logging,
		            parentRecord: this
		          }).value();
		          await Promise.all(instances.map(async (instance) => {
		            if (include.association instanceof import_associations.BelongsToMany) {
		              await instance.save(includeOptions);
		              const values0 = {
		                [include.association.foreignKey]: this.get(this.constructor.primaryKeyAttribute, { raw: true }),
		                [include.association.otherKey]: instance.get(instance.constructor.primaryKeyAttribute, { raw: true }),
		                // Include values defined in the association
		                ...include.association.through.scope
		              };
		              const throughModel = include.association.through.model;
		              if (instance[throughModel.name]) {
		                const throughDefinition = throughModel.modelDefinition;
		                for (const attribute of throughDefinition.attributes.values()) {
		                  const { attributeName } = attribute;
		                  if (attribute._autoGenerated || attributeName === include.association.foreignKey || attributeName === include.association.otherKey || typeof instance[throughModel.name][attributeName] === "undefined") {
		                    continue;
		                  }
		                  values0[attributeName] = instance[throughModel.name][attributeName];
		                }
		              }
		              await include.association.throughModel.create(values0, includeOptions);
		            } else {
		              instance.set(include.association.foreignKey, this.get(include.association.sourceKey || this.constructor.primaryKeyAttribute, { raw: true }), { raw: true });
		              Object.assign(instance, include.association.scope);
		              await instance.save(includeOptions);
		            }
		          }));
		        })
		      );
		    }
		    if (options.hooks) {
		      await this.constructor.hooks.runAsync(`after${hook}`, result, options);
		      await this.constructor.hooks.runAsync(`afterSave`, result, options);
		    }
		    for (const field of options.fields) {
		      result._previousDataValues[field] = result.dataValues[field];
		      this.changed(field, false);
		    }
		    this.isNewRecord = false;
		    return result;
		  }
		  /**
		   * Refreshes the current instance in-place, i.e. update the object with current data from the DB and return
		   * the same object. This is different from doing a `find(Instance.id)`, because that would create and
		   * return a new instance. With this method, all references to the Instance are updated with the new data
		   * and no new objects are created.
		   *
		   * @param {object} [options] Options that are passed on to `Model.find`
		   *
		   * @returns {Promise<Model>}
		   */
		  async reload(options) {
		    options = (0, import_object.defaults)(
		      { where: this.where() },
		      options,
		      { include: this._options.include || void 0 }
		    );
		    const reloaded = await this.constructor.findOne(options);
		    if (!reloaded) {
		      throw new sequelizeErrors.InstanceError(
		        "Instance could not be reloaded because it does not exist anymore (find call returned null)"
		      );
		    }
		    this._options = reloaded._options;
		    this.set(reloaded.dataValues, {
		      raw: true,
		      reset: !options.attributes
		    });
		    return this;
		  }
		  /**
		   * Validate the attribute of this instance according to validation rules set in the model definition.
		   *
		   * Emits null if and only if validation successful; otherwise an Error instance containing
		   * { field name : [error msgs] } entries.
		  *
		  * @param {object} [options] Options that are passed to the validator
		  * @returns {Promise}
		  */
		  async validate(options) {
		    return new InstanceValidator(this, options).validate();
		  }
		  /**
		   * This is the same as calling {@link Model#set} followed by calling {@link Model#save},
		   * but it only saves attributes values passed to it, making it safer.
		   *
		   * @param {object} values See `set`
		   * @param {object} options See `save`
		   *
		   * @returns {Promise<Model>}
		   */
		  async update(values, options) {
		    values = _.omitBy(values, (value) => value === void 0);
		    const changedBefore = this.changed() || [];
		    if (this.isNewRecord) {
		      throw new Error("You attempted to update an instance that is not persisted.");
		    }
		    options = options ?? import_object.EMPTY_OBJECT;
		    if (Array.isArray(options)) {
		      options = { fields: options };
		    }
		    options = (0, import_object.cloneDeep)(options);
		    const setOptions = (0, import_object.cloneDeep)(options);
		    setOptions.attributes = options.fields;
		    this.set(values, setOptions);
		    const sideEffects = _.without(this.changed(), ...changedBefore);
		    const fields = _.union(Object.keys(values), sideEffects);
		    if (!options.fields) {
		      options.fields = _.intersection(fields, this.changed());
		      options.defaultFields = options.fields;
		    }
		    return await this.save(options);
		  }
		  /**
		   * Destroys the row corresponding to this instance. Depending on your setting for paranoid, the row will either be
		   * completely deleted, or have its deletedAt timestamp set to the current time.
		   *
		   * @param {object} [options={}] destroy options
		   * @returns {Promise}
		   */
		  async destroy(options) {
		    options = {
		      hooks: true,
		      force: false,
		      ...options
		    };
		    (0, import_model_internals.setTransactionFromCls)(options, this.sequelize);
		    const modelDefinition = this.constructor.modelDefinition;
		    if (options.hooks) {
		      await this.constructor.hooks.runAsync("beforeDestroy", this, options);
		    }
		    const where = this.where(true);
		    let result;
		    if (modelDefinition.timestampAttributeNames.deletedAt && options.force === false) {
		      const attributeName = modelDefinition.timestampAttributeNames.deletedAt;
		      const attribute = modelDefinition.attributes.get(attributeName);
		      const defaultValue = attribute.defaultValue ?? null;
		      const currentValue = this.getDataValue(attributeName);
		      const undefinedOrNull = currentValue == null && defaultValue == null;
		      if (undefinedOrNull || _.isEqual(currentValue, defaultValue)) {
		        this.setDataValue(attributeName, /* @__PURE__ */ new Date());
		      }
		      result = await this.save({ ...options, hooks: false });
		    } else {
		      result = await this.constructor.queryInterface.delete(this, this.constructor.getTableName(options), where, { type: import_query_types.QueryTypes.DELETE, limit: null, ...options });
		    }
		    if (options.hooks) {
		      await this.constructor.hooks.runAsync("afterDestroy", this, options);
		    }
		    return result;
		  }
		  /**
		   * Returns true if this instance is "soft deleted".
		   * Throws an error if {@link ModelOptions.paranoid} is not enabled.
		   *
		   * See {@link https://sequelize.org/docs/v7/core-concepts/paranoid/} to learn more about soft deletion / paranoid models.
		   *
		   * @returns {boolean}
		   */
		  isSoftDeleted() {
		    const modelDefinition = this.constructor.modelDefinition;
		    const deletedAtAttributeName = modelDefinition.timestampAttributeNames.deletedAt;
		    if (!deletedAtAttributeName) {
		      throw new Error("Model is not paranoid");
		    }
		    const deletedAtAttribute = modelDefinition.attributes.get(deletedAtAttributeName);
		    const defaultValue = deletedAtAttribute.defaultValue ?? null;
		    const deletedAt = this.get(deletedAtAttributeName) || null;
		    const isSet = deletedAt !== defaultValue;
		    return isSet;
		  }
		  /**
		   * Restores the row corresponding to this instance.
		   * Only available for paranoid models.
		   *
		   * See {@link https://sequelize.org/docs/v7/core-concepts/paranoid/} to learn more about soft deletion / paranoid models.
		   *
		   * @param {object}      [options={}] restore options
		   * @returns {Promise}
		   */
		  async restore(options) {
		    const modelDefinition = this.constructor.modelDefinition;
		    const deletedAtAttributeName = modelDefinition.timestampAttributeNames.deletedAt;
		    if (!deletedAtAttributeName) {
		      throw new Error("Model is not paranoid");
		    }
		    options = {
		      hooks: true,
		      force: false,
		      ...options
		    };
		    (0, import_model_internals.setTransactionFromCls)(options, this.sequelize);
		    if (options.hooks) {
		      await this.constructor.hooks.runAsync("beforeRestore", this, options);
		    }
		    const deletedAtAttribute = modelDefinition.attributes.get(deletedAtAttributeName);
		    const deletedAtDefaultValue = deletedAtAttribute.defaultValue ?? null;
		    this.setDataValue(deletedAtAttributeName, deletedAtDefaultValue);
		    const result = await this.save({ ...options, hooks: false, omitNull: false });
		    if (options.hooks) {
		      await this.constructor.hooks.runAsync("afterRestore", this, options);
		      return result;
		    }
		    return result;
		  }
		  /**
		   * Increment the value of one or more columns. This is done in the database, which means it does not use the values
		   * currently stored on the Instance. The increment is done using a
		   * ```sql
		   * SET column = column + X
		   * ```
		   * query. The updated instance will be returned by default in Postgres. However, in other dialects, you will need to do a
		   * reload to get the new values.
		   *
		   * @example
		   * instance.increment('number') // increment number by 1
		   *
		   * instance.increment(['number', 'count'], { by: 2 }) // increment number and count by 2
		   *
		   * // increment answer by 42, and tries by 1.
		   * // `by` is ignored, since each column has its own value
		   * instance.increment({ answer: 42, tries: 1}, { by: 2 })
		   *
		   * @param {string|Array|object} fields If a string is provided, that column is incremented by the value of `by` given in
		   *   options. If an array is provided, the same is true for each column. If and object is provided, each column is
		   *   incremented by the value given.
		   * @param {object} [options] options
		   *
		   * @returns {Promise<Model>}
		   * @since 4.0.0
		   */
		  async increment(fields, options) {
		    const identifier = this.where();
		    options = (0, import_object.cloneDeep)(options) ?? {};
		    options.where = { ...options.where, ...identifier };
		    options.instance = this;
		    await this.constructor.increment(fields, options);
		    return this;
		  }
		  /**
		   * Decrement the value of one or more columns. This is done in the database, which means it does not use the values
		   * currently stored on the Instance. The decrement is done using a
		   * ```sql
		   * SET column = column - X
		   * ```
		   * query. The updated instance will be returned by default in Postgres. However, in other dialects, you will need to do a
		   * reload to get the new values.
		   *
		   * @example
		   * instance.decrement('number') // decrement number by 1
		   *
		   * instance.decrement(['number', 'count'], { by: 2 }) // decrement number and count by 2
		   *
		   * // decrement answer by 42, and tries by 1.
		   * // `by` is ignored, since each column has its own value
		   * instance.decrement({ answer: 42, tries: 1}, { by: 2 })
		   *
		   * @param {string|Array|object} fields If a string is provided, that column is decremented by the value of `by` given in
		   *   options. If an array is provided, the same is true for each column. If and object is provided, each column is
		   *   decremented by the value given
		   * @param {object}      [options] decrement options
		   * @returns {Promise}
		   */
		  async decrement(fields, options) {
		    return this.increment(fields, {
		      by: 1,
		      ...options,
		      increment: false
		    });
		  }
		  /**
		   * Check whether this and `other` Instance refer to the same row
		   *
		   * @param {Model} other Other instance to compare against
		   *
		   * @returns {boolean}
		   */
		  equals(other) {
		    if (!other || !(other instanceof Model)) {
		      return false;
		    }
		    const modelDefinition = this.constructor.modelDefinition;
		    const otherModelDefinition = this.constructor.modelDefinition;
		    if (modelDefinition !== otherModelDefinition) {
		      return false;
		    }
		    return (0, import_iterators.every)(modelDefinition.primaryKeysAttributeNames, (attribute) => {
		      return this.get(attribute, { raw: true }) === other.get(attribute, { raw: true });
		    });
		  }
		  /**
		   * Check if this is equal to one of `others` by calling equals
		   *
		   * @param {Array<Model>} others An array of instances to check against
		   *
		   * @returns {boolean}
		   */
		  equalsOneOf(others) {
		    return others.some((other) => this.equals(other));
		  }
		  /**
		   * Convert the instance to a JSON representation.
		   * Proxies to calling `get` with no keys.
		   * This means get all values gotten from the DB, and apply all custom getters.
		   *
		   * @see
		   * {@link Model#get}
		   *
		   * @returns {object}
		   */
		  toJSON() {
		    return _.cloneDeep(
		      this.get({
		        plain: true
		      })
		    );
		  }
		  /**
		   * Defines a 1:n association between two models.
		   * The foreign key is added on the target model.
		   *
		   * See {@link https://sequelize.org/docs/v7/core-concepts/assocs/} to learn more about associations.
		   *
		   * @example
		   * ```javascript
		   * Profile.hasMany(User)
		   * ```
		   *
		   * @param {Model} target The model that will be associated with a hasMany relationship
		   * @param {object} options Options for the association
		   * @returns {HasMany} The newly defined association (also available in {@link Model.associations}).
		   */
		  static hasMany(target, options) {
		    return import_associations.HasMany.associate(import_helpers.AssociationSecret, this, target, options);
		  }
		  /**
		   * Create an N:M association with a join table. Defining `through` is required.
		   * The foreign keys are added on the through model.
		   *
		   * See {@link https://sequelize.org/docs/v7/core-concepts/assocs/} to learn more about associations.
		   *
		   * @example
		   * ```javascript
		   * // Automagically generated join model
		   * User.belongsToMany(Project, { through: 'UserProjects' })
		   *
		   * // Join model with additional attributes
		   * const UserProjects = sequelize.define('UserProjects', {
		   *   started: Sequelize.BOOLEAN
		   * })
		   * User.belongsToMany(Project, { through: UserProjects })
		   * ```
		   *
		   * @param {Model} target Target model
		   * @param {object} options belongsToMany association options
		   * @returns {BelongsToMany} The newly defined association (also available in {@link Model.associations}).
		   */
		  static belongsToMany(target, options) {
		    return import_associations.BelongsToMany.associate(import_helpers.AssociationSecret, this, target, options);
		  }
		  /**
		   * Creates a 1:1 association between this model (the source) and the provided target.
		   * The foreign key is added on the target model.
		   *
		   * See {@link https://sequelize.org/docs/v7/core-concepts/assocs/} to learn more about associations.
		   *
		   * @example
		   * ```javascript
		   * User.hasOne(Profile)
		   * ```
		   *
		   * @param {Model} target The model that will be associated with hasOne relationship
		   * @param {object} [options] hasOne association options
		   * @returns {HasOne} The newly defined association (also available in {@link Model.associations}).
		   */
		  static hasOne(target, options) {
		    return import_associations.HasOne.associate(import_helpers.AssociationSecret, this, target, options);
		  }
		  /**
		   * Creates an association between this (the source) and the provided target.
		   * The foreign key is added on the source Model.
		   *
		   * See {@link https://sequelize.org/docs/v7/core-concepts/assocs/} to learn more about associations.
		   *
		   * @example
		   * ```javascript
		   * Profile.belongsTo(User)
		   * ```
		   *
		   * @param {Model} target The target model
		   * @param {object} [options] belongsTo association options
		   * @returns {BelongsTo} The newly defined association (also available in {@link Model.associations}).
		   */
		  static belongsTo(target, options) {
		    return import_associations.BelongsTo.associate(import_helpers.AssociationSecret, this, target, options);
		  }
		}
		function unpackAnd(where) {
		  if (!_.isObject(where)) {
		    return where;
		  }
		  const keys = (0, import_where.getComplexKeys)(where);
		  if (keys.length === 0) {
		    return;
		  }
		  if (keys.length !== 1 || keys[0] !== import_operators.Op.and) {
		    return where;
		  }
		  const andParts = where[import_operators.Op.and];
		  return andParts;
		}
		function combineWheresWithAnd(whereA, whereB) {
		  const unpackedA = unpackAnd(whereA);
		  if (unpackedA === void 0) {
		    return whereB;
		  }
		  const unpackedB = unpackAnd(whereB);
		  if (unpackedB === void 0) {
		    return whereA;
		  }
		  return {
		    [import_operators.Op.and]: [unpackedA, unpackedB].flat()
		  };
		}
		
		return model;
	}

	var modelUtils;
	var hasRequiredModelUtils;

	function requireModelUtils () {
		if (hasRequiredModelUtils) return modelUtils;
		hasRequiredModelUtils = 1;
		var __defProp = Object.defineProperty;
		var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
		var __getOwnPropNames = Object.getOwnPropertyNames;
		var __hasOwnProp = Object.prototype.hasOwnProperty;
		var __export = (target, all) => {
		  for (var name in all)
		    __defProp(target, name, { get: all[name], enumerable: true });
		};
		var __copyProps = (to, from, except, desc) => {
		  if (from && typeof from === "object" || typeof from === "function") {
		    for (let key of __getOwnPropNames(from))
		      if (!__hasOwnProp.call(to, key) && key !== except)
		        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
		  }
		  return to;
		};
		var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
		var model_utils_exports = {};
		__export(model_utils_exports, {
		  isModelStatic: () => isModelStatic,
		  isSameInitialModel: () => isSameInitialModel
		});
		modelUtils = __toCommonJS(model_utils_exports);
		function isModelStatic(val) {
		  const { Model: TmpModel } = requireModel();
		  return typeof val === "function" && val.prototype instanceof TmpModel;
		}
		function isSameInitialModel(a, b) {
		  return isModelStatic(a) && isModelStatic(b) && a.getInitialModel() === b.getInitialModel();
		}
		
		return modelUtils;
	}

	var modelInternals;
	var hasRequiredModelInternals;

	function requireModelInternals () {
		if (hasRequiredModelInternals) return modelInternals;
		hasRequiredModelInternals = 1;
		var __create = Object.create;
		var __defProp = Object.defineProperty;
		var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
		var __getOwnPropNames = Object.getOwnPropertyNames;
		var __getProtoOf = Object.getPrototypeOf;
		var __hasOwnProp = Object.prototype.hasOwnProperty;
		var __export = (target, all) => {
		  for (var name in all)
		    __defProp(target, name, { get: all[name], enumerable: true });
		};
		var __copyProps = (to, from, except, desc) => {
		  if (from && typeof from === "object" || typeof from === "function") {
		    for (let key of __getOwnPropNames(from))
		      if (!__hasOwnProp.call(to, key) && key !== except)
		        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
		  }
		  return to;
		};
		var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
		  // If the importer is in node compatibility mode or this is not an ESM
		  // file that has been converted to a CommonJS file using a Babel-
		  // compatible transform (i.e. "__esModule" has not been set), then set
		  // "default" to the CommonJS "module.exports" for node compatibility.
		  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
		  mod
		));
		var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
		var model_internals_exports = {};
		__export(model_internals_exports, {
		  _validateIncludedElements: () => _validateIncludedElements,
		  combineIncludes: () => combineIncludes,
		  conformIndex: () => conformIndex,
		  setTransactionFromCls: () => setTransactionFromCls,
		  throwInvalidInclude: () => throwInvalidInclude
		});
		modelInternals = __toCommonJS(model_internals_exports);
		var import_node_util = __toESM(require$$0$1);
		var import_errors = errors;
		var import_model_utils = requireModelUtils();
		function _validateIncludedElements(options, tableNames = {}) {
		  if (!(0, import_model_utils.isModelStatic)(options.model)) {
		    throw new TypeError("options.model must be provided, and a Model subclass.");
		  }
		  const ModelSubclass = options.model;
		  options.includeNames = [];
		  options.includeMap = {};
		  options.hasSingleAssociation = false;
		  options.hasMultiAssociation = false;
		  if (!options.parent) {
		    options.topModel = options.model;
		    options.topLimit = options.limit;
		  }
		  options.include = options.include.map((include) => {
		    include = ModelSubclass._conformInclude(include, options.model);
		    include.parent = options;
		    include.topLimit = options.topLimit;
		    ModelSubclass._validateIncludedElement.call(options.model, include, tableNames, options);
		    if (include.duplicating === void 0) {
		      include.duplicating = include.association.isMultiAssociation;
		    }
		    include.hasDuplicating = include.hasDuplicating || include.duplicating;
		    include.hasRequired = include.hasRequired || include.required;
		    options.hasDuplicating = options.hasDuplicating || include.hasDuplicating;
		    options.hasRequired = options.hasRequired || include.required;
		    options.hasWhere = options.hasWhere || include.hasWhere || Boolean(include.where);
		    return include;
		  });
		  for (const include of options.include) {
		    include.hasParentWhere = options.hasParentWhere || Boolean(options.where);
		    include.hasParentRequired = options.hasParentRequired || Boolean(options.required);
		    if (include.subQuery !== false && options.hasDuplicating && options.topLimit) {
		      if (include.duplicating) {
		        include.subQuery = include.subQuery || false;
		        include.subQueryFilter = include.hasRequired;
		      } else {
		        include.subQuery = include.hasRequired;
		        include.subQueryFilter = false;
		      }
		    } else {
		      include.subQuery = include.subQuery || false;
		      if (include.duplicating) {
		        include.subQueryFilter = include.subQuery;
		      } else {
		        include.subQueryFilter = false;
		        include.subQuery = include.subQuery || include.hasParentRequired && include.hasRequired && !include.separate;
		      }
		    }
		    options.includeMap[include.as] = include;
		    options.includeNames.push(include.as);
		    if (options.topModel === options.model && options.subQuery === void 0 && options.topLimit) {
		      if (include.subQuery) {
		        options.subQuery = include.subQuery;
		      } else if (include.hasDuplicating) {
		        options.subQuery = true;
		      }
		    }
		    options.hasIncludeWhere = options.hasIncludeWhere || include.hasIncludeWhere || Boolean(include.where);
		    options.hasIncludeRequired = options.hasIncludeRequired || include.hasIncludeRequired || Boolean(include.required);
		    if (include.association.isMultiAssociation || include.hasMultiAssociation) {
		      options.hasMultiAssociation = true;
		    }
		    if (include.association.isSingleAssociation || include.hasSingleAssociation) {
		      options.hasSingleAssociation = true;
		    }
		  }
		  if (options.topModel === options.model && options.subQuery === void 0) {
		    options.subQuery = false;
		  }
		  return options;
		}
		function combineIncludes(a, b) {
		  if (a == null) {
		    return b;
		  }
		  if (b == null) {
		    return a;
		  }
		  if (!Array.isArray(a) || !Array.isArray(b)) {
		    throw new TypeError("Includes should have already been normalized before calling this method, but it received something else than an array.");
		  }
		  const combinedIncludes = [...a];
		  for (const newInclude of b) {
		    const existingIndex = combinedIncludes.findIndex((include) => {
		      if (!include.association || !newInclude.association) {
		        throw new TypeError("Include should have been normalized");
		      }
		      return include.association === newInclude.association;
		    });
		    if (existingIndex === -1) {
		      combinedIncludes.push(newInclude);
		      continue;
		    }
		    const ModelClass = newInclude.model;
		    ModelClass._assignOptions(combinedIncludes[existingIndex], newInclude);
		  }
		  return combinedIncludes;
		}
		function throwInvalidInclude(include) {
		  throw new import_errors.EagerLoadingError(`Invalid Include received. Include has to be either a Model, an Association, the name of an association, or a plain object compatible with IncludeOptions.
Got ${import_node_util.default.inspect(include)} instead`);
		}
		function setTransactionFromCls(options, sequelize) {
		  var _a;
		  if (options.transaction && (options.connection && options.connection !== options.transaction.getConnection())) {
		    throw new Error(`You are using mismatching "transaction" and "connection" options. Please pass either one of them, or make sure they're both using the same connection.`);
		  }
		  if (options.transaction === void 0 && options.connection == null) {
		    options.transaction = sequelize.getCurrentClsTransaction();
		  }
		  if (options.connection) {
		    const clsTransaction = sequelize.getCurrentClsTransaction();
		    const transactionConnection = clsTransaction == null ? void 0 : clsTransaction.getConnectionIfExists();
		    if (transactionConnection && transactionConnection === options.connection) {
		      options.transaction = clsTransaction;
		    }
		  } else {
		    options.connection = (_a = options.transaction) == null ? void 0 : _a.getConnectionIfExists();
		  }
		}
		function conformIndex(index) {
		  if (!index.fields) {
		    throw new Error('Missing "fields" property for index definition');
		  }
		  index = { ...index };
		  if (index.type && index.type.toLowerCase() === "unique") {
		    index.unique = true;
		    delete index.type;
		  }
		  return index;
		}
		
		return modelInternals;
	}

	var __defProp$e = Object.defineProperty;
	var __getOwnPropDesc$e = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames$e = Object.getOwnPropertyNames;
	var __hasOwnProp$e = Object.prototype.hasOwnProperty;
	var __export$e = (target, all) => {
	  for (var name in all)
	    __defProp$e(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps$e = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames$e(from))
	      if (!__hasOwnProp$e.call(to, key) && key !== except)
	        __defProp$e(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc$e(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS$e = (mod) => __copyProps$e(__defProp$e({}, "__esModule", { value: true }), mod);
	var decorator_utils_exports = {};
	__export$e(decorator_utils_exports, {
	  DECORATOR_NO_DEFAULT: () => DECORATOR_NO_DEFAULT,
	  createOptionallyParameterizedPropertyDecorator: () => createOptionallyParameterizedPropertyDecorator,
	  createParameterizedPropertyDecorator: () => createParameterizedPropertyDecorator,
	  getClassName: () => getClassName,
	  getPropertyName: () => getPropertyName,
	  throwMustBeAttribute: () => throwMustBeAttribute,
	  throwMustBeInstanceProperty: () => throwMustBeInstanceProperty,
	  throwMustBeMethod: () => throwMustBeMethod,
	  throwMustBeModel: () => throwMustBeModel,
	  throwMustBeStaticProperty: () => throwMustBeStaticProperty
	});
	var decoratorUtils = __toCommonJS$e(decorator_utils_exports);
	const DECORATOR_NO_DEFAULT = Symbol("DECORATOR_NO_DEFAULT");
	function createParameterizedPropertyDecorator(name, callback) {
	  return createOptionallyParameterizedPropertyDecorator(name, DECORATOR_NO_DEFAULT, callback);
	}
	function createOptionallyParameterizedPropertyDecorator(name, defaultValue, callback) {
	  return function decorator(...args) {
	    if (args.length === 0 || args.length === 1) {
	      return function parameterizedDecorator(target, propertyName, propertyDescriptor) {
	        const value = args[0] ?? defaultValue;
	        if (value === DECORATOR_NO_DEFAULT) {
	          throw new Error(`Decorator @${name} requires an argument (used on ${getPropertyName(target, propertyName)})`);
	        }
	        callback(value, target, propertyName, propertyDescriptor ?? Object.getOwnPropertyDescriptor(target, propertyName));
	      };
	    }
	    if (defaultValue === DECORATOR_NO_DEFAULT) {
	      throw new Error(`Decorator @${name} requires an argument (used on ${getPropertyName(args[0], args[1])})`);
	    }
	    callback(defaultValue, args[0], args[1], args[2] ?? Object.getOwnPropertyDescriptor(args[0], args[1]));
	    return void 0;
	  };
	}
	function throwMustBeStaticProperty(decoratorName, target, propertyName) {
	  throw new TypeError(
	    `Decorator @${decoratorName} has been used on ${getPropertyName(target, propertyName)}, which is an instance property. This decorator can only be used on static properties, setters and getters.`
	  );
	}
	function throwMustBeModel(decoratorName, target, propertyName) {
	  throw new TypeError(
	    `Decorator @${decoratorName} has been used on ${getPropertyName(target, propertyName)}, but class "${getClassName(target)}" does not extend Model. This decorator can only be used on models.`
	  );
	}
	function throwMustBeInstanceProperty(decoratorName, target, propertyName) {
	  throw new TypeError(
	    `Decorator @${decoratorName} has been used on ${getPropertyName(target, propertyName)}, which is static. This decorator can only be used on instance properties, setters and getters.`
	  );
	}
	function throwMustBeMethod(decoratorName, target, propertyName) {
	  throw new TypeError(
	    `Decorator @${decoratorName} has been used on ${getPropertyName(target, propertyName)}, which is not a method. This decorator can only be used on methods.`
	  );
	}
	function throwMustBeAttribute(decoratorName, target, propertyName) {
	  throw new TypeError(
	    `Decorator @${decoratorName} has been used on ${getPropertyName(target, propertyName)}, which is a symbol field. Symbol Model Attributes are not currently supported. We welcome a PR that implements this feature.`
	  );
	}
	function getPropertyName(obj, property) {
	  if (typeof obj === "function") {
	    return `${obj.name}.${String(property)}`;
	  }
	  return `${obj.constructor.name}#${String(property)}`;
	}
	function getClassName(obj) {
	  if (typeof obj === "function") {
	    return obj.name;
	  }
	  return obj.constructor.name;
	}

	var __defProp$d = Object.defineProperty;
	var __getOwnPropDesc$d = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames$d = Object.getOwnPropertyNames;
	var __hasOwnProp$d = Object.prototype.hasOwnProperty;
	var __export$d = (target, all) => {
	  for (var name in all)
	    __defProp$d(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps$d = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames$d(from))
	      if (!__hasOwnProp$d.call(to, key) && key !== except)
	        __defProp$d(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc$d(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS$d = (mod) => __copyProps$d(__defProp$d({}, "__esModule", { value: true }), mod);
	var associations_exports = {};
	__export$d(associations_exports, {
	  BelongsTo: () => BelongsTo,
	  BelongsToMany: () => BelongsToMany,
	  HasMany: () => HasMany,
	  HasOne: () => HasOne,
	  initDecoratedAssociations: () => initDecoratedAssociations
	});
	var associations = __toCommonJS$d(associations_exports);
	var import_node_util = require$$0$1;
	var import_helpers = requireHelpers();
	var import_associations$1 = requireAssociations();
	var import_check = requireCheck();
	var import_model_utils$1 = requireModelUtils();
	var import_object$3 = object$1;
	var import_decorator_utils = decoratorUtils;
	const registeredAssociations = /* @__PURE__ */ new WeakMap();
	function decorateAssociation(type, source, target, associationName, options) {
	  if (typeof source === "function") {
	    (0, import_decorator_utils.throwMustBeInstanceProperty)(type, source, associationName);
	  }
	  const sourceClass = source.constructor;
	  if (!(0, import_model_utils$1.isModelStatic)(sourceClass)) {
	    (0, import_decorator_utils.throwMustBeModel)(type, source, associationName);
	  }
	  if (typeof associationName === "symbol") {
	    throw new TypeError("Symbol associations are not currently supported. We welcome a PR that implements this feature.");
	  }
	  const associations = registeredAssociations.get(sourceClass) ?? [];
	  registeredAssociations.set(sourceClass, associations);
	  associations.push({ source: sourceClass, target, options, associationName, type });
	}
	function HasOne(target, optionsOrForeignKey) {
	  return (source, associationName) => {
	    const options = (0, import_check.isString)(optionsOrForeignKey) ? { foreignKey: optionsOrForeignKey } : optionsOrForeignKey;
	    decorateAssociation("HasOne", source, target, associationName, options);
	  };
	}
	function HasMany(target, optionsOrForeignKey) {
	  return (source, associationName) => {
	    const options = (0, import_check.isString)(optionsOrForeignKey) ? { foreignKey: optionsOrForeignKey } : optionsOrForeignKey;
	    decorateAssociation("HasMany", source, target, associationName, options);
	  };
	}
	function BelongsTo(target, optionsOrForeignKey) {
	  return (source, associationName) => {
	    const options = (0, import_check.isString)(optionsOrForeignKey) ? { foreignKey: optionsOrForeignKey } : optionsOrForeignKey;
	    decorateAssociation("BelongsTo", source, target, associationName, options);
	  };
	}
	function BelongsToMany(target, options) {
	  return (source, associationName) => {
	    decorateAssociation("BelongsToMany", source, target, associationName, options);
	  };
	}
	function initDecoratedAssociations(source, sequelize) {
	  const associations = getDeclaredAssociations(source);
	  if (!associations.length) {
	    return;
	  }
	  for (const association of associations) {
	    const { type, target: targetGetter, associationName } = association;
	    const options = { ...association.options, as: associationName };
	    const target = (0, import_helpers.getForwardedModel)(targetGetter, sequelize);
	    switch (type) {
	      case "BelongsTo":
	        import_associations$1.BelongsTo.associate(import_helpers.AssociationSecret, source, target, options);
	        break;
	      case "HasOne":
	        import_associations$1.HasOne.associate(import_helpers.AssociationSecret, source, target, options);
	        break;
	      case "HasMany":
	        import_associations$1.HasMany.associate(import_helpers.AssociationSecret, source, target, options);
	        break;
	      case "BelongsToMany":
	        import_associations$1.BelongsToMany.associate(import_helpers.AssociationSecret, source, target, options);
	        break;
	      default:
	        throw new Error(`Unknown association type: ${type}`);
	    }
	  }
	}
	function getDeclaredAssociations(model) {
	  const associations = registeredAssociations.get(model) ?? import_object$3.EMPTY_ARRAY;
	  const parentModel = Object.getPrototypeOf(model);
	  if ((0, import_model_utils$1.isModelStatic)(parentModel)) {
	    const parentAssociations = getDeclaredAssociations(parentModel);
	    for (const parentAssociation of parentAssociations) {
	      if (parentAssociation.type !== "BelongsTo") {
	        throw new Error(
	          `Models that use @HasOne, @HasMany, or @BelongsToMany associations cannot be inherited from, as they would add conflicting foreign keys on the target model.
Only @BelongsTo associations can be inherited, as it will add the foreign key on the source model.
Remove the ${parentAssociation.type} association ${(0, import_node_util.inspect)(parentAssociation.associationName)} from model ${(0, import_node_util.inspect)(parentModel.name)} to fix this error.`
	        );
	      }
	      if ("inverse" in parentAssociation.options) {
	        throw new Error(
	          `Models that use @BelongsTo associations with the "inverse" option cannot be inherited from, as they would add conflicting associations on the target model.
Only @BelongsTo associations without the "inverse" option can be inherited, as they do not declare an association on the target model.
Remove the "inverse" option from association ${(0, import_node_util.inspect)(parentAssociation.associationName)} on model ${(0, import_node_util.inspect)(parentModel.name)} to fix this error.`
	        );
	      }
	    }
	    return [...parentAssociations, ...associations];
	  }
	  return associations;
	}

	var __create$6 = Object.create;
	var __defProp$c = Object.defineProperty;
	var __getOwnPropDesc$c = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames$c = Object.getOwnPropertyNames;
	var __getProtoOf$6 = Object.getPrototypeOf;
	var __hasOwnProp$c = Object.prototype.hasOwnProperty;
	var __export$c = (target, all) => {
	  for (var name in all)
	    __defProp$c(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps$c = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames$c(from))
	      if (!__hasOwnProp$c.call(to, key) && key !== except)
	        __defProp$c(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc$c(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toESM$6 = (mod, isNodeMode, target) => (target = mod != null ? __create$6(__getProtoOf$6(mod)) : {}, __copyProps$c(
	  // If the importer is in node compatibility mode or this is not an ESM
	  // file that has been converted to a CommonJS file using a Babel-
	  // compatible transform (i.e. "__esModule" has not been set), then set
	  // "default" to the CommonJS "module.exports" for node compatibility.
	  isNodeMode || !mod || !mod.__esModule ? __defProp$c(target, "default", { value: mod, enumerable: true }) : target,
	  mod
	));
	var __toCommonJS$c = (mod) => __copyProps$c(__defProp$c({}, "__esModule", { value: true }), mod);
	var transaction_exports = {};
	__export$c(transaction_exports, {
	  IsolationLevel: () => IsolationLevel,
	  Lock: () => Lock,
	  Transaction: () => Transaction$1,
	  TransactionNestMode: () => TransactionNestMode,
	  TransactionType: () => TransactionType,
	  assertTransactionIsCompatibleWithOptions: () => assertTransactionIsCompatibleWithOptions,
	  normalizeTransactionOptions: () => normalizeTransactionOptions
	});
	var transaction = __toCommonJS$c(transaction_exports);
	var import_node_assert$2 = __toESM$6(require$$0$4);
	var import_object$2 = object$1;
	let Transaction$1 = class Transaction {
	  sequelize;
	  #afterCommitHooks = /* @__PURE__ */ new Set();
	  #afterRollbackHooks = /* @__PURE__ */ new Set();
	  #afterHooks = /* @__PURE__ */ new Set();
	  savepoints = [];
	  options;
	  parent;
	  id;
	  name;
	  finished;
	  #connection;
	  /**
	   * Creates a new transaction instance
	   *
	   * @param sequelize A configured sequelize Instance
	   * @param options An object with options
	   * @param [options.type] Sets the type of the transaction. Sqlite only
	   * @param [options.isolationLevel] Sets the isolation level of the transaction.
	   * @param [options.constraintChecking] Sets the constraints to be deferred or immediately checked. PostgreSQL only
	   */
	  constructor(sequelize, options) {
	    this.sequelize = sequelize;
	    const generateTransactionId = this.sequelize.dialect.queryGenerator.generateTransactionId;
	    const normalizedOptions = normalizeTransactionOptions(this.sequelize, options);
	    this.parent = normalizedOptions.transaction ?? null;
	    delete normalizedOptions.transaction;
	    this.options = Object.freeze(normalizedOptions);
	    if (this.parent) {
	      this.id = this.parent.id;
	      this.parent.savepoints.push(this);
	      this.name = `${this.id}-sp-${this.parent.savepoints.length}`;
	    } else {
	      const id = generateTransactionId();
	      this.id = id;
	      this.name = id;
	    }
	  }
	  getConnection() {
	    if (!this.#connection) {
	      throw new Error("This transaction is not bound to a connection.");
	    }
	    return this.#connection;
	  }
	  getConnectionIfExists() {
	    return this.#connection;
	  }
	  /**
	   * Commit the transaction.
	   */
	  async commit() {
	    if (this.finished) {
	      throw new Error(`Transaction cannot be committed because it has been finished with state: ${this.finished}`);
	    }
	    try {
	      await this.sequelize.getQueryInterface().commitTransaction(this, this.options);
	      await this.#dispatchHooks(this.#afterCommitHooks);
	      await this.#dispatchHooks(this.#afterHooks);
	      this.cleanup();
	    } catch (error) {
	      console.warn(`Committing transaction ${this.id} failed with error ${error instanceof Error ? JSON.stringify(error.message) : String(error)}. We are killing its connection as it is now in an undetermined state.`);
	      await this.forceCleanup();
	      throw error;
	    } finally {
	      this.finished = "commit";
	    }
	  }
	  /**
	   * Rollback (abort) the transaction
	   */
	  async rollback() {
	    if (this.finished) {
	      throw new Error(`Transaction cannot be rolled back because it has been finished with state: ${this.finished}`);
	    }
	    if (!this.#connection) {
	      throw new Error("Transaction cannot be rolled back because it never started");
	    }
	    try {
	      await this.sequelize.getQueryInterface().rollbackTransaction(this, this.options);
	      await this.#dispatchHooks(this.#afterRollbackHooks);
	      await this.#dispatchHooks(this.#afterHooks);
	      this.cleanup();
	    } catch (error) {
	      console.warn(`Rolling back transaction ${this.id} failed with error ${error instanceof Error ? JSON.stringify(error.message) : String(error)}. We are killing its connection as it is now in an undetermined state.`);
	      await this.forceCleanup();
	      throw error;
	    }
	  }
	  async #dispatchHooks(hooks) {
	    for (const hook of hooks) {
	      await Reflect.apply(hook, this, [this]);
	    }
	  }
	  /**
	   * Called to acquire a connection to use and set the correct options on the connection.
	   * We should ensure all the environment that's set up is cleaned up in `cleanup()` below.
	   */
	  async prepareEnvironment() {
	    let connection;
	    if (this.parent) {
	      connection = this.parent.#connection;
	    } else {
	      connection = await this.sequelize.connectionManager.getConnection({
	        type: this.options.readOnly ? "read" : "write",
	        uuid: this.id
	      });
	    }
	    (0, import_node_assert$2.default)(connection != null, "Transaction failed to acquire Connection.");
	    connection.uuid = this.id;
	    this.#connection = connection;
	    let result;
	    try {
	      await this.begin();
	      result = await this.setDeferrable();
	    } catch (error) {
	      try {
	        await this.rollback();
	      } finally {
	        throw error;
	      }
	    }
	    return result;
	  }
	  async setDeferrable() {
	    if (this.options.constraintChecking) {
	      await this.sequelize.getQueryInterface().deferConstraints(this.options.constraintChecking, { transaction: this });
	    }
	  }
	  async begin() {
	    const queryInterface = this.sequelize.getQueryInterface();
	    if (this.sequelize.dialect.supports.settingIsolationLevelDuringTransaction) {
	      await queryInterface.startTransaction(this, this.options);
	      if (this.options.isolationLevel) {
	        await queryInterface.setIsolationLevel(this, this.options.isolationLevel, this.options);
	      }
	      return;
	    }
	    if (this.options.isolationLevel) {
	      await queryInterface.setIsolationLevel(this, this.options.isolationLevel, this.options);
	    }
	    await queryInterface.startTransaction(this, this.options);
	  }
	  cleanup() {
	    var _a;
	    if (this.parent || ((_a = this.#connection) == null ? void 0 : _a.uuid) === void 0) {
	      return;
	    }
	    this.sequelize.connectionManager.releaseConnection(this.#connection);
	    this.#connection.uuid = void 0;
	    this.#connection = void 0;
	  }
	  /**
	   * Kills the connection this transaction uses.
	   * Used as a last resort, for instance because COMMIT or ROLLBACK resulted in an error
	   * and the transaction is left in a broken state,
	   * and releasing the connection to the pool would be dangerous.
	   */
	  async forceCleanup() {
	    var _a;
	    if (this.parent || ((_a = this.#connection) == null ? void 0 : _a.uuid) === void 0) {
	      return;
	    }
	    this.#connection.uuid = void 0;
	    const connection = this.#connection;
	    this.#connection = void 0;
	    await this.sequelize.connectionManager.destroyConnection(connection);
	  }
	  /**
	   * Adds a hook that is run after a transaction is committed.
	   *
	   * @param callback A callback function that is called with the transaction
	   */
	  afterCommit(callback) {
	    if (typeof callback !== "function") {
	      throw new TypeError('"callback" must be a function');
	    }
	    this.#afterCommitHooks.add(callback);
	    return this;
	  }
	  /**
	   * Adds a hook that is run after a transaction is rolled back.
	   *
	   * @param callback A callback function that is called with the transaction
	   */
	  afterRollback(callback) {
	    if (typeof callback !== "function") {
	      throw new TypeError('"callback" must be a function');
	    }
	    this.#afterRollbackHooks.add(callback);
	    return this;
	  }
	  /**
	   * Adds a hook that is run after a transaction completes, no matter if it was committed or rolled back.
	   *
	   * @param callback A callback function that is called with the transaction
	   */
	  afterTransaction(callback) {
	    if (typeof callback !== "function") {
	      throw new TypeError('"callback" must be a function');
	    }
	    this.#afterHooks.add(callback);
	    return this;
	  }
	  /**
	   * Types can be set per-transaction by passing `options.type` to `sequelize.transaction`.
	   * Default to `DEFERRED` but you can override the default type by passing `options.transactionType` in `new Sequelize`.
	   * Sqlite only.
	   *
	   * Pass in the desired level as the first argument:
	   *
	   * @example
	   * try {
	   *   await sequelize.transaction({ type: Sequelize.Transaction.TYPES.EXCLUSIVE }, transaction => {
	   *      // your transactions
	   *   });
	   *   // transaction has been committed. Do something after the commit if required.
	   * } catch(err) {
	   *   // do something with the err.
	   * }
	   *
	   * @property DEFERRED
	   * @property IMMEDIATE
	   * @property EXCLUSIVE
	   *
	   * @deprecated use the {@link TransactionType} export
	   */
	  static get TYPES() {
	    return TransactionType;
	  }
	  /**
	   * Isolation levels can be set per-transaction by passing `options.isolationLevel` to `sequelize.transaction`.
	   * Sequelize uses the default isolation level of the database, you can override this by passing `options.isolationLevel` in Sequelize constructor options.
	   *
	   * Pass in the desired level as the first argument:
	   *
	   * @example
	   * try {
	   *   const result = await sequelize.transaction({isolationLevel: Sequelize.Transaction.ISOLATION_LEVELS.SERIALIZABLE}, transaction => {
	   *     // your transactions
	   *   });
	   *   // transaction has been committed. Do something after the commit if required.
	   * } catch(err) {
	   *   // do something with the err.
	   * }
	   *
	   * @property READ_UNCOMMITTED
	   * @property READ_COMMITTED
	   * @property REPEATABLE_READ
	   * @property SERIALIZABLE
	   *
	   * @deprecated use the {@link IsolationLevel} export
	   */
	  static get ISOLATION_LEVELS() {
	    return IsolationLevel;
	  }
	  /**
	   * Possible options for row locking. Used in conjunction with `find` calls:
	   *
	   * @example
	   * // t1 is a transaction
	   * Model.findAll({
	   *   where: ...,
	   *   transaction: t1,
	   *   lock: t1.LOCK...
	   * });
	   *
	   * @example Postgres also supports specific locks while eager loading by using OF:
	   * ```ts
	   * UserModel.findAll({
	   *   where: ...,
	   *   include: [TaskModel, ...],
	   *   transaction: t1,
	   *   lock: {
	   *     level: t1.LOCK...,
	   *     of: UserModel
	   *   }
	   * });
	   * ```
	   *
	   * UserModel will be locked but TaskModel won't!
	   *
	   * @example You can also skip locked rows:
	   * ```ts
	   * // t1 is a transaction
	   * Model.findAll({
	   *   where: ...,
	   *   transaction: t1,
	   *   lock: true,
	   *   skipLocked: true
	   * });
	   * ```
	   *
	   * The query will now return any rows that aren't locked by another transaction
	   *
	   * @returns possible options for row locking
	   * @property UPDATE
	   * @property SHARE
	   * @property KEY_SHARE Postgres 9.3+ only
	   * @property NO_KEY_UPDATE Postgres 9.3+ only
	   *
	   * @deprecated use the {@link Lock} export
	   */
	  static get LOCK() {
	    return Lock;
	  }
	  /**
	   * Same as {@link Transaction.LOCK}, but can also be called on instances of
	   * transactions to get possible options for row locking directly from the
	   * instance.
	   *
	   * @deprecated use the {@link Lock} export
	   */
	  get LOCK() {
	    return Lock;
	  }
	  /**
	   * Get the root transaction if nested, or self if this is a root transaction
	   */
	  get rootTransaction() {
	    if (this.parent !== null) {
	      return this.parent.rootTransaction;
	    }
	    return this;
	  }
	};
	var IsolationLevel = /* @__PURE__ */ ((IsolationLevel2) => {
	  IsolationLevel2["READ_UNCOMMITTED"] = "READ UNCOMMITTED";
	  IsolationLevel2["READ_COMMITTED"] = "READ COMMITTED";
	  IsolationLevel2["REPEATABLE_READ"] = "REPEATABLE READ";
	  IsolationLevel2["SERIALIZABLE"] = "SERIALIZABLE";
	  return IsolationLevel2;
	})(IsolationLevel || {});
	var TransactionType = /* @__PURE__ */ ((TransactionType2) => {
	  TransactionType2["DEFERRED"] = "DEFERRED";
	  TransactionType2["IMMEDIATE"] = "IMMEDIATE";
	  TransactionType2["EXCLUSIVE"] = "EXCLUSIVE";
	  return TransactionType2;
	})(TransactionType || {});
	var Lock = /* @__PURE__ */ ((Lock2) => {
	  Lock2["UPDATE"] = "UPDATE";
	  Lock2["SHARE"] = "SHARE";
	  Lock2["KEY_SHARE"] = "KEY SHARE";
	  Lock2["NO_KEY_UPDATE"] = "NO KEY UPDATE";
	  return Lock2;
	})(Lock || {});
	var TransactionNestMode = /* @__PURE__ */ ((TransactionNestMode2) => {
	  TransactionNestMode2["reuse"] = "reuse";
	  TransactionNestMode2["savepoint"] = "savepoint";
	  TransactionNestMode2["separate"] = "separate";
	  return TransactionNestMode2;
	})(TransactionNestMode || {});
	function normalizeTransactionOptions(sequelize, options = import_object$2.EMPTY_OBJECT) {
	  return {
	    ...options,
	    type: options.type ?? sequelize.options.transactionType,
	    isolationLevel: options.isolationLevel === void 0 ? sequelize.options.isolationLevel ?? null : options.isolationLevel,
	    readOnly: options.readOnly ?? false,
	    constraintChecking: typeof options.constraintChecking === "function" ? new options.constraintChecking() : options.constraintChecking
	  };
	}
	function assertTransactionIsCompatibleWithOptions(transaction, options) {
	  var _a;
	  if (options.isolationLevel !== transaction.options.isolationLevel) {
	    throw new Error(
	      `Requested isolation level (${options.isolationLevel ?? "unspecified"}) is not compatible with the one of the existing transaction (${transaction.options.isolationLevel ?? "unspecified"})`
	    );
	  }
	  if (options.readOnly !== transaction.options.readOnly) {
	    throw new Error(
	      `Requested a transaction in ${options.readOnly ? "read-only" : "read/write"} mode, which is not compatible with the existing ${transaction.options.readOnly ? "read-only" : "read/write"} transaction`
	    );
	  }
	  if (options.type !== transaction.options.type) {
	    throw new Error(
	      `Requested transaction type (${options.type}) is not compatible with the one of the existing transaction (${transaction.options.type})`
	    );
	  }
	  if (options.constraintChecking !== transaction.options.constraintChecking && !((_a = options.constraintChecking) == null ? void 0 : _a.isEqual(transaction.options.constraintChecking))) {
	    throw new Error(
	      `Requested transaction constraintChecking (${options.constraintChecking ?? "none"}) is not compatible with the one of the existing transaction (${transaction.options.constraintChecking ?? "none"})`
	    );
	  }
	}

	var __defProp$b = Object.defineProperty;
	var __getOwnPropDesc$b = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames$b = Object.getOwnPropertyNames;
	var __hasOwnProp$b = Object.prototype.hasOwnProperty;
	var __export$b = (target, all) => {
	  for (var name in all)
	    __defProp$b(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps$b = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames$b(from))
	      if (!__hasOwnProp$b.call(to, key) && key !== except)
	        __defProp$b(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc$b(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS$b = (mod) => __copyProps$b(__defProp$b({}, "__esModule", { value: true }), mod);
	var sequelize_typescript_exports = {};
	__export$b(sequelize_typescript_exports, {
	  SequelizeTypeScript: () => SequelizeTypeScript
	});
	var sequelizeTypescript = __toCommonJS$b(sequelize_typescript_exports);
	var import_node_async_hooks = require$$0$5;
	var import_associations = associations;
	var import_model = requireModel$1();
	var import_hooks_legacy = hooksLegacy;
	var import_hooks = hooks;
	var import_model_hooks = modelHooks;
	var import_model_internals$1 = requireModelInternals();
	var import_transaction = transaction;
	const staticSequelizeHooks = new import_hooks.HookHandlerBuilder([
	  "beforeInit",
	  "afterInit"
	]);
	const instanceSequelizeHooks = new import_hooks.HookHandlerBuilder([
	  "beforeQuery",
	  "afterQuery",
	  "beforeBulkSync",
	  "afterBulkSync",
	  "beforeConnect",
	  "afterConnect",
	  "beforeDisconnect",
	  "afterDisconnect",
	  "beforeDefine",
	  "afterDefine",
	  "beforePoolAcquire",
	  "afterPoolAcquire",
	  ...import_model_hooks.validModelHooks
	]);
	class SequelizeTypeScript {
	  static get hooks() {
	    return staticSequelizeHooks.getFor(this);
	  }
	  static addHook = (0, import_hooks_legacy.legacyBuildAddAnyHook)(staticSequelizeHooks);
	  static removeHook = (0, import_hooks_legacy.legacyBuildRemoveHook)(staticSequelizeHooks);
	  static hasHook = (0, import_hooks_legacy.legacyBuildHasHook)(staticSequelizeHooks);
	  static hasHooks = (0, import_hooks_legacy.legacyBuildHasHook)(staticSequelizeHooks);
	  static runHooks = (0, import_hooks_legacy.legacyBuildRunHook)(staticSequelizeHooks);
	  static beforeInit = (0, import_hooks_legacy.legacyBuildAddHook)(staticSequelizeHooks, "beforeInit");
	  static afterInit = (0, import_hooks_legacy.legacyBuildAddHook)(staticSequelizeHooks, "afterInit");
	  get hooks() {
	    return instanceSequelizeHooks.getFor(this);
	  }
	  addHook = (0, import_hooks_legacy.legacyBuildAddAnyHook)(instanceSequelizeHooks);
	  removeHook = (0, import_hooks_legacy.legacyBuildRemoveHook)(instanceSequelizeHooks);
	  hasHook = (0, import_hooks_legacy.legacyBuildHasHook)(instanceSequelizeHooks);
	  hasHooks = (0, import_hooks_legacy.legacyBuildHasHook)(instanceSequelizeHooks);
	  runHooks = (0, import_hooks_legacy.legacyBuildRunHook)(instanceSequelizeHooks);
	  beforeQuery = (0, import_hooks_legacy.legacyBuildAddHook)(instanceSequelizeHooks, "beforeQuery");
	  afterQuery = (0, import_hooks_legacy.legacyBuildAddHook)(instanceSequelizeHooks, "afterQuery");
	  beforeBulkSync = (0, import_hooks_legacy.legacyBuildAddHook)(instanceSequelizeHooks, "beforeBulkSync");
	  afterBulkSync = (0, import_hooks_legacy.legacyBuildAddHook)(instanceSequelizeHooks, "afterBulkSync");
	  beforeConnect = (0, import_hooks_legacy.legacyBuildAddHook)(instanceSequelizeHooks, "beforeConnect");
	  afterConnect = (0, import_hooks_legacy.legacyBuildAddHook)(instanceSequelizeHooks, "afterConnect");
	  beforeDisconnect = (0, import_hooks_legacy.legacyBuildAddHook)(instanceSequelizeHooks, "beforeDisconnect");
	  afterDisconnect = (0, import_hooks_legacy.legacyBuildAddHook)(instanceSequelizeHooks, "afterDisconnect");
	  beforeDefine = (0, import_hooks_legacy.legacyBuildAddHook)(instanceSequelizeHooks, "beforeDefine");
	  afterDefine = (0, import_hooks_legacy.legacyBuildAddHook)(instanceSequelizeHooks, "afterDefine");
	  beforePoolAcquire = (0, import_hooks_legacy.legacyBuildAddHook)(instanceSequelizeHooks, "beforePoolAcquire");
	  afterPoolAcquire = (0, import_hooks_legacy.legacyBuildAddHook)(instanceSequelizeHooks, "afterPoolAcquire");
	  beforeValidate = (0, import_hooks_legacy.legacyBuildAddHook)(instanceSequelizeHooks, "beforeValidate");
	  afterValidate = (0, import_hooks_legacy.legacyBuildAddHook)(instanceSequelizeHooks, "afterValidate");
	  validationFailed = (0, import_hooks_legacy.legacyBuildAddHook)(instanceSequelizeHooks, "validationFailed");
	  beforeCreate = (0, import_hooks_legacy.legacyBuildAddHook)(instanceSequelizeHooks, "beforeCreate");
	  afterCreate = (0, import_hooks_legacy.legacyBuildAddHook)(instanceSequelizeHooks, "afterCreate");
	  beforeDestroy = (0, import_hooks_legacy.legacyBuildAddHook)(instanceSequelizeHooks, "beforeDestroy");
	  afterDestroy = (0, import_hooks_legacy.legacyBuildAddHook)(instanceSequelizeHooks, "afterDestroy");
	  beforeRestore = (0, import_hooks_legacy.legacyBuildAddHook)(instanceSequelizeHooks, "beforeRestore");
	  afterRestore = (0, import_hooks_legacy.legacyBuildAddHook)(instanceSequelizeHooks, "afterRestore");
	  beforeUpdate = (0, import_hooks_legacy.legacyBuildAddHook)(instanceSequelizeHooks, "beforeUpdate");
	  afterUpdate = (0, import_hooks_legacy.legacyBuildAddHook)(instanceSequelizeHooks, "afterUpdate");
	  beforeUpsert = (0, import_hooks_legacy.legacyBuildAddHook)(instanceSequelizeHooks, "beforeUpsert");
	  afterUpsert = (0, import_hooks_legacy.legacyBuildAddHook)(instanceSequelizeHooks, "afterUpsert");
	  beforeSave = (0, import_hooks_legacy.legacyBuildAddHook)(instanceSequelizeHooks, "beforeSave");
	  afterSave = (0, import_hooks_legacy.legacyBuildAddHook)(instanceSequelizeHooks, "afterSave");
	  beforeBulkCreate = (0, import_hooks_legacy.legacyBuildAddHook)(instanceSequelizeHooks, "beforeBulkCreate");
	  afterBulkCreate = (0, import_hooks_legacy.legacyBuildAddHook)(instanceSequelizeHooks, "afterBulkCreate");
	  beforeBulkDestroy = (0, import_hooks_legacy.legacyBuildAddHook)(instanceSequelizeHooks, "beforeBulkDestroy");
	  afterBulkDestroy = (0, import_hooks_legacy.legacyBuildAddHook)(instanceSequelizeHooks, "afterBulkDestroy");
	  beforeBulkRestore = (0, import_hooks_legacy.legacyBuildAddHook)(instanceSequelizeHooks, "beforeBulkRestore");
	  afterBulkRestore = (0, import_hooks_legacy.legacyBuildAddHook)(instanceSequelizeHooks, "afterBulkRestore");
	  beforeBulkUpdate = (0, import_hooks_legacy.legacyBuildAddHook)(instanceSequelizeHooks, "beforeBulkUpdate");
	  afterBulkUpdate = (0, import_hooks_legacy.legacyBuildAddHook)(instanceSequelizeHooks, "afterBulkUpdate");
	  beforeCount = (0, import_hooks_legacy.legacyBuildAddHook)(instanceSequelizeHooks, "beforeCount");
	  beforeFind = (0, import_hooks_legacy.legacyBuildAddHook)(instanceSequelizeHooks, "beforeFind");
	  beforeFindAfterExpandIncludeAll = (0, import_hooks_legacy.legacyBuildAddHook)(instanceSequelizeHooks, "beforeFindAfterExpandIncludeAll");
	  beforeFindAfterOptions = (0, import_hooks_legacy.legacyBuildAddHook)(instanceSequelizeHooks, "beforeFindAfterOptions");
	  afterFind = (0, import_hooks_legacy.legacyBuildAddHook)(instanceSequelizeHooks, "afterFind");
	  beforeSync = (0, import_hooks_legacy.legacyBuildAddHook)(instanceSequelizeHooks, "beforeSync");
	  afterSync = (0, import_hooks_legacy.legacyBuildAddHook)(instanceSequelizeHooks, "afterSync");
	  beforeAssociate = (0, import_hooks_legacy.legacyBuildAddHook)(instanceSequelizeHooks, "beforeAssociate");
	  afterAssociate = (0, import_hooks_legacy.legacyBuildAddHook)(instanceSequelizeHooks, "afterAssociate");
	  #transactionCls;
	  /**
	   * The QueryInterface instance, dialect dependant.
	   */
	  get queryInterface() {
	    return this.dialect.queryInterface;
	  }
	  /**
	   * The QueryGenerator instance, dialect dependant.
	   */
	  get queryGenerator() {
	    return this.dialect.queryGenerator;
	  }
	  _setupTransactionCls() {
	    this.#transactionCls = new import_node_async_hooks.AsyncLocalStorage();
	  }
	  addModels(models) {
	    const registeredModels = models.filter((model) => (0, import_model.initDecoratedModel)(
	      model,
	      // @ts-expect-error -- remove once this class has been merged back with the Sequelize class
	      this
	    ));
	    for (const model of registeredModels) {
	      (0, import_associations.initDecoratedAssociations)(
	        model,
	        // @ts-expect-error -- remove once this class has been merged back with the Sequelize class
	        this
	      );
	    }
	  }
	  /**
	   * Escape value to be used in raw SQL.
	   *
	   * If you are using this to use the value in a {@link literal}, consider using {@link sql} instead, which automatically
	   * escapes interpolated values.
	   *
	   * @param value The value to escape
	   * @param options
	   */
	  escape(value, options) {
	    return this.dialect.queryGenerator.escape(value, options);
	  }
	  /**
	   * Returns the transaction that is associated to the current asynchronous operation.
	   * This method returns undefined if no transaction is active in the current asynchronous operation,
	   * or if {@link Options.disableClsTransactions} is true.
	   */
	  getCurrentClsTransaction() {
	    var _a;
	    return (_a = this.#transactionCls) == null ? void 0 : _a.getStore();
	  }
	  async transaction(optionsOrCallback, maybeCallback) {
	    let options;
	    let callback;
	    if (typeof optionsOrCallback === "function") {
	      callback = optionsOrCallback;
	      options = {};
	    } else {
	      callback = maybeCallback;
	      options = optionsOrCallback;
	    }
	    if (!callback) {
	      throw new Error("sequelize.transaction requires a callback. If you wish to start an unmanaged transaction, please use sequelize.startUnmanagedTransaction instead");
	    }
	    const nestMode = options.nestMode ?? this.options.defaultTransactionNestMode;
	    const normalizedOptions = (0, import_transaction.normalizeTransactionOptions)(this, options);
	    if (nestMode === import_transaction.TransactionNestMode.separate) {
	      delete normalizedOptions.transaction;
	    } else {
	      (0, import_model_internals$1.setTransactionFromCls)(normalizedOptions, this);
	      if (normalizedOptions.transaction) {
	        (0, import_transaction.assertTransactionIsCompatibleWithOptions)(normalizedOptions.transaction, normalizedOptions);
	      }
	    }
	    const transaction = nestMode === import_transaction.TransactionNestMode.reuse && normalizedOptions.transaction ? normalizedOptions.transaction : new import_transaction.Transaction(
	      // @ts-expect-error -- will be fixed once this class has been merged back with the Sequelize class
	      this,
	      normalizedOptions
	    );
	    const isReusedTransaction = transaction === normalizedOptions.transaction;
	    const wrappedCallback = async () => {
	      if (isReusedTransaction) {
	        return callback(transaction);
	      }
	      await transaction.prepareEnvironment();
	      let result;
	      try {
	        result = await callback(transaction);
	      } catch (error) {
	        try {
	          await transaction.rollback();
	        } catch {
	        }
	        throw error;
	      }
	      await transaction.commit();
	      return result;
	    };
	    const cls = this.#transactionCls;
	    if (!cls) {
	      return wrappedCallback();
	    }
	    return cls.run(transaction, wrappedCallback);
	  }
	  /**
	   * We highly recommend using {@link Sequelize#transaction} instead.
	   * If you really want to use the manual solution, don't forget to commit or rollback your transaction once you are done with it.
	   *
	   * Transactions started by this method are not automatically passed to queries. You must pass the transaction object manually,
	   * even if {@link Options.disableClsTransactions} is false.
	   *
	   * @example
	   * ```ts
	   * try {
	   *   const transaction = await sequelize.startUnmanagedTransaction();
	   *   const user = await User.findOne(..., { transaction });
	   *   await user.update(..., { transaction });
	   *   await transaction.commit();
	   * } catch(err) {
	   *   await transaction.rollback();
	   * }
	   * ```
	   *
	   * @param options
	   */
	  async startUnmanagedTransaction(options) {
	    const transaction = new import_transaction.Transaction(
	      // @ts-expect-error -- remove once this class has been merged back with the Sequelize class
	      this,
	      options
	    );
	    await transaction.prepareEnvironment();
	    return transaction;
	  }
	  /**
	   * A slower alternative to {@link truncate} that uses DELETE FROM instead of TRUNCATE,
	   * but which works with foreign key constraints in dialects that don't support TRUNCATE CASCADE (postgres),
	   * or temporarily disabling foreign key constraints (mysql, mariadb, sqlite).
	   *
	   * @param options
	   */
	  async destroyAll(options) {
	    const sortedModels = this.modelManager.getModelsTopoSortedByForeignKey();
	    const models = sortedModels || this.modelManager.models;
	    if (options && "limit" in options) {
	      throw new Error("sequelize.destroyAll does not support the limit option.");
	    }
	    if (options && "truncate" in options) {
	      throw new Error("sequelize.destroyAll does not support the truncate option. Use sequelize.truncate instead.");
	    }
	    for (const model of models) {
	      await model.destroy({ ...options, where: {} });
	    }
	  }
	  /**
	   * Truncate all models registered in this instance.
	   * This is done by calling {@link Model.truncate} on each model.
	   *
	   * @param options The options passed to {@link Model.truncate}, plus "withoutForeignKeyChecks".
	   */
	  async truncate(options) {
	    const sortedModels = this.modelManager.getModelsTopoSortedByForeignKey();
	    const models = sortedModels || this.modelManager.models;
	    const hasCyclicDependencies = sortedModels == null;
	    if (hasCyclicDependencies && !(options == null ? void 0 : options.cascade) && !(options == null ? void 0 : options.withoutForeignKeyChecks)) {
	      throw new Error('Sequelize#truncate: Some of your models have cyclic references (foreign keys). You need to use the "cascade" or "withoutForeignKeyChecks" options to be able to delete rows from models that have cyclic references.');
	    }
	    if (options == null ? void 0 : options.withoutForeignKeyChecks) {
	      if (!this.dialect.supports.constraints.foreignKeyChecksDisableable) {
	        throw new Error(`Sequelize#truncate: ${this.dialect.name} does not support disabling foreign key checks. The "withoutForeignKeyChecks" option cannot be used.`);
	      }
	      return this.queryInterface.withoutForeignKeyChecks(options, async (connection) => {
	        const truncateOptions = { ...options, connection };
	        await Promise.all(models.map(async (model) => model.truncate(truncateOptions)));
	      });
	    }
	    if (options == null ? void 0 : options.cascade) {
	      for (const model of models) {
	        await model.truncate(options);
	      }
	      return;
	    }
	    await Promise.all(models.map(async (model) => model.truncate(options)));
	  }
	  async withConnection(optionsOrCallback, maybeCallback) {
	    let options;
	    let callback;
	    if (typeof optionsOrCallback === "function") {
	      callback = optionsOrCallback;
	      options = { type: "write" };
	    } else {
	      callback = maybeCallback;
	      options = { type: "write", ...optionsOrCallback };
	    }
	    const connection = await this.connectionManager.getConnection(options);
	    try {
	      return await callback(connection);
	    } finally {
	      if (options.destroyConnection) {
	        await this.connectionManager.destroyConnection(connection);
	      } else {
	        this.connectionManager.releaseConnection(connection);
	      }
	    }
	  }
	  /**
	   * Alias of {@link AbstractQueryInterface#createSchema}
	   *
	   * @param schema Name of the schema
	   * @param options
	   */
	  async createSchema(schema, options) {
	    return this.queryInterface.createSchema(schema, options);
	  }
	  /**
	   * Alias of {@link AbstractQueryInterface#showAllSchemas}
	   *
	   * @param options
	   */
	  async showAllSchemas(options) {
	    return this.queryInterface.showAllSchemas(options);
	  }
	  /**
	   * Alias of {@link AbstractQueryInterface#dropSchema}
	   *
	   * @param schema
	   * @param options
	   */
	  async dropSchema(schema, options) {
	    return this.queryInterface.dropSchema(schema, options);
	  }
	  /**
	   * Alias of {@link AbstractQueryInterface#dropAllSchemas}
	   *
	   * @param options
	   */
	  async dropAllSchemas(options) {
	    return this.queryInterface.dropAllSchemas(options);
	  }
	  /**
	   * Throws if the database version hasn't been loaded yet.
	   * It is automatically loaded the first time Sequelize connects to your database.
	   *
	   * You can use {@link Sequelize#authenticate} to cause a first connection.
	   *
	   * @returns current version of the dialect that is internally loaded
	   */
	  getDatabaseVersion() {
	    if (this.options.databaseVersion == null) {
	      throw new Error("The current database version is unknown. Please call `sequelize.authenticate()` first to fetch it, or manually configure it through options.");
	    }
	    return this.options.databaseVersion;
	  }
	  /**
	   * Alias of {@link AbstractQueryInterface#fetchDatabaseVersion}
	   *
	   * @param options
	   */
	  async fetchDatabaseVersion(options) {
	    return this.queryInterface.fetchDatabaseVersion(options);
	  }
	}

	var __defProp$a = Object.defineProperty;
	var __getOwnPropDesc$a = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames$a = Object.getOwnPropertyNames;
	var __hasOwnProp$a = Object.prototype.hasOwnProperty;
	var __export$a = (target, all) => {
	  for (var name in all)
	    __defProp$a(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps$a = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames$a(from))
	      if (!__hasOwnProp$a.call(to, key) && key !== except)
	        __defProp$a(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc$a(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS$a = (mod) => __copyProps$a(__defProp$a({}, "__esModule", { value: true }), mod);
	var sqlite_utils_exports = {};
	__export$a(sqlite_utils_exports, {
	  withSqliteForeignKeysOff: () => withSqliteForeignKeysOff
	});
	var sqliteUtils = __toCommonJS$a(sqlite_utils_exports);
	async function withSqliteForeignKeysOff(sequelize, options, cb) {
	  try {
	    await sequelize.queryRaw("PRAGMA foreign_keys = OFF", options);
	    return await cb();
	  } finally {
	    await sequelize.queryRaw("PRAGMA foreign_keys = ON", options);
	  }
	}

	var __create$5 = Object.create;
	var __defProp$9 = Object.defineProperty;
	var __getOwnPropDesc$9 = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames$9 = Object.getOwnPropertyNames;
	var __getProtoOf$5 = Object.getPrototypeOf;
	var __hasOwnProp$9 = Object.prototype.hasOwnProperty;
	var __export$9 = (target, all) => {
	  for (var name in all)
	    __defProp$9(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps$9 = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames$9(from))
	      if (!__hasOwnProp$9.call(to, key) && key !== except)
	        __defProp$9(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc$9(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toESM$5 = (mod, isNodeMode, target) => (target = mod != null ? __create$5(__getProtoOf$5(mod)) : {}, __copyProps$9(
	  // If the importer is in node compatibility mode or this is not an ESM
	  // file that has been converted to a CommonJS file using a Babel-
	  // compatible transform (i.e. "__esModule" has not been set), then set
	  // "default" to the CommonJS "module.exports" for node compatibility.
	  isNodeMode || !mod || !mod.__esModule ? __defProp$9(target, "default", { value: mod, enumerable: true }) : target,
	  mod
	));
	var __toCommonJS$9 = (mod) => __copyProps$9(__defProp$9({}, "__esModule", { value: true }), mod);
	var sql_exports = {};
	__export$9(sql_exports, {
	  assertNoReservedBind: () => assertNoReservedBind,
	  combineBinds: () => combineBinds,
	  createNamedParamBindCollector: () => createNamedParamBindCollector,
	  createSpecifiedOrderedBindCollector: () => createSpecifiedOrderedBindCollector,
	  createUnspecifiedOrderedBindCollector: () => createUnspecifiedOrderedBindCollector,
	  injectReplacements: () => injectReplacements,
	  mapBindParameters: () => mapBindParameters
	});
	var sql = __toCommonJS$9(sql_exports);
	var import_isPlainObject = __toESM$5(isPlainObject_1);
	var import_base_sql_expression = baseSqlExpression;
	function mapBindParametersAndReplacements(sqlString, dialect, replacements, onBind, options) {
	  var _a, _b, _c, _d;
	  const isNamedReplacements = (0, import_isPlainObject.default)(replacements);
	  const isPositionalReplacements = Array.isArray(replacements);
	  const escapeOptions = { replacements };
	  let lastConsumedPositionalReplacementIndex = -1;
	  let output = "";
	  let currentDollarStringTagName = null;
	  let isString = false;
	  let isColumn = false;
	  let previousSliceEnd = 0;
	  let isSingleLineComment = false;
	  let isCommentBlock = false;
	  let stringIsBackslashEscapable = false;
	  for (let i = 0; i < sqlString.length; i++) {
	    const char = sqlString[i];
	    if (isColumn) {
	      if (char === dialect.TICK_CHAR_RIGHT) {
	        isColumn = false;
	      }
	      continue;
	    }
	    if (isString) {
	      if (char === `'` && (!stringIsBackslashEscapable || !isBackslashEscaped(sqlString, i - 1))) {
	        isString = false;
	        stringIsBackslashEscapable = false;
	      }
	      continue;
	    }
	    if (currentDollarStringTagName !== null) {
	      if (char !== "$") {
	        continue;
	      }
	      const remainingString = sqlString.slice(i, sqlString.length);
	      const dollarStringStartMatch = remainingString.match(/^\$(?<name>[a-z_][0-9a-z_]*)?(\$)/i);
	      const tagName = ((_a = dollarStringStartMatch == null ? void 0 : dollarStringStartMatch.groups) == null ? void 0 : _a.name) ?? "";
	      if (currentDollarStringTagName === tagName) {
	        currentDollarStringTagName = null;
	      }
	      continue;
	    }
	    if (isSingleLineComment) {
	      if (char === "\n") {
	        isSingleLineComment = false;
	      }
	      continue;
	    }
	    if (isCommentBlock) {
	      if (char === "*" && sqlString[i + 1] === "/") {
	        isCommentBlock = false;
	      }
	      continue;
	    }
	    if (char === dialect.TICK_CHAR_LEFT) {
	      isColumn = true;
	      continue;
	    }
	    if (char === `'`) {
	      isString = true;
	      stringIsBackslashEscapable = dialect.canBackslashEscape() || dialect.supports.escapeStringConstants && (sqlString[i - 1] === "E" || sqlString[i - 1] === "e") && canPrecedeNewToken(sqlString[i - 2]);
	      continue;
	    }
	    if (char === "-" && sqlString.slice(i, i + 3) === "-- ") {
	      isSingleLineComment = true;
	      continue;
	    }
	    if (char === "/" && sqlString.slice(i, i + 2) === "/*") {
	      isCommentBlock = true;
	      continue;
	    }
	    if (char === "$") {
	      const previousChar = sqlString[i - 1];
	      if (/[0-9a-z_]/i.test(previousChar)) {
	        continue;
	      }
	      const remainingString = sqlString.slice(i, sqlString.length);
	      const dollarStringStartMatch = remainingString.match(/^\$(?<name>[a-z_][0-9a-z_]*)?\$/i);
	      if (dollarStringStartMatch) {
	        currentDollarStringTagName = ((_b = dollarStringStartMatch.groups) == null ? void 0 : _b.name) ?? "";
	        i += dollarStringStartMatch[0].length - 1;
	        continue;
	      }
	      if (onBind) {
	        if (!canPrecedeNewToken(previousChar)) {
	          continue;
	        }
	        const match = remainingString.match(/^\$(?<name>([a-z_][0-9a-z_]*|[1-9][0-9]*))(?:\)|,|$|\s|::|;)/i);
	        const bindParamName = (_c = match == null ? void 0 : match.groups) == null ? void 0 : _c.name;
	        if (!bindParamName) {
	          continue;
	        }
	        const newName = onBind(bindParamName);
	        output += sqlString.slice(previousSliceEnd, i);
	        previousSliceEnd = i + bindParamName.length + 1;
	        output += newName;
	      }
	      continue;
	    }
	    if (isNamedReplacements && char === ":") {
	      const previousChar = sqlString[i - 1];
	      if (!canPrecedeNewToken(previousChar) && previousChar !== "[") {
	        continue;
	      }
	      const remainingString = sqlString.slice(i, sqlString.length);
	      const match = remainingString.match(/^:(?<name>[a-z_][0-9a-z_]*)(?:\)|,|$|\s|::|;|])/i);
	      const replacementName = (_d = match == null ? void 0 : match.groups) == null ? void 0 : _d.name;
	      if (!replacementName) {
	        continue;
	      }
	      const replacementValue = replacements[replacementName];
	      if (!Object.hasOwn(replacements, replacementName) || replacementValue === void 0) {
	        throw new Error(`Named replacement ":${replacementName}" has no entry in the replacement map.`);
	      }
	      const escapedReplacement = escapeValueWithBackCompat(replacementValue, dialect, escapeOptions);
	      output += sqlString.slice(previousSliceEnd, i);
	      previousSliceEnd = i + replacementName.length + 1;
	      output += escapedReplacement;
	      continue;
	    }
	    if (isPositionalReplacements && char === "?") {
	      const previousChar = sqlString[i - 1];
	      if (!canPrecedeNewToken(previousChar) && previousChar !== "[") {
	        continue;
	      }
	      const nextChar = sqlString[i + 1];
	      if (nextChar === "|" || nextChar === "&") {
	        continue;
	      }
	      if (options == null ? void 0 : options.onPositionalReplacement) {
	        options.onPositionalReplacement();
	      }
	      const replacementIndex = ++lastConsumedPositionalReplacementIndex;
	      const replacementValue = replacements[lastConsumedPositionalReplacementIndex];
	      if (replacementValue === void 0) {
	        throw new Error(`Positional replacement (?) ${replacementIndex} has no entry in the replacement map (replacements[${replacementIndex}] is undefined).`);
	      }
	      const escapedReplacement = escapeValueWithBackCompat(replacementValue, dialect, escapeOptions);
	      output += sqlString.slice(previousSliceEnd, i);
	      previousSliceEnd = i + 1;
	      output += escapedReplacement;
	    }
	  }
	  if (isString) {
	    throw new Error(`The following SQL query includes an unterminated string literal:
${sqlString}`);
	  }
	  output += sqlString.slice(previousSliceEnd, sqlString.length);
	  return output;
	}
	function escapeValueWithBackCompat(value, dialect, escapeOptions) {
	  if (Array.isArray(value) && value.some((item) => item instanceof import_base_sql_expression.BaseSqlExpression)) {
	    return value.map((item) => dialect.queryGenerator.escape(item, escapeOptions)).join(", ");
	  }
	  return dialect.queryGenerator.escape(value, escapeOptions);
	}
	function canPrecedeNewToken(char) {
	  return char === void 0 || /[\s(>,=]/.test(char);
	}
	function mapBindParameters(sqlString, dialect) {
	  const parameterCollector = dialect.createBindCollector();
	  const parameterSet = /* @__PURE__ */ new Set();
	  const newSql = mapBindParametersAndReplacements(sqlString, dialect, void 0, (foundBindParamName) => {
	    parameterSet.add(foundBindParamName);
	    return parameterCollector.collect(foundBindParamName);
	  });
	  return { sql: newSql, bindOrder: parameterCollector.getBindParameterOrder(), parameterSet };
	}
	function injectReplacements(sqlString, dialect, replacements, opts) {
	  if (replacements == null) {
	    return sqlString;
	  }
	  if (!Array.isArray(replacements) && !(0, import_isPlainObject.default)(replacements)) {
	    throw new TypeError(`"replacements" must be an array or a plain object, but received ${JSON.stringify(replacements)} instead.`);
	  }
	  return mapBindParametersAndReplacements(sqlString, dialect, replacements, void 0, opts);
	}
	function isBackslashEscaped(string, pos) {
	  let escaped = false;
	  for (let i = pos; i >= 0; i--) {
	    const char = string[i];
	    if (char !== "\\") {
	      break;
	    }
	    escaped = !escaped;
	  }
	  return escaped;
	}
	function createUnspecifiedOrderedBindCollector(token = "?") {
	  const parameterOrder = [];
	  return {
	    collect(bindParameterName) {
	      parameterOrder.push(bindParameterName);
	      return token;
	    },
	    getBindParameterOrder() {
	      return parameterOrder;
	    }
	  };
	}
	function createSpecifiedOrderedBindCollector(prefix = "$") {
	  const parameterOrder = [];
	  return {
	    collect(bindParameterName) {
	      const cachedPosition = parameterOrder.indexOf(bindParameterName);
	      if (cachedPosition === -1) {
	        parameterOrder.push(bindParameterName);
	        return `${prefix}${parameterOrder.length}`;
	      }
	      return `${prefix}${cachedPosition + 1}`;
	    },
	    getBindParameterOrder() {
	      return parameterOrder;
	    }
	  };
	}
	function createNamedParamBindCollector(parameterPrefix) {
	  return {
	    collect(bindParameterName) {
	      return parameterPrefix + bindParameterName;
	    },
	    getBindParameterOrder() {
	      return null;
	    }
	  };
	}
	function assertNoReservedBind(bind) {
	  if (Array.isArray(bind)) {
	    return;
	  }
	  for (const key of Object.keys(bind)) {
	    if (key.startsWith("sequelize_")) {
	      throw new Error('Bind parameters cannot start with "sequelize_", these bind parameters are reserved by Sequelize.');
	    }
	  }
	}
	function combineBinds(bindA, bindB) {
	  if (Array.isArray(bindA)) {
	    bindA = arrayBindToNamedBind(bindA);
	  }
	  return {
	    ...bindA,
	    ...bindB
	  };
	}
	function arrayBindToNamedBind(bind) {
	  const out = /* @__PURE__ */ Object.create(null);
	  for (let i = 0; i < bind.length; i++) {
	    out[i + 1] = bind[i];
	  }
	  return out;
	}

	//Parse method copied from https://github.com/brianc/node-postgres
	//Copyright (c) 2010-2014 Brian Carlson (brian.m.carlson@gmail.com)
	//MIT License

	//parses a connection string
	function parse$4(str) {
	  //unix socket
	  if (str.charAt(0) === '/') {
	    const config = str.split(' ');
	    return { host: config[0], database: config[1] }
	  }

	  // Check for empty host in URL

	  const config = {};
	  let result;
	  let dummyHost = false;
	  if (/ |%[^a-f0-9]|%[a-f0-9][^a-f0-9]/i.test(str)) {
	    // Ensure spaces are encoded as %20
	    str = encodeURI(str).replace(/\%25(\d\d)/g, '%$1');
	  }

	  try {
	    result = new URL(str, 'postgres://base');
	  } catch (e) {
	    // The URL is invalid so try again with a dummy host
	    result = new URL(str.replace('@/', '@___DUMMY___/'), 'postgres://base');
	    dummyHost = true;
	  }

	  // We'd like to use Object.fromEntries() here but Node.js 10 does not support it
	  for (const entry of result.searchParams.entries()) {
	    config[entry[0]] = entry[1];
	  }

	  config.user = config.user || decodeURIComponent(result.username);
	  config.password = config.password || decodeURIComponent(result.password);

	  config.port = result.port;
	  if (result.protocol == 'socket:') {
	    config.host = decodeURI(result.pathname);
	    config.database = result.searchParams.get('db');
	    config.client_encoding = result.searchParams.get('encoding');
	    return config
	  }
	  const hostname = dummyHost ? '' : result.hostname;
	  if (!config.host) {
	    // Only set the host if there is no equivalent query param.
	    config.host = decodeURIComponent(hostname);
	  } else if (hostname && /^%2f/i.test(hostname)) {
	    // Only prepend the hostname to the pathname if it is not a URL encoded Unix socket host.
	    result.pathname = hostname + result.pathname;
	  }

	  const pathname = result.pathname.slice(1) || null;
	  config.database = pathname ? decodeURI(pathname) : null;

	  if (config.ssl === 'true' || config.ssl === '1') {
	    config.ssl = true;
	  }

	  if (config.ssl === '0') {
	    config.ssl = false;
	  }

	  if (config.sslcert || config.sslkey || config.sslrootcert || config.sslmode) {
	    config.ssl = {};
	  }

	  // Only try to load fs if we expect to read from the disk
	  const fs = config.sslcert || config.sslkey || config.sslrootcert ? require$$0$6 : null;

	  if (config.sslcert) {
	    config.ssl.cert = fs.readFileSync(config.sslcert).toString();
	  }

	  if (config.sslkey) {
	    config.ssl.key = fs.readFileSync(config.sslkey).toString();
	  }

	  if (config.sslrootcert) {
	    config.ssl.ca = fs.readFileSync(config.sslrootcert).toString();
	  }

	  switch (config.sslmode) {
	    case 'disable': {
	      config.ssl = false;
	      break
	    }
	    case 'prefer':
	    case 'require':
	    case 'verify-ca':
	    case 'verify-full': {
	      break
	    }
	    case 'no-verify': {
	      config.ssl.rejectUnauthorized = false;
	      break
	    }
	  }

	  return config
	}

	var pgConnectionString = parse$4;

	parse$4.parse = parse$4;

	var __create$4 = Object.create;
	var __defProp$8 = Object.defineProperty;
	var __getOwnPropDesc$8 = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames$8 = Object.getOwnPropertyNames;
	var __getProtoOf$4 = Object.getPrototypeOf;
	var __hasOwnProp$8 = Object.prototype.hasOwnProperty;
	var __export$8 = (target, all) => {
	  for (var name in all)
	    __defProp$8(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps$8 = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames$8(from))
	      if (!__hasOwnProp$8.call(to, key) && key !== except)
	        __defProp$8(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc$8(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toESM$4 = (mod, isNodeMode, target) => (target = mod != null ? __create$4(__getProtoOf$4(mod)) : {}, __copyProps$8(
	  // If the importer is in node compatibility mode or this is not an ESM
	  // file that has been converted to a CommonJS file using a Babel-
	  // compatible transform (i.e. "__esModule" has not been set), then set
	  // "default" to the CommonJS "module.exports" for node compatibility.
	  isNodeMode || !mod || !mod.__esModule ? __defProp$8(target, "default", { value: mod, enumerable: true }) : target,
	  mod
	));
	var __toCommonJS$8 = (mod) => __copyProps$8(__defProp$8({}, "__esModule", { value: true }), mod);
	var url_exports = {};
	__export$8(url_exports, {
	  parseConnectionString: () => parseConnectionString
	});
	var url = __toCommonJS$8(url_exports);
	var import_node_path = __toESM$4(require$$0$7);
	var import_node_url = __toESM$4(require$$1);
	var import_pg_connection_string = __toESM$4(pgConnectionString);
	function parseConnectionString(connectionString) {
	  const urlParts = import_node_url.default.parse(connectionString, true);
	  const options = {};
	  if (urlParts.protocol) {
	    let protocol = urlParts.protocol.replace(/:$/, "");
	    if (protocol === "postgresql") {
	      protocol = "postgres";
	    }
	    options.dialect = protocol;
	  }
	  if (urlParts.hostname != null) {
	    options.host = urlParts.hostname;
	  }
	  if (urlParts.pathname) {
	    options.database = decodeURIComponent(urlParts.pathname.replace(/^\//, ""));
	  }
	  if (urlParts.port) {
	    options.port = urlParts.port;
	  }
	  if (urlParts.auth) {
	    const authParts = urlParts.auth.split(":");
	    options.username = authParts[0];
	    if (authParts.length > 1) {
	      options.password = authParts.slice(1).join(":");
	    }
	  }
	  if (options.dialect === "sqlite" && urlParts.pathname && !urlParts.pathname.startsWith("/:memory")) {
	    const storagePath = import_node_path.default.join(options.host, urlParts.pathname);
	    options.storage = import_node_path.default.resolve(options.storage || storagePath);
	  }
	  if (urlParts.query) {
	    if (urlParts.query.host) {
	      options.host = urlParts.query.host;
	    }
	    options.dialectOptions = urlParts.query;
	    if (urlParts.query.options) {
	      try {
	        const o = JSON.parse(urlParts.query.options);
	        options.dialectOptions.options = o;
	      } catch {
	      }
	    }
	  }
	  if (options.dialect === "postgres") {
	    const parseResult = import_pg_connection_string.default.parse(connectionString);
	    delete parseResult.database;
	    delete parseResult.password;
	    delete parseResult.user;
	    delete parseResult.host;
	    delete parseResult.port;
	    delete parseResult.options;
	    options.dialectOptions ||= /* @__PURE__ */ Object.create(null);
	    Object.assign(options.dialectOptions, parseResult);
	  }
	  return options;
	}

	var tasks = {};

	var utils$k = {};

	var array$1 = {};

	Object.defineProperty(array$1, "__esModule", { value: true });
	array$1.splitWhen = array$1.flatten = void 0;
	function flatten$2(items) {
	    return items.reduce((collection, item) => [].concat(collection, item), []);
	}
	array$1.flatten = flatten$2;
	function splitWhen(items, predicate) {
	    const result = [[]];
	    let groupIndex = 0;
	    for (const item of items) {
	        if (predicate(item)) {
	            groupIndex++;
	            result[groupIndex] = [];
	        }
	        else {
	            result[groupIndex].push(item);
	        }
	    }
	    return result;
	}
	array$1.splitWhen = splitWhen;

	var errno$1 = {};

	Object.defineProperty(errno$1, "__esModule", { value: true });
	errno$1.isEnoentCodeError = void 0;
	function isEnoentCodeError(error) {
	    return error.code === 'ENOENT';
	}
	errno$1.isEnoentCodeError = isEnoentCodeError;

	var fs$7 = {};

	Object.defineProperty(fs$7, "__esModule", { value: true });
	fs$7.createDirentFromStats = void 0;
	let DirentFromStats$1 = class DirentFromStats {
	    constructor(name, stats) {
	        this.name = name;
	        this.isBlockDevice = stats.isBlockDevice.bind(stats);
	        this.isCharacterDevice = stats.isCharacterDevice.bind(stats);
	        this.isDirectory = stats.isDirectory.bind(stats);
	        this.isFIFO = stats.isFIFO.bind(stats);
	        this.isFile = stats.isFile.bind(stats);
	        this.isSocket = stats.isSocket.bind(stats);
	        this.isSymbolicLink = stats.isSymbolicLink.bind(stats);
	    }
	};
	function createDirentFromStats$1(name, stats) {
	    return new DirentFromStats$1(name, stats);
	}
	fs$7.createDirentFromStats = createDirentFromStats$1;

	var path$9 = {};

	Object.defineProperty(path$9, "__esModule", { value: true });
	path$9.removeLeadingDotSegment = path$9.escape = path$9.makeAbsolute = path$9.unixify = void 0;
	const path$8 = require$$0$8;
	const LEADING_DOT_SEGMENT_CHARACTERS_COUNT = 2; // ./ or .\\
	const UNESCAPED_GLOB_SYMBOLS_RE = /(\\?)([()*?[\]{|}]|^!|[!+@](?=\())/g;
	/**
	 * Designed to work only with simple paths: `dir\\file`.
	 */
	function unixify(filepath) {
	    return filepath.replace(/\\/g, '/');
	}
	path$9.unixify = unixify;
	function makeAbsolute(cwd, filepath) {
	    return path$8.resolve(cwd, filepath);
	}
	path$9.makeAbsolute = makeAbsolute;
	function escape$1(pattern) {
	    return pattern.replace(UNESCAPED_GLOB_SYMBOLS_RE, '\\$2');
	}
	path$9.escape = escape$1;
	function removeLeadingDotSegment(entry) {
	    // We do not use `startsWith` because this is 10x slower than current implementation for some cases.
	    // eslint-disable-next-line @typescript-eslint/prefer-string-starts-ends-with
	    if (entry.charAt(0) === '.') {
	        const secondCharactery = entry.charAt(1);
	        if (secondCharactery === '/' || secondCharactery === '\\') {
	            return entry.slice(LEADING_DOT_SEGMENT_CHARACTERS_COUNT);
	        }
	    }
	    return entry;
	}
	path$9.removeLeadingDotSegment = removeLeadingDotSegment;

	var pattern$1 = {};

	/*!
	 * is-extglob <https://github.com/jonschlinkert/is-extglob>
	 *
	 * Copyright (c) 2014-2016, Jon Schlinkert.
	 * Licensed under the MIT License.
	 */

	var isExtglob$1 = function isExtglob(str) {
	  if (typeof str !== 'string' || str === '') {
	    return false;
	  }

	  var match;
	  while ((match = /(\\).|([@?!+*]\(.*\))/g.exec(str))) {
	    if (match[2]) return true;
	    str = str.slice(match.index + match[0].length);
	  }

	  return false;
	};

	/*!
	 * is-glob <https://github.com/jonschlinkert/is-glob>
	 *
	 * Copyright (c) 2014-2017, Jon Schlinkert.
	 * Released under the MIT License.
	 */

	var isExtglob = isExtglob$1;
	var chars = { '{': '}', '(': ')', '[': ']'};
	var strictCheck = function(str) {
	  if (str[0] === '!') {
	    return true;
	  }
	  var index = 0;
	  var pipeIndex = -2;
	  var closeSquareIndex = -2;
	  var closeCurlyIndex = -2;
	  var closeParenIndex = -2;
	  var backSlashIndex = -2;
	  while (index < str.length) {
	    if (str[index] === '*') {
	      return true;
	    }

	    if (str[index + 1] === '?' && /[\].+)]/.test(str[index])) {
	      return true;
	    }

	    if (closeSquareIndex !== -1 && str[index] === '[' && str[index + 1] !== ']') {
	      if (closeSquareIndex < index) {
	        closeSquareIndex = str.indexOf(']', index);
	      }
	      if (closeSquareIndex > index) {
	        if (backSlashIndex === -1 || backSlashIndex > closeSquareIndex) {
	          return true;
	        }
	        backSlashIndex = str.indexOf('\\', index);
	        if (backSlashIndex === -1 || backSlashIndex > closeSquareIndex) {
	          return true;
	        }
	      }
	    }

	    if (closeCurlyIndex !== -1 && str[index] === '{' && str[index + 1] !== '}') {
	      closeCurlyIndex = str.indexOf('}', index);
	      if (closeCurlyIndex > index) {
	        backSlashIndex = str.indexOf('\\', index);
	        if (backSlashIndex === -1 || backSlashIndex > closeCurlyIndex) {
	          return true;
	        }
	      }
	    }

	    if (closeParenIndex !== -1 && str[index] === '(' && str[index + 1] === '?' && /[:!=]/.test(str[index + 2]) && str[index + 3] !== ')') {
	      closeParenIndex = str.indexOf(')', index);
	      if (closeParenIndex > index) {
	        backSlashIndex = str.indexOf('\\', index);
	        if (backSlashIndex === -1 || backSlashIndex > closeParenIndex) {
	          return true;
	        }
	      }
	    }

	    if (pipeIndex !== -1 && str[index] === '(' && str[index + 1] !== '|') {
	      if (pipeIndex < index) {
	        pipeIndex = str.indexOf('|', index);
	      }
	      if (pipeIndex !== -1 && str[pipeIndex + 1] !== ')') {
	        closeParenIndex = str.indexOf(')', pipeIndex);
	        if (closeParenIndex > pipeIndex) {
	          backSlashIndex = str.indexOf('\\', pipeIndex);
	          if (backSlashIndex === -1 || backSlashIndex > closeParenIndex) {
	            return true;
	          }
	        }
	      }
	    }

	    if (str[index] === '\\') {
	      var open = str[index + 1];
	      index += 2;
	      var close = chars[open];

	      if (close) {
	        var n = str.indexOf(close, index);
	        if (n !== -1) {
	          index = n + 1;
	        }
	      }

	      if (str[index] === '!') {
	        return true;
	      }
	    } else {
	      index++;
	    }
	  }
	  return false;
	};

	var relaxedCheck = function(str) {
	  if (str[0] === '!') {
	    return true;
	  }
	  var index = 0;
	  while (index < str.length) {
	    if (/[*?{}()[\]]/.test(str[index])) {
	      return true;
	    }

	    if (str[index] === '\\') {
	      var open = str[index + 1];
	      index += 2;
	      var close = chars[open];

	      if (close) {
	        var n = str.indexOf(close, index);
	        if (n !== -1) {
	          index = n + 1;
	        }
	      }

	      if (str[index] === '!') {
	        return true;
	      }
	    } else {
	      index++;
	    }
	  }
	  return false;
	};

	var isGlob$1 = function isGlob(str, options) {
	  if (typeof str !== 'string' || str === '') {
	    return false;
	  }

	  if (isExtglob(str)) {
	    return true;
	  }

	  var check = strictCheck;

	  // optionally relax check
	  if (options && options.strict === false) {
	    check = relaxedCheck;
	  }

	  return check(str);
	};

	var isGlob = isGlob$1;
	var pathPosixDirname = require$$0$8.posix.dirname;
	var isWin32 = require$$2.platform() === 'win32';

	var slash = '/';
	var backslash = /\\/g;
	var enclosure = /[\{\[].*[\}\]]$/;
	var globby = /(^|[^\\])([\{\[]|\([^\)]+$)/;
	var escaped = /\\([\!\*\?\|\[\]\(\)\{\}])/g;

	/**
	 * @param {string} str
	 * @param {Object} opts
	 * @param {boolean} [opts.flipBackslashes=true]
	 * @returns {string}
	 */
	var globParent$1 = function globParent(str, opts) {
	  var options = Object.assign({ flipBackslashes: true }, opts);

	  // flip windows path separators
	  if (options.flipBackslashes && isWin32 && str.indexOf(slash) < 0) {
	    str = str.replace(backslash, slash);
	  }

	  // special case for strings ending in enclosure containing path separator
	  if (enclosure.test(str)) {
	    str += slash;
	  }

	  // preserves full path in case of trailing path separator
	  str += 'a';

	  // remove path parts that are globby
	  do {
	    str = pathPosixDirname(str);
	  } while (isGlob(str) || globby.test(str));

	  // remove escape chars and return result
	  return str.replace(escaped, '$1');
	};

	var utils$j = {};

	(function (exports) {

		exports.isInteger = num => {
		  if (typeof num === 'number') {
		    return Number.isInteger(num);
		  }
		  if (typeof num === 'string' && num.trim() !== '') {
		    return Number.isInteger(Number(num));
		  }
		  return false;
		};

		/**
		 * Find a node of the given type
		 */

		exports.find = (node, type) => node.nodes.find(node => node.type === type);

		/**
		 * Find a node of the given type
		 */

		exports.exceedsLimit = (min, max, step = 1, limit) => {
		  if (limit === false) return false;
		  if (!exports.isInteger(min) || !exports.isInteger(max)) return false;
		  return ((Number(max) - Number(min)) / Number(step)) >= limit;
		};

		/**
		 * Escape the given node with '\\' before node.value
		 */

		exports.escapeNode = (block, n = 0, type) => {
		  let node = block.nodes[n];
		  if (!node) return;

		  if ((type && node.type === type) || node.type === 'open' || node.type === 'close') {
		    if (node.escaped !== true) {
		      node.value = '\\' + node.value;
		      node.escaped = true;
		    }
		  }
		};

		/**
		 * Returns true if the given brace node should be enclosed in literal braces
		 */

		exports.encloseBrace = node => {
		  if (node.type !== 'brace') return false;
		  if ((node.commas >> 0 + node.ranges >> 0) === 0) {
		    node.invalid = true;
		    return true;
		  }
		  return false;
		};

		/**
		 * Returns true if a brace node is invalid.
		 */

		exports.isInvalidBrace = block => {
		  if (block.type !== 'brace') return false;
		  if (block.invalid === true || block.dollar) return true;
		  if ((block.commas >> 0 + block.ranges >> 0) === 0) {
		    block.invalid = true;
		    return true;
		  }
		  if (block.open !== true || block.close !== true) {
		    block.invalid = true;
		    return true;
		  }
		  return false;
		};

		/**
		 * Returns true if a node is an open or close node
		 */

		exports.isOpenOrClose = node => {
		  if (node.type === 'open' || node.type === 'close') {
		    return true;
		  }
		  return node.open === true || node.close === true;
		};

		/**
		 * Reduce an array of text nodes.
		 */

		exports.reduce = nodes => nodes.reduce((acc, node) => {
		  if (node.type === 'text') acc.push(node.value);
		  if (node.type === 'range') node.type = 'text';
		  return acc;
		}, []);

		/**
		 * Flatten an array
		 */

		exports.flatten = (...args) => {
		  const result = [];
		  const flat = arr => {
		    for (let i = 0; i < arr.length; i++) {
		      let ele = arr[i];
		      Array.isArray(ele) ? flat(ele) : ele !== void 0 && result.push(ele);
		    }
		    return result;
		  };
		  flat(args);
		  return result;
		}; 
	} (utils$j));

	const utils$i = utils$j;

	var stringify$4 = (ast, options = {}) => {
	  let stringify = (node, parent = {}) => {
	    let invalidBlock = options.escapeInvalid && utils$i.isInvalidBrace(parent);
	    let invalidNode = node.invalid === true && options.escapeInvalid === true;
	    let output = '';

	    if (node.value) {
	      if ((invalidBlock || invalidNode) && utils$i.isOpenOrClose(node)) {
	        return '\\' + node.value;
	      }
	      return node.value;
	    }

	    if (node.value) {
	      return node.value;
	    }

	    if (node.nodes) {
	      for (let child of node.nodes) {
	        output += stringify(child);
	      }
	    }
	    return output;
	  };

	  return stringify(ast);
	};

	/*!
	 * is-number <https://github.com/jonschlinkert/is-number>
	 *
	 * Copyright (c) 2014-present, Jon Schlinkert.
	 * Released under the MIT License.
	 */

	var isNumber$3 = function(num) {
	  if (typeof num === 'number') {
	    return num - num === 0;
	  }
	  if (typeof num === 'string' && num.trim() !== '') {
	    return Number.isFinite ? Number.isFinite(+num) : isFinite(+num);
	  }
	  return false;
	};

	/*!
	 * to-regex-range <https://github.com/micromatch/to-regex-range>
	 *
	 * Copyright (c) 2015-present, Jon Schlinkert.
	 * Released under the MIT License.
	 */

	const isNumber$2 = isNumber$3;

	const toRegexRange$1 = (min, max, options) => {
	  if (isNumber$2(min) === false) {
	    throw new TypeError('toRegexRange: expected the first argument to be a number');
	  }

	  if (max === void 0 || min === max) {
	    return String(min);
	  }

	  if (isNumber$2(max) === false) {
	    throw new TypeError('toRegexRange: expected the second argument to be a number.');
	  }

	  let opts = { relaxZeros: true, ...options };
	  if (typeof opts.strictZeros === 'boolean') {
	    opts.relaxZeros = opts.strictZeros === false;
	  }

	  let relax = String(opts.relaxZeros);
	  let shorthand = String(opts.shorthand);
	  let capture = String(opts.capture);
	  let wrap = String(opts.wrap);
	  let cacheKey = min + ':' + max + '=' + relax + shorthand + capture + wrap;

	  if (toRegexRange$1.cache.hasOwnProperty(cacheKey)) {
	    return toRegexRange$1.cache[cacheKey].result;
	  }

	  let a = Math.min(min, max);
	  let b = Math.max(min, max);

	  if (Math.abs(a - b) === 1) {
	    let result = min + '|' + max;
	    if (opts.capture) {
	      return `(${result})`;
	    }
	    if (opts.wrap === false) {
	      return result;
	    }
	    return `(?:${result})`;
	  }

	  let isPadded = hasPadding(min) || hasPadding(max);
	  let state = { min, max, a, b };
	  let positives = [];
	  let negatives = [];

	  if (isPadded) {
	    state.isPadded = isPadded;
	    state.maxLen = String(state.max).length;
	  }

	  if (a < 0) {
	    let newMin = b < 0 ? Math.abs(b) : 1;
	    negatives = splitToPatterns(newMin, Math.abs(a), state, opts);
	    a = state.a = 0;
	  }

	  if (b >= 0) {
	    positives = splitToPatterns(a, b, state, opts);
	  }

	  state.negatives = negatives;
	  state.positives = positives;
	  state.result = collatePatterns(negatives, positives);

	  if (opts.capture === true) {
	    state.result = `(${state.result})`;
	  } else if (opts.wrap !== false && (positives.length + negatives.length) > 1) {
	    state.result = `(?:${state.result})`;
	  }

	  toRegexRange$1.cache[cacheKey] = state;
	  return state.result;
	};

	function collatePatterns(neg, pos, options) {
	  let onlyNegative = filterPatterns(neg, pos, '-', false) || [];
	  let onlyPositive = filterPatterns(pos, neg, '', false) || [];
	  let intersected = filterPatterns(neg, pos, '-?', true) || [];
	  let subpatterns = onlyNegative.concat(intersected).concat(onlyPositive);
	  return subpatterns.join('|');
	}

	function splitToRanges(min, max) {
	  let nines = 1;
	  let zeros = 1;

	  let stop = countNines(min, nines);
	  let stops = new Set([max]);

	  while (min <= stop && stop <= max) {
	    stops.add(stop);
	    nines += 1;
	    stop = countNines(min, nines);
	  }

	  stop = countZeros(max + 1, zeros) - 1;

	  while (min < stop && stop <= max) {
	    stops.add(stop);
	    zeros += 1;
	    stop = countZeros(max + 1, zeros) - 1;
	  }

	  stops = [...stops];
	  stops.sort(compare);
	  return stops;
	}

	/**
	 * Convert a range to a regex pattern
	 * @param {Number} `start`
	 * @param {Number} `stop`
	 * @return {String}
	 */

	function rangeToPattern(start, stop, options) {
	  if (start === stop) {
	    return { pattern: start, count: [], digits: 0 };
	  }

	  let zipped = zip$1(start, stop);
	  let digits = zipped.length;
	  let pattern = '';
	  let count = 0;

	  for (let i = 0; i < digits; i++) {
	    let [startDigit, stopDigit] = zipped[i];

	    if (startDigit === stopDigit) {
	      pattern += startDigit;

	    } else if (startDigit !== '0' || stopDigit !== '9') {
	      pattern += toCharacterClass(startDigit, stopDigit);

	    } else {
	      count++;
	    }
	  }

	  if (count) {
	    pattern += options.shorthand === true ? '\\d' : '[0-9]';
	  }

	  return { pattern, count: [count], digits };
	}

	function splitToPatterns(min, max, tok, options) {
	  let ranges = splitToRanges(min, max);
	  let tokens = [];
	  let start = min;
	  let prev;

	  for (let i = 0; i < ranges.length; i++) {
	    let max = ranges[i];
	    let obj = rangeToPattern(String(start), String(max), options);
	    let zeros = '';

	    if (!tok.isPadded && prev && prev.pattern === obj.pattern) {
	      if (prev.count.length > 1) {
	        prev.count.pop();
	      }

	      prev.count.push(obj.count[0]);
	      prev.string = prev.pattern + toQuantifier(prev.count);
	      start = max + 1;
	      continue;
	    }

	    if (tok.isPadded) {
	      zeros = padZeros(max, tok, options);
	    }

	    obj.string = zeros + obj.pattern + toQuantifier(obj.count);
	    tokens.push(obj);
	    start = max + 1;
	    prev = obj;
	  }

	  return tokens;
	}

	function filterPatterns(arr, comparison, prefix, intersection, options) {
	  let result = [];

	  for (let ele of arr) {
	    let { string } = ele;

	    // only push if _both_ are negative...
	    if (!intersection && !contains$1(comparison, 'string', string)) {
	      result.push(prefix + string);
	    }

	    // or _both_ are positive
	    if (intersection && contains$1(comparison, 'string', string)) {
	      result.push(prefix + string);
	    }
	  }
	  return result;
	}

	/**
	 * Zip strings
	 */

	function zip$1(a, b) {
	  let arr = [];
	  for (let i = 0; i < a.length; i++) arr.push([a[i], b[i]]);
	  return arr;
	}

	function compare(a, b) {
	  return a > b ? 1 : b > a ? -1 : 0;
	}

	function contains$1(arr, key, val) {
	  return arr.some(ele => ele[key] === val);
	}

	function countNines(min, len) {
	  return Number(String(min).slice(0, -len) + '9'.repeat(len));
	}

	function countZeros(integer, zeros) {
	  return integer - (integer % Math.pow(10, zeros));
	}

	function toQuantifier(digits) {
	  let [start = 0, stop = ''] = digits;
	  if (stop || start > 1) {
	    return `{${start + (stop ? ',' + stop : '')}}`;
	  }
	  return '';
	}

	function toCharacterClass(a, b, options) {
	  return `[${a}${(b - a === 1) ? '' : '-'}${b}]`;
	}

	function hasPadding(str) {
	  return /^-?(0+)\d/.test(str);
	}

	function padZeros(value, tok, options) {
	  if (!tok.isPadded) {
	    return value;
	  }

	  let diff = Math.abs(tok.maxLen - String(value).length);
	  let relax = options.relaxZeros !== false;

	  switch (diff) {
	    case 0:
	      return '';
	    case 1:
	      return relax ? '0?' : '0';
	    case 2:
	      return relax ? '0{0,2}' : '00';
	    default: {
	      return relax ? `0{0,${diff}}` : `0{${diff}}`;
	    }
	  }
	}

	/**
	 * Cache
	 */

	toRegexRange$1.cache = {};
	toRegexRange$1.clearCache = () => (toRegexRange$1.cache = {});

	/**
	 * Expose `toRegexRange`
	 */

	var toRegexRange_1 = toRegexRange$1;

	/*!
	 * fill-range <https://github.com/jonschlinkert/fill-range>
	 *
	 * Copyright (c) 2014-present, Jon Schlinkert.
	 * Licensed under the MIT License.
	 */

	const util$1 = require$$0$9;
	const toRegexRange = toRegexRange_1;

	const isObject$2 = val => val !== null && typeof val === 'object' && !Array.isArray(val);

	const transform$1 = toNumber => {
	  return value => toNumber === true ? Number(value) : String(value);
	};

	const isValidValue = value => {
	  return typeof value === 'number' || (typeof value === 'string' && value !== '');
	};

	const isNumber$1 = num => Number.isInteger(+num);

	const zeros = input => {
	  let value = `${input}`;
	  let index = -1;
	  if (value[0] === '-') value = value.slice(1);
	  if (value === '0') return false;
	  while (value[++index] === '0');
	  return index > 0;
	};

	const stringify$3 = (start, end, options) => {
	  if (typeof start === 'string' || typeof end === 'string') {
	    return true;
	  }
	  return options.stringify === true;
	};

	const pad = (input, maxLength, toNumber) => {
	  if (maxLength > 0) {
	    let dash = input[0] === '-' ? '-' : '';
	    if (dash) input = input.slice(1);
	    input = (dash + input.padStart(dash ? maxLength - 1 : maxLength, '0'));
	  }
	  if (toNumber === false) {
	    return String(input);
	  }
	  return input;
	};

	const toMaxLen = (input, maxLength) => {
	  let negative = input[0] === '-' ? '-' : '';
	  if (negative) {
	    input = input.slice(1);
	    maxLength--;
	  }
	  while (input.length < maxLength) input = '0' + input;
	  return negative ? ('-' + input) : input;
	};

	const toSequence = (parts, options) => {
	  parts.negatives.sort((a, b) => a < b ? -1 : a > b ? 1 : 0);
	  parts.positives.sort((a, b) => a < b ? -1 : a > b ? 1 : 0);

	  let prefix = options.capture ? '' : '?:';
	  let positives = '';
	  let negatives = '';
	  let result;

	  if (parts.positives.length) {
	    positives = parts.positives.join('|');
	  }

	  if (parts.negatives.length) {
	    negatives = `-(${prefix}${parts.negatives.join('|')})`;
	  }

	  if (positives && negatives) {
	    result = `${positives}|${negatives}`;
	  } else {
	    result = positives || negatives;
	  }

	  if (options.wrap) {
	    return `(${prefix}${result})`;
	  }

	  return result;
	};

	const toRange = (a, b, isNumbers, options) => {
	  if (isNumbers) {
	    return toRegexRange(a, b, { wrap: false, ...options });
	  }

	  let start = String.fromCharCode(a);
	  if (a === b) return start;

	  let stop = String.fromCharCode(b);
	  return `[${start}-${stop}]`;
	};

	const toRegex = (start, end, options) => {
	  if (Array.isArray(start)) {
	    let wrap = options.wrap === true;
	    let prefix = options.capture ? '' : '?:';
	    return wrap ? `(${prefix}${start.join('|')})` : start.join('|');
	  }
	  return toRegexRange(start, end, options);
	};

	const rangeError = (...args) => {
	  return new RangeError('Invalid range arguments: ' + util$1.inspect(...args));
	};

	const invalidRange = (start, end, options) => {
	  if (options.strictRanges === true) throw rangeError([start, end]);
	  return [];
	};

	const invalidStep = (step, options) => {
	  if (options.strictRanges === true) {
	    throw new TypeError(`Expected step "${step}" to be a number`);
	  }
	  return [];
	};

	const fillNumbers = (start, end, step = 1, options = {}) => {
	  let a = Number(start);
	  let b = Number(end);

	  if (!Number.isInteger(a) || !Number.isInteger(b)) {
	    if (options.strictRanges === true) throw rangeError([start, end]);
	    return [];
	  }

	  // fix negative zero
	  if (a === 0) a = 0;
	  if (b === 0) b = 0;

	  let descending = a > b;
	  let startString = String(start);
	  let endString = String(end);
	  let stepString = String(step);
	  step = Math.max(Math.abs(step), 1);

	  let padded = zeros(startString) || zeros(endString) || zeros(stepString);
	  let maxLen = padded ? Math.max(startString.length, endString.length, stepString.length) : 0;
	  let toNumber = padded === false && stringify$3(start, end, options) === false;
	  let format = options.transform || transform$1(toNumber);

	  if (options.toRegex && step === 1) {
	    return toRange(toMaxLen(start, maxLen), toMaxLen(end, maxLen), true, options);
	  }

	  let parts = { negatives: [], positives: [] };
	  let push = num => parts[num < 0 ? 'negatives' : 'positives'].push(Math.abs(num));
	  let range = [];
	  let index = 0;

	  while (descending ? a >= b : a <= b) {
	    if (options.toRegex === true && step > 1) {
	      push(a);
	    } else {
	      range.push(pad(format(a, index), maxLen, toNumber));
	    }
	    a = descending ? a - step : a + step;
	    index++;
	  }

	  if (options.toRegex === true) {
	    return step > 1
	      ? toSequence(parts, options)
	      : toRegex(range, null, { wrap: false, ...options });
	  }

	  return range;
	};

	const fillLetters = (start, end, step = 1, options = {}) => {
	  if ((!isNumber$1(start) && start.length > 1) || (!isNumber$1(end) && end.length > 1)) {
	    return invalidRange(start, end, options);
	  }


	  let format = options.transform || (val => String.fromCharCode(val));
	  let a = `${start}`.charCodeAt(0);
	  let b = `${end}`.charCodeAt(0);

	  let descending = a > b;
	  let min = Math.min(a, b);
	  let max = Math.max(a, b);

	  if (options.toRegex && step === 1) {
	    return toRange(min, max, false, options);
	  }

	  let range = [];
	  let index = 0;

	  while (descending ? a >= b : a <= b) {
	    range.push(format(a, index));
	    a = descending ? a - step : a + step;
	    index++;
	  }

	  if (options.toRegex === true) {
	    return toRegex(range, null, { wrap: false, options });
	  }

	  return range;
	};

	const fill$2 = (start, end, step, options = {}) => {
	  if (end == null && isValidValue(start)) {
	    return [start];
	  }

	  if (!isValidValue(start) || !isValidValue(end)) {
	    return invalidRange(start, end, options);
	  }

	  if (typeof step === 'function') {
	    return fill$2(start, end, 1, { transform: step });
	  }

	  if (isObject$2(step)) {
	    return fill$2(start, end, 0, step);
	  }

	  let opts = { ...options };
	  if (opts.capture === true) opts.wrap = true;
	  step = step || opts.step || 1;

	  if (!isNumber$1(step)) {
	    if (step != null && !isObject$2(step)) return invalidStep(step, opts);
	    return fill$2(start, end, 1, step);
	  }

	  if (isNumber$1(start) && isNumber$1(end)) {
	    return fillNumbers(start, end, step, opts);
	  }

	  return fillLetters(start, end, Math.max(Math.abs(step), 1), opts);
	};

	var fillRange = fill$2;

	const fill$1 = fillRange;
	const utils$h = utils$j;

	const compile$1 = (ast, options = {}) => {
	  let walk = (node, parent = {}) => {
	    let invalidBlock = utils$h.isInvalidBrace(parent);
	    let invalidNode = node.invalid === true && options.escapeInvalid === true;
	    let invalid = invalidBlock === true || invalidNode === true;
	    let prefix = options.escapeInvalid === true ? '\\' : '';
	    let output = '';

	    if (node.isOpen === true) {
	      return prefix + node.value;
	    }
	    if (node.isClose === true) {
	      return prefix + node.value;
	    }

	    if (node.type === 'open') {
	      return invalid ? (prefix + node.value) : '(';
	    }

	    if (node.type === 'close') {
	      return invalid ? (prefix + node.value) : ')';
	    }

	    if (node.type === 'comma') {
	      return node.prev.type === 'comma' ? '' : (invalid ? node.value : '|');
	    }

	    if (node.value) {
	      return node.value;
	    }

	    if (node.nodes && node.ranges > 0) {
	      let args = utils$h.reduce(node.nodes);
	      let range = fill$1(...args, { ...options, wrap: false, toRegex: true });

	      if (range.length !== 0) {
	        return args.length > 1 && range.length > 1 ? `(${range})` : range;
	      }
	    }

	    if (node.nodes) {
	      for (let child of node.nodes) {
	        output += walk(child, node);
	      }
	    }
	    return output;
	  };

	  return walk(ast);
	};

	var compile_1 = compile$1;

	const fill = fillRange;
	const stringify$2 = stringify$4;
	const utils$g = utils$j;

	const append = (queue = '', stash = '', enclose = false) => {
	  let result = [];

	  queue = [].concat(queue);
	  stash = [].concat(stash);

	  if (!stash.length) return queue;
	  if (!queue.length) {
	    return enclose ? utils$g.flatten(stash).map(ele => `{${ele}}`) : stash;
	  }

	  for (let item of queue) {
	    if (Array.isArray(item)) {
	      for (let value of item) {
	        result.push(append(value, stash, enclose));
	      }
	    } else {
	      for (let ele of stash) {
	        if (enclose === true && typeof ele === 'string') ele = `{${ele}}`;
	        result.push(Array.isArray(ele) ? append(item, ele, enclose) : (item + ele));
	      }
	    }
	  }
	  return utils$g.flatten(result);
	};

	const expand$1 = (ast, options = {}) => {
	  let rangeLimit = options.rangeLimit === void 0 ? 1000 : options.rangeLimit;

	  let walk = (node, parent = {}) => {
	    node.queue = [];

	    let p = parent;
	    let q = parent.queue;

	    while (p.type !== 'brace' && p.type !== 'root' && p.parent) {
	      p = p.parent;
	      q = p.queue;
	    }

	    if (node.invalid || node.dollar) {
	      q.push(append(q.pop(), stringify$2(node, options)));
	      return;
	    }

	    if (node.type === 'brace' && node.invalid !== true && node.nodes.length === 2) {
	      q.push(append(q.pop(), ['{}']));
	      return;
	    }

	    if (node.nodes && node.ranges > 0) {
	      let args = utils$g.reduce(node.nodes);

	      if (utils$g.exceedsLimit(...args, options.step, rangeLimit)) {
	        throw new RangeError('expanded array length exceeds range limit. Use options.rangeLimit to increase or disable the limit.');
	      }

	      let range = fill(...args, options);
	      if (range.length === 0) {
	        range = stringify$2(node, options);
	      }

	      q.push(append(q.pop(), range));
	      node.nodes = [];
	      return;
	    }

	    let enclose = utils$g.encloseBrace(node);
	    let queue = node.queue;
	    let block = node;

	    while (block.type !== 'brace' && block.type !== 'root' && block.parent) {
	      block = block.parent;
	      queue = block.queue;
	    }

	    for (let i = 0; i < node.nodes.length; i++) {
	      let child = node.nodes[i];

	      if (child.type === 'comma' && node.type === 'brace') {
	        if (i === 1) queue.push('');
	        queue.push('');
	        continue;
	      }

	      if (child.type === 'close') {
	        q.push(append(q.pop(), queue, enclose));
	        continue;
	      }

	      if (child.value && child.type !== 'open') {
	        queue.push(append(queue.pop(), child.value));
	        continue;
	      }

	      if (child.nodes) {
	        walk(child, node);
	      }
	    }

	    return queue;
	  };

	  return utils$g.flatten(walk(ast));
	};

	var expand_1 = expand$1;

	var constants$5 = {
	  MAX_LENGTH: 1024 * 64,

	  // Digits
	  CHAR_0: '0', /* 0 */
	  CHAR_9: '9', /* 9 */

	  // Alphabet chars.
	  CHAR_UPPERCASE_A: 'A', /* A */
	  CHAR_LOWERCASE_A: 'a', /* a */
	  CHAR_UPPERCASE_Z: 'Z', /* Z */
	  CHAR_LOWERCASE_Z: 'z', /* z */

	  CHAR_LEFT_PARENTHESES: '(', /* ( */
	  CHAR_RIGHT_PARENTHESES: ')', /* ) */

	  CHAR_ASTERISK: '*', /* * */

	  // Non-alphabetic chars.
	  CHAR_AMPERSAND: '&', /* & */
	  CHAR_AT: '@', /* @ */
	  CHAR_BACKSLASH: '\\', /* \ */
	  CHAR_BACKTICK: '`', /* ` */
	  CHAR_CARRIAGE_RETURN: '\r', /* \r */
	  CHAR_CIRCUMFLEX_ACCENT: '^', /* ^ */
	  CHAR_COLON: ':', /* : */
	  CHAR_COMMA: ',', /* , */
	  CHAR_DOLLAR: '$', /* . */
	  CHAR_DOT: '.', /* . */
	  CHAR_DOUBLE_QUOTE: '"', /* " */
	  CHAR_EQUAL: '=', /* = */
	  CHAR_EXCLAMATION_MARK: '!', /* ! */
	  CHAR_FORM_FEED: '\f', /* \f */
	  CHAR_FORWARD_SLASH: '/', /* / */
	  CHAR_HASH: '#', /* # */
	  CHAR_HYPHEN_MINUS: '-', /* - */
	  CHAR_LEFT_ANGLE_BRACKET: '<', /* < */
	  CHAR_LEFT_CURLY_BRACE: '{', /* { */
	  CHAR_LEFT_SQUARE_BRACKET: '[', /* [ */
	  CHAR_LINE_FEED: '\n', /* \n */
	  CHAR_NO_BREAK_SPACE: '\u00A0', /* \u00A0 */
	  CHAR_PERCENT: '%', /* % */
	  CHAR_PLUS: '+', /* + */
	  CHAR_QUESTION_MARK: '?', /* ? */
	  CHAR_RIGHT_ANGLE_BRACKET: '>', /* > */
	  CHAR_RIGHT_CURLY_BRACE: '}', /* } */
	  CHAR_RIGHT_SQUARE_BRACKET: ']', /* ] */
	  CHAR_SEMICOLON: ';', /* ; */
	  CHAR_SINGLE_QUOTE: '\'', /* ' */
	  CHAR_SPACE: ' ', /*   */
	  CHAR_TAB: '\t', /* \t */
	  CHAR_UNDERSCORE: '_', /* _ */
	  CHAR_VERTICAL_LINE: '|', /* | */
	  CHAR_ZERO_WIDTH_NOBREAK_SPACE: '\uFEFF' /* \uFEFF */
	};

	const stringify$1 = stringify$4;

	/**
	 * Constants
	 */

	const {
	  MAX_LENGTH: MAX_LENGTH$1,
	  CHAR_BACKSLASH, /* \ */
	  CHAR_BACKTICK, /* ` */
	  CHAR_COMMA: CHAR_COMMA$1, /* , */
	  CHAR_DOT: CHAR_DOT$1, /* . */
	  CHAR_LEFT_PARENTHESES: CHAR_LEFT_PARENTHESES$1, /* ( */
	  CHAR_RIGHT_PARENTHESES: CHAR_RIGHT_PARENTHESES$1, /* ) */
	  CHAR_LEFT_CURLY_BRACE: CHAR_LEFT_CURLY_BRACE$1, /* { */
	  CHAR_RIGHT_CURLY_BRACE: CHAR_RIGHT_CURLY_BRACE$1, /* } */
	  CHAR_LEFT_SQUARE_BRACKET: CHAR_LEFT_SQUARE_BRACKET$1, /* [ */
	  CHAR_RIGHT_SQUARE_BRACKET: CHAR_RIGHT_SQUARE_BRACKET$1, /* ] */
	  CHAR_DOUBLE_QUOTE, /* " */
	  CHAR_SINGLE_QUOTE, /* ' */
	  CHAR_NO_BREAK_SPACE,
	  CHAR_ZERO_WIDTH_NOBREAK_SPACE
	} = constants$5;

	/**
	 * parse
	 */

	const parse$3 = (input, options = {}) => {
	  if (typeof input !== 'string') {
	    throw new TypeError('Expected a string');
	  }

	  let opts = options || {};
	  let max = typeof opts.maxLength === 'number' ? Math.min(MAX_LENGTH$1, opts.maxLength) : MAX_LENGTH$1;
	  if (input.length > max) {
	    throw new SyntaxError(`Input length (${input.length}), exceeds max characters (${max})`);
	  }

	  let ast = { type: 'root', input, nodes: [] };
	  let stack = [ast];
	  let block = ast;
	  let prev = ast;
	  let brackets = 0;
	  let length = input.length;
	  let index = 0;
	  let depth = 0;
	  let value;

	  /**
	   * Helpers
	   */

	  const advance = () => input[index++];
	  const push = node => {
	    if (node.type === 'text' && prev.type === 'dot') {
	      prev.type = 'text';
	    }

	    if (prev && prev.type === 'text' && node.type === 'text') {
	      prev.value += node.value;
	      return;
	    }

	    block.nodes.push(node);
	    node.parent = block;
	    node.prev = prev;
	    prev = node;
	    return node;
	  };

	  push({ type: 'bos' });

	  while (index < length) {
	    block = stack[stack.length - 1];
	    value = advance();

	    /**
	     * Invalid chars
	     */

	    if (value === CHAR_ZERO_WIDTH_NOBREAK_SPACE || value === CHAR_NO_BREAK_SPACE) {
	      continue;
	    }

	    /**
	     * Escaped chars
	     */

	    if (value === CHAR_BACKSLASH) {
	      push({ type: 'text', value: (options.keepEscaping ? value : '') + advance() });
	      continue;
	    }

	    /**
	     * Right square bracket (literal): ']'
	     */

	    if (value === CHAR_RIGHT_SQUARE_BRACKET$1) {
	      push({ type: 'text', value: '\\' + value });
	      continue;
	    }

	    /**
	     * Left square bracket: '['
	     */

	    if (value === CHAR_LEFT_SQUARE_BRACKET$1) {
	      brackets++;
	      let next;

	      while (index < length && (next = advance())) {
	        value += next;

	        if (next === CHAR_LEFT_SQUARE_BRACKET$1) {
	          brackets++;
	          continue;
	        }

	        if (next === CHAR_BACKSLASH) {
	          value += advance();
	          continue;
	        }

	        if (next === CHAR_RIGHT_SQUARE_BRACKET$1) {
	          brackets--;

	          if (brackets === 0) {
	            break;
	          }
	        }
	      }

	      push({ type: 'text', value });
	      continue;
	    }

	    /**
	     * Parentheses
	     */

	    if (value === CHAR_LEFT_PARENTHESES$1) {
	      block = push({ type: 'paren', nodes: [] });
	      stack.push(block);
	      push({ type: 'text', value });
	      continue;
	    }

	    if (value === CHAR_RIGHT_PARENTHESES$1) {
	      if (block.type !== 'paren') {
	        push({ type: 'text', value });
	        continue;
	      }
	      block = stack.pop();
	      push({ type: 'text', value });
	      block = stack[stack.length - 1];
	      continue;
	    }

	    /**
	     * Quotes: '|"|`
	     */

	    if (value === CHAR_DOUBLE_QUOTE || value === CHAR_SINGLE_QUOTE || value === CHAR_BACKTICK) {
	      let open = value;
	      let next;

	      if (options.keepQuotes !== true) {
	        value = '';
	      }

	      while (index < length && (next = advance())) {
	        if (next === CHAR_BACKSLASH) {
	          value += next + advance();
	          continue;
	        }

	        if (next === open) {
	          if (options.keepQuotes === true) value += next;
	          break;
	        }

	        value += next;
	      }

	      push({ type: 'text', value });
	      continue;
	    }

	    /**
	     * Left curly brace: '{'
	     */

	    if (value === CHAR_LEFT_CURLY_BRACE$1) {
	      depth++;

	      let dollar = prev.value && prev.value.slice(-1) === '$' || block.dollar === true;
	      let brace = {
	        type: 'brace',
	        open: true,
	        close: false,
	        dollar,
	        depth,
	        commas: 0,
	        ranges: 0,
	        nodes: []
	      };

	      block = push(brace);
	      stack.push(block);
	      push({ type: 'open', value });
	      continue;
	    }

	    /**
	     * Right curly brace: '}'
	     */

	    if (value === CHAR_RIGHT_CURLY_BRACE$1) {
	      if (block.type !== 'brace') {
	        push({ type: 'text', value });
	        continue;
	      }

	      let type = 'close';
	      block = stack.pop();
	      block.close = true;

	      push({ type, value });
	      depth--;

	      block = stack[stack.length - 1];
	      continue;
	    }

	    /**
	     * Comma: ','
	     */

	    if (value === CHAR_COMMA$1 && depth > 0) {
	      if (block.ranges > 0) {
	        block.ranges = 0;
	        let open = block.nodes.shift();
	        block.nodes = [open, { type: 'text', value: stringify$1(block) }];
	      }

	      push({ type: 'comma', value });
	      block.commas++;
	      continue;
	    }

	    /**
	     * Dot: '.'
	     */

	    if (value === CHAR_DOT$1 && depth > 0 && block.commas === 0) {
	      let siblings = block.nodes;

	      if (depth === 0 || siblings.length === 0) {
	        push({ type: 'text', value });
	        continue;
	      }

	      if (prev.type === 'dot') {
	        block.range = [];
	        prev.value += value;
	        prev.type = 'range';

	        if (block.nodes.length !== 3 && block.nodes.length !== 5) {
	          block.invalid = true;
	          block.ranges = 0;
	          prev.type = 'text';
	          continue;
	        }

	        block.ranges++;
	        block.args = [];
	        continue;
	      }

	      if (prev.type === 'range') {
	        siblings.pop();

	        let before = siblings[siblings.length - 1];
	        before.value += prev.value + value;
	        prev = before;
	        block.ranges--;
	        continue;
	      }

	      push({ type: 'dot', value });
	      continue;
	    }

	    /**
	     * Text
	     */

	    push({ type: 'text', value });
	  }

	  // Mark imbalanced braces and brackets as invalid
	  do {
	    block = stack.pop();

	    if (block.type !== 'root') {
	      block.nodes.forEach(node => {
	        if (!node.nodes) {
	          if (node.type === 'open') node.isOpen = true;
	          if (node.type === 'close') node.isClose = true;
	          if (!node.nodes) node.type = 'text';
	          node.invalid = true;
	        }
	      });

	      // get the location of the block on parent.nodes (block's siblings)
	      let parent = stack[stack.length - 1];
	      let index = parent.nodes.indexOf(block);
	      // replace the (invalid) block with it's nodes
	      parent.nodes.splice(index, 1, ...block.nodes);
	    }
	  } while (stack.length > 0);

	  push({ type: 'eos' });
	  return ast;
	};

	var parse_1$2 = parse$3;

	const stringify = stringify$4;
	const compile = compile_1;
	const expand = expand_1;
	const parse$2 = parse_1$2;

	/**
	 * Expand the given pattern or create a regex-compatible string.
	 *
	 * ```js
	 * const braces = require('braces');
	 * console.log(braces('{a,b,c}', { compile: true })); //=> ['(a|b|c)']
	 * console.log(braces('{a,b,c}')); //=> ['a', 'b', 'c']
	 * ```
	 * @param {String} `str`
	 * @param {Object} `options`
	 * @return {String}
	 * @api public
	 */

	const braces$1 = (input, options = {}) => {
	  let output = [];

	  if (Array.isArray(input)) {
	    for (let pattern of input) {
	      let result = braces$1.create(pattern, options);
	      if (Array.isArray(result)) {
	        output.push(...result);
	      } else {
	        output.push(result);
	      }
	    }
	  } else {
	    output = [].concat(braces$1.create(input, options));
	  }

	  if (options && options.expand === true && options.nodupes === true) {
	    output = [...new Set(output)];
	  }
	  return output;
	};

	/**
	 * Parse the given `str` with the given `options`.
	 *
	 * ```js
	 * // braces.parse(pattern, [, options]);
	 * const ast = braces.parse('a/{b,c}/d');
	 * console.log(ast);
	 * ```
	 * @param {String} pattern Brace pattern to parse
	 * @param {Object} options
	 * @return {Object} Returns an AST
	 * @api public
	 */

	braces$1.parse = (input, options = {}) => parse$2(input, options);

	/**
	 * Creates a braces string from an AST, or an AST node.
	 *
	 * ```js
	 * const braces = require('braces');
	 * let ast = braces.parse('foo/{a,b}/bar');
	 * console.log(stringify(ast.nodes[2])); //=> '{a,b}'
	 * ```
	 * @param {String} `input` Brace pattern or AST.
	 * @param {Object} `options`
	 * @return {Array} Returns an array of expanded values.
	 * @api public
	 */

	braces$1.stringify = (input, options = {}) => {
	  if (typeof input === 'string') {
	    return stringify(braces$1.parse(input, options), options);
	  }
	  return stringify(input, options);
	};

	/**
	 * Compiles a brace pattern into a regex-compatible, optimized string.
	 * This method is called by the main [braces](#braces) function by default.
	 *
	 * ```js
	 * const braces = require('braces');
	 * console.log(braces.compile('a/{b,c}/d'));
	 * //=> ['a/(b|c)/d']
	 * ```
	 * @param {String} `input` Brace pattern or AST.
	 * @param {Object} `options`
	 * @return {Array} Returns an array of expanded values.
	 * @api public
	 */

	braces$1.compile = (input, options = {}) => {
	  if (typeof input === 'string') {
	    input = braces$1.parse(input, options);
	  }
	  return compile(input, options);
	};

	/**
	 * Expands a brace pattern into an array. This method is called by the
	 * main [braces](#braces) function when `options.expand` is true. Before
	 * using this method it's recommended that you read the [performance notes](#performance))
	 * and advantages of using [.compile](#compile) instead.
	 *
	 * ```js
	 * const braces = require('braces');
	 * console.log(braces.expand('a/{b,c}/d'));
	 * //=> ['a/b/d', 'a/c/d'];
	 * ```
	 * @param {String} `pattern` Brace pattern
	 * @param {Object} `options`
	 * @return {Array} Returns an array of expanded values.
	 * @api public
	 */

	braces$1.expand = (input, options = {}) => {
	  if (typeof input === 'string') {
	    input = braces$1.parse(input, options);
	  }

	  let result = expand(input, options);

	  // filter out empty strings if specified
	  if (options.noempty === true) {
	    result = result.filter(Boolean);
	  }

	  // filter out duplicates if specified
	  if (options.nodupes === true) {
	    result = [...new Set(result)];
	  }

	  return result;
	};

	/**
	 * Processes a brace pattern and returns either an expanded array
	 * (if `options.expand` is true), a highly optimized regex-compatible string.
	 * This method is called by the main [braces](#braces) function.
	 *
	 * ```js
	 * const braces = require('braces');
	 * console.log(braces.create('user-{200..300}/project-{a,b,c}-{1..10}'))
	 * //=> 'user-(20[0-9]|2[1-9][0-9]|300)/project-(a|b|c)-([1-9]|10)'
	 * ```
	 * @param {String} `pattern` Brace pattern
	 * @param {Object} `options`
	 * @return {Array} Returns an array of expanded values.
	 * @api public
	 */

	braces$1.create = (input, options = {}) => {
	  if (input === '' || input.length < 3) {
	    return [input];
	  }

	 return options.expand !== true
	    ? braces$1.compile(input, options)
	    : braces$1.expand(input, options);
	};

	/**
	 * Expose "braces"
	 */

	var braces_1 = braces$1;

	var utils$f = {};

	const path$7 = require$$0$8;
	const WIN_SLASH = '\\\\/';
	const WIN_NO_SLASH = `[^${WIN_SLASH}]`;

	/**
	 * Posix glob regex
	 */

	const DOT_LITERAL = '\\.';
	const PLUS_LITERAL = '\\+';
	const QMARK_LITERAL = '\\?';
	const SLASH_LITERAL = '\\/';
	const ONE_CHAR = '(?=.)';
	const QMARK = '[^/]';
	const END_ANCHOR = `(?:${SLASH_LITERAL}|$)`;
	const START_ANCHOR = `(?:^|${SLASH_LITERAL})`;
	const DOTS_SLASH = `${DOT_LITERAL}{1,2}${END_ANCHOR}`;
	const NO_DOT = `(?!${DOT_LITERAL})`;
	const NO_DOTS = `(?!${START_ANCHOR}${DOTS_SLASH})`;
	const NO_DOT_SLASH = `(?!${DOT_LITERAL}{0,1}${END_ANCHOR})`;
	const NO_DOTS_SLASH = `(?!${DOTS_SLASH})`;
	const QMARK_NO_DOT = `[^.${SLASH_LITERAL}]`;
	const STAR = `${QMARK}*?`;

	const POSIX_CHARS = {
	  DOT_LITERAL,
	  PLUS_LITERAL,
	  QMARK_LITERAL,
	  SLASH_LITERAL,
	  ONE_CHAR,
	  QMARK,
	  END_ANCHOR,
	  DOTS_SLASH,
	  NO_DOT,
	  NO_DOTS,
	  NO_DOT_SLASH,
	  NO_DOTS_SLASH,
	  QMARK_NO_DOT,
	  STAR,
	  START_ANCHOR
	};

	/**
	 * Windows glob regex
	 */

	const WINDOWS_CHARS = {
	  ...POSIX_CHARS,

	  SLASH_LITERAL: `[${WIN_SLASH}]`,
	  QMARK: WIN_NO_SLASH,
	  STAR: `${WIN_NO_SLASH}*?`,
	  DOTS_SLASH: `${DOT_LITERAL}{1,2}(?:[${WIN_SLASH}]|$)`,
	  NO_DOT: `(?!${DOT_LITERAL})`,
	  NO_DOTS: `(?!(?:^|[${WIN_SLASH}])${DOT_LITERAL}{1,2}(?:[${WIN_SLASH}]|$))`,
	  NO_DOT_SLASH: `(?!${DOT_LITERAL}{0,1}(?:[${WIN_SLASH}]|$))`,
	  NO_DOTS_SLASH: `(?!${DOT_LITERAL}{1,2}(?:[${WIN_SLASH}]|$))`,
	  QMARK_NO_DOT: `[^.${WIN_SLASH}]`,
	  START_ANCHOR: `(?:^|[${WIN_SLASH}])`,
	  END_ANCHOR: `(?:[${WIN_SLASH}]|$)`
	};

	/**
	 * POSIX Bracket Regex
	 */

	const POSIX_REGEX_SOURCE$1 = {
	  alnum: 'a-zA-Z0-9',
	  alpha: 'a-zA-Z',
	  ascii: '\\x00-\\x7F',
	  blank: ' \\t',
	  cntrl: '\\x00-\\x1F\\x7F',
	  digit: '0-9',
	  graph: '\\x21-\\x7E',
	  lower: 'a-z',
	  print: '\\x20-\\x7E ',
	  punct: '\\-!"#$%&\'()\\*+,./:;<=>?@[\\]^_`{|}~',
	  space: ' \\t\\r\\n\\v\\f',
	  upper: 'A-Z',
	  word: 'A-Za-z0-9_',
	  xdigit: 'A-Fa-f0-9'
	};

	var constants$4 = {
	  MAX_LENGTH: 1024 * 64,
	  POSIX_REGEX_SOURCE: POSIX_REGEX_SOURCE$1,

	  // regular expressions
	  REGEX_BACKSLASH: /\\(?![*+?^${}(|)[\]])/g,
	  REGEX_NON_SPECIAL_CHARS: /^[^@![\].,$*+?^{}()|\\/]+/,
	  REGEX_SPECIAL_CHARS: /[-*+?.^${}(|)[\]]/,
	  REGEX_SPECIAL_CHARS_BACKREF: /(\\?)((\W)(\3*))/g,
	  REGEX_SPECIAL_CHARS_GLOBAL: /([-*+?.^${}(|)[\]])/g,
	  REGEX_REMOVE_BACKSLASH: /(?:\[.*?[^\\]\]|\\(?=.))/g,

	  // Replace globs with equivalent patterns to reduce parsing time.
	  REPLACEMENTS: {
	    '***': '*',
	    '**/**': '**',
	    '**/**/**': '**'
	  },

	  // Digits
	  CHAR_0: 48, /* 0 */
	  CHAR_9: 57, /* 9 */

	  // Alphabet chars.
	  CHAR_UPPERCASE_A: 65, /* A */
	  CHAR_LOWERCASE_A: 97, /* a */
	  CHAR_UPPERCASE_Z: 90, /* Z */
	  CHAR_LOWERCASE_Z: 122, /* z */

	  CHAR_LEFT_PARENTHESES: 40, /* ( */
	  CHAR_RIGHT_PARENTHESES: 41, /* ) */

	  CHAR_ASTERISK: 42, /* * */

	  // Non-alphabetic chars.
	  CHAR_AMPERSAND: 38, /* & */
	  CHAR_AT: 64, /* @ */
	  CHAR_BACKWARD_SLASH: 92, /* \ */
	  CHAR_CARRIAGE_RETURN: 13, /* \r */
	  CHAR_CIRCUMFLEX_ACCENT: 94, /* ^ */
	  CHAR_COLON: 58, /* : */
	  CHAR_COMMA: 44, /* , */
	  CHAR_DOT: 46, /* . */
	  CHAR_DOUBLE_QUOTE: 34, /* " */
	  CHAR_EQUAL: 61, /* = */
	  CHAR_EXCLAMATION_MARK: 33, /* ! */
	  CHAR_FORM_FEED: 12, /* \f */
	  CHAR_FORWARD_SLASH: 47, /* / */
	  CHAR_GRAVE_ACCENT: 96, /* ` */
	  CHAR_HASH: 35, /* # */
	  CHAR_HYPHEN_MINUS: 45, /* - */
	  CHAR_LEFT_ANGLE_BRACKET: 60, /* < */
	  CHAR_LEFT_CURLY_BRACE: 123, /* { */
	  CHAR_LEFT_SQUARE_BRACKET: 91, /* [ */
	  CHAR_LINE_FEED: 10, /* \n */
	  CHAR_NO_BREAK_SPACE: 160, /* \u00A0 */
	  CHAR_PERCENT: 37, /* % */
	  CHAR_PLUS: 43, /* + */
	  CHAR_QUESTION_MARK: 63, /* ? */
	  CHAR_RIGHT_ANGLE_BRACKET: 62, /* > */
	  CHAR_RIGHT_CURLY_BRACE: 125, /* } */
	  CHAR_RIGHT_SQUARE_BRACKET: 93, /* ] */
	  CHAR_SEMICOLON: 59, /* ; */
	  CHAR_SINGLE_QUOTE: 39, /* ' */
	  CHAR_SPACE: 32, /*   */
	  CHAR_TAB: 9, /* \t */
	  CHAR_UNDERSCORE: 95, /* _ */
	  CHAR_VERTICAL_LINE: 124, /* | */
	  CHAR_ZERO_WIDTH_NOBREAK_SPACE: 65279, /* \uFEFF */

	  SEP: path$7.sep,

	  /**
	   * Create EXTGLOB_CHARS
	   */

	  extglobChars(chars) {
	    return {
	      '!': { type: 'negate', open: '(?:(?!(?:', close: `))${chars.STAR})` },
	      '?': { type: 'qmark', open: '(?:', close: ')?' },
	      '+': { type: 'plus', open: '(?:', close: ')+' },
	      '*': { type: 'star', open: '(?:', close: ')*' },
	      '@': { type: 'at', open: '(?:', close: ')' }
	    };
	  },

	  /**
	   * Create GLOB_CHARS
	   */

	  globChars(win32) {
	    return win32 === true ? WINDOWS_CHARS : POSIX_CHARS;
	  }
	};

	(function (exports) {

		const path = require$$0$8;
		const win32 = process.platform === 'win32';
		const {
		  REGEX_BACKSLASH,
		  REGEX_REMOVE_BACKSLASH,
		  REGEX_SPECIAL_CHARS,
		  REGEX_SPECIAL_CHARS_GLOBAL
		} = constants$4;

		exports.isObject = val => val !== null && typeof val === 'object' && !Array.isArray(val);
		exports.hasRegexChars = str => REGEX_SPECIAL_CHARS.test(str);
		exports.isRegexChar = str => str.length === 1 && exports.hasRegexChars(str);
		exports.escapeRegex = str => str.replace(REGEX_SPECIAL_CHARS_GLOBAL, '\\$1');
		exports.toPosixSlashes = str => str.replace(REGEX_BACKSLASH, '/');

		exports.removeBackslashes = str => {
		  return str.replace(REGEX_REMOVE_BACKSLASH, match => {
		    return match === '\\' ? '' : match;
		  });
		};

		exports.supportsLookbehinds = () => {
		  const segs = process.version.slice(1).split('.').map(Number);
		  if (segs.length === 3 && segs[0] >= 9 || (segs[0] === 8 && segs[1] >= 10)) {
		    return true;
		  }
		  return false;
		};

		exports.isWindows = options => {
		  if (options && typeof options.windows === 'boolean') {
		    return options.windows;
		  }
		  return win32 === true || path.sep === '\\';
		};

		exports.escapeLast = (input, char, lastIdx) => {
		  const idx = input.lastIndexOf(char, lastIdx);
		  if (idx === -1) return input;
		  if (input[idx - 1] === '\\') return exports.escapeLast(input, char, idx - 1);
		  return `${input.slice(0, idx)}\\${input.slice(idx)}`;
		};

		exports.removePrefix = (input, state = {}) => {
		  let output = input;
		  if (output.startsWith('./')) {
		    output = output.slice(2);
		    state.prefix = './';
		  }
		  return output;
		};

		exports.wrapOutput = (input, state = {}, options = {}) => {
		  const prepend = options.contains ? '' : '^';
		  const append = options.contains ? '' : '$';

		  let output = `${prepend}(?:${input})${append}`;
		  if (state.negated === true) {
		    output = `(?:^(?!${output}).*$)`;
		  }
		  return output;
		}; 
	} (utils$f));

	const utils$e = utils$f;
	const {
	  CHAR_ASTERISK,             /* * */
	  CHAR_AT,                   /* @ */
	  CHAR_BACKWARD_SLASH,       /* \ */
	  CHAR_COMMA,                /* , */
	  CHAR_DOT,                  /* . */
	  CHAR_EXCLAMATION_MARK,     /* ! */
	  CHAR_FORWARD_SLASH,        /* / */
	  CHAR_LEFT_CURLY_BRACE,     /* { */
	  CHAR_LEFT_PARENTHESES,     /* ( */
	  CHAR_LEFT_SQUARE_BRACKET,  /* [ */
	  CHAR_PLUS,                 /* + */
	  CHAR_QUESTION_MARK,        /* ? */
	  CHAR_RIGHT_CURLY_BRACE,    /* } */
	  CHAR_RIGHT_PARENTHESES,    /* ) */
	  CHAR_RIGHT_SQUARE_BRACKET  /* ] */
	} = constants$4;

	const isPathSeparator = code => {
	  return code === CHAR_FORWARD_SLASH || code === CHAR_BACKWARD_SLASH;
	};

	const depth = token => {
	  if (token.isPrefix !== true) {
	    token.depth = token.isGlobstar ? Infinity : 1;
	  }
	};

	/**
	 * Quickly scans a glob pattern and returns an object with a handful of
	 * useful properties, like `isGlob`, `path` (the leading non-glob, if it exists),
	 * `glob` (the actual pattern), `negated` (true if the path starts with `!` but not
	 * with `!(`) and `negatedExtglob` (true if the path starts with `!(`).
	 *
	 * ```js
	 * const pm = require('picomatch');
	 * console.log(pm.scan('foo/bar/*.js'));
	 * { isGlob: true, input: 'foo/bar/*.js', base: 'foo/bar', glob: '*.js' }
	 * ```
	 * @param {String} `str`
	 * @param {Object} `options`
	 * @return {Object} Returns an object with tokens and regex source string.
	 * @api public
	 */

	const scan$1 = (input, options) => {
	  const opts = options || {};

	  const length = input.length - 1;
	  const scanToEnd = opts.parts === true || opts.scanToEnd === true;
	  const slashes = [];
	  const tokens = [];
	  const parts = [];

	  let str = input;
	  let index = -1;
	  let start = 0;
	  let lastIndex = 0;
	  let isBrace = false;
	  let isBracket = false;
	  let isGlob = false;
	  let isExtglob = false;
	  let isGlobstar = false;
	  let braceEscaped = false;
	  let backslashes = false;
	  let negated = false;
	  let negatedExtglob = false;
	  let finished = false;
	  let braces = 0;
	  let prev;
	  let code;
	  let token = { value: '', depth: 0, isGlob: false };

	  const eos = () => index >= length;
	  const peek = () => str.charCodeAt(index + 1);
	  const advance = () => {
	    prev = code;
	    return str.charCodeAt(++index);
	  };

	  while (index < length) {
	    code = advance();
	    let next;

	    if (code === CHAR_BACKWARD_SLASH) {
	      backslashes = token.backslashes = true;
	      code = advance();

	      if (code === CHAR_LEFT_CURLY_BRACE) {
	        braceEscaped = true;
	      }
	      continue;
	    }

	    if (braceEscaped === true || code === CHAR_LEFT_CURLY_BRACE) {
	      braces++;

	      while (eos() !== true && (code = advance())) {
	        if (code === CHAR_BACKWARD_SLASH) {
	          backslashes = token.backslashes = true;
	          advance();
	          continue;
	        }

	        if (code === CHAR_LEFT_CURLY_BRACE) {
	          braces++;
	          continue;
	        }

	        if (braceEscaped !== true && code === CHAR_DOT && (code = advance()) === CHAR_DOT) {
	          isBrace = token.isBrace = true;
	          isGlob = token.isGlob = true;
	          finished = true;

	          if (scanToEnd === true) {
	            continue;
	          }

	          break;
	        }

	        if (braceEscaped !== true && code === CHAR_COMMA) {
	          isBrace = token.isBrace = true;
	          isGlob = token.isGlob = true;
	          finished = true;

	          if (scanToEnd === true) {
	            continue;
	          }

	          break;
	        }

	        if (code === CHAR_RIGHT_CURLY_BRACE) {
	          braces--;

	          if (braces === 0) {
	            braceEscaped = false;
	            isBrace = token.isBrace = true;
	            finished = true;
	            break;
	          }
	        }
	      }

	      if (scanToEnd === true) {
	        continue;
	      }

	      break;
	    }

	    if (code === CHAR_FORWARD_SLASH) {
	      slashes.push(index);
	      tokens.push(token);
	      token = { value: '', depth: 0, isGlob: false };

	      if (finished === true) continue;
	      if (prev === CHAR_DOT && index === (start + 1)) {
	        start += 2;
	        continue;
	      }

	      lastIndex = index + 1;
	      continue;
	    }

	    if (opts.noext !== true) {
	      const isExtglobChar = code === CHAR_PLUS
	        || code === CHAR_AT
	        || code === CHAR_ASTERISK
	        || code === CHAR_QUESTION_MARK
	        || code === CHAR_EXCLAMATION_MARK;

	      if (isExtglobChar === true && peek() === CHAR_LEFT_PARENTHESES) {
	        isGlob = token.isGlob = true;
	        isExtglob = token.isExtglob = true;
	        finished = true;
	        if (code === CHAR_EXCLAMATION_MARK && index === start) {
	          negatedExtglob = true;
	        }

	        if (scanToEnd === true) {
	          while (eos() !== true && (code = advance())) {
	            if (code === CHAR_BACKWARD_SLASH) {
	              backslashes = token.backslashes = true;
	              code = advance();
	              continue;
	            }

	            if (code === CHAR_RIGHT_PARENTHESES) {
	              isGlob = token.isGlob = true;
	              finished = true;
	              break;
	            }
	          }
	          continue;
	        }
	        break;
	      }
	    }

	    if (code === CHAR_ASTERISK) {
	      if (prev === CHAR_ASTERISK) isGlobstar = token.isGlobstar = true;
	      isGlob = token.isGlob = true;
	      finished = true;

	      if (scanToEnd === true) {
	        continue;
	      }
	      break;
	    }

	    if (code === CHAR_QUESTION_MARK) {
	      isGlob = token.isGlob = true;
	      finished = true;

	      if (scanToEnd === true) {
	        continue;
	      }
	      break;
	    }

	    if (code === CHAR_LEFT_SQUARE_BRACKET) {
	      while (eos() !== true && (next = advance())) {
	        if (next === CHAR_BACKWARD_SLASH) {
	          backslashes = token.backslashes = true;
	          advance();
	          continue;
	        }

	        if (next === CHAR_RIGHT_SQUARE_BRACKET) {
	          isBracket = token.isBracket = true;
	          isGlob = token.isGlob = true;
	          finished = true;
	          break;
	        }
	      }

	      if (scanToEnd === true) {
	        continue;
	      }

	      break;
	    }

	    if (opts.nonegate !== true && code === CHAR_EXCLAMATION_MARK && index === start) {
	      negated = token.negated = true;
	      start++;
	      continue;
	    }

	    if (opts.noparen !== true && code === CHAR_LEFT_PARENTHESES) {
	      isGlob = token.isGlob = true;

	      if (scanToEnd === true) {
	        while (eos() !== true && (code = advance())) {
	          if (code === CHAR_LEFT_PARENTHESES) {
	            backslashes = token.backslashes = true;
	            code = advance();
	            continue;
	          }

	          if (code === CHAR_RIGHT_PARENTHESES) {
	            finished = true;
	            break;
	          }
	        }
	        continue;
	      }
	      break;
	    }

	    if (isGlob === true) {
	      finished = true;

	      if (scanToEnd === true) {
	        continue;
	      }

	      break;
	    }
	  }

	  if (opts.noext === true) {
	    isExtglob = false;
	    isGlob = false;
	  }

	  let base = str;
	  let prefix = '';
	  let glob = '';

	  if (start > 0) {
	    prefix = str.slice(0, start);
	    str = str.slice(start);
	    lastIndex -= start;
	  }

	  if (base && isGlob === true && lastIndex > 0) {
	    base = str.slice(0, lastIndex);
	    glob = str.slice(lastIndex);
	  } else if (isGlob === true) {
	    base = '';
	    glob = str;
	  } else {
	    base = str;
	  }

	  if (base && base !== '' && base !== '/' && base !== str) {
	    if (isPathSeparator(base.charCodeAt(base.length - 1))) {
	      base = base.slice(0, -1);
	    }
	  }

	  if (opts.unescape === true) {
	    if (glob) glob = utils$e.removeBackslashes(glob);

	    if (base && backslashes === true) {
	      base = utils$e.removeBackslashes(base);
	    }
	  }

	  const state = {
	    prefix,
	    input,
	    start,
	    base,
	    glob,
	    isBrace,
	    isBracket,
	    isGlob,
	    isExtglob,
	    isGlobstar,
	    negated,
	    negatedExtglob
	  };

	  if (opts.tokens === true) {
	    state.maxDepth = 0;
	    if (!isPathSeparator(code)) {
	      tokens.push(token);
	    }
	    state.tokens = tokens;
	  }

	  if (opts.parts === true || opts.tokens === true) {
	    let prevIndex;

	    for (let idx = 0; idx < slashes.length; idx++) {
	      const n = prevIndex ? prevIndex + 1 : start;
	      const i = slashes[idx];
	      const value = input.slice(n, i);
	      if (opts.tokens) {
	        if (idx === 0 && start !== 0) {
	          tokens[idx].isPrefix = true;
	          tokens[idx].value = prefix;
	        } else {
	          tokens[idx].value = value;
	        }
	        depth(tokens[idx]);
	        state.maxDepth += tokens[idx].depth;
	      }
	      if (idx !== 0 || value !== '') {
	        parts.push(value);
	      }
	      prevIndex = i;
	    }

	    if (prevIndex && prevIndex + 1 < input.length) {
	      const value = input.slice(prevIndex + 1);
	      parts.push(value);

	      if (opts.tokens) {
	        tokens[tokens.length - 1].value = value;
	        depth(tokens[tokens.length - 1]);
	        state.maxDepth += tokens[tokens.length - 1].depth;
	      }
	    }

	    state.slashes = slashes;
	    state.parts = parts;
	  }

	  return state;
	};

	var scan_1 = scan$1;

	const constants$3 = constants$4;
	const utils$d = utils$f;

	/**
	 * Constants
	 */

	const {
	  MAX_LENGTH,
	  POSIX_REGEX_SOURCE,
	  REGEX_NON_SPECIAL_CHARS,
	  REGEX_SPECIAL_CHARS_BACKREF,
	  REPLACEMENTS
	} = constants$3;

	/**
	 * Helpers
	 */

	const expandRange = (args, options) => {
	  if (typeof options.expandRange === 'function') {
	    return options.expandRange(...args, options);
	  }

	  args.sort();
	  const value = `[${args.join('-')}]`;

	  try {
	    /* eslint-disable-next-line no-new */
	    new RegExp(value);
	  } catch (ex) {
	    return args.map(v => utils$d.escapeRegex(v)).join('..');
	  }

	  return value;
	};

	/**
	 * Create the message for a syntax error
	 */

	const syntaxError = (type, char) => {
	  return `Missing ${type}: "${char}" - use "\\\\${char}" to match literal characters`;
	};

	/**
	 * Parse the given input string.
	 * @param {String} input
	 * @param {Object} options
	 * @return {Object}
	 */

	const parse$1 = (input, options) => {
	  if (typeof input !== 'string') {
	    throw new TypeError('Expected a string');
	  }

	  input = REPLACEMENTS[input] || input;

	  const opts = { ...options };
	  const max = typeof opts.maxLength === 'number' ? Math.min(MAX_LENGTH, opts.maxLength) : MAX_LENGTH;

	  let len = input.length;
	  if (len > max) {
	    throw new SyntaxError(`Input length: ${len}, exceeds maximum allowed length: ${max}`);
	  }

	  const bos = { type: 'bos', value: '', output: opts.prepend || '' };
	  const tokens = [bos];

	  const capture = opts.capture ? '' : '?:';
	  const win32 = utils$d.isWindows(options);

	  // create constants based on platform, for windows or posix
	  const PLATFORM_CHARS = constants$3.globChars(win32);
	  const EXTGLOB_CHARS = constants$3.extglobChars(PLATFORM_CHARS);

	  const {
	    DOT_LITERAL,
	    PLUS_LITERAL,
	    SLASH_LITERAL,
	    ONE_CHAR,
	    DOTS_SLASH,
	    NO_DOT,
	    NO_DOT_SLASH,
	    NO_DOTS_SLASH,
	    QMARK,
	    QMARK_NO_DOT,
	    STAR,
	    START_ANCHOR
	  } = PLATFORM_CHARS;

	  const globstar = opts => {
	    return `(${capture}(?:(?!${START_ANCHOR}${opts.dot ? DOTS_SLASH : DOT_LITERAL}).)*?)`;
	  };

	  const nodot = opts.dot ? '' : NO_DOT;
	  const qmarkNoDot = opts.dot ? QMARK : QMARK_NO_DOT;
	  let star = opts.bash === true ? globstar(opts) : STAR;

	  if (opts.capture) {
	    star = `(${star})`;
	  }

	  // minimatch options support
	  if (typeof opts.noext === 'boolean') {
	    opts.noextglob = opts.noext;
	  }

	  const state = {
	    input,
	    index: -1,
	    start: 0,
	    dot: opts.dot === true,
	    consumed: '',
	    output: '',
	    prefix: '',
	    backtrack: false,
	    negated: false,
	    brackets: 0,
	    braces: 0,
	    parens: 0,
	    quotes: 0,
	    globstar: false,
	    tokens
	  };

	  input = utils$d.removePrefix(input, state);
	  len = input.length;

	  const extglobs = [];
	  const braces = [];
	  const stack = [];
	  let prev = bos;
	  let value;

	  /**
	   * Tokenizing helpers
	   */

	  const eos = () => state.index === len - 1;
	  const peek = state.peek = (n = 1) => input[state.index + n];
	  const advance = state.advance = () => input[++state.index] || '';
	  const remaining = () => input.slice(state.index + 1);
	  const consume = (value = '', num = 0) => {
	    state.consumed += value;
	    state.index += num;
	  };

	  const append = token => {
	    state.output += token.output != null ? token.output : token.value;
	    consume(token.value);
	  };

	  const negate = () => {
	    let count = 1;

	    while (peek() === '!' && (peek(2) !== '(' || peek(3) === '?')) {
	      advance();
	      state.start++;
	      count++;
	    }

	    if (count % 2 === 0) {
	      return false;
	    }

	    state.negated = true;
	    state.start++;
	    return true;
	  };

	  const increment = type => {
	    state[type]++;
	    stack.push(type);
	  };

	  const decrement = type => {
	    state[type]--;
	    stack.pop();
	  };

	  /**
	   * Push tokens onto the tokens array. This helper speeds up
	   * tokenizing by 1) helping us avoid backtracking as much as possible,
	   * and 2) helping us avoid creating extra tokens when consecutive
	   * characters are plain text. This improves performance and simplifies
	   * lookbehinds.
	   */

	  const push = tok => {
	    if (prev.type === 'globstar') {
	      const isBrace = state.braces > 0 && (tok.type === 'comma' || tok.type === 'brace');
	      const isExtglob = tok.extglob === true || (extglobs.length && (tok.type === 'pipe' || tok.type === 'paren'));

	      if (tok.type !== 'slash' && tok.type !== 'paren' && !isBrace && !isExtglob) {
	        state.output = state.output.slice(0, -prev.output.length);
	        prev.type = 'star';
	        prev.value = '*';
	        prev.output = star;
	        state.output += prev.output;
	      }
	    }

	    if (extglobs.length && tok.type !== 'paren') {
	      extglobs[extglobs.length - 1].inner += tok.value;
	    }

	    if (tok.value || tok.output) append(tok);
	    if (prev && prev.type === 'text' && tok.type === 'text') {
	      prev.value += tok.value;
	      prev.output = (prev.output || '') + tok.value;
	      return;
	    }

	    tok.prev = prev;
	    tokens.push(tok);
	    prev = tok;
	  };

	  const extglobOpen = (type, value) => {
	    const token = { ...EXTGLOB_CHARS[value], conditions: 1, inner: '' };

	    token.prev = prev;
	    token.parens = state.parens;
	    token.output = state.output;
	    const output = (opts.capture ? '(' : '') + token.open;

	    increment('parens');
	    push({ type, value, output: state.output ? '' : ONE_CHAR });
	    push({ type: 'paren', extglob: true, value: advance(), output });
	    extglobs.push(token);
	  };

	  const extglobClose = token => {
	    let output = token.close + (opts.capture ? ')' : '');
	    let rest;

	    if (token.type === 'negate') {
	      let extglobStar = star;

	      if (token.inner && token.inner.length > 1 && token.inner.includes('/')) {
	        extglobStar = globstar(opts);
	      }

	      if (extglobStar !== star || eos() || /^\)+$/.test(remaining())) {
	        output = token.close = `)$))${extglobStar}`;
	      }

	      if (token.inner.includes('*') && (rest = remaining()) && /^\.[^\\/.]+$/.test(rest)) {
	        // Any non-magical string (`.ts`) or even nested expression (`.{ts,tsx}`) can follow after the closing parenthesis.
	        // In this case, we need to parse the string and use it in the output of the original pattern.
	        // Suitable patterns: `/!(*.d).ts`, `/!(*.d).{ts,tsx}`, `**/!(*-dbg).@(js)`.
	        //
	        // Disabling the `fastpaths` option due to a problem with parsing strings as `.ts` in the pattern like `**/!(*.d).ts`.
	        const expression = parse$1(rest, { ...options, fastpaths: false }).output;

	        output = token.close = `)${expression})${extglobStar})`;
	      }

	      if (token.prev.type === 'bos') {
	        state.negatedExtglob = true;
	      }
	    }

	    push({ type: 'paren', extglob: true, value, output });
	    decrement('parens');
	  };

	  /**
	   * Fast paths
	   */

	  if (opts.fastpaths !== false && !/(^[*!]|[/()[\]{}"])/.test(input)) {
	    let backslashes = false;

	    let output = input.replace(REGEX_SPECIAL_CHARS_BACKREF, (m, esc, chars, first, rest, index) => {
	      if (first === '\\') {
	        backslashes = true;
	        return m;
	      }

	      if (first === '?') {
	        if (esc) {
	          return esc + first + (rest ? QMARK.repeat(rest.length) : '');
	        }
	        if (index === 0) {
	          return qmarkNoDot + (rest ? QMARK.repeat(rest.length) : '');
	        }
	        return QMARK.repeat(chars.length);
	      }

	      if (first === '.') {
	        return DOT_LITERAL.repeat(chars.length);
	      }

	      if (first === '*') {
	        if (esc) {
	          return esc + first + (rest ? star : '');
	        }
	        return star;
	      }
	      return esc ? m : `\\${m}`;
	    });

	    if (backslashes === true) {
	      if (opts.unescape === true) {
	        output = output.replace(/\\/g, '');
	      } else {
	        output = output.replace(/\\+/g, m => {
	          return m.length % 2 === 0 ? '\\\\' : (m ? '\\' : '');
	        });
	      }
	    }

	    if (output === input && opts.contains === true) {
	      state.output = input;
	      return state;
	    }

	    state.output = utils$d.wrapOutput(output, state, options);
	    return state;
	  }

	  /**
	   * Tokenize input until we reach end-of-string
	   */

	  while (!eos()) {
	    value = advance();

	    if (value === '\u0000') {
	      continue;
	    }

	    /**
	     * Escaped characters
	     */

	    if (value === '\\') {
	      const next = peek();

	      if (next === '/' && opts.bash !== true) {
	        continue;
	      }

	      if (next === '.' || next === ';') {
	        continue;
	      }

	      if (!next) {
	        value += '\\';
	        push({ type: 'text', value });
	        continue;
	      }

	      // collapse slashes to reduce potential for exploits
	      const match = /^\\+/.exec(remaining());
	      let slashes = 0;

	      if (match && match[0].length > 2) {
	        slashes = match[0].length;
	        state.index += slashes;
	        if (slashes % 2 !== 0) {
	          value += '\\';
	        }
	      }

	      if (opts.unescape === true) {
	        value = advance();
	      } else {
	        value += advance();
	      }

	      if (state.brackets === 0) {
	        push({ type: 'text', value });
	        continue;
	      }
	    }

	    /**
	     * If we're inside a regex character class, continue
	     * until we reach the closing bracket.
	     */

	    if (state.brackets > 0 && (value !== ']' || prev.value === '[' || prev.value === '[^')) {
	      if (opts.posix !== false && value === ':') {
	        const inner = prev.value.slice(1);
	        if (inner.includes('[')) {
	          prev.posix = true;

	          if (inner.includes(':')) {
	            const idx = prev.value.lastIndexOf('[');
	            const pre = prev.value.slice(0, idx);
	            const rest = prev.value.slice(idx + 2);
	            const posix = POSIX_REGEX_SOURCE[rest];
	            if (posix) {
	              prev.value = pre + posix;
	              state.backtrack = true;
	              advance();

	              if (!bos.output && tokens.indexOf(prev) === 1) {
	                bos.output = ONE_CHAR;
	              }
	              continue;
	            }
	          }
	        }
	      }

	      if ((value === '[' && peek() !== ':') || (value === '-' && peek() === ']')) {
	        value = `\\${value}`;
	      }

	      if (value === ']' && (prev.value === '[' || prev.value === '[^')) {
	        value = `\\${value}`;
	      }

	      if (opts.posix === true && value === '!' && prev.value === '[') {
	        value = '^';
	      }

	      prev.value += value;
	      append({ value });
	      continue;
	    }

	    /**
	     * If we're inside a quoted string, continue
	     * until we reach the closing double quote.
	     */

	    if (state.quotes === 1 && value !== '"') {
	      value = utils$d.escapeRegex(value);
	      prev.value += value;
	      append({ value });
	      continue;
	    }

	    /**
	     * Double quotes
	     */

	    if (value === '"') {
	      state.quotes = state.quotes === 1 ? 0 : 1;
	      if (opts.keepQuotes === true) {
	        push({ type: 'text', value });
	      }
	      continue;
	    }

	    /**
	     * Parentheses
	     */

	    if (value === '(') {
	      increment('parens');
	      push({ type: 'paren', value });
	      continue;
	    }

	    if (value === ')') {
	      if (state.parens === 0 && opts.strictBrackets === true) {
	        throw new SyntaxError(syntaxError('opening', '('));
	      }

	      const extglob = extglobs[extglobs.length - 1];
	      if (extglob && state.parens === extglob.parens + 1) {
	        extglobClose(extglobs.pop());
	        continue;
	      }

	      push({ type: 'paren', value, output: state.parens ? ')' : '\\)' });
	      decrement('parens');
	      continue;
	    }

	    /**
	     * Square brackets
	     */

	    if (value === '[') {
	      if (opts.nobracket === true || !remaining().includes(']')) {
	        if (opts.nobracket !== true && opts.strictBrackets === true) {
	          throw new SyntaxError(syntaxError('closing', ']'));
	        }

	        value = `\\${value}`;
	      } else {
	        increment('brackets');
	      }

	      push({ type: 'bracket', value });
	      continue;
	    }

	    if (value === ']') {
	      if (opts.nobracket === true || (prev && prev.type === 'bracket' && prev.value.length === 1)) {
	        push({ type: 'text', value, output: `\\${value}` });
	        continue;
	      }

	      if (state.brackets === 0) {
	        if (opts.strictBrackets === true) {
	          throw new SyntaxError(syntaxError('opening', '['));
	        }

	        push({ type: 'text', value, output: `\\${value}` });
	        continue;
	      }

	      decrement('brackets');

	      const prevValue = prev.value.slice(1);
	      if (prev.posix !== true && prevValue[0] === '^' && !prevValue.includes('/')) {
	        value = `/${value}`;
	      }

	      prev.value += value;
	      append({ value });

	      // when literal brackets are explicitly disabled
	      // assume we should match with a regex character class
	      if (opts.literalBrackets === false || utils$d.hasRegexChars(prevValue)) {
	        continue;
	      }

	      const escaped = utils$d.escapeRegex(prev.value);
	      state.output = state.output.slice(0, -prev.value.length);

	      // when literal brackets are explicitly enabled
	      // assume we should escape the brackets to match literal characters
	      if (opts.literalBrackets === true) {
	        state.output += escaped;
	        prev.value = escaped;
	        continue;
	      }

	      // when the user specifies nothing, try to match both
	      prev.value = `(${capture}${escaped}|${prev.value})`;
	      state.output += prev.value;
	      continue;
	    }

	    /**
	     * Braces
	     */

	    if (value === '{' && opts.nobrace !== true) {
	      increment('braces');

	      const open = {
	        type: 'brace',
	        value,
	        output: '(',
	        outputIndex: state.output.length,
	        tokensIndex: state.tokens.length
	      };

	      braces.push(open);
	      push(open);
	      continue;
	    }

	    if (value === '}') {
	      const brace = braces[braces.length - 1];

	      if (opts.nobrace === true || !brace) {
	        push({ type: 'text', value, output: value });
	        continue;
	      }

	      let output = ')';

	      if (brace.dots === true) {
	        const arr = tokens.slice();
	        const range = [];

	        for (let i = arr.length - 1; i >= 0; i--) {
	          tokens.pop();
	          if (arr[i].type === 'brace') {
	            break;
	          }
	          if (arr[i].type !== 'dots') {
	            range.unshift(arr[i].value);
	          }
	        }

	        output = expandRange(range, opts);
	        state.backtrack = true;
	      }

	      if (brace.comma !== true && brace.dots !== true) {
	        const out = state.output.slice(0, brace.outputIndex);
	        const toks = state.tokens.slice(brace.tokensIndex);
	        brace.value = brace.output = '\\{';
	        value = output = '\\}';
	        state.output = out;
	        for (const t of toks) {
	          state.output += (t.output || t.value);
	        }
	      }

	      push({ type: 'brace', value, output });
	      decrement('braces');
	      braces.pop();
	      continue;
	    }

	    /**
	     * Pipes
	     */

	    if (value === '|') {
	      if (extglobs.length > 0) {
	        extglobs[extglobs.length - 1].conditions++;
	      }
	      push({ type: 'text', value });
	      continue;
	    }

	    /**
	     * Commas
	     */

	    if (value === ',') {
	      let output = value;

	      const brace = braces[braces.length - 1];
	      if (brace && stack[stack.length - 1] === 'braces') {
	        brace.comma = true;
	        output = '|';
	      }

	      push({ type: 'comma', value, output });
	      continue;
	    }

	    /**
	     * Slashes
	     */

	    if (value === '/') {
	      // if the beginning of the glob is "./", advance the start
	      // to the current index, and don't add the "./" characters
	      // to the state. This greatly simplifies lookbehinds when
	      // checking for BOS characters like "!" and "." (not "./")
	      if (prev.type === 'dot' && state.index === state.start + 1) {
	        state.start = state.index + 1;
	        state.consumed = '';
	        state.output = '';
	        tokens.pop();
	        prev = bos; // reset "prev" to the first token
	        continue;
	      }

	      push({ type: 'slash', value, output: SLASH_LITERAL });
	      continue;
	    }

	    /**
	     * Dots
	     */

	    if (value === '.') {
	      if (state.braces > 0 && prev.type === 'dot') {
	        if (prev.value === '.') prev.output = DOT_LITERAL;
	        const brace = braces[braces.length - 1];
	        prev.type = 'dots';
	        prev.output += value;
	        prev.value += value;
	        brace.dots = true;
	        continue;
	      }

	      if ((state.braces + state.parens) === 0 && prev.type !== 'bos' && prev.type !== 'slash') {
	        push({ type: 'text', value, output: DOT_LITERAL });
	        continue;
	      }

	      push({ type: 'dot', value, output: DOT_LITERAL });
	      continue;
	    }

	    /**
	     * Question marks
	     */

	    if (value === '?') {
	      const isGroup = prev && prev.value === '(';
	      if (!isGroup && opts.noextglob !== true && peek() === '(' && peek(2) !== '?') {
	        extglobOpen('qmark', value);
	        continue;
	      }

	      if (prev && prev.type === 'paren') {
	        const next = peek();
	        let output = value;

	        if (next === '<' && !utils$d.supportsLookbehinds()) {
	          throw new Error('Node.js v10 or higher is required for regex lookbehinds');
	        }

	        if ((prev.value === '(' && !/[!=<:]/.test(next)) || (next === '<' && !/<([!=]|\w+>)/.test(remaining()))) {
	          output = `\\${value}`;
	        }

	        push({ type: 'text', value, output });
	        continue;
	      }

	      if (opts.dot !== true && (prev.type === 'slash' || prev.type === 'bos')) {
	        push({ type: 'qmark', value, output: QMARK_NO_DOT });
	        continue;
	      }

	      push({ type: 'qmark', value, output: QMARK });
	      continue;
	    }

	    /**
	     * Exclamation
	     */

	    if (value === '!') {
	      if (opts.noextglob !== true && peek() === '(') {
	        if (peek(2) !== '?' || !/[!=<:]/.test(peek(3))) {
	          extglobOpen('negate', value);
	          continue;
	        }
	      }

	      if (opts.nonegate !== true && state.index === 0) {
	        negate();
	        continue;
	      }
	    }

	    /**
	     * Plus
	     */

	    if (value === '+') {
	      if (opts.noextglob !== true && peek() === '(' && peek(2) !== '?') {
	        extglobOpen('plus', value);
	        continue;
	      }

	      if ((prev && prev.value === '(') || opts.regex === false) {
	        push({ type: 'plus', value, output: PLUS_LITERAL });
	        continue;
	      }

	      if ((prev && (prev.type === 'bracket' || prev.type === 'paren' || prev.type === 'brace')) || state.parens > 0) {
	        push({ type: 'plus', value });
	        continue;
	      }

	      push({ type: 'plus', value: PLUS_LITERAL });
	      continue;
	    }

	    /**
	     * Plain text
	     */

	    if (value === '@') {
	      if (opts.noextglob !== true && peek() === '(' && peek(2) !== '?') {
	        push({ type: 'at', extglob: true, value, output: '' });
	        continue;
	      }

	      push({ type: 'text', value });
	      continue;
	    }

	    /**
	     * Plain text
	     */

	    if (value !== '*') {
	      if (value === '$' || value === '^') {
	        value = `\\${value}`;
	      }

	      const match = REGEX_NON_SPECIAL_CHARS.exec(remaining());
	      if (match) {
	        value += match[0];
	        state.index += match[0].length;
	      }

	      push({ type: 'text', value });
	      continue;
	    }

	    /**
	     * Stars
	     */

	    if (prev && (prev.type === 'globstar' || prev.star === true)) {
	      prev.type = 'star';
	      prev.star = true;
	      prev.value += value;
	      prev.output = star;
	      state.backtrack = true;
	      state.globstar = true;
	      consume(value);
	      continue;
	    }

	    let rest = remaining();
	    if (opts.noextglob !== true && /^\([^?]/.test(rest)) {
	      extglobOpen('star', value);
	      continue;
	    }

	    if (prev.type === 'star') {
	      if (opts.noglobstar === true) {
	        consume(value);
	        continue;
	      }

	      const prior = prev.prev;
	      const before = prior.prev;
	      const isStart = prior.type === 'slash' || prior.type === 'bos';
	      const afterStar = before && (before.type === 'star' || before.type === 'globstar');

	      if (opts.bash === true && (!isStart || (rest[0] && rest[0] !== '/'))) {
	        push({ type: 'star', value, output: '' });
	        continue;
	      }

	      const isBrace = state.braces > 0 && (prior.type === 'comma' || prior.type === 'brace');
	      const isExtglob = extglobs.length && (prior.type === 'pipe' || prior.type === 'paren');
	      if (!isStart && prior.type !== 'paren' && !isBrace && !isExtglob) {
	        push({ type: 'star', value, output: '' });
	        continue;
	      }

	      // strip consecutive `/**/`
	      while (rest.slice(0, 3) === '/**') {
	        const after = input[state.index + 4];
	        if (after && after !== '/') {
	          break;
	        }
	        rest = rest.slice(3);
	        consume('/**', 3);
	      }

	      if (prior.type === 'bos' && eos()) {
	        prev.type = 'globstar';
	        prev.value += value;
	        prev.output = globstar(opts);
	        state.output = prev.output;
	        state.globstar = true;
	        consume(value);
	        continue;
	      }

	      if (prior.type === 'slash' && prior.prev.type !== 'bos' && !afterStar && eos()) {
	        state.output = state.output.slice(0, -(prior.output + prev.output).length);
	        prior.output = `(?:${prior.output}`;

	        prev.type = 'globstar';
	        prev.output = globstar(opts) + (opts.strictSlashes ? ')' : '|$)');
	        prev.value += value;
	        state.globstar = true;
	        state.output += prior.output + prev.output;
	        consume(value);
	        continue;
	      }

	      if (prior.type === 'slash' && prior.prev.type !== 'bos' && rest[0] === '/') {
	        const end = rest[1] !== void 0 ? '|$' : '';

	        state.output = state.output.slice(0, -(prior.output + prev.output).length);
	        prior.output = `(?:${prior.output}`;

	        prev.type = 'globstar';
	        prev.output = `${globstar(opts)}${SLASH_LITERAL}|${SLASH_LITERAL}${end})`;
	        prev.value += value;

	        state.output += prior.output + prev.output;
	        state.globstar = true;

	        consume(value + advance());

	        push({ type: 'slash', value: '/', output: '' });
	        continue;
	      }

	      if (prior.type === 'bos' && rest[0] === '/') {
	        prev.type = 'globstar';
	        prev.value += value;
	        prev.output = `(?:^|${SLASH_LITERAL}|${globstar(opts)}${SLASH_LITERAL})`;
	        state.output = prev.output;
	        state.globstar = true;
	        consume(value + advance());
	        push({ type: 'slash', value: '/', output: '' });
	        continue;
	      }

	      // remove single star from output
	      state.output = state.output.slice(0, -prev.output.length);

	      // reset previous token to globstar
	      prev.type = 'globstar';
	      prev.output = globstar(opts);
	      prev.value += value;

	      // reset output with globstar
	      state.output += prev.output;
	      state.globstar = true;
	      consume(value);
	      continue;
	    }

	    const token = { type: 'star', value, output: star };

	    if (opts.bash === true) {
	      token.output = '.*?';
	      if (prev.type === 'bos' || prev.type === 'slash') {
	        token.output = nodot + token.output;
	      }
	      push(token);
	      continue;
	    }

	    if (prev && (prev.type === 'bracket' || prev.type === 'paren') && opts.regex === true) {
	      token.output = value;
	      push(token);
	      continue;
	    }

	    if (state.index === state.start || prev.type === 'slash' || prev.type === 'dot') {
	      if (prev.type === 'dot') {
	        state.output += NO_DOT_SLASH;
	        prev.output += NO_DOT_SLASH;

	      } else if (opts.dot === true) {
	        state.output += NO_DOTS_SLASH;
	        prev.output += NO_DOTS_SLASH;

	      } else {
	        state.output += nodot;
	        prev.output += nodot;
	      }

	      if (peek() !== '*') {
	        state.output += ONE_CHAR;
	        prev.output += ONE_CHAR;
	      }
	    }

	    push(token);
	  }

	  while (state.brackets > 0) {
	    if (opts.strictBrackets === true) throw new SyntaxError(syntaxError('closing', ']'));
	    state.output = utils$d.escapeLast(state.output, '[');
	    decrement('brackets');
	  }

	  while (state.parens > 0) {
	    if (opts.strictBrackets === true) throw new SyntaxError(syntaxError('closing', ')'));
	    state.output = utils$d.escapeLast(state.output, '(');
	    decrement('parens');
	  }

	  while (state.braces > 0) {
	    if (opts.strictBrackets === true) throw new SyntaxError(syntaxError('closing', '}'));
	    state.output = utils$d.escapeLast(state.output, '{');
	    decrement('braces');
	  }

	  if (opts.strictSlashes !== true && (prev.type === 'star' || prev.type === 'bracket')) {
	    push({ type: 'maybe_slash', value: '', output: `${SLASH_LITERAL}?` });
	  }

	  // rebuild the output if we had to backtrack at any point
	  if (state.backtrack === true) {
	    state.output = '';

	    for (const token of state.tokens) {
	      state.output += token.output != null ? token.output : token.value;

	      if (token.suffix) {
	        state.output += token.suffix;
	      }
	    }
	  }

	  return state;
	};

	/**
	 * Fast paths for creating regular expressions for common glob patterns.
	 * This can significantly speed up processing and has very little downside
	 * impact when none of the fast paths match.
	 */

	parse$1.fastpaths = (input, options) => {
	  const opts = { ...options };
	  const max = typeof opts.maxLength === 'number' ? Math.min(MAX_LENGTH, opts.maxLength) : MAX_LENGTH;
	  const len = input.length;
	  if (len > max) {
	    throw new SyntaxError(`Input length: ${len}, exceeds maximum allowed length: ${max}`);
	  }

	  input = REPLACEMENTS[input] || input;
	  const win32 = utils$d.isWindows(options);

	  // create constants based on platform, for windows or posix
	  const {
	    DOT_LITERAL,
	    SLASH_LITERAL,
	    ONE_CHAR,
	    DOTS_SLASH,
	    NO_DOT,
	    NO_DOTS,
	    NO_DOTS_SLASH,
	    STAR,
	    START_ANCHOR
	  } = constants$3.globChars(win32);

	  const nodot = opts.dot ? NO_DOTS : NO_DOT;
	  const slashDot = opts.dot ? NO_DOTS_SLASH : NO_DOT;
	  const capture = opts.capture ? '' : '?:';
	  const state = { negated: false, prefix: '' };
	  let star = opts.bash === true ? '.*?' : STAR;

	  if (opts.capture) {
	    star = `(${star})`;
	  }

	  const globstar = opts => {
	    if (opts.noglobstar === true) return star;
	    return `(${capture}(?:(?!${START_ANCHOR}${opts.dot ? DOTS_SLASH : DOT_LITERAL}).)*?)`;
	  };

	  const create = str => {
	    switch (str) {
	      case '*':
	        return `${nodot}${ONE_CHAR}${star}`;

	      case '.*':
	        return `${DOT_LITERAL}${ONE_CHAR}${star}`;

	      case '*.*':
	        return `${nodot}${star}${DOT_LITERAL}${ONE_CHAR}${star}`;

	      case '*/*':
	        return `${nodot}${star}${SLASH_LITERAL}${ONE_CHAR}${slashDot}${star}`;

	      case '**':
	        return nodot + globstar(opts);

	      case '**/*':
	        return `(?:${nodot}${globstar(opts)}${SLASH_LITERAL})?${slashDot}${ONE_CHAR}${star}`;

	      case '**/*.*':
	        return `(?:${nodot}${globstar(opts)}${SLASH_LITERAL})?${slashDot}${star}${DOT_LITERAL}${ONE_CHAR}${star}`;

	      case '**/.*':
	        return `(?:${nodot}${globstar(opts)}${SLASH_LITERAL})?${DOT_LITERAL}${ONE_CHAR}${star}`;

	      default: {
	        const match = /^(.*?)\.(\w+)$/.exec(str);
	        if (!match) return;

	        const source = create(match[1]);
	        if (!source) return;

	        return source + DOT_LITERAL + match[2];
	      }
	    }
	  };

	  const output = utils$d.removePrefix(input, state);
	  let source = create(output);

	  if (source && opts.strictSlashes !== true) {
	    source += `${SLASH_LITERAL}?`;
	  }

	  return source;
	};

	var parse_1$1 = parse$1;

	const path$6 = require$$0$8;
	const scan = scan_1;
	const parse = parse_1$1;
	const utils$c = utils$f;
	const constants$2 = constants$4;
	const isObject$1 = val => val && typeof val === 'object' && !Array.isArray(val);

	/**
	 * Creates a matcher function from one or more glob patterns. The
	 * returned function takes a string to match as its first argument,
	 * and returns true if the string is a match. The returned matcher
	 * function also takes a boolean as the second argument that, when true,
	 * returns an object with additional information.
	 *
	 * ```js
	 * const picomatch = require('picomatch');
	 * // picomatch(glob[, options]);
	 *
	 * const isMatch = picomatch('*.!(*a)');
	 * console.log(isMatch('a.a')); //=> false
	 * console.log(isMatch('a.b')); //=> true
	 * ```
	 * @name picomatch
	 * @param {String|Array} `globs` One or more glob patterns.
	 * @param {Object=} `options`
	 * @return {Function=} Returns a matcher function.
	 * @api public
	 */

	const picomatch$2 = (glob, options, returnState = false) => {
	  if (Array.isArray(glob)) {
	    const fns = glob.map(input => picomatch$2(input, options, returnState));
	    const arrayMatcher = str => {
	      for (const isMatch of fns) {
	        const state = isMatch(str);
	        if (state) return state;
	      }
	      return false;
	    };
	    return arrayMatcher;
	  }

	  const isState = isObject$1(glob) && glob.tokens && glob.input;

	  if (glob === '' || (typeof glob !== 'string' && !isState)) {
	    throw new TypeError('Expected pattern to be a non-empty string');
	  }

	  const opts = options || {};
	  const posix = utils$c.isWindows(options);
	  const regex = isState
	    ? picomatch$2.compileRe(glob, options)
	    : picomatch$2.makeRe(glob, options, false, true);

	  const state = regex.state;
	  delete regex.state;

	  let isIgnored = () => false;
	  if (opts.ignore) {
	    const ignoreOpts = { ...options, ignore: null, onMatch: null, onResult: null };
	    isIgnored = picomatch$2(opts.ignore, ignoreOpts, returnState);
	  }

	  const matcher = (input, returnObject = false) => {
	    const { isMatch, match, output } = picomatch$2.test(input, regex, options, { glob, posix });
	    const result = { glob, state, regex, posix, input, output, match, isMatch };

	    if (typeof opts.onResult === 'function') {
	      opts.onResult(result);
	    }

	    if (isMatch === false) {
	      result.isMatch = false;
	      return returnObject ? result : false;
	    }

	    if (isIgnored(input)) {
	      if (typeof opts.onIgnore === 'function') {
	        opts.onIgnore(result);
	      }
	      result.isMatch = false;
	      return returnObject ? result : false;
	    }

	    if (typeof opts.onMatch === 'function') {
	      opts.onMatch(result);
	    }
	    return returnObject ? result : true;
	  };

	  if (returnState) {
	    matcher.state = state;
	  }

	  return matcher;
	};

	/**
	 * Test `input` with the given `regex`. This is used by the main
	 * `picomatch()` function to test the input string.
	 *
	 * ```js
	 * const picomatch = require('picomatch');
	 * // picomatch.test(input, regex[, options]);
	 *
	 * console.log(picomatch.test('foo/bar', /^(?:([^/]*?)\/([^/]*?))$/));
	 * // { isMatch: true, match: [ 'foo/', 'foo', 'bar' ], output: 'foo/bar' }
	 * ```
	 * @param {String} `input` String to test.
	 * @param {RegExp} `regex`
	 * @return {Object} Returns an object with matching info.
	 * @api public
	 */

	picomatch$2.test = (input, regex, options, { glob, posix } = {}) => {
	  if (typeof input !== 'string') {
	    throw new TypeError('Expected input to be a string');
	  }

	  if (input === '') {
	    return { isMatch: false, output: '' };
	  }

	  const opts = options || {};
	  const format = opts.format || (posix ? utils$c.toPosixSlashes : null);
	  let match = input === glob;
	  let output = (match && format) ? format(input) : input;

	  if (match === false) {
	    output = format ? format(input) : input;
	    match = output === glob;
	  }

	  if (match === false || opts.capture === true) {
	    if (opts.matchBase === true || opts.basename === true) {
	      match = picomatch$2.matchBase(input, regex, options, posix);
	    } else {
	      match = regex.exec(output);
	    }
	  }

	  return { isMatch: Boolean(match), match, output };
	};

	/**
	 * Match the basename of a filepath.
	 *
	 * ```js
	 * const picomatch = require('picomatch');
	 * // picomatch.matchBase(input, glob[, options]);
	 * console.log(picomatch.matchBase('foo/bar.js', '*.js'); // true
	 * ```
	 * @param {String} `input` String to test.
	 * @param {RegExp|String} `glob` Glob pattern or regex created by [.makeRe](#makeRe).
	 * @return {Boolean}
	 * @api public
	 */

	picomatch$2.matchBase = (input, glob, options, posix = utils$c.isWindows(options)) => {
	  const regex = glob instanceof RegExp ? glob : picomatch$2.makeRe(glob, options);
	  return regex.test(path$6.basename(input));
	};

	/**
	 * Returns true if **any** of the given glob `patterns` match the specified `string`.
	 *
	 * ```js
	 * const picomatch = require('picomatch');
	 * // picomatch.isMatch(string, patterns[, options]);
	 *
	 * console.log(picomatch.isMatch('a.a', ['b.*', '*.a'])); //=> true
	 * console.log(picomatch.isMatch('a.a', 'b.*')); //=> false
	 * ```
	 * @param {String|Array} str The string to test.
	 * @param {String|Array} patterns One or more glob patterns to use for matching.
	 * @param {Object} [options] See available [options](#options).
	 * @return {Boolean} Returns true if any patterns match `str`
	 * @api public
	 */

	picomatch$2.isMatch = (str, patterns, options) => picomatch$2(patterns, options)(str);

	/**
	 * Parse a glob pattern to create the source string for a regular
	 * expression.
	 *
	 * ```js
	 * const picomatch = require('picomatch');
	 * const result = picomatch.parse(pattern[, options]);
	 * ```
	 * @param {String} `pattern`
	 * @param {Object} `options`
	 * @return {Object} Returns an object with useful properties and output to be used as a regex source string.
	 * @api public
	 */

	picomatch$2.parse = (pattern, options) => {
	  if (Array.isArray(pattern)) return pattern.map(p => picomatch$2.parse(p, options));
	  return parse(pattern, { ...options, fastpaths: false });
	};

	/**
	 * Scan a glob pattern to separate the pattern into segments.
	 *
	 * ```js
	 * const picomatch = require('picomatch');
	 * // picomatch.scan(input[, options]);
	 *
	 * const result = picomatch.scan('!./foo/*.js');
	 * console.log(result);
	 * { prefix: '!./',
	 *   input: '!./foo/*.js',
	 *   start: 3,
	 *   base: 'foo',
	 *   glob: '*.js',
	 *   isBrace: false,
	 *   isBracket: false,
	 *   isGlob: true,
	 *   isExtglob: false,
	 *   isGlobstar: false,
	 *   negated: true }
	 * ```
	 * @param {String} `input` Glob pattern to scan.
	 * @param {Object} `options`
	 * @return {Object} Returns an object with
	 * @api public
	 */

	picomatch$2.scan = (input, options) => scan(input, options);

	/**
	 * Compile a regular expression from the `state` object returned by the
	 * [parse()](#parse) method.
	 *
	 * @param {Object} `state`
	 * @param {Object} `options`
	 * @param {Boolean} `returnOutput` Intended for implementors, this argument allows you to return the raw output from the parser.
	 * @param {Boolean} `returnState` Adds the state to a `state` property on the returned regex. Useful for implementors and debugging.
	 * @return {RegExp}
	 * @api public
	 */

	picomatch$2.compileRe = (state, options, returnOutput = false, returnState = false) => {
	  if (returnOutput === true) {
	    return state.output;
	  }

	  const opts = options || {};
	  const prepend = opts.contains ? '' : '^';
	  const append = opts.contains ? '' : '$';

	  let source = `${prepend}(?:${state.output})${append}`;
	  if (state && state.negated === true) {
	    source = `^(?!${source}).*$`;
	  }

	  const regex = picomatch$2.toRegex(source, options);
	  if (returnState === true) {
	    regex.state = state;
	  }

	  return regex;
	};

	/**
	 * Create a regular expression from a parsed glob pattern.
	 *
	 * ```js
	 * const picomatch = require('picomatch');
	 * const state = picomatch.parse('*.js');
	 * // picomatch.compileRe(state[, options]);
	 *
	 * console.log(picomatch.compileRe(state));
	 * //=> /^(?:(?!\.)(?=.)[^/]*?\.js)$/
	 * ```
	 * @param {String} `state` The object returned from the `.parse` method.
	 * @param {Object} `options`
	 * @param {Boolean} `returnOutput` Implementors may use this argument to return the compiled output, instead of a regular expression. This is not exposed on the options to prevent end-users from mutating the result.
	 * @param {Boolean} `returnState` Implementors may use this argument to return the state from the parsed glob with the returned regular expression.
	 * @return {RegExp} Returns a regex created from the given pattern.
	 * @api public
	 */

	picomatch$2.makeRe = (input, options = {}, returnOutput = false, returnState = false) => {
	  if (!input || typeof input !== 'string') {
	    throw new TypeError('Expected a non-empty string');
	  }

	  let parsed = { negated: false, fastpaths: true };

	  if (options.fastpaths !== false && (input[0] === '.' || input[0] === '*')) {
	    parsed.output = parse.fastpaths(input, options);
	  }

	  if (!parsed.output) {
	    parsed = parse(input, options);
	  }

	  return picomatch$2.compileRe(parsed, options, returnOutput, returnState);
	};

	/**
	 * Create a regular expression from the given regex source string.
	 *
	 * ```js
	 * const picomatch = require('picomatch');
	 * // picomatch.toRegex(source[, options]);
	 *
	 * const { output } = picomatch.parse('*.js');
	 * console.log(picomatch.toRegex(output));
	 * //=> /^(?:(?!\.)(?=.)[^/]*?\.js)$/
	 * ```
	 * @param {String} `source` Regular expression source string.
	 * @param {Object} `options`
	 * @return {RegExp}
	 * @api public
	 */

	picomatch$2.toRegex = (source, options) => {
	  try {
	    const opts = options || {};
	    return new RegExp(source, opts.flags || (opts.nocase ? 'i' : ''));
	  } catch (err) {
	    if (options && options.debug === true) throw err;
	    return /$^/;
	  }
	};

	/**
	 * Picomatch constants.
	 * @return {Object}
	 */

	picomatch$2.constants = constants$2;

	/**
	 * Expose "picomatch"
	 */

	var picomatch_1 = picomatch$2;

	var picomatch$1 = picomatch_1;

	const util = require$$0$9;
	const braces = braces_1;
	const picomatch = picomatch$1;
	const utils$b = utils$f;
	const isEmptyString = val => val === '' || val === './';

	/**
	 * Returns an array of strings that match one or more glob patterns.
	 *
	 * ```js
	 * const mm = require('micromatch');
	 * // mm(list, patterns[, options]);
	 *
	 * console.log(mm(['a.js', 'a.txt'], ['*.js']));
	 * //=> [ 'a.js' ]
	 * ```
	 * @param {String|Array<string>} `list` List of strings to match.
	 * @param {String|Array<string>} `patterns` One or more glob patterns to use for matching.
	 * @param {Object} `options` See available [options](#options)
	 * @return {Array} Returns an array of matches
	 * @summary false
	 * @api public
	 */

	const micromatch$1 = (list, patterns, options) => {
	  patterns = [].concat(patterns);
	  list = [].concat(list);

	  let omit = new Set();
	  let keep = new Set();
	  let items = new Set();
	  let negatives = 0;

	  let onResult = state => {
	    items.add(state.output);
	    if (options && options.onResult) {
	      options.onResult(state);
	    }
	  };

	  for (let i = 0; i < patterns.length; i++) {
	    let isMatch = picomatch(String(patterns[i]), { ...options, onResult }, true);
	    let negated = isMatch.state.negated || isMatch.state.negatedExtglob;
	    if (negated) negatives++;

	    for (let item of list) {
	      let matched = isMatch(item, true);

	      let match = negated ? !matched.isMatch : matched.isMatch;
	      if (!match) continue;

	      if (negated) {
	        omit.add(matched.output);
	      } else {
	        omit.delete(matched.output);
	        keep.add(matched.output);
	      }
	    }
	  }

	  let result = negatives === patterns.length ? [...items] : [...keep];
	  let matches = result.filter(item => !omit.has(item));

	  if (options && matches.length === 0) {
	    if (options.failglob === true) {
	      throw new Error(`No matches found for "${patterns.join(', ')}"`);
	    }

	    if (options.nonull === true || options.nullglob === true) {
	      return options.unescape ? patterns.map(p => p.replace(/\\/g, '')) : patterns;
	    }
	  }

	  return matches;
	};

	/**
	 * Backwards compatibility
	 */

	micromatch$1.match = micromatch$1;

	/**
	 * Returns a matcher function from the given glob `pattern` and `options`.
	 * The returned function takes a string to match as its only argument and returns
	 * true if the string is a match.
	 *
	 * ```js
	 * const mm = require('micromatch');
	 * // mm.matcher(pattern[, options]);
	 *
	 * const isMatch = mm.matcher('*.!(*a)');
	 * console.log(isMatch('a.a')); //=> false
	 * console.log(isMatch('a.b')); //=> true
	 * ```
	 * @param {String} `pattern` Glob pattern
	 * @param {Object} `options`
	 * @return {Function} Returns a matcher function.
	 * @api public
	 */

	micromatch$1.matcher = (pattern, options) => picomatch(pattern, options);

	/**
	 * Returns true if **any** of the given glob `patterns` match the specified `string`.
	 *
	 * ```js
	 * const mm = require('micromatch');
	 * // mm.isMatch(string, patterns[, options]);
	 *
	 * console.log(mm.isMatch('a.a', ['b.*', '*.a'])); //=> true
	 * console.log(mm.isMatch('a.a', 'b.*')); //=> false
	 * ```
	 * @param {String} `str` The string to test.
	 * @param {String|Array} `patterns` One or more glob patterns to use for matching.
	 * @param {Object} `[options]` See available [options](#options).
	 * @return {Boolean} Returns true if any patterns match `str`
	 * @api public
	 */

	micromatch$1.isMatch = (str, patterns, options) => picomatch(patterns, options)(str);

	/**
	 * Backwards compatibility
	 */

	micromatch$1.any = micromatch$1.isMatch;

	/**
	 * Returns a list of strings that _**do not match any**_ of the given `patterns`.
	 *
	 * ```js
	 * const mm = require('micromatch');
	 * // mm.not(list, patterns[, options]);
	 *
	 * console.log(mm.not(['a.a', 'b.b', 'c.c'], '*.a'));
	 * //=> ['b.b', 'c.c']
	 * ```
	 * @param {Array} `list` Array of strings to match.
	 * @param {String|Array} `patterns` One or more glob pattern to use for matching.
	 * @param {Object} `options` See available [options](#options) for changing how matches are performed
	 * @return {Array} Returns an array of strings that **do not match** the given patterns.
	 * @api public
	 */

	micromatch$1.not = (list, patterns, options = {}) => {
	  patterns = [].concat(patterns).map(String);
	  let result = new Set();
	  let items = [];

	  let onResult = state => {
	    if (options.onResult) options.onResult(state);
	    items.push(state.output);
	  };

	  let matches = new Set(micromatch$1(list, patterns, { ...options, onResult }));

	  for (let item of items) {
	    if (!matches.has(item)) {
	      result.add(item);
	    }
	  }
	  return [...result];
	};

	/**
	 * Returns true if the given `string` contains the given pattern. Similar
	 * to [.isMatch](#isMatch) but the pattern can match any part of the string.
	 *
	 * ```js
	 * var mm = require('micromatch');
	 * // mm.contains(string, pattern[, options]);
	 *
	 * console.log(mm.contains('aa/bb/cc', '*b'));
	 * //=> true
	 * console.log(mm.contains('aa/bb/cc', '*d'));
	 * //=> false
	 * ```
	 * @param {String} `str` The string to match.
	 * @param {String|Array} `patterns` Glob pattern to use for matching.
	 * @param {Object} `options` See available [options](#options) for changing how matches are performed
	 * @return {Boolean} Returns true if any of the patterns matches any part of `str`.
	 * @api public
	 */

	micromatch$1.contains = (str, pattern, options) => {
	  if (typeof str !== 'string') {
	    throw new TypeError(`Expected a string: "${util.inspect(str)}"`);
	  }

	  if (Array.isArray(pattern)) {
	    return pattern.some(p => micromatch$1.contains(str, p, options));
	  }

	  if (typeof pattern === 'string') {
	    if (isEmptyString(str) || isEmptyString(pattern)) {
	      return false;
	    }

	    if (str.includes(pattern) || (str.startsWith('./') && str.slice(2).includes(pattern))) {
	      return true;
	    }
	  }

	  return micromatch$1.isMatch(str, pattern, { ...options, contains: true });
	};

	/**
	 * Filter the keys of the given object with the given `glob` pattern
	 * and `options`. Does not attempt to match nested keys. If you need this feature,
	 * use [glob-object][] instead.
	 *
	 * ```js
	 * const mm = require('micromatch');
	 * // mm.matchKeys(object, patterns[, options]);
	 *
	 * const obj = { aa: 'a', ab: 'b', ac: 'c' };
	 * console.log(mm.matchKeys(obj, '*b'));
	 * //=> { ab: 'b' }
	 * ```
	 * @param {Object} `object` The object with keys to filter.
	 * @param {String|Array} `patterns` One or more glob patterns to use for matching.
	 * @param {Object} `options` See available [options](#options) for changing how matches are performed
	 * @return {Object} Returns an object with only keys that match the given patterns.
	 * @api public
	 */

	micromatch$1.matchKeys = (obj, patterns, options) => {
	  if (!utils$b.isObject(obj)) {
	    throw new TypeError('Expected the first argument to be an object');
	  }
	  let keys = micromatch$1(Object.keys(obj), patterns, options);
	  let res = {};
	  for (let key of keys) res[key] = obj[key];
	  return res;
	};

	/**
	 * Returns true if some of the strings in the given `list` match any of the given glob `patterns`.
	 *
	 * ```js
	 * const mm = require('micromatch');
	 * // mm.some(list, patterns[, options]);
	 *
	 * console.log(mm.some(['foo.js', 'bar.js'], ['*.js', '!foo.js']));
	 * // true
	 * console.log(mm.some(['foo.js'], ['*.js', '!foo.js']));
	 * // false
	 * ```
	 * @param {String|Array} `list` The string or array of strings to test. Returns as soon as the first match is found.
	 * @param {String|Array} `patterns` One or more glob patterns to use for matching.
	 * @param {Object} `options` See available [options](#options) for changing how matches are performed
	 * @return {Boolean} Returns true if any `patterns` matches any of the strings in `list`
	 * @api public
	 */

	micromatch$1.some = (list, patterns, options) => {
	  let items = [].concat(list);

	  for (let pattern of [].concat(patterns)) {
	    let isMatch = picomatch(String(pattern), options);
	    if (items.some(item => isMatch(item))) {
	      return true;
	    }
	  }
	  return false;
	};

	/**
	 * Returns true if every string in the given `list` matches
	 * any of the given glob `patterns`.
	 *
	 * ```js
	 * const mm = require('micromatch');
	 * // mm.every(list, patterns[, options]);
	 *
	 * console.log(mm.every('foo.js', ['foo.js']));
	 * // true
	 * console.log(mm.every(['foo.js', 'bar.js'], ['*.js']));
	 * // true
	 * console.log(mm.every(['foo.js', 'bar.js'], ['*.js', '!foo.js']));
	 * // false
	 * console.log(mm.every(['foo.js'], ['*.js', '!foo.js']));
	 * // false
	 * ```
	 * @param {String|Array} `list` The string or array of strings to test.
	 * @param {String|Array} `patterns` One or more glob patterns to use for matching.
	 * @param {Object} `options` See available [options](#options) for changing how matches are performed
	 * @return {Boolean} Returns true if all `patterns` matches all of the strings in `list`
	 * @api public
	 */

	micromatch$1.every = (list, patterns, options) => {
	  let items = [].concat(list);

	  for (let pattern of [].concat(patterns)) {
	    let isMatch = picomatch(String(pattern), options);
	    if (!items.every(item => isMatch(item))) {
	      return false;
	    }
	  }
	  return true;
	};

	/**
	 * Returns true if **all** of the given `patterns` match
	 * the specified string.
	 *
	 * ```js
	 * const mm = require('micromatch');
	 * // mm.all(string, patterns[, options]);
	 *
	 * console.log(mm.all('foo.js', ['foo.js']));
	 * // true
	 *
	 * console.log(mm.all('foo.js', ['*.js', '!foo.js']));
	 * // false
	 *
	 * console.log(mm.all('foo.js', ['*.js', 'foo.js']));
	 * // true
	 *
	 * console.log(mm.all('foo.js', ['*.js', 'f*', '*o*', '*o.js']));
	 * // true
	 * ```
	 * @param {String|Array} `str` The string to test.
	 * @param {String|Array} `patterns` One or more glob patterns to use for matching.
	 * @param {Object} `options` See available [options](#options) for changing how matches are performed
	 * @return {Boolean} Returns true if any patterns match `str`
	 * @api public
	 */

	micromatch$1.all = (str, patterns, options) => {
	  if (typeof str !== 'string') {
	    throw new TypeError(`Expected a string: "${util.inspect(str)}"`);
	  }

	  return [].concat(patterns).every(p => picomatch(p, options)(str));
	};

	/**
	 * Returns an array of matches captured by `pattern` in `string, or `null` if the pattern did not match.
	 *
	 * ```js
	 * const mm = require('micromatch');
	 * // mm.capture(pattern, string[, options]);
	 *
	 * console.log(mm.capture('test/*.js', 'test/foo.js'));
	 * //=> ['foo']
	 * console.log(mm.capture('test/*.js', 'foo/bar.css'));
	 * //=> null
	 * ```
	 * @param {String} `glob` Glob pattern to use for matching.
	 * @param {String} `input` String to match
	 * @param {Object} `options` See available [options](#options) for changing how matches are performed
	 * @return {Array|null} Returns an array of captures if the input matches the glob pattern, otherwise `null`.
	 * @api public
	 */

	micromatch$1.capture = (glob, input, options) => {
	  let posix = utils$b.isWindows(options);
	  let regex = picomatch.makeRe(String(glob), { ...options, capture: true });
	  let match = regex.exec(posix ? utils$b.toPosixSlashes(input) : input);

	  if (match) {
	    return match.slice(1).map(v => v === void 0 ? '' : v);
	  }
	};

	/**
	 * Create a regular expression from the given glob `pattern`.
	 *
	 * ```js
	 * const mm = require('micromatch');
	 * // mm.makeRe(pattern[, options]);
	 *
	 * console.log(mm.makeRe('*.js'));
	 * //=> /^(?:(\.[\\\/])?(?!\.)(?=.)[^\/]*?\.js)$/
	 * ```
	 * @param {String} `pattern` A glob pattern to convert to regex.
	 * @param {Object} `options`
	 * @return {RegExp} Returns a regex created from the given pattern.
	 * @api public
	 */

	micromatch$1.makeRe = (...args) => picomatch.makeRe(...args);

	/**
	 * Scan a glob pattern to separate the pattern into segments. Used
	 * by the [split](#split) method.
	 *
	 * ```js
	 * const mm = require('micromatch');
	 * const state = mm.scan(pattern[, options]);
	 * ```
	 * @param {String} `pattern`
	 * @param {Object} `options`
	 * @return {Object} Returns an object with
	 * @api public
	 */

	micromatch$1.scan = (...args) => picomatch.scan(...args);

	/**
	 * Parse a glob pattern to create the source string for a regular
	 * expression.
	 *
	 * ```js
	 * const mm = require('micromatch');
	 * const state = mm.parse(pattern[, options]);
	 * ```
	 * @param {String} `glob`
	 * @param {Object} `options`
	 * @return {Object} Returns an object with useful properties and output to be used as regex source string.
	 * @api public
	 */

	micromatch$1.parse = (patterns, options) => {
	  let res = [];
	  for (let pattern of [].concat(patterns || [])) {
	    for (let str of braces(String(pattern), options)) {
	      res.push(picomatch.parse(str, options));
	    }
	  }
	  return res;
	};

	/**
	 * Process the given brace `pattern`.
	 *
	 * ```js
	 * const { braces } = require('micromatch');
	 * console.log(braces('foo/{a,b,c}/bar'));
	 * //=> [ 'foo/(a|b|c)/bar' ]
	 *
	 * console.log(braces('foo/{a,b,c}/bar', { expand: true }));
	 * //=> [ 'foo/a/bar', 'foo/b/bar', 'foo/c/bar' ]
	 * ```
	 * @param {String} `pattern` String with brace pattern to process.
	 * @param {Object} `options` Any [options](#options) to change how expansion is performed. See the [braces][] library for all available options.
	 * @return {Array}
	 * @api public
	 */

	micromatch$1.braces = (pattern, options) => {
	  if (typeof pattern !== 'string') throw new TypeError('Expected a string');
	  if ((options && options.nobrace === true) || !/\{.*\}/.test(pattern)) {
	    return [pattern];
	  }
	  return braces(pattern, options);
	};

	/**
	 * Expand braces
	 */

	micromatch$1.braceExpand = (pattern, options) => {
	  if (typeof pattern !== 'string') throw new TypeError('Expected a string');
	  return micromatch$1.braces(pattern, { ...options, expand: true });
	};

	/**
	 * Expose micromatch
	 */

	var micromatch_1 = micromatch$1;

	Object.defineProperty(pattern$1, "__esModule", { value: true });
	pattern$1.matchAny = pattern$1.convertPatternsToRe = pattern$1.makeRe = pattern$1.getPatternParts = pattern$1.expandBraceExpansion = pattern$1.expandPatternsWithBraceExpansion = pattern$1.isAffectDepthOfReadingPattern = pattern$1.endsWithSlashGlobStar = pattern$1.hasGlobStar = pattern$1.getBaseDirectory = pattern$1.isPatternRelatedToParentDirectory = pattern$1.getPatternsOutsideCurrentDirectory = pattern$1.getPatternsInsideCurrentDirectory = pattern$1.getPositivePatterns = pattern$1.getNegativePatterns = pattern$1.isPositivePattern = pattern$1.isNegativePattern = pattern$1.convertToNegativePattern = pattern$1.convertToPositivePattern = pattern$1.isDynamicPattern = pattern$1.isStaticPattern = void 0;
	const path$5 = require$$0$8;
	const globParent = globParent$1;
	const micromatch = micromatch_1;
	const GLOBSTAR = '**';
	const ESCAPE_SYMBOL = '\\';
	const COMMON_GLOB_SYMBOLS_RE = /[*?]|^!/;
	const REGEX_CHARACTER_CLASS_SYMBOLS_RE = /\[[^[]*]/;
	const REGEX_GROUP_SYMBOLS_RE = /(?:^|[^!*+?@])\([^(]*\|[^|]*\)/;
	const GLOB_EXTENSION_SYMBOLS_RE = /[!*+?@]\([^(]*\)/;
	const BRACE_EXPANSION_SEPARATORS_RE = /,|\.\./;
	function isStaticPattern(pattern, options = {}) {
	    return !isDynamicPattern(pattern, options);
	}
	pattern$1.isStaticPattern = isStaticPattern;
	function isDynamicPattern(pattern, options = {}) {
	    /**
	     * A special case with an empty string is necessary for matching patterns that start with a forward slash.
	     * An empty string cannot be a dynamic pattern.
	     * For example, the pattern `/lib/*` will be spread into parts: '', 'lib', '*'.
	     */
	    if (pattern === '') {
	        return false;
	    }
	    /**
	     * When the `caseSensitiveMatch` option is disabled, all patterns must be marked as dynamic, because we cannot check
	     * filepath directly (without read directory).
	     */
	    if (options.caseSensitiveMatch === false || pattern.includes(ESCAPE_SYMBOL)) {
	        return true;
	    }
	    if (COMMON_GLOB_SYMBOLS_RE.test(pattern) || REGEX_CHARACTER_CLASS_SYMBOLS_RE.test(pattern) || REGEX_GROUP_SYMBOLS_RE.test(pattern)) {
	        return true;
	    }
	    if (options.extglob !== false && GLOB_EXTENSION_SYMBOLS_RE.test(pattern)) {
	        return true;
	    }
	    if (options.braceExpansion !== false && hasBraceExpansion(pattern)) {
	        return true;
	    }
	    return false;
	}
	pattern$1.isDynamicPattern = isDynamicPattern;
	function hasBraceExpansion(pattern) {
	    const openingBraceIndex = pattern.indexOf('{');
	    if (openingBraceIndex === -1) {
	        return false;
	    }
	    const closingBraceIndex = pattern.indexOf('}', openingBraceIndex + 1);
	    if (closingBraceIndex === -1) {
	        return false;
	    }
	    const braceContent = pattern.slice(openingBraceIndex, closingBraceIndex);
	    return BRACE_EXPANSION_SEPARATORS_RE.test(braceContent);
	}
	function convertToPositivePattern(pattern) {
	    return isNegativePattern(pattern) ? pattern.slice(1) : pattern;
	}
	pattern$1.convertToPositivePattern = convertToPositivePattern;
	function convertToNegativePattern(pattern) {
	    return '!' + pattern;
	}
	pattern$1.convertToNegativePattern = convertToNegativePattern;
	function isNegativePattern(pattern) {
	    return pattern.startsWith('!') && pattern[1] !== '(';
	}
	pattern$1.isNegativePattern = isNegativePattern;
	function isPositivePattern(pattern) {
	    return !isNegativePattern(pattern);
	}
	pattern$1.isPositivePattern = isPositivePattern;
	function getNegativePatterns(patterns) {
	    return patterns.filter(isNegativePattern);
	}
	pattern$1.getNegativePatterns = getNegativePatterns;
	function getPositivePatterns$1(patterns) {
	    return patterns.filter(isPositivePattern);
	}
	pattern$1.getPositivePatterns = getPositivePatterns$1;
	/**
	 * Returns patterns that can be applied inside the current directory.
	 *
	 * @example
	 * // ['./*', '*', 'a/*']
	 * getPatternsInsideCurrentDirectory(['./*', '*', 'a/*', '../*', './../*'])
	 */
	function getPatternsInsideCurrentDirectory(patterns) {
	    return patterns.filter((pattern) => !isPatternRelatedToParentDirectory(pattern));
	}
	pattern$1.getPatternsInsideCurrentDirectory = getPatternsInsideCurrentDirectory;
	/**
	 * Returns patterns to be expanded relative to (outside) the current directory.
	 *
	 * @example
	 * // ['../*', './../*']
	 * getPatternsInsideCurrentDirectory(['./*', '*', 'a/*', '../*', './../*'])
	 */
	function getPatternsOutsideCurrentDirectory(patterns) {
	    return patterns.filter(isPatternRelatedToParentDirectory);
	}
	pattern$1.getPatternsOutsideCurrentDirectory = getPatternsOutsideCurrentDirectory;
	function isPatternRelatedToParentDirectory(pattern) {
	    return pattern.startsWith('..') || pattern.startsWith('./..');
	}
	pattern$1.isPatternRelatedToParentDirectory = isPatternRelatedToParentDirectory;
	function getBaseDirectory(pattern) {
	    return globParent(pattern, { flipBackslashes: false });
	}
	pattern$1.getBaseDirectory = getBaseDirectory;
	function hasGlobStar(pattern) {
	    return pattern.includes(GLOBSTAR);
	}
	pattern$1.hasGlobStar = hasGlobStar;
	function endsWithSlashGlobStar(pattern) {
	    return pattern.endsWith('/' + GLOBSTAR);
	}
	pattern$1.endsWithSlashGlobStar = endsWithSlashGlobStar;
	function isAffectDepthOfReadingPattern(pattern) {
	    const basename = path$5.basename(pattern);
	    return endsWithSlashGlobStar(pattern) || isStaticPattern(basename);
	}
	pattern$1.isAffectDepthOfReadingPattern = isAffectDepthOfReadingPattern;
	function expandPatternsWithBraceExpansion(patterns) {
	    return patterns.reduce((collection, pattern) => {
	        return collection.concat(expandBraceExpansion(pattern));
	    }, []);
	}
	pattern$1.expandPatternsWithBraceExpansion = expandPatternsWithBraceExpansion;
	function expandBraceExpansion(pattern) {
	    return micromatch.braces(pattern, {
	        expand: true,
	        nodupes: true
	    });
	}
	pattern$1.expandBraceExpansion = expandBraceExpansion;
	function getPatternParts(pattern, options) {
	    let { parts } = micromatch.scan(pattern, Object.assign(Object.assign({}, options), { parts: true }));
	    /**
	     * The scan method returns an empty array in some cases.
	     * See micromatch/picomatch#58 for more details.
	     */
	    if (parts.length === 0) {
	        parts = [pattern];
	    }
	    /**
	     * The scan method does not return an empty part for the pattern with a forward slash.
	     * This is another part of micromatch/picomatch#58.
	     */
	    if (parts[0].startsWith('/')) {
	        parts[0] = parts[0].slice(1);
	        parts.unshift('');
	    }
	    return parts;
	}
	pattern$1.getPatternParts = getPatternParts;
	function makeRe(pattern, options) {
	    return micromatch.makeRe(pattern, options);
	}
	pattern$1.makeRe = makeRe;
	function convertPatternsToRe(patterns, options) {
	    return patterns.map((pattern) => makeRe(pattern, options));
	}
	pattern$1.convertPatternsToRe = convertPatternsToRe;
	function matchAny(entry, patternsRe) {
	    return patternsRe.some((patternRe) => patternRe.test(entry));
	}
	pattern$1.matchAny = matchAny;

	var stream$4 = {};

	/*
	 * merge2
	 * https://github.com/teambition/merge2
	 *
	 * Copyright (c) 2014-2020 Teambition
	 * Licensed under the MIT license.
	 */
	const Stream = require$$0$a;
	const PassThrough = Stream.PassThrough;
	const slice$1 = Array.prototype.slice;

	var merge2_1 = merge2$1;

	function merge2$1 () {
	  const streamsQueue = [];
	  const args = slice$1.call(arguments);
	  let merging = false;
	  let options = args[args.length - 1];

	  if (options && !Array.isArray(options) && options.pipe == null) {
	    args.pop();
	  } else {
	    options = {};
	  }

	  const doEnd = options.end !== false;
	  const doPipeError = options.pipeError === true;
	  if (options.objectMode == null) {
	    options.objectMode = true;
	  }
	  if (options.highWaterMark == null) {
	    options.highWaterMark = 64 * 1024;
	  }
	  const mergedStream = PassThrough(options);

	  function addStream () {
	    for (let i = 0, len = arguments.length; i < len; i++) {
	      streamsQueue.push(pauseStreams(arguments[i], options));
	    }
	    mergeStream();
	    return this
	  }

	  function mergeStream () {
	    if (merging) {
	      return
	    }
	    merging = true;

	    let streams = streamsQueue.shift();
	    if (!streams) {
	      process.nextTick(endStream);
	      return
	    }
	    if (!Array.isArray(streams)) {
	      streams = [streams];
	    }

	    let pipesCount = streams.length + 1;

	    function next () {
	      if (--pipesCount > 0) {
	        return
	      }
	      merging = false;
	      mergeStream();
	    }

	    function pipe (stream) {
	      function onend () {
	        stream.removeListener('merge2UnpipeEnd', onend);
	        stream.removeListener('end', onend);
	        if (doPipeError) {
	          stream.removeListener('error', onerror);
	        }
	        next();
	      }
	      function onerror (err) {
	        mergedStream.emit('error', err);
	      }
	      // skip ended stream
	      if (stream._readableState.endEmitted) {
	        return next()
	      }

	      stream.on('merge2UnpipeEnd', onend);
	      stream.on('end', onend);

	      if (doPipeError) {
	        stream.on('error', onerror);
	      }

	      stream.pipe(mergedStream, { end: false });
	      // compatible for old stream
	      stream.resume();
	    }

	    for (let i = 0; i < streams.length; i++) {
	      pipe(streams[i]);
	    }

	    next();
	  }

	  function endStream () {
	    merging = false;
	    // emit 'queueDrain' when all streams merged.
	    mergedStream.emit('queueDrain');
	    if (doEnd) {
	      mergedStream.end();
	    }
	  }

	  mergedStream.setMaxListeners(0);
	  mergedStream.add = addStream;
	  mergedStream.on('unpipe', function (stream) {
	    stream.emit('merge2UnpipeEnd');
	  });

	  if (args.length) {
	    addStream.apply(null, args);
	  }
	  return mergedStream
	}

	// check and pause streams for pipe.
	function pauseStreams (streams, options) {
	  if (!Array.isArray(streams)) {
	    // Backwards-compat with old-style streams
	    if (!streams._readableState && streams.pipe) {
	      streams = streams.pipe(PassThrough(options));
	    }
	    if (!streams._readableState || !streams.pause || !streams.pipe) {
	      throw new Error('Only readable stream can be merged.')
	    }
	    streams.pause();
	  } else {
	    for (let i = 0, len = streams.length; i < len; i++) {
	      streams[i] = pauseStreams(streams[i], options);
	    }
	  }
	  return streams
	}

	Object.defineProperty(stream$4, "__esModule", { value: true });
	stream$4.merge = void 0;
	const merge2 = merge2_1;
	function merge(streams) {
	    const mergedStream = merge2(streams);
	    streams.forEach((stream) => {
	        stream.once('error', (error) => mergedStream.emit('error', error));
	    });
	    mergedStream.once('close', () => propagateCloseEventToSources(streams));
	    mergedStream.once('end', () => propagateCloseEventToSources(streams));
	    return mergedStream;
	}
	stream$4.merge = merge;
	function propagateCloseEventToSources(streams) {
	    streams.forEach((stream) => stream.emit('close'));
	}

	var string$1 = {};

	Object.defineProperty(string$1, "__esModule", { value: true });
	string$1.isEmpty = string$1.isString = void 0;
	function isString$1(input) {
	    return typeof input === 'string';
	}
	string$1.isString = isString$1;
	function isEmpty$1(input) {
	    return input === '';
	}
	string$1.isEmpty = isEmpty$1;

	Object.defineProperty(utils$k, "__esModule", { value: true });
	utils$k.string = utils$k.stream = utils$k.pattern = utils$k.path = utils$k.fs = utils$k.errno = utils$k.array = void 0;
	const array = array$1;
	utils$k.array = array;
	const errno = errno$1;
	utils$k.errno = errno;
	const fs$6 = fs$7;
	utils$k.fs = fs$6;
	const path$4 = path$9;
	utils$k.path = path$4;
	const pattern = pattern$1;
	utils$k.pattern = pattern;
	const stream$3 = stream$4;
	utils$k.stream = stream$3;
	const string = string$1;
	utils$k.string = string;

	Object.defineProperty(tasks, "__esModule", { value: true });
	tasks.convertPatternGroupToTask = tasks.convertPatternGroupsToTasks = tasks.groupPatternsByBaseDirectory = tasks.getNegativePatternsAsPositive = tasks.getPositivePatterns = tasks.convertPatternsToTasks = tasks.generate = void 0;
	const utils$a = utils$k;
	function generate(patterns, settings) {
	    const positivePatterns = getPositivePatterns(patterns);
	    const negativePatterns = getNegativePatternsAsPositive(patterns, settings.ignore);
	    const staticPatterns = positivePatterns.filter((pattern) => utils$a.pattern.isStaticPattern(pattern, settings));
	    const dynamicPatterns = positivePatterns.filter((pattern) => utils$a.pattern.isDynamicPattern(pattern, settings));
	    const staticTasks = convertPatternsToTasks(staticPatterns, negativePatterns, /* dynamic */ false);
	    const dynamicTasks = convertPatternsToTasks(dynamicPatterns, negativePatterns, /* dynamic */ true);
	    return staticTasks.concat(dynamicTasks);
	}
	tasks.generate = generate;
	/**
	 * Returns tasks grouped by basic pattern directories.
	 *
	 * Patterns that can be found inside (`./`) and outside (`../`) the current directory are handled separately.
	 * This is necessary because directory traversal starts at the base directory and goes deeper.
	 */
	function convertPatternsToTasks(positive, negative, dynamic) {
	    const tasks = [];
	    const patternsOutsideCurrentDirectory = utils$a.pattern.getPatternsOutsideCurrentDirectory(positive);
	    const patternsInsideCurrentDirectory = utils$a.pattern.getPatternsInsideCurrentDirectory(positive);
	    const outsideCurrentDirectoryGroup = groupPatternsByBaseDirectory(patternsOutsideCurrentDirectory);
	    const insideCurrentDirectoryGroup = groupPatternsByBaseDirectory(patternsInsideCurrentDirectory);
	    tasks.push(...convertPatternGroupsToTasks(outsideCurrentDirectoryGroup, negative, dynamic));
	    /*
	     * For the sake of reducing future accesses to the file system, we merge all tasks within the current directory
	     * into a global task, if at least one pattern refers to the root (`.`). In this case, the global task covers the rest.
	     */
	    if ('.' in insideCurrentDirectoryGroup) {
	        tasks.push(convertPatternGroupToTask('.', patternsInsideCurrentDirectory, negative, dynamic));
	    }
	    else {
	        tasks.push(...convertPatternGroupsToTasks(insideCurrentDirectoryGroup, negative, dynamic));
	    }
	    return tasks;
	}
	tasks.convertPatternsToTasks = convertPatternsToTasks;
	function getPositivePatterns(patterns) {
	    return utils$a.pattern.getPositivePatterns(patterns);
	}
	tasks.getPositivePatterns = getPositivePatterns;
	function getNegativePatternsAsPositive(patterns, ignore) {
	    const negative = utils$a.pattern.getNegativePatterns(patterns).concat(ignore);
	    const positive = negative.map(utils$a.pattern.convertToPositivePattern);
	    return positive;
	}
	tasks.getNegativePatternsAsPositive = getNegativePatternsAsPositive;
	function groupPatternsByBaseDirectory(patterns) {
	    const group = {};
	    return patterns.reduce((collection, pattern) => {
	        const base = utils$a.pattern.getBaseDirectory(pattern);
	        if (base in collection) {
	            collection[base].push(pattern);
	        }
	        else {
	            collection[base] = [pattern];
	        }
	        return collection;
	    }, group);
	}
	tasks.groupPatternsByBaseDirectory = groupPatternsByBaseDirectory;
	function convertPatternGroupsToTasks(positive, negative, dynamic) {
	    return Object.keys(positive).map((base) => {
	        return convertPatternGroupToTask(base, positive[base], negative, dynamic);
	    });
	}
	tasks.convertPatternGroupsToTasks = convertPatternGroupsToTasks;
	function convertPatternGroupToTask(base, positive, negative, dynamic) {
	    return {
	        dynamic,
	        positive,
	        negative,
	        base,
	        patterns: [].concat(positive, negative.map(utils$a.pattern.convertToNegativePattern))
	    };
	}
	tasks.convertPatternGroupToTask = convertPatternGroupToTask;

	var patterns = {};

	Object.defineProperty(patterns, "__esModule", { value: true });
	patterns.removeDuplicateSlashes = patterns.transform = void 0;
	/**
	 * Matches a sequence of two or more consecutive slashes, excluding the first two slashes at the beginning of the string.
	 * The latter is due to the presence of the device path at the beginning of the UNC path.
	 * @todo rewrite to negative lookbehind with the next major release.
	 */
	const DOUBLE_SLASH_RE = /(?!^)\/{2,}/g;
	function transform(patterns) {
	    return patterns.map((pattern) => removeDuplicateSlashes(pattern));
	}
	patterns.transform = transform;
	/**
	 * This package only works with forward slashes as a path separator.
	 * Because of this, we cannot use the standard `path.normalize` method, because on Windows platform it will use of backslashes.
	 */
	function removeDuplicateSlashes(pattern) {
	    return pattern.replace(DOUBLE_SLASH_RE, '/');
	}
	patterns.removeDuplicateSlashes = removeDuplicateSlashes;

	var async$7 = {};

	var async$6 = {};

	var out$3 = {};

	var async$5 = {};

	var async$4 = {};

	var out$2 = {};

	var async$3 = {};

	var out$1 = {};

	var async$2 = {};

	Object.defineProperty(async$2, "__esModule", { value: true });
	async$2.read = void 0;
	function read$3(path, settings, callback) {
	    settings.fs.lstat(path, (lstatError, lstat) => {
	        if (lstatError !== null) {
	            callFailureCallback$2(callback, lstatError);
	            return;
	        }
	        if (!lstat.isSymbolicLink() || !settings.followSymbolicLink) {
	            callSuccessCallback$2(callback, lstat);
	            return;
	        }
	        settings.fs.stat(path, (statError, stat) => {
	            if (statError !== null) {
	                if (settings.throwErrorOnBrokenSymbolicLink) {
	                    callFailureCallback$2(callback, statError);
	                    return;
	                }
	                callSuccessCallback$2(callback, lstat);
	                return;
	            }
	            if (settings.markSymbolicLink) {
	                stat.isSymbolicLink = () => true;
	            }
	            callSuccessCallback$2(callback, stat);
	        });
	    });
	}
	async$2.read = read$3;
	function callFailureCallback$2(callback, error) {
	    callback(error);
	}
	function callSuccessCallback$2(callback, result) {
	    callback(null, result);
	}

	var sync$7 = {};

	Object.defineProperty(sync$7, "__esModule", { value: true });
	sync$7.read = void 0;
	function read$2(path, settings) {
	    const lstat = settings.fs.lstatSync(path);
	    if (!lstat.isSymbolicLink() || !settings.followSymbolicLink) {
	        return lstat;
	    }
	    try {
	        const stat = settings.fs.statSync(path);
	        if (settings.markSymbolicLink) {
	            stat.isSymbolicLink = () => true;
	        }
	        return stat;
	    }
	    catch (error) {
	        if (!settings.throwErrorOnBrokenSymbolicLink) {
	            return lstat;
	        }
	        throw error;
	    }
	}
	sync$7.read = read$2;

	var settings$3 = {};

	var fs$5 = {};

	(function (exports) {
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.createFileSystemAdapter = exports.FILE_SYSTEM_ADAPTER = void 0;
		const fs = require$$0$6;
		exports.FILE_SYSTEM_ADAPTER = {
		    lstat: fs.lstat,
		    stat: fs.stat,
		    lstatSync: fs.lstatSync,
		    statSync: fs.statSync
		};
		function createFileSystemAdapter(fsMethods) {
		    if (fsMethods === undefined) {
		        return exports.FILE_SYSTEM_ADAPTER;
		    }
		    return Object.assign(Object.assign({}, exports.FILE_SYSTEM_ADAPTER), fsMethods);
		}
		exports.createFileSystemAdapter = createFileSystemAdapter; 
	} (fs$5));

	Object.defineProperty(settings$3, "__esModule", { value: true });
	const fs$4 = fs$5;
	let Settings$2 = class Settings {
	    constructor(_options = {}) {
	        this._options = _options;
	        this.followSymbolicLink = this._getValue(this._options.followSymbolicLink, true);
	        this.fs = fs$4.createFileSystemAdapter(this._options.fs);
	        this.markSymbolicLink = this._getValue(this._options.markSymbolicLink, false);
	        this.throwErrorOnBrokenSymbolicLink = this._getValue(this._options.throwErrorOnBrokenSymbolicLink, true);
	    }
	    _getValue(option, value) {
	        return option !== null && option !== void 0 ? option : value;
	    }
	};
	settings$3.default = Settings$2;

	Object.defineProperty(out$1, "__esModule", { value: true });
	out$1.statSync = out$1.stat = out$1.Settings = void 0;
	const async$1 = async$2;
	const sync$6 = sync$7;
	const settings_1$3 = settings$3;
	out$1.Settings = settings_1$3.default;
	function stat(path, optionsOrSettingsOrCallback, callback) {
	    if (typeof optionsOrSettingsOrCallback === 'function') {
	        async$1.read(path, getSettings$2(), optionsOrSettingsOrCallback);
	        return;
	    }
	    async$1.read(path, getSettings$2(optionsOrSettingsOrCallback), callback);
	}
	out$1.stat = stat;
	function statSync(path, optionsOrSettings) {
	    const settings = getSettings$2(optionsOrSettings);
	    return sync$6.read(path, settings);
	}
	out$1.statSync = statSync;
	function getSettings$2(settingsOrOptions = {}) {
	    if (settingsOrOptions instanceof settings_1$3.default) {
	        return settingsOrOptions;
	    }
	    return new settings_1$3.default(settingsOrOptions);
	}

	/*! queue-microtask. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */

	let promise;

	var queueMicrotask_1 = typeof queueMicrotask === 'function'
	  ? queueMicrotask.bind(typeof window !== 'undefined' ? window : commonjsGlobal)
	  // reuse resolved promise, and allocate it lazily
	  : cb => (promise || (promise = Promise.resolve()))
	    .then(cb)
	    .catch(err => setTimeout(() => { throw err }, 0));

	/*! run-parallel. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */

	var runParallel_1 = runParallel;

	const queueMicrotask$1 = queueMicrotask_1;

	function runParallel (tasks, cb) {
	  let results, pending, keys;
	  let isSync = true;

	  if (Array.isArray(tasks)) {
	    results = [];
	    pending = tasks.length;
	  } else {
	    keys = Object.keys(tasks);
	    results = {};
	    pending = keys.length;
	  }

	  function done (err) {
	    function end () {
	      if (cb) cb(err, results);
	      cb = null;
	    }
	    if (isSync) queueMicrotask$1(end);
	    else end();
	  }

	  function each (i, err, result) {
	    results[i] = result;
	    if (--pending === 0 || err) {
	      done(err);
	    }
	  }

	  if (!pending) {
	    // empty
	    done(null);
	  } else if (keys) {
	    // object
	    keys.forEach(function (key) {
	      tasks[key](function (err, result) { each(key, err, result); });
	    });
	  } else {
	    // array
	    tasks.forEach(function (task, i) {
	      task(function (err, result) { each(i, err, result); });
	    });
	  }

	  isSync = false;
	}

	var constants$1 = {};

	Object.defineProperty(constants$1, "__esModule", { value: true });
	constants$1.IS_SUPPORT_READDIR_WITH_FILE_TYPES = void 0;
	const NODE_PROCESS_VERSION_PARTS = process.versions.node.split('.');
	if (NODE_PROCESS_VERSION_PARTS[0] === undefined || NODE_PROCESS_VERSION_PARTS[1] === undefined) {
	    throw new Error(`Unexpected behavior. The 'process.versions.node' variable has invalid value: ${process.versions.node}`);
	}
	const MAJOR_VERSION = Number.parseInt(NODE_PROCESS_VERSION_PARTS[0], 10);
	const MINOR_VERSION = Number.parseInt(NODE_PROCESS_VERSION_PARTS[1], 10);
	const SUPPORTED_MAJOR_VERSION = 10;
	const SUPPORTED_MINOR_VERSION = 10;
	const IS_MATCHED_BY_MAJOR = MAJOR_VERSION > SUPPORTED_MAJOR_VERSION;
	const IS_MATCHED_BY_MAJOR_AND_MINOR = MAJOR_VERSION === SUPPORTED_MAJOR_VERSION && MINOR_VERSION >= SUPPORTED_MINOR_VERSION;
	/**
	 * IS `true` for Node.js 10.10 and greater.
	 */
	constants$1.IS_SUPPORT_READDIR_WITH_FILE_TYPES = IS_MATCHED_BY_MAJOR || IS_MATCHED_BY_MAJOR_AND_MINOR;

	var utils$9 = {};

	var fs$3 = {};

	Object.defineProperty(fs$3, "__esModule", { value: true });
	fs$3.createDirentFromStats = void 0;
	class DirentFromStats {
	    constructor(name, stats) {
	        this.name = name;
	        this.isBlockDevice = stats.isBlockDevice.bind(stats);
	        this.isCharacterDevice = stats.isCharacterDevice.bind(stats);
	        this.isDirectory = stats.isDirectory.bind(stats);
	        this.isFIFO = stats.isFIFO.bind(stats);
	        this.isFile = stats.isFile.bind(stats);
	        this.isSocket = stats.isSocket.bind(stats);
	        this.isSymbolicLink = stats.isSymbolicLink.bind(stats);
	    }
	}
	function createDirentFromStats(name, stats) {
	    return new DirentFromStats(name, stats);
	}
	fs$3.createDirentFromStats = createDirentFromStats;

	Object.defineProperty(utils$9, "__esModule", { value: true });
	utils$9.fs = void 0;
	const fs$2 = fs$3;
	utils$9.fs = fs$2;

	var common$6 = {};

	Object.defineProperty(common$6, "__esModule", { value: true });
	common$6.joinPathSegments = void 0;
	function joinPathSegments$1(a, b, separator) {
	    /**
	     * The correct handling of cases when the first segment is a root (`/`, `C:/`) or UNC path (`//?/C:/`).
	     */
	    if (a.endsWith(separator)) {
	        return a + b;
	    }
	    return a + separator + b;
	}
	common$6.joinPathSegments = joinPathSegments$1;

	Object.defineProperty(async$3, "__esModule", { value: true });
	async$3.readdir = async$3.readdirWithFileTypes = async$3.read = void 0;
	const fsStat$5 = out$1;
	const rpl = runParallel_1;
	const constants_1$1 = constants$1;
	const utils$8 = utils$9;
	const common$5 = common$6;
	function read$1(directory, settings, callback) {
	    if (!settings.stats && constants_1$1.IS_SUPPORT_READDIR_WITH_FILE_TYPES) {
	        readdirWithFileTypes$1(directory, settings, callback);
	        return;
	    }
	    readdir$1(directory, settings, callback);
	}
	async$3.read = read$1;
	function readdirWithFileTypes$1(directory, settings, callback) {
	    settings.fs.readdir(directory, { withFileTypes: true }, (readdirError, dirents) => {
	        if (readdirError !== null) {
	            callFailureCallback$1(callback, readdirError);
	            return;
	        }
	        const entries = dirents.map((dirent) => ({
	            dirent,
	            name: dirent.name,
	            path: common$5.joinPathSegments(directory, dirent.name, settings.pathSegmentSeparator)
	        }));
	        if (!settings.followSymbolicLinks) {
	            callSuccessCallback$1(callback, entries);
	            return;
	        }
	        const tasks = entries.map((entry) => makeRplTaskEntry(entry, settings));
	        rpl(tasks, (rplError, rplEntries) => {
	            if (rplError !== null) {
	                callFailureCallback$1(callback, rplError);
	                return;
	            }
	            callSuccessCallback$1(callback, rplEntries);
	        });
	    });
	}
	async$3.readdirWithFileTypes = readdirWithFileTypes$1;
	function makeRplTaskEntry(entry, settings) {
	    return (done) => {
	        if (!entry.dirent.isSymbolicLink()) {
	            done(null, entry);
	            return;
	        }
	        settings.fs.stat(entry.path, (statError, stats) => {
	            if (statError !== null) {
	                if (settings.throwErrorOnBrokenSymbolicLink) {
	                    done(statError);
	                    return;
	                }
	                done(null, entry);
	                return;
	            }
	            entry.dirent = utils$8.fs.createDirentFromStats(entry.name, stats);
	            done(null, entry);
	        });
	    };
	}
	function readdir$1(directory, settings, callback) {
	    settings.fs.readdir(directory, (readdirError, names) => {
	        if (readdirError !== null) {
	            callFailureCallback$1(callback, readdirError);
	            return;
	        }
	        const tasks = names.map((name) => {
	            const path = common$5.joinPathSegments(directory, name, settings.pathSegmentSeparator);
	            return (done) => {
	                fsStat$5.stat(path, settings.fsStatSettings, (error, stats) => {
	                    if (error !== null) {
	                        done(error);
	                        return;
	                    }
	                    const entry = {
	                        name,
	                        path,
	                        dirent: utils$8.fs.createDirentFromStats(name, stats)
	                    };
	                    if (settings.stats) {
	                        entry.stats = stats;
	                    }
	                    done(null, entry);
	                });
	            };
	        });
	        rpl(tasks, (rplError, entries) => {
	            if (rplError !== null) {
	                callFailureCallback$1(callback, rplError);
	                return;
	            }
	            callSuccessCallback$1(callback, entries);
	        });
	    });
	}
	async$3.readdir = readdir$1;
	function callFailureCallback$1(callback, error) {
	    callback(error);
	}
	function callSuccessCallback$1(callback, result) {
	    callback(null, result);
	}

	var sync$5 = {};

	Object.defineProperty(sync$5, "__esModule", { value: true });
	sync$5.readdir = sync$5.readdirWithFileTypes = sync$5.read = void 0;
	const fsStat$4 = out$1;
	const constants_1 = constants$1;
	const utils$7 = utils$9;
	const common$4 = common$6;
	function read(directory, settings) {
	    if (!settings.stats && constants_1.IS_SUPPORT_READDIR_WITH_FILE_TYPES) {
	        return readdirWithFileTypes(directory, settings);
	    }
	    return readdir(directory, settings);
	}
	sync$5.read = read;
	function readdirWithFileTypes(directory, settings) {
	    const dirents = settings.fs.readdirSync(directory, { withFileTypes: true });
	    return dirents.map((dirent) => {
	        const entry = {
	            dirent,
	            name: dirent.name,
	            path: common$4.joinPathSegments(directory, dirent.name, settings.pathSegmentSeparator)
	        };
	        if (entry.dirent.isSymbolicLink() && settings.followSymbolicLinks) {
	            try {
	                const stats = settings.fs.statSync(entry.path);
	                entry.dirent = utils$7.fs.createDirentFromStats(entry.name, stats);
	            }
	            catch (error) {
	                if (settings.throwErrorOnBrokenSymbolicLink) {
	                    throw error;
	                }
	            }
	        }
	        return entry;
	    });
	}
	sync$5.readdirWithFileTypes = readdirWithFileTypes;
	function readdir(directory, settings) {
	    const names = settings.fs.readdirSync(directory);
	    return names.map((name) => {
	        const entryPath = common$4.joinPathSegments(directory, name, settings.pathSegmentSeparator);
	        const stats = fsStat$4.statSync(entryPath, settings.fsStatSettings);
	        const entry = {
	            name,
	            path: entryPath,
	            dirent: utils$7.fs.createDirentFromStats(name, stats)
	        };
	        if (settings.stats) {
	            entry.stats = stats;
	        }
	        return entry;
	    });
	}
	sync$5.readdir = readdir;

	var settings$2 = {};

	var fs$1 = {};

	(function (exports) {
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.createFileSystemAdapter = exports.FILE_SYSTEM_ADAPTER = void 0;
		const fs = require$$0$6;
		exports.FILE_SYSTEM_ADAPTER = {
		    lstat: fs.lstat,
		    stat: fs.stat,
		    lstatSync: fs.lstatSync,
		    statSync: fs.statSync,
		    readdir: fs.readdir,
		    readdirSync: fs.readdirSync
		};
		function createFileSystemAdapter(fsMethods) {
		    if (fsMethods === undefined) {
		        return exports.FILE_SYSTEM_ADAPTER;
		    }
		    return Object.assign(Object.assign({}, exports.FILE_SYSTEM_ADAPTER), fsMethods);
		}
		exports.createFileSystemAdapter = createFileSystemAdapter; 
	} (fs$1));

	Object.defineProperty(settings$2, "__esModule", { value: true });
	const path$3 = require$$0$8;
	const fsStat$3 = out$1;
	const fs = fs$1;
	let Settings$1 = class Settings {
	    constructor(_options = {}) {
	        this._options = _options;
	        this.followSymbolicLinks = this._getValue(this._options.followSymbolicLinks, false);
	        this.fs = fs.createFileSystemAdapter(this._options.fs);
	        this.pathSegmentSeparator = this._getValue(this._options.pathSegmentSeparator, path$3.sep);
	        this.stats = this._getValue(this._options.stats, false);
	        this.throwErrorOnBrokenSymbolicLink = this._getValue(this._options.throwErrorOnBrokenSymbolicLink, true);
	        this.fsStatSettings = new fsStat$3.Settings({
	            followSymbolicLink: this.followSymbolicLinks,
	            fs: this.fs,
	            throwErrorOnBrokenSymbolicLink: this.throwErrorOnBrokenSymbolicLink
	        });
	    }
	    _getValue(option, value) {
	        return option !== null && option !== void 0 ? option : value;
	    }
	};
	settings$2.default = Settings$1;

	Object.defineProperty(out$2, "__esModule", { value: true });
	out$2.Settings = out$2.scandirSync = out$2.scandir = void 0;
	const async = async$3;
	const sync$4 = sync$5;
	const settings_1$2 = settings$2;
	out$2.Settings = settings_1$2.default;
	function scandir(path, optionsOrSettingsOrCallback, callback) {
	    if (typeof optionsOrSettingsOrCallback === 'function') {
	        async.read(path, getSettings$1(), optionsOrSettingsOrCallback);
	        return;
	    }
	    async.read(path, getSettings$1(optionsOrSettingsOrCallback), callback);
	}
	out$2.scandir = scandir;
	function scandirSync(path, optionsOrSettings) {
	    const settings = getSettings$1(optionsOrSettings);
	    return sync$4.read(path, settings);
	}
	out$2.scandirSync = scandirSync;
	function getSettings$1(settingsOrOptions = {}) {
	    if (settingsOrOptions instanceof settings_1$2.default) {
	        return settingsOrOptions;
	    }
	    return new settings_1$2.default(settingsOrOptions);
	}

	var queue = {exports: {}};

	function reusify$1 (Constructor) {
	  var head = new Constructor();
	  var tail = head;

	  function get () {
	    var current = head;

	    if (current.next) {
	      head = current.next;
	    } else {
	      head = new Constructor();
	      tail = head;
	    }

	    current.next = null;

	    return current
	  }

	  function release (obj) {
	    tail.next = obj;
	    tail = obj;
	  }

	  return {
	    get: get,
	    release: release
	  }
	}

	var reusify_1 = reusify$1;

	/* eslint-disable no-var */

	var reusify = reusify_1;

	function fastqueue (context, worker, concurrency) {
	  if (typeof context === 'function') {
	    concurrency = worker;
	    worker = context;
	    context = null;
	  }

	  if (concurrency < 1) {
	    throw new Error('fastqueue concurrency must be greater than 1')
	  }

	  var cache = reusify(Task);
	  var queueHead = null;
	  var queueTail = null;
	  var _running = 0;
	  var errorHandler = null;

	  var self = {
	    push: push,
	    drain: noop$3,
	    saturated: noop$3,
	    pause: pause,
	    paused: false,
	    concurrency: concurrency,
	    running: running,
	    resume: resume,
	    idle: idle,
	    length: length,
	    getQueue: getQueue,
	    unshift: unshift,
	    empty: noop$3,
	    kill: kill,
	    killAndDrain: killAndDrain,
	    error: error
	  };

	  return self

	  function running () {
	    return _running
	  }

	  function pause () {
	    self.paused = true;
	  }

	  function length () {
	    var current = queueHead;
	    var counter = 0;

	    while (current) {
	      current = current.next;
	      counter++;
	    }

	    return counter
	  }

	  function getQueue () {
	    var current = queueHead;
	    var tasks = [];

	    while (current) {
	      tasks.push(current.value);
	      current = current.next;
	    }

	    return tasks
	  }

	  function resume () {
	    if (!self.paused) return
	    self.paused = false;
	    for (var i = 0; i < self.concurrency; i++) {
	      _running++;
	      release();
	    }
	  }

	  function idle () {
	    return _running === 0 && self.length() === 0
	  }

	  function push (value, done) {
	    var current = cache.get();

	    current.context = context;
	    current.release = release;
	    current.value = value;
	    current.callback = done || noop$3;
	    current.errorHandler = errorHandler;

	    if (_running === self.concurrency || self.paused) {
	      if (queueTail) {
	        queueTail.next = current;
	        queueTail = current;
	      } else {
	        queueHead = current;
	        queueTail = current;
	        self.saturated();
	      }
	    } else {
	      _running++;
	      worker.call(context, current.value, current.worked);
	    }
	  }

	  function unshift (value, done) {
	    var current = cache.get();

	    current.context = context;
	    current.release = release;
	    current.value = value;
	    current.callback = done || noop$3;

	    if (_running === self.concurrency || self.paused) {
	      if (queueHead) {
	        current.next = queueHead;
	        queueHead = current;
	      } else {
	        queueHead = current;
	        queueTail = current;
	        self.saturated();
	      }
	    } else {
	      _running++;
	      worker.call(context, current.value, current.worked);
	    }
	  }

	  function release (holder) {
	    if (holder) {
	      cache.release(holder);
	    }
	    var next = queueHead;
	    if (next) {
	      if (!self.paused) {
	        if (queueTail === queueHead) {
	          queueTail = null;
	        }
	        queueHead = next.next;
	        next.next = null;
	        worker.call(context, next.value, next.worked);
	        if (queueTail === null) {
	          self.empty();
	        }
	      } else {
	        _running--;
	      }
	    } else if (--_running === 0) {
	      self.drain();
	    }
	  }

	  function kill () {
	    queueHead = null;
	    queueTail = null;
	    self.drain = noop$3;
	  }

	  function killAndDrain () {
	    queueHead = null;
	    queueTail = null;
	    self.drain();
	    self.drain = noop$3;
	  }

	  function error (handler) {
	    errorHandler = handler;
	  }
	}

	function noop$3 () {}

	function Task () {
	  this.value = null;
	  this.callback = noop$3;
	  this.next = null;
	  this.release = noop$3;
	  this.context = null;
	  this.errorHandler = null;

	  var self = this;

	  this.worked = function worked (err, result) {
	    var callback = self.callback;
	    var errorHandler = self.errorHandler;
	    var val = self.value;
	    self.value = null;
	    self.callback = noop$3;
	    if (self.errorHandler) {
	      errorHandler(err, val);
	    }
	    callback.call(self.context, err, result);
	    self.release(self);
	  };
	}

	function queueAsPromised (context, worker, concurrency) {
	  if (typeof context === 'function') {
	    concurrency = worker;
	    worker = context;
	    context = null;
	  }

	  function asyncWrapper (arg, cb) {
	    worker.call(this, arg)
	      .then(function (res) {
	        cb(null, res);
	      }, cb);
	  }

	  var queue = fastqueue(context, asyncWrapper, concurrency);

	  var pushCb = queue.push;
	  var unshiftCb = queue.unshift;

	  queue.push = push;
	  queue.unshift = unshift;
	  queue.drained = drained;

	  return queue

	  function push (value) {
	    var p = new Promise(function (resolve, reject) {
	      pushCb(value, function (err, result) {
	        if (err) {
	          reject(err);
	          return
	        }
	        resolve(result);
	      });
	    });

	    // Let's fork the promise chain to
	    // make the error bubble up to the user but
	    // not lead to a unhandledRejection
	    p.catch(noop$3);

	    return p
	  }

	  function unshift (value) {
	    var p = new Promise(function (resolve, reject) {
	      unshiftCb(value, function (err, result) {
	        if (err) {
	          reject(err);
	          return
	        }
	        resolve(result);
	      });
	    });

	    // Let's fork the promise chain to
	    // make the error bubble up to the user but
	    // not lead to a unhandledRejection
	    p.catch(noop$3);

	    return p
	  }

	  function drained () {
	    if (queue.idle()) {
	      return new Promise(function (resolve) {
	        resolve();
	      })
	    }

	    var previousDrain = queue.drain;

	    var p = new Promise(function (resolve) {
	      queue.drain = function () {
	        previousDrain();
	        resolve();
	      };
	    });

	    return p
	  }
	}

	queue.exports = fastqueue;
	queue.exports.promise = queueAsPromised;

	var queueExports = queue.exports;

	var common$3 = {};

	Object.defineProperty(common$3, "__esModule", { value: true });
	common$3.joinPathSegments = common$3.replacePathSegmentSeparator = common$3.isAppliedFilter = common$3.isFatalError = void 0;
	function isFatalError(settings, error) {
	    if (settings.errorFilter === null) {
	        return true;
	    }
	    return !settings.errorFilter(error);
	}
	common$3.isFatalError = isFatalError;
	function isAppliedFilter(filter, value) {
	    return filter === null || filter(value);
	}
	common$3.isAppliedFilter = isAppliedFilter;
	function replacePathSegmentSeparator(filepath, separator) {
	    return filepath.split(/[/\\]/).join(separator);
	}
	common$3.replacePathSegmentSeparator = replacePathSegmentSeparator;
	function joinPathSegments(a, b, separator) {
	    if (a === '') {
	        return b;
	    }
	    /**
	     * The correct handling of cases when the first segment is a root (`/`, `C:/`) or UNC path (`//?/C:/`).
	     */
	    if (a.endsWith(separator)) {
	        return a + b;
	    }
	    return a + separator + b;
	}
	common$3.joinPathSegments = joinPathSegments;

	var reader$1 = {};

	Object.defineProperty(reader$1, "__esModule", { value: true });
	const common$2 = common$3;
	let Reader$1 = class Reader {
	    constructor(_root, _settings) {
	        this._root = _root;
	        this._settings = _settings;
	        this._root = common$2.replacePathSegmentSeparator(_root, _settings.pathSegmentSeparator);
	    }
	};
	reader$1.default = Reader$1;

	Object.defineProperty(async$4, "__esModule", { value: true });
	const events_1 = require$$0$b;
	const fsScandir$2 = out$2;
	const fastq = queueExports;
	const common$1 = common$3;
	const reader_1$4 = reader$1;
	class AsyncReader extends reader_1$4.default {
	    constructor(_root, _settings) {
	        super(_root, _settings);
	        this._settings = _settings;
	        this._scandir = fsScandir$2.scandir;
	        this._emitter = new events_1.EventEmitter();
	        this._queue = fastq(this._worker.bind(this), this._settings.concurrency);
	        this._isFatalError = false;
	        this._isDestroyed = false;
	        this._queue.drain = () => {
	            if (!this._isFatalError) {
	                this._emitter.emit('end');
	            }
	        };
	    }
	    read() {
	        this._isFatalError = false;
	        this._isDestroyed = false;
	        setImmediate(() => {
	            this._pushToQueue(this._root, this._settings.basePath);
	        });
	        return this._emitter;
	    }
	    get isDestroyed() {
	        return this._isDestroyed;
	    }
	    destroy() {
	        if (this._isDestroyed) {
	            throw new Error('The reader is already destroyed');
	        }
	        this._isDestroyed = true;
	        this._queue.killAndDrain();
	    }
	    onEntry(callback) {
	        this._emitter.on('entry', callback);
	    }
	    onError(callback) {
	        this._emitter.once('error', callback);
	    }
	    onEnd(callback) {
	        this._emitter.once('end', callback);
	    }
	    _pushToQueue(directory, base) {
	        const queueItem = { directory, base };
	        this._queue.push(queueItem, (error) => {
	            if (error !== null) {
	                this._handleError(error);
	            }
	        });
	    }
	    _worker(item, done) {
	        this._scandir(item.directory, this._settings.fsScandirSettings, (error, entries) => {
	            if (error !== null) {
	                done(error, undefined);
	                return;
	            }
	            for (const entry of entries) {
	                this._handleEntry(entry, item.base);
	            }
	            done(null, undefined);
	        });
	    }
	    _handleError(error) {
	        if (this._isDestroyed || !common$1.isFatalError(this._settings, error)) {
	            return;
	        }
	        this._isFatalError = true;
	        this._isDestroyed = true;
	        this._emitter.emit('error', error);
	    }
	    _handleEntry(entry, base) {
	        if (this._isDestroyed || this._isFatalError) {
	            return;
	        }
	        const fullpath = entry.path;
	        if (base !== undefined) {
	            entry.path = common$1.joinPathSegments(base, entry.name, this._settings.pathSegmentSeparator);
	        }
	        if (common$1.isAppliedFilter(this._settings.entryFilter, entry)) {
	            this._emitEntry(entry);
	        }
	        if (entry.dirent.isDirectory() && common$1.isAppliedFilter(this._settings.deepFilter, entry)) {
	            this._pushToQueue(fullpath, base === undefined ? undefined : entry.path);
	        }
	    }
	    _emitEntry(entry) {
	        this._emitter.emit('entry', entry);
	    }
	}
	async$4.default = AsyncReader;

	Object.defineProperty(async$5, "__esModule", { value: true });
	const async_1$4 = async$4;
	class AsyncProvider {
	    constructor(_root, _settings) {
	        this._root = _root;
	        this._settings = _settings;
	        this._reader = new async_1$4.default(this._root, this._settings);
	        this._storage = [];
	    }
	    read(callback) {
	        this._reader.onError((error) => {
	            callFailureCallback(callback, error);
	        });
	        this._reader.onEntry((entry) => {
	            this._storage.push(entry);
	        });
	        this._reader.onEnd(() => {
	            callSuccessCallback(callback, this._storage);
	        });
	        this._reader.read();
	    }
	}
	async$5.default = AsyncProvider;
	function callFailureCallback(callback, error) {
	    callback(error);
	}
	function callSuccessCallback(callback, entries) {
	    callback(null, entries);
	}

	var stream$2 = {};

	Object.defineProperty(stream$2, "__esModule", { value: true });
	const stream_1$5 = require$$0$a;
	const async_1$3 = async$4;
	class StreamProvider {
	    constructor(_root, _settings) {
	        this._root = _root;
	        this._settings = _settings;
	        this._reader = new async_1$3.default(this._root, this._settings);
	        this._stream = new stream_1$5.Readable({
	            objectMode: true,
	            read: () => { },
	            destroy: () => {
	                if (!this._reader.isDestroyed) {
	                    this._reader.destroy();
	                }
	            }
	        });
	    }
	    read() {
	        this._reader.onError((error) => {
	            this._stream.emit('error', error);
	        });
	        this._reader.onEntry((entry) => {
	            this._stream.push(entry);
	        });
	        this._reader.onEnd(() => {
	            this._stream.push(null);
	        });
	        this._reader.read();
	        return this._stream;
	    }
	}
	stream$2.default = StreamProvider;

	var sync$3 = {};

	var sync$2 = {};

	Object.defineProperty(sync$2, "__esModule", { value: true });
	const fsScandir$1 = out$2;
	const common = common$3;
	const reader_1$3 = reader$1;
	class SyncReader extends reader_1$3.default {
	    constructor() {
	        super(...arguments);
	        this._scandir = fsScandir$1.scandirSync;
	        this._storage = [];
	        this._queue = new Set();
	    }
	    read() {
	        this._pushToQueue(this._root, this._settings.basePath);
	        this._handleQueue();
	        return this._storage;
	    }
	    _pushToQueue(directory, base) {
	        this._queue.add({ directory, base });
	    }
	    _handleQueue() {
	        for (const item of this._queue.values()) {
	            this._handleDirectory(item.directory, item.base);
	        }
	    }
	    _handleDirectory(directory, base) {
	        try {
	            const entries = this._scandir(directory, this._settings.fsScandirSettings);
	            for (const entry of entries) {
	                this._handleEntry(entry, base);
	            }
	        }
	        catch (error) {
	            this._handleError(error);
	        }
	    }
	    _handleError(error) {
	        if (!common.isFatalError(this._settings, error)) {
	            return;
	        }
	        throw error;
	    }
	    _handleEntry(entry, base) {
	        const fullpath = entry.path;
	        if (base !== undefined) {
	            entry.path = common.joinPathSegments(base, entry.name, this._settings.pathSegmentSeparator);
	        }
	        if (common.isAppliedFilter(this._settings.entryFilter, entry)) {
	            this._pushToStorage(entry);
	        }
	        if (entry.dirent.isDirectory() && common.isAppliedFilter(this._settings.deepFilter, entry)) {
	            this._pushToQueue(fullpath, base === undefined ? undefined : entry.path);
	        }
	    }
	    _pushToStorage(entry) {
	        this._storage.push(entry);
	    }
	}
	sync$2.default = SyncReader;

	Object.defineProperty(sync$3, "__esModule", { value: true });
	const sync_1$3 = sync$2;
	class SyncProvider {
	    constructor(_root, _settings) {
	        this._root = _root;
	        this._settings = _settings;
	        this._reader = new sync_1$3.default(this._root, this._settings);
	    }
	    read() {
	        return this._reader.read();
	    }
	}
	sync$3.default = SyncProvider;

	var settings$1 = {};

	Object.defineProperty(settings$1, "__esModule", { value: true });
	const path$2 = require$$0$8;
	const fsScandir = out$2;
	class Settings {
	    constructor(_options = {}) {
	        this._options = _options;
	        this.basePath = this._getValue(this._options.basePath, undefined);
	        this.concurrency = this._getValue(this._options.concurrency, Number.POSITIVE_INFINITY);
	        this.deepFilter = this._getValue(this._options.deepFilter, null);
	        this.entryFilter = this._getValue(this._options.entryFilter, null);
	        this.errorFilter = this._getValue(this._options.errorFilter, null);
	        this.pathSegmentSeparator = this._getValue(this._options.pathSegmentSeparator, path$2.sep);
	        this.fsScandirSettings = new fsScandir.Settings({
	            followSymbolicLinks: this._options.followSymbolicLinks,
	            fs: this._options.fs,
	            pathSegmentSeparator: this._options.pathSegmentSeparator,
	            stats: this._options.stats,
	            throwErrorOnBrokenSymbolicLink: this._options.throwErrorOnBrokenSymbolicLink
	        });
	    }
	    _getValue(option, value) {
	        return option !== null && option !== void 0 ? option : value;
	    }
	}
	settings$1.default = Settings;

	Object.defineProperty(out$3, "__esModule", { value: true });
	out$3.Settings = out$3.walkStream = out$3.walkSync = out$3.walk = void 0;
	const async_1$2 = async$5;
	const stream_1$4 = stream$2;
	const sync_1$2 = sync$3;
	const settings_1$1 = settings$1;
	out$3.Settings = settings_1$1.default;
	function walk(directory, optionsOrSettingsOrCallback, callback) {
	    if (typeof optionsOrSettingsOrCallback === 'function') {
	        new async_1$2.default(directory, getSettings()).read(optionsOrSettingsOrCallback);
	        return;
	    }
	    new async_1$2.default(directory, getSettings(optionsOrSettingsOrCallback)).read(callback);
	}
	out$3.walk = walk;
	function walkSync(directory, optionsOrSettings) {
	    const settings = getSettings(optionsOrSettings);
	    const provider = new sync_1$2.default(directory, settings);
	    return provider.read();
	}
	out$3.walkSync = walkSync;
	function walkStream(directory, optionsOrSettings) {
	    const settings = getSettings(optionsOrSettings);
	    const provider = new stream_1$4.default(directory, settings);
	    return provider.read();
	}
	out$3.walkStream = walkStream;
	function getSettings(settingsOrOptions = {}) {
	    if (settingsOrOptions instanceof settings_1$1.default) {
	        return settingsOrOptions;
	    }
	    return new settings_1$1.default(settingsOrOptions);
	}

	var reader = {};

	Object.defineProperty(reader, "__esModule", { value: true });
	const path$1 = require$$0$8;
	const fsStat$2 = out$1;
	const utils$6 = utils$k;
	class Reader {
	    constructor(_settings) {
	        this._settings = _settings;
	        this._fsStatSettings = new fsStat$2.Settings({
	            followSymbolicLink: this._settings.followSymbolicLinks,
	            fs: this._settings.fs,
	            throwErrorOnBrokenSymbolicLink: this._settings.followSymbolicLinks
	        });
	    }
	    _getFullEntryPath(filepath) {
	        return path$1.resolve(this._settings.cwd, filepath);
	    }
	    _makeEntry(stats, pattern) {
	        const entry = {
	            name: pattern,
	            path: pattern,
	            dirent: utils$6.fs.createDirentFromStats(pattern, stats)
	        };
	        if (this._settings.stats) {
	            entry.stats = stats;
	        }
	        return entry;
	    }
	    _isFatalError(error) {
	        return !utils$6.errno.isEnoentCodeError(error) && !this._settings.suppressErrors;
	    }
	}
	reader.default = Reader;

	var stream$1 = {};

	Object.defineProperty(stream$1, "__esModule", { value: true });
	const stream_1$3 = require$$0$a;
	const fsStat$1 = out$1;
	const fsWalk$2 = out$3;
	const reader_1$2 = reader;
	class ReaderStream extends reader_1$2.default {
	    constructor() {
	        super(...arguments);
	        this._walkStream = fsWalk$2.walkStream;
	        this._stat = fsStat$1.stat;
	    }
	    dynamic(root, options) {
	        return this._walkStream(root, options);
	    }
	    static(patterns, options) {
	        const filepaths = patterns.map(this._getFullEntryPath, this);
	        const stream = new stream_1$3.PassThrough({ objectMode: true });
	        stream._write = (index, _enc, done) => {
	            return this._getEntry(filepaths[index], patterns[index], options)
	                .then((entry) => {
	                if (entry !== null && options.entryFilter(entry)) {
	                    stream.push(entry);
	                }
	                if (index === filepaths.length - 1) {
	                    stream.end();
	                }
	                done();
	            })
	                .catch(done);
	        };
	        for (let i = 0; i < filepaths.length; i++) {
	            stream.write(i);
	        }
	        return stream;
	    }
	    _getEntry(filepath, pattern, options) {
	        return this._getStat(filepath)
	            .then((stats) => this._makeEntry(stats, pattern))
	            .catch((error) => {
	            if (options.errorFilter(error)) {
	                return null;
	            }
	            throw error;
	        });
	    }
	    _getStat(filepath) {
	        return new Promise((resolve, reject) => {
	            this._stat(filepath, this._fsStatSettings, (error, stats) => {
	                return error === null ? resolve(stats) : reject(error);
	            });
	        });
	    }
	}
	stream$1.default = ReaderStream;

	Object.defineProperty(async$6, "__esModule", { value: true });
	const fsWalk$1 = out$3;
	const reader_1$1 = reader;
	const stream_1$2 = stream$1;
	class ReaderAsync extends reader_1$1.default {
	    constructor() {
	        super(...arguments);
	        this._walkAsync = fsWalk$1.walk;
	        this._readerStream = new stream_1$2.default(this._settings);
	    }
	    dynamic(root, options) {
	        return new Promise((resolve, reject) => {
	            this._walkAsync(root, options, (error, entries) => {
	                if (error === null) {
	                    resolve(entries);
	                }
	                else {
	                    reject(error);
	                }
	            });
	        });
	    }
	    async static(patterns, options) {
	        const entries = [];
	        const stream = this._readerStream.static(patterns, options);
	        // After #235, replace it with an asynchronous iterator.
	        return new Promise((resolve, reject) => {
	            stream.once('error', reject);
	            stream.on('data', (entry) => entries.push(entry));
	            stream.once('end', () => resolve(entries));
	        });
	    }
	}
	async$6.default = ReaderAsync;

	var provider = {};

	var deep = {};

	var partial$1 = {};

	var matcher$1 = {};

	Object.defineProperty(matcher$1, "__esModule", { value: true });
	const utils$5 = utils$k;
	class Matcher {
	    constructor(_patterns, _settings, _micromatchOptions) {
	        this._patterns = _patterns;
	        this._settings = _settings;
	        this._micromatchOptions = _micromatchOptions;
	        this._storage = [];
	        this._fillStorage();
	    }
	    _fillStorage() {
	        /**
	         * The original pattern may include `{,*,**,a/*}`, which will lead to problems with matching (unresolved level).
	         * So, before expand patterns with brace expansion into separated patterns.
	         */
	        const patterns = utils$5.pattern.expandPatternsWithBraceExpansion(this._patterns);
	        for (const pattern of patterns) {
	            const segments = this._getPatternSegments(pattern);
	            const sections = this._splitSegmentsIntoSections(segments);
	            this._storage.push({
	                complete: sections.length <= 1,
	                pattern,
	                segments,
	                sections
	            });
	        }
	    }
	    _getPatternSegments(pattern) {
	        const parts = utils$5.pattern.getPatternParts(pattern, this._micromatchOptions);
	        return parts.map((part) => {
	            const dynamic = utils$5.pattern.isDynamicPattern(part, this._settings);
	            if (!dynamic) {
	                return {
	                    dynamic: false,
	                    pattern: part
	                };
	            }
	            return {
	                dynamic: true,
	                pattern: part,
	                patternRe: utils$5.pattern.makeRe(part, this._micromatchOptions)
	            };
	        });
	    }
	    _splitSegmentsIntoSections(segments) {
	        return utils$5.array.splitWhen(segments, (segment) => segment.dynamic && utils$5.pattern.hasGlobStar(segment.pattern));
	    }
	}
	matcher$1.default = Matcher;

	Object.defineProperty(partial$1, "__esModule", { value: true });
	const matcher_1 = matcher$1;
	class PartialMatcher extends matcher_1.default {
	    match(filepath) {
	        const parts = filepath.split('/');
	        const levels = parts.length;
	        const patterns = this._storage.filter((info) => !info.complete || info.segments.length > levels);
	        for (const pattern of patterns) {
	            const section = pattern.sections[0];
	            /**
	             * In this case, the pattern has a globstar and we must read all directories unconditionally,
	             * but only if the level has reached the end of the first group.
	             *
	             * fixtures/{a,b}/**
	             *  ^ true/false  ^ always true
	            */
	            if (!pattern.complete && levels > section.length) {
	                return true;
	            }
	            const match = parts.every((part, index) => {
	                const segment = pattern.segments[index];
	                if (segment.dynamic && segment.patternRe.test(part)) {
	                    return true;
	                }
	                if (!segment.dynamic && segment.pattern === part) {
	                    return true;
	                }
	                return false;
	            });
	            if (match) {
	                return true;
	            }
	        }
	        return false;
	    }
	}
	partial$1.default = PartialMatcher;

	Object.defineProperty(deep, "__esModule", { value: true });
	const utils$4 = utils$k;
	const partial_1 = partial$1;
	class DeepFilter {
	    constructor(_settings, _micromatchOptions) {
	        this._settings = _settings;
	        this._micromatchOptions = _micromatchOptions;
	    }
	    getFilter(basePath, positive, negative) {
	        const matcher = this._getMatcher(positive);
	        const negativeRe = this._getNegativePatternsRe(negative);
	        return (entry) => this._filter(basePath, entry, matcher, negativeRe);
	    }
	    _getMatcher(patterns) {
	        return new partial_1.default(patterns, this._settings, this._micromatchOptions);
	    }
	    _getNegativePatternsRe(patterns) {
	        const affectDepthOfReadingPatterns = patterns.filter(utils$4.pattern.isAffectDepthOfReadingPattern);
	        return utils$4.pattern.convertPatternsToRe(affectDepthOfReadingPatterns, this._micromatchOptions);
	    }
	    _filter(basePath, entry, matcher, negativeRe) {
	        if (this._isSkippedByDeep(basePath, entry.path)) {
	            return false;
	        }
	        if (this._isSkippedSymbolicLink(entry)) {
	            return false;
	        }
	        const filepath = utils$4.path.removeLeadingDotSegment(entry.path);
	        if (this._isSkippedByPositivePatterns(filepath, matcher)) {
	            return false;
	        }
	        return this._isSkippedByNegativePatterns(filepath, negativeRe);
	    }
	    _isSkippedByDeep(basePath, entryPath) {
	        /**
	         * Avoid unnecessary depth calculations when it doesn't matter.
	         */
	        if (this._settings.deep === Infinity) {
	            return false;
	        }
	        return this._getEntryLevel(basePath, entryPath) >= this._settings.deep;
	    }
	    _getEntryLevel(basePath, entryPath) {
	        const entryPathDepth = entryPath.split('/').length;
	        if (basePath === '') {
	            return entryPathDepth;
	        }
	        const basePathDepth = basePath.split('/').length;
	        return entryPathDepth - basePathDepth;
	    }
	    _isSkippedSymbolicLink(entry) {
	        return !this._settings.followSymbolicLinks && entry.dirent.isSymbolicLink();
	    }
	    _isSkippedByPositivePatterns(entryPath, matcher) {
	        return !this._settings.baseNameMatch && !matcher.match(entryPath);
	    }
	    _isSkippedByNegativePatterns(entryPath, patternsRe) {
	        return !utils$4.pattern.matchAny(entryPath, patternsRe);
	    }
	}
	deep.default = DeepFilter;

	var entry$1 = {};

	Object.defineProperty(entry$1, "__esModule", { value: true });
	const utils$3 = utils$k;
	class EntryFilter {
	    constructor(_settings, _micromatchOptions) {
	        this._settings = _settings;
	        this._micromatchOptions = _micromatchOptions;
	        this.index = new Map();
	    }
	    getFilter(positive, negative) {
	        const positiveRe = utils$3.pattern.convertPatternsToRe(positive, this._micromatchOptions);
	        const negativeRe = utils$3.pattern.convertPatternsToRe(negative, this._micromatchOptions);
	        return (entry) => this._filter(entry, positiveRe, negativeRe);
	    }
	    _filter(entry, positiveRe, negativeRe) {
	        if (this._settings.unique && this._isDuplicateEntry(entry)) {
	            return false;
	        }
	        if (this._onlyFileFilter(entry) || this._onlyDirectoryFilter(entry)) {
	            return false;
	        }
	        if (this._isSkippedByAbsoluteNegativePatterns(entry.path, negativeRe)) {
	            return false;
	        }
	        const filepath = this._settings.baseNameMatch ? entry.name : entry.path;
	        const isDirectory = entry.dirent.isDirectory();
	        const isMatched = this._isMatchToPatterns(filepath, positiveRe, isDirectory) && !this._isMatchToPatterns(entry.path, negativeRe, isDirectory);
	        if (this._settings.unique && isMatched) {
	            this._createIndexRecord(entry);
	        }
	        return isMatched;
	    }
	    _isDuplicateEntry(entry) {
	        return this.index.has(entry.path);
	    }
	    _createIndexRecord(entry) {
	        this.index.set(entry.path, undefined);
	    }
	    _onlyFileFilter(entry) {
	        return this._settings.onlyFiles && !entry.dirent.isFile();
	    }
	    _onlyDirectoryFilter(entry) {
	        return this._settings.onlyDirectories && !entry.dirent.isDirectory();
	    }
	    _isSkippedByAbsoluteNegativePatterns(entryPath, patternsRe) {
	        if (!this._settings.absolute) {
	            return false;
	        }
	        const fullpath = utils$3.path.makeAbsolute(this._settings.cwd, entryPath);
	        return utils$3.pattern.matchAny(fullpath, patternsRe);
	    }
	    _isMatchToPatterns(entryPath, patternsRe, isDirectory) {
	        const filepath = utils$3.path.removeLeadingDotSegment(entryPath);
	        // Trying to match files and directories by patterns.
	        const isMatched = utils$3.pattern.matchAny(filepath, patternsRe);
	        // A pattern with a trailling slash can be used for directory matching.
	        // To apply such pattern, we need to add a tralling slash to the path.
	        if (!isMatched && isDirectory) {
	            return utils$3.pattern.matchAny(filepath + '/', patternsRe);
	        }
	        return isMatched;
	    }
	}
	entry$1.default = EntryFilter;

	var error = {};

	Object.defineProperty(error, "__esModule", { value: true });
	const utils$2 = utils$k;
	class ErrorFilter {
	    constructor(_settings) {
	        this._settings = _settings;
	    }
	    getFilter() {
	        return (error) => this._isNonFatalError(error);
	    }
	    _isNonFatalError(error) {
	        return utils$2.errno.isEnoentCodeError(error) || this._settings.suppressErrors;
	    }
	}
	error.default = ErrorFilter;

	var entry = {};

	Object.defineProperty(entry, "__esModule", { value: true });
	const utils$1 = utils$k;
	class EntryTransformer {
	    constructor(_settings) {
	        this._settings = _settings;
	    }
	    getTransformer() {
	        return (entry) => this._transform(entry);
	    }
	    _transform(entry) {
	        let filepath = entry.path;
	        if (this._settings.absolute) {
	            filepath = utils$1.path.makeAbsolute(this._settings.cwd, filepath);
	            filepath = utils$1.path.unixify(filepath);
	        }
	        if (this._settings.markDirectories && entry.dirent.isDirectory()) {
	            filepath += '/';
	        }
	        if (!this._settings.objectMode) {
	            return filepath;
	        }
	        return Object.assign(Object.assign({}, entry), { path: filepath });
	    }
	}
	entry.default = EntryTransformer;

	Object.defineProperty(provider, "__esModule", { value: true });
	const path = require$$0$8;
	const deep_1 = deep;
	const entry_1 = entry$1;
	const error_1 = error;
	const entry_2 = entry;
	class Provider {
	    constructor(_settings) {
	        this._settings = _settings;
	        this.errorFilter = new error_1.default(this._settings);
	        this.entryFilter = new entry_1.default(this._settings, this._getMicromatchOptions());
	        this.deepFilter = new deep_1.default(this._settings, this._getMicromatchOptions());
	        this.entryTransformer = new entry_2.default(this._settings);
	    }
	    _getRootDirectory(task) {
	        return path.resolve(this._settings.cwd, task.base);
	    }
	    _getReaderOptions(task) {
	        const basePath = task.base === '.' ? '' : task.base;
	        return {
	            basePath,
	            pathSegmentSeparator: '/',
	            concurrency: this._settings.concurrency,
	            deepFilter: this.deepFilter.getFilter(basePath, task.positive, task.negative),
	            entryFilter: this.entryFilter.getFilter(task.positive, task.negative),
	            errorFilter: this.errorFilter.getFilter(),
	            followSymbolicLinks: this._settings.followSymbolicLinks,
	            fs: this._settings.fs,
	            stats: this._settings.stats,
	            throwErrorOnBrokenSymbolicLink: this._settings.throwErrorOnBrokenSymbolicLink,
	            transform: this.entryTransformer.getTransformer()
	        };
	    }
	    _getMicromatchOptions() {
	        return {
	            dot: this._settings.dot,
	            matchBase: this._settings.baseNameMatch,
	            nobrace: !this._settings.braceExpansion,
	            nocase: !this._settings.caseSensitiveMatch,
	            noext: !this._settings.extglob,
	            noglobstar: !this._settings.globstar,
	            posix: true,
	            strictSlashes: false
	        };
	    }
	}
	provider.default = Provider;

	Object.defineProperty(async$7, "__esModule", { value: true });
	const async_1$1 = async$6;
	const provider_1$2 = provider;
	class ProviderAsync extends provider_1$2.default {
	    constructor() {
	        super(...arguments);
	        this._reader = new async_1$1.default(this._settings);
	    }
	    async read(task) {
	        const root = this._getRootDirectory(task);
	        const options = this._getReaderOptions(task);
	        const entries = await this.api(root, task, options);
	        return entries.map((entry) => options.transform(entry));
	    }
	    api(root, task, options) {
	        if (task.dynamic) {
	            return this._reader.dynamic(root, options);
	        }
	        return this._reader.static(task.patterns, options);
	    }
	}
	async$7.default = ProviderAsync;

	var stream = {};

	Object.defineProperty(stream, "__esModule", { value: true });
	const stream_1$1 = require$$0$a;
	const stream_2 = stream$1;
	const provider_1$1 = provider;
	class ProviderStream extends provider_1$1.default {
	    constructor() {
	        super(...arguments);
	        this._reader = new stream_2.default(this._settings);
	    }
	    read(task) {
	        const root = this._getRootDirectory(task);
	        const options = this._getReaderOptions(task);
	        const source = this.api(root, task, options);
	        const destination = new stream_1$1.Readable({ objectMode: true, read: () => { } });
	        source
	            .once('error', (error) => destination.emit('error', error))
	            .on('data', (entry) => destination.emit('data', options.transform(entry)))
	            .once('end', () => destination.emit('end'));
	        destination
	            .once('close', () => source.destroy());
	        return destination;
	    }
	    api(root, task, options) {
	        if (task.dynamic) {
	            return this._reader.dynamic(root, options);
	        }
	        return this._reader.static(task.patterns, options);
	    }
	}
	stream.default = ProviderStream;

	var sync$1 = {};

	var sync = {};

	Object.defineProperty(sync, "__esModule", { value: true });
	const fsStat = out$1;
	const fsWalk = out$3;
	const reader_1 = reader;
	class ReaderSync extends reader_1.default {
	    constructor() {
	        super(...arguments);
	        this._walkSync = fsWalk.walkSync;
	        this._statSync = fsStat.statSync;
	    }
	    dynamic(root, options) {
	        return this._walkSync(root, options);
	    }
	    static(patterns, options) {
	        const entries = [];
	        for (const pattern of patterns) {
	            const filepath = this._getFullEntryPath(pattern);
	            const entry = this._getEntry(filepath, pattern, options);
	            if (entry === null || !options.entryFilter(entry)) {
	                continue;
	            }
	            entries.push(entry);
	        }
	        return entries;
	    }
	    _getEntry(filepath, pattern, options) {
	        try {
	            const stats = this._getStat(filepath);
	            return this._makeEntry(stats, pattern);
	        }
	        catch (error) {
	            if (options.errorFilter(error)) {
	                return null;
	            }
	            throw error;
	        }
	    }
	    _getStat(filepath) {
	        return this._statSync(filepath, this._fsStatSettings);
	    }
	}
	sync.default = ReaderSync;

	Object.defineProperty(sync$1, "__esModule", { value: true });
	const sync_1$1 = sync;
	const provider_1 = provider;
	class ProviderSync extends provider_1.default {
	    constructor() {
	        super(...arguments);
	        this._reader = new sync_1$1.default(this._settings);
	    }
	    read(task) {
	        const root = this._getRootDirectory(task);
	        const options = this._getReaderOptions(task);
	        const entries = this.api(root, task, options);
	        return entries.map(options.transform);
	    }
	    api(root, task, options) {
	        if (task.dynamic) {
	            return this._reader.dynamic(root, options);
	        }
	        return this._reader.static(task.patterns, options);
	    }
	}
	sync$1.default = ProviderSync;

	var settings = {};

	(function (exports) {
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.DEFAULT_FILE_SYSTEM_ADAPTER = void 0;
		const fs = require$$0$6;
		const os = require$$2;
		/**
		 * The `os.cpus` method can return zero. We expect the number of cores to be greater than zero.
		 * https://github.com/nodejs/node/blob/7faeddf23a98c53896f8b574a6e66589e8fb1eb8/lib/os.js#L106-L107
		 */
		const CPU_COUNT = Math.max(os.cpus().length, 1);
		exports.DEFAULT_FILE_SYSTEM_ADAPTER = {
		    lstat: fs.lstat,
		    lstatSync: fs.lstatSync,
		    stat: fs.stat,
		    statSync: fs.statSync,
		    readdir: fs.readdir,
		    readdirSync: fs.readdirSync
		};
		class Settings {
		    constructor(_options = {}) {
		        this._options = _options;
		        this.absolute = this._getValue(this._options.absolute, false);
		        this.baseNameMatch = this._getValue(this._options.baseNameMatch, false);
		        this.braceExpansion = this._getValue(this._options.braceExpansion, true);
		        this.caseSensitiveMatch = this._getValue(this._options.caseSensitiveMatch, true);
		        this.concurrency = this._getValue(this._options.concurrency, CPU_COUNT);
		        this.cwd = this._getValue(this._options.cwd, process.cwd());
		        this.deep = this._getValue(this._options.deep, Infinity);
		        this.dot = this._getValue(this._options.dot, false);
		        this.extglob = this._getValue(this._options.extglob, true);
		        this.followSymbolicLinks = this._getValue(this._options.followSymbolicLinks, true);
		        this.fs = this._getFileSystemMethods(this._options.fs);
		        this.globstar = this._getValue(this._options.globstar, true);
		        this.ignore = this._getValue(this._options.ignore, []);
		        this.markDirectories = this._getValue(this._options.markDirectories, false);
		        this.objectMode = this._getValue(this._options.objectMode, false);
		        this.onlyDirectories = this._getValue(this._options.onlyDirectories, false);
		        this.onlyFiles = this._getValue(this._options.onlyFiles, true);
		        this.stats = this._getValue(this._options.stats, false);
		        this.suppressErrors = this._getValue(this._options.suppressErrors, false);
		        this.throwErrorOnBrokenSymbolicLink = this._getValue(this._options.throwErrorOnBrokenSymbolicLink, false);
		        this.unique = this._getValue(this._options.unique, true);
		        if (this.onlyDirectories) {
		            this.onlyFiles = false;
		        }
		        if (this.stats) {
		            this.objectMode = true;
		        }
		    }
		    _getValue(option, value) {
		        return option === undefined ? value : option;
		    }
		    _getFileSystemMethods(methods = {}) {
		        return Object.assign(Object.assign({}, exports.DEFAULT_FILE_SYSTEM_ADAPTER), methods);
		    }
		}
		exports.default = Settings; 
	} (settings));

	const taskManager = tasks;
	const patternManager = patterns;
	const async_1 = async$7;
	const stream_1 = stream;
	const sync_1 = sync$1;
	const settings_1 = settings;
	const utils = utils$k;
	async function FastGlob(source, options) {
	    assertPatternsInput(source);
	    const works = getWorks(source, async_1.default, options);
	    const result = await Promise.all(works);
	    return utils.array.flatten(result);
	}
	// https://github.com/typescript-eslint/typescript-eslint/issues/60
	// eslint-disable-next-line no-redeclare
	(function (FastGlob) {
	    function sync(source, options) {
	        assertPatternsInput(source);
	        const works = getWorks(source, sync_1.default, options);
	        return utils.array.flatten(works);
	    }
	    FastGlob.sync = sync;
	    function stream(source, options) {
	        assertPatternsInput(source);
	        const works = getWorks(source, stream_1.default, options);
	        /**
	         * The stream returned by the provider cannot work with an asynchronous iterator.
	         * To support asynchronous iterators, regardless of the number of tasks, we always multiplex streams.
	         * This affects performance (+25%). I don't see best solution right now.
	         */
	        return utils.stream.merge(works);
	    }
	    FastGlob.stream = stream;
	    function generateTasks(source, options) {
	        assertPatternsInput(source);
	        const patterns = patternManager.transform([].concat(source));
	        const settings = new settings_1.default(options);
	        return taskManager.generate(patterns, settings);
	    }
	    FastGlob.generateTasks = generateTasks;
	    function isDynamicPattern(source, options) {
	        assertPatternsInput(source);
	        const settings = new settings_1.default(options);
	        return utils.pattern.isDynamicPattern(source, settings);
	    }
	    FastGlob.isDynamicPattern = isDynamicPattern;
	    function escapePath(source) {
	        assertPatternsInput(source);
	        return utils.path.escape(source);
	    }
	    FastGlob.escapePath = escapePath;
	})(FastGlob || (FastGlob = {}));
	function getWorks(source, _Provider, options) {
	    const patterns = patternManager.transform([].concat(source));
	    const settings = new settings_1.default(options);
	    const tasks = taskManager.generate(patterns, settings);
	    const provider = new _Provider(settings);
	    return tasks.map(provider.read, provider);
	}
	function assertPatternsInput(input) {
	    const source = [].concat(input);
	    const isValidSource = source.every((item) => utils.string.isString(item) && !utils.string.isEmpty(item));
	    if (!isValidSource) {
	        throw new TypeError('Patterns must be a string (non empty) or an array of strings');
	    }
	}
	var out = FastGlob;

	/**
	 * The base implementation of `_.findIndex` and `_.findLastIndex` without
	 * support for iteratee shorthands.
	 *
	 * @private
	 * @param {Array} array The array to inspect.
	 * @param {Function} predicate The function invoked per iteration.
	 * @param {number} fromIndex The index to search from.
	 * @param {boolean} [fromRight] Specify iterating from right to left.
	 * @returns {number} Returns the index of the matched value, else `-1`.
	 */

	function baseFindIndex$1(array, predicate, fromIndex, fromRight) {
	  var length = array.length,
	      index = fromIndex + (fromRight ? 1 : -1);

	  while ((fromRight ? index-- : ++index < length)) {
	    if (predicate(array[index], index, array)) {
	      return index;
	    }
	  }
	  return -1;
	}

	var _baseFindIndex = baseFindIndex$1;

	/**
	 * The base implementation of `_.isNaN` without support for number objects.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
	 */

	function baseIsNaN$1(value) {
	  return value !== value;
	}

	var _baseIsNaN = baseIsNaN$1;

	/**
	 * A specialized version of `_.indexOf` which performs strict equality
	 * comparisons of values, i.e. `===`.
	 *
	 * @private
	 * @param {Array} array The array to inspect.
	 * @param {*} value The value to search for.
	 * @param {number} fromIndex The index to search from.
	 * @returns {number} Returns the index of the matched value, else `-1`.
	 */

	function strictIndexOf$1(array, value, fromIndex) {
	  var index = fromIndex - 1,
	      length = array.length;

	  while (++index < length) {
	    if (array[index] === value) {
	      return index;
	    }
	  }
	  return -1;
	}

	var _strictIndexOf = strictIndexOf$1;

	var baseFindIndex = _baseFindIndex,
	    baseIsNaN = _baseIsNaN,
	    strictIndexOf = _strictIndexOf;

	/**
	 * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
	 *
	 * @private
	 * @param {Array} array The array to inspect.
	 * @param {*} value The value to search for.
	 * @param {number} fromIndex The index to search from.
	 * @returns {number} Returns the index of the matched value, else `-1`.
	 */
	function baseIndexOf$1(array, value, fromIndex) {
	  return value === value
	    ? strictIndexOf(array, value, fromIndex)
	    : baseFindIndex(array, baseIsNaN, fromIndex);
	}

	var _baseIndexOf = baseIndexOf$1;

	var baseIndexOf = _baseIndexOf;

	/**
	 * A specialized version of `_.includes` for arrays without support for
	 * specifying an index to search from.
	 *
	 * @private
	 * @param {Array} [array] The array to inspect.
	 * @param {*} target The value to search for.
	 * @returns {boolean} Returns `true` if `target` is found, else `false`.
	 */
	function arrayIncludes$1(array, value) {
	  var length = array == null ? 0 : array.length;
	  return !!length && baseIndexOf(array, value, 0) > -1;
	}

	var _arrayIncludes = arrayIncludes$1;

	/**
	 * This function is like `arrayIncludes` except that it accepts a comparator.
	 *
	 * @private
	 * @param {Array} [array] The array to inspect.
	 * @param {*} target The value to search for.
	 * @param {Function} comparator The comparator invoked per element.
	 * @returns {boolean} Returns `true` if `target` is found, else `false`.
	 */

	function arrayIncludesWith$1(array, value, comparator) {
	  var index = -1,
	      length = array == null ? 0 : array.length;

	  while (++index < length) {
	    if (comparator(value, array[index])) {
	      return true;
	    }
	  }
	  return false;
	}

	var _arrayIncludesWith = arrayIncludesWith$1;

	/**
	 * This method returns `undefined`.
	 *
	 * @static
	 * @memberOf _
	 * @since 2.3.0
	 * @category Util
	 * @example
	 *
	 * _.times(2, _.noop);
	 * // => [undefined, undefined]
	 */

	function noop$2() {
	  // No operation performed.
	}

	var noop_1 = noop$2;

	var Set$1 = _Set,
	    noop$1 = noop_1,
	    setToArray$1 = _setToArray;

	/** Used as references for various `Number` constants. */
	var INFINITY = 1 / 0;

	/**
	 * Creates a set object of `values`.
	 *
	 * @private
	 * @param {Array} values The values to add to the set.
	 * @returns {Object} Returns the new set.
	 */
	var createSet$1 = !(Set$1 && (1 / setToArray$1(new Set$1([,-0]))[1]) == INFINITY) ? noop$1 : function(values) {
	  return new Set$1(values);
	};

	var _createSet = createSet$1;

	var SetCache = _SetCache,
	    arrayIncludes = _arrayIncludes,
	    arrayIncludesWith = _arrayIncludesWith,
	    cacheHas = _cacheHas,
	    createSet = _createSet,
	    setToArray = _setToArray;

	/** Used as the size to enable large array optimizations. */
	var LARGE_ARRAY_SIZE = 200;

	/**
	 * The base implementation of `_.uniqBy` without support for iteratee shorthands.
	 *
	 * @private
	 * @param {Array} array The array to inspect.
	 * @param {Function} [iteratee] The iteratee invoked per element.
	 * @param {Function} [comparator] The comparator invoked per element.
	 * @returns {Array} Returns the new duplicate free array.
	 */
	function baseUniq$1(array, iteratee, comparator) {
	  var index = -1,
	      includes = arrayIncludes,
	      length = array.length,
	      isCommon = true,
	      result = [],
	      seen = result;

	  if (comparator) {
	    isCommon = false;
	    includes = arrayIncludesWith;
	  }
	  else if (length >= LARGE_ARRAY_SIZE) {
	    var set = iteratee ? null : createSet(array);
	    if (set) {
	      return setToArray(set);
	    }
	    isCommon = false;
	    includes = cacheHas;
	    seen = new SetCache;
	  }
	  else {
	    seen = iteratee ? [] : result;
	  }
	  outer:
	  while (++index < length) {
	    var value = array[index],
	        computed = iteratee ? iteratee(value) : value;

	    value = (comparator || value !== 0) ? value : 0;
	    if (isCommon && computed === computed) {
	      var seenIndex = seen.length;
	      while (seenIndex--) {
	        if (seen[seenIndex] === computed) {
	          continue outer;
	        }
	      }
	      if (iteratee) {
	        seen.push(computed);
	      }
	      result.push(value);
	    }
	    else if (!includes(seen, computed, comparator)) {
	      if (seen !== result) {
	        seen.push(computed);
	      }
	      result.push(value);
	    }
	  }
	  return result;
	}

	var _baseUniq = baseUniq$1;

	var baseUniq = _baseUniq;

	/**
	 * Creates a duplicate-free version of an array, using
	 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	 * for equality comparisons, in which only the first occurrence of each element
	 * is kept. The order of result values is determined by the order they occur
	 * in the array.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Array
	 * @param {Array} array The array to inspect.
	 * @returns {Array} Returns the new duplicate free array.
	 * @example
	 *
	 * _.uniq([2, 1, 2]);
	 * // => [2, 1]
	 */
	function uniq$1(array) {
	  return (array && array.length) ? baseUniq(array) : [];
	}

	var uniq_1 = uniq$1;

	var __create$3 = Object.create;
	var __defProp$7 = Object.defineProperty;
	var __getOwnPropDesc$7 = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames$7 = Object.getOwnPropertyNames;
	var __getProtoOf$3 = Object.getPrototypeOf;
	var __hasOwnProp$7 = Object.prototype.hasOwnProperty;
	var __export$7 = (target, all) => {
	  for (var name in all)
	    __defProp$7(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps$7 = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames$7(from))
	      if (!__hasOwnProp$7.call(to, key) && key !== except)
	        __defProp$7(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc$7(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toESM$3 = (mod, isNodeMode, target) => (target = mod != null ? __create$3(__getProtoOf$3(mod)) : {}, __copyProps$7(
	  // If the importer is in node compatibility mode or this is not an ESM
	  // file that has been converted to a CommonJS file using a Babel-
	  // compatible transform (i.e. "__esModule" has not been set), then set
	  // "default" to the CommonJS "module.exports" for node compatibility.
	  isNodeMode || !mod || !mod.__esModule ? __defProp$7(target, "default", { value: mod, enumerable: true }) : target,
	  mod
	));
	var __toCommonJS$7 = (mod) => __copyProps$7(__defProp$7({}, "__esModule", { value: true }), mod);
	var import_models_exports = {};
	__export$7(import_models_exports, {
	  importModels: () => importModels
	});
	var importModels_1 = __toCommonJS$7(import_models_exports);
	var import_fast_glob = __toESM$3(out);
	var import_uniq = __toESM$3(uniq_1);
	var import_model_utils = requireModelUtils();
	async function importModels(globPaths, modelMatch) {
	  if (Array.isArray(globPaths)) {
	    const promises2 = [];
	    for (const globPath of globPaths) {
	      promises2.push(importModels(globPath, modelMatch));
	    }
	    return (0, import_uniq.default)((await Promise.all(promises2)).flat(1));
	  }
	  const promises = [];
	  for (const path of await (0, import_fast_glob.default)(globPaths)) {
	    promises.push(importModelNoGlob(path, modelMatch));
	  }
	  return (0, import_uniq.default)((await Promise.all(promises)).flat(1));
	}
	async function importModelNoGlob(path, modelMatch) {
	  const module2 = await import(path);
	  return Object.keys(module2).filter((exportName) => {
	    if (!(0, import_model_utils.isModelStatic)(module2[exportName])) {
	      return false;
	    }
	    if (modelMatch) {
	      return modelMatch(path, exportName, module2[exportName]);
	    }
	    return true;
	  }).map((exportName) => module2[exportName]);
	}

	var __create$2 = Object.create;
	var __defProp$6 = Object.defineProperty;
	var __getOwnPropDesc$6 = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames$6 = Object.getOwnPropertyNames;
	var __getProtoOf$2 = Object.getPrototypeOf;
	var __hasOwnProp$6 = Object.prototype.hasOwnProperty;
	var __export$6 = (target, all) => {
	  for (var name in all)
	    __defProp$6(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps$6 = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames$6(from))
	      if (!__hasOwnProp$6.call(to, key) && key !== except)
	        __defProp$6(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc$6(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toESM$2 = (mod, isNodeMode, target) => (target = mod != null ? __create$2(__getProtoOf$2(mod)) : {}, __copyProps$6(
	  // If the importer is in node compatibility mode or this is not an ESM
	  // file that has been converted to a CommonJS file using a Babel-
	  // compatible transform (i.e. "__esModule" has not been set), then set
	  // "default" to the CommonJS "module.exports" for node compatibility.
	  isNodeMode || !mod || !mod.__esModule ? __defProp$6(target, "default", { value: mod, enumerable: true }) : target,
	  mod
	));
	var __toCommonJS$6 = (mod) => __copyProps$6(__defProp$6({}, "__esModule", { value: true }), mod);
	var deferrable_exports = {};
	__export$6(deferrable_exports, {
	  ConstraintChecking: () => ConstraintChecking,
	  Deferrable: () => Deferrable
	});
	var deferrable = __toCommonJS$6(deferrable_exports);
	var import_isEqual = __toESM$2(isEqual_1);
	var import_class_to_invokable = classToInvokable_1;
	var import_object$1 = object$1;
	var Deferrable = /* @__PURE__ */ ((Deferrable2) => {
	  Deferrable2["INITIALLY_DEFERRED"] = "INITIALLY_DEFERRED";
	  Deferrable2["INITIALLY_IMMEDIATE"] = "INITIALLY_IMMEDIATE";
	  Deferrable2["NOT"] = "NOT";
	  return Deferrable2;
	})(Deferrable || {});
	class ConstraintChecking {
	  toString() {
	    return this.constructor.name;
	  }
	  isEqual(_other) {
	    throw new Error("isEqual implementation missing");
	  }
	  static toString() {
	    return this.name;
	  }
	  get constraints() {
	    throw new Error("constraints getter implementation missing");
	  }
	  /**
	   * Will trigger an additional query at the beginning of a
	   * transaction which sets the constraints to deferred.
	   */
	  static DEFERRED = (0, import_class_to_invokable.classToInvokable)(class DEFERRED extends ConstraintChecking {
	    #constraints;
	    /**
	     * @param constraints An array of constraint names. Will defer all constraints by default.
	     */
	    constructor(constraints = import_object$1.EMPTY_ARRAY) {
	      super();
	      this.#constraints = Object.freeze([...constraints]);
	    }
	    isEqual(other) {
	      return other instanceof DEFERRED && (0, import_isEqual.default)(this.#constraints, other.#constraints);
	    }
	    get constraints() {
	      return this.#constraints;
	    }
	  });
	  /**
	   * Will trigger an additional query at the beginning of a
	   * transaction which sets the constraints to immediately.
	   */
	  static IMMEDIATE = (0, import_class_to_invokable.classToInvokable)(class IMMEDIATE extends ConstraintChecking {
	    #constraints;
	    /**
	     * @param constraints An array of constraint names. Will defer all constraints by default.
	     */
	    constructor(constraints = import_object$1.EMPTY_ARRAY) {
	      super();
	      this.#constraints = Object.freeze([...constraints]);
	    }
	    isEqual(other) {
	      return other instanceof IMMEDIATE && (0, import_isEqual.default)(this.#constraints, other.#constraints);
	    }
	    get constraints() {
	      return this.#constraints;
	    }
	  });
	}

	var toposort = {exports: {}};

	/****
	 * The MIT License (MIT)
	 *
	 * Copyright (c) 2015 Gustavo Henke and Aaron Trent
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in all
	 * copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
	 * SOFTWARE.
	 *
	 ****/

	(function (module, exports) {
		(function( global, factory ) {
		    {
		        factory( exports, module );
		    }
		})( commonjsGlobal, function( exports, module ) {

		    function _classCallCheck( instance, Constructor ) {
		        if( !(instance instanceof Constructor) ) {
		            throw new TypeError( "Cannot call a class as a function" );
		        }
		    }

		    var Toposort = (function() {
		        function Toposort() {
		            _classCallCheck( this, Toposort );

		            this.edges = [];
		            this.Toposort = Toposort;
		        }

		        /**
		         * Adds dependency edges.
		         *
		         * @since   0.1.0
		         * @param   {String} item               An dependent name. Must be an string and not empty
		         * @param   {String[]|String} [deps]    An dependency or array of dependencies
		         * @returns {Toposort}                  The Toposort instance
		         */

		        Toposort.prototype.add = function add( item, deps ) {
		            if( typeof item !== "string" || !item ) {
		                throw new TypeError( "Dependent name must be given as a not empty string" );
		            }

		            deps = Array.isArray( deps ) ? deps : [deps];

		            if( deps.length > 0 ) {
		                for( var _iterator = deps, _isArray = Array.isArray( _iterator ), _i = 0, _iterator = _isArray ?
		                                                                                                      _iterator :
		                                                                                                      _iterator[Symbol.iterator](); ; ) {
		                    var _ref;

		                    if( _isArray ) {
		                        if( _i >= _iterator.length ) {
		                            break;
		                        }
		                        _ref = _iterator[_i++];
		                    } else {
		                        _i = _iterator.next();
		                        if( _i.done ) {
		                            break;
		                        }
		                        _ref = _i.value;
		                    }

		                    var dep = _ref;

		                    if( typeof dep !== "string" || !dep ) {
		                        throw new TypeError( "Dependency name must be given as a not empty string" );
		                    }

		                    this.edges.push( [item, dep] );
		                }
		            } else {
		                this.edges.push( [item] );
		            }

		            return this;
		        };

		        /**
		         * Runs the toposorting and return an ordered array of strings
		         *
		         * @since   0.1.0
		         * @returns {String[]}  The list of items topologically sorted.
		         */

		        Toposort.prototype.sort = function sort() {
		            var _this = this;

		            var nodes = [];

		            //accumulate unique nodes into a large list
		            for( var _iterator2 = this.edges, _isArray2 = Array.isArray( _iterator2 ), _i2 = 0, _iterator2 = _isArray2 ?
		                                                                                                             _iterator2 :
		                                                                                                             _iterator2[Symbol.iterator](); ; ) {
		                var _ref2;

		                if( _isArray2 ) {
		                    if( _i2 >= _iterator2.length ) {
		                        break;
		                    }
		                    _ref2 = _iterator2[_i2++];
		                } else {
		                    _i2 = _iterator2.next();
		                    if( _i2.done ) {
		                        break;
		                    }
		                    _ref2 = _i2.value;
		                }

		                var edge = _ref2;

		                for( var _iterator3 = edge, _isArray3 = Array.isArray( _iterator3 ), _i3 = 0, _iterator3 = _isArray3 ?
		                                                                                                           _iterator3 :
		                                                                                                           _iterator3[Symbol.iterator](); ; ) {
		                    var _ref3;

		                    if( _isArray3 ) {
		                        if( _i3 >= _iterator3.length ) {
		                            break;
		                        }
		                        _ref3 = _iterator3[_i3++];
		                    } else {
		                        _i3 = _iterator3.next();
		                        if( _i3.done ) {
		                            break;
		                        }
		                        _ref3 = _i3.value;
		                    }

		                    var node = _ref3;

		                    if( nodes.indexOf( node ) === -1 ) {
		                        nodes.push( node );
		                    }
		                }
		            }

		            //initialize the placement of nodes into the sorted array at the end
		            var place = nodes.length;

		            //initialize the sorted array with the same length as the unique nodes array
		            var sorted = new Array( nodes.length );

		            //define a visitor function that recursively traverses dependencies.
		            var visit = function visit( node, predecessors ) {
		                //check if a node is dependent of itself
		                if( predecessors.length !== 0 && predecessors.indexOf( node ) !== -1 ) {
		                    throw new Error( "Cyclic dependency found. " + node + " is dependent of itself.\nDependency chain: "
		                                     + predecessors.join( " -> " ) + " => " + node );
		                }

		                var index = nodes.indexOf( node );

		                //if the node still exists, traverse its dependencies
		                if( index !== -1 ) {
		                    var copy = false;

		                    //mark the node as false to exclude it from future iterations
		                    nodes[index] = false;

		                    //loop through all edges and follow dependencies of the current node
		                    for( var _iterator4 = _this.edges, _isArray4 = Array.isArray( _iterator4 ), _i4 = 0, _iterator4 = _isArray4 ?
		                                                                                                                      _iterator4 :
		                                                                                                                      _iterator4[Symbol.iterator](); ; ) {
		                        var _ref4;

		                        if( _isArray4 ) {
		                            if( _i4 >= _iterator4.length ) {
		                                break;
		                            }
		                            _ref4 = _iterator4[_i4++];
		                        } else {
		                            _i4 = _iterator4.next();
		                            if( _i4.done ) {
		                                break;
		                            }
		                            _ref4 = _i4.value;
		                        }

		                        var edge = _ref4;

		                        if( edge[0] === node ) {
		                            //lazily create a copy of predecessors with the current node concatenated onto it
		                            copy = copy || predecessors.concat( [node] );

		                            //recurse to node dependencies
		                            visit( edge[1], copy );
		                        }
		                    }

		                    //add the node to the next place in the sorted array
		                    sorted[--place] = node;
		                }
		            };

		            for( var i = 0; i < nodes.length; i++ ) {
		                var node = nodes[i];

		                //ignore nodes that have been excluded
		                if( node !== false ) {
		                    //mark the node as false to exclude it from future iterations
		                    nodes[i] = false;

		                    //loop through all edges and follow dependencies of the current node
		                    for( var _iterator5 = this.edges, _isArray5 = Array.isArray( _iterator5 ), _i5 = 0, _iterator5 = _isArray5 ?
		                                                                                                                     _iterator5 :
		                                                                                                                     _iterator5[Symbol.iterator](); ; ) {
		                        var _ref5;

		                        if( _isArray5 ) {
		                            if( _i5 >= _iterator5.length ) {
		                                break;
		                            }
		                            _ref5 = _iterator5[_i5++];
		                        } else {
		                            _i5 = _iterator5.next();
		                            if( _i5.done ) {
		                                break;
		                            }
		                            _ref5 = _i5.value;
		                        }

		                        var edge = _ref5;

		                        if( edge[0] === node ) {
		                            //recurse to node dependencies
		                            visit( edge[1], [node] );
		                        }
		                    }

		                    //add the node to the next place in the sorted array
		                    sorted[--place] = node;
		                }
		            }

		            return sorted;
		        };

		        /**
		         * Clears edges
		         *
		         * @since   0.4.0
		         * @returns {Toposort}                  The Toposort instance
		         */

		        Toposort.prototype.clear = function clear() {
		            this.edges = [];

		            return this;
		        };

		        return Toposort;
		    })();

		    module.exports = Toposort;
		} ); 
	} (toposort, toposort.exports));

	var toposortExports = toposort.exports;

	var toposortClass = toposortExports;

	var __defProp$5 = Object.defineProperty;
	var __getOwnPropDesc$5 = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames$5 = Object.getOwnPropertyNames;
	var __hasOwnProp$5 = Object.prototype.hasOwnProperty;
	var __export$5 = (target, all) => {
	  for (var name in all)
	    __defProp$5(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps$5 = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames$5(from))
	      if (!__hasOwnProp$5.call(to, key) && key !== except)
	        __defProp$5(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc$5(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS$5 = (mod) => __copyProps$5(__defProp$5({}, "__esModule", { value: true }), mod);
	var model_manager_exports = {};
	__export$5(model_manager_exports, {
	  ModelManager: () => ModelManager
	});
	var modelManager = __toCommonJS$5(model_manager_exports);
	const Toposort = toposortClass;
	const _$3 = lodashExports;
	class ModelManager {
	  constructor(sequelize) {
	    this.models = [];
	    this.sequelize = sequelize;
	  }
	  addModel(model) {
	    this.models.push(model);
	    this.sequelize.models[model.name] = model;
	    return model;
	  }
	  removeModel(modelToRemove) {
	    this.models = this.models.filter((model) => model.name !== modelToRemove.name);
	    delete this.sequelize.models[modelToRemove.name];
	  }
	  getModel(modelName) {
	    return this.models.find((model) => model.name === modelName);
	  }
	  findModel(callback) {
	    return this.models.find(callback);
	  }
	  hasModel(targetModel) {
	    return this.models.includes(targetModel);
	  }
	  get all() {
	    return this.models;
	  }
	  /**
	   * Returns an array that lists every model, sorted in order
	   * of foreign key references: The first model is a model that is depended upon,
	   * the last model is a model that is not depended upon.
	   *
	   * If there is a cyclic dependency, this returns null.
	   */
	  getModelsTopoSortedByForeignKey() {
	    const models = /* @__PURE__ */ new Map();
	    const sorter = new Toposort();
	    const queryGenerator = this.sequelize.queryInterface.queryGenerator;
	    for (const model of this.models) {
	      let deps = [];
	      const tableName = queryGenerator.quoteTable(model);
	      models.set(tableName, model);
	      const { attributes } = model.modelDefinition;
	      for (const attrName of attributes.keys()) {
	        const attribute = attributes.get(attrName);
	        if (!attribute.references) {
	          continue;
	        }
	        const dep = queryGenerator.quoteTable(attribute.references.table);
	        deps.push(dep);
	      }
	      deps = deps.filter((dep) => tableName !== dep);
	      sorter.add(tableName, deps);
	    }
	    let sorted;
	    try {
	      sorted = sorter.sort();
	    } catch (error) {
	      if (!error.message.startsWith("Cyclic dependency found.")) {
	        throw error;
	      }
	      return null;
	    }
	    return sorted.map((modelName) => {
	      return models.get(modelName);
	    }).filter(Boolean);
	  }
	  /**
	   * Iterate over Models in an order suitable for e.g. creating tables.
	   * Will take foreign key constraints into account so that dependencies are visited before dependents.
	   *
	   * @param {Function} iterator method to execute on each model
	   * @param {object} options
	   * @private
	   *
	   * @deprecated
	   */
	  forEachModel(iterator, options) {
	    const sortedModels = this.getModelsTopoSortedByForeignKey();
	    if (sortedModels == null) {
	      throw new Error("Cyclic dependency found.");
	    }
	    options = _$3.defaults(options || {}, {
	      reverse: true
	    });
	    if (options.reverse) {
	      sortedModels.reverse();
	    }
	    for (const model of sortedModels) {
	      iterator(model);
	    }
	  }
	}

	var __defProp$4 = Object.defineProperty;
	var __getOwnPropDesc$4 = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames$4 = Object.getOwnPropertyNames;
	var __hasOwnProp$4 = Object.prototype.hasOwnProperty;
	var __export$4 = (target, all) => {
	  for (var name in all)
	    __defProp$4(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps$4 = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames$4(from))
	      if (!__hasOwnProp$4.call(to, key) && key !== except)
	        __defProp$4(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc$4(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS$4 = (mod) => __copyProps$4(__defProp$4({}, "__esModule", { value: true }), mod);
	var table_hints_exports = {};
	__export$4(table_hints_exports, {
	  TableHints: () => TableHints
	});
	var tableHints = __toCommonJS$4(table_hints_exports);
	var TableHints = /* @__PURE__ */ ((TableHints2) => {
	  TableHints2["NOLOCK"] = "NOLOCK";
	  TableHints2["READUNCOMMITTED"] = "READUNCOMMITTED";
	  TableHints2["UPDLOCK"] = "UPDLOCK";
	  TableHints2["REPEATABLEREAD"] = "REPEATABLEREAD";
	  TableHints2["SERIALIZABLE"] = "SERIALIZABLE";
	  TableHints2["READCOMMITTED"] = "READCOMMITTED";
	  TableHints2["TABLOCK"] = "TABLOCK";
	  TableHints2["TABLOCKX"] = "TABLOCKX";
	  TableHints2["PAGLOCK"] = "PAGLOCK";
	  TableHints2["ROWLOCK"] = "ROWLOCK";
	  TableHints2["NOWAIT"] = "NOWAIT";
	  TableHints2["READPAST"] = "READPAST";
	  TableHints2["XLOCK"] = "XLOCK";
	  TableHints2["SNAPSHOT"] = "SNAPSHOT";
	  TableHints2["NOEXPAND"] = "NOEXPAND";
	  return TableHints2;
	})(TableHints || {});

	var __defProp$3 = Object.defineProperty;
	var __getOwnPropDesc$3 = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames$3 = Object.getOwnPropertyNames;
	var __hasOwnProp$3 = Object.prototype.hasOwnProperty;
	var __export$3 = (target, all) => {
	  for (var name in all)
	    __defProp$3(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps$3 = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames$3(from))
	      if (!__hasOwnProp$3.call(to, key) && key !== except)
	        __defProp$3(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc$3(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS$3 = (mod) => __copyProps$3(__defProp$3({}, "__esModule", { value: true }), mod);
	var index_hints_exports = {};
	__export$3(index_hints_exports, {
	  IndexHints: () => IndexHints
	});
	var indexHints = __toCommonJS$3(index_hints_exports);
	var IndexHints = /* @__PURE__ */ ((IndexHints2) => {
	  IndexHints2["USE"] = "USE";
	  IndexHints2["FORCE"] = "FORCE";
	  IndexHints2["IGNORE"] = "IGNORE";
	  return IndexHints2;
	})(IndexHints || {});

	var __create$1 = Object.create;
	var __defProp$2 = Object.defineProperty;
	var __getOwnPropDesc$2 = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames$2 = Object.getOwnPropertyNames;
	var __getProtoOf$1 = Object.getPrototypeOf;
	var __hasOwnProp$2 = Object.prototype.hasOwnProperty;
	var __export$2 = (target, all) => {
	  for (var name in all)
	    __defProp$2(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps$2 = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames$2(from))
	      if (!__hasOwnProp$2.call(to, key) && key !== except)
	        __defProp$2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc$2(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toESM$1 = (mod, isNodeMode, target) => (target = mod != null ? __create$1(__getProtoOf$1(mod)) : {}, __copyProps$2(
	  // If the importer is in node compatibility mode or this is not an ESM
	  // file that has been converted to a CommonJS file using a Babel-
	  // compatible transform (i.e. "__esModule" has not been set), then set
	  // "default" to the CommonJS "module.exports" for node compatibility.
	  isNodeMode || !mod || !mod.__esModule ? __defProp$2(target, "default", { value: mod, enumerable: true }) : target,
	  mod
	));
	var __toCommonJS$2 = (mod) => __copyProps$2(__defProp$2({}, "__esModule", { value: true }), mod);
	var query_interface_internal_exports = {};
	__export$2(query_interface_internal_exports, {
	  AbstractQueryInterfaceInternal: () => AbstractQueryInterfaceInternal
	});
	var queryInterfaceInternal = __toCommonJS$2(query_interface_internal_exports);
	var import_node_assert$1 = __toESM$1(require$$0$4);
	var import_query_types$1 = queryTypes;
	class AbstractQueryInterfaceInternal {
	  #sequelize;
	  #queryGenerator;
	  constructor(sequelize, queryGenerator) {
	    this.#sequelize = sequelize;
	    this.#queryGenerator = queryGenerator;
	  }
	  async fetchDatabaseVersionRaw(options) {
	    const out = await this.#sequelize.queryRaw(
	      this.#queryGenerator.versionQuery(),
	      { ...options, type: import_query_types$1.QueryTypes.SELECT, plain: true }
	    );
	    (0, import_node_assert$1.default)(out != null);
	    return out;
	  }
	}

	var __create = Object.create;
	var __defProp$1 = Object.defineProperty;
	var __getOwnPropDesc$1 = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames$1 = Object.getOwnPropertyNames;
	var __getProtoOf = Object.getPrototypeOf;
	var __hasOwnProp$1 = Object.prototype.hasOwnProperty;
	var __export$1 = (target, all) => {
	  for (var name in all)
	    __defProp$1(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps$1 = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames$1(from))
	      if (!__hasOwnProp$1.call(to, key) && key !== except)
	        __defProp$1(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc$1(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps$1(
	  // If the importer is in node compatibility mode or this is not an ESM
	  // file that has been converted to a CommonJS file using a Babel-
	  // compatible transform (i.e. "__esModule" has not been set), then set
	  // "default" to the CommonJS "module.exports" for node compatibility.
	  isNodeMode || !mod || !mod.__esModule ? __defProp$1(target, "default", { value: mod, enumerable: true }) : target,
	  mod
	));
	var __toCommonJS$1 = (mod) => __copyProps$1(__defProp$1({}, "__esModule", { value: true }), mod);
	var query_interface_typescript_exports = {};
	__export$1(query_interface_typescript_exports, {
	  AbstractQueryInterfaceTypeScript: () => AbstractQueryInterfaceTypeScript
	});
	var queryInterfaceTypescript$2 = __toCommonJS$1(query_interface_typescript_exports);
	var import_node_assert = __toESM(require$$0$4);
	var import_isEmpty = __toESM(requireIsEmpty());
	var import_errors = errors;
	var import_model_internals = requireModelInternals();
	var import_query_types = queryTypes;
	var import_deprecations = deprecations;
	var import_query_interface_internal = queryInterfaceInternal;
	class AbstractQueryInterfaceTypeScript {
	  sequelize;
	  queryGenerator;
	  #internalQueryInterface;
	  /**
	   * @param sequelize The sequelize instance.
	   * @param queryGenerator The query generator of the dialect used by the current Sequelize instance.
	   * @param internalQueryInterface The internal query interface to use.
	   *                               Defaults to a new instance of {@link AbstractQueryInterfaceInternal}.
	   *                               Your dialect may replace this with a custom implementation.
	   */
	  constructor(sequelize, queryGenerator, internalQueryInterface) {
	    this.sequelize = sequelize;
	    this.queryGenerator = queryGenerator;
	    this.#internalQueryInterface = internalQueryInterface ?? new import_query_interface_internal.AbstractQueryInterfaceInternal(sequelize, queryGenerator);
	  }
	  /**
	   * Returns the database version.
	   *
	   * @param options Query Options
	   */
	  async fetchDatabaseVersion(options) {
	    const payload = await this.#internalQueryInterface.fetchDatabaseVersionRaw(options);
	    (0, import_node_assert.default)(payload.version != null, "Expected the version query to produce an object that includes a `version` property.");
	    return payload.version;
	  }
	  /**
	   * Create a new database schema.
	   *
	   * **Note:** We define schemas as a namespace that can contain tables.
	   * In mysql and mariadb, this command will create what they call a database.
	   *
	   * @param schema Name of the schema
	   * @param options
	   */
	  async createSchema(schema, options) {
	    const sql = this.queryGenerator.createSchemaQuery(schema, options);
	    await this.sequelize.queryRaw(sql, options);
	  }
	  /**
	   * Drop a single schema
	   *
	   * **Note:** We define schemas as a namespace that can contain tables.
	   * In mysql and mariadb, this command will create what they call a database.
	   *
	   * @param schema Name of the schema
	   * @param options
	   */
	  async dropSchema(schema, options) {
	    const dropSchemaQuery = this.queryGenerator.dropSchemaQuery(schema);
	    let sql;
	    let queryRawOptions;
	    if (typeof dropSchemaQuery === "string") {
	      sql = dropSchemaQuery;
	      queryRawOptions = options;
	    } else {
	      sql = dropSchemaQuery.query;
	      queryRawOptions = { ...options, bind: dropSchemaQuery.bind };
	    }
	    await this.sequelize.queryRaw(sql, queryRawOptions);
	  }
	  /**
	   * Show all defined schemas
	   *
	   * **Note:** this is a schema in the [postgres sense of the word](http://www.postgresql.org/docs/9.1/static/ddl-schemas.html),
	   * not a database table. In mysql and mariadb, this will show all databases.
	   *
	   * @param options
	   *
	   * @returns list of schemas
	   */
	  async showAllSchemas(options) {
	    const showSchemasSql = this.queryGenerator.listSchemasQuery(options);
	    const queryRawOptions = {
	      ...options,
	      raw: true,
	      type: import_query_types.QueryTypes.SELECT
	    };
	    const schemaNames = await this.sequelize.queryRaw(showSchemasSql, queryRawOptions);
	    return schemaNames.flatMap((value) => value.schema_name ? value.schema_name : value);
	  }
	  /**
	   * Describe a table structure
	   *
	   * This method returns an array of hashes containing information about all attributes in the table.
	   *
	   * ```js
	   * {
	   *    name: {
	   *      type:         'VARCHAR(255)', // this will be 'CHARACTER VARYING' for pg!
	   *      allowNull:    true,
	   *      defaultValue: null
	   *    },
	   *    isBetaMember: {
	   *      type:         'TINYINT(1)', // this will be 'BOOLEAN' for pg!
	   *      allowNull:    false,
	   *      defaultValue: false
	   *    }
	   * }
	   * ```
	   *
	   * @param tableName
	   * @param options Query options
	   */
	  async describeTable(tableName, options) {
	    var _a;
	    const table = this.queryGenerator.extractTableDetails(tableName);
	    if (typeof options === "string") {
	      (0, import_deprecations.noSchemaParameter)();
	      table.schema = options;
	    }
	    if (typeof options === "object" && options !== null) {
	      if (options.schema) {
	        (0, import_deprecations.noSchemaParameter)();
	        table.schema = options.schema;
	      }
	      if (options.schemaDelimiter) {
	        (0, import_deprecations.noSchemaDelimiterParameter)();
	        table.delimiter = options.schemaDelimiter;
	      }
	    }
	    const sql = this.queryGenerator.describeTableQuery(table);
	    const queryOptions = { ...options, type: import_query_types.QueryTypes.DESCRIBE };
	    try {
	      const data = await this.sequelize.queryRaw(sql, queryOptions);
	      if ((0, import_isEmpty.default)(data)) {
	        throw new Error(`No description found for table ${table.tableName}${table.schema ? ` in schema ${table.schema}` : ""}. Check the table name and schema; remember, they _are_ case sensitive.`);
	      }
	      return data;
	    } catch (error) {
	      if (error instanceof import_errors.BaseError && ((_a = error.cause) == null ? void 0 : _a.code) === "ER_NO_SUCH_TABLE") {
	        throw new Error(`No description found for table ${table.tableName}${table.schema ? ` in schema ${table.schema}` : ""}. Check the table name and schema; remember, they _are_ case sensitive.`);
	      }
	      throw error;
	    }
	  }
	  /**
	   * Add a constraint to a table
	   *
	   * Available constraints:
	   * - UNIQUE
	   * - DEFAULT (MSSQL only)
	   * - CHECK (Not supported by MySQL)
	   * - FOREIGN KEY
	   * - PRIMARY KEY
	   *
	   * @example UNIQUE
	   * ```ts
	   * queryInterface.addConstraint('Users', {
	   *   fields: ['email'],
	   *   type: 'UNIQUE',
	   *   name: 'custom_unique_constraint_name'
	   * });
	   * ```
	   *
	   * @example CHECK
	   * ```ts
	   * queryInterface.addConstraint('Users', {
	   *   fields: ['roles'],
	   *   type: 'CHECK',
	   *   where: {
	   *      roles: ['user', 'admin', 'moderator', 'guest']
	   *   }
	   * });
	   * ```
	   *
	   * @example Default - MSSQL only
	   * ```ts
	   * queryInterface.addConstraint('Users', {
	   *    fields: ['roles'],
	   *    type: 'DEFAULT',
	   *    defaultValue: 'guest'
	   * });
	   * ```
	   *
	   * @example Primary Key
	   * ```ts
	   * queryInterface.addConstraint('Users', {
	   *    fields: ['username'],
	   *    type: 'PRIMARY KEY',
	   *    name: 'custom_primary_constraint_name'
	   * });
	   * ```
	   *
	   * @example Composite Primary Key
	   * ```ts
	   * queryInterface.addConstraint('Users', {
	   *    fields: ['first_name', 'last_name'],
	   *    type: 'PRIMARY KEY',
	   *    name: 'custom_primary_constraint_name'
	   * });
	   * ```
	   *
	   * @example Foreign Key
	   * ```ts
	   * queryInterface.addConstraint('Posts', {
	   *   fields: ['username'],
	   *   type: 'FOREIGN KEY',
	   *   name: 'custom_fkey_constraint_name',
	   *   references: { //Required field
	   *     table: 'target_table_name',
	   *     field: 'target_column_name'
	   *   },
	   *   onDelete: 'cascade',
	   *   onUpdate: 'cascade'
	   * });
	   * ```
	   *
	   * @example Composite Foreign Key
	   * ```ts
	   * queryInterface.addConstraint('TableName', {
	   *   fields: ['source_column_name', 'other_source_column_name'],
	   *   type: 'FOREIGN KEY',
	   *   name: 'custom_fkey_constraint_name',
	   *   references: { //Required field
	   *     table: 'target_table_name',
	   *     fields: ['target_column_name', 'other_target_column_name']
	   *   },
	   *   onDelete: 'cascade',
	   *   onUpdate: 'cascade'
	   * });
	   * ```
	   *
	   * @param tableName - Table name where you want to add a constraint
	   * @param options - An object to define the constraint name, type etc
	   */
	  async addConstraint(tableName, options) {
	    if (!options.fields) {
	      throw new Error("Fields must be specified through options.fields");
	    }
	    if (!options.type) {
	      throw new Error("Constraint type must be specified through options.type");
	    }
	    const sql = this.queryGenerator.addConstraintQuery(tableName, options);
	    await this.sequelize.queryRaw(sql, { ...options, raw: true, type: import_query_types.QueryTypes.RAW });
	  }
	  async deferConstraints(constraintChecking, options) {
	    (0, import_model_internals.setTransactionFromCls)(options ?? {}, this.sequelize);
	    if (!(options == null ? void 0 : options.transaction)) {
	      throw new Error("Missing transaction in deferConstraints option.");
	    }
	    const sql = this.queryGenerator.setConstraintCheckingQuery(constraintChecking);
	    await this.sequelize.queryRaw(sql, { ...options, raw: true, type: import_query_types.QueryTypes.RAW });
	  }
	  /**
	   * Remove a constraint from a table
	   *
	   * @param tableName -Table name to drop constraint from
	   * @param constraintName -Constraint name
	   * @param options -Query options
	   */
	  async removeConstraint(tableName, constraintName, options) {
	    const sql = this.queryGenerator.removeConstraintQuery(tableName, constraintName, options);
	    await this.sequelize.queryRaw(sql, { ...options, raw: true, type: import_query_types.QueryTypes.RAW });
	  }
	  async showConstraints(tableName, options) {
	    const sql = this.queryGenerator.showConstraintsQuery(tableName, options);
	    const rawConstraints = await this.sequelize.queryRaw(sql, { ...options, raw: true, type: import_query_types.QueryTypes.SHOWCONSTRAINTS });
	    const constraintMap = /* @__PURE__ */ new Map();
	    for (const rawConstraint of rawConstraints) {
	      const constraint = constraintMap.get(rawConstraint.constraintName);
	      if (constraint) {
	        rawConstraint.columnNames && constraint.columnNames.add(rawConstraint.columnNames);
	        rawConstraint.referencedColumnNames && constraint.referencedColumnNames.add(rawConstraint.referencedColumnNames);
	      } else {
	        constraintMap.set(rawConstraint.constraintName, {
	          ...rawConstraint,
	          columnNames: new Set(rawConstraint.columnNames ? [rawConstraint.columnNames] : []),
	          referencedColumnNames: new Set(rawConstraint.referencedColumnNames ? [rawConstraint.referencedColumnNames] : [])
	        });
	      }
	    }
	    return [...constraintMap.values()].map(({ columnNames, referencedColumnNames, ...constraint }) => ({
	      ...constraint,
	      columnNames: [...columnNames],
	      referencedColumnNames: [...referencedColumnNames]
	    }));
	  }
	  async withoutForeignKeyChecks(optionsOrCallback, maybeCallback) {
	    let options;
	    let callback;
	    if (typeof optionsOrCallback === "function") {
	      options = {};
	      callback = optionsOrCallback;
	    } else {
	      options = { ...optionsOrCallback };
	      callback = maybeCallback;
	    }
	    (0, import_model_internals.setTransactionFromCls)(options, this.sequelize);
	    if (options.connection) {
	      return this.#withoutForeignKeyChecks(options, callback);
	    }
	    return this.sequelize.withConnection(async (connection) => {
	      return this.#withoutForeignKeyChecks({ ...options, connection }, callback);
	    });
	  }
	  async #withoutForeignKeyChecks(options, cb) {
	    try {
	      await this.unsafeToggleForeignKeyChecks(false, options);
	      return await cb(options.connection);
	    } finally {
	      await this.unsafeToggleForeignKeyChecks(true, options);
	    }
	  }
	  /**
	   * Toggles foreign key checks.
	   * Don't forget to turn them back on, use {@link withoutForeignKeyChecks} to do this automatically.
	   *
	   * @param enable
	   * @param options
	   */
	  async unsafeToggleForeignKeyChecks(enable, options) {
	    await this.sequelize.queryRaw(this.queryGenerator.getToggleForeignKeyChecksQuery(enable), options);
	  }
	}

	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var query_interface_exports = {};
	__export(query_interface_exports, {
	  AbstractQueryInterface: () => AbstractQueryInterface
	});
	var queryInterface$8 = __toCommonJS(query_interface_exports);
	var import_iterators = requireIterators();
	var import_object = object$1;
	var import_sql = sql;
	var import_data_types = requireDataTypes$8();
	var import_query_interface_typescript = queryInterfaceTypescript$2;
	const _$2 = lodashExports;
	const DataTypes = dataTypes$8;
	const { Transaction } = transaction;
	const { QueryTypes } = queryTypes;
	class AbstractQueryInterface extends import_query_interface_typescript.AbstractQueryInterfaceTypeScript {
	  /**
	   * Create a database
	   *
	   * @param {string} database  Database name to create
	   * @param {object} [options] Query options
	   * @param {string} [options.charset] Database default character set, MYSQL only
	   * @param {string} [options.collate] Database default collation
	   * @param {string} [options.encoding] Database default character set, PostgreSQL only
	   * @param {string} [options.ctype] Database character classification, PostgreSQL only
	   * @param {string} [options.template] The name of the template from which to create the new database, PostgreSQL only
	   *
	   * @returns {Promise}
	   */
	  async createDatabase(database, options) {
	    options = options || {};
	    const sql = this.queryGenerator.createDatabaseQuery(database, options);
	    return await this.sequelize.queryRaw(sql, options);
	  }
	  /**
	   * Drop a database
	   *
	   * @param {string} database  Database name to drop
	   * @param {object} [options] Query options
	   *
	   * @returns {Promise}
	   */
	  async dropDatabase(database, options) {
	    const sql = this.queryGenerator.dropDatabaseQuery(database);
	    return await this.sequelize.queryRaw(sql, options);
	  }
	  async listDatabases(options) {
	    const sql = this.queryGenerator.listDatabasesQuery();
	    return await this.sequelize.queryRaw(sql, { ...options, type: QueryTypes.SELECT });
	  }
	  /**
	    * Drop all schemas
	    *
	    * @param {object} [options] Query options
	    *
	    * @returns {Promise}
	    */
	  async dropAllSchemas(options) {
	    options = options || {};
	    if (!this.queryGenerator.dialect.supports.schemas) {
	      return this.sequelize.drop(options);
	    }
	    const schemas = await this.showAllSchemas(options);
	    return Promise.all(schemas.map((schemaName) => this.dropSchema(schemaName, options)));
	  }
	  /**
	   * Create a table with given set of attributes
	   *
	   * ```js
	   * queryInterface.createTable(
	   *   'nameOfTheNewTable',
	   *   {
	   *     id: {
	   *       type: DataTypes.INTEGER,
	   *       primaryKey: true,
	   *       autoIncrement: true
	   *     },
	   *     createdAt: {
	   *       type: DataTypes.DATE
	   *     },
	   *     updatedAt: {
	   *       type: DataTypes.DATE
	   *     },
	   *     attr1: DataTypes.STRING,
	   *     attr2: DataTypes.INTEGER,
	   *     attr3: {
	   *       type: DataTypes.BOOLEAN,
	   *       defaultValue: false,
	   *       allowNull: false
	   *     },
	   *     //foreign key usage
	   *     attr4: {
	   *       type: DataTypes.INTEGER,
	   *       references: {
	   *         model: 'another_table_name',
	   *         key: 'id'
	   *       },
	   *       onUpdate: 'cascade',
	   *       onDelete: 'cascade'
	   *     }
	   *   },
	   *   {
	   *     engine: 'MYISAM',    // default: 'InnoDB'
	   *     charset: 'latin1',   // default: null
	   *     schema: 'public',    // default: public, PostgreSQL only.
	   *     comment: 'my table', // comment for table
	   *     collate: 'latin1_danish_ci' // collation, MYSQL only
	   *   }
	   * )
	   * ```
	   *
	   * @param {string} tableName  Name of table to create
	   * @param {object} attributes Object representing a list of table attributes to create
	   * @param {object} [options] create table and query options
	   * @param {Model}  [model] model class
	   *
	   * @returns {Promise}
	   */
	  // TODO: remove "schema" option from the option bag, it must be passed as part of "tableName" instead
	  async createTable(tableName, attributes, options, model) {
	    options = { ...options };
	    if (model && this.queryGenerator.dialect.name !== "sqlite") {
	      options.uniqueKeys = options.uniqueKeys || model.uniqueKeys;
	    }
	    attributes = _$2.mapValues(
	      attributes,
	      (attribute) => this.sequelize.normalizeAttribute(attribute)
	    );
	    await this.ensureEnums(tableName, attributes, options, model);
	    const modelTable = model == null ? void 0 : model.table;
	    if (!tableName.schema && (options.schema || (modelTable == null ? void 0 : modelTable.schema))) {
	      tableName = this.queryGenerator.extractTableDetails(tableName);
	      tableName.schema = (modelTable == null ? void 0 : modelTable.schema) || options.schema;
	    }
	    attributes = this.queryGenerator.attributesToSQL(attributes, {
	      table: tableName,
	      context: "createTable",
	      withoutForeignKeyConstraints: options.withoutForeignKeyConstraints,
	      // schema override for multi-tenancy
	      schema: options.schema
	    });
	    const sql = this.queryGenerator.createTableQuery(tableName, attributes, options);
	    return await this.sequelize.queryRaw(sql, options);
	  }
	  /**
	   * Returns a promise that will resolve to true if the table exists in the database, false otherwise.
	   *
	   * @param {TableName} tableName - The name of the table
	   * @param {QueryOptions} options - Query options
	   * @returns {Promise<boolean>}
	   */
	  async tableExists(tableName, options) {
	    const sql = this.queryGenerator.tableExistsQuery(tableName);
	    const out = await this.sequelize.query(sql, {
	      ...options,
	      type: QueryTypes.SHOWTABLES
	    });
	    return out.length === 1;
	  }
	  /**
	   * Drop a table from database
	   *
	   * @param {string} tableName Table name to drop
	   * @param {object} options   Query options
	   *
	   * @returns {Promise}
	   */
	  async dropTable(tableName, options = {}) {
	    options.cascade = options.cascade != null ? options.cascade : options.force && this.queryGenerator.dialect.supports.dropTable.cascade ? true : void 0;
	    const sql = this.queryGenerator.dropTableQuery(tableName, options);
	    await this.sequelize.queryRaw(sql, options);
	  }
	  async _dropAllTables(tableNames, skip, options) {
	    for (const tableName of tableNames) {
	      if (!skip.includes(tableName.tableName || tableName)) {
	        await this.dropTable(tableName, {
	          // enable "cascade" by default if supported by this dialect,
	          // but let the user override the default
	          cascade: this.queryGenerator.dialect.supports.dropTable.cascade ? true : void 0,
	          ...options
	        });
	      }
	    }
	  }
	  /**
	   * Drop all tables from database
	   *
	   * @param {object} [options] query options
	   * @param {Array}  [options.skip] List of table to skip
	   *
	   * @returns {Promise}
	   */
	  async dropAllTables(options) {
	    options = options || {};
	    const skip = options.skip || [];
	    const tableNames = await this.showAllTables(options);
	    const foreignKeys = await this.getForeignKeysForTables(tableNames, options);
	    for (const tableName of tableNames) {
	      let normalizedTableName = tableName;
	      if (_$2.isObject(tableName)) {
	        normalizedTableName = `${tableName.schema}.${tableName.tableName}`;
	      }
	      for (const foreignKey of foreignKeys[normalizedTableName]) {
	        await this.sequelize.queryRaw(this.queryGenerator.dropForeignKeyQuery(tableName, foreignKey));
	      }
	    }
	    await this._dropAllTables(tableNames, skip, options);
	  }
	  /**
	   * Rename a table
	   *
	   * @param {string} before    Current name of table
	   * @param {string} after     New name from table
	   * @param {object} [options] Query options
	   *
	   * @returns {Promise}
	   */
	  async renameTable(before, after, options) {
	    options = options || {};
	    const sql = this.queryGenerator.renameTableQuery(before, after);
	    return await this.sequelize.queryRaw(sql, options);
	  }
	  /**
	   * Get all tables in current database
	   *
	   * @param {object}    [options] Query options
	   * @param {boolean}   [options.raw=true] Run query in raw mode
	   * @param {QueryType} [options.type=QueryType.SHOWTABLE] query type
	   *
	   * @returns {Promise<Array>}
	   * @private
	   */
	  async showAllTables(options) {
	    options = {
	      ...options,
	      raw: true,
	      type: QueryTypes.SHOWTABLES
	    };
	    const showTablesSql = this.queryGenerator.showTablesQuery(this.sequelize.config.database);
	    const tableNames = await this.sequelize.queryRaw(showTablesSql, options);
	    return tableNames.flat();
	  }
	  /**
	   * Add a new column to a table
	   *
	   * ```js
	   * queryInterface.addColumn('tableA', 'columnC', DataTypes.STRING, {
	   *    after: 'columnB' // after option is only supported by MySQL
	   * });
	   * ```
	   *
	   * @param {string} table     Table to add column to
	   * @param {string} key       Column name
	   * @param {object} attribute Attribute definition
	   * @param {object} [options] Query options
	   *
	   * @returns {Promise}
	   */
	  async addColumn(table, key, attribute, options = {}) {
	    if (!table || !key || !attribute) {
	      throw new Error("addColumn takes at least 3 arguments (table, attribute name, attribute definition)");
	    }
	    attribute = this.sequelize.normalizeAttribute(attribute);
	    if (attribute.type instanceof import_data_types.AbstractDataType && !attribute.type.usageContext) {
	      attribute.type.attachUsageContext({ tableName: table, columnName: key, sequelize: this.sequelize });
	    }
	    const { ifNotExists, ...rawQueryOptions } = options;
	    const addColumnQueryOptions = ifNotExists ? { ifNotExists } : void 0;
	    return await this.sequelize.queryRaw(this.queryGenerator.addColumnQuery(table, key, attribute, addColumnQueryOptions), rawQueryOptions);
	  }
	  /**
	   * Remove a column from a table
	   *
	   * @param {string} tableName      Table to remove column from
	   * @param {string} attributeName  Column name to remove
	   * @param {object} [options]      Query options
	   */
	  async removeColumn(tableName, attributeName, options) {
	    options = options || {};
	    const { ifExists, ...rawQueryOptions } = options;
	    const removeColumnQueryOptions = ifExists ? { ifExists } : void 0;
	    return this.sequelize.queryRaw(this.queryGenerator.removeColumnQuery(tableName, attributeName, removeColumnQueryOptions), rawQueryOptions);
	  }
	  normalizeAttribute(dataTypeOrOptions) {
	    let attribute;
	    if (Object.values(DataTypes).includes(dataTypeOrOptions)) {
	      attribute = { type: dataTypeOrOptions, allowNull: true };
	    } else {
	      attribute = dataTypeOrOptions;
	    }
	    return this.sequelize.normalizeAttribute(attribute);
	  }
	  /**
	   * Split a list of identifiers by "." and quote each part
	   *
	   * @param {string} identifier
	   * @param {boolean} force
	   *
	   * @returns {string}
	   */
	  quoteIdentifier(identifier2, force) {
	    return this.queryGenerator.quoteIdentifier(identifier2, force);
	  }
	  /**
	   * Split a list of identifiers by "." and quote each part.
	   *
	   * @param {string} identifiers
	   *
	   * @returns {string}
	   */
	  quoteIdentifiers(identifiers) {
	    return this.queryGenerator.quoteIdentifiers(identifiers);
	  }
	  /**
	   * Change a column definition
	   *
	   * @param {string} tableName          Table name to change from
	   * @param {string} attributeName      Column name
	   * @param {object} dataTypeOrOptions  Attribute definition for new column
	   * @param {object} [options]          Query options
	   */
	  async changeColumn(tableName, attributeName, dataTypeOrOptions, options) {
	    options = options || {};
	    const query = this.queryGenerator.attributesToSQL({
	      [attributeName]: this.normalizeAttribute(dataTypeOrOptions)
	    }, {
	      context: "changeColumn",
	      table: tableName
	    });
	    const sql = this.queryGenerator.changeColumnQuery(tableName, query);
	    return this.sequelize.queryRaw(sql, options);
	  }
	  /**
	   * Rejects if the table doesn't have the specified column, otherwise returns the column description.
	   *
	   * @param {string} tableName
	   * @param {string} columnName
	   * @param {object} options
	   * @private
	   */
	  async assertTableHasColumn(tableName, columnName, options) {
	    const description = await this.describeTable(tableName, options);
	    if (description[columnName]) {
	      return description;
	    }
	    throw new Error(`Table ${tableName} doesn't have the column ${columnName}`);
	  }
	  /**
	   * Rename a column
	   *
	   * @param {string} tableName        Table name whose column to rename
	   * @param {string} attrNameBefore   Current column name
	   * @param {string} attrNameAfter    New column name
	   * @param {object} [options]        Query option
	   *
	   * @returns {Promise}
	   */
	  async renameColumn(tableName, attrNameBefore, attrNameAfter, options) {
	    options = options || {};
	    const data = (await this.assertTableHasColumn(tableName, attrNameBefore, options))[attrNameBefore];
	    const _options = {};
	    _options[attrNameAfter] = {
	      attribute: attrNameAfter,
	      type: data.type,
	      allowNull: data.allowNull,
	      defaultValue: data.defaultValue
	    };
	    if (data.defaultValue === null && !data.allowNull) {
	      delete _options[attrNameAfter].defaultValue;
	    }
	    const sql = this.queryGenerator.renameColumnQuery(
	      tableName,
	      attrNameBefore,
	      this.queryGenerator.attributesToSQL(_options)
	    );
	    return await this.sequelize.queryRaw(sql, options);
	  }
	  /**
	   * Add an index to a column
	   *
	   * @param {string|object}  tableName Table name to add index on, can be a object with schema
	   * @param {Array}   [attributes]     Use options.fields instead, List of attributes to add index on
	   * @param {object}  options          indexes options
	   * @param {Array}   options.fields   List of attributes to add index on
	   * @param {boolean} [options.concurrently] Pass CONCURRENT so other operations run while the index is created
	   * @param {boolean} [options.unique] Create a unique index
	   * @param {string}  [options.using]  Useful for GIN indexes
	   * @param {string}  [options.operator] Index operator
	   * @param {string}  [options.type]   Type of index, available options are UNIQUE|FULLTEXT|SPATIAL
	   * @param {string}  [options.name]   Name of the index. Default is <table>_<attr1>_<attr2>
	   * @param {object}  [options.where]  Where condition on index, for partial indexes
	   * @param {string}  [rawTablename]   table name, this is just for backward compatibiity
	   *
	   * @returns {Promise}
	   */
	  async addIndex(tableName, attributes, options, rawTablename) {
	    if (!Array.isArray(attributes)) {
	      rawTablename = options;
	      options = attributes;
	      attributes = options.fields;
	    }
	    if (!rawTablename) {
	      rawTablename = tableName;
	    }
	    options = (0, import_object.cloneDeep)(options) ?? {};
	    options.fields = attributes;
	    const sql = this.queryGenerator.addIndexQuery(tableName, options, rawTablename);
	    return await this.sequelize.queryRaw(sql, { ...options, supportsSearchPath: false });
	  }
	  /**
	   * Show indexes on a table
	   *
	   * @param {TableNameOrModel} tableName
	   * @param {object}    [options] Query options
	   *
	   * @returns {Promise<Array>}
	   * @private
	   */
	  async showIndex(tableName, options) {
	    const sql = this.queryGenerator.showIndexesQuery(tableName, options);
	    return await this.sequelize.queryRaw(sql, { ...options, type: QueryTypes.SHOWINDEXES });
	  }
	  /**
	   * Returns all foreign key constraints of requested tables
	   *
	   * @param {string[]} tableNames table names
	   * @param {object} [options] Query options
	   *
	   * @returns {Promise}
	   */
	  async getForeignKeysForTables(tableNames, options) {
	    if (tableNames.length === 0) {
	      return {};
	    }
	    options = { ...options, type: QueryTypes.FOREIGNKEYS };
	    const results = await Promise.all(tableNames.map((tableName) => this.sequelize.queryRaw(this.queryGenerator.getForeignKeyQuery(tableName), options)));
	    const result = {};
	    for (let [i, tableName] of tableNames.entries()) {
	      if (_$2.isObject(tableName)) {
	        tableName = `${tableName.schema}.${tableName.tableName}`;
	      }
	      result[tableName] = Array.isArray(results[i]) ? results[i].map((r) => r.constraintName) : [results[i] && results[i].constraintName];
	      result[tableName] = result[tableName].filter(_$2.identity);
	    }
	    return result;
	  }
	  /**
	   * Get foreign key references details for the table
	   *
	   * Those details contains constraintSchema, constraintName, constraintCatalog
	   * tableCatalog, tableSchema, tableName, columnName,
	   * referencedTableCatalog, referencedTableCatalog, referencedTableSchema, referencedTableName, referencedColumnName.
	   * Remind: constraint informations won't return if it's sqlite.
	   *
	   * @param {string} tableName table name
	   * @param {object} [options]  Query options
	   */
	  async getForeignKeyReferencesForTable(tableName, options) {
	    const queryOptions = {
	      ...options,
	      type: QueryTypes.FOREIGNKEYS
	    };
	    const query = this.queryGenerator.getForeignKeyQuery(tableName);
	    return this.sequelize.queryRaw(query, queryOptions);
	  }
	  /**
	   * Remove an already existing index from a table
	   *
	   * @param {string} tableName                    Table name to drop index from
	   * @param {string|string[]} indexNameOrAttributes  Index name or list of attributes that in the index
	   * @param {object} [options]                    Query options
	   * @param {boolean} [options.concurrently]      Pass CONCURRENTLY so other operations run while the index is created
	   *
	   * @returns {Promise}
	   */
	  async removeIndex(tableName, indexNameOrAttributes, options) {
	    options = options || {};
	    const sql = this.queryGenerator.removeIndexQuery(tableName, indexNameOrAttributes, options);
	    return await this.sequelize.queryRaw(sql, options);
	  }
	  async insert(instance, tableName, values, options) {
	    if (options == null ? void 0 : options.bind) {
	      (0, import_sql.assertNoReservedBind)(options.bind);
	    }
	    options = (0, import_object.cloneDeep)(options) ?? {};
	    const modelDefinition = instance == null ? void 0 : instance.constructor.modelDefinition;
	    options.hasTrigger = modelDefinition == null ? void 0 : modelDefinition.options.hasTrigger;
	    const { query, bind } = this.queryGenerator.insertQuery(
	      tableName,
	      values,
	      modelDefinition && (0, import_object.getObjectFromMap)(modelDefinition.attributes),
	      options
	    );
	    options.type = QueryTypes.INSERT;
	    options.instance = instance;
	    delete options.replacements;
	    options.bind = (0, import_sql.combineBinds)(options.bind, bind);
	    const results = await this.sequelize.queryRaw(query, options);
	    if (instance) {
	      results[0].isNewRecord = false;
	    }
	    return results;
	  }
	  /**
	   * Upsert
	   *
	   * @param {string} tableName    table to upsert on
	   * @param {object} insertValues values to be inserted, mapped to field name
	   * @param {object} updateValues values to be updated, mapped to field name
	   * @param {object} where        where conditions, which can be used for UPDATE part when INSERT fails
	   * @param {object} options      query options
	   *
	   * @returns {Promise<boolean,?number>} Resolves an array with <created, primaryKey>
	   */
	  // Note: "where" is only used by DB2 and MSSQL. This is because these dialects do not propose any "ON CONFLICT UPDATE" mechanisms
	  // The UPSERT pattern in SQL server requires providing a WHERE clause
	  // TODO: the user should be able to configure the WHERE clause for upsert instead of the current default which
	  //  is using the primary keys.
	  async upsert(tableName, insertValues, updateValues, where, options) {
	    if (options == null ? void 0 : options.bind) {
	      (0, import_sql.assertNoReservedBind)(options.bind);
	    }
	    options = { ...options };
	    const model = options.model;
	    const modelDefinition = model.modelDefinition;
	    options.type = QueryTypes.UPSERT;
	    options.updateOnDuplicate = Object.keys(updateValues);
	    options.upsertKeys = options.conflictFields || [];
	    if (options.upsertKeys.length === 0) {
	      const primaryKeys = Array.from(
	        (0, import_iterators.map)(modelDefinition.primaryKeysAttributeNames, (pkAttrName) => modelDefinition.attributes.get(pkAttrName).columnName)
	      );
	      const uniqueColumnNames = Object.values(model.getIndexes()).filter((c) => c.unique && c.fields.length > 0).map((c) => c.fields);
	      for (const field of options.updateOnDuplicate) {
	        const indexKey = uniqueColumnNames.find((fields) => fields.includes(field));
	        if (indexKey) {
	          options.upsertKeys = indexKey;
	          break;
	        }
	      }
	      if (options.upsertKeys.length === 0 || _$2.intersection(options.updateOnDuplicate, primaryKeys).length > 0) {
	        options.upsertKeys = primaryKeys;
	      }
	      options.upsertKeys = _$2.uniq(options.upsertKeys);
	    }
	    const { bind, query } = this.queryGenerator.insertQuery(
	      tableName,
	      insertValues,
	      (0, import_object.getObjectFromMap)(modelDefinition.attributes),
	      options
	    );
	    delete options.replacement;
	    options.bind = (0, import_sql.combineBinds)(options.bind, bind);
	    return await this.sequelize.queryRaw(query, options);
	  }
	  /**
	   * Insert multiple records into a table
	   *
	   * @example
	   * queryInterface.bulkInsert('roles', [{
	   *    label: 'user',
	   *    createdAt: new Date(),
	   *    updatedAt: new Date()
	   *  }, {
	   *    label: 'admin',
	   *    createdAt: new Date(),
	   *    updatedAt: new Date()
	   *  }]);
	   *
	   * @param {string} tableName   Table name to insert record to
	   * @param {Array}  records     List of records to insert
	   * @param {object} options     Various options, please see Model.bulkCreate options
	   * @param {object} attributes  Various attributes mapped by field name
	   *
	   * @returns {Promise}
	   */
	  async bulkInsert(tableName, records, options, attributes) {
	    options = { ...options, type: QueryTypes.INSERT };
	    const sql = this.queryGenerator.bulkInsertQuery(tableName, records, options, attributes);
	    delete options.replacements;
	    const results = await this.sequelize.queryRaw(sql, options);
	    return results[0];
	  }
	  async update(instance, tableName, values, where, options) {
	    if (options == null ? void 0 : options.bind) {
	      (0, import_sql.assertNoReservedBind)(options.bind);
	    }
	    const modelDefinition = instance == null ? void 0 : instance.constructor.modelDefinition;
	    options = { ...options, model: instance == null ? void 0 : instance.constructor };
	    options.hasTrigger = modelDefinition == null ? void 0 : modelDefinition.options.hasTrigger;
	    const { query, bind } = this.queryGenerator.updateQuery(
	      tableName,
	      values,
	      where,
	      options,
	      modelDefinition && (0, import_object.getObjectFromMap)(modelDefinition.attributes)
	    );
	    options.type = QueryTypes.UPDATE;
	    options.instance = instance;
	    delete options.replacements;
	    options.bind = (0, import_sql.combineBinds)(options.bind, bind);
	    return await this.sequelize.queryRaw(query, options);
	  }
	  /**
	   * Update multiple records of a table
	   *
	   * @example
	   * queryInterface.bulkUpdate('roles', {
	   *     label: 'admin',
	   *   }, {
	   *     userType: 3,
	   *   },
	   * );
	   *
	   * @param {string} tableName     Table name to update
	   * @param {object} values        Values to be inserted, mapped to field name
	   * @param {object} where    A hash with conditions OR an ID as integer OR a string with conditions
	   * @param {object} [options]     Various options, please see Model.bulkCreate options
	   * @param {object} [columnDefinitions]  Attributes on return objects if supported by SQL dialect
	   *
	   * @returns {Promise}
	   */
	  async bulkUpdate(tableName, values, where, options, columnDefinitions) {
	    if (options == null ? void 0 : options.bind) {
	      (0, import_sql.assertNoReservedBind)(options.bind);
	    }
	    options = (0, import_object.cloneDeep)(options) ?? {};
	    if (typeof where === "object") {
	      where = (0, import_object.cloneDeep)(where) ?? {};
	    }
	    const { bind, query } = this.queryGenerator.updateQuery(tableName, values, where, options, columnDefinitions);
	    const table = _$2.isObject(tableName) ? tableName : { tableName };
	    const model = options.model ? options.model : _$2.find(this.sequelize.modelManager.models, { tableName: table.tableName });
	    options.type = QueryTypes.BULKUPDATE;
	    options.model = model;
	    options.bind = (0, import_sql.combineBinds)(options.bind, bind);
	    return await this.sequelize.queryRaw(query, options);
	  }
	  async delete(instance, tableName, identifier2, options) {
	    const cascades = [];
	    const sql = this.queryGenerator.deleteQuery(tableName, identifier2, {}, instance.constructor);
	    options = { ...options };
	    delete options.replacements;
	    if (Boolean(instance.constructor) && Boolean(instance.constructor.associations)) {
	      const keys = Object.keys(instance.constructor.associations);
	      const length = keys.length;
	      let association;
	      for (let i = 0; i < length; i++) {
	        association = instance.constructor.associations[keys[i]];
	        if (association.options && association.options.onDelete && association.options.onDelete.toLowerCase() === "cascade" && association.options.hooks === true) {
	          cascades.push(association.accessors.get);
	        }
	      }
	    }
	    for (const cascade of cascades) {
	      let instances = await instance[cascade](options);
	      if (!instances) {
	        continue;
	      }
	      if (!Array.isArray(instances)) {
	        instances = [instances];
	      }
	      for (const _instance of instances) {
	        await _instance.destroy(options);
	      }
	    }
	    options.instance = instance;
	    return await this.sequelize.queryRaw(sql, options);
	  }
	  /**
	   * Delete multiple records from a table
	   *
	   * @param {string}  tableName            table name from where to delete records
	   * @param {object}  where                where conditions to find records to delete
	   * @param {object}  [options]            options
	   * @param {boolean} [options.truncate]   Use truncate table command
	   * @param {boolean} [options.cascade=false]         Only used in conjunction with TRUNCATE. Truncates  all tables that have foreign-key references to the named table, or to any tables added to the group due to CASCADE.
	   * @param {boolean} [options.restartIdentity=false] Only used in conjunction with TRUNCATE. Automatically restart sequences owned by columns of the truncated table.
	   * @param {Model}   [model]              Model
	   *
	   * @returns {Promise}
	   */
	  async bulkDelete(tableName, where, options, model) {
	    options = (0, import_object.cloneDeep)(options) ?? {};
	    options = _$2.defaults(options, { limit: null });
	    if (options.truncate === true) {
	      return this.sequelize.queryRaw(
	        this.queryGenerator.truncateTableQuery(tableName, options),
	        options
	      );
	    }
	    if (typeof identifier === "object") {
	      where = (0, import_object.cloneDeep)(where) ?? {};
	    }
	    const sql = this.queryGenerator.deleteQuery(tableName, where, options, model);
	    delete options.replacements;
	    return await this.sequelize.queryRaw(
	      sql,
	      options
	    );
	  }
	  async select(model, tableName, optionsArg) {
	    const minifyAliases = optionsArg.minifyAliases ?? this.sequelize.options.minifyAliases;
	    const options = { ...optionsArg, type: QueryTypes.SELECT, model, minifyAliases };
	    const sql = this.queryGenerator.selectQuery(tableName, options, model);
	    delete options.replacements;
	    return await this.sequelize.queryRaw(sql, options);
	  }
	  async increment(model, tableName, where, incrementAmountsByField, extraAttributesToBeUpdated, options) {
	    return this.#arithmeticQuery("+", model, tableName, where, incrementAmountsByField, extraAttributesToBeUpdated, options);
	  }
	  async decrement(model, tableName, where, incrementAmountsByField, extraAttributesToBeUpdated, options) {
	    return this.#arithmeticQuery("-", model, tableName, where, incrementAmountsByField, extraAttributesToBeUpdated, options);
	  }
	  async #arithmeticQuery(operator, model, tableName, where, incrementAmountsByAttribute, extraAttributesToBeUpdated, options) {
	    options = (0, import_object.cloneDeep)(options) ?? {};
	    options.model = model;
	    const sql = this.queryGenerator.arithmeticQuery(operator, tableName, where, incrementAmountsByAttribute, extraAttributesToBeUpdated, options);
	    options.type = QueryTypes.UPDATE;
	    delete options.replacements;
	    return await this.sequelize.queryRaw(sql, options);
	  }
	  async rawSelect(tableName, options, attributeSelector, Model) {
	    options = (0, import_object.cloneDeep)(options) ?? {};
	    options = _$2.defaults(options, {
	      raw: true,
	      plain: true,
	      type: QueryTypes.SELECT
	    });
	    const sql = this.queryGenerator.selectQuery(tableName, options, Model);
	    if (attributeSelector === void 0) {
	      throw new Error("Please pass an attribute selector!");
	    }
	    delete options.replacements;
	    const data = await this.sequelize.queryRaw(sql, options);
	    if (!options.plain) {
	      return data;
	    }
	    const result = data ? data[attributeSelector] : null;
	    if (!options || !options.dataType) {
	      return result;
	    }
	    const dataType = options.dataType;
	    if ((dataType instanceof DataTypes.DECIMAL || dataType instanceof DataTypes.FLOAT) && result !== null) {
	      return Number.parseFloat(result);
	    }
	    if ((dataType instanceof DataTypes.INTEGER || dataType instanceof DataTypes.BIGINT) && result !== null) {
	      return Number.parseInt(result, 10);
	    }
	    if (dataType instanceof DataTypes.DATE && result !== null && !(result instanceof Date)) {
	      return new Date(result);
	    }
	    return result;
	  }
	  async createTrigger(tableName, triggerName, timingType, fireOnArray, functionName, functionParams, optionsArray, options) {
	    const sql = this.queryGenerator.createTrigger(tableName, triggerName, timingType, fireOnArray, functionName, functionParams, optionsArray);
	    options = options || {};
	    if (sql) {
	      return await this.sequelize.queryRaw(sql, options);
	    }
	  }
	  async dropTrigger(tableName, triggerName, options) {
	    const sql = this.queryGenerator.dropTrigger(tableName, triggerName);
	    options = options || {};
	    if (sql) {
	      return await this.sequelize.queryRaw(sql, options);
	    }
	  }
	  async renameTrigger(tableName, oldTriggerName, newTriggerName, options) {
	    const sql = this.queryGenerator.renameTrigger(tableName, oldTriggerName, newTriggerName);
	    options = options || {};
	    if (sql) {
	      return await this.sequelize.queryRaw(sql, options);
	    }
	  }
	  /**
	   * Create an SQL function
	   *
	   * @example
	   * queryInterface.createFunction(
	   *   'someFunction',
	   *   [
	   *     {type: 'integer', name: 'param', direction: 'IN'}
	   *   ],
	   *   'integer',
	   *   'plpgsql',
	   *   'RETURN param + 1;',
	   *   [
	   *     'IMMUTABLE',
	   *     'LEAKPROOF'
	   *   ],
	   *   {
	   *    variables:
	   *      [
	   *        {type: 'integer', name: 'myVar', default: 100}
	   *      ],
	   *      force: true
	   *   };
	   * );
	   *
	   * @param {string}  functionName  Name of SQL function to create
	   * @param {Array}   params        List of parameters declared for SQL function
	   * @param {string}  returnType    SQL type of function returned value
	   * @param {string}  language      The name of the language that the function is implemented in
	   * @param {string}  body          Source code of function
	   * @param {Array}   optionsArray  Extra-options for creation
	   * @param {object}  [options]     query options
	   * @param {boolean} options.force If force is true, any existing functions with the same parameters will be replaced. For postgres, this means using `CREATE OR REPLACE FUNCTION` instead of `CREATE FUNCTION`. Default is false
	   * @param {Array<object>}   options.variables List of declared variables. Each variable should be an object with string fields `type` and `name`, and optionally having a `default` field as well.
	   *
	   * @returns {Promise}
	   */
	  async createFunction(functionName, params, returnType, language, body, optionsArray, options) {
	    const sql = this.queryGenerator.createFunction(functionName, params, returnType, language, body, optionsArray, options);
	    options = options || {};
	    if (sql) {
	      return await this.sequelize.queryRaw(sql, options);
	    }
	  }
	  /**
	   * Drop an SQL function
	   *
	   * @example
	   * queryInterface.dropFunction(
	   *   'someFunction',
	   *   [
	   *     {type: 'varchar', name: 'param1', direction: 'IN'},
	   *     {type: 'integer', name: 'param2', direction: 'INOUT'}
	   *   ]
	   * );
	   *
	   * @param {string} functionName Name of SQL function to drop
	   * @param {Array}  params       List of parameters declared for SQL function
	   * @param {object} [options]    query options
	   *
	   * @returns {Promise}
	   */
	  async dropFunction(functionName, params, options) {
	    const sql = this.queryGenerator.dropFunction(functionName, params);
	    options = options || {};
	    if (sql) {
	      return await this.sequelize.queryRaw(sql, options);
	    }
	  }
	  /**
	   * Rename an SQL function
	   *
	   * @example
	   * queryInterface.renameFunction(
	   *   'fooFunction',
	   *   [
	   *     {type: 'varchar', name: 'param1', direction: 'IN'},
	   *     {type: 'integer', name: 'param2', direction: 'INOUT'}
	   *   ],
	   *   'barFunction'
	   * );
	   *
	   * @param {string} oldFunctionName  Current name of function
	   * @param {Array}  params           List of parameters declared for SQL function
	   * @param {string} newFunctionName  New name of function
	   * @param {object} [options]        query options
	   *
	   * @returns {Promise}
	   */
	  async renameFunction(oldFunctionName, params, newFunctionName, options) {
	    const sql = this.queryGenerator.renameFunction(oldFunctionName, params, newFunctionName);
	    options = options || {};
	    if (sql) {
	      return await this.sequelize.queryRaw(sql, options);
	    }
	  }
	  // Helper methods useful for querying
	  /**
	   * @private
	   */
	  ensureEnums() {
	  }
	  async setIsolationLevel(transaction, value, options) {
	    if (!transaction || !(transaction instanceof Transaction)) {
	      throw new Error("Unable to set isolation level for a transaction without transaction object!");
	    }
	    if (transaction.parent || !value) {
	      return;
	    }
	    options = { ...options, transaction: transaction.parent || transaction };
	    const sql = this.queryGenerator.setIsolationLevelQuery(value, {
	      parent: transaction.parent
	    });
	    if (!sql) {
	      return;
	    }
	    return await this.sequelize.queryRaw(sql, options);
	  }
	  async startTransaction(transaction, options) {
	    if (!transaction || !(transaction instanceof Transaction)) {
	      throw new Error("Unable to start a transaction without transaction object!");
	    }
	    options = { ...options, transaction: transaction.parent || transaction };
	    options.transaction.name = transaction.parent ? transaction.name : void 0;
	    const sql = this.queryGenerator.startTransactionQuery(transaction);
	    return await this.sequelize.queryRaw(sql, options);
	  }
	  async commitTransaction(transaction, options) {
	    if (!transaction || !(transaction instanceof Transaction)) {
	      throw new Error("Unable to commit a transaction without transaction object!");
	    }
	    if (transaction.parent) {
	      return;
	    }
	    options = {
	      ...options,
	      transaction: transaction.parent || transaction,
	      supportsSearchPath: false,
	      completesTransaction: true
	    };
	    const sql = this.queryGenerator.commitTransactionQuery(transaction);
	    const promise = this.sequelize.queryRaw(sql, options);
	    transaction.finished = "commit";
	    return await promise;
	  }
	  async rollbackTransaction(transaction, options) {
	    if (!transaction || !(transaction instanceof Transaction)) {
	      throw new Error("Unable to rollback a transaction without transaction object!");
	    }
	    options = {
	      ...options,
	      transaction: transaction.parent || transaction,
	      supportsSearchPath: false,
	      completesTransaction: true
	    };
	    options.transaction.name = transaction.parent ? transaction.name : void 0;
	    const sql = this.queryGenerator.rollbackTransactionQuery(transaction);
	    const promise = this.sequelize.queryRaw(sql, options);
	    transaction.finished = "rollback";
	    return await promise;
	  }
	}

	var cloneDeep_1;
	var hasRequiredCloneDeep;

	function requireCloneDeep () {
		if (hasRequiredCloneDeep) return cloneDeep_1;
		hasRequiredCloneDeep = 1;
		var baseClone = require_baseClone();

		/** Used to compose bitmasks for cloning. */
		var CLONE_DEEP_FLAG = 1,
		    CLONE_SYMBOLS_FLAG = 4;

		/**
		 * This method is like `_.clone` except that it recursively clones `value`.
		 *
		 * @static
		 * @memberOf _
		 * @since 1.0.0
		 * @category Lang
		 * @param {*} value The value to recursively clone.
		 * @returns {*} Returns the deep cloned value.
		 * @see _.clone
		 * @example
		 *
		 * var objects = [{ 'a': 1 }, { 'b': 2 }];
		 *
		 * var deep = _.cloneDeep(objects);
		 * console.log(deep[0] === objects[0]);
		 * // => false
		 */
		function cloneDeep(value) {
		  return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
		}

		cloneDeep_1 = cloneDeep;
		return cloneDeep_1;
	}

	var merge_1;
	var hasRequiredMerge;

	function requireMerge () {
		if (hasRequiredMerge) return merge_1;
		hasRequiredMerge = 1;
		var baseMerge = _baseMerge,
		    createAssigner = _createAssigner;

		/**
		 * This method is like `_.assign` except that it recursively merges own and
		 * inherited enumerable string keyed properties of source objects into the
		 * destination object. Source properties that resolve to `undefined` are
		 * skipped if a destination value exists. Array and plain object properties
		 * are merged recursively. Other objects and value types are overridden by
		 * assignment. Source objects are applied from left to right. Subsequent
		 * sources overwrite property assignments of previous sources.
		 *
		 * **Note:** This method mutates `object`.
		 *
		 * @static
		 * @memberOf _
		 * @since 0.5.0
		 * @category Object
		 * @param {Object} object The destination object.
		 * @param {...Object} [sources] The source objects.
		 * @returns {Object} Returns `object`.
		 * @example
		 *
		 * var object = {
		 *   'a': [{ 'b': 2 }, { 'd': 4 }]
		 * };
		 *
		 * var other = {
		 *   'a': [{ 'c': 3 }, { 'e': 5 }]
		 * };
		 *
		 * _.merge(object, other);
		 * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
		 */
		var merge = createAssigner(function(object, source, srcIndex) {
		  baseMerge(object, source, srcIndex);
		});

		merge_1 = merge;
		return merge_1;
	}

	var abstract;
	var hasRequiredAbstract;

	function requireAbstract () {
		if (hasRequiredAbstract) return abstract;
		hasRequiredAbstract = 1;
		var __create = Object.create;
		var __defProp = Object.defineProperty;
		var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
		var __getOwnPropNames = Object.getOwnPropertyNames;
		var __getProtoOf = Object.getPrototypeOf;
		var __hasOwnProp = Object.prototype.hasOwnProperty;
		var __export = (target, all) => {
		  for (var name in all)
		    __defProp(target, name, { get: all[name], enumerable: true });
		};
		var __copyProps = (to, from, except, desc) => {
		  if (from && typeof from === "object" || typeof from === "function") {
		    for (let key of __getOwnPropNames(from))
		      if (!__hasOwnProp.call(to, key) && key !== except)
		        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
		  }
		  return to;
		};
		var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
		  // If the importer is in node compatibility mode or this is not an ESM
		  // file that has been converted to a CommonJS file using a Babel-
		  // compatible transform (i.e. "__esModule" has not been set), then set
		  // "default" to the CommonJS "module.exports" for node compatibility.
		  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
		  mod
		));
		var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
		var abstract_exports = {};
		__export(abstract_exports, {
		  AbstractDialect: () => AbstractDialect
		});
		abstract = __toCommonJS(abstract_exports);
		var import_cloneDeep = __toESM(requireCloneDeep());
		var import_merge = __toESM(requireMerge());
		var import_logger = requireLogger();
		var BaseDataTypes = __toESM(requireDataTypes$8());
		class AbstractDialect {
		  /**
		   * List of features this dialect supports.
		   *
		   * Important: Dialect implementations inherit these values.
		   * When changing a default, ensure the implementations still properly declare which feature they support.
		   */
		  static supports = {
		    DEFAULT: true,
		    "DEFAULT VALUES": false,
		    "VALUES ()": false,
		    "LIMIT ON UPDATE": false,
		    "ON DUPLICATE KEY": true,
		    "ORDER NULLS": false,
		    UNION: true,
		    "UNION ALL": true,
		    "RIGHT JOIN": true,
		    EXCEPTION: false,
		    lock: false,
		    lockOf: false,
		    lockKey: false,
		    lockOuterJoinFailure: false,
		    skipLocked: false,
		    finalTable: false,
		    returnValues: false,
		    autoIncrement: {
		      identityInsert: false,
		      defaultValue: true,
		      update: true
		    },
		    bulkDefault: false,
		    schemas: false,
		    multiDatabases: false,
		    transactions: true,
		    settingIsolationLevelDuringTransaction: true,
		    transactionOptions: {
		      type: false
		    },
		    migrations: true,
		    upserts: true,
		    inserts: {
		      ignoreDuplicates: "",
		      updateOnDuplicate: false,
		      onConflictDoNothing: "",
		      onConflictWhere: false,
		      conflictFields: false
		    },
		    constraints: {
		      restrict: true,
		      deferrable: false,
		      unique: true,
		      default: false,
		      check: true,
		      foreignKey: true,
		      foreignKeyChecksDisableable: false,
		      primaryKey: true,
		      onUpdate: true,
		      add: true,
		      remove: true,
		      removeOptions: {
		        cascade: false,
		        ifExists: false
		      }
		    },
		    index: {
		      collate: true,
		      length: false,
		      parser: false,
		      concurrently: false,
		      type: false,
		      using: true,
		      functionBased: false,
		      operator: false,
		      where: false,
		      include: false
		    },
		    groupedLimit: true,
		    indexViaAlter: false,
		    alterColumn: {
		      unique: true
		    },
		    dataTypes: {
		      CHAR: true,
		      COLLATE_BINARY: false,
		      CITEXT: false,
		      INTS: { zerofill: false, unsigned: false },
		      FLOAT: { NaN: false, infinity: false, zerofill: false, unsigned: false, scaleAndPrecision: false },
		      REAL: { NaN: false, infinity: false, zerofill: false, unsigned: false, scaleAndPrecision: false },
		      DOUBLE: { NaN: false, infinity: false, zerofill: false, unsigned: false, scaleAndPrecision: false },
		      DECIMAL: { constrained: true, unconstrained: false, NaN: false, infinity: false, zerofill: false, unsigned: false },
		      CIDR: false,
		      MACADDR: false,
		      INET: false,
		      JSON: false,
		      JSONB: false,
		      ARRAY: false,
		      RANGE: false,
		      GEOMETRY: false,
		      GEOGRAPHY: false,
		      HSTORE: false,
		      TSVECTOR: false,
		      DATETIME: {
		        infinity: false
		      },
		      DATEONLY: {
		        infinity: false
		      },
		      TIME: {
		        precision: true
		      }
		    },
		    jsonOperations: false,
		    jsonExtraction: {
		      unquoted: false,
		      quoted: false
		    },
		    REGEXP: false,
		    IREGEXP: false,
		    tmpTableTrigger: false,
		    indexHints: false,
		    searchPath: false,
		    escapeStringConstants: false,
		    globalTimeZoneConfig: false,
		    dropTable: {
		      cascade: false
		    },
		    maxExecutionTimeHint: {
		      select: false
		    },
		    truncate: {
		      cascade: false
		    }
		  };
		  static extendSupport(supportsOverwrite) {
		    return (0, import_merge.default)((0, import_cloneDeep.default)(this.supports) ?? {}, supportsOverwrite);
		  }
		  sequelize;
		  name;
		  DataTypes;
		  /** dialect-specific implementation of shared data types */
		  #dataTypeOverrides;
		  /** base implementations of shared data types */
		  #baseDataTypes;
		  #dataTypeParsers = /* @__PURE__ */ new Map();
		  get supports() {
		    const Dialect = this.constructor;
		    return Dialect.supports;
		  }
		  constructor(sequelize, dialectDataTypes, dialectName) {
		    this.sequelize = sequelize;
		    this.DataTypes = dialectDataTypes;
		    this.name = dialectName;
		    const baseDataTypes = /* @__PURE__ */ new Map();
		    for (const dataType of Object.values(BaseDataTypes)) {
		      const dataTypeId = dataType.getDataTypeId();
		      if (!dataTypeId) {
		        continue;
		      }
		      if (baseDataTypes.has(dataTypeId)) {
		        throw new Error(`Internal Error: Sequelize declares more than one base implementation for DataType ID ${dataTypeId}.`);
		      }
		      baseDataTypes.set(dataTypeId, dataType);
		    }
		    const dataTypeOverrides = /* @__PURE__ */ new Map();
		    for (const dataType of Object.values(this.DataTypes)) {
		      const replacedDataTypeId = dataType.getDataTypeId();
		      if (dataTypeOverrides.has(replacedDataTypeId)) {
		        throw new Error(`Dialect ${this.name} declares more than one implementation for DataType ID ${replacedDataTypeId}.`);
		      }
		      dataTypeOverrides.set(replacedDataTypeId, dataType);
		    }
		    this.#dataTypeOverrides = dataTypeOverrides;
		    this.#baseDataTypes = baseDataTypes;
		  }
		  /**
		   * Returns the dialect-specific implementation of a shared data type, or null if no such implementation exists
		   * (in which case you need to use the base implementation).
		   *
		   * @param dataType The shared data type.
		   */
		  getDataTypeForDialect(dataType) {
		    const typeId = dataType.getDataTypeId();
		    const baseType = this.#baseDataTypes.get(typeId);
		    if (baseType != null && baseType !== dataType) {
		      return null;
		    }
		    return this.#dataTypeOverrides.get(typeId) ?? null;
		  }
		  #printedWarnings = /* @__PURE__ */ new Set();
		  warnDataTypeIssue(text) {
		    if (this.#printedWarnings.has(text)) {
		      return;
		    }
		    this.#printedWarnings.add(text);
		    import_logger.logger.warn(`${text} 
>> Check: ${this.dataTypesDocumentationUrl}`);
		  }
		  /**
		   * Produces a safe representation of a Buffer for this dialect, that can be inlined in a SQL string.
		   * Used mainly by DataTypes.
		   *
		   * @param buffer The buffer to escape
		   * @returns The string, escaped for SQL.
		   */
		  escapeBuffer(buffer) {
		    const hex = buffer.toString("hex");
		    return `X'${hex}'`;
		  }
		  /**
		   * Produces a safe representation of a string for this dialect, that can be inlined in a SQL string.
		   * Used mainly by DataTypes.
		   *
		   * @param value The string to escape
		   * @returns The string, escaped for SQL.
		   */
		  escapeString(value) {
		    value = value.replaceAll("'", "''");
		    return `'${value}'`;
		  }
		  /**
		   * Whether this dialect can use \ in strings to escape string delimiters.
		   *
		   * @returns
		   */
		  canBackslashEscape() {
		    return false;
		  }
		  getDefaultPort() {
		    return this.constructor.getDefaultPort();
		  }
		  /**
		   * Used to register a base parser for a Database type.
		   * Parsers are based on the Database Type, not the JS type.
		   * Only one parser can be assigned as the parser for a Database Type.
		   * For this reason, prefer neutral implementations.
		   *
		   * For instance, when implementing "parse" for a Date type,
		   * prefer returning a String rather than a Date object.
		   *
		   * The {@link DataTypes.ABSTRACT#parseDatabaseValue} method will then be called on the DataType instance defined by the user,
		   * which can decide on a more specific JS type (e.g. parse the date string & return a Date instance or a Temporal instance).
		   *
		   * You typically do not need to implement this method. This is used to provide default parsers when no DataType
		   * is provided (e.g. raw queries that don't specify a model). Sequelize already provides a default parser for most types.
		   * For a custom Data Type, implementing {@link DataTypes.ABSTRACT#parseDatabaseValue} is typically what you want.
		   *
		   * @param databaseDataTypes Dialect-specific DB data type identifiers that will use this parser.
		   * @param parser The parser function to call when parsing the data type. Parameters are dialect-specific.
		   */
		  registerDataTypeParser(databaseDataTypes, parser) {
		    for (const databaseDataType of databaseDataTypes) {
		      if (this.#dataTypeParsers.has(databaseDataType)) {
		        throw new Error(`Sequelize DataType for DB DataType ${databaseDataType} already registered for dialect ${this.name}`);
		      }
		      this.#dataTypeParsers.set(databaseDataType, parser);
		    }
		  }
		  getParserForDatabaseDataType(databaseDataType) {
		    return this.#dataTypeParsers.get(databaseDataType);
		  }
		  static getDefaultPort() {
		    throw new Error(`getDefaultPort not implemented in ${this.name}`);
		  }
		}
		
		return abstract;
	}

	var wkx = {};

	var types$1;
	var hasRequiredTypes;

	function requireTypes () {
		if (hasRequiredTypes) return types$1;
		hasRequiredTypes = 1;
		types$1 = {
		    wkt: {
		        Point: 'POINT',
		        LineString: 'LINESTRING',
		        Polygon: 'POLYGON',
		        MultiPoint: 'MULTIPOINT',
		        MultiLineString: 'MULTILINESTRING',
		        MultiPolygon: 'MULTIPOLYGON',
		        GeometryCollection: 'GEOMETRYCOLLECTION'
		    },
		    wkb: {
		        Point: 1,
		        LineString: 2,
		        Polygon: 3,
		        MultiPoint: 4,
		        MultiLineString: 5,
		        MultiPolygon: 6,
		        GeometryCollection: 7
		    },
		    geoJSON: {
		        Point: 'Point',
		        LineString: 'LineString',
		        Polygon: 'Polygon',
		        MultiPoint: 'MultiPoint',
		        MultiLineString: 'MultiLineString',
		        MultiPolygon: 'MultiPolygon',
		        GeometryCollection: 'GeometryCollection'
		    }
		};
		return types$1;
	}

	var binarywriter;
	var hasRequiredBinarywriter;

	function requireBinarywriter () {
		if (hasRequiredBinarywriter) return binarywriter;
		hasRequiredBinarywriter = 1;
		binarywriter = BinaryWriter;

		function BinaryWriter(size, allowResize) {
		    this.buffer = new Buffer(size);
		    this.position = 0;
		    this.allowResize = allowResize;
		}

		function _write(write, size) {
		    return function (value, noAssert) {
		        this.ensureSize(size);

		        write.call(this.buffer, value, this.position, noAssert);
		        this.position += size;
		    };
		}

		BinaryWriter.prototype.writeUInt8 = _write(Buffer.prototype.writeUInt8, 1);
		BinaryWriter.prototype.writeUInt16LE = _write(Buffer.prototype.writeUInt16LE, 2);
		BinaryWriter.prototype.writeUInt16BE = _write(Buffer.prototype.writeUInt16BE, 2);
		BinaryWriter.prototype.writeUInt32LE = _write(Buffer.prototype.writeUInt32LE, 4);
		BinaryWriter.prototype.writeUInt32BE = _write(Buffer.prototype.writeUInt32BE, 4);
		BinaryWriter.prototype.writeInt8 = _write(Buffer.prototype.writeInt8, 1);
		BinaryWriter.prototype.writeInt16LE = _write(Buffer.prototype.writeInt16LE, 2);
		BinaryWriter.prototype.writeInt16BE = _write(Buffer.prototype.writeInt16BE, 2);
		BinaryWriter.prototype.writeInt32LE = _write(Buffer.prototype.writeInt32LE, 4);
		BinaryWriter.prototype.writeInt32BE = _write(Buffer.prototype.writeInt32BE, 4);
		BinaryWriter.prototype.writeFloatLE = _write(Buffer.prototype.writeFloatLE, 4);
		BinaryWriter.prototype.writeFloatBE = _write(Buffer.prototype.writeFloatBE, 4);
		BinaryWriter.prototype.writeDoubleLE = _write(Buffer.prototype.writeDoubleLE, 8);
		BinaryWriter.prototype.writeDoubleBE = _write(Buffer.prototype.writeDoubleBE, 8);

		BinaryWriter.prototype.writeBuffer = function (buffer) {
		    this.ensureSize(buffer.length);

		    buffer.copy(this.buffer, this.position, 0, buffer.length);
		    this.position += buffer.length;
		};

		BinaryWriter.prototype.writeVarInt = function (value) {
		    var length = 1;

		    while ((value & 0xFFFFFF80) !== 0) {
		        this.writeUInt8((value & 0x7F) | 0x80);
		        value >>>= 7;
		        length++;
		    }

		    this.writeUInt8(value & 0x7F);

		    return length;
		};

		BinaryWriter.prototype.ensureSize = function (size) {
		    if (this.buffer.length < this.position + size) {
		        if (this.allowResize) {
		            var tempBuffer = new Buffer(this.position + size);
		            this.buffer.copy(tempBuffer, 0, 0, this.buffer.length);
		            this.buffer = tempBuffer;
		        }
		        else {
		            throw new RangeError('index out of range');
		        }
		    }
		};
		return binarywriter;
	}

	var zigzag;
	var hasRequiredZigzag;

	function requireZigzag () {
		if (hasRequiredZigzag) return zigzag;
		hasRequiredZigzag = 1;
		zigzag = {
		    encode: function (value) {
		        return (value << 1) ^ (value >> 31);
		    },
		    decode: function (value) {
		        return (value >> 1) ^ (-(value & 1));
		    }
		};
		return zigzag;
	}

	var point;
	var hasRequiredPoint;

	function requirePoint () {
		if (hasRequiredPoint) return point;
		hasRequiredPoint = 1;
		point = Point;

		var util = require$$0$9;

		var Geometry = requireGeometry();
		var Types = requireTypes();
		var BinaryWriter = requireBinarywriter();
		var ZigZag = requireZigzag();

		function Point(x, y, z, m, srid) {
		    Geometry.call(this);

		    this.x = x;
		    this.y = y;
		    this.z = z;
		    this.m = m;
			this.srid = srid;

		    this.hasZ = typeof this.z !== 'undefined';
		    this.hasM = typeof this.m !== 'undefined';
		}

		util.inherits(Point, Geometry);

		Point.Z = function (x, y, z, srid) {
		    var point = new Point(x, y, z, undefined, srid);
		    point.hasZ = true;
		    return point;
		};

		Point.M = function (x, y, m, srid) {
		    var point = new Point(x, y, undefined, m, srid);
		    point.hasM = true;
		    return point;
		};

		Point.ZM = function (x, y, z, m, srid) {
		    var point = new Point(x, y, z, m, srid);
		    point.hasZ = true;
		    point.hasM = true;
		    return point;
		};

		Point._parseWkt = function (value, options) {
		    var point = new Point();
		    point.srid = options.srid;
		    point.hasZ = options.hasZ;
		    point.hasM = options.hasM;

		    if (value.isMatch(['EMPTY']))
		        return point;

		    value.expectGroupStart();

		    var coordinate = value.matchCoordinate(options);

		    point.x = coordinate.x;
		    point.y = coordinate.y;
		    point.z = coordinate.z;
		    point.m = coordinate.m;

		    value.expectGroupEnd();

		    return point;
		};

		Point._parseWkb = function (value, options) {
		    var point = Point._readWkbPoint(value, options);
		    point.srid = options.srid;
		    return point;
		};

		Point._readWkbPoint = function (value, options) {
		    return new Point(value.readDouble(), value.readDouble(),
		        options.hasZ ? value.readDouble() : undefined,
		        options.hasM ? value.readDouble() : undefined);
		};

		Point._parseTwkb = function (value, options) {
		    var point = new Point();
		    point.hasZ = options.hasZ;
		    point.hasM = options.hasM;

		    if (options.isEmpty)
		        return point;

		    point.x = ZigZag.decode(value.readVarInt()) / options.precisionFactor;
		    point.y = ZigZag.decode(value.readVarInt()) / options.precisionFactor;
		    point.z = options.hasZ ? ZigZag.decode(value.readVarInt()) / options.zPrecisionFactor : undefined;
		    point.m = options.hasM ? ZigZag.decode(value.readVarInt()) / options.mPrecisionFactor : undefined;

		    return point;
		};

		Point._readTwkbPoint = function (value, options, previousPoint) {
		    previousPoint.x += ZigZag.decode(value.readVarInt()) / options.precisionFactor;
		    previousPoint.y += ZigZag.decode(value.readVarInt()) / options.precisionFactor;

		    if (options.hasZ)
		        previousPoint.z += ZigZag.decode(value.readVarInt()) / options.zPrecisionFactor;
		    if (options.hasM)
		        previousPoint.m += ZigZag.decode(value.readVarInt()) / options.mPrecisionFactor;

		    return new Point(previousPoint.x, previousPoint.y, previousPoint.z, previousPoint.m);
		};

		Point._parseGeoJSON = function (value) {
		    return Point._readGeoJSONPoint(value.coordinates);
		};

		Point._readGeoJSONPoint = function (coordinates) {
		    if (coordinates.length === 0)
		        return new Point();

		    if (coordinates.length > 2)
		        return new Point(coordinates[0], coordinates[1], coordinates[2]);

		    return new Point(coordinates[0], coordinates[1]);
		};

		Point.prototype.toWkt = function () {
		    if (typeof this.x === 'undefined' && typeof this.y === 'undefined' &&
		        typeof this.z === 'undefined' && typeof this.m === 'undefined')
		        return this._getWktType(Types.wkt.Point, true);

		    return this._getWktType(Types.wkt.Point, false) + '(' + this._getWktCoordinate(this) + ')';
		};

		Point.prototype.toWkb = function (parentOptions) {
		    var wkb = new BinaryWriter(this._getWkbSize());

		    wkb.writeInt8(1);
		    this._writeWkbType(wkb, Types.wkb.Point, parentOptions);

		    if (typeof this.x === 'undefined' && typeof this.y === 'undefined') {
		        wkb.writeDoubleLE(NaN);
		        wkb.writeDoubleLE(NaN);

		        if (this.hasZ)
		            wkb.writeDoubleLE(NaN);
		        if (this.hasM)
		            wkb.writeDoubleLE(NaN);
		    }
		    else {
		        this._writeWkbPoint(wkb);
		    }

		    return wkb.buffer;
		};

		Point.prototype._writeWkbPoint = function (wkb) {
		    wkb.writeDoubleLE(this.x);
		    wkb.writeDoubleLE(this.y);

		    if (this.hasZ)
		        wkb.writeDoubleLE(this.z);
		    if (this.hasM)
		        wkb.writeDoubleLE(this.m);
		};

		Point.prototype.toTwkb = function () {
		    var twkb = new BinaryWriter(0, true);

		    var precision = Geometry.getTwkbPrecision(5, 0, 0);
		    var isEmpty = typeof this.x === 'undefined' && typeof this.y === 'undefined';

		    this._writeTwkbHeader(twkb, Types.wkb.Point, precision, isEmpty);

		    if (!isEmpty)
		        this._writeTwkbPoint(twkb, precision, new Point(0, 0, 0, 0));

		    return twkb.buffer;
		};

		Point.prototype._writeTwkbPoint = function (twkb, precision, previousPoint) {
		    var x = this.x * precision.xyFactor;
		    var y = this.y * precision.xyFactor;
		    var z = this.z * precision.zFactor;
		    var m = this.m * precision.mFactor;

		    twkb.writeVarInt(ZigZag.encode(x - previousPoint.x));
		    twkb.writeVarInt(ZigZag.encode(y - previousPoint.y));
		    if (this.hasZ)
		        twkb.writeVarInt(ZigZag.encode(z - previousPoint.z));
		    if (this.hasM)
		        twkb.writeVarInt(ZigZag.encode(m - previousPoint.m));

		    previousPoint.x = x;
		    previousPoint.y = y;
		    previousPoint.z = z;
		    previousPoint.m = m;
		};

		Point.prototype._getWkbSize = function () {
		    var size = 1 + 4 + 8 + 8;

		    if (this.hasZ)
		        size += 8;
		    if (this.hasM)
		        size += 8;

		    return size;
		};

		Point.prototype.toGeoJSON = function (options) {
		    var geoJSON = Geometry.prototype.toGeoJSON.call(this, options);
		    geoJSON.type = Types.geoJSON.Point;

		    if (typeof this.x === 'undefined' && typeof this.y === 'undefined')
		        geoJSON.coordinates = [];
		    else if (typeof this.z !== 'undefined')
		        geoJSON.coordinates = [this.x, this.y, this.z];
		    else
		        geoJSON.coordinates = [this.x, this.y];

		    return geoJSON;
		};
		return point;
	}

	var linestring;
	var hasRequiredLinestring;

	function requireLinestring () {
		if (hasRequiredLinestring) return linestring;
		hasRequiredLinestring = 1;
		linestring = LineString;

		var util = require$$0$9;

		var Geometry = requireGeometry();
		var Types = requireTypes();
		var Point = requirePoint();
		var BinaryWriter = requireBinarywriter();

		function LineString(points, srid) {
		    Geometry.call(this);

		    this.points = points || [];
			this.srid = srid;

		    if (this.points.length > 0) {
		        this.hasZ = this.points[0].hasZ;
		        this.hasM = this.points[0].hasM;
		    }
		}

		util.inherits(LineString, Geometry);

		LineString.Z = function (points, srid) {
		    var lineString = new LineString(points, srid);
		    lineString.hasZ = true;
		    return lineString;
		};

		LineString.M = function (points, srid) {
		    var lineString = new LineString(points, srid);
		    lineString.hasM = true;
		    return lineString;
		};

		LineString.ZM = function (points, srid) {
		    var lineString = new LineString(points, srid);
		    lineString.hasZ = true;
		    lineString.hasM = true;
		    return lineString;
		};

		LineString._parseWkt = function (value, options) {
		    var lineString = new LineString();
		    lineString.srid = options.srid;
		    lineString.hasZ = options.hasZ;
		    lineString.hasM = options.hasM;

		    if (value.isMatch(['EMPTY']))
		        return lineString;

		    value.expectGroupStart();
		    lineString.points.push.apply(lineString.points, value.matchCoordinates(options));
		    value.expectGroupEnd();

		    return lineString;
		};

		LineString._parseWkb = function (value, options) {
		    var lineString = new LineString();
		    lineString.srid = options.srid;
		    lineString.hasZ = options.hasZ;
		    lineString.hasM = options.hasM;

		    var pointCount = value.readUInt32();

		    for (var i = 0; i < pointCount; i++)
		        lineString.points.push(Point._readWkbPoint(value, options));

		    return lineString;
		};

		LineString._parseTwkb = function (value, options) {
		    var lineString = new LineString();
		    lineString.hasZ = options.hasZ;
		    lineString.hasM = options.hasM;

		    if (options.isEmpty)
		        return lineString;

		    var previousPoint = new Point(0, 0, options.hasZ ? 0 : undefined, options.hasM ? 0 : undefined);
		    var pointCount = value.readVarInt();

		    for (var i = 0; i < pointCount; i++)
		        lineString.points.push(Point._readTwkbPoint(value, options, previousPoint));

		    return lineString;
		};

		LineString._parseGeoJSON = function (value) {
		    var lineString = new LineString();

		    if (value.coordinates.length > 0)
		        lineString.hasZ = value.coordinates[0].length > 2;

		    for (var i = 0; i < value.coordinates.length; i++)
		        lineString.points.push(Point._readGeoJSONPoint(value.coordinates[i]));

		    return lineString;
		};

		LineString.prototype.toWkt = function () {
		    if (this.points.length === 0)
		        return this._getWktType(Types.wkt.LineString, true);

		    return this._getWktType(Types.wkt.LineString, false) + this._toInnerWkt();
		};

		LineString.prototype._toInnerWkt = function () {
		    var innerWkt = '(';

		    for (var i = 0; i < this.points.length; i++)
		        innerWkt += this._getWktCoordinate(this.points[i]) + ',';

		    innerWkt = innerWkt.slice(0, -1);
		    innerWkt += ')';

		    return innerWkt;
		};

		LineString.prototype.toWkb = function (parentOptions) {
		    var wkb = new BinaryWriter(this._getWkbSize());

		    wkb.writeInt8(1);

		    this._writeWkbType(wkb, Types.wkb.LineString, parentOptions);
		    wkb.writeUInt32LE(this.points.length);

		    for (var i = 0; i < this.points.length; i++)
		        this.points[i]._writeWkbPoint(wkb);

		    return wkb.buffer;
		};

		LineString.prototype.toTwkb = function () {
		    var twkb = new BinaryWriter(0, true);

		    var precision = Geometry.getTwkbPrecision(5, 0, 0);
		    var isEmpty = this.points.length === 0;

		    this._writeTwkbHeader(twkb, Types.wkb.LineString, precision, isEmpty);

		    if (this.points.length > 0) {
		        twkb.writeVarInt(this.points.length);

		        var previousPoint = new Point(0, 0, 0, 0);
		        for (var i = 0; i < this.points.length; i++)
		            this.points[i]._writeTwkbPoint(twkb, precision, previousPoint);
		    }

		    return twkb.buffer;
		};

		LineString.prototype._getWkbSize = function () {
		    var coordinateSize = 16;

		    if (this.hasZ)
		        coordinateSize += 8;
		    if (this.hasM)
		        coordinateSize += 8;

		    return 1 + 4 + 4 + (this.points.length * coordinateSize);
		};

		LineString.prototype.toGeoJSON = function (options) {
		    var geoJSON = Geometry.prototype.toGeoJSON.call(this, options);
		    geoJSON.type = Types.geoJSON.LineString;
		    geoJSON.coordinates = [];

		    for (var i = 0; i < this.points.length; i++) {
		        if (this.hasZ)
		            geoJSON.coordinates.push([this.points[i].x, this.points[i].y, this.points[i].z]);
		        else
		            geoJSON.coordinates.push([this.points[i].x, this.points[i].y]);
		    }

		    return geoJSON;
		};
		return linestring;
	}

	var polygon;
	var hasRequiredPolygon;

	function requirePolygon () {
		if (hasRequiredPolygon) return polygon;
		hasRequiredPolygon = 1;
		polygon = Polygon;

		var util = require$$0$9;

		var Geometry = requireGeometry();
		var Types = requireTypes();
		var Point = requirePoint();
		var BinaryWriter = requireBinarywriter();

		function Polygon(exteriorRing, interiorRings, srid) {
		    Geometry.call(this);

		    this.exteriorRing = exteriorRing || [];
		    this.interiorRings = interiorRings || [];
			this.srid = srid;

		    if (this.exteriorRing.length > 0) {
		        this.hasZ = this.exteriorRing[0].hasZ;
		        this.hasM = this.exteriorRing[0].hasM;
		    }
		}

		util.inherits(Polygon, Geometry);

		Polygon.Z = function (exteriorRing, interiorRings, srid) {
		    var polygon = new Polygon(exteriorRing, interiorRings, srid);
		    polygon.hasZ = true;
		    return polygon;
		};

		Polygon.M = function (exteriorRing, interiorRings, srid) {
		    var polygon = new Polygon(exteriorRing, interiorRings, srid);
		    polygon.hasM = true;
		    return polygon;
		};

		Polygon.ZM = function (exteriorRing, interiorRings, srid) {
		    var polygon = new Polygon(exteriorRing, interiorRings, srid);
		    polygon.hasZ = true;
		    polygon.hasM = true;
		    return polygon;
		};

		Polygon._parseWkt = function (value, options) {
		    var polygon = new Polygon();
		    polygon.srid = options.srid;
		    polygon.hasZ = options.hasZ;
		    polygon.hasM = options.hasM;

		    if (value.isMatch(['EMPTY']))
		        return polygon;

		    value.expectGroupStart();

		    value.expectGroupStart();
		    polygon.exteriorRing.push.apply(polygon.exteriorRing, value.matchCoordinates(options));
		    value.expectGroupEnd();

		    while (value.isMatch([','])) {
		        value.expectGroupStart();
		        polygon.interiorRings.push(value.matchCoordinates(options));
		        value.expectGroupEnd();
		    }

		    value.expectGroupEnd();

		    return polygon;
		};

		Polygon._parseWkb = function (value, options) {
		    var polygon = new Polygon();
		    polygon.srid = options.srid;
		    polygon.hasZ = options.hasZ;
		    polygon.hasM = options.hasM;

		    var ringCount = value.readUInt32();

		    if (ringCount > 0) {
		        var exteriorRingCount = value.readUInt32();

		        for (var i = 0; i < exteriorRingCount; i++)
		            polygon.exteriorRing.push(Point._readWkbPoint(value, options));

		        for (i = 1; i < ringCount; i++) {
		            var interiorRing = [];

		            var interiorRingCount = value.readUInt32();

		            for (var j = 0; j < interiorRingCount; j++)
		                interiorRing.push(Point._readWkbPoint(value, options));

		            polygon.interiorRings.push(interiorRing);
		        }
		    }

		    return polygon;
		};

		Polygon._parseTwkb = function (value, options) {
		    var polygon = new Polygon();
		    polygon.hasZ = options.hasZ;
		    polygon.hasM = options.hasM;

		    if (options.isEmpty)
		        return polygon;

		    var previousPoint = new Point(0, 0, options.hasZ ? 0 : undefined, options.hasM ? 0 : undefined);
		    var ringCount = value.readVarInt();
		    var exteriorRingCount = value.readVarInt();

		    for (var i = 0; i < exteriorRingCount; i++)
		        polygon.exteriorRing.push(Point._readTwkbPoint(value, options, previousPoint));

		    for (i = 1; i < ringCount; i++) {
		        var interiorRing = [];

		        var interiorRingCount = value.readVarInt();

		        for (var j = 0; j < interiorRingCount; j++)
		            interiorRing.push(Point._readTwkbPoint(value, options, previousPoint));

		        polygon.interiorRings.push(interiorRing);
		    }

		    return polygon;
		};

		Polygon._parseGeoJSON = function (value) {
		    var polygon = new Polygon();

		    if (value.coordinates.length > 0 && value.coordinates[0].length > 0)
		        polygon.hasZ = value.coordinates[0][0].length > 2;

		    for (var i = 0; i < value.coordinates.length; i++) {
		        if (i > 0)
		            polygon.interiorRings.push([]);

		        for (var j = 0; j  < value.coordinates[i].length; j++) {
		            if (i === 0)
		                polygon.exteriorRing.push(Point._readGeoJSONPoint(value.coordinates[i][j]));
		            else
		                polygon.interiorRings[i - 1].push(Point._readGeoJSONPoint(value.coordinates[i][j]));
		        }
		    }

		    return polygon;
		};

		Polygon.prototype.toWkt = function () {
		    if (this.exteriorRing.length === 0)
		        return this._getWktType(Types.wkt.Polygon, true);

		    return this._getWktType(Types.wkt.Polygon, false) + this._toInnerWkt();
		};

		Polygon.prototype._toInnerWkt = function () {
		    var innerWkt = '((';

		    for (var i = 0; i < this.exteriorRing.length; i++)
		        innerWkt += this._getWktCoordinate(this.exteriorRing[i]) + ',';

		    innerWkt = innerWkt.slice(0, -1);
		    innerWkt += ')';

		    for (i = 0; i < this.interiorRings.length; i++) {
		        innerWkt += ',(';

		        for (var j = 0; j < this.interiorRings[i].length; j++) {
		            innerWkt += this._getWktCoordinate(this.interiorRings[i][j]) + ',';
		        }

		        innerWkt = innerWkt.slice(0, -1);
		        innerWkt += ')';
		    }

		    innerWkt += ')';

		    return innerWkt;
		};

		Polygon.prototype.toWkb = function (parentOptions) {
		    var wkb = new BinaryWriter(this._getWkbSize());

		    wkb.writeInt8(1);

		    this._writeWkbType(wkb, Types.wkb.Polygon, parentOptions);

		    if (this.exteriorRing.length > 0) {
		        wkb.writeUInt32LE(1 + this.interiorRings.length);
		        wkb.writeUInt32LE(this.exteriorRing.length);
		    }
		    else {
		        wkb.writeUInt32LE(0);
		    }

		    for (var i = 0; i < this.exteriorRing.length; i++)
		        this.exteriorRing[i]._writeWkbPoint(wkb);

		    for (i = 0; i < this.interiorRings.length; i++) {
		        wkb.writeUInt32LE(this.interiorRings[i].length);

		        for (var j = 0; j < this.interiorRings[i].length; j++)
		            this.interiorRings[i][j]._writeWkbPoint(wkb);
		    }

		    return wkb.buffer;
		};

		Polygon.prototype.toTwkb = function () {
		    var twkb = new BinaryWriter(0, true);

		    var precision = Geometry.getTwkbPrecision(5, 0, 0);
		    var isEmpty = this.exteriorRing.length === 0;

		    this._writeTwkbHeader(twkb, Types.wkb.Polygon, precision, isEmpty);

		    if (this.exteriorRing.length > 0) {
		        twkb.writeVarInt(1 + this.interiorRings.length);

		        twkb.writeVarInt(this.exteriorRing.length);

		        var previousPoint = new Point(0, 0, 0, 0);
		        for (var i = 0; i < this.exteriorRing.length; i++)
		            this.exteriorRing[i]._writeTwkbPoint(twkb, precision, previousPoint);

		        for (i = 0; i < this.interiorRings.length; i++) {
		            twkb.writeVarInt(this.interiorRings[i].length);

		            for (var j = 0; j < this.interiorRings[i].length; j++)
		                this.interiorRings[i][j]._writeTwkbPoint(twkb, precision, previousPoint);
		        }
		    }

		    return twkb.buffer;
		};

		Polygon.prototype._getWkbSize = function () {
		    var coordinateSize = 16;

		    if (this.hasZ)
		        coordinateSize += 8;
		    if (this.hasM)
		        coordinateSize += 8;

		    var size = 1 + 4 + 4;

		    if (this.exteriorRing.length > 0)
		        size += 4 + (this.exteriorRing.length * coordinateSize);

		    for (var i = 0; i < this.interiorRings.length; i++)
		        size += 4 + (this.interiorRings[i].length * coordinateSize);

		    return size;
		};

		Polygon.prototype.toGeoJSON = function (options) {
		    var geoJSON = Geometry.prototype.toGeoJSON.call(this, options);
		    geoJSON.type = Types.geoJSON.Polygon;
		    geoJSON.coordinates = [];

		    if (this.exteriorRing.length > 0) {
		        var exteriorRing = [];

		        for (var i = 0; i < this.exteriorRing.length; i++) {
		            if (this.hasZ)
		                exteriorRing.push([this.exteriorRing[i].x, this.exteriorRing[i].y, this.exteriorRing[i].z]);
		            else
		                exteriorRing.push([this.exteriorRing[i].x, this.exteriorRing[i].y]);
		        }

		        geoJSON.coordinates.push(exteriorRing);
		    }

		    for (var j = 0; j < this.interiorRings.length; j++) {
		        var interiorRing = [];

		        for (var k = 0; k < this.interiorRings[j].length; k++) {
		            if (this.hasZ)
		                interiorRing.push([this.interiorRings[j][k].x, this.interiorRings[j][k].y, this.interiorRings[j][k].z]);
		            else
		                interiorRing.push([this.interiorRings[j][k].x, this.interiorRings[j][k].y]);
		        }

		        geoJSON.coordinates.push(interiorRing);
		    }

		    return geoJSON;
		};
		return polygon;
	}

	var multipoint;
	var hasRequiredMultipoint;

	function requireMultipoint () {
		if (hasRequiredMultipoint) return multipoint;
		hasRequiredMultipoint = 1;
		multipoint = MultiPoint;

		var util = require$$0$9;

		var Types = requireTypes();
		var Geometry = requireGeometry();
		var Point = requirePoint();
		var BinaryWriter = requireBinarywriter();

		function MultiPoint(points, srid) {
		    Geometry.call(this);

		    this.points = points || [];
			this.srid = srid;
			
		    if (this.points.length > 0) {
		        this.hasZ = this.points[0].hasZ;
		        this.hasM = this.points[0].hasM;
		    }
		}

		util.inherits(MultiPoint, Geometry);

		MultiPoint.Z = function (points, srid) {
		    var multiPoint = new MultiPoint(points, srid);
		    multiPoint.hasZ = true;
		    return multiPoint;
		};

		MultiPoint.M = function (points, srid) {
		    var multiPoint = new MultiPoint(points, srid);
		    multiPoint.hasM = true;
		    return multiPoint;
		};

		MultiPoint.ZM = function (points, srid) {
		    var multiPoint = new MultiPoint(points, srid);
		    multiPoint.hasZ = true;
		    multiPoint.hasM = true;
		    return multiPoint;
		};

		MultiPoint._parseWkt = function (value, options) {
		    var multiPoint = new MultiPoint();
		    multiPoint.srid = options.srid;
		    multiPoint.hasZ = options.hasZ;
		    multiPoint.hasM = options.hasM;

		    if (value.isMatch(['EMPTY']))
		        return multiPoint;

		    value.expectGroupStart();
		    multiPoint.points.push.apply(multiPoint.points, value.matchCoordinates(options));
		    value.expectGroupEnd();

		    return multiPoint;
		};

		MultiPoint._parseWkb = function (value, options) {
		    var multiPoint = new MultiPoint();
		    multiPoint.srid = options.srid;
		    multiPoint.hasZ = options.hasZ;
		    multiPoint.hasM = options.hasM;

		    var pointCount = value.readUInt32();

		    for (var i = 0; i < pointCount; i++)
		        multiPoint.points.push(Geometry.parse(value, options));

		    return multiPoint;
		};

		MultiPoint._parseTwkb = function (value, options) {
		    var multiPoint = new MultiPoint();
		    multiPoint.hasZ = options.hasZ;
		    multiPoint.hasM = options.hasM;

		    if (options.isEmpty)
		        return multiPoint;

		    var previousPoint = new Point(0, 0, options.hasZ ? 0 : undefined, options.hasM ? 0 : undefined);
		    var pointCount = value.readVarInt();

		    for (var i = 0; i < pointCount; i++)
		        multiPoint.points.push(Point._readTwkbPoint(value, options, previousPoint));

		    return multiPoint;
		};

		MultiPoint._parseGeoJSON = function (value) {
		    var multiPoint = new MultiPoint();

		    if (value.coordinates.length > 0)
		        multiPoint.hasZ = value.coordinates[0].length > 2;

		    for (var i = 0; i < value.coordinates.length; i++)
		        multiPoint.points.push(Point._parseGeoJSON({ coordinates: value.coordinates[i] }));

		    return multiPoint;
		};

		MultiPoint.prototype.toWkt = function () {
		    if (this.points.length === 0)
		        return this._getWktType(Types.wkt.MultiPoint, true);

		    var wkt = this._getWktType(Types.wkt.MultiPoint, false) + '(';

		    for (var i = 0; i < this.points.length; i++)
		        wkt += this._getWktCoordinate(this.points[i]) + ',';

		    wkt = wkt.slice(0, -1);
		    wkt += ')';

		    return wkt;
		};

		MultiPoint.prototype.toWkb = function () {
		    var wkb = new BinaryWriter(this._getWkbSize());

		    wkb.writeInt8(1);

		    this._writeWkbType(wkb, Types.wkb.MultiPoint);
		    wkb.writeUInt32LE(this.points.length);

		    for (var i = 0; i < this.points.length; i++)
		        wkb.writeBuffer(this.points[i].toWkb({ srid: this.srid }));

		    return wkb.buffer;
		};

		MultiPoint.prototype.toTwkb = function () {
		    var twkb = new BinaryWriter(0, true);

		    var precision = Geometry.getTwkbPrecision(5, 0, 0);
		    var isEmpty = this.points.length === 0;

		    this._writeTwkbHeader(twkb, Types.wkb.MultiPoint, precision, isEmpty);

		    if (this.points.length > 0) {
		        twkb.writeVarInt(this.points.length);

		        var previousPoint = new Point(0, 0, 0, 0);
		        for (var i = 0; i < this.points.length; i++)
		            this.points[i]._writeTwkbPoint(twkb, precision, previousPoint);
		    }

		    return twkb.buffer;
		};

		MultiPoint.prototype._getWkbSize = function () {
		    var coordinateSize = 16;

		    if (this.hasZ)
		        coordinateSize += 8;
		    if (this.hasM)
		        coordinateSize += 8;

		    coordinateSize += 5;

		    return 1 + 4 + 4 + (this.points.length * coordinateSize);
		};

		MultiPoint.prototype.toGeoJSON = function (options) {
		    var geoJSON = Geometry.prototype.toGeoJSON.call(this, options);
		    geoJSON.type = Types.geoJSON.MultiPoint;
		    geoJSON.coordinates = [];

		    for (var i = 0; i < this.points.length; i++)
		        geoJSON.coordinates.push(this.points[i].toGeoJSON().coordinates);

		    return geoJSON;
		};
		return multipoint;
	}

	var multilinestring;
	var hasRequiredMultilinestring;

	function requireMultilinestring () {
		if (hasRequiredMultilinestring) return multilinestring;
		hasRequiredMultilinestring = 1;
		multilinestring = MultiLineString;

		var util = require$$0$9;

		var Types = requireTypes();
		var Geometry = requireGeometry();
		var Point = requirePoint();
		var LineString = requireLinestring();
		var BinaryWriter = requireBinarywriter();

		function MultiLineString(lineStrings, srid) {
		    Geometry.call(this);

		    this.lineStrings = lineStrings || [];
			this.srid = srid;

		    if (this.lineStrings.length > 0) {
		        this.hasZ = this.lineStrings[0].hasZ;
		        this.hasM = this.lineStrings[0].hasM;
		    }
		}

		util.inherits(MultiLineString, Geometry);

		MultiLineString.Z = function (lineStrings, srid) {
		    var multiLineString = new MultiLineString(lineStrings, srid);
		    multiLineString.hasZ = true;
		    return multiLineString;
		};

		MultiLineString.M = function (lineStrings, srid) {
		    var multiLineString = new MultiLineString(lineStrings, srid);
		    multiLineString.hasM = true;
		    return multiLineString;
		};

		MultiLineString.ZM = function (lineStrings, srid) {
		    var multiLineString = new MultiLineString(lineStrings, srid);
		    multiLineString.hasZ = true;
		    multiLineString.hasM = true;
		    return multiLineString;
		};

		MultiLineString._parseWkt = function (value, options) {
		    var multiLineString = new MultiLineString();
		    multiLineString.srid = options.srid;
		    multiLineString.hasZ = options.hasZ;
		    multiLineString.hasM = options.hasM;

		    if (value.isMatch(['EMPTY']))
		        return multiLineString;

		    value.expectGroupStart();

		    do {
		        value.expectGroupStart();
		        multiLineString.lineStrings.push(new LineString(value.matchCoordinates(options)));
		        value.expectGroupEnd();
		    } while (value.isMatch([',']));

		    value.expectGroupEnd();

		    return multiLineString;
		};

		MultiLineString._parseWkb = function (value, options) {
		    var multiLineString = new MultiLineString();
		    multiLineString.srid = options.srid;
		    multiLineString.hasZ = options.hasZ;
		    multiLineString.hasM = options.hasM;

		    var lineStringCount = value.readUInt32();

		    for (var i = 0; i < lineStringCount; i++)
		        multiLineString.lineStrings.push(Geometry.parse(value, options));

		    return multiLineString;
		};

		MultiLineString._parseTwkb = function (value, options) {
		    var multiLineString = new MultiLineString();
		    multiLineString.hasZ = options.hasZ;
		    multiLineString.hasM = options.hasM;

		    if (options.isEmpty)
		        return multiLineString;

		    var previousPoint = new Point(0, 0, options.hasZ ? 0 : undefined, options.hasM ? 0 : undefined);
		    var lineStringCount = value.readVarInt();

		    for (var i = 0; i < lineStringCount; i++) {
		        var lineString = new LineString();
		        lineString.hasZ = options.hasZ;
		        lineString.hasM = options.hasM;

		        var pointCount = value.readVarInt();

		        for (var j = 0; j < pointCount; j++)
		            lineString.points.push(Point._readTwkbPoint(value, options, previousPoint));

		        multiLineString.lineStrings.push(lineString);
		    }

		    return multiLineString;
		};

		MultiLineString._parseGeoJSON = function (value) {
		    var multiLineString = new MultiLineString();

		    if (value.coordinates.length > 0 && value.coordinates[0].length > 0)
		        multiLineString.hasZ = value.coordinates[0][0].length > 2;

		    for (var i = 0; i < value.coordinates.length; i++)
		        multiLineString.lineStrings.push(LineString._parseGeoJSON({ coordinates: value.coordinates[i] }));

		    return multiLineString;
		};

		MultiLineString.prototype.toWkt = function () {
		    if (this.lineStrings.length === 0)
		        return this._getWktType(Types.wkt.MultiLineString, true);

		    var wkt = this._getWktType(Types.wkt.MultiLineString, false) + '(';

		    for (var i = 0; i < this.lineStrings.length; i++)
		        wkt += this.lineStrings[i]._toInnerWkt() + ',';

		    wkt = wkt.slice(0, -1);
		    wkt += ')';

		    return wkt;
		};

		MultiLineString.prototype.toWkb = function () {
		    var wkb = new BinaryWriter(this._getWkbSize());

		    wkb.writeInt8(1);

		    this._writeWkbType(wkb, Types.wkb.MultiLineString);
		    wkb.writeUInt32LE(this.lineStrings.length);

		    for (var i = 0; i < this.lineStrings.length; i++)
		        wkb.writeBuffer(this.lineStrings[i].toWkb({ srid: this.srid }));

		    return wkb.buffer;
		};

		MultiLineString.prototype.toTwkb = function () {
		    var twkb = new BinaryWriter(0, true);

		    var precision = Geometry.getTwkbPrecision(5, 0, 0);
		    var isEmpty = this.lineStrings.length === 0;

		    this._writeTwkbHeader(twkb, Types.wkb.MultiLineString, precision, isEmpty);

		    if (this.lineStrings.length > 0) {
		        twkb.writeVarInt(this.lineStrings.length);

		        var previousPoint = new Point(0, 0, 0, 0);
		        for (var i = 0; i < this.lineStrings.length; i++) {
		            twkb.writeVarInt(this.lineStrings[i].points.length);

		            for (var j = 0; j < this.lineStrings[i].points.length; j++)
		                this.lineStrings[i].points[j]._writeTwkbPoint(twkb, precision, previousPoint);
		        }
		    }

		    return twkb.buffer;
		};

		MultiLineString.prototype._getWkbSize = function () {
		    var size = 1 + 4 + 4;

		    for (var i = 0; i < this.lineStrings.length; i++)
		        size += this.lineStrings[i]._getWkbSize();

		    return size;
		};

		MultiLineString.prototype.toGeoJSON = function (options) {
		    var geoJSON = Geometry.prototype.toGeoJSON.call(this, options);
		    geoJSON.type = Types.geoJSON.MultiLineString;
		    geoJSON.coordinates = [];

		    for (var i = 0; i < this.lineStrings.length; i++)
		        geoJSON.coordinates.push(this.lineStrings[i].toGeoJSON().coordinates);

		    return geoJSON;
		};
		return multilinestring;
	}

	var multipolygon;
	var hasRequiredMultipolygon;

	function requireMultipolygon () {
		if (hasRequiredMultipolygon) return multipolygon;
		hasRequiredMultipolygon = 1;
		multipolygon = MultiPolygon;

		var util = require$$0$9;

		var Types = requireTypes();
		var Geometry = requireGeometry();
		var Point = requirePoint();
		var Polygon = requirePolygon();
		var BinaryWriter = requireBinarywriter();

		function MultiPolygon(polygons, srid) {
		    Geometry.call(this);

		    this.polygons = polygons || [];
			this.srid = srid;

		    if (this.polygons.length > 0) {
		        this.hasZ = this.polygons[0].hasZ;
		        this.hasM = this.polygons[0].hasM;
		    }
		}

		util.inherits(MultiPolygon, Geometry);

		MultiPolygon.Z = function (polygons, srid) {
		    var multiPolygon = new MultiPolygon(polygons, srid);
		    multiPolygon.hasZ = true;
		    return multiPolygon;
		};

		MultiPolygon.M = function (polygons, srid) {
		    var multiPolygon = new MultiPolygon(polygons, srid);
		    multiPolygon.hasM = true;
		    return multiPolygon;
		};

		MultiPolygon.ZM = function (polygons, srid) {
		    var multiPolygon = new MultiPolygon(polygons, srid);
		    multiPolygon.hasZ = true;
		    multiPolygon.hasM = true;
		    return multiPolygon;
		};

		MultiPolygon._parseWkt = function (value, options) {
		    var multiPolygon = new MultiPolygon();
		    multiPolygon.srid = options.srid;
		    multiPolygon.hasZ = options.hasZ;
		    multiPolygon.hasM = options.hasM;

		    if (value.isMatch(['EMPTY']))
		        return multiPolygon;

		    value.expectGroupStart();

		    do {
		        value.expectGroupStart();

		        var exteriorRing = [];
		        var interiorRings = [];

		        value.expectGroupStart();
		        exteriorRing.push.apply(exteriorRing, value.matchCoordinates(options));
		        value.expectGroupEnd();

		        while (value.isMatch([','])) {
		            value.expectGroupStart();
		            interiorRings.push(value.matchCoordinates(options));
		            value.expectGroupEnd();
		        }

		        multiPolygon.polygons.push(new Polygon(exteriorRing, interiorRings));

		        value.expectGroupEnd();

		    } while (value.isMatch([',']));

		    value.expectGroupEnd();

		    return multiPolygon;
		};

		MultiPolygon._parseWkb = function (value, options) {
		    var multiPolygon = new MultiPolygon();
		    multiPolygon.srid = options.srid;
		    multiPolygon.hasZ = options.hasZ;
		    multiPolygon.hasM = options.hasM;

		    var polygonCount = value.readUInt32();

		    for (var i = 0; i < polygonCount; i++)
		        multiPolygon.polygons.push(Geometry.parse(value, options));

		    return multiPolygon;
		};

		MultiPolygon._parseTwkb = function (value, options) {
		    var multiPolygon = new MultiPolygon();
		    multiPolygon.hasZ = options.hasZ;
		    multiPolygon.hasM = options.hasM;

		    if (options.isEmpty)
		        return multiPolygon;

		    var previousPoint = new Point(0, 0, options.hasZ ? 0 : undefined, options.hasM ? 0 : undefined);
		    var polygonCount = value.readVarInt();

		    for (var i = 0; i < polygonCount; i++) {
		        var polygon = new Polygon();
		        polygon.hasZ = options.hasZ;
		        polygon.hasM = options.hasM;

		        var ringCount = value.readVarInt();
		        var exteriorRingCount = value.readVarInt();

		        for (var j = 0; j < exteriorRingCount; j++)
		            polygon.exteriorRing.push(Point._readTwkbPoint(value, options, previousPoint));

		        for (j = 1; j < ringCount; j++) {
		            var interiorRing = [];

		            var interiorRingCount = value.readVarInt();

		            for (var k = 0; k < interiorRingCount; k++)
		                interiorRing.push(Point._readTwkbPoint(value, options, previousPoint));

		            polygon.interiorRings.push(interiorRing);
		        }

		        multiPolygon.polygons.push(polygon);
		    }

		    return multiPolygon;
		};

		MultiPolygon._parseGeoJSON = function (value) {
		    var multiPolygon = new MultiPolygon();

		    if (value.coordinates.length > 0 && value.coordinates[0].length > 0 && value.coordinates[0][0].length > 0)
		        multiPolygon.hasZ = value.coordinates[0][0][0].length > 2;

		    for (var i = 0; i < value.coordinates.length; i++)
		        multiPolygon.polygons.push(Polygon._parseGeoJSON({ coordinates: value.coordinates[i] }));

		    return multiPolygon;
		};

		MultiPolygon.prototype.toWkt = function () {
		    if (this.polygons.length === 0)
		        return this._getWktType(Types.wkt.MultiPolygon, true);

		    var wkt = this._getWktType(Types.wkt.MultiPolygon, false) + '(';

		    for (var i = 0; i < this.polygons.length; i++)
		        wkt += this.polygons[i]._toInnerWkt() + ',';

		    wkt = wkt.slice(0, -1);
		    wkt += ')';

		    return wkt;
		};

		MultiPolygon.prototype.toWkb = function () {
		    var wkb = new BinaryWriter(this._getWkbSize());

		    wkb.writeInt8(1);

		    this._writeWkbType(wkb, Types.wkb.MultiPolygon);
		    wkb.writeUInt32LE(this.polygons.length);

		    for (var i = 0; i < this.polygons.length; i++)
		        wkb.writeBuffer(this.polygons[i].toWkb({ srid: this.srid }));

		    return wkb.buffer;
		};

		MultiPolygon.prototype.toTwkb = function () {
		    var twkb = new BinaryWriter(0, true);

		    var precision = Geometry.getTwkbPrecision(5, 0, 0);
		    var isEmpty = this.polygons.length === 0;

		    this._writeTwkbHeader(twkb, Types.wkb.MultiPolygon, precision, isEmpty);

		    if (this.polygons.length > 0) {
		        twkb.writeVarInt(this.polygons.length);

		        var previousPoint = new Point(0, 0, 0, 0);
		        for (var i = 0; i < this.polygons.length; i++) {
		            twkb.writeVarInt(1 + this.polygons[i].interiorRings.length);

		            twkb.writeVarInt(this.polygons[i].exteriorRing.length);

		            for (var j = 0; j < this.polygons[i].exteriorRing.length; j++)
		                this.polygons[i].exteriorRing[j]._writeTwkbPoint(twkb, precision, previousPoint);

		            for (j = 0; j < this.polygons[i].interiorRings.length; j++) {
		                twkb.writeVarInt(this.polygons[i].interiorRings[j].length);

		                for (var k = 0; k < this.polygons[i].interiorRings[j].length; k++)
		                    this.polygons[i].interiorRings[j][k]._writeTwkbPoint(twkb, precision, previousPoint);
		            }
		        }
		    }

		    return twkb.buffer;
		};

		MultiPolygon.prototype._getWkbSize = function () {
		    var size = 1 + 4 + 4;

		    for (var i = 0; i < this.polygons.length; i++)
		        size += this.polygons[i]._getWkbSize();

		    return size;
		};

		MultiPolygon.prototype.toGeoJSON = function (options) {
		    var geoJSON = Geometry.prototype.toGeoJSON.call(this, options);
		    geoJSON.type = Types.geoJSON.MultiPolygon;
		    geoJSON.coordinates = [];

		    for (var i = 0; i < this.polygons.length; i++)
		        geoJSON.coordinates.push(this.polygons[i].toGeoJSON().coordinates);

		    return geoJSON;
		};
		return multipolygon;
	}

	var geometrycollection;
	var hasRequiredGeometrycollection;

	function requireGeometrycollection () {
		if (hasRequiredGeometrycollection) return geometrycollection;
		hasRequiredGeometrycollection = 1;
		geometrycollection = GeometryCollection;

		var util = require$$0$9;

		var Types = requireTypes();
		var Geometry = requireGeometry();
		var BinaryWriter = requireBinarywriter();

		function GeometryCollection(geometries, srid) {
		    Geometry.call(this);

		    this.geometries = geometries || [];
			this.srid = srid;

		    if (this.geometries.length > 0) {
		        this.hasZ = this.geometries[0].hasZ;
		        this.hasM = this.geometries[0].hasM;
		    }
		}

		util.inherits(GeometryCollection, Geometry);

		GeometryCollection.Z = function (geometries, srid) {
		    var geometryCollection = new GeometryCollection(geometries, srid);
		    geometryCollection.hasZ = true;
		    return geometryCollection;
		};

		GeometryCollection.M = function (geometries, srid) {
		    var geometryCollection = new GeometryCollection(geometries, srid);
		    geometryCollection.hasM = true;
		    return geometryCollection;
		};

		GeometryCollection.ZM = function (geometries, srid) {
		    var geometryCollection = new GeometryCollection(geometries, srid);
		    geometryCollection.hasZ = true;
		    geometryCollection.hasM = true;
		    return geometryCollection;
		};

		GeometryCollection._parseWkt = function (value, options) {
		    var geometryCollection = new GeometryCollection();
		    geometryCollection.srid = options.srid;
		    geometryCollection.hasZ = options.hasZ;
		    geometryCollection.hasM = options.hasM;

		    if (value.isMatch(['EMPTY']))
		        return geometryCollection;

		    value.expectGroupStart();

		    do {
		        geometryCollection.geometries.push(Geometry.parse(value));
		    } while (value.isMatch([',']));

		    value.expectGroupEnd();

		    return geometryCollection;
		};

		GeometryCollection._parseWkb = function (value, options) {
		    var geometryCollection = new GeometryCollection();
		    geometryCollection.srid = options.srid;
		    geometryCollection.hasZ = options.hasZ;
		    geometryCollection.hasM = options.hasM;

		    var geometryCount = value.readUInt32();

		    for (var i = 0; i < geometryCount; i++)
		        geometryCollection.geometries.push(Geometry.parse(value, options));

		    return geometryCollection;
		};

		GeometryCollection._parseTwkb = function (value, options) {
		    var geometryCollection = new GeometryCollection();
		    geometryCollection.hasZ = options.hasZ;
		    geometryCollection.hasM = options.hasM;

		    if (options.isEmpty)
		        return geometryCollection;

		    var geometryCount = value.readVarInt();

		    for (var i = 0; i < geometryCount; i++)
		        geometryCollection.geometries.push(Geometry.parseTwkb(value));

		    return geometryCollection;
		};

		GeometryCollection._parseGeoJSON = function (value) {
		    var geometryCollection = new GeometryCollection();

		    for (var i = 0; i < value.geometries.length; i++)
		        geometryCollection.geometries.push(Geometry._parseGeoJSON(value.geometries[i], true));

		    if (geometryCollection.geometries.length > 0)
		        geometryCollection.hasZ = geometryCollection.geometries[0].hasZ;

		    return geometryCollection;
		};

		GeometryCollection.prototype.toWkt = function () {
		    if (this.geometries.length === 0)
		        return this._getWktType(Types.wkt.GeometryCollection, true);

		    var wkt = this._getWktType(Types.wkt.GeometryCollection, false) + '(';

		    for (var i = 0; i < this.geometries.length; i++)
		        wkt += this.geometries[i].toWkt() + ',';

		    wkt = wkt.slice(0, -1);
		    wkt += ')';

		    return wkt;
		};

		GeometryCollection.prototype.toWkb = function () {
		    var wkb = new BinaryWriter(this._getWkbSize());

		    wkb.writeInt8(1);

		    this._writeWkbType(wkb, Types.wkb.GeometryCollection);
		    wkb.writeUInt32LE(this.geometries.length);

		    for (var i = 0; i < this.geometries.length; i++)
		        wkb.writeBuffer(this.geometries[i].toWkb({ srid: this.srid }));

		    return wkb.buffer;
		};

		GeometryCollection.prototype.toTwkb = function () {
		    var twkb = new BinaryWriter(0, true);

		    var precision = Geometry.getTwkbPrecision(5, 0, 0);
		    var isEmpty = this.geometries.length === 0;

		    this._writeTwkbHeader(twkb, Types.wkb.GeometryCollection, precision, isEmpty);

		    if (this.geometries.length > 0) {
		        twkb.writeVarInt(this.geometries.length);

		        for (var i = 0; i < this.geometries.length; i++)
		            twkb.writeBuffer(this.geometries[i].toTwkb());
		    }

		    return twkb.buffer;
		};

		GeometryCollection.prototype._getWkbSize = function () {
		    var size = 1 + 4 + 4;

		    for (var i = 0; i < this.geometries.length; i++)
		        size += this.geometries[i]._getWkbSize();

		    return size;
		};

		GeometryCollection.prototype.toGeoJSON = function (options) {
		    var geoJSON = Geometry.prototype.toGeoJSON.call(this, options);
		    geoJSON.type = Types.geoJSON.GeometryCollection;
		    geoJSON.geometries = [];

		    for (var i = 0; i < this.geometries.length; i++)
		        geoJSON.geometries.push(this.geometries[i].toGeoJSON());

		    return geoJSON;
		};
		return geometrycollection;
	}

	var binaryreader;
	var hasRequiredBinaryreader;

	function requireBinaryreader () {
		if (hasRequiredBinaryreader) return binaryreader;
		hasRequiredBinaryreader = 1;
		binaryreader = BinaryReader;

		function BinaryReader(buffer, isBigEndian) {
		    this.buffer = buffer;
		    this.position = 0;
		    this.isBigEndian = isBigEndian || false;
		}

		function _read(readLE, readBE, size) {
		    return function () {
		        var value;

		        if (this.isBigEndian)
		            value = readBE.call(this.buffer, this.position);
		        else
		            value = readLE.call(this.buffer, this.position);

		        this.position += size;

		        return value;
		    };
		}

		BinaryReader.prototype.readUInt8 = _read(Buffer.prototype.readUInt8, Buffer.prototype.readUInt8, 1);
		BinaryReader.prototype.readUInt16 = _read(Buffer.prototype.readUInt16LE, Buffer.prototype.readUInt16BE, 2);
		BinaryReader.prototype.readUInt32 = _read(Buffer.prototype.readUInt32LE, Buffer.prototype.readUInt32BE, 4);
		BinaryReader.prototype.readInt8 = _read(Buffer.prototype.readInt8, Buffer.prototype.readInt8, 1);
		BinaryReader.prototype.readInt16 = _read(Buffer.prototype.readInt16LE, Buffer.prototype.readInt16BE, 2);
		BinaryReader.prototype.readInt32 = _read(Buffer.prototype.readInt32LE, Buffer.prototype.readInt32BE, 4);
		BinaryReader.prototype.readFloat = _read(Buffer.prototype.readFloatLE, Buffer.prototype.readFloatBE, 4);
		BinaryReader.prototype.readDouble = _read(Buffer.prototype.readDoubleLE, Buffer.prototype.readDoubleBE, 8);

		BinaryReader.prototype.readVarInt = function () {
		    var nextByte,
		        result = 0,
		        bytesRead = 0;

		    do {
		        nextByte = this.buffer[this.position + bytesRead];
		        result += (nextByte & 0x7F) << (7 * bytesRead);
		        bytesRead++;
		    } while (nextByte >= 0x80);

		    this.position += bytesRead;

		    return result;
		};
		return binaryreader;
	}

	var wktparser;
	var hasRequiredWktparser;

	function requireWktparser () {
		if (hasRequiredWktparser) return wktparser;
		hasRequiredWktparser = 1;
		wktparser = WktParser;

		var Types = requireTypes();
		var Point = requirePoint();

		function WktParser(value) {
		    this.value = value;
		    this.position = 0;
		}

		WktParser.prototype.match = function (tokens) {
		    this.skipWhitespaces();

		    for (var i = 0; i < tokens.length; i++) {
		        if (this.value.substring(this.position).indexOf(tokens[i]) === 0) {
		            this.position += tokens[i].length;
		            return tokens[i];
		        }
		    }

		    return null;
		};

		WktParser.prototype.matchRegex = function (tokens) {
		    this.skipWhitespaces();

		    for (var i = 0; i < tokens.length; i++) {
		        var match = this.value.substring(this.position).match(tokens[i]);

		        if (match) {
		            this.position += match[0].length;
		            return match;
		        }
		    }

		    return null;
		};

		WktParser.prototype.isMatch = function (tokens) {
		    this.skipWhitespaces();

		    for (var i = 0; i < tokens.length; i++) {
		        if (this.value.substring(this.position).indexOf(tokens[i]) === 0) {
		            this.position += tokens[i].length;
		            return true;
		        }
		    }

		    return false;
		};

		WktParser.prototype.matchType = function () {
		    var geometryType = this.match([Types.wkt.Point, Types.wkt.LineString, Types.wkt.Polygon, Types.wkt.MultiPoint,
		    Types.wkt.MultiLineString, Types.wkt.MultiPolygon, Types.wkt.GeometryCollection]);

		    if (!geometryType)
		        throw new Error('Expected geometry type');

		    return geometryType;
		};

		WktParser.prototype.matchDimension = function () {
		    var dimension = this.match(['ZM', 'Z', 'M']);

		    switch (dimension) {
		        case 'ZM': return { hasZ: true, hasM: true };
		        case 'Z': return { hasZ: true, hasM: false };
		        case 'M': return { hasZ: false, hasM: true };
		        default: return { hasZ: false, hasM: false };
		    }
		};

		WktParser.prototype.expectGroupStart = function () {
		    if (!this.isMatch(['(']))
		        throw new Error('Expected group start');
		};

		WktParser.prototype.expectGroupEnd = function () {
		    if (!this.isMatch([')']))
		        throw new Error('Expected group end');
		};

		WktParser.prototype.matchCoordinate = function (options) {
		    var match;

		    if (options.hasZ && options.hasM)
		        match = this.matchRegex([/^(\S*)\s+(\S*)\s+(\S*)\s+([^\s,)]*)/]);
		    else if (options.hasZ || options.hasM)
		        match = this.matchRegex([/^(\S*)\s+(\S*)\s+([^\s,)]*)/]);
		    else
		        match = this.matchRegex([/^(\S*)\s+([^\s,)]*)/]);

		    if (!match)
		        throw new Error('Expected coordinates');

		    if (options.hasZ && options.hasM)
		        return new Point(parseFloat(match[1]), parseFloat(match[2]), parseFloat(match[3]), parseFloat(match[4]));
		    else if (options.hasZ)
		        return new Point(parseFloat(match[1]), parseFloat(match[2]), parseFloat(match[3]));
		    else if (options.hasM)
		        return new Point(parseFloat(match[1]), parseFloat(match[2]), undefined, parseFloat(match[3]));
		    else
		        return new Point(parseFloat(match[1]), parseFloat(match[2]));
		};

		WktParser.prototype.matchCoordinates = function (options) {
		    var coordinates = [];

		    do {
		        var startsWithBracket = this.isMatch(['(']);

		        coordinates.push(this.matchCoordinate(options));

		        if (startsWithBracket)
		            this.expectGroupEnd();
		    } while (this.isMatch([',']));

		    return coordinates;
		};

		WktParser.prototype.skipWhitespaces = function () {
		    while (this.position < this.value.length && this.value[this.position] === ' ')
		        this.position++;
		};
		return wktparser;
	}

	var geometry;
	var hasRequiredGeometry;

	function requireGeometry () {
		if (hasRequiredGeometry) return geometry;
		hasRequiredGeometry = 1;
		geometry = Geometry;

		var Types = requireTypes();
		var Point = requirePoint();
		var LineString = requireLinestring();
		var Polygon = requirePolygon();
		var MultiPoint = requireMultipoint();
		var MultiLineString = requireMultilinestring();
		var MultiPolygon = requireMultipolygon();
		var GeometryCollection = requireGeometrycollection();
		var BinaryReader = requireBinaryreader();
		var BinaryWriter = requireBinarywriter();
		var WktParser = requireWktparser();
		var ZigZag = requireZigzag();

		function Geometry() {
		    this.srid = undefined;
		    this.hasZ = false;
		    this.hasM = false;
		}

		Geometry.parse = function (value, options) {
		    var valueType = typeof value;

		    if (valueType === 'string' || value instanceof WktParser)
		        return Geometry._parseWkt(value);
		    else if (Buffer.isBuffer(value) || value instanceof BinaryReader)
		        return Geometry._parseWkb(value, options);
		    else
		        throw new Error('first argument must be a string or Buffer');
		};

		Geometry._parseWkt = function (value) {
		    var wktParser,
		        srid;

		    if (value instanceof WktParser)
		        wktParser = value;
		    else
		        wktParser = new WktParser(value);

		    var match = wktParser.matchRegex([/^SRID=(\d+);/]);
		    if (match)
		        srid = parseInt(match[1], 10);

		    var geometryType = wktParser.matchType();
		    var dimension = wktParser.matchDimension();

		    var options = {
		        srid: srid,
		        hasZ: dimension.hasZ,
		        hasM: dimension.hasM
		    };

		    switch (geometryType) {
		        case Types.wkt.Point:
		            return Point._parseWkt(wktParser, options);
		        case Types.wkt.LineString:
		            return LineString._parseWkt(wktParser, options);
		        case Types.wkt.Polygon:
		            return Polygon._parseWkt(wktParser, options);
		        case Types.wkt.MultiPoint:
		            return MultiPoint._parseWkt(wktParser, options);
		        case Types.wkt.MultiLineString:
		            return MultiLineString._parseWkt(wktParser, options);
		        case Types.wkt.MultiPolygon:
		            return MultiPolygon._parseWkt(wktParser, options);
		        case Types.wkt.GeometryCollection:
		            return GeometryCollection._parseWkt(wktParser, options);
		    }
		};

		Geometry._parseWkb = function (value, parentOptions) {
		    var binaryReader,
		        wkbType,
		        geometryType,
		        options = {};

		    if (value instanceof BinaryReader)
		        binaryReader = value;
		    else
		        binaryReader = new BinaryReader(value);

		    binaryReader.isBigEndian = !binaryReader.readInt8();

		    wkbType = binaryReader.readUInt32();

		    options.hasSrid = (wkbType & 0x20000000) === 0x20000000;
		    options.isEwkb = (wkbType & 0x20000000) || (wkbType & 0x40000000) || (wkbType & 0x80000000);

		    if (options.hasSrid)
		        options.srid = binaryReader.readUInt32();

		    options.hasZ = false;
		    options.hasM = false;

		    if (!options.isEwkb && (!parentOptions || !parentOptions.isEwkb)) {
		        if (wkbType >= 1000 && wkbType < 2000) {
		            options.hasZ = true;
		            geometryType = wkbType - 1000;
		        }
		        else if (wkbType >= 2000 && wkbType < 3000) {
		            options.hasM = true;
		            geometryType = wkbType - 2000;
		        }
		        else if (wkbType >= 3000 && wkbType < 4000) {
		            options.hasZ = true;
		            options.hasM = true;
		            geometryType = wkbType - 3000;
		        }
		        else {
		            geometryType = wkbType;
		        }
		    }
		    else {
		        if (wkbType & 0x80000000)
		            options.hasZ = true;
		        if (wkbType & 0x40000000)
		            options.hasM = true;

		        geometryType = wkbType & 0xF;
		    }

		    switch (geometryType) {
		        case Types.wkb.Point:
		            return Point._parseWkb(binaryReader, options);
		        case Types.wkb.LineString:
		            return LineString._parseWkb(binaryReader, options);
		        case Types.wkb.Polygon:
		            return Polygon._parseWkb(binaryReader, options);
		        case Types.wkb.MultiPoint:
		            return MultiPoint._parseWkb(binaryReader, options);
		        case Types.wkb.MultiLineString:
		            return MultiLineString._parseWkb(binaryReader, options);
		        case Types.wkb.MultiPolygon:
		            return MultiPolygon._parseWkb(binaryReader, options);
		        case Types.wkb.GeometryCollection:
		            return GeometryCollection._parseWkb(binaryReader, options);
		        default:
		            throw new Error('GeometryType ' + geometryType + ' not supported');
		    }
		};

		Geometry.parseTwkb = function (value) {
		    var binaryReader,
		        options = {};

		    if (value instanceof BinaryReader)
		        binaryReader = value;
		    else
		        binaryReader = new BinaryReader(value);

		    var type = binaryReader.readUInt8();
		    var metadataHeader = binaryReader.readUInt8();

		    var geometryType = type & 0x0F;
		    options.precision = ZigZag.decode(type >> 4);
		    options.precisionFactor = Math.pow(10, options.precision);

		    options.hasBoundingBox = metadataHeader >> 0 & 1;
		    options.hasSizeAttribute = metadataHeader >> 1 & 1;
		    options.hasIdList = metadataHeader >> 2 & 1;
		    options.hasExtendedPrecision = metadataHeader >> 3 & 1;
		    options.isEmpty = metadataHeader >> 4 & 1;

		    if (options.hasExtendedPrecision) {
		        var extendedPrecision = binaryReader.readUInt8();
		        options.hasZ = (extendedPrecision & 0x01) === 0x01;
		        options.hasM = (extendedPrecision & 0x02) === 0x02;

		        options.zPrecision = ZigZag.decode((extendedPrecision & 0x1C) >> 2);
		        options.zPrecisionFactor = Math.pow(10, options.zPrecision);

		        options.mPrecision = ZigZag.decode((extendedPrecision & 0xE0) >> 5);
		        options.mPrecisionFactor = Math.pow(10, options.mPrecision);
		    }
		    else {
		        options.hasZ = false;
		        options.hasM = false;
		    }

		    if (options.hasSizeAttribute)
		        binaryReader.readVarInt();
		    if (options.hasBoundingBox) {
		        var dimensions = 2;

		        if (options.hasZ)
		            dimensions++;
		        if (options.hasM)
		            dimensions++;

		        for (var i = 0; i < dimensions; i++) {
		            binaryReader.readVarInt();
		            binaryReader.readVarInt();
		        }
		    }

		    switch (geometryType) {
		        case Types.wkb.Point:
		            return Point._parseTwkb(binaryReader, options);
		        case Types.wkb.LineString:
		            return LineString._parseTwkb(binaryReader, options);
		        case Types.wkb.Polygon:
		            return Polygon._parseTwkb(binaryReader, options);
		        case Types.wkb.MultiPoint:
		            return MultiPoint._parseTwkb(binaryReader, options);
		        case Types.wkb.MultiLineString:
		            return MultiLineString._parseTwkb(binaryReader, options);
		        case Types.wkb.MultiPolygon:
		            return MultiPolygon._parseTwkb(binaryReader, options);
		        case Types.wkb.GeometryCollection:
		            return GeometryCollection._parseTwkb(binaryReader, options);
		        default:
		            throw new Error('GeometryType ' + geometryType + ' not supported');
		    }
		};

		Geometry.parseGeoJSON = function (value) {
		    return Geometry._parseGeoJSON(value);
		};

		Geometry._parseGeoJSON = function (value, isSubGeometry) {
		    var geometry;

		    switch (value.type) {
		        case Types.geoJSON.Point:
		            geometry = Point._parseGeoJSON(value); break;
		        case Types.geoJSON.LineString:
		            geometry = LineString._parseGeoJSON(value); break;
		        case Types.geoJSON.Polygon:
		            geometry = Polygon._parseGeoJSON(value); break;
		        case Types.geoJSON.MultiPoint:
		            geometry = MultiPoint._parseGeoJSON(value); break;
		        case Types.geoJSON.MultiLineString:
		            geometry = MultiLineString._parseGeoJSON(value); break;
		        case Types.geoJSON.MultiPolygon:
		            geometry = MultiPolygon._parseGeoJSON(value); break;
		        case Types.geoJSON.GeometryCollection:
		            geometry = GeometryCollection._parseGeoJSON(value); break;
		        default:
		            throw new Error('GeometryType ' + value.type + ' not supported');
		    }

		    if (value.crs && value.crs.type && value.crs.type === 'name' && value.crs.properties && value.crs.properties.name) {
		        var crs = value.crs.properties.name;

		        if (crs.indexOf('EPSG:') === 0)
		            geometry.srid = parseInt(crs.substring(5));
		        else if (crs.indexOf('urn:ogc:def:crs:EPSG::') === 0)
		            geometry.srid = parseInt(crs.substring(22));
		        else
		            throw new Error('Unsupported crs: ' + crs);
		    }
		    else if (!isSubGeometry) {
		        geometry.srid = 4326;
		    }

		    return geometry;
		};

		Geometry.prototype.toEwkt = function () {
		    return 'SRID=' + this.srid + ';' + this.toWkt();
		};

		Geometry.prototype.toEwkb = function () {
		    var ewkb = new BinaryWriter(this._getWkbSize() + 4);
		    var wkb = this.toWkb();

		    ewkb.writeInt8(1);
		    ewkb.writeUInt32LE((wkb.slice(1, 5).readUInt32LE(0) | 0x20000000) >>> 0, true);
		    ewkb.writeUInt32LE(this.srid);

		    ewkb.writeBuffer(wkb.slice(5));

		    return ewkb.buffer;
		};

		Geometry.prototype._getWktType = function (wktType, isEmpty) {
		    var wkt = wktType;

		    if (this.hasZ && this.hasM)
		        wkt += ' ZM ';
		    else if (this.hasZ)
		        wkt += ' Z ';
		    else if (this.hasM)
		        wkt += ' M ';

		    if (isEmpty && !this.hasZ && !this.hasM)
		        wkt += ' ';

		    if (isEmpty)
		        wkt += 'EMPTY';

		    return wkt;
		};

		Geometry.prototype._getWktCoordinate = function (point) {
		    var coordinates = point.x + ' ' + point.y;

		    if (this.hasZ)
		        coordinates += ' ' + point.z;
		    if (this.hasM)
		        coordinates += ' ' + point.m;

		    return coordinates;
		};

		Geometry.prototype._writeWkbType = function (wkb, geometryType, parentOptions) {
		    var dimensionType = 0;

		    if (typeof this.srid === 'undefined' && (!parentOptions || typeof parentOptions.srid === 'undefined')) {
		        if (this.hasZ && this.hasM)
		            dimensionType += 3000;
		        else if (this.hasZ)
		            dimensionType += 1000;
		        else if (this.hasM)
		            dimensionType += 2000;
		    }
		    else {
		        if (this.hasZ)
		            dimensionType |= 0x80000000;
		        if (this.hasM)
		            dimensionType |= 0x40000000;
		    }

		    wkb.writeUInt32LE((dimensionType + geometryType) >>> 0, true);
		};

		Geometry.getTwkbPrecision = function (xyPrecision, zPrecision, mPrecision) {
		    return {
		        xy: xyPrecision,
		        z: zPrecision,
		        m: mPrecision,
		        xyFactor: Math.pow(10, xyPrecision),
		        zFactor: Math.pow(10, zPrecision),
		        mFactor: Math.pow(10, mPrecision)
		    };
		};

		Geometry.prototype._writeTwkbHeader = function (twkb, geometryType, precision, isEmpty) {
		    var type = (ZigZag.encode(precision.xy) << 4) + geometryType;
		    var metadataHeader = (this.hasZ || this.hasM) << 3;
		    metadataHeader += isEmpty << 4;

		    twkb.writeUInt8(type);
		    twkb.writeUInt8(metadataHeader);

		    if (this.hasZ || this.hasM) {
		        var extendedPrecision = 0;
		        if (this.hasZ)
		            extendedPrecision |= 0x1;
		        if (this.hasM)
		            extendedPrecision |= 0x2;

		        twkb.writeUInt8(extendedPrecision);
		    }
		};

		Geometry.prototype.toGeoJSON = function (options) {
		    var geoJSON = {};

		    if (this.srid) {
		        if (options) {
		            if (options.shortCrs) {
		                geoJSON.crs = {
		                    type: 'name',
		                    properties: {
		                        name: 'EPSG:' + this.srid
		                    }
		                };
		            }
		            else if (options.longCrs) {
		                geoJSON.crs = {
		                    type: 'name',
		                    properties: {
		                        name: 'urn:ogc:def:crs:EPSG::' + this.srid
		                    }
		                };
		            }
		        }
		    }

		    return geoJSON;
		};
		return geometry;
	}

	var hasRequiredWkx;

	function requireWkx () {
		if (hasRequiredWkx) return wkx;
		hasRequiredWkx = 1;
		wkx.Types = requireTypes();
		wkx.Geometry = requireGeometry();
		wkx.Point = requirePoint();
		wkx.LineString = requireLinestring();
		wkx.Polygon = requirePolygon();
		wkx.MultiPoint = requireMultipoint();
		wkx.MultiLineString = requireMultilinestring();
		wkx.MultiPolygon = requireMultipolygon();
		wkx.GeometryCollection = requireGeometrycollection();
		return wkx;
	}

	var dataTypes_db$1;
	var hasRequiredDataTypes_db$1;

	function requireDataTypes_db$1 () {
		if (hasRequiredDataTypes_db$1) return dataTypes_db$1;
		hasRequiredDataTypes_db$1 = 1;
		var __create = Object.create;
		var __defProp = Object.defineProperty;
		var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
		var __getOwnPropNames = Object.getOwnPropertyNames;
		var __getProtoOf = Object.getPrototypeOf;
		var __hasOwnProp = Object.prototype.hasOwnProperty;
		var __export = (target, all) => {
		  for (var name in all)
		    __defProp(target, name, { get: all[name], enumerable: true });
		};
		var __copyProps = (to, from, except, desc) => {
		  if (from && typeof from === "object" || typeof from === "function") {
		    for (let key of __getOwnPropNames(from))
		      if (!__hasOwnProp.call(to, key) && key !== except)
		        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
		  }
		  return to;
		};
		var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
		  // If the importer is in node compatibility mode or this is not an ESM
		  // file that has been converted to a CommonJS file using a Babel-
		  // compatible transform (i.e. "__esModule" has not been set), then set
		  // "default" to the CommonJS "module.exports" for node compatibility.
		  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
		  mod
		));
		var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
		var data_types_db_exports = {};
		__export(data_types_db_exports, {
		  registerMySqlDbDataTypeParsers: () => registerMySqlDbDataTypeParsers
		});
		dataTypes_db$1 = __toCommonJS(data_types_db_exports);
		var import_dayjs = __toESM(dayjs_minExports);
		var import_wkx = __toESM(requireWkx());
		var import_dayjs2 = dayjs;
		function registerMySqlDbDataTypeParsers(dialect) {
		  dialect.registerDataTypeParser(["DATETIME"], (value) => {
		    const valueStr = value.string();
		    if (valueStr === null) {
		      return null;
		    }
		    const timeZone = dialect.sequelize.options.timezone;
		    if (timeZone === "+00:00") {
		      return `${valueStr}+00`;
		    }
		    if ((0, import_dayjs2.isValidTimeZone)(timeZone)) {
		      return import_dayjs.default.tz(valueStr, timeZone).toISOString();
		    }
		    return valueStr + timeZone;
		  });
		  dialect.registerDataTypeParser(["DATE"], (value) => {
		    return value.string();
		  });
		  dialect.registerDataTypeParser(["LONGLONG"], (value) => {
		    return value.string();
		  });
		  dialect.registerDataTypeParser(["GEOMETRY"], (value) => {
		    let buffer = value.buffer();
		    if (!buffer || buffer.length === 0) {
		      return null;
		    }
		    buffer = buffer.slice(4);
		    return import_wkx.default.Geometry.parse(buffer).toGeoJSON({ shortCrs: true });
		  });
		}
		
		return dataTypes_db$1;
	}

	var mysqlUtils;
	var hasRequiredMysqlUtils;

	function requireMysqlUtils () {
		if (hasRequiredMysqlUtils) return mysqlUtils;
		hasRequiredMysqlUtils = 1;
		var __defProp = Object.defineProperty;
		var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
		var __getOwnPropNames = Object.getOwnPropertyNames;
		var __hasOwnProp = Object.prototype.hasOwnProperty;
		var __export = (target, all) => {
		  for (var name in all)
		    __defProp(target, name, { get: all[name], enumerable: true });
		};
		var __copyProps = (to, from, except, desc) => {
		  if (from && typeof from === "object" || typeof from === "function") {
		    for (let key of __getOwnPropNames(from))
		      if (!__hasOwnProp.call(to, key) && key !== except)
		        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
		  }
		  return to;
		};
		var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
		var mysql_utils_exports = {};
		__export(mysql_utils_exports, {
		  escapeMysqlString: () => escapeMysqlString
		});
		mysqlUtils = __toCommonJS(mysql_utils_exports);
		function escapeMysqlString(value) {
		  value = value.replaceAll(/[\b\0\t\n\r\u001A'\\]/g, (s) => {
		    switch (s) {
		      case "\0":
		        return "\\0";
		      case "\n":
		        return "\\n";
		      case "\r":
		        return "\\r";
		      case "\b":
		        return "\\b";
		      case "	":
		        return "\\t";
		      case "":
		        return "\\Z";
		      default:
		        return `\\${s}`;
		    }
		  });
		  return `'${value}'`;
		}
		
		return mysqlUtils;
	}

	var re = {exports: {}};

	var constants;
	var hasRequiredConstants;

	function requireConstants () {
		if (hasRequiredConstants) return constants;
		hasRequiredConstants = 1;
		// Note: this is the semver.org version of the spec that it implements
		// Not necessarily the package version of this code.
		const SEMVER_SPEC_VERSION = '2.0.0';

		const MAX_LENGTH = 256;
		const MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER ||
		/* istanbul ignore next */ 9007199254740991;

		// Max safe segment length for coercion.
		const MAX_SAFE_COMPONENT_LENGTH = 16;

		// Max safe length for a build identifier. The max length minus 6 characters for
		// the shortest version with a build 0.0.0+BUILD.
		const MAX_SAFE_BUILD_LENGTH = MAX_LENGTH - 6;

		const RELEASE_TYPES = [
		  'major',
		  'premajor',
		  'minor',
		  'preminor',
		  'patch',
		  'prepatch',
		  'prerelease',
		];

		constants = {
		  MAX_LENGTH,
		  MAX_SAFE_COMPONENT_LENGTH,
		  MAX_SAFE_BUILD_LENGTH,
		  MAX_SAFE_INTEGER,
		  RELEASE_TYPES,
		  SEMVER_SPEC_VERSION,
		  FLAG_INCLUDE_PRERELEASE: 0b001,
		  FLAG_LOOSE: 0b010,
		};
		return constants;
	}

	var debug_1;
	var hasRequiredDebug;

	function requireDebug () {
		if (hasRequiredDebug) return debug_1;
		hasRequiredDebug = 1;
		const debug = (
		  typeof process === 'object' &&
		  process.env &&
		  process.env.NODE_DEBUG &&
		  /\bsemver\b/i.test(process.env.NODE_DEBUG)
		) ? (...args) => console.error('SEMVER', ...args)
		  : () => {};

		debug_1 = debug;
		return debug_1;
	}

	var hasRequiredRe;

	function requireRe () {
		if (hasRequiredRe) return re.exports;
		hasRequiredRe = 1;
		(function (module, exports) {
			const { MAX_SAFE_COMPONENT_LENGTH, MAX_SAFE_BUILD_LENGTH } = requireConstants();
			const debug = requireDebug();
			exports = module.exports = {};

			// The actual regexps go on exports.re
			const re = exports.re = [];
			const safeRe = exports.safeRe = [];
			const src = exports.src = [];
			const t = exports.t = {};
			let R = 0;

			const LETTERDASHNUMBER = '[a-zA-Z0-9-]';

			// Replace some greedy regex tokens to prevent regex dos issues. These regex are
			// used internally via the safeRe object since all inputs in this library get
			// normalized first to trim and collapse all extra whitespace. The original
			// regexes are exported for userland consumption and lower level usage. A
			// future breaking change could export the safer regex only with a note that
			// all input should have extra whitespace removed.
			const safeRegexReplacements = [
			  ['\\s', 1],
			  ['\\d', MAX_SAFE_COMPONENT_LENGTH],
			  [LETTERDASHNUMBER, MAX_SAFE_BUILD_LENGTH],
			];

			const makeSafeRegex = (value) => {
			  for (const [token, max] of safeRegexReplacements) {
			    value = value
			      .split(`${token}*`).join(`${token}{0,${max}}`)
			      .split(`${token}+`).join(`${token}{1,${max}}`);
			  }
			  return value
			};

			const createToken = (name, value, isGlobal) => {
			  const safe = makeSafeRegex(value);
			  const index = R++;
			  debug(name, index, value);
			  t[name] = index;
			  src[index] = value;
			  re[index] = new RegExp(value, isGlobal ? 'g' : undefined);
			  safeRe[index] = new RegExp(safe, isGlobal ? 'g' : undefined);
			};

			// The following Regular Expressions can be used for tokenizing,
			// validating, and parsing SemVer version strings.

			// ## Numeric Identifier
			// A single `0`, or a non-zero digit followed by zero or more digits.

			createToken('NUMERICIDENTIFIER', '0|[1-9]\\d*');
			createToken('NUMERICIDENTIFIERLOOSE', '\\d+');

			// ## Non-numeric Identifier
			// Zero or more digits, followed by a letter or hyphen, and then zero or
			// more letters, digits, or hyphens.

			createToken('NONNUMERICIDENTIFIER', `\\d*[a-zA-Z-]${LETTERDASHNUMBER}*`);

			// ## Main Version
			// Three dot-separated numeric identifiers.

			createToken('MAINVERSION', `(${src[t.NUMERICIDENTIFIER]})\\.` +
			                   `(${src[t.NUMERICIDENTIFIER]})\\.` +
			                   `(${src[t.NUMERICIDENTIFIER]})`);

			createToken('MAINVERSIONLOOSE', `(${src[t.NUMERICIDENTIFIERLOOSE]})\\.` +
			                        `(${src[t.NUMERICIDENTIFIERLOOSE]})\\.` +
			                        `(${src[t.NUMERICIDENTIFIERLOOSE]})`);

			// ## Pre-release Version Identifier
			// A numeric identifier, or a non-numeric identifier.

			createToken('PRERELEASEIDENTIFIER', `(?:${src[t.NUMERICIDENTIFIER]
		}|${src[t.NONNUMERICIDENTIFIER]})`);

			createToken('PRERELEASEIDENTIFIERLOOSE', `(?:${src[t.NUMERICIDENTIFIERLOOSE]
		}|${src[t.NONNUMERICIDENTIFIER]})`);

			// ## Pre-release Version
			// Hyphen, followed by one or more dot-separated pre-release version
			// identifiers.

			createToken('PRERELEASE', `(?:-(${src[t.PRERELEASEIDENTIFIER]
		}(?:\\.${src[t.PRERELEASEIDENTIFIER]})*))`);

			createToken('PRERELEASELOOSE', `(?:-?(${src[t.PRERELEASEIDENTIFIERLOOSE]
		}(?:\\.${src[t.PRERELEASEIDENTIFIERLOOSE]})*))`);

			// ## Build Metadata Identifier
			// Any combination of digits, letters, or hyphens.

			createToken('BUILDIDENTIFIER', `${LETTERDASHNUMBER}+`);

			// ## Build Metadata
			// Plus sign, followed by one or more period-separated build metadata
			// identifiers.

			createToken('BUILD', `(?:\\+(${src[t.BUILDIDENTIFIER]
		}(?:\\.${src[t.BUILDIDENTIFIER]})*))`);

			// ## Full Version String
			// A main version, followed optionally by a pre-release version and
			// build metadata.

			// Note that the only major, minor, patch, and pre-release sections of
			// the version string are capturing groups.  The build metadata is not a
			// capturing group, because it should not ever be used in version
			// comparison.

			createToken('FULLPLAIN', `v?${src[t.MAINVERSION]
		}${src[t.PRERELEASE]}?${
		  src[t.BUILD]}?`);

			createToken('FULL', `^${src[t.FULLPLAIN]}$`);

			// like full, but allows v1.2.3 and =1.2.3, which people do sometimes.
			// also, 1.0.0alpha1 (prerelease without the hyphen) which is pretty
			// common in the npm registry.
			createToken('LOOSEPLAIN', `[v=\\s]*${src[t.MAINVERSIONLOOSE]
		}${src[t.PRERELEASELOOSE]}?${
		  src[t.BUILD]}?`);

			createToken('LOOSE', `^${src[t.LOOSEPLAIN]}$`);

			createToken('GTLT', '((?:<|>)?=?)');

			// Something like "2.*" or "1.2.x".
			// Note that "x.x" is a valid xRange identifer, meaning "any version"
			// Only the first item is strictly required.
			createToken('XRANGEIDENTIFIERLOOSE', `${src[t.NUMERICIDENTIFIERLOOSE]}|x|X|\\*`);
			createToken('XRANGEIDENTIFIER', `${src[t.NUMERICIDENTIFIER]}|x|X|\\*`);

			createToken('XRANGEPLAIN', `[v=\\s]*(${src[t.XRANGEIDENTIFIER]})` +
			                   `(?:\\.(${src[t.XRANGEIDENTIFIER]})` +
			                   `(?:\\.(${src[t.XRANGEIDENTIFIER]})` +
			                   `(?:${src[t.PRERELEASE]})?${
		                     src[t.BUILD]}?` +
			                   `)?)?`);

			createToken('XRANGEPLAINLOOSE', `[v=\\s]*(${src[t.XRANGEIDENTIFIERLOOSE]})` +
			                        `(?:\\.(${src[t.XRANGEIDENTIFIERLOOSE]})` +
			                        `(?:\\.(${src[t.XRANGEIDENTIFIERLOOSE]})` +
			                        `(?:${src[t.PRERELEASELOOSE]})?${
		                          src[t.BUILD]}?` +
			                        `)?)?`);

			createToken('XRANGE', `^${src[t.GTLT]}\\s*${src[t.XRANGEPLAIN]}$`);
			createToken('XRANGELOOSE', `^${src[t.GTLT]}\\s*${src[t.XRANGEPLAINLOOSE]}$`);

			// Coercion.
			// Extract anything that could conceivably be a part of a valid semver
			createToken('COERCE', `${'(^|[^\\d])' +
		              '(\\d{1,'}${MAX_SAFE_COMPONENT_LENGTH}})` +
			              `(?:\\.(\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?` +
			              `(?:\\.(\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?` +
			              `(?:$|[^\\d])`);
			createToken('COERCERTL', src[t.COERCE], true);

			// Tilde ranges.
			// Meaning is "reasonably at or greater than"
			createToken('LONETILDE', '(?:~>?)');

			createToken('TILDETRIM', `(\\s*)${src[t.LONETILDE]}\\s+`, true);
			exports.tildeTrimReplace = '$1~';

			createToken('TILDE', `^${src[t.LONETILDE]}${src[t.XRANGEPLAIN]}$`);
			createToken('TILDELOOSE', `^${src[t.LONETILDE]}${src[t.XRANGEPLAINLOOSE]}$`);

			// Caret ranges.
			// Meaning is "at least and backwards compatible with"
			createToken('LONECARET', '(?:\\^)');

			createToken('CARETTRIM', `(\\s*)${src[t.LONECARET]}\\s+`, true);
			exports.caretTrimReplace = '$1^';

			createToken('CARET', `^${src[t.LONECARET]}${src[t.XRANGEPLAIN]}$`);
			createToken('CARETLOOSE', `^${src[t.LONECARET]}${src[t.XRANGEPLAINLOOSE]}$`);

			// A simple gt/lt/eq thing, or just "" to indicate "any version"
			createToken('COMPARATORLOOSE', `^${src[t.GTLT]}\\s*(${src[t.LOOSEPLAIN]})$|^$`);
			createToken('COMPARATOR', `^${src[t.GTLT]}\\s*(${src[t.FULLPLAIN]})$|^$`);

			// An expression to strip any whitespace between the gtlt and the thing
			// it modifies, so that `> 1.2.3` ==> `>1.2.3`
			createToken('COMPARATORTRIM', `(\\s*)${src[t.GTLT]
		}\\s*(${src[t.LOOSEPLAIN]}|${src[t.XRANGEPLAIN]})`, true);
			exports.comparatorTrimReplace = '$1$2$3';

			// Something like `1.2.3 - 1.2.4`
			// Note that these all use the loose form, because they'll be
			// checked against either the strict or loose comparator form
			// later.
			createToken('HYPHENRANGE', `^\\s*(${src[t.XRANGEPLAIN]})` +
			                   `\\s+-\\s+` +
			                   `(${src[t.XRANGEPLAIN]})` +
			                   `\\s*$`);

			createToken('HYPHENRANGELOOSE', `^\\s*(${src[t.XRANGEPLAINLOOSE]})` +
			                        `\\s+-\\s+` +
			                        `(${src[t.XRANGEPLAINLOOSE]})` +
			                        `\\s*$`);

			// Star ranges basically just allow anything at all.
			createToken('STAR', '(<|>)?=?\\s*\\*');
			// >=0.0.0 is like a star
			createToken('GTE0', '^\\s*>=\\s*0\\.0\\.0\\s*$');
			createToken('GTE0PRE', '^\\s*>=\\s*0\\.0\\.0-0\\s*$'); 
		} (re, re.exports));
		return re.exports;
	}

	var parseOptions_1;
	var hasRequiredParseOptions;

	function requireParseOptions () {
		if (hasRequiredParseOptions) return parseOptions_1;
		hasRequiredParseOptions = 1;
		// parse out just the options we care about
		const looseOption = Object.freeze({ loose: true });
		const emptyOpts = Object.freeze({ });
		const parseOptions = options => {
		  if (!options) {
		    return emptyOpts
		  }

		  if (typeof options !== 'object') {
		    return looseOption
		  }

		  return options
		};
		parseOptions_1 = parseOptions;
		return parseOptions_1;
	}

	var identifiers;
	var hasRequiredIdentifiers;

	function requireIdentifiers () {
		if (hasRequiredIdentifiers) return identifiers;
		hasRequiredIdentifiers = 1;
		const numeric = /^[0-9]+$/;
		const compareIdentifiers = (a, b) => {
		  const anum = numeric.test(a);
		  const bnum = numeric.test(b);

		  if (anum && bnum) {
		    a = +a;
		    b = +b;
		  }

		  return a === b ? 0
		    : (anum && !bnum) ? -1
		    : (bnum && !anum) ? 1
		    : a < b ? -1
		    : 1
		};

		const rcompareIdentifiers = (a, b) => compareIdentifiers(b, a);

		identifiers = {
		  compareIdentifiers,
		  rcompareIdentifiers,
		};
		return identifiers;
	}

	var semver$1;
	var hasRequiredSemver$1;

	function requireSemver$1 () {
		if (hasRequiredSemver$1) return semver$1;
		hasRequiredSemver$1 = 1;
		const debug = requireDebug();
		const { MAX_LENGTH, MAX_SAFE_INTEGER } = requireConstants();
		const { safeRe: re, t } = requireRe();

		const parseOptions = requireParseOptions();
		const { compareIdentifiers } = requireIdentifiers();
		class SemVer {
		  constructor (version, options) {
		    options = parseOptions(options);

		    if (version instanceof SemVer) {
		      if (version.loose === !!options.loose &&
		          version.includePrerelease === !!options.includePrerelease) {
		        return version
		      } else {
		        version = version.version;
		      }
		    } else if (typeof version !== 'string') {
		      throw new TypeError(`Invalid version. Must be a string. Got type "${typeof version}".`)
		    }

		    if (version.length > MAX_LENGTH) {
		      throw new TypeError(
		        `version is longer than ${MAX_LENGTH} characters`
		      )
		    }

		    debug('SemVer', version, options);
		    this.options = options;
		    this.loose = !!options.loose;
		    // this isn't actually relevant for versions, but keep it so that we
		    // don't run into trouble passing this.options around.
		    this.includePrerelease = !!options.includePrerelease;

		    const m = version.trim().match(options.loose ? re[t.LOOSE] : re[t.FULL]);

		    if (!m) {
		      throw new TypeError(`Invalid Version: ${version}`)
		    }

		    this.raw = version;

		    // these are actually numbers
		    this.major = +m[1];
		    this.minor = +m[2];
		    this.patch = +m[3];

		    if (this.major > MAX_SAFE_INTEGER || this.major < 0) {
		      throw new TypeError('Invalid major version')
		    }

		    if (this.minor > MAX_SAFE_INTEGER || this.minor < 0) {
		      throw new TypeError('Invalid minor version')
		    }

		    if (this.patch > MAX_SAFE_INTEGER || this.patch < 0) {
		      throw new TypeError('Invalid patch version')
		    }

		    // numberify any prerelease numeric ids
		    if (!m[4]) {
		      this.prerelease = [];
		    } else {
		      this.prerelease = m[4].split('.').map((id) => {
		        if (/^[0-9]+$/.test(id)) {
		          const num = +id;
		          if (num >= 0 && num < MAX_SAFE_INTEGER) {
		            return num
		          }
		        }
		        return id
		      });
		    }

		    this.build = m[5] ? m[5].split('.') : [];
		    this.format();
		  }

		  format () {
		    this.version = `${this.major}.${this.minor}.${this.patch}`;
		    if (this.prerelease.length) {
		      this.version += `-${this.prerelease.join('.')}`;
		    }
		    return this.version
		  }

		  toString () {
		    return this.version
		  }

		  compare (other) {
		    debug('SemVer.compare', this.version, this.options, other);
		    if (!(other instanceof SemVer)) {
		      if (typeof other === 'string' && other === this.version) {
		        return 0
		      }
		      other = new SemVer(other, this.options);
		    }

		    if (other.version === this.version) {
		      return 0
		    }

		    return this.compareMain(other) || this.comparePre(other)
		  }

		  compareMain (other) {
		    if (!(other instanceof SemVer)) {
		      other = new SemVer(other, this.options);
		    }

		    return (
		      compareIdentifiers(this.major, other.major) ||
		      compareIdentifiers(this.minor, other.minor) ||
		      compareIdentifiers(this.patch, other.patch)
		    )
		  }

		  comparePre (other) {
		    if (!(other instanceof SemVer)) {
		      other = new SemVer(other, this.options);
		    }

		    // NOT having a prerelease is > having one
		    if (this.prerelease.length && !other.prerelease.length) {
		      return -1
		    } else if (!this.prerelease.length && other.prerelease.length) {
		      return 1
		    } else if (!this.prerelease.length && !other.prerelease.length) {
		      return 0
		    }

		    let i = 0;
		    do {
		      const a = this.prerelease[i];
		      const b = other.prerelease[i];
		      debug('prerelease compare', i, a, b);
		      if (a === undefined && b === undefined) {
		        return 0
		      } else if (b === undefined) {
		        return 1
		      } else if (a === undefined) {
		        return -1
		      } else if (a === b) {
		        continue
		      } else {
		        return compareIdentifiers(a, b)
		      }
		    } while (++i)
		  }

		  compareBuild (other) {
		    if (!(other instanceof SemVer)) {
		      other = new SemVer(other, this.options);
		    }

		    let i = 0;
		    do {
		      const a = this.build[i];
		      const b = other.build[i];
		      debug('prerelease compare', i, a, b);
		      if (a === undefined && b === undefined) {
		        return 0
		      } else if (b === undefined) {
		        return 1
		      } else if (a === undefined) {
		        return -1
		      } else if (a === b) {
		        continue
		      } else {
		        return compareIdentifiers(a, b)
		      }
		    } while (++i)
		  }

		  // preminor will bump the version up to the next minor release, and immediately
		  // down to pre-release. premajor and prepatch work the same way.
		  inc (release, identifier, identifierBase) {
		    switch (release) {
		      case 'premajor':
		        this.prerelease.length = 0;
		        this.patch = 0;
		        this.minor = 0;
		        this.major++;
		        this.inc('pre', identifier, identifierBase);
		        break
		      case 'preminor':
		        this.prerelease.length = 0;
		        this.patch = 0;
		        this.minor++;
		        this.inc('pre', identifier, identifierBase);
		        break
		      case 'prepatch':
		        // If this is already a prerelease, it will bump to the next version
		        // drop any prereleases that might already exist, since they are not
		        // relevant at this point.
		        this.prerelease.length = 0;
		        this.inc('patch', identifier, identifierBase);
		        this.inc('pre', identifier, identifierBase);
		        break
		      // If the input is a non-prerelease version, this acts the same as
		      // prepatch.
		      case 'prerelease':
		        if (this.prerelease.length === 0) {
		          this.inc('patch', identifier, identifierBase);
		        }
		        this.inc('pre', identifier, identifierBase);
		        break

		      case 'major':
		        // If this is a pre-major version, bump up to the same major version.
		        // Otherwise increment major.
		        // 1.0.0-5 bumps to 1.0.0
		        // 1.1.0 bumps to 2.0.0
		        if (
		          this.minor !== 0 ||
		          this.patch !== 0 ||
		          this.prerelease.length === 0
		        ) {
		          this.major++;
		        }
		        this.minor = 0;
		        this.patch = 0;
		        this.prerelease = [];
		        break
		      case 'minor':
		        // If this is a pre-minor version, bump up to the same minor version.
		        // Otherwise increment minor.
		        // 1.2.0-5 bumps to 1.2.0
		        // 1.2.1 bumps to 1.3.0
		        if (this.patch !== 0 || this.prerelease.length === 0) {
		          this.minor++;
		        }
		        this.patch = 0;
		        this.prerelease = [];
		        break
		      case 'patch':
		        // If this is not a pre-release version, it will increment the patch.
		        // If it is a pre-release it will bump up to the same patch version.
		        // 1.2.0-5 patches to 1.2.0
		        // 1.2.0 patches to 1.2.1
		        if (this.prerelease.length === 0) {
		          this.patch++;
		        }
		        this.prerelease = [];
		        break
		      // This probably shouldn't be used publicly.
		      // 1.0.0 'pre' would become 1.0.0-0 which is the wrong direction.
		      case 'pre': {
		        const base = Number(identifierBase) ? 1 : 0;

		        if (!identifier && identifierBase === false) {
		          throw new Error('invalid increment argument: identifier is empty')
		        }

		        if (this.prerelease.length === 0) {
		          this.prerelease = [base];
		        } else {
		          let i = this.prerelease.length;
		          while (--i >= 0) {
		            if (typeof this.prerelease[i] === 'number') {
		              this.prerelease[i]++;
		              i = -2;
		            }
		          }
		          if (i === -1) {
		            // didn't increment anything
		            if (identifier === this.prerelease.join('.') && identifierBase === false) {
		              throw new Error('invalid increment argument: identifier already exists')
		            }
		            this.prerelease.push(base);
		          }
		        }
		        if (identifier) {
		          // 1.2.0-beta.1 bumps to 1.2.0-beta.2,
		          // 1.2.0-beta.fooblz or 1.2.0-beta bumps to 1.2.0-beta.0
		          let prerelease = [identifier, base];
		          if (identifierBase === false) {
		            prerelease = [identifier];
		          }
		          if (compareIdentifiers(this.prerelease[0], identifier) === 0) {
		            if (isNaN(this.prerelease[1])) {
		              this.prerelease = prerelease;
		            }
		          } else {
		            this.prerelease = prerelease;
		          }
		        }
		        break
		      }
		      default:
		        throw new Error(`invalid increment argument: ${release}`)
		    }
		    this.raw = this.format();
		    if (this.build.length) {
		      this.raw += `+${this.build.join('.')}`;
		    }
		    return this
		  }
		}

		semver$1 = SemVer;
		return semver$1;
	}

	var parse_1;
	var hasRequiredParse;

	function requireParse () {
		if (hasRequiredParse) return parse_1;
		hasRequiredParse = 1;
		const SemVer = requireSemver$1();
		const parse = (version, options, throwErrors = false) => {
		  if (version instanceof SemVer) {
		    return version
		  }
		  try {
		    return new SemVer(version, options)
		  } catch (er) {
		    if (!throwErrors) {
		      return null
		    }
		    throw er
		  }
		};

		parse_1 = parse;
		return parse_1;
	}

	var valid_1;
	var hasRequiredValid$1;

	function requireValid$1 () {
		if (hasRequiredValid$1) return valid_1;
		hasRequiredValid$1 = 1;
		const parse = requireParse();
		const valid = (version, options) => {
		  const v = parse(version, options);
		  return v ? v.version : null
		};
		valid_1 = valid;
		return valid_1;
	}

	var clean_1;
	var hasRequiredClean;

	function requireClean () {
		if (hasRequiredClean) return clean_1;
		hasRequiredClean = 1;
		const parse = requireParse();
		const clean = (version, options) => {
		  const s = parse(version.trim().replace(/^[=v]+/, ''), options);
		  return s ? s.version : null
		};
		clean_1 = clean;
		return clean_1;
	}

	var inc_1;
	var hasRequiredInc;

	function requireInc () {
		if (hasRequiredInc) return inc_1;
		hasRequiredInc = 1;
		const SemVer = requireSemver$1();

		const inc = (version, release, options, identifier, identifierBase) => {
		  if (typeof (options) === 'string') {
		    identifierBase = identifier;
		    identifier = options;
		    options = undefined;
		  }

		  try {
		    return new SemVer(
		      version instanceof SemVer ? version.version : version,
		      options
		    ).inc(release, identifier, identifierBase).version
		  } catch (er) {
		    return null
		  }
		};
		inc_1 = inc;
		return inc_1;
	}

	var diff_1;
	var hasRequiredDiff;

	function requireDiff () {
		if (hasRequiredDiff) return diff_1;
		hasRequiredDiff = 1;
		const parse = requireParse();

		const diff = (version1, version2) => {
		  const v1 = parse(version1, null, true);
		  const v2 = parse(version2, null, true);
		  const comparison = v1.compare(v2);

		  if (comparison === 0) {
		    return null
		  }

		  const v1Higher = comparison > 0;
		  const highVersion = v1Higher ? v1 : v2;
		  const lowVersion = v1Higher ? v2 : v1;
		  const highHasPre = !!highVersion.prerelease.length;
		  const lowHasPre = !!lowVersion.prerelease.length;

		  if (lowHasPre && !highHasPre) {
		    // Going from prerelease -> no prerelease requires some special casing

		    // If the low version has only a major, then it will always be a major
		    // Some examples:
		    // 1.0.0-1 -> 1.0.0
		    // 1.0.0-1 -> 1.1.1
		    // 1.0.0-1 -> 2.0.0
		    if (!lowVersion.patch && !lowVersion.minor) {
		      return 'major'
		    }

		    // Otherwise it can be determined by checking the high version

		    if (highVersion.patch) {
		      // anything higher than a patch bump would result in the wrong version
		      return 'patch'
		    }

		    if (highVersion.minor) {
		      // anything higher than a minor bump would result in the wrong version
		      return 'minor'
		    }

		    // bumping major/minor/patch all have same result
		    return 'major'
		  }

		  // add the `pre` prefix if we are going to a prerelease version
		  const prefix = highHasPre ? 'pre' : '';

		  if (v1.major !== v2.major) {
		    return prefix + 'major'
		  }

		  if (v1.minor !== v2.minor) {
		    return prefix + 'minor'
		  }

		  if (v1.patch !== v2.patch) {
		    return prefix + 'patch'
		  }

		  // high and low are preleases
		  return 'prerelease'
		};

		diff_1 = diff;
		return diff_1;
	}

	var major_1;
	var hasRequiredMajor;

	function requireMajor () {
		if (hasRequiredMajor) return major_1;
		hasRequiredMajor = 1;
		const SemVer = requireSemver$1();
		const major = (a, loose) => new SemVer(a, loose).major;
		major_1 = major;
		return major_1;
	}

	var minor_1;
	var hasRequiredMinor;

	function requireMinor () {
		if (hasRequiredMinor) return minor_1;
		hasRequiredMinor = 1;
		const SemVer = requireSemver$1();
		const minor = (a, loose) => new SemVer(a, loose).minor;
		minor_1 = minor;
		return minor_1;
	}

	var patch_1;
	var hasRequiredPatch;

	function requirePatch () {
		if (hasRequiredPatch) return patch_1;
		hasRequiredPatch = 1;
		const SemVer = requireSemver$1();
		const patch = (a, loose) => new SemVer(a, loose).patch;
		patch_1 = patch;
		return patch_1;
	}

	var prerelease_1;
	var hasRequiredPrerelease;

	function requirePrerelease () {
		if (hasRequiredPrerelease) return prerelease_1;
		hasRequiredPrerelease = 1;
		const parse = requireParse();
		const prerelease = (version, options) => {
		  const parsed = parse(version, options);
		  return (parsed && parsed.prerelease.length) ? parsed.prerelease : null
		};
		prerelease_1 = prerelease;
		return prerelease_1;
	}

	var compare_1;
	var hasRequiredCompare;

	function requireCompare () {
		if (hasRequiredCompare) return compare_1;
		hasRequiredCompare = 1;
		const SemVer = requireSemver$1();
		const compare = (a, b, loose) =>
		  new SemVer(a, loose).compare(new SemVer(b, loose));

		compare_1 = compare;
		return compare_1;
	}

	var rcompare_1;
	var hasRequiredRcompare;

	function requireRcompare () {
		if (hasRequiredRcompare) return rcompare_1;
		hasRequiredRcompare = 1;
		const compare = requireCompare();
		const rcompare = (a, b, loose) => compare(b, a, loose);
		rcompare_1 = rcompare;
		return rcompare_1;
	}

	var compareLoose_1;
	var hasRequiredCompareLoose;

	function requireCompareLoose () {
		if (hasRequiredCompareLoose) return compareLoose_1;
		hasRequiredCompareLoose = 1;
		const compare = requireCompare();
		const compareLoose = (a, b) => compare(a, b, true);
		compareLoose_1 = compareLoose;
		return compareLoose_1;
	}

	var compareBuild_1;
	var hasRequiredCompareBuild;

	function requireCompareBuild () {
		if (hasRequiredCompareBuild) return compareBuild_1;
		hasRequiredCompareBuild = 1;
		const SemVer = requireSemver$1();
		const compareBuild = (a, b, loose) => {
		  const versionA = new SemVer(a, loose);
		  const versionB = new SemVer(b, loose);
		  return versionA.compare(versionB) || versionA.compareBuild(versionB)
		};
		compareBuild_1 = compareBuild;
		return compareBuild_1;
	}

	var sort_1;
	var hasRequiredSort;

	function requireSort () {
		if (hasRequiredSort) return sort_1;
		hasRequiredSort = 1;
		const compareBuild = requireCompareBuild();
		const sort = (list, loose) => list.sort((a, b) => compareBuild(a, b, loose));
		sort_1 = sort;
		return sort_1;
	}

	var rsort_1;
	var hasRequiredRsort;

	function requireRsort () {
		if (hasRequiredRsort) return rsort_1;
		hasRequiredRsort = 1;
		const compareBuild = requireCompareBuild();
		const rsort = (list, loose) => list.sort((a, b) => compareBuild(b, a, loose));
		rsort_1 = rsort;
		return rsort_1;
	}

	var gt_1;
	var hasRequiredGt;

	function requireGt () {
		if (hasRequiredGt) return gt_1;
		hasRequiredGt = 1;
		const compare = requireCompare();
		const gt = (a, b, loose) => compare(a, b, loose) > 0;
		gt_1 = gt;
		return gt_1;
	}

	var lt_1;
	var hasRequiredLt;

	function requireLt () {
		if (hasRequiredLt) return lt_1;
		hasRequiredLt = 1;
		const compare = requireCompare();
		const lt = (a, b, loose) => compare(a, b, loose) < 0;
		lt_1 = lt;
		return lt_1;
	}

	var eq_1;
	var hasRequiredEq;

	function requireEq () {
		if (hasRequiredEq) return eq_1;
		hasRequiredEq = 1;
		const compare = requireCompare();
		const eq = (a, b, loose) => compare(a, b, loose) === 0;
		eq_1 = eq;
		return eq_1;
	}

	var neq_1;
	var hasRequiredNeq;

	function requireNeq () {
		if (hasRequiredNeq) return neq_1;
		hasRequiredNeq = 1;
		const compare = requireCompare();
		const neq = (a, b, loose) => compare(a, b, loose) !== 0;
		neq_1 = neq;
		return neq_1;
	}

	var gte_1;
	var hasRequiredGte;

	function requireGte () {
		if (hasRequiredGte) return gte_1;
		hasRequiredGte = 1;
		const compare = requireCompare();
		const gte = (a, b, loose) => compare(a, b, loose) >= 0;
		gte_1 = gte;
		return gte_1;
	}

	var lte_1;
	var hasRequiredLte;

	function requireLte () {
		if (hasRequiredLte) return lte_1;
		hasRequiredLte = 1;
		const compare = requireCompare();
		const lte = (a, b, loose) => compare(a, b, loose) <= 0;
		lte_1 = lte;
		return lte_1;
	}

	var cmp_1;
	var hasRequiredCmp;

	function requireCmp () {
		if (hasRequiredCmp) return cmp_1;
		hasRequiredCmp = 1;
		const eq = requireEq();
		const neq = requireNeq();
		const gt = requireGt();
		const gte = requireGte();
		const lt = requireLt();
		const lte = requireLte();

		const cmp = (a, op, b, loose) => {
		  switch (op) {
		    case '===':
		      if (typeof a === 'object') {
		        a = a.version;
		      }
		      if (typeof b === 'object') {
		        b = b.version;
		      }
		      return a === b

		    case '!==':
		      if (typeof a === 'object') {
		        a = a.version;
		      }
		      if (typeof b === 'object') {
		        b = b.version;
		      }
		      return a !== b

		    case '':
		    case '=':
		    case '==':
		      return eq(a, b, loose)

		    case '!=':
		      return neq(a, b, loose)

		    case '>':
		      return gt(a, b, loose)

		    case '>=':
		      return gte(a, b, loose)

		    case '<':
		      return lt(a, b, loose)

		    case '<=':
		      return lte(a, b, loose)

		    default:
		      throw new TypeError(`Invalid operator: ${op}`)
		  }
		};
		cmp_1 = cmp;
		return cmp_1;
	}

	var coerce_1;
	var hasRequiredCoerce;

	function requireCoerce () {
		if (hasRequiredCoerce) return coerce_1;
		hasRequiredCoerce = 1;
		const SemVer = requireSemver$1();
		const parse = requireParse();
		const { safeRe: re, t } = requireRe();

		const coerce = (version, options) => {
		  if (version instanceof SemVer) {
		    return version
		  }

		  if (typeof version === 'number') {
		    version = String(version);
		  }

		  if (typeof version !== 'string') {
		    return null
		  }

		  options = options || {};

		  let match = null;
		  if (!options.rtl) {
		    match = version.match(re[t.COERCE]);
		  } else {
		    // Find the right-most coercible string that does not share
		    // a terminus with a more left-ward coercible string.
		    // Eg, '1.2.3.4' wants to coerce '2.3.4', not '3.4' or '4'
		    //
		    // Walk through the string checking with a /g regexp
		    // Manually set the index so as to pick up overlapping matches.
		    // Stop when we get a match that ends at the string end, since no
		    // coercible string can be more right-ward without the same terminus.
		    let next;
		    while ((next = re[t.COERCERTL].exec(version)) &&
		        (!match || match.index + match[0].length !== version.length)
		    ) {
		      if (!match ||
		            next.index + next[0].length !== match.index + match[0].length) {
		        match = next;
		      }
		      re[t.COERCERTL].lastIndex = next.index + next[1].length + next[2].length;
		    }
		    // leave it in a clean state
		    re[t.COERCERTL].lastIndex = -1;
		  }

		  if (match === null) {
		    return null
		  }

		  return parse(`${match[2]}.${match[3] || '0'}.${match[4] || '0'}`, options)
		};
		coerce_1 = coerce;
		return coerce_1;
	}

	var iterator;
	var hasRequiredIterator;

	function requireIterator () {
		if (hasRequiredIterator) return iterator;
		hasRequiredIterator = 1;
		iterator = function (Yallist) {
		  Yallist.prototype[Symbol.iterator] = function* () {
		    for (let walker = this.head; walker; walker = walker.next) {
		      yield walker.value;
		    }
		  };
		};
		return iterator;
	}

	var yallist;
	var hasRequiredYallist;

	function requireYallist () {
		if (hasRequiredYallist) return yallist;
		hasRequiredYallist = 1;
		yallist = Yallist;

		Yallist.Node = Node;
		Yallist.create = Yallist;

		function Yallist (list) {
		  var self = this;
		  if (!(self instanceof Yallist)) {
		    self = new Yallist();
		  }

		  self.tail = null;
		  self.head = null;
		  self.length = 0;

		  if (list && typeof list.forEach === 'function') {
		    list.forEach(function (item) {
		      self.push(item);
		    });
		  } else if (arguments.length > 0) {
		    for (var i = 0, l = arguments.length; i < l; i++) {
		      self.push(arguments[i]);
		    }
		  }

		  return self
		}

		Yallist.prototype.removeNode = function (node) {
		  if (node.list !== this) {
		    throw new Error('removing node which does not belong to this list')
		  }

		  var next = node.next;
		  var prev = node.prev;

		  if (next) {
		    next.prev = prev;
		  }

		  if (prev) {
		    prev.next = next;
		  }

		  if (node === this.head) {
		    this.head = next;
		  }
		  if (node === this.tail) {
		    this.tail = prev;
		  }

		  node.list.length--;
		  node.next = null;
		  node.prev = null;
		  node.list = null;

		  return next
		};

		Yallist.prototype.unshiftNode = function (node) {
		  if (node === this.head) {
		    return
		  }

		  if (node.list) {
		    node.list.removeNode(node);
		  }

		  var head = this.head;
		  node.list = this;
		  node.next = head;
		  if (head) {
		    head.prev = node;
		  }

		  this.head = node;
		  if (!this.tail) {
		    this.tail = node;
		  }
		  this.length++;
		};

		Yallist.prototype.pushNode = function (node) {
		  if (node === this.tail) {
		    return
		  }

		  if (node.list) {
		    node.list.removeNode(node);
		  }

		  var tail = this.tail;
		  node.list = this;
		  node.prev = tail;
		  if (tail) {
		    tail.next = node;
		  }

		  this.tail = node;
		  if (!this.head) {
		    this.head = node;
		  }
		  this.length++;
		};

		Yallist.prototype.push = function () {
		  for (var i = 0, l = arguments.length; i < l; i++) {
		    push(this, arguments[i]);
		  }
		  return this.length
		};

		Yallist.prototype.unshift = function () {
		  for (var i = 0, l = arguments.length; i < l; i++) {
		    unshift(this, arguments[i]);
		  }
		  return this.length
		};

		Yallist.prototype.pop = function () {
		  if (!this.tail) {
		    return undefined
		  }

		  var res = this.tail.value;
		  this.tail = this.tail.prev;
		  if (this.tail) {
		    this.tail.next = null;
		  } else {
		    this.head = null;
		  }
		  this.length--;
		  return res
		};

		Yallist.prototype.shift = function () {
		  if (!this.head) {
		    return undefined
		  }

		  var res = this.head.value;
		  this.head = this.head.next;
		  if (this.head) {
		    this.head.prev = null;
		  } else {
		    this.tail = null;
		  }
		  this.length--;
		  return res
		};

		Yallist.prototype.forEach = function (fn, thisp) {
		  thisp = thisp || this;
		  for (var walker = this.head, i = 0; walker !== null; i++) {
		    fn.call(thisp, walker.value, i, this);
		    walker = walker.next;
		  }
		};

		Yallist.prototype.forEachReverse = function (fn, thisp) {
		  thisp = thisp || this;
		  for (var walker = this.tail, i = this.length - 1; walker !== null; i--) {
		    fn.call(thisp, walker.value, i, this);
		    walker = walker.prev;
		  }
		};

		Yallist.prototype.get = function (n) {
		  for (var i = 0, walker = this.head; walker !== null && i < n; i++) {
		    // abort out of the list early if we hit a cycle
		    walker = walker.next;
		  }
		  if (i === n && walker !== null) {
		    return walker.value
		  }
		};

		Yallist.prototype.getReverse = function (n) {
		  for (var i = 0, walker = this.tail; walker !== null && i < n; i++) {
		    // abort out of the list early if we hit a cycle
		    walker = walker.prev;
		  }
		  if (i === n && walker !== null) {
		    return walker.value
		  }
		};

		Yallist.prototype.map = function (fn, thisp) {
		  thisp = thisp || this;
		  var res = new Yallist();
		  for (var walker = this.head; walker !== null;) {
		    res.push(fn.call(thisp, walker.value, this));
		    walker = walker.next;
		  }
		  return res
		};

		Yallist.prototype.mapReverse = function (fn, thisp) {
		  thisp = thisp || this;
		  var res = new Yallist();
		  for (var walker = this.tail; walker !== null;) {
		    res.push(fn.call(thisp, walker.value, this));
		    walker = walker.prev;
		  }
		  return res
		};

		Yallist.prototype.reduce = function (fn, initial) {
		  var acc;
		  var walker = this.head;
		  if (arguments.length > 1) {
		    acc = initial;
		  } else if (this.head) {
		    walker = this.head.next;
		    acc = this.head.value;
		  } else {
		    throw new TypeError('Reduce of empty list with no initial value')
		  }

		  for (var i = 0; walker !== null; i++) {
		    acc = fn(acc, walker.value, i);
		    walker = walker.next;
		  }

		  return acc
		};

		Yallist.prototype.reduceReverse = function (fn, initial) {
		  var acc;
		  var walker = this.tail;
		  if (arguments.length > 1) {
		    acc = initial;
		  } else if (this.tail) {
		    walker = this.tail.prev;
		    acc = this.tail.value;
		  } else {
		    throw new TypeError('Reduce of empty list with no initial value')
		  }

		  for (var i = this.length - 1; walker !== null; i--) {
		    acc = fn(acc, walker.value, i);
		    walker = walker.prev;
		  }

		  return acc
		};

		Yallist.prototype.toArray = function () {
		  var arr = new Array(this.length);
		  for (var i = 0, walker = this.head; walker !== null; i++) {
		    arr[i] = walker.value;
		    walker = walker.next;
		  }
		  return arr
		};

		Yallist.prototype.toArrayReverse = function () {
		  var arr = new Array(this.length);
		  for (var i = 0, walker = this.tail; walker !== null; i++) {
		    arr[i] = walker.value;
		    walker = walker.prev;
		  }
		  return arr
		};

		Yallist.prototype.slice = function (from, to) {
		  to = to || this.length;
		  if (to < 0) {
		    to += this.length;
		  }
		  from = from || 0;
		  if (from < 0) {
		    from += this.length;
		  }
		  var ret = new Yallist();
		  if (to < from || to < 0) {
		    return ret
		  }
		  if (from < 0) {
		    from = 0;
		  }
		  if (to > this.length) {
		    to = this.length;
		  }
		  for (var i = 0, walker = this.head; walker !== null && i < from; i++) {
		    walker = walker.next;
		  }
		  for (; walker !== null && i < to; i++, walker = walker.next) {
		    ret.push(walker.value);
		  }
		  return ret
		};

		Yallist.prototype.sliceReverse = function (from, to) {
		  to = to || this.length;
		  if (to < 0) {
		    to += this.length;
		  }
		  from = from || 0;
		  if (from < 0) {
		    from += this.length;
		  }
		  var ret = new Yallist();
		  if (to < from || to < 0) {
		    return ret
		  }
		  if (from < 0) {
		    from = 0;
		  }
		  if (to > this.length) {
		    to = this.length;
		  }
		  for (var i = this.length, walker = this.tail; walker !== null && i > to; i--) {
		    walker = walker.prev;
		  }
		  for (; walker !== null && i > from; i--, walker = walker.prev) {
		    ret.push(walker.value);
		  }
		  return ret
		};

		Yallist.prototype.splice = function (start, deleteCount, ...nodes) {
		  if (start > this.length) {
		    start = this.length - 1;
		  }
		  if (start < 0) {
		    start = this.length + start;
		  }

		  for (var i = 0, walker = this.head; walker !== null && i < start; i++) {
		    walker = walker.next;
		  }

		  var ret = [];
		  for (var i = 0; walker && i < deleteCount; i++) {
		    ret.push(walker.value);
		    walker = this.removeNode(walker);
		  }
		  if (walker === null) {
		    walker = this.tail;
		  }

		  if (walker !== this.head && walker !== this.tail) {
		    walker = walker.prev;
		  }

		  for (var i = 0; i < nodes.length; i++) {
		    walker = insert(this, walker, nodes[i]);
		  }
		  return ret;
		};

		Yallist.prototype.reverse = function () {
		  var head = this.head;
		  var tail = this.tail;
		  for (var walker = head; walker !== null; walker = walker.prev) {
		    var p = walker.prev;
		    walker.prev = walker.next;
		    walker.next = p;
		  }
		  this.head = tail;
		  this.tail = head;
		  return this
		};

		function insert (self, node, value) {
		  var inserted = node === self.head ?
		    new Node(value, null, node, self) :
		    new Node(value, node, node.next, self);

		  if (inserted.next === null) {
		    self.tail = inserted;
		  }
		  if (inserted.prev === null) {
		    self.head = inserted;
		  }

		  self.length++;

		  return inserted
		}

		function push (self, item) {
		  self.tail = new Node(item, self.tail, null, self);
		  if (!self.head) {
		    self.head = self.tail;
		  }
		  self.length++;
		}

		function unshift (self, item) {
		  self.head = new Node(item, null, self.head, self);
		  if (!self.tail) {
		    self.tail = self.head;
		  }
		  self.length++;
		}

		function Node (value, prev, next, list) {
		  if (!(this instanceof Node)) {
		    return new Node(value, prev, next, list)
		  }

		  this.list = list;
		  this.value = value;

		  if (prev) {
		    prev.next = this;
		    this.prev = prev;
		  } else {
		    this.prev = null;
		  }

		  if (next) {
		    next.prev = this;
		    this.next = next;
		  } else {
		    this.next = null;
		  }
		}

		try {
		  // add if support for Symbol.iterator is present
		  requireIterator()(Yallist);
		} catch (er) {}
		return yallist;
	}

	var lruCache;
	var hasRequiredLruCache;

	function requireLruCache () {
		if (hasRequiredLruCache) return lruCache;
		hasRequiredLruCache = 1;

		// A linked list to keep track of recently-used-ness
		const Yallist = requireYallist();

		const MAX = Symbol('max');
		const LENGTH = Symbol('length');
		const LENGTH_CALCULATOR = Symbol('lengthCalculator');
		const ALLOW_STALE = Symbol('allowStale');
		const MAX_AGE = Symbol('maxAge');
		const DISPOSE = Symbol('dispose');
		const NO_DISPOSE_ON_SET = Symbol('noDisposeOnSet');
		const LRU_LIST = Symbol('lruList');
		const CACHE = Symbol('cache');
		const UPDATE_AGE_ON_GET = Symbol('updateAgeOnGet');

		const naiveLength = () => 1;

		// lruList is a yallist where the head is the youngest
		// item, and the tail is the oldest.  the list contains the Hit
		// objects as the entries.
		// Each Hit object has a reference to its Yallist.Node.  This
		// never changes.
		//
		// cache is a Map (or PseudoMap) that matches the keys to
		// the Yallist.Node object.
		class LRUCache {
		  constructor (options) {
		    if (typeof options === 'number')
		      options = { max: options };

		    if (!options)
		      options = {};

		    if (options.max && (typeof options.max !== 'number' || options.max < 0))
		      throw new TypeError('max must be a non-negative number')
		    // Kind of weird to have a default max of Infinity, but oh well.
		    this[MAX] = options.max || Infinity;

		    const lc = options.length || naiveLength;
		    this[LENGTH_CALCULATOR] = (typeof lc !== 'function') ? naiveLength : lc;
		    this[ALLOW_STALE] = options.stale || false;
		    if (options.maxAge && typeof options.maxAge !== 'number')
		      throw new TypeError('maxAge must be a number')
		    this[MAX_AGE] = options.maxAge || 0;
		    this[DISPOSE] = options.dispose;
		    this[NO_DISPOSE_ON_SET] = options.noDisposeOnSet || false;
		    this[UPDATE_AGE_ON_GET] = options.updateAgeOnGet || false;
		    this.reset();
		  }

		  // resize the cache when the max changes.
		  set max (mL) {
		    if (typeof mL !== 'number' || mL < 0)
		      throw new TypeError('max must be a non-negative number')

		    this[MAX] = mL || Infinity;
		    trim(this);
		  }
		  get max () {
		    return this[MAX]
		  }

		  set allowStale (allowStale) {
		    this[ALLOW_STALE] = !!allowStale;
		  }
		  get allowStale () {
		    return this[ALLOW_STALE]
		  }

		  set maxAge (mA) {
		    if (typeof mA !== 'number')
		      throw new TypeError('maxAge must be a non-negative number')

		    this[MAX_AGE] = mA;
		    trim(this);
		  }
		  get maxAge () {
		    return this[MAX_AGE]
		  }

		  // resize the cache when the lengthCalculator changes.
		  set lengthCalculator (lC) {
		    if (typeof lC !== 'function')
		      lC = naiveLength;

		    if (lC !== this[LENGTH_CALCULATOR]) {
		      this[LENGTH_CALCULATOR] = lC;
		      this[LENGTH] = 0;
		      this[LRU_LIST].forEach(hit => {
		        hit.length = this[LENGTH_CALCULATOR](hit.value, hit.key);
		        this[LENGTH] += hit.length;
		      });
		    }
		    trim(this);
		  }
		  get lengthCalculator () { return this[LENGTH_CALCULATOR] }

		  get length () { return this[LENGTH] }
		  get itemCount () { return this[LRU_LIST].length }

		  rforEach (fn, thisp) {
		    thisp = thisp || this;
		    for (let walker = this[LRU_LIST].tail; walker !== null;) {
		      const prev = walker.prev;
		      forEachStep(this, fn, walker, thisp);
		      walker = prev;
		    }
		  }

		  forEach (fn, thisp) {
		    thisp = thisp || this;
		    for (let walker = this[LRU_LIST].head; walker !== null;) {
		      const next = walker.next;
		      forEachStep(this, fn, walker, thisp);
		      walker = next;
		    }
		  }

		  keys () {
		    return this[LRU_LIST].toArray().map(k => k.key)
		  }

		  values () {
		    return this[LRU_LIST].toArray().map(k => k.value)
		  }

		  reset () {
		    if (this[DISPOSE] &&
		        this[LRU_LIST] &&
		        this[LRU_LIST].length) {
		      this[LRU_LIST].forEach(hit => this[DISPOSE](hit.key, hit.value));
		    }

		    this[CACHE] = new Map(); // hash of items by key
		    this[LRU_LIST] = new Yallist(); // list of items in order of use recency
		    this[LENGTH] = 0; // length of items in the list
		  }

		  dump () {
		    return this[LRU_LIST].map(hit =>
		      isStale(this, hit) ? false : {
		        k: hit.key,
		        v: hit.value,
		        e: hit.now + (hit.maxAge || 0)
		      }).toArray().filter(h => h)
		  }

		  dumpLru () {
		    return this[LRU_LIST]
		  }

		  set (key, value, maxAge) {
		    maxAge = maxAge || this[MAX_AGE];

		    if (maxAge && typeof maxAge !== 'number')
		      throw new TypeError('maxAge must be a number')

		    const now = maxAge ? Date.now() : 0;
		    const len = this[LENGTH_CALCULATOR](value, key);

		    if (this[CACHE].has(key)) {
		      if (len > this[MAX]) {
		        del(this, this[CACHE].get(key));
		        return false
		      }

		      const node = this[CACHE].get(key);
		      const item = node.value;

		      // dispose of the old one before overwriting
		      // split out into 2 ifs for better coverage tracking
		      if (this[DISPOSE]) {
		        if (!this[NO_DISPOSE_ON_SET])
		          this[DISPOSE](key, item.value);
		      }

		      item.now = now;
		      item.maxAge = maxAge;
		      item.value = value;
		      this[LENGTH] += len - item.length;
		      item.length = len;
		      this.get(key);
		      trim(this);
		      return true
		    }

		    const hit = new Entry(key, value, len, now, maxAge);

		    // oversized objects fall out of cache automatically.
		    if (hit.length > this[MAX]) {
		      if (this[DISPOSE])
		        this[DISPOSE](key, value);

		      return false
		    }

		    this[LENGTH] += hit.length;
		    this[LRU_LIST].unshift(hit);
		    this[CACHE].set(key, this[LRU_LIST].head);
		    trim(this);
		    return true
		  }

		  has (key) {
		    if (!this[CACHE].has(key)) return false
		    const hit = this[CACHE].get(key).value;
		    return !isStale(this, hit)
		  }

		  get (key) {
		    return get(this, key, true)
		  }

		  peek (key) {
		    return get(this, key, false)
		  }

		  pop () {
		    const node = this[LRU_LIST].tail;
		    if (!node)
		      return null

		    del(this, node);
		    return node.value
		  }

		  del (key) {
		    del(this, this[CACHE].get(key));
		  }

		  load (arr) {
		    // reset the cache
		    this.reset();

		    const now = Date.now();
		    // A previous serialized cache has the most recent items first
		    for (let l = arr.length - 1; l >= 0; l--) {
		      const hit = arr[l];
		      const expiresAt = hit.e || 0;
		      if (expiresAt === 0)
		        // the item was created without expiration in a non aged cache
		        this.set(hit.k, hit.v);
		      else {
		        const maxAge = expiresAt - now;
		        // dont add already expired items
		        if (maxAge > 0) {
		          this.set(hit.k, hit.v, maxAge);
		        }
		      }
		    }
		  }

		  prune () {
		    this[CACHE].forEach((value, key) => get(this, key, false));
		  }
		}

		const get = (self, key, doUse) => {
		  const node = self[CACHE].get(key);
		  if (node) {
		    const hit = node.value;
		    if (isStale(self, hit)) {
		      del(self, node);
		      if (!self[ALLOW_STALE])
		        return undefined
		    } else {
		      if (doUse) {
		        if (self[UPDATE_AGE_ON_GET])
		          node.value.now = Date.now();
		        self[LRU_LIST].unshiftNode(node);
		      }
		    }
		    return hit.value
		  }
		};

		const isStale = (self, hit) => {
		  if (!hit || (!hit.maxAge && !self[MAX_AGE]))
		    return false

		  const diff = Date.now() - hit.now;
		  return hit.maxAge ? diff > hit.maxAge
		    : self[MAX_AGE] && (diff > self[MAX_AGE])
		};

		const trim = self => {
		  if (self[LENGTH] > self[MAX]) {
		    for (let walker = self[LRU_LIST].tail;
		      self[LENGTH] > self[MAX] && walker !== null;) {
		      // We know that we're about to delete this one, and also
		      // what the next least recently used key will be, so just
		      // go ahead and set it now.
		      const prev = walker.prev;
		      del(self, walker);
		      walker = prev;
		    }
		  }
		};

		const del = (self, node) => {
		  if (node) {
		    const hit = node.value;
		    if (self[DISPOSE])
		      self[DISPOSE](hit.key, hit.value);

		    self[LENGTH] -= hit.length;
		    self[CACHE].delete(hit.key);
		    self[LRU_LIST].removeNode(node);
		  }
		};

		class Entry {
		  constructor (key, value, length, now, maxAge) {
		    this.key = key;
		    this.value = value;
		    this.length = length;
		    this.now = now;
		    this.maxAge = maxAge || 0;
		  }
		}

		const forEachStep = (self, fn, node, thisp) => {
		  let hit = node.value;
		  if (isStale(self, hit)) {
		    del(self, node);
		    if (!self[ALLOW_STALE])
		      hit = undefined;
		  }
		  if (hit)
		    fn.call(thisp, hit.value, hit.key, self);
		};

		lruCache = LRUCache;
		return lruCache;
	}

	var range$1;
	var hasRequiredRange;

	function requireRange () {
		if (hasRequiredRange) return range$1;
		hasRequiredRange = 1;
		// hoisted class for cyclic dependency
		class Range {
		  constructor (range, options) {
		    options = parseOptions(options);

		    if (range instanceof Range) {
		      if (
		        range.loose === !!options.loose &&
		        range.includePrerelease === !!options.includePrerelease
		      ) {
		        return range
		      } else {
		        return new Range(range.raw, options)
		      }
		    }

		    if (range instanceof Comparator) {
		      // just put it in the set and return
		      this.raw = range.value;
		      this.set = [[range]];
		      this.format();
		      return this
		    }

		    this.options = options;
		    this.loose = !!options.loose;
		    this.includePrerelease = !!options.includePrerelease;

		    // First reduce all whitespace as much as possible so we do not have to rely
		    // on potentially slow regexes like \s*. This is then stored and used for
		    // future error messages as well.
		    this.raw = range
		      .trim()
		      .split(/\s+/)
		      .join(' ');

		    // First, split on ||
		    this.set = this.raw
		      .split('||')
		      // map the range to a 2d array of comparators
		      .map(r => this.parseRange(r))
		      // throw out any comparator lists that are empty
		      // this generally means that it was not a valid range, which is allowed
		      // in loose mode, but will still throw if the WHOLE range is invalid.
		      .filter(c => c.length);

		    if (!this.set.length) {
		      throw new TypeError(`Invalid SemVer Range: ${this.raw}`)
		    }

		    // if we have any that are not the null set, throw out null sets.
		    if (this.set.length > 1) {
		      // keep the first one, in case they're all null sets
		      const first = this.set[0];
		      this.set = this.set.filter(c => !isNullSet(c[0]));
		      if (this.set.length === 0) {
		        this.set = [first];
		      } else if (this.set.length > 1) {
		        // if we have any that are *, then the range is just *
		        for (const c of this.set) {
		          if (c.length === 1 && isAny(c[0])) {
		            this.set = [c];
		            break
		          }
		        }
		      }
		    }

		    this.format();
		  }

		  format () {
		    this.range = this.set
		      .map((comps) => comps.join(' ').trim())
		      .join('||')
		      .trim();
		    return this.range
		  }

		  toString () {
		    return this.range
		  }

		  parseRange (range) {
		    // memoize range parsing for performance.
		    // this is a very hot path, and fully deterministic.
		    const memoOpts =
		      (this.options.includePrerelease && FLAG_INCLUDE_PRERELEASE) |
		      (this.options.loose && FLAG_LOOSE);
		    const memoKey = memoOpts + ':' + range;
		    const cached = cache.get(memoKey);
		    if (cached) {
		      return cached
		    }

		    const loose = this.options.loose;
		    // `1.2.3 - 1.2.4` => `>=1.2.3 <=1.2.4`
		    const hr = loose ? re[t.HYPHENRANGELOOSE] : re[t.HYPHENRANGE];
		    range = range.replace(hr, hyphenReplace(this.options.includePrerelease));
		    debug('hyphen replace', range);

		    // `> 1.2.3 < 1.2.5` => `>1.2.3 <1.2.5`
		    range = range.replace(re[t.COMPARATORTRIM], comparatorTrimReplace);
		    debug('comparator trim', range);

		    // `~ 1.2.3` => `~1.2.3`
		    range = range.replace(re[t.TILDETRIM], tildeTrimReplace);
		    debug('tilde trim', range);

		    // `^ 1.2.3` => `^1.2.3`
		    range = range.replace(re[t.CARETTRIM], caretTrimReplace);
		    debug('caret trim', range);

		    // At this point, the range is completely trimmed and
		    // ready to be split into comparators.

		    let rangeList = range
		      .split(' ')
		      .map(comp => parseComparator(comp, this.options))
		      .join(' ')
		      .split(/\s+/)
		      // >=0.0.0 is equivalent to *
		      .map(comp => replaceGTE0(comp, this.options));

		    if (loose) {
		      // in loose mode, throw out any that are not valid comparators
		      rangeList = rangeList.filter(comp => {
		        debug('loose invalid filter', comp, this.options);
		        return !!comp.match(re[t.COMPARATORLOOSE])
		      });
		    }
		    debug('range list', rangeList);

		    // if any comparators are the null set, then replace with JUST null set
		    // if more than one comparator, remove any * comparators
		    // also, don't include the same comparator more than once
		    const rangeMap = new Map();
		    const comparators = rangeList.map(comp => new Comparator(comp, this.options));
		    for (const comp of comparators) {
		      if (isNullSet(comp)) {
		        return [comp]
		      }
		      rangeMap.set(comp.value, comp);
		    }
		    if (rangeMap.size > 1 && rangeMap.has('')) {
		      rangeMap.delete('');
		    }

		    const result = [...rangeMap.values()];
		    cache.set(memoKey, result);
		    return result
		  }

		  intersects (range, options) {
		    if (!(range instanceof Range)) {
		      throw new TypeError('a Range is required')
		    }

		    return this.set.some((thisComparators) => {
		      return (
		        isSatisfiable(thisComparators, options) &&
		        range.set.some((rangeComparators) => {
		          return (
		            isSatisfiable(rangeComparators, options) &&
		            thisComparators.every((thisComparator) => {
		              return rangeComparators.every((rangeComparator) => {
		                return thisComparator.intersects(rangeComparator, options)
		              })
		            })
		          )
		        })
		      )
		    })
		  }

		  // if ANY of the sets match ALL of its comparators, then pass
		  test (version) {
		    if (!version) {
		      return false
		    }

		    if (typeof version === 'string') {
		      try {
		        version = new SemVer(version, this.options);
		      } catch (er) {
		        return false
		      }
		    }

		    for (let i = 0; i < this.set.length; i++) {
		      if (testSet(this.set[i], version, this.options)) {
		        return true
		      }
		    }
		    return false
		  }
		}

		range$1 = Range;

		const LRU = requireLruCache();
		const cache = new LRU({ max: 1000 });

		const parseOptions = requireParseOptions();
		const Comparator = requireComparator();
		const debug = requireDebug();
		const SemVer = requireSemver$1();
		const {
		  safeRe: re,
		  t,
		  comparatorTrimReplace,
		  tildeTrimReplace,
		  caretTrimReplace,
		} = requireRe();
		const { FLAG_INCLUDE_PRERELEASE, FLAG_LOOSE } = requireConstants();

		const isNullSet = c => c.value === '<0.0.0-0';
		const isAny = c => c.value === '';

		// take a set of comparators and determine whether there
		// exists a version which can satisfy it
		const isSatisfiable = (comparators, options) => {
		  let result = true;
		  const remainingComparators = comparators.slice();
		  let testComparator = remainingComparators.pop();

		  while (result && remainingComparators.length) {
		    result = remainingComparators.every((otherComparator) => {
		      return testComparator.intersects(otherComparator, options)
		    });

		    testComparator = remainingComparators.pop();
		  }

		  return result
		};

		// comprised of xranges, tildes, stars, and gtlt's at this point.
		// already replaced the hyphen ranges
		// turn into a set of JUST comparators.
		const parseComparator = (comp, options) => {
		  debug('comp', comp, options);
		  comp = replaceCarets(comp, options);
		  debug('caret', comp);
		  comp = replaceTildes(comp, options);
		  debug('tildes', comp);
		  comp = replaceXRanges(comp, options);
		  debug('xrange', comp);
		  comp = replaceStars(comp, options);
		  debug('stars', comp);
		  return comp
		};

		const isX = id => !id || id.toLowerCase() === 'x' || id === '*';

		// ~, ~> --> * (any, kinda silly)
		// ~2, ~2.x, ~2.x.x, ~>2, ~>2.x ~>2.x.x --> >=2.0.0 <3.0.0-0
		// ~2.0, ~2.0.x, ~>2.0, ~>2.0.x --> >=2.0.0 <2.1.0-0
		// ~1.2, ~1.2.x, ~>1.2, ~>1.2.x --> >=1.2.0 <1.3.0-0
		// ~1.2.3, ~>1.2.3 --> >=1.2.3 <1.3.0-0
		// ~1.2.0, ~>1.2.0 --> >=1.2.0 <1.3.0-0
		// ~0.0.1 --> >=0.0.1 <0.1.0-0
		const replaceTildes = (comp, options) => {
		  return comp
		    .trim()
		    .split(/\s+/)
		    .map((c) => replaceTilde(c, options))
		    .join(' ')
		};

		const replaceTilde = (comp, options) => {
		  const r = options.loose ? re[t.TILDELOOSE] : re[t.TILDE];
		  return comp.replace(r, (_, M, m, p, pr) => {
		    debug('tilde', comp, _, M, m, p, pr);
		    let ret;

		    if (isX(M)) {
		      ret = '';
		    } else if (isX(m)) {
		      ret = `>=${M}.0.0 <${+M + 1}.0.0-0`;
		    } else if (isX(p)) {
		      // ~1.2 == >=1.2.0 <1.3.0-0
		      ret = `>=${M}.${m}.0 <${M}.${+m + 1}.0-0`;
		    } else if (pr) {
		      debug('replaceTilde pr', pr);
		      ret = `>=${M}.${m}.${p}-${pr
	      } <${M}.${+m + 1}.0-0`;
		    } else {
		      // ~1.2.3 == >=1.2.3 <1.3.0-0
		      ret = `>=${M}.${m}.${p
	      } <${M}.${+m + 1}.0-0`;
		    }

		    debug('tilde return', ret);
		    return ret
		  })
		};

		// ^ --> * (any, kinda silly)
		// ^2, ^2.x, ^2.x.x --> >=2.0.0 <3.0.0-0
		// ^2.0, ^2.0.x --> >=2.0.0 <3.0.0-0
		// ^1.2, ^1.2.x --> >=1.2.0 <2.0.0-0
		// ^1.2.3 --> >=1.2.3 <2.0.0-0
		// ^1.2.0 --> >=1.2.0 <2.0.0-0
		// ^0.0.1 --> >=0.0.1 <0.0.2-0
		// ^0.1.0 --> >=0.1.0 <0.2.0-0
		const replaceCarets = (comp, options) => {
		  return comp
		    .trim()
		    .split(/\s+/)
		    .map((c) => replaceCaret(c, options))
		    .join(' ')
		};

		const replaceCaret = (comp, options) => {
		  debug('caret', comp, options);
		  const r = options.loose ? re[t.CARETLOOSE] : re[t.CARET];
		  const z = options.includePrerelease ? '-0' : '';
		  return comp.replace(r, (_, M, m, p, pr) => {
		    debug('caret', comp, _, M, m, p, pr);
		    let ret;

		    if (isX(M)) {
		      ret = '';
		    } else if (isX(m)) {
		      ret = `>=${M}.0.0${z} <${+M + 1}.0.0-0`;
		    } else if (isX(p)) {
		      if (M === '0') {
		        ret = `>=${M}.${m}.0${z} <${M}.${+m + 1}.0-0`;
		      } else {
		        ret = `>=${M}.${m}.0${z} <${+M + 1}.0.0-0`;
		      }
		    } else if (pr) {
		      debug('replaceCaret pr', pr);
		      if (M === '0') {
		        if (m === '0') {
		          ret = `>=${M}.${m}.${p}-${pr
	          } <${M}.${m}.${+p + 1}-0`;
		        } else {
		          ret = `>=${M}.${m}.${p}-${pr
	          } <${M}.${+m + 1}.0-0`;
		        }
		      } else {
		        ret = `>=${M}.${m}.${p}-${pr
	        } <${+M + 1}.0.0-0`;
		      }
		    } else {
		      debug('no pr');
		      if (M === '0') {
		        if (m === '0') {
		          ret = `>=${M}.${m}.${p
	          }${z} <${M}.${m}.${+p + 1}-0`;
		        } else {
		          ret = `>=${M}.${m}.${p
	          }${z} <${M}.${+m + 1}.0-0`;
		        }
		      } else {
		        ret = `>=${M}.${m}.${p
	        } <${+M + 1}.0.0-0`;
		      }
		    }

		    debug('caret return', ret);
		    return ret
		  })
		};

		const replaceXRanges = (comp, options) => {
		  debug('replaceXRanges', comp, options);
		  return comp
		    .split(/\s+/)
		    .map((c) => replaceXRange(c, options))
		    .join(' ')
		};

		const replaceXRange = (comp, options) => {
		  comp = comp.trim();
		  const r = options.loose ? re[t.XRANGELOOSE] : re[t.XRANGE];
		  return comp.replace(r, (ret, gtlt, M, m, p, pr) => {
		    debug('xRange', comp, ret, gtlt, M, m, p, pr);
		    const xM = isX(M);
		    const xm = xM || isX(m);
		    const xp = xm || isX(p);
		    const anyX = xp;

		    if (gtlt === '=' && anyX) {
		      gtlt = '';
		    }

		    // if we're including prereleases in the match, then we need
		    // to fix this to -0, the lowest possible prerelease value
		    pr = options.includePrerelease ? '-0' : '';

		    if (xM) {
		      if (gtlt === '>' || gtlt === '<') {
		        // nothing is allowed
		        ret = '<0.0.0-0';
		      } else {
		        // nothing is forbidden
		        ret = '*';
		      }
		    } else if (gtlt && anyX) {
		      // we know patch is an x, because we have any x at all.
		      // replace X with 0
		      if (xm) {
		        m = 0;
		      }
		      p = 0;

		      if (gtlt === '>') {
		        // >1 => >=2.0.0
		        // >1.2 => >=1.3.0
		        gtlt = '>=';
		        if (xm) {
		          M = +M + 1;
		          m = 0;
		          p = 0;
		        } else {
		          m = +m + 1;
		          p = 0;
		        }
		      } else if (gtlt === '<=') {
		        // <=0.7.x is actually <0.8.0, since any 0.7.x should
		        // pass.  Similarly, <=7.x is actually <8.0.0, etc.
		        gtlt = '<';
		        if (xm) {
		          M = +M + 1;
		        } else {
		          m = +m + 1;
		        }
		      }

		      if (gtlt === '<') {
		        pr = '-0';
		      }

		      ret = `${gtlt + M}.${m}.${p}${pr}`;
		    } else if (xm) {
		      ret = `>=${M}.0.0${pr} <${+M + 1}.0.0-0`;
		    } else if (xp) {
		      ret = `>=${M}.${m}.0${pr
	      } <${M}.${+m + 1}.0-0`;
		    }

		    debug('xRange return', ret);

		    return ret
		  })
		};

		// Because * is AND-ed with everything else in the comparator,
		// and '' means "any version", just remove the *s entirely.
		const replaceStars = (comp, options) => {
		  debug('replaceStars', comp, options);
		  // Looseness is ignored here.  star is always as loose as it gets!
		  return comp
		    .trim()
		    .replace(re[t.STAR], '')
		};

		const replaceGTE0 = (comp, options) => {
		  debug('replaceGTE0', comp, options);
		  return comp
		    .trim()
		    .replace(re[options.includePrerelease ? t.GTE0PRE : t.GTE0], '')
		};

		// This function is passed to string.replace(re[t.HYPHENRANGE])
		// M, m, patch, prerelease, build
		// 1.2 - 3.4.5 => >=1.2.0 <=3.4.5
		// 1.2.3 - 3.4 => >=1.2.0 <3.5.0-0 Any 3.4.x will do
		// 1.2 - 3.4 => >=1.2.0 <3.5.0-0
		const hyphenReplace = incPr => ($0,
		  from, fM, fm, fp, fpr, fb,
		  to, tM, tm, tp, tpr, tb) => {
		  if (isX(fM)) {
		    from = '';
		  } else if (isX(fm)) {
		    from = `>=${fM}.0.0${incPr ? '-0' : ''}`;
		  } else if (isX(fp)) {
		    from = `>=${fM}.${fm}.0${incPr ? '-0' : ''}`;
		  } else if (fpr) {
		    from = `>=${from}`;
		  } else {
		    from = `>=${from}${incPr ? '-0' : ''}`;
		  }

		  if (isX(tM)) {
		    to = '';
		  } else if (isX(tm)) {
		    to = `<${+tM + 1}.0.0-0`;
		  } else if (isX(tp)) {
		    to = `<${tM}.${+tm + 1}.0-0`;
		  } else if (tpr) {
		    to = `<=${tM}.${tm}.${tp}-${tpr}`;
		  } else if (incPr) {
		    to = `<${tM}.${tm}.${+tp + 1}-0`;
		  } else {
		    to = `<=${to}`;
		  }

		  return `${from} ${to}`.trim()
		};

		const testSet = (set, version, options) => {
		  for (let i = 0; i < set.length; i++) {
		    if (!set[i].test(version)) {
		      return false
		    }
		  }

		  if (version.prerelease.length && !options.includePrerelease) {
		    // Find the set of versions that are allowed to have prereleases
		    // For example, ^1.2.3-pr.1 desugars to >=1.2.3-pr.1 <2.0.0
		    // That should allow `1.2.3-pr.2` to pass.
		    // However, `1.2.4-alpha.notready` should NOT be allowed,
		    // even though it's within the range set by the comparators.
		    for (let i = 0; i < set.length; i++) {
		      debug(set[i].semver);
		      if (set[i].semver === Comparator.ANY) {
		        continue
		      }

		      if (set[i].semver.prerelease.length > 0) {
		        const allowed = set[i].semver;
		        if (allowed.major === version.major &&
		            allowed.minor === version.minor &&
		            allowed.patch === version.patch) {
		          return true
		        }
		      }
		    }

		    // Version has a -pre, but it's not one of the ones we like.
		    return false
		  }

		  return true
		};
		return range$1;
	}

	var comparator;
	var hasRequiredComparator;

	function requireComparator () {
		if (hasRequiredComparator) return comparator;
		hasRequiredComparator = 1;
		const ANY = Symbol('SemVer ANY');
		// hoisted class for cyclic dependency
		class Comparator {
		  static get ANY () {
		    return ANY
		  }

		  constructor (comp, options) {
		    options = parseOptions(options);

		    if (comp instanceof Comparator) {
		      if (comp.loose === !!options.loose) {
		        return comp
		      } else {
		        comp = comp.value;
		      }
		    }

		    comp = comp.trim().split(/\s+/).join(' ');
		    debug('comparator', comp, options);
		    this.options = options;
		    this.loose = !!options.loose;
		    this.parse(comp);

		    if (this.semver === ANY) {
		      this.value = '';
		    } else {
		      this.value = this.operator + this.semver.version;
		    }

		    debug('comp', this);
		  }

		  parse (comp) {
		    const r = this.options.loose ? re[t.COMPARATORLOOSE] : re[t.COMPARATOR];
		    const m = comp.match(r);

		    if (!m) {
		      throw new TypeError(`Invalid comparator: ${comp}`)
		    }

		    this.operator = m[1] !== undefined ? m[1] : '';
		    if (this.operator === '=') {
		      this.operator = '';
		    }

		    // if it literally is just '>' or '' then allow anything.
		    if (!m[2]) {
		      this.semver = ANY;
		    } else {
		      this.semver = new SemVer(m[2], this.options.loose);
		    }
		  }

		  toString () {
		    return this.value
		  }

		  test (version) {
		    debug('Comparator.test', version, this.options.loose);

		    if (this.semver === ANY || version === ANY) {
		      return true
		    }

		    if (typeof version === 'string') {
		      try {
		        version = new SemVer(version, this.options);
		      } catch (er) {
		        return false
		      }
		    }

		    return cmp(version, this.operator, this.semver, this.options)
		  }

		  intersects (comp, options) {
		    if (!(comp instanceof Comparator)) {
		      throw new TypeError('a Comparator is required')
		    }

		    if (this.operator === '') {
		      if (this.value === '') {
		        return true
		      }
		      return new Range(comp.value, options).test(this.value)
		    } else if (comp.operator === '') {
		      if (comp.value === '') {
		        return true
		      }
		      return new Range(this.value, options).test(comp.semver)
		    }

		    options = parseOptions(options);

		    // Special cases where nothing can possibly be lower
		    if (options.includePrerelease &&
		      (this.value === '<0.0.0-0' || comp.value === '<0.0.0-0')) {
		      return false
		    }
		    if (!options.includePrerelease &&
		      (this.value.startsWith('<0.0.0') || comp.value.startsWith('<0.0.0'))) {
		      return false
		    }

		    // Same direction increasing (> or >=)
		    if (this.operator.startsWith('>') && comp.operator.startsWith('>')) {
		      return true
		    }
		    // Same direction decreasing (< or <=)
		    if (this.operator.startsWith('<') && comp.operator.startsWith('<')) {
		      return true
		    }
		    // same SemVer and both sides are inclusive (<= or >=)
		    if (
		      (this.semver.version === comp.semver.version) &&
		      this.operator.includes('=') && comp.operator.includes('=')) {
		      return true
		    }
		    // opposite directions less than
		    if (cmp(this.semver, '<', comp.semver, options) &&
		      this.operator.startsWith('>') && comp.operator.startsWith('<')) {
		      return true
		    }
		    // opposite directions greater than
		    if (cmp(this.semver, '>', comp.semver, options) &&
		      this.operator.startsWith('<') && comp.operator.startsWith('>')) {
		      return true
		    }
		    return false
		  }
		}

		comparator = Comparator;

		const parseOptions = requireParseOptions();
		const { safeRe: re, t } = requireRe();
		const cmp = requireCmp();
		const debug = requireDebug();
		const SemVer = requireSemver$1();
		const Range = requireRange();
		return comparator;
	}

	var satisfies_1;
	var hasRequiredSatisfies;

	function requireSatisfies () {
		if (hasRequiredSatisfies) return satisfies_1;
		hasRequiredSatisfies = 1;
		const Range = requireRange();
		const satisfies = (version, range, options) => {
		  try {
		    range = new Range(range, options);
		  } catch (er) {
		    return false
		  }
		  return range.test(version)
		};
		satisfies_1 = satisfies;
		return satisfies_1;
	}

	var toComparators_1;
	var hasRequiredToComparators;

	function requireToComparators () {
		if (hasRequiredToComparators) return toComparators_1;
		hasRequiredToComparators = 1;
		const Range = requireRange();

		// Mostly just for testing and legacy API reasons
		const toComparators = (range, options) =>
		  new Range(range, options).set
		    .map(comp => comp.map(c => c.value).join(' ').trim().split(' '));

		toComparators_1 = toComparators;
		return toComparators_1;
	}

	var maxSatisfying_1;
	var hasRequiredMaxSatisfying;

	function requireMaxSatisfying () {
		if (hasRequiredMaxSatisfying) return maxSatisfying_1;
		hasRequiredMaxSatisfying = 1;
		const SemVer = requireSemver$1();
		const Range = requireRange();

		const maxSatisfying = (versions, range, options) => {
		  let max = null;
		  let maxSV = null;
		  let rangeObj = null;
		  try {
		    rangeObj = new Range(range, options);
		  } catch (er) {
		    return null
		  }
		  versions.forEach((v) => {
		    if (rangeObj.test(v)) {
		      // satisfies(v, range, options)
		      if (!max || maxSV.compare(v) === -1) {
		        // compare(max, v, true)
		        max = v;
		        maxSV = new SemVer(max, options);
		      }
		    }
		  });
		  return max
		};
		maxSatisfying_1 = maxSatisfying;
		return maxSatisfying_1;
	}

	var minSatisfying_1;
	var hasRequiredMinSatisfying;

	function requireMinSatisfying () {
		if (hasRequiredMinSatisfying) return minSatisfying_1;
		hasRequiredMinSatisfying = 1;
		const SemVer = requireSemver$1();
		const Range = requireRange();
		const minSatisfying = (versions, range, options) => {
		  let min = null;
		  let minSV = null;
		  let rangeObj = null;
		  try {
		    rangeObj = new Range(range, options);
		  } catch (er) {
		    return null
		  }
		  versions.forEach((v) => {
		    if (rangeObj.test(v)) {
		      // satisfies(v, range, options)
		      if (!min || minSV.compare(v) === 1) {
		        // compare(min, v, true)
		        min = v;
		        minSV = new SemVer(min, options);
		      }
		    }
		  });
		  return min
		};
		minSatisfying_1 = minSatisfying;
		return minSatisfying_1;
	}

	var minVersion_1;
	var hasRequiredMinVersion;

	function requireMinVersion () {
		if (hasRequiredMinVersion) return minVersion_1;
		hasRequiredMinVersion = 1;
		const SemVer = requireSemver$1();
		const Range = requireRange();
		const gt = requireGt();

		const minVersion = (range, loose) => {
		  range = new Range(range, loose);

		  let minver = new SemVer('0.0.0');
		  if (range.test(minver)) {
		    return minver
		  }

		  minver = new SemVer('0.0.0-0');
		  if (range.test(minver)) {
		    return minver
		  }

		  minver = null;
		  for (let i = 0; i < range.set.length; ++i) {
		    const comparators = range.set[i];

		    let setMin = null;
		    comparators.forEach((comparator) => {
		      // Clone to avoid manipulating the comparator's semver object.
		      const compver = new SemVer(comparator.semver.version);
		      switch (comparator.operator) {
		        case '>':
		          if (compver.prerelease.length === 0) {
		            compver.patch++;
		          } else {
		            compver.prerelease.push(0);
		          }
		          compver.raw = compver.format();
		          /* fallthrough */
		        case '':
		        case '>=':
		          if (!setMin || gt(compver, setMin)) {
		            setMin = compver;
		          }
		          break
		        case '<':
		        case '<=':
		          /* Ignore maximum versions */
		          break
		        /* istanbul ignore next */
		        default:
		          throw new Error(`Unexpected operation: ${comparator.operator}`)
		      }
		    });
		    if (setMin && (!minver || gt(minver, setMin))) {
		      minver = setMin;
		    }
		  }

		  if (minver && range.test(minver)) {
		    return minver
		  }

		  return null
		};
		minVersion_1 = minVersion;
		return minVersion_1;
	}

	var valid;
	var hasRequiredValid;

	function requireValid () {
		if (hasRequiredValid) return valid;
		hasRequiredValid = 1;
		const Range = requireRange();
		const validRange = (range, options) => {
		  try {
		    // Return '*' instead of '' so that truthiness works.
		    // This will throw if it's invalid anyway
		    return new Range(range, options).range || '*'
		  } catch (er) {
		    return null
		  }
		};
		valid = validRange;
		return valid;
	}

	var outside_1;
	var hasRequiredOutside;

	function requireOutside () {
		if (hasRequiredOutside) return outside_1;
		hasRequiredOutside = 1;
		const SemVer = requireSemver$1();
		const Comparator = requireComparator();
		const { ANY } = Comparator;
		const Range = requireRange();
		const satisfies = requireSatisfies();
		const gt = requireGt();
		const lt = requireLt();
		const lte = requireLte();
		const gte = requireGte();

		const outside = (version, range, hilo, options) => {
		  version = new SemVer(version, options);
		  range = new Range(range, options);

		  let gtfn, ltefn, ltfn, comp, ecomp;
		  switch (hilo) {
		    case '>':
		      gtfn = gt;
		      ltefn = lte;
		      ltfn = lt;
		      comp = '>';
		      ecomp = '>=';
		      break
		    case '<':
		      gtfn = lt;
		      ltefn = gte;
		      ltfn = gt;
		      comp = '<';
		      ecomp = '<=';
		      break
		    default:
		      throw new TypeError('Must provide a hilo val of "<" or ">"')
		  }

		  // If it satisfies the range it is not outside
		  if (satisfies(version, range, options)) {
		    return false
		  }

		  // From now on, variable terms are as if we're in "gtr" mode.
		  // but note that everything is flipped for the "ltr" function.

		  for (let i = 0; i < range.set.length; ++i) {
		    const comparators = range.set[i];

		    let high = null;
		    let low = null;

		    comparators.forEach((comparator) => {
		      if (comparator.semver === ANY) {
		        comparator = new Comparator('>=0.0.0');
		      }
		      high = high || comparator;
		      low = low || comparator;
		      if (gtfn(comparator.semver, high.semver, options)) {
		        high = comparator;
		      } else if (ltfn(comparator.semver, low.semver, options)) {
		        low = comparator;
		      }
		    });

		    // If the edge version comparator has a operator then our version
		    // isn't outside it
		    if (high.operator === comp || high.operator === ecomp) {
		      return false
		    }

		    // If the lowest version comparator has an operator and our version
		    // is less than it then it isn't higher than the range
		    if ((!low.operator || low.operator === comp) &&
		        ltefn(version, low.semver)) {
		      return false
		    } else if (low.operator === ecomp && ltfn(version, low.semver)) {
		      return false
		    }
		  }
		  return true
		};

		outside_1 = outside;
		return outside_1;
	}

	var gtr_1;
	var hasRequiredGtr;

	function requireGtr () {
		if (hasRequiredGtr) return gtr_1;
		hasRequiredGtr = 1;
		// Determine if version is greater than all the versions possible in the range.
		const outside = requireOutside();
		const gtr = (version, range, options) => outside(version, range, '>', options);
		gtr_1 = gtr;
		return gtr_1;
	}

	var ltr_1;
	var hasRequiredLtr;

	function requireLtr () {
		if (hasRequiredLtr) return ltr_1;
		hasRequiredLtr = 1;
		const outside = requireOutside();
		// Determine if version is less than all the versions possible in the range
		const ltr = (version, range, options) => outside(version, range, '<', options);
		ltr_1 = ltr;
		return ltr_1;
	}

	var intersects_1;
	var hasRequiredIntersects;

	function requireIntersects () {
		if (hasRequiredIntersects) return intersects_1;
		hasRequiredIntersects = 1;
		const Range = requireRange();
		const intersects = (r1, r2, options) => {
		  r1 = new Range(r1, options);
		  r2 = new Range(r2, options);
		  return r1.intersects(r2, options)
		};
		intersects_1 = intersects;
		return intersects_1;
	}

	var simplify;
	var hasRequiredSimplify;

	function requireSimplify () {
		if (hasRequiredSimplify) return simplify;
		hasRequiredSimplify = 1;
		// given a set of versions and a range, create a "simplified" range
		// that includes the same versions that the original range does
		// If the original range is shorter than the simplified one, return that.
		const satisfies = requireSatisfies();
		const compare = requireCompare();
		simplify = (versions, range, options) => {
		  const set = [];
		  let first = null;
		  let prev = null;
		  const v = versions.sort((a, b) => compare(a, b, options));
		  for (const version of v) {
		    const included = satisfies(version, range, options);
		    if (included) {
		      prev = version;
		      if (!first) {
		        first = version;
		      }
		    } else {
		      if (prev) {
		        set.push([first, prev]);
		      }
		      prev = null;
		      first = null;
		    }
		  }
		  if (first) {
		    set.push([first, null]);
		  }

		  const ranges = [];
		  for (const [min, max] of set) {
		    if (min === max) {
		      ranges.push(min);
		    } else if (!max && min === v[0]) {
		      ranges.push('*');
		    } else if (!max) {
		      ranges.push(`>=${min}`);
		    } else if (min === v[0]) {
		      ranges.push(`<=${max}`);
		    } else {
		      ranges.push(`${min} - ${max}`);
		    }
		  }
		  const simplified = ranges.join(' || ');
		  const original = typeof range.raw === 'string' ? range.raw : String(range);
		  return simplified.length < original.length ? simplified : range
		};
		return simplify;
	}

	var subset_1;
	var hasRequiredSubset;

	function requireSubset () {
		if (hasRequiredSubset) return subset_1;
		hasRequiredSubset = 1;
		const Range = requireRange();
		const Comparator = requireComparator();
		const { ANY } = Comparator;
		const satisfies = requireSatisfies();
		const compare = requireCompare();

		// Complex range `r1 || r2 || ...` is a subset of `R1 || R2 || ...` iff:
		// - Every simple range `r1, r2, ...` is a null set, OR
		// - Every simple range `r1, r2, ...` which is not a null set is a subset of
		//   some `R1, R2, ...`
		//
		// Simple range `c1 c2 ...` is a subset of simple range `C1 C2 ...` iff:
		// - If c is only the ANY comparator
		//   - If C is only the ANY comparator, return true
		//   - Else if in prerelease mode, return false
		//   - else replace c with `[>=0.0.0]`
		// - If C is only the ANY comparator
		//   - if in prerelease mode, return true
		//   - else replace C with `[>=0.0.0]`
		// - Let EQ be the set of = comparators in c
		// - If EQ is more than one, return true (null set)
		// - Let GT be the highest > or >= comparator in c
		// - Let LT be the lowest < or <= comparator in c
		// - If GT and LT, and GT.semver > LT.semver, return true (null set)
		// - If any C is a = range, and GT or LT are set, return false
		// - If EQ
		//   - If GT, and EQ does not satisfy GT, return true (null set)
		//   - If LT, and EQ does not satisfy LT, return true (null set)
		//   - If EQ satisfies every C, return true
		//   - Else return false
		// - If GT
		//   - If GT.semver is lower than any > or >= comp in C, return false
		//   - If GT is >=, and GT.semver does not satisfy every C, return false
		//   - If GT.semver has a prerelease, and not in prerelease mode
		//     - If no C has a prerelease and the GT.semver tuple, return false
		// - If LT
		//   - If LT.semver is greater than any < or <= comp in C, return false
		//   - If LT is <=, and LT.semver does not satisfy every C, return false
		//   - If GT.semver has a prerelease, and not in prerelease mode
		//     - If no C has a prerelease and the LT.semver tuple, return false
		// - Else return true

		const subset = (sub, dom, options = {}) => {
		  if (sub === dom) {
		    return true
		  }

		  sub = new Range(sub, options);
		  dom = new Range(dom, options);
		  let sawNonNull = false;

		  OUTER: for (const simpleSub of sub.set) {
		    for (const simpleDom of dom.set) {
		      const isSub = simpleSubset(simpleSub, simpleDom, options);
		      sawNonNull = sawNonNull || isSub !== null;
		      if (isSub) {
		        continue OUTER
		      }
		    }
		    // the null set is a subset of everything, but null simple ranges in
		    // a complex range should be ignored.  so if we saw a non-null range,
		    // then we know this isn't a subset, but if EVERY simple range was null,
		    // then it is a subset.
		    if (sawNonNull) {
		      return false
		    }
		  }
		  return true
		};

		const minimumVersionWithPreRelease = [new Comparator('>=0.0.0-0')];
		const minimumVersion = [new Comparator('>=0.0.0')];

		const simpleSubset = (sub, dom, options) => {
		  if (sub === dom) {
		    return true
		  }

		  if (sub.length === 1 && sub[0].semver === ANY) {
		    if (dom.length === 1 && dom[0].semver === ANY) {
		      return true
		    } else if (options.includePrerelease) {
		      sub = minimumVersionWithPreRelease;
		    } else {
		      sub = minimumVersion;
		    }
		  }

		  if (dom.length === 1 && dom[0].semver === ANY) {
		    if (options.includePrerelease) {
		      return true
		    } else {
		      dom = minimumVersion;
		    }
		  }

		  const eqSet = new Set();
		  let gt, lt;
		  for (const c of sub) {
		    if (c.operator === '>' || c.operator === '>=') {
		      gt = higherGT(gt, c, options);
		    } else if (c.operator === '<' || c.operator === '<=') {
		      lt = lowerLT(lt, c, options);
		    } else {
		      eqSet.add(c.semver);
		    }
		  }

		  if (eqSet.size > 1) {
		    return null
		  }

		  let gtltComp;
		  if (gt && lt) {
		    gtltComp = compare(gt.semver, lt.semver, options);
		    if (gtltComp > 0) {
		      return null
		    } else if (gtltComp === 0 && (gt.operator !== '>=' || lt.operator !== '<=')) {
		      return null
		    }
		  }

		  // will iterate one or zero times
		  for (const eq of eqSet) {
		    if (gt && !satisfies(eq, String(gt), options)) {
		      return null
		    }

		    if (lt && !satisfies(eq, String(lt), options)) {
		      return null
		    }

		    for (const c of dom) {
		      if (!satisfies(eq, String(c), options)) {
		        return false
		      }
		    }

		    return true
		  }

		  let higher, lower;
		  let hasDomLT, hasDomGT;
		  // if the subset has a prerelease, we need a comparator in the superset
		  // with the same tuple and a prerelease, or it's not a subset
		  let needDomLTPre = lt &&
		    !options.includePrerelease &&
		    lt.semver.prerelease.length ? lt.semver : false;
		  let needDomGTPre = gt &&
		    !options.includePrerelease &&
		    gt.semver.prerelease.length ? gt.semver : false;
		  // exception: <1.2.3-0 is the same as <1.2.3
		  if (needDomLTPre && needDomLTPre.prerelease.length === 1 &&
		      lt.operator === '<' && needDomLTPre.prerelease[0] === 0) {
		    needDomLTPre = false;
		  }

		  for (const c of dom) {
		    hasDomGT = hasDomGT || c.operator === '>' || c.operator === '>=';
		    hasDomLT = hasDomLT || c.operator === '<' || c.operator === '<=';
		    if (gt) {
		      if (needDomGTPre) {
		        if (c.semver.prerelease && c.semver.prerelease.length &&
		            c.semver.major === needDomGTPre.major &&
		            c.semver.minor === needDomGTPre.minor &&
		            c.semver.patch === needDomGTPre.patch) {
		          needDomGTPre = false;
		        }
		      }
		      if (c.operator === '>' || c.operator === '>=') {
		        higher = higherGT(gt, c, options);
		        if (higher === c && higher !== gt) {
		          return false
		        }
		      } else if (gt.operator === '>=' && !satisfies(gt.semver, String(c), options)) {
		        return false
		      }
		    }
		    if (lt) {
		      if (needDomLTPre) {
		        if (c.semver.prerelease && c.semver.prerelease.length &&
		            c.semver.major === needDomLTPre.major &&
		            c.semver.minor === needDomLTPre.minor &&
		            c.semver.patch === needDomLTPre.patch) {
		          needDomLTPre = false;
		        }
		      }
		      if (c.operator === '<' || c.operator === '<=') {
		        lower = lowerLT(lt, c, options);
		        if (lower === c && lower !== lt) {
		          return false
		        }
		      } else if (lt.operator === '<=' && !satisfies(lt.semver, String(c), options)) {
		        return false
		      }
		    }
		    if (!c.operator && (lt || gt) && gtltComp !== 0) {
		      return false
		    }
		  }

		  // if there was a < or >, and nothing in the dom, then must be false
		  // UNLESS it was limited by another range in the other direction.
		  // Eg, >1.0.0 <1.0.1 is still a subset of <2.0.0
		  if (gt && hasDomLT && !lt && gtltComp !== 0) {
		    return false
		  }

		  if (lt && hasDomGT && !gt && gtltComp !== 0) {
		    return false
		  }

		  // we needed a prerelease range in a specific tuple, but didn't get one
		  // then this isn't a subset.  eg >=1.2.3-pre is not a subset of >=1.0.0,
		  // because it includes prereleases in the 1.2.3 tuple
		  if (needDomGTPre || needDomLTPre) {
		    return false
		  }

		  return true
		};

		// >=1.2.3 is lower than >1.2.3
		const higherGT = (a, b, options) => {
		  if (!a) {
		    return b
		  }
		  const comp = compare(a.semver, b.semver, options);
		  return comp > 0 ? a
		    : comp < 0 ? b
		    : b.operator === '>' && a.operator === '>=' ? b
		    : a
		};

		// <=1.2.3 is higher than <1.2.3
		const lowerLT = (a, b, options) => {
		  if (!a) {
		    return b
		  }
		  const comp = compare(a.semver, b.semver, options);
		  return comp < 0 ? a
		    : comp > 0 ? b
		    : b.operator === '<' && a.operator === '<=' ? b
		    : a
		};

		subset_1 = subset;
		return subset_1;
	}

	var semver;
	var hasRequiredSemver;

	function requireSemver () {
		if (hasRequiredSemver) return semver;
		hasRequiredSemver = 1;
		// just pre-load all the stuff that index.js lazily exports
		const internalRe = requireRe();
		const constants = requireConstants();
		const SemVer = requireSemver$1();
		const identifiers = requireIdentifiers();
		const parse = requireParse();
		const valid = requireValid$1();
		const clean = requireClean();
		const inc = requireInc();
		const diff = requireDiff();
		const major = requireMajor();
		const minor = requireMinor();
		const patch = requirePatch();
		const prerelease = requirePrerelease();
		const compare = requireCompare();
		const rcompare = requireRcompare();
		const compareLoose = requireCompareLoose();
		const compareBuild = requireCompareBuild();
		const sort = requireSort();
		const rsort = requireRsort();
		const gt = requireGt();
		const lt = requireLt();
		const eq = requireEq();
		const neq = requireNeq();
		const gte = requireGte();
		const lte = requireLte();
		const cmp = requireCmp();
		const coerce = requireCoerce();
		const Comparator = requireComparator();
		const Range = requireRange();
		const satisfies = requireSatisfies();
		const toComparators = requireToComparators();
		const maxSatisfying = requireMaxSatisfying();
		const minSatisfying = requireMinSatisfying();
		const minVersion = requireMinVersion();
		const validRange = requireValid();
		const outside = requireOutside();
		const gtr = requireGtr();
		const ltr = requireLtr();
		const intersects = requireIntersects();
		const simplifyRange = requireSimplify();
		const subset = requireSubset();
		semver = {
		  parse,
		  valid,
		  clean,
		  inc,
		  diff,
		  major,
		  minor,
		  patch,
		  prerelease,
		  compare,
		  rcompare,
		  compareLoose,
		  compareBuild,
		  sort,
		  rsort,
		  gt,
		  lt,
		  eq,
		  neq,
		  gte,
		  lte,
		  cmp,
		  coerce,
		  Comparator,
		  Range,
		  satisfies,
		  toComparators,
		  maxSatisfying,
		  minSatisfying,
		  minVersion,
		  validRange,
		  outside,
		  gtr,
		  ltr,
		  intersects,
		  simplifyRange,
		  subset,
		  SemVer,
		  re: internalRe.re,
		  src: internalRe.src,
		  tokens: internalRe.t,
		  SEMVER_SPEC_VERSION: constants.SEMVER_SPEC_VERSION,
		  RELEASE_TYPES: constants.RELEASE_TYPES,
		  compareIdentifiers: identifiers.compareIdentifiers,
		  rcompareIdentifiers: identifiers.rcompareIdentifiers,
		};
		return semver;
	}

	var lib$1 = {};

	var TimeoutError = {};

	var hasRequiredTimeoutError;

	function requireTimeoutError () {
		if (hasRequiredTimeoutError) return TimeoutError;
		hasRequiredTimeoutError = 1;
		Object.defineProperty(TimeoutError, "__esModule", { value: true });
		TimeoutError.TimeoutError = void 0;
		let TimeoutError$1 = class TimeoutError extends Error {
		};
		TimeoutError.TimeoutError = TimeoutError$1;
		
		return TimeoutError;
	}

	var AggregateError = {};

	var hasRequiredAggregateError;

	function requireAggregateError () {
		if (hasRequiredAggregateError) return AggregateError;
		hasRequiredAggregateError = 1;
		Object.defineProperty(AggregateError, "__esModule", { value: true });
		AggregateError.AggregateError = void 0;
		let AggregateError$1 = class AggregateError extends Error {
		    constructor(errors) {
		        super();
		        this.errors = errors;
		        this.name = 'AggregateError';
		    }
		    toString() {
		        const message = `AggregateError of:\n${this.errors
	            .map((error) => error === this
	            ? '[Circular AggregateError]'
	            : error instanceof AggregateError
	                ? String(error).replace(/\n$/, '').replace(/^/gm, '  ')
	                : String(error).replace(/^/gm, '    ').substring(2))
	            .join('\n')}\n`;
		        return message;
		    }
		};
		AggregateError.AggregateError = AggregateError$1;
		
		return AggregateError;
	}

	var Pool = {};

	var Deferred = {};

	var hasRequiredDeferred;

	function requireDeferred () {
		if (hasRequiredDeferred) return Deferred;
		hasRequiredDeferred = 1;
		Object.defineProperty(Deferred, "__esModule", { value: true });
		Deferred.Deferred = void 0;
		const TimeoutError_1 = requireTimeoutError();
		let Deferred$1 = class Deferred {
		    constructor() {
		        this._promise = new Promise((resolve, reject) => {
		            this._reject = reject;
		            this._resolve = resolve;
		        });
		    }
		    registerTimeout(timeoutInMillis, callback) {
		        if (this._timeout)
		            return;
		        this._timeout = setTimeout(() => {
		            callback();
		            this.reject(new TimeoutError_1.TimeoutError('Operation timeout'));
		        }, timeoutInMillis);
		    }
		    _clearTimeout() {
		        if (!this._timeout)
		            return;
		        clearTimeout(this._timeout);
		    }
		    resolve(value) {
		        this._clearTimeout();
		        this._resolve(value);
		    }
		    reject(error) {
		        this._clearTimeout();
		        this._reject(error);
		    }
		    promise() {
		        return this._promise;
		    }
		};
		Deferred.Deferred = Deferred$1;
		
		return Deferred;
	}

	var defaultTo = {};

	var hasRequiredDefaultTo;

	function requireDefaultTo () {
		if (hasRequiredDefaultTo) return defaultTo;
		hasRequiredDefaultTo = 1;
		Object.defineProperty(defaultTo, "__esModule", { value: true });
		defaultTo.defaultTo = void 0;
		function defaultTo$1(value, defaultValue) {
		    return value == null || value !== value ? defaultValue : value;
		}
		defaultTo.defaultTo = defaultTo$1;
		
		return defaultTo;
	}

	var hasRequiredPool;

	function requirePool () {
		if (hasRequiredPool) return Pool;
		hasRequiredPool = 1;
		Object.defineProperty(Pool, "__esModule", { value: true });
		Pool.Pool = void 0;
		const Deferred_1 = requireDeferred();
		const AggregateError_1 = requireAggregateError();
		const defaultTo_1 = requireDefaultTo();
		let Pool$1 = class Pool {
		    constructor(factory) {
		        this.log = false;
		        if (!factory.create) {
		            throw new Error('create function is required');
		        }
		        if (!factory.destroy) {
		            throw new Error('destroy function is required');
		        }
		        if (!factory.validate) {
		            throw new Error('validate function is required');
		        }
		        if (typeof factory.min !== 'number' ||
		            factory.min < 0 ||
		            factory.min !== Math.round(factory.min)) {
		            throw new Error('min must be an integer >= 0');
		        }
		        if (typeof factory.max !== 'number' ||
		            factory.max <= 0 ||
		            factory.max !== Math.round(factory.max)) {
		            throw new Error('max must be an integer > 0');
		        }
		        if (factory.min > factory.max) {
		            throw new Error('max is smaller than min');
		        }
		        if (factory.maxUses !== undefined &&
		            (typeof factory.maxUses !== 'number' || factory.maxUses < 0)) {
		            throw new Error('maxUses must be an integer >= 0');
		        }
		        this.idleTimeoutMillis = (0, defaultTo_1.defaultTo)(factory.idleTimeoutMillis, 30000);
		        this.acquireTimeoutMillis = (0, defaultTo_1.defaultTo)(factory.acquireTimeoutMillis, 30000);
		        this.reapIntervalMillis = (0, defaultTo_1.defaultTo)(factory.reapIntervalMillis, 1000);
		        this.maxUsesPerResource = (0, defaultTo_1.defaultTo)(factory.maxUses, Infinity);
		        this.log = (0, defaultTo_1.defaultTo)(factory.log, false);
		        this._factory = factory;
		        this._count = 0;
		        this._draining = false;
		        this._pendingAcquires = [];
		        this._inUseObjects = [];
		        this._availableObjects = [];
		        this._removeIdleScheduled = false;
		    }
		    get size() {
		        return this._count;
		    }
		    get name() {
		        return this._factory.name;
		    }
		    get available() {
		        return this._availableObjects.length;
		    }
		    get using() {
		        return this._inUseObjects.length;
		    }
		    get waiting() {
		        return this._pendingAcquires.length;
		    }
		    get maxSize() {
		        return this._factory.max;
		    }
		    get minSize() {
		        return this._factory.min;
		    }
		    _log(message, level) {
		        if (typeof this.log === 'function') {
		            this.log(message, level);
		        }
		        else if (this.log) {
		            console.log(`${level.toUpperCase()} pool ${this.name || ''} - ${message}`);
		        }
		    }
		    _removeIdle() {
		        const toRemove = [];
		        const now = Date.now();
		        let i;
		        let available = this._availableObjects.length;
		        const maxRemovable = this.size - this.minSize;
		        let timeout;
		        this._removeIdleScheduled = false;
		        for (i = 0; i < available && maxRemovable > toRemove.length; i++) {
		            timeout = this._availableObjects[i].timeout;
		            if (now >= timeout) {
		                this._log('removeIdle() destroying obj - now:' + now + ' timeout:' + timeout, 'verbose');
		                toRemove.push(this._availableObjects[i].resource);
		            }
		        }
		        toRemove.forEach(this.destroy, this);
		        available = this._availableObjects.length;
		        if (available > 0) {
		            this._log('this._availableObjects.length=' + available, 'verbose');
		            this._scheduleRemoveIdle();
		        }
		        else {
		            this._log('removeIdle() all objects removed', 'verbose');
		        }
		    }
		    _scheduleRemoveIdle() {
		        if (!this._removeIdleScheduled) {
		            this._removeIdleScheduled = true;
		            this._removeIdleTimer = setTimeout(() => {
		                this._removeIdle();
		            }, this.reapIntervalMillis);
		        }
		    }
		    _dispense() {
		        let wrappedResource = null;
		        const waitingCount = this._pendingAcquires.length;
		        this._log(`dispense() clients=${waitingCount} available=${this._availableObjects.length}`, 'info');
		        if (waitingCount < 1) {
		            return;
		        }
		        while (this._availableObjects.length > 0) {
		            this._log('dispense() - reusing obj', 'verbose');
		            wrappedResource =
		                this._availableObjects[this._availableObjects.length - 1];
		            if (!this._factory.validate(wrappedResource.resource)) {
		                this.destroy(wrappedResource.resource);
		                continue;
		            }
		            this._availableObjects.pop();
		            this._addResourceToInUseObjects(wrappedResource.resource, wrappedResource.useCount);
		            const deferred = this._pendingAcquires.shift();
		            return deferred.resolve(wrappedResource.resource);
		        }
		        if (this.size < this.maxSize) {
		            this._createResource();
		        }
		    }
		    _createResource() {
		        this._count += 1;
		        this._log(`createResource() - creating obj - count=${this.size} min=${this.minSize} max=${this.maxSize}`, 'verbose');
		        this._factory
		            .create()
		            .then((resource) => {
		            const deferred = this._pendingAcquires.shift();
		            if (deferred) {
		                this._addResourceToInUseObjects(resource, 0);
		                deferred.resolve(resource);
		            }
		            else {
		                this._addResourceToAvailableObjects(resource, 0);
		            }
		        })
		            .catch((error) => {
		            const deferred = this._pendingAcquires.shift();
		            this._count -= 1;
		            if (this._count < 0)
		                this._count = 0;
		            if (deferred) {
		                deferred.reject(error);
		            }
		            process.nextTick(() => {
		                this._dispense();
		            });
		        });
		    }
		    _addResourceToAvailableObjects(resource, useCount) {
		        const wrappedResource = {
		            resource: resource,
		            useCount: useCount,
		            timeout: Date.now() + this.idleTimeoutMillis,
		        };
		        this._availableObjects.push(wrappedResource);
		        this._dispense();
		        this._scheduleRemoveIdle();
		    }
		    _addResourceToInUseObjects(resource, useCount) {
		        const wrappedResource = {
		            resource: resource,
		            useCount: useCount,
		        };
		        this._inUseObjects.push(wrappedResource);
		    }
		    _ensureMinimum() {
		        let i, diff;
		        if (!this._draining && this.size < this.minSize) {
		            diff = this.minSize - this.size;
		            for (i = 0; i < diff; i++) {
		                this._createResource();
		            }
		        }
		    }
		    acquire() {
		        if (this._draining) {
		            return Promise.reject(new Error('pool is draining and cannot accept work'));
		        }
		        const deferred = new Deferred_1.Deferred();
		        deferred.registerTimeout(this.acquireTimeoutMillis, () => {
		            this._pendingAcquires = this._pendingAcquires.filter((pending) => pending !== deferred);
		        });
		        this._pendingAcquires.push(deferred);
		        this._dispense();
		        return deferred.promise();
		    }
		    release(resource) {
		        if (this._availableObjects.some((resourceWithTimeout) => resourceWithTimeout.resource === resource)) {
		            this._log('release called twice for the same resource: ' + new Error().stack, 'error');
		            return;
		        }
		        const index = this._inUseObjects.findIndex((wrappedResource) => wrappedResource.resource === resource);
		        if (index < 0) {
		            this._log('attempt to release an invalid resource: ' + new Error().stack, 'error');
		            return;
		        }
		        const wrappedResource = this._inUseObjects[index];
		        wrappedResource.useCount += 1;
		        if (wrappedResource.useCount >= this.maxUsesPerResource) {
		            this._log('release() destroying obj - useCount:' +
		                wrappedResource.useCount +
		                ' maxUsesPerResource:' +
		                this.maxUsesPerResource, 'verbose');
		            this.destroy(wrappedResource.resource);
		            this._dispense();
		        }
		        else {
		            this._inUseObjects.splice(index, 1);
		            this._addResourceToAvailableObjects(wrappedResource.resource, wrappedResource.useCount);
		        }
		    }
		    async destroy(resource) {
		        const available = this._availableObjects.length;
		        const using = this._inUseObjects.length;
		        this._availableObjects = this._availableObjects.filter((object) => object.resource !== resource);
		        this._inUseObjects = this._inUseObjects.filter((object) => object.resource !== resource);
		        if (available === this._availableObjects.length &&
		            using === this._inUseObjects.length) {
		            this._ensureMinimum();
		            return;
		        }
		        this._count -= 1;
		        if (this._count < 0)
		            this._count = 0;
		        try {
		            await this._factory.destroy(resource);
		        }
		        finally {
		            this._ensureMinimum();
		            if (!this._draining) {
		                process.nextTick(() => {
		                    this._dispense();
		                });
		            }
		        }
		    }
		    drain() {
		        this._log('draining', 'info');
		        this._draining = true;
		        const check = (callback) => {
		            if (this._pendingAcquires.length > 0) {
		                this._dispense();
		                setTimeout(() => {
		                    check(callback);
		                }, 100);
		                return;
		            }
		            if (this._availableObjects.length !== this._count) {
		                setTimeout(() => {
		                    check(callback);
		                }, 100);
		                return;
		            }
		            callback();
		        };
		        return new Promise((resolve) => check(resolve));
		    }
		    async destroyAllNow() {
		        this._log('force destroying all objects', 'info');
		        this._removeIdleScheduled = false;
		        clearTimeout(this._removeIdleTimer);
		        const resources = this._availableObjects.map((resource) => resource.resource);
		        const errors = [];
		        for (const resource of resources) {
		            try {
		                await this.destroy(resource);
		            }
		            catch (ex) {
		                this._log('Error destroying resource: ' + ex.stack, 'error');
		                errors.push(ex);
		            }
		        }
		        if (errors.length > 0) {
		            throw new AggregateError_1.AggregateError(errors);
		        }
		    }
		};
		Pool.Pool = Pool$1;
		
		return Pool;
	}

	var hasRequiredLib$1;

	function requireLib$1 () {
		if (hasRequiredLib$1) return lib$1;
		hasRequiredLib$1 = 1;
		(function (exports) {
			Object.defineProperty(exports, "__esModule", { value: true });
			exports.Pool = exports.AggregateError = exports.TimeoutError = void 0;
			var TimeoutError_1 = requireTimeoutError();
			Object.defineProperty(exports, "TimeoutError", { enumerable: true, get: function () { return TimeoutError_1.TimeoutError; } });
			var AggregateError_1 = requireAggregateError();
			Object.defineProperty(exports, "AggregateError", { enumerable: true, get: function () { return AggregateError_1.AggregateError; } });
			var Pool_1 = requirePool();
			Object.defineProperty(exports, "Pool", { enumerable: true, get: function () { return Pool_1.Pool; } });
			
		} (lib$1));
		return lib$1;
	}

	var replicationPool;
	var hasRequiredReplicationPool;

	function requireReplicationPool () {
		if (hasRequiredReplicationPool) return replicationPool;
		hasRequiredReplicationPool = 1;
		var __defProp = Object.defineProperty;
		var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
		var __getOwnPropNames = Object.getOwnPropertyNames;
		var __hasOwnProp = Object.prototype.hasOwnProperty;
		var __export = (target, all) => {
		  for (var name in all)
		    __defProp(target, name, { get: all[name], enumerable: true });
		};
		var __copyProps = (to, from, except, desc) => {
		  if (from && typeof from === "object" || typeof from === "function") {
		    for (let key of __getOwnPropNames(from))
		      if (!__hasOwnProp.call(to, key) && key !== except)
		        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
		  }
		  return to;
		};
		var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
		var replication_pool_exports = {};
		__export(replication_pool_exports, {
		  ReplicationPool: () => ReplicationPool
		});
		replicationPool = __toCommonJS(replication_pool_exports);
		var import_sequelize_pool = requireLib$1();
		var import_logger = requireLogger();
		const debug = import_logger.logger.debugContext("pool");
		const owningPools = /* @__PURE__ */ new WeakMap();
		class ReplicationPool {
		  /**
		   * Replication read pool. Will only be used if the 'read' replication option has been provided,
		   * otherwise the {@link write} will be used instead.
		   */
		  read;
		  write;
		  constructor(config) {
		    const { connect, disconnect, validate, readConfig, writeConfig } = config;
		    if (!readConfig || readConfig.length === 0) {
		      this.read = null;
		    } else {
		      let reads = 0;
		      this.read = new import_sequelize_pool.Pool({
		        name: "sequelize:read",
		        create: async () => {
		          const nextRead = reads++ % readConfig.length;
		          const connection = await connect(readConfig[nextRead]);
		          owningPools.set(connection, "read");
		          return connection;
		        },
		        destroy: disconnect,
		        validate,
		        max: config.pool.max,
		        min: config.pool.min,
		        acquireTimeoutMillis: config.pool.acquire,
		        idleTimeoutMillis: config.pool.idle,
		        reapIntervalMillis: config.pool.evict,
		        maxUses: config.pool.maxUses
		      });
		    }
		    this.write = new import_sequelize_pool.Pool({
		      name: "sequelize:write",
		      create: async () => {
		        const connection = await connect(writeConfig);
		        owningPools.set(connection, "write");
		        return connection;
		      },
		      destroy: disconnect,
		      validate,
		      max: config.pool.max,
		      min: config.pool.min,
		      acquireTimeoutMillis: config.pool.acquire,
		      idleTimeoutMillis: config.pool.idle,
		      reapIntervalMillis: config.pool.evict,
		      maxUses: config.pool.maxUses
		    });
		  }
		  async acquire(queryType = "write", useMaster = false) {
		    if (queryType !== "read" && queryType !== "write") {
		      throw new Error(`Expected queryType to be either read or write. Received ${queryType}`);
		    }
		    if (this.read != null && queryType === "read" && !useMaster) {
		      return this.read.acquire();
		    }
		    return this.write.acquire();
		  }
		  release(client) {
		    const connectionType = owningPools.get(client);
		    if (!connectionType) {
		      throw new Error("Unable to determine to which pool the connection belongs");
		    }
		    this.getPool(connectionType).release(client);
		  }
		  async destroy(client) {
		    const connectionType = owningPools.get(client);
		    if (!connectionType) {
		      throw new Error("Unable to determine to which pool the connection belongs");
		    }
		    await this.getPool(connectionType).destroy(client);
		    debug("connection destroy");
		  }
		  async destroyAllNow() {
		    var _a;
		    await Promise.all([
		      (_a = this.read) == null ? void 0 : _a.destroyAllNow(),
		      this.write.destroyAllNow()
		    ]);
		    debug("all connections destroyed");
		  }
		  async drain() {
		    var _a;
		    await Promise.all([
		      this.write.drain(),
		      (_a = this.read) == null ? void 0 : _a.drain()
		    ]);
		  }
		  getPool(poolType) {
		    if (poolType === "read" && this.read != null) {
		      return this.read;
		    }
		    return this.write;
		  }
		  get size() {
		    var _a;
		    return (((_a = this.read) == null ? void 0 : _a.size) ?? 0) + this.write.size;
		  }
		  get available() {
		    var _a;
		    return (((_a = this.read) == null ? void 0 : _a.available) ?? 0) + this.write.available;
		  }
		  get using() {
		    var _a;
		    return (((_a = this.read) == null ? void 0 : _a.using) ?? 0) + this.write.using;
		  }
		  get waiting() {
		    var _a;
		    return (((_a = this.read) == null ? void 0 : _a.waiting) ?? 0) + this.write.waiting;
		  }
		}
		
		return replicationPool;
	}

	var connectionManager$8;
	var hasRequiredConnectionManager$8;

	function requireConnectionManager$8 () {
		if (hasRequiredConnectionManager$8) return connectionManager$8;
		hasRequiredConnectionManager$8 = 1;
		var __create = Object.create;
		var __defProp = Object.defineProperty;
		var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
		var __getOwnPropNames = Object.getOwnPropertyNames;
		var __getProtoOf = Object.getPrototypeOf;
		var __hasOwnProp = Object.prototype.hasOwnProperty;
		var __export = (target, all) => {
		  for (var name in all)
		    __defProp(target, name, { get: all[name], enumerable: true });
		};
		var __copyProps = (to, from, except, desc) => {
		  if (from && typeof from === "object" || typeof from === "function") {
		    for (let key of __getOwnPropNames(from))
		      if (!__hasOwnProp.call(to, key) && key !== except)
		        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
		  }
		  return to;
		};
		var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
		  // If the importer is in node compatibility mode or this is not an ESM
		  // file that has been converted to a CommonJS file using a Babel-
		  // compatible transform (i.e. "__esModule" has not been set), then set
		  // "default" to the CommonJS "module.exports" for node compatibility.
		  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
		  mod
		));
		var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
		var connection_manager_exports = {};
		__export(connection_manager_exports, {
		  AbstractConnectionManager: () => AbstractConnectionManager
		});
		connectionManager$8 = __toCommonJS(connection_manager_exports);
		var import_cloneDeep = __toESM(requireCloneDeep());
		var import_semver = __toESM(requireSemver());
		var import_sequelize_pool = requireLib$1();
		var import_errors = errors;
		var import_check = requireCheck();
		var deprecations$1 = __toESM(deprecations);
		var import_logger = requireLogger();
		var import_replication_pool = requireReplicationPool();
		const debug = import_logger.logger.debugContext("connection-manager");
		class AbstractConnectionManager {
		  sequelize;
		  config;
		  dialect;
		  dialectName;
		  pool;
		  #versionPromise = null;
		  #closed = false;
		  constructor(dialect, sequelize) {
		    const config = (0, import_cloneDeep.default)(sequelize.config) ?? {};
		    this.sequelize = sequelize;
		    this.config = config;
		    this.dialect = dialect;
		    this.dialectName = this.sequelize.options.dialect;
		    this.pool = new import_replication_pool.ReplicationPool({
		      ...config,
		      connect: async (options) => {
		        return this._connect(options);
		      },
		      disconnect: async (connection) => {
		        return this._disconnect(connection);
		      },
		      validate: (connection) => {
		        if (config.pool.validate) {
		          return config.pool.validate(connection);
		        }
		        return this.validate(connection);
		      },
		      readConfig: config.replication.read,
		      writeConfig: config.replication.write
		    });
		    if (config.replication.read.length > 0) {
		      debug(`pool created with max/min: ${config.pool.max}/${config.pool.min}, no replication`);
		    } else {
		      debug(`pool created with max/min: ${config.pool.max}/${config.pool.min}, with replication`);
		    }
		  }
		  get isClosed() {
		    return this.#closed;
		  }
		  /**
		   * Determine if a connection is still valid or not
		   *
		   * @param _connection
		   */
		  validate(_connection) {
		    return true;
		  }
		  async connect(_config) {
		    throw new Error(`connect not implemented in ${this.constructor.name}`);
		  }
		  async disconnect(_connection) {
		    throw new Error(`disconnect not implemented in ${this.constructor.name}`);
		  }
		  /**
		   * Try to load dialect module from various configured options.
		   * Priority goes like dialectModulePath > dialectModule > require(default)
		   *
		   * @param moduleName Name of dialect module to lookup
		   *
		   * @private
		   */
		  _loadDialectModule(moduleName) {
		    try {
		      if (this.sequelize.config.dialectModulePath) {
		        return commonjsRequire(this.sequelize.config.dialectModulePath);
		      }
		      if (this.sequelize.config.dialectModule) {
		        return this.sequelize.config.dialectModule;
		      }
		      return commonjsRequire(moduleName);
		    } catch (error) {
		      if ((0, import_check.isNodeError)(error) && error.code === "MODULE_NOT_FOUND") {
		        if (this.sequelize.config.dialectModulePath) {
		          throw new Error(`Unable to find dialect at ${this.sequelize.config.dialectModulePath}`);
		        }
		        throw new Error(`Please install ${moduleName} package manually`);
		      }
		      throw error;
		    }
		  }
		  /**
		   * Handler which executes on process exit or connection manager shutdown
		   */
		  async _onProcessExit() {
		    if (!this.pool) {
		      return;
		    }
		    await this.pool.drain();
		    debug("connection drain due to process exit");
		    await this.pool.destroyAllNow();
		  }
		  /**
		   * Drain the pool and close it permanently
		   */
		  async close() {
		    this.#closed = true;
		    this.getConnection = async function getConnection() {
		      throw new Error("ConnectionManager.getConnection was called after the connection manager was closed!");
		    };
		    return this._onProcessExit();
		  }
		  /**
		   * Get connection from pool. It sets database version if it's not already set.
		   * Call pool.acquire to get a connection.
		   *
		   * @param options
		   */
		  async getConnection(options) {
		    await this._initDatabaseVersion();
		    try {
		      await this.sequelize.hooks.runAsync("beforePoolAcquire", options);
		      const result = await this.pool.acquire(options == null ? void 0 : options.type, options == null ? void 0 : options.useMaster);
		      await this.sequelize.hooks.runAsync("afterPoolAcquire", result, options);
		      debug("connection acquired");
		      return result;
		    } catch (error) {
		      if (error instanceof import_sequelize_pool.TimeoutError) {
		        throw new import_errors.ConnectionAcquireTimeoutError(error);
		      }
		      throw error;
		    }
		  }
		  async _initDatabaseVersion(conn) {
		    if (this.sequelize.options.databaseVersion != null) {
		      return;
		    }
		    if (this.#versionPromise) {
		      await this.#versionPromise;
		      return;
		    }
		    this.#versionPromise = (async () => {
		      var _a;
		      try {
		        const connection = conn ?? await this._connect(this.config.replication.write || this.config);
		        const version = await this.sequelize.fetchDatabaseVersion({
		          logging: false,
		          // we must use the current connection for this, otherwise it will try to create a
		          // new connection, which will try to initialize the database version again, and loop forever
		          connection
		        });
		        const parsedVersion = ((_a = import_semver.default.coerce(version)) == null ? void 0 : _a.version) || version;
		        this.sequelize.options.databaseVersion = import_semver.default.valid(parsedVersion) ? parsedVersion : this.dialect.defaultVersion;
		        if (import_semver.default.lt(this.sequelize.getDatabaseVersion(), this.dialect.defaultVersion)) {
		          deprecations$1.unsupportedEngine();
		          debug(`Unsupported database engine version ${this.sequelize.getDatabaseVersion()}`);
		        }
		        return await this._disconnect(connection);
		      } finally {
		        this.#versionPromise = null;
		      }
		    })();
		    await this.#versionPromise;
		  }
		  /**
		   * Release a pooled connection so it can be utilized by other connection requests
		   *
		   * @param connection
		   */
		  releaseConnection(connection) {
		    this.pool.release(connection);
		    debug("connection released");
		  }
		  /**
		   * Destroys a pooled connection and removes it from the pool.
		   *
		   * @param connection
		   */
		  async destroyConnection(connection) {
		    await this.pool.destroy(connection);
		    debug(`connection ${connection.uuid} destroyed`);
		  }
		  /**
		   * Call dialect library to get connection
		   *
		   * @param config Connection config
		   */
		  async _connect(config) {
		    await this.sequelize.hooks.runAsync("beforeConnect", config);
		    const connection = await this.connect(config);
		    await this.sequelize.hooks.runAsync("afterConnect", connection, config);
		    return connection;
		  }
		  /**
		   * Call dialect library to disconnect a connection
		   *
		   * @param connection
		   */
		  async _disconnect(connection) {
		    await this.sequelize.hooks.runAsync("beforeDisconnect", connection);
		    await this.disconnect(connection);
		    await this.sequelize.hooks.runAsync("afterDisconnect", connection);
		  }
		}
		
		return connectionManager$8;
	}

	var connectionManager$7;
	var hasRequiredConnectionManager$7;

	function requireConnectionManager$7 () {
		if (hasRequiredConnectionManager$7) return connectionManager$7;
		hasRequiredConnectionManager$7 = 1;
		var __create = Object.create;
		var __defProp = Object.defineProperty;
		var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
		var __getOwnPropNames = Object.getOwnPropertyNames;
		var __getProtoOf = Object.getPrototypeOf;
		var __hasOwnProp = Object.prototype.hasOwnProperty;
		var __export = (target, all) => {
		  for (var name in all)
		    __defProp(target, name, { get: all[name], enumerable: true });
		};
		var __copyProps = (to, from, except, desc) => {
		  if (from && typeof from === "object" || typeof from === "function") {
		    for (let key of __getOwnPropNames(from))
		      if (!__hasOwnProp.call(to, key) && key !== except)
		        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
		  }
		  return to;
		};
		var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
		  // If the importer is in node compatibility mode or this is not an ESM
		  // file that has been converted to a CommonJS file using a Babel-
		  // compatible transform (i.e. "__esModule" has not been set), then set
		  // "default" to the CommonJS "module.exports" for node compatibility.
		  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
		  mod
		));
		var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
		var connection_manager_exports = {};
		__export(connection_manager_exports, {
		  MariaDbConnectionManager: () => MariaDbConnectionManager
		});
		connectionManager$7 = __toCommonJS(connection_manager_exports);
		var import_dayjs = __toESM(dayjs_minExports);
		var import_semver = __toESM(requireSemver());
		var import_errors = errors;
		var import_check = requireCheck();
		var import_logger = requireLogger();
		var import_object = object$1;
		var import_connection_manager = requireConnectionManager$8();
		const debug = import_logger.logger.debugContext("connection:mariadb");
		class MariaDbConnectionManager extends import_connection_manager.AbstractConnectionManager {
		  lib;
		  constructor(dialect, sequelize) {
		    super(dialect, sequelize);
		    this.lib = this._loadDialectModule("mariadb");
		  }
		  #typeCast(field, next) {
		    const parser = this.dialect.getParserForDatabaseDataType(field.type);
		    if (parser) {
		      return parser(field);
		    }
		    return next();
		  }
		  /**
		   * Connect with MariaDB database based on config, Handle any errors in connection
		   * Set the pool handlers on connection.error
		   * Also set proper timezone once connection is connected.
		   *
		   * @param config
		   * @returns
		   * @private
		   */
		  async connect(config) {
		    let tzOffset = this.sequelize.options.timezone;
		    tzOffset = tzOffset.includes("/") ? import_dayjs.default.tz(void 0, tzOffset).format("Z") : tzOffset;
		    const connectionConfig = (0, import_object.removeUndefined)({
		      host: config.host,
		      port: config.port ? Number(config.port) : void 0,
		      user: config.username,
		      password: config.password,
		      database: config.database,
		      timezone: tzOffset,
		      foundRows: false,
		      ...config.dialectOptions,
		      typeCast: (field, next) => this.#typeCast(field, next)
		    });
		    if (!this.sequelize.config.keepDefaultTimezone) {
		      if (connectionConfig.initSql) {
		        if (!Array.isArray(
		          connectionConfig.initSql
		        )) {
		          connectionConfig.initSql = [connectionConfig.initSql];
		        }
		        connectionConfig.initSql.push(`SET time_zone = '${tzOffset}'`);
		      } else {
		        connectionConfig.initSql = `SET time_zone = '${tzOffset}'`;
		      }
		    }
		    try {
		      const connection = await this.lib.createConnection(connectionConfig);
		      this.sequelize.options.databaseVersion = import_semver.default.coerce(connection.serverVersion()).version;
		      debug("connection acquired");
		      connection.on("error", (error) => {
		        switch (error.code) {
		          case "ESOCKET":
		          case "ECONNRESET":
		          case "EPIPE":
		          case "PROTOCOL_CONNECTION_LOST":
		            void this.pool.destroy(connection);
		            break;
		          default:
		        }
		      });
		      return connection;
		    } catch (error) {
		      if (!(0, import_check.isErrorWithStringCode)(error)) {
		        throw error;
		      }
		      switch (error.code) {
		        case "ECONNREFUSED":
		          throw new import_errors.ConnectionRefusedError(error);
		        case "ER_ACCESS_DENIED_ERROR":
		        case "ER_ACCESS_DENIED_NO_PASSWORD_ERROR":
		          throw new import_errors.AccessDeniedError(error);
		        case "ENOTFOUND":
		          throw new import_errors.HostNotFoundError(error);
		        case "EHOSTUNREACH":
		        case "ENETUNREACH":
		        case "EADDRNOTAVAIL":
		          throw new import_errors.HostNotReachableError(error);
		        case "EINVAL":
		          throw new import_errors.InvalidConnectionError(error);
		        default:
		          throw new import_errors.ConnectionError(error);
		      }
		    }
		  }
		  async disconnect(connection) {
		    if (!connection.isValid()) {
		      debug("connection tried to disconnect but was already at CLOSED state");
		      return;
		    }
		    await connection.end();
		  }
		  validate(connection) {
		    return connection && connection.isValid();
		  }
		}
		
		return connectionManager$7;
	}

	var dataTypes$7;
	var hasRequiredDataTypes$7;

	function requireDataTypes$7 () {
		if (hasRequiredDataTypes$7) return dataTypes$7;
		hasRequiredDataTypes$7 = 1;
		var __create = Object.create;
		var __defProp = Object.defineProperty;
		var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
		var __getOwnPropNames = Object.getOwnPropertyNames;
		var __getProtoOf = Object.getPrototypeOf;
		var __hasOwnProp = Object.prototype.hasOwnProperty;
		var __export = (target, all) => {
		  for (var name in all)
		    __defProp(target, name, { get: all[name], enumerable: true });
		};
		var __copyProps = (to, from, except, desc) => {
		  if (from && typeof from === "object" || typeof from === "function") {
		    for (let key of __getOwnPropNames(from))
		      if (!__hasOwnProp.call(to, key) && key !== except)
		        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
		  }
		  return to;
		};
		var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
		  // If the importer is in node compatibility mode or this is not an ESM
		  // file that has been converted to a CommonJS file using a Babel-
		  // compatible transform (i.e. "__esModule" has not been set), then set
		  // "default" to the CommonJS "module.exports" for node compatibility.
		  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
		  mod
		));
		var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
		var data_types_exports = {};
		__export(data_types_exports, {
		  BIGINT: () => BIGINT,
		  BOOLEAN: () => BOOLEAN,
		  DATE: () => DATE,
		  DECIMAL: () => DECIMAL,
		  DOUBLE: () => DOUBLE,
		  ENUM: () => ENUM,
		  FLOAT: () => FLOAT,
		  GEOMETRY: () => GEOMETRY,
		  INTEGER: () => INTEGER,
		  JSON: () => JSON,
		  MEDIUMINT: () => MEDIUMINT,
		  REAL: () => REAL,
		  SMALLINT: () => SMALLINT,
		  TINYINT: () => TINYINT,
		  UUID: () => UUID
		});
		dataTypes$7 = __toCommonJS(data_types_exports);
		var import_dayjs = __toESM(dayjs_minExports);
		var import_wkx = __toESM(requireWkx());
		var import_check = requireCheck();
		var import_dayjs2 = dayjs;
		var BaseTypes = __toESM(requireDataTypes$8());
		class FLOAT extends BaseTypes.FLOAT {
		  getNumberSqlTypeName() {
		    return "FLOAT";
		  }
		  _supportsNativeUnsigned() {
		    return true;
		  }
		}
		class DOUBLE extends BaseTypes.DOUBLE {
		  getNumberSqlTypeName() {
		    return "DOUBLE PRECISION";
		  }
		  _supportsNativeUnsigned() {
		    return true;
		  }
		}
		class REAL extends BaseTypes.REAL {
		  _supportsNativeUnsigned() {
		    return true;
		  }
		}
		class DECIMAL extends BaseTypes.DECIMAL {
		  _supportsNativeUnsigned() {
		    return true;
		  }
		}
		class TINYINT extends BaseTypes.TINYINT {
		  _supportsNativeUnsigned() {
		    return true;
		  }
		}
		class SMALLINT extends BaseTypes.SMALLINT {
		  _supportsNativeUnsigned() {
		    return true;
		  }
		}
		class MEDIUMINT extends BaseTypes.MEDIUMINT {
		  _supportsNativeUnsigned() {
		    return true;
		  }
		}
		class INTEGER extends BaseTypes.INTEGER {
		  _supportsNativeUnsigned() {
		    return true;
		  }
		}
		class BIGINT extends BaseTypes.BIGINT {
		  _supportsNativeUnsigned() {
		    return true;
		  }
		}
		class BOOLEAN extends BaseTypes.BOOLEAN {
		  toSql() {
		    return "TINYINT(1)";
		  }
		  escape(value) {
		    return value ? "true" : "false";
		  }
		  toBindableValue(value) {
		    return value ? 1 : 0;
		  }
		}
		class DATE extends BaseTypes.DATE {
		  toBindableValue(date) {
		    date = this._applyTimezone(date);
		    const precision = this.options.precision ?? 0;
		    let format = "YYYY-MM-DD HH:mm:ss";
		    if (precision > 0) {
		      format += `.SSS`;
		    }
		    return date.format(format);
		  }
		  sanitize(value, options) {
		    if ((0, import_check.isString)(value) && (options == null ? void 0 : options.timezone)) {
		      if ((0, import_dayjs2.isValidTimeZone)(options.timezone)) {
		        return import_dayjs.default.tz(value, options.timezone).toDate();
		      }
		      return /* @__PURE__ */ new Date(`${value} ${options.timezone}`);
		    }
		    return super.sanitize(value);
		  }
		}
		class JSON extends BaseTypes.JSON {
		  escape(value) {
		    return `CAST(${super.escape(value)} AS JSON)`;
		  }
		  getBindParamSql(value, options) {
		    return `CAST(${super.getBindParamSql(value, options)} AS JSON)`;
		  }
		}
		class UUID extends BaseTypes.UUID {
		  // TODO: add check constraint to enforce GUID format
		  toSql() {
		    return "CHAR(36) BINARY";
		  }
		}
		class GEOMETRY extends BaseTypes.GEOMETRY {
		  toBindableValue(value) {
		    const srid = this.options.srid ? `, ${this.options.srid}` : "";
		    return `ST_GeomFromText(${this._getDialect().escapeString(
	      import_wkx.default.Geometry.parseGeoJSON(value).toWkt()
	    )}${srid})`;
		  }
		  getBindParamSql(value, options) {
		    const srid = this.options.srid ? `, ${options.bindParam(this.options.srid)}` : "";
		    return `ST_GeomFromText(${options.bindParam(
	      import_wkx.default.Geometry.parseGeoJSON(value).toWkt()
	    )}${srid})`;
		  }
		  toSql() {
		    var _a;
		    const sql = ((_a = this.options.type) == null ? void 0 : _a.toUpperCase()) || "GEOMETRY";
		    if (this.options.srid) {
		      return `${sql} /*!80003 SRID ${this.options.srid} */`;
		    }
		    return sql;
		  }
		}
		class ENUM extends BaseTypes.ENUM {
		  toSql() {
		    const dialect = this._getDialect();
		    return `ENUM(${this.options.values.map((value) => dialect.escapeString(value)).join(", ")})`;
		  }
		}
		
		return dataTypes$7;
	}

	var dataTypes$6;
	var hasRequiredDataTypes$6;

	function requireDataTypes$6 () {
		if (hasRequiredDataTypes$6) return dataTypes$6;
		hasRequiredDataTypes$6 = 1;
		var __defProp = Object.defineProperty;
		var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
		var __getOwnPropNames = Object.getOwnPropertyNames;
		var __hasOwnProp = Object.prototype.hasOwnProperty;
		var __export = (target, all) => {
		  for (var name in all)
		    __defProp(target, name, { get: all[name], enumerable: true });
		};
		var __copyProps = (to, from, except, desc) => {
		  if (from && typeof from === "object" || typeof from === "function") {
		    for (let key of __getOwnPropNames(from))
		      if (!__hasOwnProp.call(to, key) && key !== except)
		        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
		  }
		  return to;
		};
		var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
		var data_types_exports = {};
		__export(data_types_exports, {
		  BIGINT: () => import_data_types2.BIGINT,
		  BOOLEAN: () => import_data_types2.BOOLEAN,
		  DATE: () => import_data_types2.DATE,
		  DECIMAL: () => import_data_types2.DECIMAL,
		  DOUBLE: () => import_data_types2.DOUBLE,
		  ENUM: () => import_data_types2.ENUM,
		  FLOAT: () => import_data_types2.FLOAT,
		  GEOMETRY: () => GEOMETRY,
		  INTEGER: () => import_data_types2.INTEGER,
		  JSON: () => import_data_types3.JSON,
		  MEDIUMINT: () => import_data_types2.MEDIUMINT,
		  REAL: () => import_data_types2.REAL,
		  SMALLINT: () => import_data_types2.SMALLINT,
		  TINYINT: () => import_data_types2.TINYINT,
		  UUID: () => import_data_types2.UUID
		});
		dataTypes$6 = __toCommonJS(data_types_exports);
		var import_data_types = requireDataTypes$7();
		var import_data_types2 = requireDataTypes$7();
		var import_data_types3 = requireDataTypes$8();
		class GEOMETRY extends import_data_types.GEOMETRY {
		  toSql() {
		    var _a;
		    const sql = ((_a = this.options.type) == null ? void 0 : _a.toUpperCase()) || "GEOMETRY";
		    if (this.options.srid) {
		      return `${sql} REF_SYSTEM_ID=${this.options.srid}`;
		    }
		    return sql;
		  }
		}
		
		return dataTypes$6;
	}

	var query$8;
	var hasRequiredQuery$8;

	function requireQuery$8 () {
		if (hasRequiredQuery$8) return query$8;
		hasRequiredQuery$8 = 1;
		var __create = Object.create;
		var __defProp = Object.defineProperty;
		var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
		var __getOwnPropNames = Object.getOwnPropertyNames;
		var __getProtoOf = Object.getPrototypeOf;
		var __hasOwnProp = Object.prototype.hasOwnProperty;
		var __export = (target, all) => {
		  for (var name in all)
		    __defProp(target, name, { get: all[name], enumerable: true });
		};
		var __copyProps = (to, from, except, desc) => {
		  if (from && typeof from === "object" || typeof from === "function") {
		    for (let key of __getOwnPropNames(from))
		      if (!__hasOwnProp.call(to, key) && key !== except)
		        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
		  }
		  return to;
		};
		var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
		  // If the importer is in node compatibility mode or this is not an ESM
		  // file that has been converted to a CommonJS file using a Babel-
		  // compatible transform (i.e. "__esModule" has not been set), then set
		  // "default" to the CommonJS "module.exports" for node compatibility.
		  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
		  mod
		));
		var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
		var query_exports = {};
		__export(query_exports, {
		  AbstractQuery: () => AbstractQuery
		});
		query$8 = __toCommonJS(query_exports);
		var import_node_util = __toESM(require$$0$1);
		var import_data_types = requireDataTypes$8();
		const _ = lodashExports;
		const { QueryTypes } = queryTypes;
		const Dot = requireDottie();
		const deprecations$1 = deprecations;
		const crypto = require$$0$3;
		class AbstractQuery {
		  constructor(connection, sequelize, options) {
		    this.uuid = crypto.randomUUID();
		    this.connection = connection;
		    this.instance = options.instance;
		    this.model = options.model;
		    this.sequelize = sequelize;
		    this.options = {
		      plain: false,
		      raw: false,
		      logging: console.debug,
		      ...options
		    };
		    this.checkLoggingOption();
		    if (options.rawErrors) {
		      this.formatError = AbstractQuery.prototype.formatError;
		    }
		  }
		  async logWarnings(results) {
		    const warningResults = await this.run("SHOW WARNINGS");
		    const warningMessage = `${this.sequelize.dialect.name} warnings (${this.connection.uuid || "default"}): `;
		    const messages = [];
		    for (const _warningRow of warningResults) {
		      if (_warningRow === void 0 || typeof _warningRow[Symbol.iterator] !== "function") {
		        continue;
		      }
		      for (const _warningResult of _warningRow) {
		        if (Object.hasOwn(_warningResult, "Message")) {
		          messages.push(_warningResult.Message);
		        } else {
		          for (const _objectKey of _warningResult.keys()) {
		            messages.push([_objectKey, _warningResult[_objectKey]].join(": "));
		          }
		        }
		      }
		    }
		    this.sequelize.log(warningMessage + messages.join("; "), this.options);
		    return results;
		  }
		  /**
		   * Formats a raw database error from the database library into a common Sequelize exception.
		   *
		   * @param {Error} error The exception object.
		   * @param {object} errStack The stack trace that started the database query.
		   * @returns {BaseError} the new formatted error object.
		   */
		  formatError(error, errStack) {
		    error.stack = errStack;
		    return error;
		  }
		  /**
		   * Execute the passed sql query.
		   *
		   * Examples:
		   *
		   *     query.run('SELECT 1')
		   *
		   * @private
		   */
		  run() {
		    throw new Error("The run method wasn't overwritten!");
		  }
		  /**
		   * Check the logging option of the instance and print deprecation warnings.
		   *
		   * @private
		   */
		  checkLoggingOption() {
		    if (this.options.logging === true) {
		      deprecations$1.noTrueLogging();
		      this.options.logging = console.debug;
		    }
		  }
		  /**
		   * Get the attributes of an insert query, which contains the just inserted id.
		   *
		   * @returns {string} The field name.
		   * @private
		   */
		  getInsertIdField() {
		    return "insertId";
		  }
		  getUniqueConstraintErrorMessage(field) {
		    if (!field) {
		      return "Must be unique";
		    }
		    const message = `${field} must be unique`;
		    if (!this.model) {
		      return message;
		    }
		    for (const index of this.model.getIndexes()) {
		      if (!index.unique) {
		        continue;
		      }
		      if (index.fields.includes(field.replaceAll('"', "")) && index.msg) {
		        return index.msg;
		      }
		    }
		    return message;
		  }
		  isRawQuery() {
		    return this.options.type === QueryTypes.RAW;
		  }
		  isUpsertQuery() {
		    return this.options.type === QueryTypes.UPSERT;
		  }
		  isInsertQuery(results, metaData) {
		    let result = true;
		    if (this.options.type === QueryTypes.INSERT) {
		      return true;
		    }
		    result = result && this.sql.toLowerCase().startsWith("insert into");
		    result = result && (!results || Object.hasOwn(results, this.getInsertIdField()));
		    result = result && (!metaData || Object.hasOwn(metaData, this.getInsertIdField()));
		    return result;
		  }
		  handleInsertQuery(results, metaData) {
		    if (!this.instance) {
		      return;
		    }
		    const autoIncrementAttribute = this.model.modelDefinition.autoIncrementAttributeName;
		    const id = (results == null ? void 0 : results[this.getInsertIdField()]) ?? (metaData == null ? void 0 : metaData[this.getInsertIdField()]) ?? null;
		    this.instance[autoIncrementAttribute] = id;
		  }
		  isShowTablesQuery() {
		    return this.options.type === QueryTypes.SHOWTABLES;
		  }
		  handleShowTablesQuery(results) {
		    return results.flatMap((resultSet) => Object.values(resultSet));
		  }
		  isShowIndexesQuery() {
		    return this.options.type === QueryTypes.SHOWINDEXES;
		  }
		  isShowConstraintsQuery() {
		    return this.options.type === QueryTypes.SHOWCONSTRAINTS;
		  }
		  isDescribeQuery() {
		    return this.options.type === QueryTypes.DESCRIBE;
		  }
		  isSelectQuery() {
		    return this.options.type === QueryTypes.SELECT;
		  }
		  isBulkUpdateQuery() {
		    return this.options.type === QueryTypes.BULKUPDATE;
		  }
		  isBulkDeleteQuery() {
		    return this.options.type === QueryTypes.BULKDELETE;
		  }
		  isForeignKeysQuery() {
		    return this.options.type === QueryTypes.FOREIGNKEYS;
		  }
		  isUpdateQuery() {
		    return this.options.type === QueryTypes.UPDATE;
		  }
		  handleSelectQuery(results) {
		    let result = null;
		    if (this.options.fieldMap) {
		      const fieldMap = this.options.fieldMap;
		      results = results.map((result2) => _.reduce(fieldMap, (result3, name, field) => {
		        if (result3[field] !== void 0 && name !== field) {
		          result3[name] = result3[field];
		          delete result3[field];
		        }
		        return result3;
		      }, result2));
		    }
		    if (this.options.raw) {
		      result = results.map((result2) => {
		        let o = {};
		        for (const key in result2) {
		          if (Object.hasOwn(result2, key)) {
		            o[key] = result2[key];
		          }
		        }
		        if (this.options.nest) {
		          o = Dot.transform(o);
		        }
		        return o;
		      });
		    } else if (this.options.hasJoin === true) {
		      results = AbstractQuery._groupJoinData(results, {
		        model: this.model,
		        includeMap: this.options.includeMap,
		        includeNames: this.options.includeNames
		      }, {
		        checkExisting: this.options.hasMultiAssociation
		      });
		      result = this.model.bulkBuild(this._parseDataArrayByType(results, this.model, this.options.includeMap), {
		        isNewRecord: false,
		        include: this.options.include,
		        includeNames: this.options.includeNames,
		        includeMap: this.options.includeMap,
		        includeValidated: true,
		        attributes: this.options.originalAttributes || this.options.attributes,
		        raw: true,
		        comesFromDatabase: true
		      });
		    } else {
		      result = this.model.bulkBuild(this._parseDataArrayByType(results, this.model, this.options.includeMap), {
		        isNewRecord: false,
		        raw: true,
		        comesFromDatabase: true,
		        attributes: this.options.originalAttributes || this.options.attributes
		      });
		    }
		    if (this.options.plain) {
		      result = result.length === 0 ? null : result[0];
		    }
		    return result;
		  }
		  /**
		   * Calls {@link DataTypes.ABSTRACT#parseDatabaseValue} on all attributes returned by the database, if a model is specified.
		   *
		   * This method mutates valueArrays.
		   *
		   * @param {Array} valueArrays The values to parse
		   * @param {Model} model The model these values belong to
		   * @param {object} includeMap The list of included associations
		   */
		  _parseDataArrayByType(valueArrays, model, includeMap) {
		    for (const values of valueArrays) {
		      this._parseDataByType(values, model, includeMap);
		    }
		    return valueArrays;
		  }
		  _parseDataByType(values, model, includeMap) {
		    for (const key of Object.keys(values)) {
		      if (includeMap && Object.hasOwn(includeMap, key)) {
		        if (Array.isArray(values[key])) {
		          values[key] = this._parseDataArrayByType(values[key], includeMap[key].model, includeMap[key].includeMap);
		        } else {
		          values[key] = this._parseDataByType(values[key], includeMap[key].model, includeMap[key].includeMap);
		        }
		        continue;
		      }
		      const attribute = model == null ? void 0 : model.modelDefinition.attributes.get(key);
		      values[key] = this._parseDatabaseValue(values[key], attribute == null ? void 0 : attribute.type);
		    }
		    return values;
		  }
		  _parseDatabaseValue(value, attributeType) {
		    if (value == null) {
		      return value;
		    }
		    if (!attributeType || !(attributeType instanceof import_data_types.AbstractDataType)) {
		      return value;
		    }
		    return attributeType.parseDatabaseValue(value);
		  }
		  isShowOrDescribeQuery() {
		    let result = false;
		    result = result || this.sql.toLowerCase().startsWith("show");
		    result = result || this.sql.toLowerCase().startsWith("describe");
		    return result;
		  }
		  isCallQuery() {
		    return this.sql.toLowerCase().startsWith("call");
		  }
		  /**
		   * @param {string} sql
		   * @param {Function} debugContext
		   * @param {Array|object} parameters
		   * @protected
		   * @returns {Function} A function to call after the query was completed.
		   */
		  _logQuery(sql, debugContext, parameters) {
		    const { connection, options } = this;
		    const benchmark = this.sequelize.options.benchmark || options.benchmark;
		    const logQueryParameters = this.sequelize.options.logQueryParameters || options.logQueryParameters;
		    const startTime = Date.now();
		    let logParameter = "";
		    if (logQueryParameters && parameters) {
		      const delimiter = sql.endsWith(";") ? "" : ";";
		      logParameter = `${delimiter} with parameters ${import_node_util.default.inspect(parameters)}`;
		    }
		    const fmt = `(${connection.uuid || "default"}): ${sql}${logParameter}`;
		    const queryLabel = options.queryLabel ? `${options.queryLabel}
` : "";
		    const msg = `${queryLabel}Executing ${fmt}`;
		    debugContext(msg);
		    if (!benchmark) {
		      this.sequelize.log(`${queryLabel}Executing ${fmt}`, options);
		    }
		    return () => {
		      const afterMsg = `${queryLabel}Executed ${fmt}`;
		      debugContext(afterMsg);
		      if (benchmark) {
		        this.sequelize.log(afterMsg, Date.now() - startTime, options);
		      }
		    };
		  }
		  /**
		   * The function takes the result of the query execution and groups
		   * the associated data by the callee.
		   *
		   * Example:
		   *   groupJoinData([
		   *     {
		   *       some: 'data',
		   *       id: 1,
		   *       association: { foo: 'bar', id: 1 }
		   *     }, {
		   *       some: 'data',
		   *       id: 1,
		   *       association: { foo: 'bar', id: 2 }
		   *     }, {
		   *       some: 'data',
		   *       id: 1,
		   *       association: { foo: 'bar', id: 3 }
		   *     }
		   *   ])
		   *
		   * Result:
		   *   Something like this:
		   *
		   *   [
		   *     {
		   *       some: 'data',
		   *       id: 1,
		   *       association: [
		   *         { foo: 'bar', id: 1 },
		   *         { foo: 'bar', id: 2 },
		   *         { foo: 'bar', id: 3 }
		   *       ]
		   *     }
		   *   ]
		   *
		   * @param {Array} rows
		   * @param {object} includeOptions
		   * @param {object} options
		   * @private
		   */
		  static _groupJoinData(rows, includeOptions, options) {
		    if (rows.length === 0) {
		      return [];
		    }
		    let i;
		    let length;
		    let $i;
		    let $length;
		    let rowsI;
		    let row;
		    const rowsLength = rows.length;
		    let keys;
		    let key;
		    let keyI;
		    let keyLength;
		    let prevKey;
		    let values;
		    let topValues;
		    let topExists;
		    const checkExisting = options.checkExisting;
		    let itemHash;
		    let parentHash;
		    let topHash;
		    const results = checkExisting ? [] : new Array(rowsLength);
		    const resultMap = {};
		    const includeMap = {};
		    let $keyPrefix;
		    let $prevKeyPrefix;
		    let $lastKeyPrefix;
		    let $current;
		    let $parent;
		    let previousPiece;
		    const buildIncludeMap = (piece) => {
		      if (Object.hasOwn($current.includeMap, piece)) {
		        includeMap[key] = $current = $current.includeMap[piece];
		        if (previousPiece) {
		          previousPiece = `${previousPiece}.${piece}`;
		        } else {
		          previousPiece = piece;
		        }
		        includeMap[previousPiece] = $current;
		      }
		    };
		    const keyPrefixStringMemo = {};
		    const keyPrefixString = (key2, memo) => {
		      if (!Object.hasOwn(memo, key2)) {
		        memo[key2] = key2.slice(0, Math.max(0, key2.lastIndexOf(".")));
		      }
		      return memo[key2];
		    };
		    const removeKeyPrefixMemo = {};
		    const removeKeyPrefix = (key2) => {
		      if (!Object.hasOwn(removeKeyPrefixMemo, key2)) {
		        const index = key2.lastIndexOf(".");
		        removeKeyPrefixMemo[key2] = key2.slice(index === -1 ? 0 : index + 1);
		      }
		      return removeKeyPrefixMemo[key2];
		    };
		    const keyPrefixMemo = {};
		    const keyPrefix = (key2) => {
		      if (!Object.hasOwn(keyPrefixMemo, key2)) {
		        const prefixString = keyPrefixString(key2, keyPrefixStringMemo);
		        if (!Object.hasOwn(keyPrefixMemo, prefixString)) {
		          keyPrefixMemo[prefixString] = prefixString ? prefixString.split(".") : [];
		        }
		        keyPrefixMemo[key2] = keyPrefixMemo[prefixString];
		      }
		      return keyPrefixMemo[key2];
		    };
		    const lastKeyPrefixMemo = {};
		    const lastKeyPrefix = (key2) => {
		      if (!Object.hasOwn(lastKeyPrefixMemo, key2)) {
		        const prefix2 = keyPrefix(key2);
		        const length2 = prefix2.length;
		        lastKeyPrefixMemo[key2] = !length2 ? "" : prefix2[length2 - 1];
		      }
		      return lastKeyPrefixMemo[key2];
		    };
		    const getUniqueKeyAttributes = (model) => {
		      let uniqueKeyAttributes2 = _.chain(model.uniqueKeys);
		      uniqueKeyAttributes2 = uniqueKeyAttributes2.result(`${uniqueKeyAttributes2.findKey()}.fields`).map((field) => _.findKey(model.attributes, (chr) => chr.field === field)).value();
		      return uniqueKeyAttributes2;
		    };
		    const stringify = (obj) => obj instanceof Buffer ? obj.toString("hex") : obj;
		    let primaryKeyAttributes;
		    let uniqueKeyAttributes;
		    let prefix;
		    for (rowsI = 0; rowsI < rowsLength; rowsI++) {
		      row = rows[rowsI];
		      if (rowsI === 0) {
		        keys = Object.keys(row);
		        keyLength = keys.length;
		      }
		      if (checkExisting) {
		        topExists = false;
		        $length = includeOptions.model.primaryKeyAttributes.length;
		        topHash = "";
		        if ($length === 1) {
		          topHash = stringify(row[includeOptions.model.primaryKeyAttributes[0]]);
		        } else if ($length > 1) {
		          for ($i = 0; $i < $length; $i++) {
		            topHash += stringify(row[includeOptions.model.primaryKeyAttributes[$i]]);
		          }
		        } else if (!_.isEmpty(includeOptions.model.uniqueKeys)) {
		          uniqueKeyAttributes = getUniqueKeyAttributes(includeOptions.model);
		          for ($i = 0; $i < uniqueKeyAttributes.length; $i++) {
		            topHash += row[uniqueKeyAttributes[$i]];
		          }
		        }
		      }
		      topValues = values = {};
		      $prevKeyPrefix = void 0;
		      for (keyI = 0; keyI < keyLength; keyI++) {
		        key = keys[keyI];
		        keyPrefixString(key, keyPrefixStringMemo);
		        $keyPrefix = keyPrefix(key);
		        if (rowsI === 0 && !Object.hasOwn(includeMap, key)) {
		          if ($keyPrefix.length === 0) {
		            includeMap[key] = includeMap[""] = includeOptions;
		          } else {
		            $current = includeOptions;
		            previousPiece = void 0;
		            $keyPrefix.forEach(buildIncludeMap);
		          }
		        }
		        if ($prevKeyPrefix !== void 0 && $prevKeyPrefix !== $keyPrefix) {
		          if (checkExisting) {
		            length = $prevKeyPrefix.length;
		            $parent = null;
		            parentHash = null;
		            if (length) {
		              for (i = 0; i < length; i++) {
		                prefix = $parent ? `${$parent}.${$prevKeyPrefix[i]}` : $prevKeyPrefix[i];
		                primaryKeyAttributes = includeMap[prefix].model.primaryKeyAttributes;
		                $length = primaryKeyAttributes.length;
		                itemHash = prefix;
		                if ($length === 1) {
		                  itemHash += stringify(row[`${prefix}.${primaryKeyAttributes[0]}`]);
		                } else if ($length > 1) {
		                  for ($i = 0; $i < $length; $i++) {
		                    itemHash += stringify(row[`${prefix}.${primaryKeyAttributes[$i]}`]);
		                  }
		                } else if (!_.isEmpty(includeMap[prefix].model.uniqueKeys)) {
		                  uniqueKeyAttributes = getUniqueKeyAttributes(includeMap[prefix].model);
		                  for ($i = 0; $i < uniqueKeyAttributes.length; $i++) {
		                    itemHash += row[`${prefix}.${uniqueKeyAttributes[$i]}`];
		                  }
		                }
		                if (!parentHash) {
		                  parentHash = topHash;
		                }
		                itemHash = parentHash + itemHash;
		                $parent = prefix;
		                if (i < length - 1) {
		                  parentHash = itemHash;
		                }
		              }
		            } else {
		              itemHash = topHash;
		            }
		            if (itemHash === topHash) {
		              if (!resultMap[itemHash]) {
		                resultMap[itemHash] = values;
		              } else {
		                topExists = true;
		              }
		            } else if (!resultMap[itemHash]) {
		              $parent = resultMap[parentHash];
		              $lastKeyPrefix = lastKeyPrefix(prevKey);
		              if (includeMap[prevKey].association.isSingleAssociation) {
		                if ($parent) {
		                  $parent[$lastKeyPrefix] = resultMap[itemHash] = values;
		                }
		              } else {
		                if (!$parent[$lastKeyPrefix]) {
		                  $parent[$lastKeyPrefix] = [];
		                }
		                $parent[$lastKeyPrefix].push(resultMap[itemHash] = values);
		              }
		            }
		            values = {};
		          } else {
		            $current = topValues;
		            length = $keyPrefix.length;
		            if (length) {
		              for (i = 0; i < length; i++) {
		                if (i === length - 1) {
		                  values = $current[$keyPrefix[i]] = {};
		                }
		                $current = $current[$keyPrefix[i]] || {};
		              }
		            }
		          }
		        }
		        values[removeKeyPrefix(key)] = row[key];
		        prevKey = key;
		        $prevKeyPrefix = $keyPrefix;
		      }
		      if (checkExisting) {
		        length = $prevKeyPrefix.length;
		        $parent = null;
		        parentHash = null;
		        if (length) {
		          for (i = 0; i < length; i++) {
		            prefix = $parent ? `${$parent}.${$prevKeyPrefix[i]}` : $prevKeyPrefix[i];
		            primaryKeyAttributes = includeMap[prefix].model.primaryKeyAttributes;
		            $length = primaryKeyAttributes.length;
		            itemHash = prefix;
		            if ($length === 1) {
		              itemHash += stringify(row[`${prefix}.${primaryKeyAttributes[0]}`]);
		            } else if ($length > 0) {
		              for ($i = 0; $i < $length; $i++) {
		                itemHash += stringify(row[`${prefix}.${primaryKeyAttributes[$i]}`]);
		              }
		            } else if (!_.isEmpty(includeMap[prefix].model.uniqueKeys)) {
		              uniqueKeyAttributes = getUniqueKeyAttributes(includeMap[prefix].model);
		              for ($i = 0; $i < uniqueKeyAttributes.length; $i++) {
		                itemHash += row[`${prefix}.${uniqueKeyAttributes[$i]}`];
		              }
		            }
		            if (!parentHash) {
		              parentHash = topHash;
		            }
		            itemHash = parentHash + itemHash;
		            $parent = prefix;
		            if (i < length - 1) {
		              parentHash = itemHash;
		            }
		          }
		        } else {
		          itemHash = topHash;
		        }
		        if (itemHash === topHash) {
		          if (!resultMap[itemHash]) {
		            resultMap[itemHash] = values;
		          } else {
		            topExists = true;
		          }
		        } else if (!resultMap[itemHash]) {
		          $parent = resultMap[parentHash];
		          $lastKeyPrefix = lastKeyPrefix(prevKey);
		          if (includeMap[prevKey].association.isSingleAssociation) {
		            if ($parent) {
		              $parent[$lastKeyPrefix] = resultMap[itemHash] = values;
		            }
		          } else {
		            if (!$parent[$lastKeyPrefix]) {
		              $parent[$lastKeyPrefix] = [];
		            }
		            $parent[$lastKeyPrefix].push(resultMap[itemHash] = values);
		          }
		        }
		        if (!topExists) {
		          results.push(topValues);
		        }
		      } else {
		        results[rowsI] = topValues;
		      }
		    }
		    return results;
		  }
		}
		
		return query$8;
	}

	var query$7;
	var hasRequiredQuery$7;

	function requireQuery$7 () {
		if (hasRequiredQuery$7) return query$7;
		hasRequiredQuery$7 = 1;
		var __create = Object.create;
		var __defProp = Object.defineProperty;
		var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
		var __getOwnPropNames = Object.getOwnPropertyNames;
		var __getProtoOf = Object.getPrototypeOf;
		var __hasOwnProp = Object.prototype.hasOwnProperty;
		var __export = (target, all) => {
		  for (var name in all)
		    __defProp(target, name, { get: all[name], enumerable: true });
		};
		var __copyProps = (to, from, except, desc) => {
		  if (from && typeof from === "object" || typeof from === "function") {
		    for (let key of __getOwnPropNames(from))
		      if (!__hasOwnProp.call(to, key) && key !== except)
		        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
		  }
		  return to;
		};
		var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
		  // If the importer is in node compatibility mode or this is not an ESM
		  // file that has been converted to a CommonJS file using a Babel-
		  // compatible transform (i.e. "__esModule" has not been set), then set
		  // "default" to the CommonJS "module.exports" for node compatibility.
		  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
		  mod
		));
		var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
		var query_exports = {};
		__export(query_exports, {
		  MariaDbQuery: () => MariaDbQuery
		});
		query$7 = __toCommonJS(query_exports);
		var import_node_util = __toESM(require$$0$1);
		const { AbstractQuery } = requireQuery$8();
		const sequelizeErrors = errors;
		const _ = lodashExports;
		const DataTypes = dataTypes$8;
		const { logger } = requireLogger();
		const ER_DUP_ENTRY = 1062;
		const ER_DEADLOCK = 1213;
		const ER_ROW_IS_REFERENCED = 1451;
		const ER_NO_REFERENCED_ROW = 1452;
		const ER_CANT_DROP_FIELD_OR_KEY = 1091;
		const debug = logger.debugContext("sql:mariadb");
		class MariaDbQuery extends AbstractQuery {
		  constructor(connection, sequelize, options) {
		    super(connection, sequelize, { showWarnings: false, ...options });
		  }
		  async run(sql, parameters) {
		    this.sql = sql;
		    const { connection, options } = this;
		    const showWarnings = this.sequelize.options.showWarnings || options.showWarnings;
		    const complete = this._logQuery(sql, debug, parameters);
		    if (parameters) {
		      debug("parameters(%j)", parameters);
		    }
		    let results;
		    try {
		      results = await connection.query(this.sql, parameters);
		    } catch (error) {
		      if (options.transaction && error.errno === ER_DEADLOCK) {
		        try {
		          await options.transaction.rollback();
		        } catch {
		        }
		        options.transaction.finished = "rollback";
		      }
		      error.sql = sql;
		      error.parameters = parameters;
		      throw this.formatError(error);
		    } finally {
		      complete();
		    }
		    if (showWarnings && results && results.warningStatus > 0) {
		      await this.logWarnings(results);
		    }
		    return this.formatResults(results);
		  }
		  /**
		   * High level function that handles the results of a query execution.
		   *
		   *
		   * Example:
		   *  query.formatResults([
		   *    {
		   *      id: 1,              // this is from the main table
		   *      attr2: 'snafu',     // this is from the main table
		   *      Tasks.id: 1,        // this is from the associated table
		   *      Tasks.title: 'task' // this is from the associated table
		   *    }
		   *  ])
		   *
		   * @param {Array} data - The result of the query execution.
		   * @private
		   */
		  formatResults(data) {
		    var _a;
		    let result = this.instance;
		    if (this.isBulkUpdateQuery() || this.isBulkDeleteQuery()) {
		      return data.affectedRows;
		    }
		    if (this.isUpsertQuery()) {
		      return [result, data.affectedRows === 1];
		    }
		    if (this.isInsertQuery(data)) {
		      this.handleInsertQuery(data);
		      if (!this.instance) {
		        const modelDefinition = (_a = this.model) == null ? void 0 : _a.modelDefinition;
		        if ((modelDefinition == null ? void 0 : modelDefinition.autoIncrementAttributeName) && (modelDefinition == null ? void 0 : modelDefinition.autoIncrementAttributeName) === this.model.primaryKeyAttribute) {
		          const startId = data[this.getInsertIdField()];
		          result = new Array(data.affectedRows);
		          const pkColumnName = modelDefinition.attributes.get(this.model.primaryKeyAttribute).columnName;
		          for (let i = 0n; i < data.affectedRows; i++) {
		            result[i] = { [pkColumnName]: startId + i };
		          }
		          return [result, data.affectedRows];
		        }
		        return [data[this.getInsertIdField()], data.affectedRows];
		      }
		    }
		    if (this.isSelectQuery()) {
		      this.handleJsonSelectQuery(data);
		      return this.handleSelectQuery(data);
		    }
		    if (this.isInsertQuery() || this.isUpdateQuery()) {
		      return [result, data.affectedRows];
		    }
		    if (this.isCallQuery()) {
		      return data[0];
		    }
		    if (this.isRawQuery()) {
		      const meta = data.meta;
		      return [data, meta];
		    }
		    if (this.isShowIndexesQuery()) {
		      return this.handleShowIndexesQuery(data);
		    }
		    if (this.isForeignKeysQuery()) {
		      return data;
		    }
		    if (this.isShowConstraintsQuery()) {
		      return data;
		    }
		    if (this.isShowTablesQuery()) {
		      return this.handleShowTablesQuery(data);
		    }
		    if (this.isDescribeQuery()) {
		      result = {};
		      for (const _result of data) {
		        result[_result.Field] = {
		          type: _result.Type.toLowerCase().startsWith("enum") ? _result.Type.replace(
		            /^enum/i,
		            "ENUM"
		          ) : _result.Type.toUpperCase(),
		          allowNull: _result.Null === "YES",
		          defaultValue: _result.Default,
		          primaryKey: _result.Key === "PRI",
		          autoIncrement: Object.hasOwn(_result, "Extra") && _result.Extra.toLowerCase() === "auto_increment",
		          comment: _result.Comment ? _result.Comment : null
		        };
		      }
		      return result;
		    }
		    return result;
		  }
		  handleJsonSelectQuery(rows) {
		    if (!this.model || !this.model.fieldRawAttributesMap) {
		      return;
		    }
		    const meta = rows.meta;
		    for (const [i, _field] of Object.keys(this.model.fieldRawAttributesMap).entries()) {
		      const modelField = this.model.fieldRawAttributesMap[_field];
		      if (modelField.type instanceof DataTypes.JSON) {
		        rows = rows.map((row) => {
		          if (row[modelField.fieldName] && typeof row[modelField.fieldName] === "string" && (!meta[i] || meta[i].dataTypeFormat !== "json")) {
		            row[modelField.fieldName] = JSON.parse(row[modelField.fieldName]);
		          }
		          if (DataTypes.JSON.parse) {
		            return DataTypes.JSON.parse(
		              modelField,
		              this.sequelize.options,
		              row[modelField.fieldName]
		            );
		          }
		          return row;
		        });
		      }
		    }
		  }
		  formatError(err) {
		    switch (err.errno) {
		      case ER_DUP_ENTRY: {
		        const match = err.message.match(
		          /Duplicate entry '([\S\s]*)' for key '?((.|\s)*?)'?\s.*$/
		        );
		        let fields = {};
		        let message = "Validation error";
		        const values = match ? match[1].split("-") : void 0;
		        const fieldKey = match ? match[2] : void 0;
		        const fieldVal = match ? match[1] : void 0;
		        const uniqueKey = this.model && this.model.getIndexes().find((index) => index.unique && index.name === fieldKey);
		        if (uniqueKey) {
		          if (uniqueKey.msg) {
		            message = uniqueKey.msg;
		          }
		          fields = _.zipObject(uniqueKey.fields, values);
		        } else {
		          fields[fieldKey] = fieldVal;
		        }
		        const errors = [];
		        _.forOwn(fields, (value, field) => {
		          errors.push(new sequelizeErrors.ValidationErrorItem(
		            this.getUniqueConstraintErrorMessage(field),
		            "unique violation",
		            // sequelizeErrors.ValidationErrorItem.Origins.DB,
		            field,
		            value,
		            this.instance,
		            "not_unique"
		          ));
		        });
		        return new sequelizeErrors.UniqueConstraintError({ message, errors, cause: err, fields });
		      }
		      case ER_ROW_IS_REFERENCED:
		      case ER_NO_REFERENCED_ROW: {
		        const match = err.message.match(
		          /CONSTRAINT (["`])(.*)\1 FOREIGN KEY \(\1(.*)\1\) REFERENCES \1(.*)\1 \(\1(.*)\1\)/
		        );
		        const quoteChar = match ? match[1] : "`";
		        const fields = match ? match[3].split(new RegExp(`${quoteChar}, *${quoteChar}`)) : void 0;
		        return new sequelizeErrors.ForeignKeyConstraintError({
		          reltype: err.errno === ER_ROW_IS_REFERENCED ? "parent" : "child",
		          table: match ? match[4] : void 0,
		          fields,
		          value: fields && fields.length && this.instance && this.instance[fields[0]] || void 0,
		          index: match ? match[2] : void 0,
		          cause: err
		        });
		      }
		      case ER_CANT_DROP_FIELD_OR_KEY: {
		        const constraintMatch = err.sql.match(/(?:constraint|index) `(.+?)`/i);
		        const constraint = constraintMatch ? constraintMatch[1] : void 0;
		        const tableMatch = err.sql.match(/table `(.+?)`/i);
		        const table = tableMatch ? tableMatch[1] : void 0;
		        return new sequelizeErrors.UnknownConstraintError({
		          message: err.text,
		          constraint,
		          table,
		          cause: err
		        });
		      }
		      default:
		        return new sequelizeErrors.DatabaseError(err);
		    }
		  }
		  handleShowTablesQuery(results) {
		    return results.map((resultSet) => ({
		      tableName: resultSet.TABLE_NAME,
		      schema: resultSet.TABLE_SCHEMA
		    }));
		  }
		  handleShowIndexesQuery(data) {
		    let currItem;
		    const result = [];
		    for (const item of data) {
		      if (!currItem || currItem.name !== item.Key_name) {
		        currItem = {
		          primary: item.Key_name === "PRIMARY",
		          fields: [],
		          name: item.Key_name,
		          tableName: item.Table,
		          unique: item.Non_unique !== "1",
		          type: item.Index_type
		        };
		        result.push(currItem);
		      }
		      currItem.fields[item.Seq_in_index - 1] = {
		        attribute: item.Column_name,
		        length: item.Sub_part || void 0,
		        order: item.Collation === "A" ? "ASC" : item.Collation === "D" ? "DESC" : item.Collation === null ? null : (() => {
		          throw new Error(`Unknown index collation ${import_node_util.default.inspect(item.Collation)}`);
		        })()
		      };
		    }
		    return result;
		  }
		}
		
		return query$7;
	}

	var sqlString;
	var hasRequiredSqlString;

	function requireSqlString () {
		if (hasRequiredSqlString) return sqlString;
		hasRequiredSqlString = 1;
		var __create = Object.create;
		var __defProp = Object.defineProperty;
		var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
		var __getOwnPropNames = Object.getOwnPropertyNames;
		var __getProtoOf = Object.getPrototypeOf;
		var __hasOwnProp = Object.prototype.hasOwnProperty;
		var __export = (target, all) => {
		  for (var name in all)
		    __defProp(target, name, { get: all[name], enumerable: true });
		};
		var __copyProps = (to, from, except, desc) => {
		  if (from && typeof from === "object" || typeof from === "function") {
		    for (let key of __getOwnPropNames(from))
		      if (!__hasOwnProp.call(to, key) && key !== except)
		        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
		  }
		  return to;
		};
		var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
		  // If the importer is in node compatibility mode or this is not an ESM
		  // file that has been converted to a CommonJS file using a Babel-
		  // compatible transform (i.e. "__esModule" has not been set), then set
		  // "default" to the CommonJS "module.exports" for node compatibility.
		  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
		  mod
		));
		var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
		var sql_string_exports = {};
		__export(sql_string_exports, {
		  bestGuessDataTypeOfVal: () => bestGuessDataTypeOfVal,
		  getTextDataTypeForDialect: () => getTextDataTypeForDialect
		});
		sqlString = __toCommonJS(sql_string_exports);
		var DataTypes = __toESM(dataTypes$8);
		var import_logger = requireLogger();
		const textDataTypeMap = /* @__PURE__ */ new Map();
		function getTextDataTypeForDialect(dialect) {
		  let type = textDataTypeMap.get(dialect.name);
		  if (type == null) {
		    type = new DataTypes.STRING().toDialectDataType(dialect);
		    textDataTypeMap.set(dialect.name, type);
		  }
		  return type;
		}
		function bestGuessDataTypeOfVal(val, dialect) {
		  switch (typeof val) {
		    case "bigint":
		      return new DataTypes.BIGINT().toDialectDataType(dialect);
		    case "number": {
		      if (Number.isSafeInteger(val)) {
		        return new DataTypes.INTEGER().toDialectDataType(dialect);
		      }
		      return new DataTypes.REAL().toDialectDataType(dialect);
		    }
		    case "boolean":
		      return new DataTypes.BOOLEAN().toDialectDataType(dialect);
		    case "object":
		      if (Array.isArray(val)) {
		        if (val.length === 0) {
		          throw new Error(`Could not guess type of value ${import_logger.logger.inspect(val)} because it is an empty array`);
		        }
		        return new DataTypes.ARRAY(bestGuessDataTypeOfVal(val[0], dialect)).toDialectDataType(dialect);
		      }
		      if (val instanceof Date) {
		        return new DataTypes.DATE(3).toDialectDataType(dialect);
		      }
		      if (Buffer.isBuffer(val)) {
		        if (dialect.name === "ibmi") {
		          return new DataTypes.STRING().toDialectDataType(dialect);
		        }
		        return new DataTypes.BLOB().toDialectDataType(dialect);
		      }
		      break;
		    case "string":
		      return getTextDataTypeForDialect(dialect);
		  }
		  throw new TypeError(`Could not guess type of value ${import_logger.logger.inspect(val)}`);
		}
		
		return sqlString;
	}

	var queryGeneratorTypescript$8;
	var hasRequiredQueryGeneratorTypescript$8;

	function requireQueryGeneratorTypescript$8 () {
		if (hasRequiredQueryGeneratorTypescript$8) return queryGeneratorTypescript$8;
		hasRequiredQueryGeneratorTypescript$8 = 1;
		var __create = Object.create;
		var __defProp = Object.defineProperty;
		var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
		var __getOwnPropNames = Object.getOwnPropertyNames;
		var __getProtoOf = Object.getPrototypeOf;
		var __hasOwnProp = Object.prototype.hasOwnProperty;
		var __export = (target, all) => {
		  for (var name in all)
		    __defProp(target, name, { get: all[name], enumerable: true });
		};
		var __copyProps = (to, from, except, desc) => {
		  if (from && typeof from === "object" || typeof from === "function") {
		    for (let key of __getOwnPropNames(from))
		      if (!__hasOwnProp.call(to, key) && key !== except)
		        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
		  }
		  return to;
		};
		var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
		  // If the importer is in node compatibility mode or this is not an ESM
		  // file that has been converted to a CommonJS file using a Babel-
		  // compatible transform (i.e. "__esModule" has not been set), then set
		  // "default" to the CommonJS "module.exports" for node compatibility.
		  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
		  mod
		));
		var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
		var query_generator_typescript_exports = {};
		__export(query_generator_typescript_exports, {
		  AbstractQueryGeneratorTypeScript: () => AbstractQueryGeneratorTypeScript,
		  REMOVE_CONSTRAINT_QUERY_SUPPORTABLE_OPTIONS: () => REMOVE_CONSTRAINT_QUERY_SUPPORTABLE_OPTIONS,
		  REMOVE_INDEX_QUERY_SUPPORTABLE_OPTIONS: () => REMOVE_INDEX_QUERY_SUPPORTABLE_OPTIONS
		});
		queryGeneratorTypescript$8 = __toCommonJS(query_generator_typescript_exports);
		var import_node_util = __toESM(require$$0$1);
		var import_isObject = __toESM(isObject_1);
		var import_deferrable = deferrable;
		var import_association_path = associationPath;
		var import_attribute = requireAttribute();
		var import_base_sql_expression = baseSqlExpression;
		var import_cast = requireCast();
		var import_col = col_1;
		var import_dialect_aware_fn = dialectAwareFn;
		var import_fn = fn_1;
		var import_identifier = identifier_1;
		var import_json_path = jsonPath_1;
		var import_list = list_1;
		var import_literal = literal_1;
		var import_value = value;
		var import_where = requireWhere();
		var import_operators = operators;
		var import_sql_string = requireSqlString();
		var import_check = requireCheck();
		var import_deprecations = deprecations;
		var import_dialect = requireDialect();
		var import_join_sql_fragments = joinSqlFragments;
		var import_model_utils = requireModelUtils();
		var import_object = object$1;
		var import_sql = sql;
		var import_data_types_utils = requireDataTypesUtils();
		var import_data_types = requireDataTypes$8();
		var import_where_sql_builder = requireWhereSqlBuilder();
		const REMOVE_CONSTRAINT_QUERY_SUPPORTABLE_OPTIONS = /* @__PURE__ */ new Set(["ifExists", "cascade"]);
		const REMOVE_INDEX_QUERY_SUPPORTABLE_OPTIONS = /* @__PURE__ */ new Set(["concurrently", "ifExists", "cascade"]);
		class AbstractQueryGeneratorTypeScript {
		  whereSqlBuilder;
		  dialect;
		  sequelize;
		  constructor(options) {
		    if (!options.sequelize) {
		      throw new Error("QueryGenerator initialized without options.sequelize");
		    }
		    if (!options.dialect) {
		      throw new Error("QueryGenerator initialized without options.dialect");
		    }
		    this.sequelize = options.sequelize;
		    this.dialect = options.dialect;
		    this.whereSqlBuilder = new import_where_sql_builder.WhereSqlBuilder(this);
		  }
		  get options() {
		    return this.sequelize.options;
		  }
		  describeTableQuery(tableName) {
		    return `DESCRIBE ${this.quoteTable(tableName)};`;
		  }
		  addConstraintQuery(tableName, options) {
		    if (!this.dialect.supports.constraints.add) {
		      throw new Error(`Add constraint queries are not supported by ${this.dialect.name} dialect`);
		    }
		    return (0, import_join_sql_fragments.joinSQLFragments)([
		      "ALTER TABLE",
		      this.quoteTable(tableName),
		      "ADD",
		      this._getConstraintSnippet(tableName, options)
		    ]);
		  }
		  _getConstraintSnippet(tableName, options) {
		    const quotedFields = options.fields.map((field) => {
		      if (typeof field === "string") {
		        return this.quoteIdentifier(field);
		      }
		      if (field instanceof import_base_sql_expression.BaseSqlExpression) {
		        return this.formatSqlExpression(field);
		      }
		      if (field.attribute) {
		        throw new Error("The field.attribute property has been removed. Use the field.name property instead");
		      }
		      if (!field.name) {
		        throw new Error(`The following index field has no name: ${field}`);
		      }
		      return this.quoteIdentifier(field.name);
		    });
		    const constraintNameParts = options.name ? null : options.fields.map((field) => {
		      if (typeof field === "string") {
		        return field;
		      }
		      if (field instanceof import_base_sql_expression.BaseSqlExpression) {
		        throw new TypeError(`The constraint name must be provided explicitly if one of Sequelize's method (literal(), col(), etc\u2026) is used in the constraint's fields`);
		      }
		      return field.name;
		    });
		    let constraintSnippet;
		    const table = this.extractTableDetails(tableName);
		    const fieldsSqlQuotedString = quotedFields.join(", ");
		    const fieldsSqlString = constraintNameParts == null ? void 0 : constraintNameParts.join("_");
		    switch (options.type.toUpperCase()) {
		      case "CHECK": {
		        if (!this.dialect.supports.constraints.check) {
		          throw new Error(`Check constraints are not supported by ${this.dialect.name} dialect`);
		        }
		        const constraintName = this.quoteIdentifier(options.name || `${table.tableName}_${fieldsSqlString}_ck`);
		        constraintSnippet = `CONSTRAINT ${constraintName} CHECK (${this.whereItemsQuery(options.where)})`;
		        break;
		      }
		      case "UNIQUE": {
		        if (!this.dialect.supports.constraints.unique) {
		          throw new Error(`Unique constraints are not supported by ${this.dialect.name} dialect`);
		        }
		        const constraintName = this.quoteIdentifier(options.name || `${table.tableName}_${fieldsSqlString}_uk`);
		        constraintSnippet = `CONSTRAINT ${constraintName} UNIQUE (${fieldsSqlQuotedString})`;
		        if (options.deferrable) {
		          constraintSnippet += ` ${this._getDeferrableConstraintSnippet(options.deferrable)}`;
		        }
		        break;
		      }
		      case "DEFAULT": {
		        if (!this.dialect.supports.constraints.default) {
		          throw new Error(`Default constraints are not supported by ${this.dialect.name} dialect`);
		        }
		        if (options.defaultValue === void 0) {
		          throw new Error("Default value must be specified for DEFAULT CONSTRAINT");
		        }
		        const constraintName = this.quoteIdentifier(options.name || `${table.tableName}_${fieldsSqlString}_df`);
		        constraintSnippet = `CONSTRAINT ${constraintName} DEFAULT (${this.escape(options.defaultValue, options)}) FOR ${quotedFields[0]}`;
		        break;
		      }
		      case "PRIMARY KEY": {
		        if (!this.dialect.supports.constraints.primaryKey) {
		          throw new Error(`Primary key constraints are not supported by ${this.dialect.name} dialect`);
		        }
		        const constraintName = this.quoteIdentifier(options.name || `${table.tableName}_${fieldsSqlString}_pk`);
		        constraintSnippet = `CONSTRAINT ${constraintName} PRIMARY KEY (${fieldsSqlQuotedString})`;
		        if (options.deferrable) {
		          constraintSnippet += ` ${this._getDeferrableConstraintSnippet(options.deferrable)}`;
		        }
		        break;
		      }
		      case "FOREIGN KEY": {
		        if (!this.dialect.supports.constraints.foreignKey) {
		          throw new Error(`Foreign key constraints are not supported by ${this.dialect.name} dialect`);
		        }
		        const references = options.references;
		        if (!references || !references.table || !(references.field || references.fields)) {
		          throw new Error("Invalid foreign key constraint options. `references` object with `table` and `field` must be specified");
		        }
		        const referencedTable = this.extractTableDetails(references.table);
		        const constraintName = this.quoteIdentifier(options.name || `${table.tableName}_${fieldsSqlString}_${referencedTable.tableName}_fk`);
		        const quotedReferences = references.field !== void 0 ? this.quoteIdentifier(references.field) : references.fields.map((f) => this.quoteIdentifier(f)).join(", ");
		        const referencesSnippet = `${this.quoteTable(referencedTable)} (${quotedReferences})`;
		        constraintSnippet = `CONSTRAINT ${constraintName} `;
		        constraintSnippet += `FOREIGN KEY (${fieldsSqlQuotedString}) REFERENCES ${referencesSnippet}`;
		        if (options.onUpdate) {
		          if (!this.dialect.supports.constraints.onUpdate) {
		            throw new Error(`Foreign key constraint with onUpdate is not supported by ${this.dialect.name} dialect`);
		          }
		          constraintSnippet += ` ON UPDATE ${options.onUpdate.toUpperCase()}`;
		        }
		        if (options.onDelete) {
		          constraintSnippet += ` ON DELETE ${options.onDelete.toUpperCase()}`;
		        }
		        if (options.deferrable) {
		          constraintSnippet += ` ${this._getDeferrableConstraintSnippet(options.deferrable)}`;
		        }
		        break;
		      }
		      default: {
		        throw new Error(`Constraint type ${options.type} is not supported by ${this.dialect.name} dialect`);
		      }
		    }
		    return constraintSnippet;
		  }
		  _getDeferrableConstraintSnippet(deferrable) {
		    if (!this.dialect.supports.constraints.deferrable) {
		      throw new Error(`Deferrable constraints are not supported by ${this.dialect.name} dialect`);
		    }
		    switch (deferrable) {
		      case import_deferrable.Deferrable.INITIALLY_DEFERRED: {
		        return "DEFERRABLE INITIALLY DEFERRED";
		      }
		      case import_deferrable.Deferrable.INITIALLY_IMMEDIATE: {
		        return "DEFERRABLE INITIALLY IMMEDIATE";
		      }
		      case import_deferrable.Deferrable.NOT: {
		        return "NOT DEFERRABLE";
		      }
		      default: {
		        throw new Error(`Unknown constraint checking behavior ${deferrable}`);
		      }
		    }
		  }
		  removeConstraintQuery(tableName, constraintName, options) {
		    if (!this.dialect.supports.constraints.remove) {
		      throw new Error(`Remove constraint queries are not supported by ${this.dialect.name} dialect`);
		    }
		    if (options) {
		      const REMOVE_CONSTRAINT_QUERY_SUPPORTED_OPTIONS = /* @__PURE__ */ new Set();
		      const { removeOptions } = this.dialect.supports.constraints;
		      if (removeOptions.cascade) {
		        REMOVE_CONSTRAINT_QUERY_SUPPORTED_OPTIONS.add("cascade");
		      }
		      if (removeOptions.ifExists) {
		        REMOVE_CONSTRAINT_QUERY_SUPPORTED_OPTIONS.add("ifExists");
		      }
		      (0, import_check.rejectInvalidOptions)(
		        "removeConstraintQuery",
		        this.dialect.name,
		        REMOVE_CONSTRAINT_QUERY_SUPPORTABLE_OPTIONS,
		        REMOVE_CONSTRAINT_QUERY_SUPPORTED_OPTIONS,
		        options
		      );
		    }
		    return (0, import_join_sql_fragments.joinSQLFragments)([
		      "ALTER TABLE",
		      this.quoteTable(tableName),
		      "DROP CONSTRAINT",
		      (options == null ? void 0 : options.ifExists) ? "IF EXISTS" : "",
		      this.quoteIdentifier(constraintName),
		      (options == null ? void 0 : options.cascade) ? "CASCADE" : ""
		    ]);
		  }
		  setConstraintCheckingQuery(type, constraints) {
		    var _a;
		    if (!this.dialect.supports.constraints.deferrable) {
		      throw new Error(`Deferrable constraints are not supported by ${this.dialect.name} dialect`);
		    }
		    let constraintFragment = "ALL";
		    if (type instanceof import_deferrable.ConstraintChecking) {
		      if ((_a = type.constraints) == null ? void 0 : _a.length) {
		        constraintFragment = type.constraints.map((constraint) => this.quoteIdentifier(constraint)).join(", ");
		      }
		      return `SET CONSTRAINTS ${constraintFragment} ${type.toString()}`;
		    }
		    if (constraints == null ? void 0 : constraints.length) {
		      constraintFragment = constraints.map((constraint) => this.quoteIdentifier(constraint)).join(", ");
		    }
		    return `SET CONSTRAINTS ${constraintFragment} ${type.toString()}`;
		  }
		  showConstraintsQuery(_tableName, _options) {
		    throw new Error(`showConstraintsQuery has not been implemented in ${this.dialect.name}.`);
		  }
		  showIndexesQuery(_tableName) {
		    throw new Error(`showIndexesQuery has not been implemented in ${this.dialect.name}.`);
		  }
		  removeIndexQuery(_tableName, _indexNameOrAttributes, _options) {
		    throw new Error(`removeIndexQuery has not been implemented in ${this.dialect.name}.`);
		  }
		  /**
		   * Generates an SQL query that returns all foreign keys of a table or the foreign key constraint of a given column.
		   *
		   * @param _tableName The table or associated model.
		   * @param _columnName The name of the column. Not supported by SQLite.
		   * @returns The generated SQL query.
		   */
		  getForeignKeyQuery(_tableName, _columnName) {
		    throw new Error(`getForeignKeyQuery has not been implemented in ${this.dialect.name}.`);
		  }
		  // TODO: rename to "normalizeTable" & move to sequelize class
		  extractTableDetails(tableNameOrModel, options) {
		    const tableNameObject = (0, import_model_utils.isModelStatic)(tableNameOrModel) ? tableNameOrModel.getTableName() : (0, import_check.isString)(tableNameOrModel) ? { tableName: tableNameOrModel } : tableNameOrModel;
		    if (!(0, import_check.isPlainObject)(tableNameObject)) {
		      throw new Error(`Invalid input received, got ${import_node_util.default.inspect(tableNameOrModel)}, expected a Model Class, a TableNameWithSchema object, or a table name string`);
		    }
		    delete tableNameObject.toString;
		    return {
		      ...tableNameObject,
		      schema: (options == null ? void 0 : options.schema) || tableNameObject.schema || this.options.schema || this.dialect.getDefaultSchema(),
		      delimiter: (options == null ? void 0 : options.delimiter) || tableNameObject.delimiter || "."
		    };
		  }
		  /**
		   * Quote table name with optional alias and schema attribution
		   *
		   * @param param table string or object
		   * @param alias alias name
		   */
		  quoteTable(param, alias = false) {
		    if ((0, import_model_utils.isModelStatic)(param)) {
		      param = param.getTableName();
		    }
		    const tableName = this.extractTableDetails(param);
		    if ((0, import_isObject.default)(param) && ("as" in param || "name" in param)) {
		      throw new Error('parameters "as" and "name" are not allowed in the first parameter of quoteTable, pass them as the second parameter.');
		    }
		    if (alias === true) {
		      alias = tableName.tableName;
		    }
		    let sql = "";
		    if (this.dialect.supports.schemas) {
		      if (tableName.schema && tableName.schema !== this.dialect.getDefaultSchema()) {
		        sql += `${this.quoteIdentifier(tableName.schema)}.`;
		      }
		      sql += this.quoteIdentifier(tableName.tableName);
		    } else {
		      const fakeSchemaPrefix = tableName.schema && tableName.schema !== this.dialect.getDefaultSchema() ? tableName.schema + (tableName.delimiter || ".") : "";
		      sql += this.quoteIdentifier(fakeSchemaPrefix + tableName.tableName);
		    }
		    if (alias) {
		      sql += ` AS ${this.quoteIdentifier(alias)}`;
		    }
		    return sql;
		  }
		  /**
		   * Adds quotes to identifier
		   *
		   * @param identifier
		   * @param _force
		   */
		  // TODO: memoize last result
		  quoteIdentifier(identifier, _force) {
		    return (0, import_dialect.quoteIdentifier)(identifier, this.dialect.TICK_CHAR_LEFT, this.dialect.TICK_CHAR_RIGHT);
		  }
		  isSameTable(tableA, tableB) {
		    if (tableA === tableB) {
		      return true;
		    }
		    tableA = this.extractTableDetails(tableA);
		    tableB = this.extractTableDetails(tableB);
		    return tableA.tableName === tableB.tableName && tableA.schema === tableB.schema;
		  }
		  whereQuery(where, options) {
		    const query = this.whereItemsQuery(where, options);
		    if (query && query.length > 0) {
		      return `WHERE ${query}`;
		    }
		    return "";
		  }
		  whereItemsQuery(where, options) {
		    return this.whereSqlBuilder.formatWhereOptions(where, options);
		  }
		  formatSqlExpression(piece, options) {
		    if (piece instanceof import_literal.Literal) {
		      return this.formatLiteral(piece, options);
		    }
		    if (piece instanceof import_fn.Fn) {
		      return this.formatFn(piece, options);
		    }
		    if (piece instanceof import_list.List) {
		      return this.escapeList(piece.values, options);
		    }
		    if (piece instanceof import_value.Value) {
		      return this.escape(piece.value, options);
		    }
		    if (piece instanceof import_identifier.Identifier) {
		      return this.quoteIdentifier(piece.value);
		    }
		    if (piece instanceof import_cast.Cast) {
		      return this.formatCast(piece, options);
		    }
		    if (piece instanceof import_col.Col) {
		      return this.formatCol(piece, options);
		    }
		    if (piece instanceof import_attribute.Attribute) {
		      return this.formatAttribute(piece, options);
		    }
		    if (piece instanceof import_where.Where) {
		      if (piece.where instanceof import_where_sql_builder.PojoWhere) {
		        return this.whereSqlBuilder.formatPojoWhere(piece.where, options);
		      }
		      return this.whereSqlBuilder.formatWhereOptions(piece.where, options);
		    }
		    if (piece instanceof import_json_path.JsonPath) {
		      return this.formatJsonPath(piece, options);
		    }
		    if (piece instanceof import_association_path.AssociationPath) {
		      return this.formatAssociationPath(piece);
		    }
		    if (piece instanceof import_dialect_aware_fn.DialectAwareFn) {
		      return this.formatDialectAwareFn(piece, options);
		    }
		    throw new Error(`Unknown sequelize method ${piece.constructor.name}`);
		  }
		  formatAssociationPath(associationPath) {
		    return `${this.quoteIdentifier(associationPath.associationPath.join("->"))}.${this.quoteIdentifier(associationPath.attributeName)}`;
		  }
		  formatJsonPath(jsonPathVal, options) {
		    const value = this.escape(jsonPathVal.expression, options);
		    if (jsonPathVal.path.length === 0) {
		      return value;
		    }
		    return this.jsonPathExtractionQuery(value, jsonPathVal.path, false);
		  }
		  /**
		   * The goal of this method is to execute the equivalent of json_unquote for the current dialect.
		   *
		   * @param _arg
		   * @param _options
		   */
		  formatUnquoteJson(_arg, _options) {
		    if (!this.dialect.supports.jsonOperations) {
		      throw new Error(`Unquoting JSON is not supported by ${this.dialect.name} dialect.`);
		    }
		    throw new Error(`formatUnquoteJson has not been implemented in ${this.dialect.name}.`);
		  }
		  /**
		   * @param _sqlExpression ⚠️ This is not an identifier, it's a raw SQL expression. It will be inlined in the query.
		   * @param _path The JSON path, where each item is one level of the path
		   * @param _unquote Whether the result should be unquoted (depending on dialect: ->> and #>> operators, json_unquote function). Defaults to `false`.
		   */
		  jsonPathExtractionQuery(_sqlExpression, _path, _unquote) {
		    if (!this.dialect.supports.jsonOperations) {
		      throw new Error(`JSON Paths are not supported in ${this.dialect.name}.`);
		    }
		    throw new Error(`jsonPathExtractionQuery has not been implemented in ${this.dialect.name}.`);
		  }
		  formatLiteral(piece, options) {
		    const sql = piece.val.map((part) => {
		      if (part instanceof import_base_sql_expression.BaseSqlExpression) {
		        return this.formatSqlExpression(part, options);
		      }
		      return part;
		    }).join("");
		    if (options == null ? void 0 : options.replacements) {
		      return (0, import_sql.injectReplacements)(sql, this.dialect, options.replacements, {
		        onPositionalReplacement: () => {
		          throw new TypeError(`The following literal includes positional replacements (?).
Only named replacements (:name) are allowed in literal() because we cannot guarantee the order in which they will be evaluated:
\u279C literal(${JSON.stringify(sql)})`);
		        }
		      });
		    }
		    return sql;
		  }
		  formatAttribute(piece, options) {
		    const model = options == null ? void 0 : options.model;
		    const columnName = (model == null ? void 0 : model.modelDefinition.getColumnNameLoose(piece.attributeName)) ?? piece.attributeName;
		    if (options == null ? void 0 : options.mainAlias) {
		      return `${this.quoteIdentifier(options.mainAlias)}.${this.quoteIdentifier(columnName)}`;
		    }
		    return this.quoteIdentifier(columnName);
		  }
		  formatFn(piece, options) {
		    const argEscapeOptions = piece.args.length > 0 && (options == null ? void 0 : options.type) ? { ...options, type: void 0 } : options;
		    const args = piece.args.map((arg) => {
		      return this.escape(arg, argEscapeOptions);
		    }).join(", ");
		    return `${piece.fn}(${args})`;
		  }
		  formatDialectAwareFn(piece, options) {
		    const argEscapeOptions = piece.args.length > 0 && (options == null ? void 0 : options.type) ? { ...options, type: void 0 } : options;
		    return piece.apply(this.dialect, argEscapeOptions);
		  }
		  formatCast(cast, options) {
		    const type = this.sequelize.normalizeDataType(cast.type);
		    const castSql = (0, import_where_sql_builder.wrapAmbiguousWhere)(cast.expression, this.escape(cast.expression, { ...options, type }));
		    const targetSql = (0, import_data_types_utils.attributeTypeToSql)(type).toUpperCase();
		    return `CAST(${castSql} AS ${targetSql})`;
		  }
		  formatCol(piece, options) {
		    if (piece.identifiers.length === 1 && piece.identifiers[0].startsWith("*")) {
		      return "*";
		    }
		    const identifiers = piece.identifiers.length === 1 ? piece.identifiers[0] : piece.identifiers;
		    return this.quote(identifiers, options == null ? void 0 : options.model, void 0, options);
		  }
		  /**
		   * Escapes a value (e.g. a string, number or date) as an SQL value (as opposed to an identifier).
		   *
		   * @param value The value to escape
		   * @param options The options to use when escaping the value
		   */
		  escape(value, options = import_object.EMPTY_OBJECT) {
		    if ((0, import_check.isDictionary)(value) && import_operators.Op.col in value) {
		      (0, import_deprecations.noOpCol)();
		      value = new import_col.Col(value[import_operators.Op.col]);
		    }
		    if (value instanceof import_base_sql_expression.BaseSqlExpression) {
		      return this.formatSqlExpression(value, options);
		    }
		    if (value === void 0) {
		      throw new TypeError('"undefined" cannot be escaped');
		    }
		    let { type } = options;
		    if (type != null) {
		      type = this.sequelize.normalizeDataType(type);
		    }
		    if (value === null && (!(type instanceof import_data_types.AbstractDataType) || !type.acceptsNull())) {
		      if (options.bindParam) {
		        return options.bindParam(null);
		      }
		      return "NULL";
		    }
		    if (type == null || typeof type === "string") {
		      type = (0, import_sql_string.bestGuessDataTypeOfVal)(value, this.dialect);
		    } else {
		      type = this.sequelize.normalizeDataType(type);
		    }
		    this.validate(value, type);
		    if (options.bindParam) {
		      return type.getBindParamSql(value, options);
		    }
		    return type.escape(value);
		  }
		  /**
		   * Validate a value against a field specification
		   *
		   * @param value The value to validate
		   * @param type The DataType to validate against
		   */
		  validate(value, type) {
		    if (this.sequelize.options.noTypeValidation || (0, import_check.isNullish)(value)) {
		      return;
		    }
		    if ((0, import_check.isString)(type)) {
		      return;
		    }
		    type = this.sequelize.normalizeDataType(type);
		    const error = (0, import_data_types_utils.validateDataType)(value, type);
		    if (error) {
		      throw error;
		    }
		  }
		  /**
		   * Escapes an array of values (e.g. strings, numbers or dates) as an SQL List of values.
		   *
		   * @param values The list of values to escape
		   * @param options
		   *
		   * @example
		   * ```ts
		   * const values = [1, 2, 3];
		   * queryGenerator.escapeList([1, 2, 3]); // '(1, 2, 3)'
		   */
		  escapeList(values, options) {
		    return `(${values.map((value) => this.escape(value, options)).join(", ")})`;
		  }
		  getToggleForeignKeyChecksQuery(_enable) {
		    throw new Error(`${this.dialect.name} does not support toggling foreign key checks`);
		  }
		  versionQuery() {
		    throw new Error(`${this.dialect.name} did not implement versionQuery`);
		  }
		}
		
		return queryGeneratorTypescript$8;
	}

	var queryGenerator$8;
	var hasRequiredQueryGenerator$8;

	function requireQueryGenerator$8 () {
		if (hasRequiredQueryGenerator$8) return queryGenerator$8;
		hasRequiredQueryGenerator$8 = 1;
		var __create = Object.create;
		var __defProp = Object.defineProperty;
		var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
		var __getOwnPropNames = Object.getOwnPropertyNames;
		var __getProtoOf = Object.getPrototypeOf;
		var __hasOwnProp = Object.prototype.hasOwnProperty;
		var __export = (target, all) => {
		  for (var name in all)
		    __defProp(target, name, { get: all[name], enumerable: true });
		};
		var __copyProps = (to, from, except, desc) => {
		  if (from && typeof from === "object" || typeof from === "function") {
		    for (let key of __getOwnPropNames(from))
		      if (!__hasOwnProp.call(to, key) && key !== except)
		        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
		  }
		  return to;
		};
		var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
		  // If the importer is in node compatibility mode or this is not an ESM
		  // file that has been converted to a CommonJS file using a Babel-
		  // compatible transform (i.e. "__esModule" has not been set), then set
		  // "default" to the CommonJS "module.exports" for node compatibility.
		  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
		  mod
		));
		var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
		var query_generator_exports = {};
		__export(query_generator_exports, {
		  ADD_COLUMN_QUERY_SUPPORTABLE_OPTIONS: () => ADD_COLUMN_QUERY_SUPPORTABLE_OPTIONS,
		  AbstractQueryGenerator: () => AbstractQueryGenerator,
		  CREATE_DATABASE_QUERY_SUPPORTABLE_OPTIONS: () => CREATE_DATABASE_QUERY_SUPPORTABLE_OPTIONS,
		  CREATE_SCHEMA_QUERY_SUPPORTABLE_OPTIONS: () => CREATE_SCHEMA_QUERY_SUPPORTABLE_OPTIONS,
		  CREATE_TABLE_QUERY_SUPPORTABLE_OPTIONS: () => CREATE_TABLE_QUERY_SUPPORTABLE_OPTIONS,
		  DROP_TABLE_QUERY_SUPPORTABLE_OPTIONS: () => DROP_TABLE_QUERY_SUPPORTABLE_OPTIONS,
		  LIST_SCHEMAS_QUERY_SUPPORTABLE_OPTIONS: () => LIST_SCHEMAS_QUERY_SUPPORTABLE_OPTIONS,
		  REMOVE_COLUMN_QUERY_SUPPORTABLE_OPTIONS: () => REMOVE_COLUMN_QUERY_SUPPORTABLE_OPTIONS
		});
		queryGenerator$8 = __toCommonJS(query_generator_exports);
		var import_node_util = __toESM(require$$0$1);
		var import_base_sql_expression = baseSqlExpression;
		var import_col = col_1;
		var import_literal = literal_1;
		var import_model_internals = requireModelInternals();
		var import_sequelize = requireSequelize();
		var import_check = requireCheck();
		var import_format = requireFormat();
		var import_join_sql_fragments = joinSqlFragments;
		var import_model_utils = requireModelUtils();
		var import_string = string$2;
		var import_data_types_utils = requireDataTypesUtils();
		var import_query_generator_typescript = requireQueryGeneratorTypescript$8();
		var import_where_sql_builder = requireWhereSqlBuilder();
		const util = require$$0$1;
		const _ = lodashExports;
		const crypto = require$$0$3;
		const DataTypes = dataTypes$8;
		const { Association } = requireBase();
		const { BelongsTo } = requireBelongsTo();
		const { BelongsToMany } = requireBelongsToMany();
		const { HasMany } = requireHasMany();
		const { Op } = operators;
		const sequelizeError = errors;
		const { IndexHints } = indexHints;
		const { _validateIncludedElements } = requireModelInternals();
		const CREATE_DATABASE_QUERY_SUPPORTABLE_OPTIONS = /* @__PURE__ */ new Set(["collate", "charset", "encoding", "ctype", "template"]);
		const CREATE_SCHEMA_QUERY_SUPPORTABLE_OPTIONS = /* @__PURE__ */ new Set(["collate", "charset"]);
		const LIST_SCHEMAS_QUERY_SUPPORTABLE_OPTIONS = /* @__PURE__ */ new Set(["skip"]);
		const CREATE_TABLE_QUERY_SUPPORTABLE_OPTIONS = /* @__PURE__ */ new Set(["collate", "charset", "engine", "rowFormat", "comment", "initialAutoIncrement", "uniqueKeys"]);
		const DROP_TABLE_QUERY_SUPPORTABLE_OPTIONS = /* @__PURE__ */ new Set(["cascade"]);
		const ADD_COLUMN_QUERY_SUPPORTABLE_OPTIONS = /* @__PURE__ */ new Set(["ifNotExists"]);
		const REMOVE_COLUMN_QUERY_SUPPORTABLE_OPTIONS = /* @__PURE__ */ new Set(["ifExists"]);
		class AbstractQueryGenerator extends import_query_generator_typescript.AbstractQueryGeneratorTypeScript {
		  createDatabaseQuery() {
		    if (this.dialect.supports.multiDatabases) {
		      throw new Error(`${this.dialect.name} declares supporting databases but createDatabaseQuery is not implemented.`);
		    }
		    throw new Error(`Databases are not supported in ${this.dialect.name}.`);
		  }
		  dropDatabaseQuery() {
		    if (this.dialect.supports.multiDatabases) {
		      throw new Error(`${this.dialect.name} declares supporting databases but dropDatabaseQuery is not implemented.`);
		    }
		    throw new Error(`Databases are not supported in ${this.dialect.name}.`);
		  }
		  listDatabasesQuery() {
		    if (this.dialect.supports.multiDatabases) {
		      throw new Error(`${this.dialect.name} declares supporting databases but listDatabasesQuery is not implemented.`);
		    }
		    throw new Error(`Databases are not supported in ${this.dialect.name}.`);
		  }
		  createSchemaQuery() {
		    if (this.dialect.supports.schemas) {
		      throw new Error(`${this.dialect.name} declares supporting schema but createSchemaQuery is not implemented.`);
		    }
		    throw new Error(`Schemas are not supported in ${this.dialect.name}.`);
		  }
		  dropSchemaQuery() {
		    if (this.dialect.supports.schemas) {
		      throw new Error(`${this.dialect.name} declares supporting schema but dropSchemaQuery is not implemented.`);
		    }
		    throw new Error(`Schemas are not supported in ${this.dialect.name}.`);
		  }
		  listSchemasQuery() {
		    if (this.dialect.supports.schemas) {
		      throw new Error(`${this.dialect.name} declares supporting schema but listSchemasQuery is not implemented.`);
		    }
		    throw new Error(`Schemas are not supported in ${this.dialect.name}.`);
		  }
		  dropTableQuery(tableName, options) {
		    const DROP_TABLE_QUERY_SUPPORTED_OPTIONS = /* @__PURE__ */ new Set();
		    if (options) {
		      (0, import_check.rejectInvalidOptions)(
		        "dropTableQuery",
		        this.dialect.name,
		        DROP_TABLE_QUERY_SUPPORTABLE_OPTIONS,
		        DROP_TABLE_QUERY_SUPPORTED_OPTIONS,
		        options
		      );
		    }
		    return `DROP TABLE IF EXISTS ${this.quoteTable(tableName)};`;
		  }
		  renameTableQuery(before, after) {
		    return `ALTER TABLE ${this.quoteTable(before)} RENAME TO ${this.quoteTable(after)};`;
		  }
		  /**
		   * Returns an insert into command
		   *
		   * @param {string} table
		   * @param {object} valueHash       attribute value pairs
		   * @param {object} modelAttributes
		   * @param {object} [options]
		   *
		   * @private
		   */
		  insertQuery(table, valueHash, modelAttributes, options) {
		    var _a;
		    options = options || {};
		    _.defaults(options, this.options);
		    const modelAttributeMap = {};
		    const bind = /* @__PURE__ */ Object.create(null);
		    const fields = [];
		    const returningModelAttributes = [];
		    const values = /* @__PURE__ */ Object.create(null);
		    const quotedTable = this.quoteTable(table);
		    let bindParam = options.bindParam === void 0 ? this.bindParam(bind) : options.bindParam;
		    let query;
		    let valueQuery = "";
		    let emptyQuery = "";
		    let outputFragment = "";
		    let returningFragment = "";
		    let identityWrapperRequired = false;
		    let tmpTable = "";
		    if (modelAttributes) {
		      _.each(modelAttributes, (attribute, key) => {
		        modelAttributeMap[key] = attribute;
		        if (attribute.field) {
		          modelAttributeMap[attribute.field] = attribute;
		        }
		      });
		    }
		    if (this.dialect.supports["DEFAULT VALUES"]) {
		      emptyQuery += " DEFAULT VALUES";
		    } else if (this.dialect.supports["VALUES ()"]) {
		      emptyQuery += " VALUES ()";
		    }
		    if (this.dialect.supports.returnValues && options.returning) {
		      const returnValues = this.generateReturnValues(modelAttributes, options);
		      returningModelAttributes.push(...returnValues.returnFields);
		      returningFragment = returnValues.returningFragment;
		      tmpTable = returnValues.tmpTable || "";
		      outputFragment = returnValues.outputFragment || "";
		    }
		    if (_.get(this, ["sequelize", "options", "dialectOptions", "prependSearchPath"]) || options.searchPath) {
		      bindParam = void 0;
		    }
		    if (this.dialect.supports.EXCEPTION && options.exception) {
		      bindParam = void 0;
		    }
		    valueHash = (0, import_format.removeNullishValuesFromHash)(valueHash, this.options.omitNull);
		    for (const key in valueHash) {
		      if (Object.hasOwn(valueHash, key)) {
		        const value = valueHash[key] ?? null;
		        fields.push(this.quoteIdentifier(key));
		        if (modelAttributeMap[key] && modelAttributeMap[key].autoIncrement === true && value == null) {
		          if (!this.dialect.supports.autoIncrement.defaultValue) {
		            fields.splice(-1, 1);
		          } else if (this.dialect.supports.DEFAULT) {
		            values[key] = "DEFAULT";
		          } else {
		            values[key] = this.escape(null);
		          }
		        } else {
		          if (modelAttributeMap[key] && modelAttributeMap[key].autoIncrement === true) {
		            identityWrapperRequired = true;
		          }
		          values[key] = this.escape(value, {
		            model: options.model,
		            type: (_a = modelAttributeMap[key]) == null ? void 0 : _a.type,
		            replacements: options.replacements,
		            bindParam
		          });
		        }
		      }
		    }
		    let onDuplicateKeyUpdate = "";
		    if (!_.isEmpty(options.conflictWhere) && !this.dialect.supports.inserts.onConflictWhere) {
		      throw new Error("missing dialect support for conflictWhere option");
		    }
		    if (this.dialect.supports.inserts.updateOnDuplicate && options.updateOnDuplicate) {
		      if (this.dialect.supports.inserts.updateOnDuplicate === " ON CONFLICT DO UPDATE SET") {
		        const conflictKeys = options.upsertKeys.map((attr) => this.quoteIdentifier(attr));
		        const updateKeys = options.updateOnDuplicate.map((attr) => `${this.quoteIdentifier(attr)}=EXCLUDED.${this.quoteIdentifier(attr)}`);
		        const fragments = [
		          "ON CONFLICT",
		          "(",
		          conflictKeys.join(","),
		          ")"
		        ];
		        if (!_.isEmpty(options.conflictWhere)) {
		          fragments.push(this.whereQuery(options.conflictWhere, options));
		        }
		        if (_.isEmpty(updateKeys)) {
		          fragments.push("DO NOTHING");
		        } else {
		          fragments.push("DO UPDATE SET", updateKeys.join(","));
		        }
		        onDuplicateKeyUpdate = ` ${(0, import_join_sql_fragments.joinSQLFragments)(fragments)}`;
		      } else {
		        const valueKeys = options.updateOnDuplicate.map((attr) => `${this.quoteIdentifier(attr)}=${values[attr]}`);
		        if (_.isEmpty(valueKeys) && options.upsertKeys) {
		          valueKeys.push(...options.upsertKeys.map((attr) => `${this.quoteIdentifier(attr)}=${this.quoteIdentifier(attr)}`));
		        }
		        if (_.isEmpty(valueKeys)) {
		          throw new Error("No update values found for ON DUPLICATE KEY UPDATE clause, and no identifier fields could be found to use instead.");
		        }
		        onDuplicateKeyUpdate += `${this.dialect.supports.inserts.updateOnDuplicate} ${valueKeys.join(",")}`;
		      }
		    }
		    const replacements = {
		      ignoreDuplicates: options.ignoreDuplicates ? this.dialect.supports.inserts.ignoreDuplicates : "",
		      onConflictDoNothing: options.ignoreDuplicates ? this.dialect.supports.inserts.onConflictDoNothing : "",
		      attributes: fields.join(","),
		      output: outputFragment,
		      values: Object.values(values).join(","),
		      tmpTable
		    };
		    valueQuery = `${tmpTable}INSERT${replacements.ignoreDuplicates} INTO ${quotedTable} (${replacements.attributes})${replacements.output} VALUES (${replacements.values})${onDuplicateKeyUpdate}${replacements.onConflictDoNothing}${valueQuery}`;
		    emptyQuery = `${tmpTable}INSERT${replacements.ignoreDuplicates} INTO ${quotedTable}${replacements.output}${onDuplicateKeyUpdate}${replacements.onConflictDoNothing}${emptyQuery}`;
		    if (this.dialect.supports.EXCEPTION && options.exception) {
		      const dropFunction = "DROP FUNCTION IF EXISTS pg_temp.testfunc()";
		      if (returningModelAttributes.length === 0) {
		        returningModelAttributes.push("*");
		      }
		      const delimiter = `$func_${crypto.randomUUID().replaceAll("-", "")}$`;
		      const selectQuery = `SELECT (testfunc.response).${returningModelAttributes.join(", (testfunc.response).")}, testfunc.sequelize_caught_exception FROM pg_temp.testfunc();`;
		      options.exception = "WHEN unique_violation THEN GET STACKED DIAGNOSTICS sequelize_caught_exception = PG_EXCEPTION_DETAIL;";
		      valueQuery = `CREATE OR REPLACE FUNCTION pg_temp.testfunc(OUT response ${quotedTable}, OUT sequelize_caught_exception text) RETURNS RECORD AS ${delimiter} BEGIN ${valueQuery} RETURNING * INTO response; EXCEPTION ${options.exception} END ${delimiter} LANGUAGE plpgsql; ${selectQuery} ${dropFunction}`;
		    } else {
		      valueQuery += returningFragment;
		      emptyQuery += returningFragment;
		    }
		    query = `${`${replacements.attributes.length > 0 ? valueQuery : emptyQuery}`.trim()};`;
		    if (this.dialect.supports.finalTable) {
		      query = `SELECT * FROM FINAL TABLE (${replacements.attributes.length > 0 ? valueQuery : emptyQuery});`;
		    }
		    if (identityWrapperRequired && this.dialect.supports.autoIncrement.identityInsert) {
		      query = `SET IDENTITY_INSERT ${quotedTable} ON; ${query} SET IDENTITY_INSERT ${quotedTable} OFF;`;
		    }
		    const result = { query };
		    if (options.bindParam !== false) {
		      result.bind = bind;
		    }
		    return result;
		  }
		  /**
		   * Returns an insert into command for multiple values.
		   *
		   * @param {string} tableName
		   * @param {object} fieldValueHashes
		   * @param {object} options
		   * @param {object} fieldMappedAttributes
		   *
		   * @private
		   */
		  bulkInsertQuery(tableName, fieldValueHashes, options, fieldMappedAttributes) {
		    options = options || {};
		    fieldMappedAttributes = fieldMappedAttributes || {};
		    const tuples = [];
		    const serials = {};
		    const allAttributes = [];
		    let onDuplicateKeyUpdate = "";
		    for (const fieldValueHash of fieldValueHashes) {
		      _.forOwn(fieldValueHash, (value, key) => {
		        if (!allAttributes.includes(key)) {
		          allAttributes.push(key);
		        }
		        if (fieldMappedAttributes[key] && fieldMappedAttributes[key].autoIncrement === true) {
		          serials[key] = true;
		        }
		      });
		    }
		    for (const fieldValueHash of fieldValueHashes) {
		      const values = allAttributes.map((key) => {
		        var _a;
		        if (this.dialect.supports.bulkDefault && serials[key] === true) {
		          return fieldValueHash[key] != null ? fieldValueHash[key] : "DEFAULT";
		        }
		        return this.escape(fieldValueHash[key] ?? null, {
		          // model // TODO: make bulkInsertQuery accept model instead of fieldValueHashes
		          // bindParam // TODO: support bind params
		          type: (_a = fieldMappedAttributes[key]) == null ? void 0 : _a.type,
		          replacements: options.replacements
		        });
		      });
		      tuples.push(`(${values.join(",")})`);
		    }
		    if (this.dialect.supports.inserts.updateOnDuplicate && options.updateOnDuplicate) {
		      if (this.dialect.supports.inserts.updateOnDuplicate === " ON CONFLICT DO UPDATE SET") {
		        const conflictKeys = options.upsertKeys.map((attr) => this.quoteIdentifier(attr));
		        const updateKeys = options.updateOnDuplicate.map((attr) => `${this.quoteIdentifier(attr)}=EXCLUDED.${this.quoteIdentifier(attr)}`);
		        let whereClause = false;
		        if (options.conflictWhere) {
		          if (!this.dialect.supports.inserts.onConflictWhere) {
		            throw new Error(`conflictWhere not supported for dialect ${this.dialect.name}`);
		          }
		          whereClause = this.whereQuery(options.conflictWhere, options);
		        }
		        onDuplicateKeyUpdate = [
		          "ON CONFLICT",
		          "(",
		          conflictKeys.join(","),
		          ")",
		          whereClause,
		          "DO UPDATE SET",
		          updateKeys.join(",")
		        ];
		      } else {
		        if (options.conflictWhere) {
		          throw new Error(`conflictWhere not supported for dialect ${this.dialect.name}`);
		        }
		        const valueKeys = options.updateOnDuplicate.map((attr) => `${this.quoteIdentifier(attr)}=VALUES(${this.quoteIdentifier(attr)})`);
		        onDuplicateKeyUpdate = `${this.dialect.supports.inserts.updateOnDuplicate} ${valueKeys.join(",")}`;
		      }
		    }
		    const ignoreDuplicates = options.ignoreDuplicates ? this.dialect.supports.inserts.ignoreDuplicates : "";
		    const attributes = allAttributes.map((attr) => this.quoteIdentifier(attr)).join(",");
		    const onConflictDoNothing = options.ignoreDuplicates ? this.dialect.supports.inserts.onConflictDoNothing : "";
		    let returning = "";
		    if (this.dialect.supports.returnValues && options.returning) {
		      const returnValues = this.generateReturnValues(fieldMappedAttributes, options);
		      returning += returnValues.returningFragment;
		    }
		    return (0, import_join_sql_fragments.joinSQLFragments)([
		      "INSERT",
		      ignoreDuplicates,
		      "INTO",
		      this.quoteTable(tableName),
		      `(${attributes})`,
		      "VALUES",
		      tuples.join(","),
		      onDuplicateKeyUpdate,
		      onConflictDoNothing,
		      returning,
		      ";"
		    ]);
		  }
		  /**
		   * Returns an update query
		   *
		   * @param {string} tableName
		   * @param {object} attrValueHash
		   * @param {object} where A hash with conditions (e.g. {name: 'foo'}) OR an ID as integer
		   * @param {object} options
		   * @param {object} columnDefinitions
		   *
		   * @private
		   */
		  updateQuery(tableName, attrValueHash, where, options, columnDefinitions) {
		    var _a;
		    options = options || {};
		    _.defaults(options, this.options);
		    attrValueHash = (0, import_format.removeNullishValuesFromHash)(attrValueHash, options.omitNull, options);
		    const values = [];
		    const bind = /* @__PURE__ */ Object.create(null);
		    const modelAttributeMap = {};
		    let outputFragment = "";
		    let tmpTable = "";
		    let suffix = "";
		    if (_.get(this, ["sequelize", "options", "dialectOptions", "prependSearchPath"]) || options.searchPath) {
		      options.bindParam = false;
		    }
		    const bindParam = options.bindParam === void 0 ? this.bindParam(bind) : options.bindParam;
		    if (this.dialect.supports["LIMIT ON UPDATE"] && options.limit && this.dialect.name !== "mssql" && this.dialect.name !== "db2") {
		      suffix = ` LIMIT ${this.escape(options.limit, options)} `;
		    }
		    if (this.dialect.supports.returnValues && options.returning) {
		      const returnValues = this.generateReturnValues(columnDefinitions, options);
		      suffix += returnValues.returningFragment;
		      tmpTable = returnValues.tmpTable || "";
		      outputFragment = returnValues.outputFragment || "";
		      if (this.dialect.supports.returnValues !== "output" && options.returning) {
		        options.mapToModel = true;
		      }
		    }
		    if (columnDefinitions) {
		      _.each(columnDefinitions, (attribute, key) => {
		        modelAttributeMap[key] = attribute;
		        if (attribute.field) {
		          modelAttributeMap[attribute.field] = attribute;
		        }
		      });
		    }
		    for (const key in attrValueHash) {
		      if (modelAttributeMap && modelAttributeMap[key] && modelAttributeMap[key].autoIncrement === true && !this.dialect.supports.autoIncrement.update) {
		        continue;
		      }
		      const value = attrValueHash[key] ?? null;
		      values.push(`${this.quoteIdentifier(key)}=${this.escape(value, {
	        // model // TODO: receive modelDefinition instead of columnDefinitions
	        type: (_a = modelAttributeMap == null ? void 0 : modelAttributeMap[key]) == null ? void 0 : _a.type,
	        replacements: options.replacements,
	        bindParam
	      })}`);
		    }
		    const whereOptions = { ...options, bindParam };
		    if (values.length === 0) {
		      return { query: "" };
		    }
		    const query = `${tmpTable}UPDATE ${this.quoteTable(tableName)} SET ${values.join(",")}${outputFragment} ${this.whereQuery(where, whereOptions)}${suffix}`.trim();
		    const result = { query };
		    if (options.bindParam !== false) {
		      result.bind = bind;
		    }
		    return result;
		  }
		  /**
		   * Returns an update query using arithmetic operator
		   *
		   * @param {string} operator                    String with the arithmetic operator (e.g. '+' or '-')
		   * @param {string} tableName                   Name of the table
		   * @param {object} where                       A plain-object with conditions (e.g. {name: 'foo'}) OR an ID as integer
		   * @param {object} incrementAmountsByAttribute     A plain-object with attribute-value-pairs
		   * @param {object} extraAttributesToBeUpdated  A plain-object with attribute-value-pairs
		   * @param {object} options
		   *
		   * @private
		   */
		  arithmeticQuery(operator, tableName, where, incrementAmountsByAttribute, extraAttributesToBeUpdated, options) {
		    options = options || {};
		    _.defaults(options, { returning: true });
		    const { model } = options;
		    const escapeOptions = _.pick(options, ["replacements", "model"]);
		    extraAttributesToBeUpdated = (0, import_format.removeNullishValuesFromHash)(extraAttributesToBeUpdated, this.options.omitNull);
		    let outputFragment = "";
		    let returningFragment = "";
		    if (this.dialect.supports.returnValues && options.returning) {
		      const returnValues = this.generateReturnValues(null, options);
		      outputFragment = returnValues.outputFragment;
		      returningFragment = returnValues.returningFragment;
		    }
		    const updateSetSqlFragments = [];
		    for (const attributeName in incrementAmountsByAttribute) {
		      const columnName = model ? model.modelDefinition.getColumnNameLoose(attributeName) : attributeName;
		      const incrementAmount = incrementAmountsByAttribute[columnName];
		      const quotedField = this.quoteIdentifier(columnName);
		      const escapedAmount = this.escape(incrementAmount, escapeOptions);
		      updateSetSqlFragments.push(`${quotedField}=${quotedField}${operator} ${escapedAmount}`);
		    }
		    for (const attributeName in extraAttributesToBeUpdated) {
		      const columnName = model ? model.modelDefinition.getColumnNameLoose(attributeName) : attributeName;
		      const newValue = extraAttributesToBeUpdated[columnName];
		      const quotedField = this.quoteIdentifier(columnName);
		      const escapedValue = this.escape(newValue, escapeOptions);
		      updateSetSqlFragments.push(`${quotedField}=${escapedValue}`);
		    }
		    return (0, import_join_sql_fragments.joinSQLFragments)([
		      "UPDATE",
		      this.quoteTable(tableName),
		      "SET",
		      updateSetSqlFragments.join(","),
		      outputFragment,
		      this.whereQuery(where, escapeOptions),
		      returningFragment
		    ]);
		  }
		  /*
		    Returns an add index query.
		    Parameters:
		      - tableName -> Name of an existing table, possibly with schema.
		      - options:
		        - type: UNIQUE|FULLTEXT|SPATIAL
		        - name: The name of the index. Default is <table>_<attr1>_<attr2>
		        - fields: An array of attributes as string or as hash.
		                  If the attribute is a hash, it must have the following content:
		                  - name: The name of the attribute/column
		                  - length: An integer. Optional
		                  - order: 'ASC' or 'DESC'. Optional
		        - parser
		        - using
		        - operator
		        - concurrently: Pass CONCURRENT so other operations run while the index is created
		        - include
		      - rawTablename, the name of the table, without schema. Used to create the name of the index
		   @private
		  */
		  addIndexQuery(tableName, attributes, options, rawTablename) {
		    options = options || {};
		    if (!Array.isArray(attributes)) {
		      options = attributes;
		      attributes = void 0;
		    } else {
		      options.fields = attributes;
		    }
		    options.prefix = options.prefix || rawTablename || tableName;
		    if (options.prefix && typeof options.prefix === "string") {
		      options.prefix = options.prefix.replaceAll(".", "_");
		    }
		    const fieldsSql = options.fields.map((field) => {
		      if (field instanceof import_base_sql_expression.BaseSqlExpression) {
		        return this.formatSqlExpression(field);
		      }
		      if (typeof field === "string") {
		        field = {
		          name: field
		        };
		      }
		      let result = "";
		      if (field.attribute) {
		        field.name = field.attribute;
		      }
		      if (!field.name) {
		        throw new Error(`The following index field has no name: ${util.inspect(field)}`);
		      }
		      result += this.quoteIdentifier(field.name);
		      if (this.dialect.supports.index.collate && field.collate) {
		        result += ` COLLATE ${this.quoteIdentifier(field.collate)}`;
		      }
		      if (this.dialect.supports.index.operator) {
		        const operator = field.operator || options.operator;
		        if (operator) {
		          result += ` ${operator}`;
		        }
		      }
		      if (this.dialect.supports.index.length > 0 && field.length > 0) {
		        result += `(${field.length})`;
		      }
		      if (field.order) {
		        result += ` ${field.order}`;
		      }
		      return result;
		    });
		    let includeSql;
		    if (options.include) {
		      if (!this.dialect.supports.index.include) {
		        throw new Error(`The include attribute for indexes is not supported by ${this.dialect.name} dialect`);
		      }
		      if (options.include instanceof import_literal.Literal) {
		        includeSql = `INCLUDE ${options.include.val}`;
		      } else if (Array.isArray(options.include)) {
		        includeSql = `INCLUDE (${options.include.map((field) => field instanceof import_literal.Literal ? field.val : this.quoteIdentifier(field)).join(", ")})`;
		      } else {
		        throw new TypeError("The include attribute for indexes must be an array or a literal.");
		      }
		    }
		    if (!options.name) {
		      options = (0, import_string.nameIndex)(options, options.prefix);
		    }
		    options = (0, import_model_internals.conformIndex)(options);
		    if (!this.dialect.supports.index.type) {
		      delete options.type;
		    }
		    if (options.where) {
		      options.where = this.whereQuery(options.where);
		    }
		    const escapedTableName = this.quoteTable(tableName);
		    const concurrently = this.dialect.supports.index.concurrently && options.concurrently ? "CONCURRENTLY" : void 0;
		    let ind;
		    if (this.dialect.supports.indexViaAlter) {
		      ind = [
		        "ALTER TABLE",
		        escapedTableName,
		        concurrently,
		        "ADD"
		      ];
		    } else {
		      ind = ["CREATE"];
		    }
		    const escapedIndexName = tableName.schema && this.dialect.name === "db2" ? this.quoteTable({
		      schema: tableName.schema,
		      tableName: options.name
		    }) : this.quoteIdentifiers(options.name);
		    ind = ind.concat(
		      options.unique ? "UNIQUE" : "",
		      options.type,
		      "INDEX",
		      !this.dialect.supports.indexViaAlter ? concurrently : void 0,
		      escapedIndexName,
		      this.dialect.supports.index.using === 1 && options.using ? `USING ${options.using}` : "",
		      !this.dialect.supports.indexViaAlter ? `ON ${escapedTableName}` : void 0,
		      this.dialect.supports.index.using === 2 && options.using ? `USING ${options.using}` : "",
		      `(${fieldsSql.join(", ")})`,
		      this.dialect.supports.index.parser && options.parser ? `WITH PARSER ${options.parser}` : void 0,
		      this.dialect.supports.index.include && options.include ? includeSql : void 0,
		      this.dialect.supports.index.where && options.where ? options.where : void 0
		    );
		    return _.compact(ind).join(" ");
		  }
		  /*
		      Quote an object based on its type. This is a more general version of quoteIdentifiers
		      Strings: should proxy to quoteIdentifiers
		      Arrays:
		        * Expects array in the form: [<model> (optional), <model> (optional),... String, String (optional)]
		          Each <model> can be a model, or an object {model: Model, as: String}, matching include, or an
		          association object, or the name of an association.
		        * Zero or more models can be included in the array and are used to trace a path through the tree of
		          included nested associations. This produces the correct table name for the ORDER BY/GROUP BY SQL
		          and quotes it.
		        * If a single string is appended to end of array, it is quoted.
		          If two strings appended, the 1st string is quoted, the 2nd string unquoted.
		      Objects:
		        * If raw is set, that value should be returned verbatim, without quoting
		        * If fn is set, the string should start with the value of fn, starting paren, followed by
		          the values of cols (which is assumed to be an array), quoted and joined with ', ',
		          unless they are themselves objects
		        * If direction is set, should be prepended
		  
		      Currently this function is only used for ordering / grouping columns and Sequelize.col(), but it could
		      potentially also be used for other places where we want to be able to call SQL functions (e.g. as default values)
		     @private
		    */
		  quote(collection, parent, connector = ".", options) {
		    const validOrderOptions = [
		      "ASC",
		      "DESC",
		      "ASC NULLS LAST",
		      "DESC NULLS LAST",
		      "ASC NULLS FIRST",
		      "DESC NULLS FIRST",
		      "NULLS FIRST",
		      "NULLS LAST"
		    ];
		    if (typeof collection === "string") {
		      return this.quoteIdentifiers(collection);
		    }
		    if (Array.isArray(collection)) {
		      collection.forEach((item2, index) => {
		        var _a, _b;
		        const previous = collection[index - 1];
		        let previousAssociation;
		        let previousModel;
		        if (!previous && parent !== void 0) {
		          previousModel = parent;
		        } else if (previous && previous instanceof Association) {
		          previousAssociation = previous;
		          previousModel = previous.target;
		        }
		        if ((0, import_model_utils.isModelStatic)(previousModel)) {
		          let model;
		          let as;
		          if ((0, import_model_utils.isModelStatic)(item2)) {
		            model = item2;
		          } else if (_.isPlainObject(item2) && item2.model && (0, import_model_utils.isModelStatic)(item2.model)) {
		            model = item2.model;
		            as = item2.as;
		          }
		          if (model) {
		            if (!as && previousAssociation && previousAssociation instanceof Association && ((_a = previousAssociation.through) == null ? void 0 : _a.model) === model) {
		              item2 = previousAssociation.fromSourceToThroughOne;
		            } else {
		              item2 = previousModel.getAssociationWithModel(model, as);
		            }
		            if (!(item2 instanceof Association)) {
		              throw new TypeError(`Unable to find a valid association between models "${previousModel.name}" and "${model.name}"`);
		            }
		          }
		        }
		        if (typeof item2 === "string") {
		          const orderIndex = validOrderOptions.indexOf(item2.toUpperCase());
		          if (index > 0 && orderIndex !== -1) {
		            item2 = new import_literal.Literal(` ${validOrderOptions[orderIndex]}`);
		          } else if ((0, import_model_utils.isModelStatic)(previousModel)) {
		            const { modelDefinition: previousModelDefinition } = previousModel;
		            if ((_b = previousModel.associations) == null ? void 0 : _b[item2]) {
		              item2 = previousModel.associations[item2];
		            } else if (previousModelDefinition.attributes.has(item2)) {
		              item2 = previousModelDefinition.attributes.get(item2).columnName;
		            } else if (item2.includes(".")) {
		              const itemSplit = item2.split(".");
		              const jsonAttribute = previousModelDefinition.attributes.get(itemSplit[0]);
		              if (jsonAttribute.type instanceof DataTypes.JSON) {
		                const identifier = this.quoteIdentifiers(`${previousModel.name}.${jsonAttribute.columnName}`);
		                const path = itemSplit.slice(1);
		                item2 = this.jsonPathExtractionQuery(identifier, path);
		                item2 = new import_literal.Literal(item2);
		              }
		            }
		          }
		        }
		        collection[index] = item2;
		      });
		      const collectionLength = collection.length;
		      const tableNames = [];
		      let item;
		      let i = 0;
		      for (i = 0; i < collectionLength - 1; i++) {
		        item = collection[i];
		        if (typeof item === "string" || item._modelAttribute || item instanceof import_base_sql_expression.BaseSqlExpression) {
		          break;
		        } else if (item instanceof Association) {
		          const previousAssociation = collection[i - 1];
		          if (previousAssociation instanceof BelongsToMany && item === previousAssociation.fromSourceToThroughOne) {
		            tableNames[i] = previousAssociation.throughModel.name;
		          } else {
		            tableNames[i] = item.as;
		          }
		        }
		      }
		      let sql = "";
		      if (i > 0) {
		        sql += `${this.quoteIdentifier(tableNames.join(connector))}.`;
		      } else if (typeof collection[0] === "string" && parent) {
		        sql += `${this.quoteIdentifier(parent.name)}.`;
		      }
		      for (const collectionItem of collection.slice(i)) {
		        sql += this.quote(collectionItem, parent, connector, options);
		      }
		      return sql;
		    }
		    if (collection._modelAttribute) {
		      return `${this.quoteTable(collection.Model.name)}.${this.quoteIdentifier(collection.fieldName)}`;
		    }
		    if (collection instanceof import_base_sql_expression.BaseSqlExpression) {
		      return this.formatSqlExpression(collection, options);
		    }
		    if (_.isPlainObject(collection) && collection.raw) {
		      throw new Error('The `{raw: "..."}` syntax is no longer supported.  Use `sequelize.literal` instead.');
		    }
		    throw new Error(`Unknown structure passed to order / group: ${util.inspect(collection)}`);
		  }
		  /**
		   * Split a list of identifiers by "." and quote each part.
		   *
		   * ⚠️ You almost certainly want to use `quoteIdentifier` instead!
		   * This method splits the identifier by "." into multiple identifiers, and has special meaning for "*".
		   * This behavior should never be the default and should be explicitly opted into by using {@link Col}.
		   *
		   * @param {string} identifiers
		   *
		   * @returns {string}
		   */
		  quoteIdentifiers(identifiers) {
		    if (identifiers.includes(".")) {
		      identifiers = identifiers.split(".");
		      const head = identifiers.slice(0, -1).join("->");
		      const tail = identifiers.at(-1);
		      return `${this.quoteIdentifier(head)}.${tail === "*" ? "*" : this.quoteIdentifier(tail)}`;
		    }
		    if (identifiers === "*") {
		      return "*";
		    }
		    return this.quoteIdentifier(identifiers);
		  }
		  bindParam(bind) {
		    let i = 0;
		    return (value) => {
		      const bindName = `sequelize_${++i}`;
		      bind[bindName] = value;
		      return `$${bindName}`;
		    };
		  }
		  /*
		    Returns a query for selecting elements in the table <tableName>.
		    Options:
		      - attributes -> An array of attributes (e.g. ['name', 'birthday']). Default: *
		      - where -> A hash with conditions (e.g. {name: 'foo'})
		                 OR an ID as integer
		      - order -> e.g. 'id DESC'
		      - group
		      - limit -> The maximum count you want to get.
		      - offset -> An offset value to start from. Only useable with limit!
		   @private
		  */
		  selectQuery(tableName, options, model) {
		    var _a, _b;
		    options = options || {};
		    const limit = options.limit;
		    const mainQueryItems = [];
		    const subQueryItems = [];
		    const subQuery = options.subQuery === void 0 ? limit && options.hasMultiAssociation : options.subQuery;
		    const attributes = {
		      main: options.attributes && [...options.attributes],
		      subQuery: null
		    };
		    const mainTable = {
		      name: tableName,
		      quotedName: null,
		      as: null,
		      quotedAs: null,
		      model
		    };
		    const topLevelInfo = {
		      names: mainTable,
		      options,
		      subQuery
		    };
		    let mainJoinQueries = [];
		    let subJoinQueries = [];
		    let query;
		    if (options.minifyAliases && !options.aliasesMapping) {
		      options.aliasesMapping = /* @__PURE__ */ new Map();
		      options.aliasesByTable = {};
		      options.includeAliases = /* @__PURE__ */ new Map();
		    }
		    if (options.tableAs) {
		      mainTable.as = options.tableAs;
		    } else if (!Array.isArray(mainTable.name) && mainTable.model) {
		      mainTable.as = mainTable.model.name;
		    }
		    mainTable.quotedAs = mainTable.as && this.quoteIdentifier(mainTable.as);
		    mainTable.quotedName = !Array.isArray(mainTable.name) ? this.quoteTable(mainTable.name) : tableName.map((t) => {
		      return Array.isArray(t) ? this.quoteTable(t[0], t[1]) : this.quoteTable(t, true);
		    }).join(", ");
		    const mainModelDefinition = (_a = mainTable.model) == null ? void 0 : _a.modelDefinition;
		    const mainModelAttributes = mainModelDefinition == null ? void 0 : mainModelDefinition.attributes;
		    if (subQuery && attributes.main) {
		      for (const pkAttrName of mainModelDefinition.primaryKeysAttributeNames) {
		        if (!attributes.main.some((attr) => pkAttrName === attr || pkAttrName === attr[0] || pkAttrName === attr[1])) {
		          const attribute = mainModelAttributes.get(pkAttrName);
		          attributes.main.push(attribute.columnName !== pkAttrName ? [pkAttrName, attribute.columnName] : pkAttrName);
		        }
		      }
		    }
		    attributes.main = this.escapeAttributes(attributes.main, options, mainTable.as);
		    attributes.main = attributes.main || (options.include ? [`${mainTable.quotedAs}.*`] : ["*"]);
		    if (subQuery || options.groupedLimit) {
		      attributes.subQuery = attributes.main;
		      attributes.main = [`${mainTable.quotedAs || mainTable.quotedName}.*`];
		    }
		    if (options.include) {
		      for (const include of options.include) {
		        if (include.separate) {
		          continue;
		        }
		        const joinQueries = this.generateInclude(include, { externalAs: mainTable.as, internalAs: mainTable.as }, topLevelInfo, { replacements: options.replacements, minifyAliases: options.minifyAliases });
		        subJoinQueries = subJoinQueries.concat(joinQueries.subQuery);
		        mainJoinQueries = mainJoinQueries.concat(joinQueries.mainQuery);
		        if (joinQueries.attributes.main.length > 0) {
		          attributes.main = _.uniq(attributes.main.concat(joinQueries.attributes.main));
		        }
		        if (joinQueries.attributes.subQuery.length > 0) {
		          attributes.subQuery = _.uniq(attributes.subQuery.concat(joinQueries.attributes.subQuery));
		        }
		      }
		    }
		    if (subQuery) {
		      subQueryItems.push(
		        this.selectFromTableFragment(options, mainTable.model, attributes.subQuery, mainTable.quotedName, mainTable.quotedAs),
		        subJoinQueries.join("")
		      );
		    } else {
		      if (options.groupedLimit) {
		        if (!mainTable.quotedAs) {
		          mainTable.quotedAs = mainTable.quotedName;
		        }
		        if (!mainTable.as) {
		          mainTable.as = mainTable.name;
		        }
		        let where = { ...options.where };
		        let groupedLimitOrder;
		        let whereKey;
		        let include;
		        let groupedTableName = mainTable.as;
		        if (typeof options.groupedLimit.on === "string") {
		          whereKey = options.groupedLimit.on;
		        } else if (options.groupedLimit.on instanceof HasMany) {
		          whereKey = options.groupedLimit.on.identifierField;
		        }
		        const placeholder = '"$PLACEHOLDER$" = true';
		        if (options.groupedLimit.on instanceof BelongsToMany) {
		          groupedTableName = options.groupedLimit.on.throughModel.name;
		          const groupedLimitOptions = _validateIncludedElements({
		            include: [{
		              as: options.groupedLimit.on.throughModel.name,
		              association: options.groupedLimit.on.fromSourceToThrough,
		              duplicating: false,
		              // The UNION'ed query may contain duplicates, but each sub-query cannot
		              required: true,
		              where: (0, import_sequelize.and)(new import_literal.Literal(placeholder), (_b = options.groupedLimit.through) == null ? void 0 : _b.where)
		            }],
		            model
		          });
		          options.hasJoin = true;
		          options.hasMultiAssociation = true;
		          options.includeMap = Object.assign(groupedLimitOptions.includeMap, options.includeMap);
		          options.includeNames = groupedLimitOptions.includeNames.concat(options.includeNames || []);
		          include = groupedLimitOptions.include;
		          if (Array.isArray(options.order)) {
		            options.order.forEach((order, i) => {
		              if (Array.isArray(order)) {
		                order = order[0];
		              }
		              let alias = `subquery_order_${i}`;
		              options.attributes.push([order, alias]);
		              alias = new import_literal.Literal(this.quote(alias, void 0, void 0, options));
		              if (Array.isArray(options.order[i])) {
		                options.order[i][0] = alias;
		              } else {
		                options.order[i] = alias;
		              }
		            });
		            groupedLimitOrder = options.order;
		          }
		        } else {
		          groupedLimitOrder = options.order;
		          delete options.order;
		          where = (0, import_sequelize.and)(new import_literal.Literal(placeholder), where);
		        }
		        const baseQuery = `SELECT * FROM (${this.selectQuery(
	          tableName,
	          {
	            attributes: options.attributes,
	            offset: options.offset,
	            limit: options.groupedLimit.limit,
	            order: groupedLimitOrder,
	            minifyAliases: options.minifyAliases,
	            aliasesMapping: options.aliasesMapping,
	            aliasesByTable: options.aliasesByTable,
	            where,
	            include,
	            model
	          },
	          model
	        ).replace(/;$/, "")}) AS sub`;
		        const splicePos = baseQuery.indexOf(placeholder);
		        mainQueryItems.push(this.selectFromTableFragment(options, mainTable.model, attributes.main, `(${options.groupedLimit.values.map((value) => {
	          let groupWhere;
	          if (whereKey) {
	            groupWhere = {
	              [whereKey]: value
	            };
	          }
	          if (include) {
	            groupWhere = {
	              [options.groupedLimit.on.foreignIdentifierField]: value
	            };
	          }
	          return (0, import_string.spliceStr)(baseQuery, splicePos, placeholder.length, this.whereItemsQuery(groupWhere, { ...options, mainAlias: groupedTableName }));
	        }).join(
	          this.dialect.supports["UNION ALL"] ? " UNION ALL " : " UNION "
	        )})`, mainTable.quotedAs));
		      } else {
		        mainQueryItems.push(this.selectFromTableFragment(options, mainTable.model, attributes.main, mainTable.quotedName, mainTable.quotedAs));
		      }
		      mainQueryItems.push(mainJoinQueries.join(""));
		    }
		    if (Object.hasOwn(options, "where") && !options.groupedLimit) {
		      options.where = this.whereItemsQuery(options.where, {
		        ...options,
		        model,
		        mainAlias: mainTable.as || tableName
		      });
		      if (options.where) {
		        if (subQuery) {
		          subQueryItems.push(` WHERE ${options.where}`);
		        } else {
		          mainQueryItems.push(` WHERE ${options.where}`);
		          for (const [key, value] of mainQueryItems.entries()) {
		            if (value.startsWith("SELECT")) {
		              mainQueryItems[key] = this.selectFromTableFragment(options, model, attributes.main, mainTable.quotedName, mainTable.quotedAs, options.where);
		            }
		          }
		        }
		      }
		    }
		    if (options.group) {
		      options.group = Array.isArray(options.group) ? options.group.map((t) => this.aliasGrouping(t, model, mainTable.as, options)).join(", ") : this.aliasGrouping(options.group, model, mainTable.as, options);
		      if (subQuery && options.group) {
		        subQueryItems.push(` GROUP BY ${options.group}`);
		      } else if (options.group) {
		        mainQueryItems.push(` GROUP BY ${options.group}`);
		      }
		    }
		    if (Object.hasOwn(options, "having")) {
		      options.having = this.whereItemsQuery(options.having, {
		        ...options,
		        model,
		        mainAlias: mainTable.as || tableName
		      });
		      if (options.having) {
		        if (subQuery) {
		          subQueryItems.push(` HAVING ${options.having}`);
		        } else {
		          mainQueryItems.push(` HAVING ${options.having}`);
		        }
		      }
		    }
		    if (options.order) {
		      const orders = this.getQueryOrders(options, model, subQuery);
		      if (orders.mainQueryOrder.length > 0) {
		        mainQueryItems.push(` ORDER BY ${orders.mainQueryOrder.join(", ")}`);
		      }
		      if (orders.subQueryOrder.length > 0) {
		        subQueryItems.push(` ORDER BY ${orders.subQueryOrder.join(", ")}`);
		      }
		    }
		    const limitOrder = this.addLimitAndOffset(options, mainTable.model);
		    if (limitOrder && !options.groupedLimit) {
		      if (subQuery) {
		        subQueryItems.push(limitOrder);
		      } else {
		        mainQueryItems.push(limitOrder);
		      }
		    }
		    if (subQuery) {
		      this._throwOnEmptyAttributes(attributes.main, { modelName: model && model.name, as: mainTable.quotedAs });
		      query = `SELECT ${attributes.main.join(", ")} FROM (${subQueryItems.join("")}) AS ${mainTable.quotedAs}${mainJoinQueries.join("")}${mainQueryItems.join("")}`;
		    } else {
		      query = mainQueryItems.join("");
		    }
		    if (options.lock && this.dialect.supports.lock) {
		      let lock = options.lock;
		      if (typeof options.lock === "object") {
		        lock = options.lock.level;
		      }
		      if (this.dialect.supports.lockKey && ["KEY SHARE", "NO KEY UPDATE"].includes(lock)) {
		        query += ` FOR ${lock}`;
		      } else if (lock === "SHARE") {
		        query += ` ${this.dialect.supports.forShare}`;
		      } else {
		        query += " FOR UPDATE";
		      }
		      if (this.dialect.supports.lockOf && options.lock.of && (0, import_model_utils.isModelStatic)(options.lock.of)) {
		        query += ` OF ${this.quoteTable(options.lock.of.name)}`;
		      }
		      if (this.dialect.supports.skipLocked && options.skipLocked) {
		        query += " SKIP LOCKED";
		      }
		    }
		    return `${query};`;
		  }
		  aliasGrouping(field, model, tableName, options) {
		    const src = Array.isArray(field) ? field[0] : field;
		    return this.quote(this._getAliasForField(tableName, src, options) || src, model, void 0, options);
		  }
		  escapeAttributes(attributes, options, mainTableAs) {
		    const quotedMainTableAs = mainTableAs && this.quoteIdentifier(mainTableAs);
		    return attributes && attributes.map((attr) => {
		      let addTable = true;
		      if (attr instanceof import_base_sql_expression.BaseSqlExpression) {
		        return this.formatSqlExpression(attr, options);
		      }
		      if (Array.isArray(attr)) {
		        if (attr.length !== 2) {
		          throw new Error(`${JSON.stringify(attr)} is not a valid attribute definition. Please use the following format: ['attribute definition', 'alias']`);
		        }
		        attr = [...attr];
		        if (attr[0] instanceof import_base_sql_expression.BaseSqlExpression) {
		          attr[0] = this.formatSqlExpression(attr[0], options);
		          addTable = false;
		        } else {
		          attr[0] = this.quoteIdentifier(attr[0]);
		        }
		        let alias = attr[1];
		        if (options.minifyAliases) {
		          alias = this._getMinifiedAlias(alias, mainTableAs, options);
		        }
		        attr = [attr[0], this.quoteIdentifier(alias)].join(" AS ");
		      } else {
		        attr = this.quoteIdentifier(attr, options.model);
		      }
		      if (!_.isEmpty(options.include) && (!attr.includes(".") || options.dotNotation) && addTable) {
		        attr = `${quotedMainTableAs}.${attr}`;
		      }
		      return attr;
		    });
		  }
		  generateInclude(include, parentTableName, topLevelInfo, options) {
		    const joinQueries = {
		      mainQuery: [],
		      subQuery: []
		    };
		    const mainChildIncludes = [];
		    const subChildIncludes = [];
		    let requiredMismatch = false;
		    const includeAs = {
		      internalAs: include.as,
		      externalAs: include.as
		    };
		    const attributes = {
		      main: [],
		      subQuery: []
		    };
		    topLevelInfo.options.keysEscaped = true;
		    if (topLevelInfo.names.name !== parentTableName.externalAs && topLevelInfo.names.as !== parentTableName.externalAs) {
		      includeAs.internalAs = `${parentTableName.internalAs}->${include.as}`;
		      includeAs.externalAs = `${parentTableName.externalAs}.${include.as}`;
		    }
		    if (topLevelInfo.options.includeIgnoreAttributes !== false) {
		      include.model._expandAttributes(include);
		      (0, import_format.mapFinderOptions)(include, include.model);
		      const includeAttributes = include.attributes.map((attr) => {
		        let attrAs = attr;
		        let verbatim = false;
		        if (Array.isArray(attr) && attr.length === 2) {
		          if (attr[0] instanceof import_base_sql_expression.BaseSqlExpression) {
		            verbatim = true;
		          }
		          attr = attr.map((attrPart) => attrPart instanceof import_base_sql_expression.BaseSqlExpression ? this.formatSqlExpression(attrPart, options) : attrPart);
		          attrAs = attr[1];
		          attr = attr[0];
		        }
		        if (attr instanceof import_literal.Literal) {
		          return this.formatLiteral(attr, options);
		        }
		        if (attr instanceof import_base_sql_expression.BaseSqlExpression) {
		          throw new TypeError(
		            `Tried to select attributes using ${attr.constructor.name} without specifying an alias for the result, during eager loading. This means the attribute will not be added to the returned instance`
		          );
		        }
		        let prefix;
		        if (verbatim === true) {
		          prefix = attr;
		        } else if (/#>>|->>/.test(attr)) {
		          prefix = `(${this.quoteIdentifier(includeAs.internalAs)}.${attr.replaceAll(/\(|\)/g, "")})`;
		        } else if (/json_extract\(/.test(attr)) {
		          prefix = attr.replace(/json_extract\(/i, `json_extract(${this.quoteIdentifier(includeAs.internalAs)}.`);
		        } else {
		          prefix = `${this.quoteIdentifier(includeAs.internalAs)}.${this.quoteIdentifier(attr)}`;
		        }
		        let alias = `${includeAs.externalAs}.${attrAs}`;
		        if (options.minifyAliases) {
		          alias = this._getMinifiedAlias(alias, includeAs.internalAs, topLevelInfo.options);
		        }
		        return (0, import_join_sql_fragments.joinSQLFragments)([
		          prefix,
		          "AS",
		          this.quoteIdentifier(alias, true)
		        ]);
		      });
		      if (include.subQuery && topLevelInfo.subQuery) {
		        for (const attr of includeAttributes) {
		          attributes.subQuery.push(attr);
		        }
		      } else {
		        for (const attr of includeAttributes) {
		          attributes.main.push(attr);
		        }
		      }
		    }
		    let joinQuery;
		    if (include.through) {
		      joinQuery = this.generateThroughJoin(include, includeAs, parentTableName.internalAs, topLevelInfo, { minifyAliases: options.minifyAliases });
		    } else {
		      this._generateSubQueryFilter(include, includeAs, topLevelInfo);
		      joinQuery = this.generateJoin(include, topLevelInfo, options);
		    }
		    if (joinQuery.attributes.main.length > 0) {
		      attributes.main = attributes.main.concat(joinQuery.attributes.main);
		    }
		    if (joinQuery.attributes.subQuery.length > 0) {
		      attributes.subQuery = attributes.subQuery.concat(joinQuery.attributes.subQuery);
		    }
		    if (include.include) {
		      for (const childInclude of include.include) {
		        if (childInclude.separate || childInclude._pseudo) {
		          continue;
		        }
		        const childJoinQueries = this.generateInclude(childInclude, includeAs, topLevelInfo, options);
		        if (include.required === false && childInclude.required === true) {
		          requiredMismatch = true;
		        }
		        if (childInclude.subQuery && topLevelInfo.subQuery) {
		          subChildIncludes.push(childJoinQueries.subQuery);
		        }
		        if (childJoinQueries.mainQuery) {
		          mainChildIncludes.push(childJoinQueries.mainQuery);
		        }
		        if (childJoinQueries.attributes.main.length > 0) {
		          attributes.main = attributes.main.concat(childJoinQueries.attributes.main);
		        }
		        if (childJoinQueries.attributes.subQuery.length > 0) {
		          attributes.subQuery = attributes.subQuery.concat(childJoinQueries.attributes.subQuery);
		        }
		      }
		    }
		    if (include.subQuery && topLevelInfo.subQuery) {
		      if (requiredMismatch && subChildIncludes.length > 0) {
		        joinQueries.subQuery.push(` ${joinQuery.join} ( ${joinQuery.body}${subChildIncludes.join("")} ) ON ${joinQuery.condition}`);
		      } else {
		        joinQueries.subQuery.push(` ${joinQuery.join} ${joinQuery.body} ON ${joinQuery.condition}`);
		        if (subChildIncludes.length > 0) {
		          joinQueries.subQuery.push(subChildIncludes.join(""));
		        }
		      }
		      joinQueries.mainQuery.push(mainChildIncludes.join(""));
		    } else {
		      if (requiredMismatch && mainChildIncludes.length > 0) {
		        joinQueries.mainQuery.push(` ${joinQuery.join} ( ${joinQuery.body}${mainChildIncludes.join("")} ) ON ${joinQuery.condition}`);
		      } else {
		        joinQueries.mainQuery.push(` ${joinQuery.join} ${joinQuery.body} ON ${joinQuery.condition}`);
		        if (mainChildIncludes.length > 0) {
		          joinQueries.mainQuery.push(mainChildIncludes.join(""));
		        }
		      }
		      joinQueries.subQuery.push(subChildIncludes.join(""));
		    }
		    return {
		      mainQuery: joinQueries.mainQuery.join(""),
		      subQuery: joinQueries.subQuery.join(""),
		      attributes
		    };
		  }
		  _getMinifiedAlias(alias, tableName, options) {
		    if (options.aliasesByTable[`${tableName}${alias}`]) {
		      return options.aliasesByTable[`${tableName}${alias}`];
		    }
		    if (/subquery_order_\d/.test(alias)) {
		      return alias;
		    }
		    const minifiedAlias = `_${options.aliasesMapping.size}`;
		    options.aliasesMapping.set(minifiedAlias, alias);
		    options.aliasesByTable[`${tableName}${alias}`] = minifiedAlias;
		    return minifiedAlias;
		  }
		  _getAliasForField(tableName, field, options) {
		    if (options.minifyAliases && options.aliasesByTable[`${tableName}${field}`]) {
		      return options.aliasesByTable[`${tableName}${field}`];
		    }
		    return null;
		  }
		  _getAliasForFieldFromQueryOptions(field, options) {
		    return (options.attributes || []).find(
		      (attr) => Array.isArray(attr) && attr[1] && (attr[0] === field || attr[1] === field)
		    );
		  }
		  generateJoin(include, topLevelInfo, options) {
		    const association = include.association;
		    const parent = include.parent;
		    const parentIsTop = Boolean(parent) && !include.parent.association && include.parent.model.name === topLevelInfo.options.model.name;
		    let $parent;
		    let joinWhere;
		    const left = association.source;
		    const leftAttributes = left.modelDefinition.attributes;
		    const attrNameLeft = association instanceof BelongsTo ? association.foreignKey : association.sourceKeyAttribute;
		    const columnNameLeft = association instanceof BelongsTo ? association.identifierField : leftAttributes.get(association.sourceKeyAttribute).columnName;
		    let asLeft;
		    const right = include.model;
		    const rightAttributes = right.modelDefinition.attributes;
		    const tableRight = right.getTableName();
		    const fieldRight = association instanceof BelongsTo ? rightAttributes.get(association.targetKey).columnName : association.identifierField;
		    let asRight = include.as;
		    while (($parent = $parent && $parent.parent || include.parent) && $parent.association) {
		      if (asLeft) {
		        asLeft = `${$parent.as}->${asLeft}`;
		      } else {
		        asLeft = $parent.as;
		      }
		    }
		    if (!asLeft) {
		      asLeft = parent.as || parent.model.name;
		    } else {
		      asRight = `${asLeft}->${asRight}`;
		    }
		    let joinOn = `${this.quoteTable(asLeft)}.${this.quoteIdentifier(columnNameLeft)}`;
		    const subqueryAttributes = [];
		    if (topLevelInfo.options.groupedLimit && parentIsTop || topLevelInfo.subQuery && include.parent.subQuery && !include.subQuery) {
		      if (parentIsTop) {
		        const tableName = parent.as || parent.model.name;
		        const quotedTableName = this.quoteTable(tableName);
		        joinOn = this._getAliasForField(tableName, attrNameLeft, topLevelInfo.options) || `${quotedTableName}.${this.quoteIdentifier(attrNameLeft)}`;
		        if (topLevelInfo.subQuery) {
		          const dbIdentifier = `${quotedTableName}.${this.quoteIdentifier(columnNameLeft)}`;
		          subqueryAttributes.push(dbIdentifier !== joinOn ? `${dbIdentifier} AS ${this.quoteIdentifier(attrNameLeft)}` : dbIdentifier);
		        }
		      } else {
		        const joinSource = `${asLeft.replaceAll("->", ".")}.${attrNameLeft}`;
		        joinOn = this._getAliasForField(asLeft, joinSource, topLevelInfo.options) || this.quoteIdentifier(joinSource);
		      }
		    }
		    joinOn += ` = ${this.quoteIdentifier(asRight)}.${this.quoteIdentifier(fieldRight)}`;
		    if (include.on) {
		      joinOn = this.whereItemsQuery(include.on, {
		        mainAlias: asRight,
		        model: include.model,
		        replacements: options == null ? void 0 : options.replacements
		      });
		    }
		    if (include.where) {
		      joinWhere = this.whereItemsQuery(include.where, {
		        mainAlias: asRight,
		        model: include.model,
		        replacements: options == null ? void 0 : options.replacements
		      });
		      if (joinWhere) {
		        joinOn = (0, import_where_sql_builder.joinWithLogicalOperator)([joinOn, joinWhere], include.or ? Op.or : Op.and);
		      }
		    }
		    if ((options == null ? void 0 : options.minifyAliases) && asRight.length > 63) {
		      const alias = `%${topLevelInfo.options.includeAliases.size}`;
		      topLevelInfo.options.includeAliases.set(alias, asRight);
		    }
		    return {
		      join: include.required ? "INNER JOIN" : include.right && this.dialect.supports["RIGHT JOIN"] ? "RIGHT OUTER JOIN" : "LEFT OUTER JOIN",
		      body: this.quoteTable(tableRight, asRight),
		      condition: joinOn,
		      attributes: {
		        main: [],
		        subQuery: subqueryAttributes
		      }
		    };
		  }
		  /**
		   * Returns the SQL fragments to handle returning the attributes from an insert/update query.
		   *
		   * @param  {object} modelAttributes An object with the model attributes.
		   * @param  {object} options         An object with options.
		   *
		   * @private
		   */
		  generateReturnValues(modelAttributes, options) {
		    const returnFields = [];
		    const returnTypes = [];
		    let outputFragment = "";
		    let returningFragment = "";
		    let tmpTable = "";
		    const returnValuesType = this.dialect.supports.returnValues;
		    if (Array.isArray(options.returning)) {
		      returnFields.push(...options.returning.map((field) => {
		        if (typeof field === "string") {
		          return this.quoteIdentifier(field);
		        } else if (field instanceof import_literal.Literal) {
		          if (returnValuesType === "output") {
		            throw new Error(`literal() cannot be used in the "returning" option array in ${this.dialect.name}. Use col(), or a string instead.`);
		          }
		          return this.formatSqlExpression(field);
		        } else if (field instanceof import_col.Col) {
		          return this.formatSqlExpression(field);
		        }
		        throw new Error(`Unsupported value in "returning" option: ${import_node_util.default.inspect(field)}. This option only accepts true, false, or an array of strings, col() or literal().`);
		      }));
		    } else if (modelAttributes) {
		      _.each(modelAttributes, (attribute) => {
		        if (!(attribute.type instanceof DataTypes.VIRTUAL)) {
		          returnFields.push(this.quoteIdentifier(attribute.field));
		          returnTypes.push(attribute.type);
		        }
		      });
		    }
		    if (_.isEmpty(returnFields)) {
		      returnFields.push(`*`);
		    }
		    if (returnValuesType === "returning") {
		      returningFragment = ` RETURNING ${returnFields.join(", ")}`;
		    } else if (returnValuesType === "output") {
		      outputFragment = ` OUTPUT ${returnFields.map((field) => `INSERTED.${field}`).join(", ")}`;
		      if (options.hasTrigger && this.dialect.supports.tmpTableTrigger) {
		        const tmpColumns = returnFields.map((field, i) => {
		          return `${field} ${(0, import_data_types_utils.attributeTypeToSql)(returnTypes[i], { dialect: this.dialect })}`;
		        });
		        tmpTable = `DECLARE @tmp TABLE (${tmpColumns.join(",")}); `;
		        outputFragment += " INTO @tmp";
		        returningFragment = "; SELECT * FROM @tmp";
		      }
		    }
		    return { outputFragment, returnFields, returningFragment, tmpTable };
		  }
		  generateThroughJoin(include, includeAs, parentTableName, topLevelInfo, options) {
		    const through = include.through;
		    const throughTable = through.model.getTableName();
		    const throughAs = `${includeAs.internalAs}->${through.as}`;
		    const externalThroughAs = `${includeAs.externalAs}.${through.as}`;
		    const throughAttributes = through.attributes.map((attr) => {
		      let alias = `${externalThroughAs}.${Array.isArray(attr) ? attr[1] : attr}`;
		      if (options.minifyAliases) {
		        alias = this._getMinifiedAlias(alias, throughAs, topLevelInfo.options);
		      }
		      return (0, import_join_sql_fragments.joinSQLFragments)([
		        `${this.quoteIdentifier(throughAs)}.${this.quoteIdentifier(Array.isArray(attr) ? attr[0] : attr)}`,
		        "AS",
		        this.quoteIdentifier(alias)
		      ]);
		    });
		    const association = include.association;
		    const parentIsTop = !include.parent.association && include.parent.model.name === topLevelInfo.options.model.name;
		    const tableSource = parentTableName;
		    const identSource = association.identifierField;
		    const tableTarget = includeAs.internalAs;
		    const identTarget = association.foreignIdentifierField;
		    const attrTarget = association.targetKeyField;
		    const joinType = include.required ? "INNER JOIN" : include.right && this.dialect.supports["RIGHT JOIN"] ? "RIGHT OUTER JOIN" : "LEFT OUTER JOIN";
		    let joinBody;
		    let joinCondition;
		    const attributes = {
		      main: [],
		      subQuery: []
		    };
		    let attrSource = association.sourceKey;
		    let sourceJoinOn;
		    let targetJoinOn;
		    let throughWhere;
		    let targetWhere;
		    if (options.minifyAliases && throughAs.length > 63) {
		      topLevelInfo.options.includeAliases.set(`%${topLevelInfo.options.includeAliases.size}`, throughAs);
		      if (includeAs.internalAs.length > 63) {
		        topLevelInfo.options.includeAliases.set(`%${topLevelInfo.options.includeAliases.size}`, includeAs.internalAs);
		      }
		    }
		    if (topLevelInfo.options.includeIgnoreAttributes !== false) {
		      for (const attr of throughAttributes) {
		        attributes.main.push(attr);
		      }
		    }
		    if (!topLevelInfo.subQuery) {
		      attrSource = association.sourceKeyField;
		    }
		    if (topLevelInfo.subQuery && !include.subQuery && !include.parent.subQuery && include.parent.model !== topLevelInfo.options.mainModel) {
		      attrSource = association.sourceKeyField;
		    }
		    if (topLevelInfo.subQuery && !include.subQuery && include.parent.subQuery && !parentIsTop) {
		      const joinSource = this._getAliasForField(tableSource, `${tableSource}.${attrSource}`, topLevelInfo.options) || `${tableSource}.${attrSource}`;
		      sourceJoinOn = `${this.quoteIdentifier(joinSource)} = `;
		    } else {
		      const aliasedSource = this._getAliasForField(tableSource, attrSource, topLevelInfo.options) || attrSource;
		      sourceJoinOn = `${this.quoteTable(tableSource)}.${this.quoteIdentifier(aliasedSource)} = `;
		    }
		    sourceJoinOn += `${this.quoteIdentifier(throughAs)}.${this.quoteIdentifier(identSource)}`;
		    targetJoinOn = `${this.quoteIdentifier(tableTarget)}.${this.quoteIdentifier(attrTarget)} = `;
		    targetJoinOn += `${this.quoteIdentifier(throughAs)}.${this.quoteIdentifier(identTarget)}`;
		    if (through.where) {
		      throughWhere = this.whereItemsQuery(through.where, { ...topLevelInfo.options, model: through.model, mainAlias: throughAs });
		    }
		    joinBody = `( ${this.quoteTable(throughTable, throughAs)} INNER JOIN ${this.quoteTable(include.model.getTableName(), includeAs.internalAs)} ON ${targetJoinOn}`;
		    if (throughWhere) {
		      joinBody += ` AND ${throughWhere}`;
		    }
		    joinBody += ")";
		    joinCondition = sourceJoinOn;
		    if ((include.where || include.through.where) && include.where) {
		      targetWhere = this.whereItemsQuery(include.where, { ...topLevelInfo.options, model: include.model, mainAlias: includeAs.internalAs });
		      if (targetWhere) {
		        joinCondition += ` AND ${targetWhere}`;
		      }
		    }
		    this._generateSubQueryFilter(include, includeAs, topLevelInfo);
		    return {
		      join: joinType,
		      body: joinBody,
		      condition: joinCondition,
		      attributes
		    };
		  }
		  /*
		   * Generates subQueryFilter - a select nested in the where clause of the subQuery.
		   * For a given include a query is generated that contains all the way from the subQuery
		   * table to the include table plus everything that's in required transitive closure of the
		   * given include.
		   */
		  _generateSubQueryFilter(include, includeAs, topLevelInfo) {
		    if (!topLevelInfo.subQuery || !include.subQueryFilter) {
		      return;
		    }
		    if (!topLevelInfo.options.where) {
		      topLevelInfo.options.where = {};
		    }
		    let parent = include;
		    let child = include;
		    let nestedIncludes = this._getRequiredClosure(include).include;
		    let query;
		    while (parent = parent.parent) {
		      if (parent.parent && !parent.required) {
		        return;
		      }
		      if (parent.subQueryFilter) {
		        return;
		      }
		      nestedIncludes = [{ ...child, include: nestedIncludes, attributes: [] }];
		      child = parent;
		    }
		    const topInclude = nestedIncludes[0];
		    const topParent = topInclude.parent;
		    const topAssociation = topInclude.association;
		    topInclude.association = void 0;
		    if (topInclude.through && Object(topInclude.through.model) === topInclude.through.model) {
		      query = this.selectQuery(topInclude.through.model.getTableName(), {
		        attributes: [topInclude.through.model.primaryKeyField],
		        include: _validateIncludedElements({
		          model: topInclude.through.model,
		          include: [{
		            association: topAssociation.fromThroughToTarget,
		            required: true,
		            where: topInclude.where,
		            include: topInclude.include
		          }]
		        }).include,
		        model: topInclude.through.model,
		        where: {
		          [Op.and]: [
		            new import_literal.Literal([
		              `${this.quoteTable(topParent.model.name)}.${this.quoteIdentifier(topParent.model.primaryKeyField)}`,
		              `${this.quoteIdentifier(topInclude.through.model.name)}.${this.quoteIdentifier(topAssociation.identifierField)}`
		            ].join(" = ")),
		            topInclude.through.where
		          ]
		        },
		        limit: 1,
		        includeIgnoreAttributes: false
		      }, topInclude.through.model);
		    } else {
		      const isBelongsTo = topAssociation.associationType === "BelongsTo";
		      const sourceField = isBelongsTo ? topAssociation.identifierField : topAssociation.sourceKeyField || topParent.model.primaryKeyField;
		      const targetField = isBelongsTo ? topAssociation.sourceKeyField || topInclude.model.primaryKeyField : topAssociation.identifierField;
		      const join = [
		        `${this.quoteIdentifier(topInclude.as)}.${this.quoteIdentifier(targetField)}`,
		        `${this.quoteTable(topParent.as || topParent.model.name)}.${this.quoteIdentifier(sourceField)}`
		      ].join(" = ");
		      query = this.selectQuery(topInclude.model.getTableName(), {
		        attributes: [targetField],
		        include: _validateIncludedElements(topInclude).include,
		        model: topInclude.model,
		        where: {
		          [Op.and]: [
		            topInclude.where,
		            new import_literal.Literal(join)
		          ]
		        },
		        limit: 1,
		        tableAs: topInclude.as,
		        includeIgnoreAttributes: false
		      }, topInclude.model);
		    }
		    topLevelInfo.options.where = (0, import_sequelize.and)(topLevelInfo.options.where, new import_literal.Literal([
		      "(",
		      query.replace(/;$/, ""),
		      ")",
		      "IS NOT NULL"
		    ].join(" ")));
		  }
		  /*
		   * For a given include hierarchy creates a copy of it where only the required includes
		   * are preserved.
		   */
		  _getRequiredClosure(include) {
		    const copy = { ...include, attributes: [], include: [] };
		    if (Array.isArray(include.include)) {
		      copy.include = include.include.filter((i) => i.required).map((inc) => this._getRequiredClosure(inc));
		    }
		    return copy;
		  }
		  getQueryOrders(options, model, subQuery) {
		    const mainQueryOrder = [];
		    const subQueryOrder = [];
		    if (Array.isArray(options.order)) {
		      for (let order of options.order) {
		        if (!Array.isArray(order)) {
		          order = [order];
		        }
		        if (subQuery && Array.isArray(order) && order[0] && !(order[0] instanceof Association) && !(0, import_model_utils.isModelStatic)(order[0]) && !(0, import_model_utils.isModelStatic)(order[0].model) && !(typeof order[0] === "string" && model && model.associations !== void 0 && model.associations[order[0]])) {
		          const columnName = model.modelDefinition.getColumnNameLoose(order[0]);
		          const subQueryAlias = this._getAliasForField(model.name, columnName, options);
		          let parent = null;
		          let orderToQuote = [];
		          if (subQueryAlias === null) {
		            orderToQuote = order;
		            parent = model;
		          } else {
		            orderToQuote = [subQueryAlias, order.length > 1 ? order[1] : "ASC"];
		            parent = null;
		          }
		          subQueryOrder.push(this.quote(orderToQuote, parent, "->", options));
		        }
		        if (options.attributes && model) {
		          const aliasedAttribute = this._getAliasForFieldFromQueryOptions(order[0], options);
		          if (aliasedAttribute) {
		            const alias = this._getAliasForField(model.name, aliasedAttribute[1], options);
		            order[0] = new import_col.Col(alias || aliasedAttribute[1]);
		          }
		        }
		        mainQueryOrder.push(this.quote(order, model, "->", options));
		      }
		    } else if (options.order instanceof import_base_sql_expression.BaseSqlExpression) {
		      const sql = this.quote(options.order, model, "->", options);
		      if (subQuery) {
		        subQueryOrder.push(sql);
		      }
		      mainQueryOrder.push(sql);
		    } else {
		      throw new TypeError("Order must be type of array or instance of a valid sequelize method.");
		    }
		    return { mainQueryOrder, subQueryOrder };
		  }
		  _throwOnEmptyAttributes(attributes, extraInfo = {}) {
		    if (attributes.length > 0) {
		      return;
		    }
		    const asPart = extraInfo.as && `as ${extraInfo.as}` || "";
		    const namePart = extraInfo.modelName && `for model '${extraInfo.modelName}'` || "";
		    const message = `Attempted a SELECT query ${namePart} ${asPart} without selecting any columns`;
		    throw new sequelizeError.QueryError(message.replaceAll(/ +/g, " "));
		  }
		  _validateSelectOptions(options) {
		    if (options.maxExecutionTimeHintMs != null && !this.dialect.supports.maxExecutionTimeHint.select) {
		      throw new Error(`The maxExecutionTimeMs option is not supported by ${this.dialect.name}`);
		    }
		  }
		  _getBeforeSelectAttributesFragment(_options) {
		    return "";
		  }
		  selectFromTableFragment(options, model, attributes, tables, mainTableAs) {
		    this._throwOnEmptyAttributes(attributes, { modelName: model && model.name, as: mainTableAs });
		    this._validateSelectOptions(options);
		    let fragment = "SELECT";
		    fragment += this._getBeforeSelectAttributesFragment(options);
		    fragment += ` ${attributes.join(", ")} FROM ${tables}`;
		    if (mainTableAs) {
		      fragment += ` AS ${mainTableAs}`;
		    }
		    if (options.indexHints && this.dialect.supports.indexHints) {
		      for (const hint of options.indexHints) {
		        if (IndexHints[hint.type]) {
		          fragment += ` ${IndexHints[hint.type]} INDEX (${hint.values.map((indexName) => this.quoteIdentifiers(indexName)).join(",")})`;
		        }
		      }
		    }
		    return fragment;
		  }
		  /**
		   * Returns an SQL fragment for adding result constraints.
		   *
		   * @param  {object} options An object with selectQuery options.
		   * @param {ModelStatic} model
		   * @returns {string}         The generated sql query.
		   * @private
		   */
		  addLimitAndOffset(options, model) {
		    let fragment = "";
		    if (options.limit != null) {
		      fragment += ` LIMIT ${this.escape(options.limit, options)}`;
		    } else if (options.offset) {
		      fragment += ` LIMIT 18446744073709551615`;
		    }
		    if (options.offset) {
		      fragment += ` OFFSET ${this.escape(options.offset, options)}`;
		    }
		    return fragment;
		  }
		  // A recursive parser for nested where conditions
		  parseConditionObject(conditions, path) {
		    path = path || [];
		    return _.reduce(conditions, (result, value, key) => {
		      if (_.isObject(value)) {
		        return result.concat(this.parseConditionObject(value, path.concat(key)));
		      }
		      result.push({ path: path.concat(key), value });
		      return result;
		    }, []);
		  }
		  /**
		   * Returns a query that sets the transaction isolation level.
		   *
		   * @param  {string} value   The isolation level.
		   * @param  {object} options An object with options.
		   * @returns {string}         The generated sql query.
		   * @private
		   */
		  setIsolationLevelQuery(value, options) {
		    if (options.parent) {
		      return;
		    }
		    return `SET TRANSACTION ISOLATION LEVEL ${value};`;
		  }
		  generateTransactionId() {
		    return crypto.randomUUID();
		  }
		  /**
		   * Returns a query that starts a transaction.
		   *
		   * @param  {Transaction} transaction
		   * @returns {string}         The generated sql query.
		   * @private
		   */
		  startTransactionQuery(transaction) {
		    if (transaction.parent) {
		      return `SAVEPOINT ${this.quoteIdentifier(transaction.name, true)};`;
		    }
		    return "START TRANSACTION;";
		  }
		  /**
		   * Returns a query that commits a transaction.
		   *
		   * @param  {Transaction} transaction An object with options.
		   * @returns {string}         The generated sql query.
		   * @private
		   */
		  commitTransactionQuery(transaction) {
		    if (transaction.parent) {
		      return;
		    }
		    return "COMMIT;";
		  }
		  /**
		   * Returns a query that rollbacks a transaction.
		   *
		   * @param  {Transaction} transaction
		   * @returns {string}         The generated sql query.
		   * @private
		   */
		  rollbackTransactionQuery(transaction) {
		    if (transaction.parent) {
		      return `ROLLBACK TO SAVEPOINT ${this.quoteIdentifier(transaction.name, true)};`;
		    }
		    return "ROLLBACK;";
		  }
		}
		
		return queryGenerator$8;
	}

	var json;
	var hasRequiredJson;

	function requireJson () {
		if (hasRequiredJson) return json;
		hasRequiredJson = 1;
		var __defProp = Object.defineProperty;
		var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
		var __getOwnPropNames = Object.getOwnPropertyNames;
		var __hasOwnProp = Object.prototype.hasOwnProperty;
		var __export = (target, all) => {
		  for (var name in all)
		    __defProp(target, name, { get: all[name], enumerable: true });
		};
		var __copyProps = (to, from, except, desc) => {
		  if (from && typeof from === "object" || typeof from === "function") {
		    for (let key of __getOwnPropNames(from))
		      if (!__hasOwnProp.call(to, key) && key !== except)
		        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
		  }
		  return to;
		};
		var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
		var json_exports = {};
		__export(json_exports, {
		  buildJsonPath: () => buildJsonPath
		});
		json = __toCommonJS(json_exports);
		function quoteJsonPathIdentifier(identifier) {
		  if (/^[a-z_][a-z0-9_]*$/i.test(identifier)) {
		    return identifier;
		  }
		  return `"${identifier.replaceAll(/["\\]/g, (s) => `\\${s}`)}"`;
		}
		function buildJsonPath(path) {
		  let jsonPathStr = "$";
		  for (const pathElement of path) {
		    if (typeof pathElement === "number") {
		      jsonPathStr += `[${pathElement}]`;
		    } else {
		      jsonPathStr += `.${quoteJsonPathIdentifier(pathElement)}`;
		    }
		  }
		  return jsonPathStr;
		}
		
		return json;
	}

	var queryGeneratorTypescript$7;
	var hasRequiredQueryGeneratorTypescript$7;

	function requireQueryGeneratorTypescript$7 () {
		if (hasRequiredQueryGeneratorTypescript$7) return queryGeneratorTypescript$7;
		hasRequiredQueryGeneratorTypescript$7 = 1;
		var __defProp = Object.defineProperty;
		var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
		var __getOwnPropNames = Object.getOwnPropertyNames;
		var __hasOwnProp = Object.prototype.hasOwnProperty;
		var __export = (target, all) => {
		  for (var name in all)
		    __defProp(target, name, { get: all[name], enumerable: true });
		};
		var __copyProps = (to, from, except, desc) => {
		  if (from && typeof from === "object" || typeof from === "function") {
		    for (let key of __getOwnPropNames(from))
		      if (!__hasOwnProp.call(to, key) && key !== except)
		        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
		  }
		  return to;
		};
		var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
		var query_generator_typescript_exports = {};
		__export(query_generator_typescript_exports, {
		  MySqlQueryGeneratorTypeScript: () => MySqlQueryGeneratorTypeScript
		});
		queryGeneratorTypescript$7 = __toCommonJS(query_generator_typescript_exports);
		var import_operators = operators;
		var import_check = requireCheck();
		var import_join_sql_fragments = joinSqlFragments;
		var import_json = requireJson();
		var import_string = string$2;
		var import_query_generator = requireQueryGenerator$8();
		var import_query_generator_typescript = requireQueryGeneratorTypescript$8();
		const REMOVE_INDEX_QUERY_SUPPORTED_OPTIONS = /* @__PURE__ */ new Set();
		class MySqlQueryGeneratorTypeScript extends import_query_generator.AbstractQueryGenerator {
		  constructor(options) {
		    super(options);
		    this.whereSqlBuilder.setOperatorKeyword(import_operators.Op.regexp, "REGEXP");
		    this.whereSqlBuilder.setOperatorKeyword(import_operators.Op.notRegexp, "NOT REGEXP");
		  }
		  describeTableQuery(tableName) {
		    return `SHOW FULL COLUMNS FROM ${this.quoteTable(tableName)};`;
		  }
		  showConstraintsQuery(tableName, options) {
		    const table = this.extractTableDetails(tableName);
		    return (0, import_join_sql_fragments.joinSQLFragments)([
		      "SELECT c.CONSTRAINT_CATALOG AS constraintCatalog,",
		      "c.CONSTRAINT_SCHEMA AS constraintSchema,",
		      "c.CONSTRAINT_NAME AS constraintName,",
		      "c.CONSTRAINT_TYPE AS constraintType,",
		      "c.TABLE_SCHEMA AS tableSchema,",
		      "c.TABLE_NAME AS tableName,",
		      "kcu.COLUMN_NAME AS columnNames,",
		      "kcu.REFERENCED_TABLE_NAME AS referencedTableName,",
		      "kcu.REFERENCED_COLUMN_NAME AS referencedColumnNames,",
		      "r.DELETE_RULE AS deleteAction,",
		      "r.UPDATE_RULE AS updateAction",
		      "FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS c",
		      "LEFT JOIN INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS r ON c.CONSTRAINT_CATALOG = r.CONSTRAINT_CATALOG",
		      "AND c.CONSTRAINT_SCHEMA = r.CONSTRAINT_SCHEMA AND c.CONSTRAINT_NAME = r.CONSTRAINT_NAME AND c.TABLE_NAME = r.TABLE_NAME",
		      "LEFT JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE kcu ON r.CONSTRAINT_CATALOG = kcu.CONSTRAINT_CATALOG",
		      "AND r.CONSTRAINT_SCHEMA = kcu.CONSTRAINT_SCHEMA AND r.CONSTRAINT_NAME = kcu.CONSTRAINT_NAME AND r.TABLE_NAME = kcu.TABLE_NAME",
		      `WHERE c.TABLE_NAME = ${this.escape(table.tableName)}`,
		      `AND c.TABLE_SCHEMA = ${this.escape(table.schema)}`,
		      (options == null ? void 0 : options.constraintName) ? `AND c.CONSTRAINT_NAME = ${this.escape(options.constraintName)}` : "",
		      "ORDER BY c.CONSTRAINT_NAME"
		    ]);
		  }
		  showIndexesQuery(tableName) {
		    return `SHOW INDEX FROM ${this.quoteTable(tableName)}`;
		  }
		  getToggleForeignKeyChecksQuery(enable) {
		    return `SET FOREIGN_KEY_CHECKS=${enable ? "1" : "0"}`;
		  }
		  removeIndexQuery(tableName, indexNameOrAttributes, options) {
		    if (options) {
		      (0, import_check.rejectInvalidOptions)(
		        "removeIndexQuery",
		        this.dialect.name,
		        import_query_generator_typescript.REMOVE_INDEX_QUERY_SUPPORTABLE_OPTIONS,
		        REMOVE_INDEX_QUERY_SUPPORTED_OPTIONS,
		        options
		      );
		    }
		    let indexName;
		    if (Array.isArray(indexNameOrAttributes)) {
		      const table = this.extractTableDetails(tableName);
		      indexName = (0, import_string.generateIndexName)(table, { fields: indexNameOrAttributes });
		    } else {
		      indexName = indexNameOrAttributes;
		    }
		    return `DROP INDEX ${this.quoteIdentifier(indexName)} ON ${this.quoteTable(tableName)}`;
		  }
		  getForeignKeyQuery(tableName, columnName) {
		    const table = this.extractTableDetails(tableName);
		    return (0, import_join_sql_fragments.joinSQLFragments)([
		      "SELECT CONSTRAINT_NAME as constraintName,",
		      "CONSTRAINT_SCHEMA as constraintSchema,",
		      "TABLE_NAME as tableName,",
		      "TABLE_SCHEMA as tableSchema,",
		      "COLUMN_NAME as columnName,",
		      "REFERENCED_TABLE_SCHEMA as referencedTableSchema,",
		      "REFERENCED_TABLE_NAME as referencedTableName,",
		      "REFERENCED_COLUMN_NAME as referencedColumnName",
		      "FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE",
		      "WHERE",
		      `TABLE_NAME = ${this.escape(table.tableName)}`,
		      `AND TABLE_SCHEMA = ${this.escape(table.schema)}`,
		      columnName && `AND COLUMN_NAME = ${this.escape(columnName)}`,
		      "AND REFERENCED_TABLE_NAME IS NOT NULL"
		    ]);
		  }
		  jsonPathExtractionQuery(sqlExpression, path, unquote) {
		    const extractQuery = `json_extract(${sqlExpression},${this.escape((0, import_json.buildJsonPath)(path))})`;
		    if (unquote) {
		      return `json_unquote(${extractQuery})`;
		    }
		    return extractQuery;
		  }
		  formatUnquoteJson(arg, options) {
		    return `json_unquote(${this.escape(arg, options)})`;
		  }
		  versionQuery() {
		    return "SELECT VERSION() as `version`";
		  }
		}
		
		return queryGeneratorTypescript$7;
	}

	var queryGenerator$7;
	var hasRequiredQueryGenerator$7;

	function requireQueryGenerator$7 () {
		if (hasRequiredQueryGenerator$7) return queryGenerator$7;
		hasRequiredQueryGenerator$7 = 1;
		var __defProp = Object.defineProperty;
		var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
		var __getOwnPropNames = Object.getOwnPropertyNames;
		var __hasOwnProp = Object.prototype.hasOwnProperty;
		var __export = (target, all) => {
		  for (var name in all)
		    __defProp(target, name, { get: all[name], enumerable: true });
		};
		var __copyProps = (to, from, except, desc) => {
		  if (from && typeof from === "object" || typeof from === "function") {
		    for (let key of __getOwnPropNames(from))
		      if (!__hasOwnProp.call(to, key) && key !== except)
		        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
		  }
		  return to;
		};
		var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
		var query_generator_exports = {};
		__export(query_generator_exports, {
		  MySqlQueryGenerator: () => MySqlQueryGenerator
		});
		queryGenerator$7 = __toCommonJS(query_generator_exports);
		var import_node_util = require$$0$1;
		var import_check = requireCheck();
		var import_join_sql_fragments = joinSqlFragments;
		var import_object = object$1;
		var import_query_builder_utils = requireQueryBuilderUtils();
		var import_data_types_utils = requireDataTypesUtils();
		var import_query_generator = requireQueryGenerator$8();
		const _ = lodashExports;
		const { MySqlQueryGeneratorTypeScript } = requireQueryGeneratorTypescript$7();
		const typeWithoutDefault = /* @__PURE__ */ new Set(["BLOB", "TEXT", "GEOMETRY", "JSON"]);
		const ADD_COLUMN_QUERY_SUPPORTED_OPTIONS = /* @__PURE__ */ new Set();
		const REMOVE_COLUMN_QUERY_SUPPORTED_OPTIONS = /* @__PURE__ */ new Set();
		class MySqlQueryGenerator extends MySqlQueryGeneratorTypeScript {
		  createSchemaQuery(schemaName, options) {
		    return (0, import_join_sql_fragments.joinSQLFragments)([
		      "CREATE SCHEMA IF NOT EXISTS",
		      this.quoteIdentifier(schemaName),
		      (options == null ? void 0 : options.charset) && `DEFAULT CHARACTER SET ${this.escape(options.charset)}`,
		      (options == null ? void 0 : options.collate) && `DEFAULT COLLATE ${this.escape(options.collate)}`,
		      ";"
		    ]);
		  }
		  dropSchemaQuery(schemaName) {
		    return `DROP SCHEMA IF EXISTS ${this.quoteIdentifier(schemaName)};`;
		  }
		  // TODO: typescript - protected
		  _getTechnicalSchemaNames() {
		    return ["MYSQL", "INFORMATION_SCHEMA", "PERFORMANCE_SCHEMA", "SYS", "mysql", "information_schema", "performance_schema", "sys"];
		  }
		  listSchemasQuery(options) {
		    const schemasToSkip = this._getTechnicalSchemaNames();
		    if (Array.isArray(options == null ? void 0 : options.skip)) {
		      schemasToSkip.push(...options.skip);
		    }
		    return (0, import_join_sql_fragments.joinSQLFragments)([
		      "SELECT SCHEMA_NAME as schema_name",
		      "FROM INFORMATION_SCHEMA.SCHEMATA",
		      `WHERE SCHEMA_NAME NOT IN (${schemasToSkip.map((schema) => this.escape(schema)).join(", ")})`,
		      ";"
		    ]);
		  }
		  createTableQuery(tableName, attributes, options) {
		    options = {
		      engine: "InnoDB",
		      charset: null,
		      rowFormat: null,
		      ...options
		    };
		    const primaryKeys = [];
		    const foreignKeys = {};
		    const attrStr = [];
		    for (const attr in attributes) {
		      if (!Object.hasOwn(attributes, attr)) {
		        continue;
		      }
		      const dataType = attributes[attr];
		      let match;
		      if (dataType.includes("PRIMARY KEY")) {
		        primaryKeys.push(attr);
		        if (dataType.includes("REFERENCES")) {
		          match = dataType.match(/^(.+) (REFERENCES.*)$/);
		          attrStr.push(`${this.quoteIdentifier(attr)} ${match[1].replace("PRIMARY KEY", "")}`);
		          foreignKeys[attr] = match[2];
		        } else {
		          attrStr.push(`${this.quoteIdentifier(attr)} ${dataType.replace("PRIMARY KEY", "")}`);
		        }
		      } else if (dataType.includes("REFERENCES")) {
		        match = dataType.match(/^(.+) (REFERENCES.*)$/);
		        attrStr.push(`${this.quoteIdentifier(attr)} ${match[1]}`);
		        foreignKeys[attr] = match[2];
		      } else {
		        attrStr.push(`${this.quoteIdentifier(attr)} ${dataType}`);
		      }
		    }
		    const table = this.quoteTable(tableName);
		    let attributesClause = attrStr.join(", ");
		    const pkString = primaryKeys.map((pk) => this.quoteIdentifier(pk)).join(", ");
		    if (options.uniqueKeys) {
		      _.each(options.uniqueKeys, (columns, indexName) => {
		        if (typeof indexName !== "string") {
		          indexName = `uniq_${tableName}_${columns.fields.join("_")}`;
		        }
		        attributesClause += `, UNIQUE ${this.quoteIdentifier(indexName)} (${columns.fields.map((field) => this.quoteIdentifier(field)).join(", ")})`;
		      });
		    }
		    if (pkString.length > 0) {
		      attributesClause += `, PRIMARY KEY (${pkString})`;
		    }
		    for (const fkey in foreignKeys) {
		      if (Object.hasOwn(foreignKeys, fkey)) {
		        attributesClause += `, FOREIGN KEY (${this.quoteIdentifier(fkey)}) ${foreignKeys[fkey]}`;
		      }
		    }
		    return (0, import_join_sql_fragments.joinSQLFragments)([
		      "CREATE TABLE IF NOT EXISTS",
		      table,
		      `(${attributesClause})`,
		      `ENGINE=${options.engine}`,
		      options.comment && typeof options.comment === "string" && `COMMENT ${this.escape(options.comment)}`,
		      options.charset && `DEFAULT CHARSET=${options.charset}`,
		      options.collate && `COLLATE ${options.collate}`,
		      options.initialAutoIncrement && `AUTO_INCREMENT=${options.initialAutoIncrement}`,
		      options.rowFormat && `ROW_FORMAT=${options.rowFormat}`,
		      ";"
		    ]);
		  }
		  showTablesQuery(schemaName) {
		    let query = "SELECT TABLE_NAME, TABLE_SCHEMA FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE'";
		    if (schemaName) {
		      query += ` AND TABLE_SCHEMA = ${this.escape(schemaName)}`;
		    } else {
		      const technicalSchemas = this._getTechnicalSchemaNames();
		      query += ` AND TABLE_SCHEMA NOT IN (${technicalSchemas.map((schema) => this.escape(schema)).join(", ")})`;
		    }
		    return `${query};`;
		  }
		  tableExistsQuery(table) {
		    const tableName = this.escape(this.quoteTable(table).slice(1, -1));
		    return `SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = ${tableName} AND TABLE_SCHEMA = ${this.escape(this.sequelize.config.database)}`;
		  }
		  addColumnQuery(table, key, dataType, options) {
		    if (options) {
		      (0, import_check.rejectInvalidOptions)(
		        "addColumnQuery",
		        this.dialect.name,
		        import_query_generator.ADD_COLUMN_QUERY_SUPPORTABLE_OPTIONS,
		        ADD_COLUMN_QUERY_SUPPORTED_OPTIONS,
		        options
		      );
		    }
		    dataType = {
		      ...dataType,
		      type: (0, import_data_types_utils.normalizeDataType)(dataType.type, this.dialect)
		    };
		    return (0, import_join_sql_fragments.joinSQLFragments)([
		      "ALTER TABLE",
		      this.quoteTable(table),
		      "ADD",
		      this.quoteIdentifier(key),
		      this.attributeToSQL(dataType, {
		        context: "addColumn",
		        tableName: table,
		        foreignKey: key
		      }),
		      ";"
		    ]);
		  }
		  removeColumnQuery(tableName, attributeName, options) {
		    if (options) {
		      (0, import_check.rejectInvalidOptions)(
		        "removeColumnQuery",
		        this.dialect.name,
		        import_query_generator.REMOVE_COLUMN_QUERY_SUPPORTABLE_OPTIONS,
		        REMOVE_COLUMN_QUERY_SUPPORTED_OPTIONS,
		        options
		      );
		    }
		    return (0, import_join_sql_fragments.joinSQLFragments)([
		      "ALTER TABLE",
		      this.quoteTable(tableName),
		      "DROP",
		      this.quoteIdentifier(attributeName),
		      ";"
		    ]);
		  }
		  changeColumnQuery(tableName, attributes) {
		    const attrString = [];
		    const constraintString = [];
		    for (const attributeName in attributes) {
		      let definition = attributes[attributeName];
		      if (definition.includes("REFERENCES")) {
		        const attrName = this.quoteIdentifier(attributeName);
		        definition = definition.replace(/.+?(?=REFERENCES)/, "");
		        constraintString.push(`FOREIGN KEY (${attrName}) ${definition}`);
		      } else {
		        attrString.push(`\`${attributeName}\` \`${attributeName}\` ${definition}`);
		      }
		    }
		    return (0, import_join_sql_fragments.joinSQLFragments)([
		      "ALTER TABLE",
		      this.quoteTable(tableName),
		      attrString.length && `CHANGE ${attrString.join(", ")}`,
		      constraintString.length && `ADD ${constraintString.join(", ")}`,
		      ";"
		    ]);
		  }
		  renameColumnQuery(tableName, attrBefore, attributes) {
		    const attrString = [];
		    for (const attrName in attributes) {
		      const definition = attributes[attrName];
		      attrString.push(`\`${attrBefore}\` \`${attrName}\` ${definition}`);
		    }
		    return (0, import_join_sql_fragments.joinSQLFragments)([
		      "ALTER TABLE",
		      this.quoteTable(tableName),
		      "CHANGE",
		      attrString.join(", "),
		      ";"
		    ]);
		  }
		  truncateTableQuery(tableName) {
		    return `TRUNCATE ${this.quoteTable(tableName)}`;
		  }
		  deleteQuery(tableName, where, options = import_object.EMPTY_OBJECT, model) {
		    let query = `DELETE FROM ${this.quoteTable(tableName)}`;
		    const escapeOptions = { ...options, model };
		    const whereSql = this.whereQuery(where, escapeOptions);
		    if (whereSql) {
		      query += ` ${whereSql}`;
		    }
		    if (options.limit) {
		      query += ` LIMIT ${this.escape(options.limit, escapeOptions)}`;
		    }
		    return query;
		  }
		  attributeToSQL(attribute, options) {
		    if (!_.isPlainObject(attribute)) {
		      attribute = {
		        type: attribute
		      };
		    }
		    const attributeString = (0, import_data_types_utils.attributeTypeToSql)(attribute.type, { escape: this.escape.bind(this), dialect: this.dialect });
		    let template = attributeString;
		    if (attribute.allowNull === false) {
		      template += " NOT NULL";
		    }
		    if (attribute.autoIncrement) {
		      template += " auto_increment";
		    }
		    if (!typeWithoutDefault.has(attributeString) && attribute.type._binary !== true && (0, import_query_builder_utils.defaultValueSchemable)(attribute.defaultValue)) {
		      template += ` DEFAULT ${this.escape(attribute.defaultValue)}`;
		    }
		    if (attribute.unique === true) {
		      template += " UNIQUE";
		    }
		    if (attribute.primaryKey) {
		      template += " PRIMARY KEY";
		    }
		    if (attribute.comment) {
		      template += ` COMMENT ${this.escape(attribute.comment)}`;
		    }
		    if (attribute.first) {
		      template += " FIRST";
		    }
		    if (attribute.after) {
		      template += ` AFTER ${this.quoteIdentifier(attribute.after)}`;
		    }
		    if ((!options || !options.withoutForeignKeyConstraints) && attribute.references) {
		      if (options && options.context === "addColumn" && options.foreignKey) {
		        const fkName = this.quoteIdentifier(`${this.extractTableDetails(options.tableName).tableName}_${options.foreignKey}_foreign_idx`);
		        template += `, ADD CONSTRAINT ${fkName} FOREIGN KEY (${this.quoteIdentifier(options.foreignKey)})`;
		      }
		      template += ` REFERENCES ${this.quoteTable(attribute.references.table)}`;
		      if (attribute.references.key) {
		        template += ` (${this.quoteIdentifier(attribute.references.key)})`;
		      } else {
		        template += ` (${this.quoteIdentifier("id")})`;
		      }
		      if (attribute.onDelete) {
		        template += ` ON DELETE ${attribute.onDelete.toUpperCase()}`;
		      }
		      if (attribute.onUpdate) {
		        template += ` ON UPDATE ${attribute.onUpdate.toUpperCase()}`;
		      }
		    }
		    return template;
		  }
		  attributesToSQL(attributes, options) {
		    const result = {};
		    for (const key in attributes) {
		      const attribute = attributes[key];
		      result[attribute.field || key] = this.attributeToSQL(attribute, options);
		    }
		    return result;
		  }
		  /**
		   * Generates an SQL query that removes a foreign key from a table.
		   *
		   * @param  {string} tableName  The name of the table.
		   * @param  {string} foreignKey The name of the foreign key constraint.
		   * @returns {string}            The generated sql query.
		   * @private
		   */
		  dropForeignKeyQuery(tableName, foreignKey) {
		    return (0, import_join_sql_fragments.joinSQLFragments)([
		      "ALTER TABLE",
		      this.quoteTable(tableName),
		      "DROP FOREIGN KEY",
		      this.quoteIdentifier(foreignKey),
		      ";"
		    ]);
		  }
		  _getBeforeSelectAttributesFragment(options) {
		    let fragment = "";
		    const MINIMUM_EXECUTION_TIME_VALUE = 0;
		    const MAXIMUM_EXECUTION_TIME_VALUE = 4294967295;
		    if (options.maxExecutionTimeHintMs != null) {
		      if (Number.isSafeInteger(options.maxExecutionTimeHintMs) && options.maxExecutionTimeHintMs >= MINIMUM_EXECUTION_TIME_VALUE && options.maxExecutionTimeHintMs <= MAXIMUM_EXECUTION_TIME_VALUE) {
		        fragment += ` /*+ MAX_EXECUTION_TIME(${options.maxExecutionTimeHintMs}) */`;
		      } else {
		        throw new Error(`maxExecutionTimeMs must be between ${MINIMUM_EXECUTION_TIME_VALUE} and ${MAXIMUM_EXECUTION_TIME_VALUE}, but it is ${(0, import_node_util.inspect)(options.maxExecutionTimeHintMs)}`);
		      }
		    }
		    return fragment;
		  }
		}
		
		return queryGenerator$7;
	}

	var queryGeneratorTypescript$6;
	var hasRequiredQueryGeneratorTypescript$6;

	function requireQueryGeneratorTypescript$6 () {
		if (hasRequiredQueryGeneratorTypescript$6) return queryGeneratorTypescript$6;
		hasRequiredQueryGeneratorTypescript$6 = 1;
		var __defProp = Object.defineProperty;
		var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
		var __getOwnPropNames = Object.getOwnPropertyNames;
		var __hasOwnProp = Object.prototype.hasOwnProperty;
		var __export = (target, all) => {
		  for (var name in all)
		    __defProp(target, name, { get: all[name], enumerable: true });
		};
		var __copyProps = (to, from, except, desc) => {
		  if (from && typeof from === "object" || typeof from === "function") {
		    for (let key of __getOwnPropNames(from))
		      if (!__hasOwnProp.call(to, key) && key !== except)
		        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
		  }
		  return to;
		};
		var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
		var query_generator_typescript_exports = {};
		__export(query_generator_typescript_exports, {
		  MariaDbQueryGeneratorTypeScript: () => MariaDbQueryGeneratorTypeScript
		});
		queryGeneratorTypescript$6 = __toCommonJS(query_generator_typescript_exports);
		var import_check = requireCheck();
		var import_join_sql_fragments = joinSqlFragments;
		var import_string = string$2;
		var import_query_generator_typescript = requireQueryGeneratorTypescript$8();
		var import_query_generator = requireQueryGenerator$7();
		const REMOVE_INDEX_QUERY_SUPPORTED_OPTIONS = /* @__PURE__ */ new Set(["ifExists"]);
		class MariaDbQueryGeneratorTypeScript extends import_query_generator.MySqlQueryGenerator {
		  showConstraintsQuery(tableName, options) {
		    const table = this.extractTableDetails(tableName);
		    return (0, import_join_sql_fragments.joinSQLFragments)([
		      "SELECT c.CONSTRAINT_CATALOG AS constraintCatalog,",
		      "c.CONSTRAINT_SCHEMA AS constraintSchema,",
		      "c.CONSTRAINT_NAME AS constraintName,",
		      "c.CONSTRAINT_TYPE AS constraintType,",
		      "c.TABLE_SCHEMA AS tableSchema,",
		      "c.TABLE_NAME AS tableName,",
		      "kcu.COLUMN_NAME AS columnNames,",
		      "kcu.REFERENCED_TABLE_NAME AS referencedTableName,",
		      "kcu.REFERENCED_COLUMN_NAME AS referencedColumnNames,",
		      "r.DELETE_RULE AS deleteAction,",
		      "r.UPDATE_RULE AS updateAction,",
		      "ch.CHECK_CLAUSE AS definition",
		      "FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS c",
		      "LEFT JOIN INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS r ON c.CONSTRAINT_CATALOG = r.CONSTRAINT_CATALOG",
		      "AND c.CONSTRAINT_SCHEMA = r.CONSTRAINT_SCHEMA AND c.CONSTRAINT_NAME = r.CONSTRAINT_NAME AND c.TABLE_NAME = r.TABLE_NAME",
		      "LEFT JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE kcu ON r.CONSTRAINT_CATALOG = kcu.CONSTRAINT_CATALOG",
		      "AND r.CONSTRAINT_SCHEMA = kcu.CONSTRAINT_SCHEMA AND r.CONSTRAINT_NAME = kcu.CONSTRAINT_NAME AND r.TABLE_NAME = kcu.TABLE_NAME",
		      "LEFT JOIN INFORMATION_SCHEMA.CHECK_CONSTRAINTS ch ON c.CONSTRAINT_CATALOG = ch.CONSTRAINT_CATALOG",
		      "AND c.CONSTRAINT_SCHEMA = ch.CONSTRAINT_SCHEMA AND c.CONSTRAINT_NAME = ch.CONSTRAINT_NAME",
		      `WHERE c.TABLE_NAME = ${this.escape(table.tableName)}`,
		      `AND c.TABLE_SCHEMA = ${this.escape(table.schema)}`,
		      (options == null ? void 0 : options.constraintName) ? `AND c.CONSTRAINT_NAME = ${this.escape(options.constraintName)}` : "",
		      "ORDER BY c.CONSTRAINT_NAME"
		    ]);
		  }
		  removeIndexQuery(tableName, indexNameOrAttributes, options) {
		    if (options) {
		      (0, import_check.rejectInvalidOptions)(
		        "removeIndexQuery",
		        this.dialect.name,
		        import_query_generator_typescript.REMOVE_INDEX_QUERY_SUPPORTABLE_OPTIONS,
		        REMOVE_INDEX_QUERY_SUPPORTED_OPTIONS,
		        options
		      );
		    }
		    let indexName;
		    if (Array.isArray(indexNameOrAttributes)) {
		      const table = this.extractTableDetails(tableName);
		      indexName = (0, import_string.generateIndexName)(table, { fields: indexNameOrAttributes });
		    } else {
		      indexName = indexNameOrAttributes;
		    }
		    return (0, import_join_sql_fragments.joinSQLFragments)([
		      "DROP INDEX",
		      (options == null ? void 0 : options.ifExists) ? "IF EXISTS" : "",
		      this.quoteIdentifier(indexName),
		      "ON",
		      this.quoteTable(tableName)
		    ]);
		  }
		  jsonPathExtractionQuery(sqlExpression, path, unquote) {
		    const sql = super.jsonPathExtractionQuery(sqlExpression, path, unquote);
		    if (unquote) {
		      return sql;
		    }
		    return `json_compact(${sql})`;
		  }
		}
		
		return queryGeneratorTypescript$6;
	}

	var queryGenerator$6;
	var hasRequiredQueryGenerator$6;

	function requireQueryGenerator$6 () {
		if (hasRequiredQueryGenerator$6) return queryGenerator$6;
		hasRequiredQueryGenerator$6 = 1;
		var __defProp = Object.defineProperty;
		var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
		var __getOwnPropNames = Object.getOwnPropertyNames;
		var __hasOwnProp = Object.prototype.hasOwnProperty;
		var __export = (target, all) => {
		  for (var name in all)
		    __defProp(target, name, { get: all[name], enumerable: true });
		};
		var __copyProps = (to, from, except, desc) => {
		  if (from && typeof from === "object" || typeof from === "function") {
		    for (let key of __getOwnPropNames(from))
		      if (!__hasOwnProp.call(to, key) && key !== except)
		        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
		  }
		  return to;
		};
		var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
		var query_generator_exports = {};
		__export(query_generator_exports, {
		  MariaDbQueryGenerator: () => MariaDbQueryGenerator
		});
		queryGenerator$6 = __toCommonJS(query_generator_exports);
		var import_data_types_utils = requireDataTypesUtils();
		var import_join_sql_fragments = joinSqlFragments;
		var import_query_generator_typescript = requireQueryGeneratorTypescript$6();
		class MariaDbQueryGenerator extends import_query_generator_typescript.MariaDbQueryGeneratorTypeScript {
		  _getTechnicalSchemaNames() {
		    return ["MYSQL", "INFORMATION_SCHEMA", "PERFORMANCE_SCHEMA", "mysql", "information_schema", "performance_schema"];
		  }
		  _getBeforeSelectAttributesFragment(_options) {
		    return "";
		  }
		  addColumnQuery(table, key, dataType, options = {}) {
		    const ifNotExists = options.ifNotExists ? "IF NOT EXISTS" : "";
		    dataType = {
		      ...dataType,
		      type: (0, import_data_types_utils.normalizeDataType)(dataType.type, this.dialect)
		    };
		    return (0, import_join_sql_fragments.joinSQLFragments)([
		      "ALTER TABLE",
		      this.quoteTable(table),
		      "ADD",
		      ifNotExists,
		      this.quoteIdentifier(key),
		      this.attributeToSQL(dataType, {
		        context: "addColumn",
		        tableName: table,
		        foreignKey: key
		      }),
		      ";"
		    ]);
		  }
		  removeColumnQuery(tableName, attributeName, options = {}) {
		    const ifExists = options.ifExists ? "IF EXISTS" : "";
		    return (0, import_join_sql_fragments.joinSQLFragments)([
		      "ALTER TABLE",
		      this.quoteTable(tableName),
		      "DROP",
		      ifExists,
		      this.quoteIdentifier(attributeName),
		      ";"
		    ]);
		  }
		}
		
		return queryGenerator$6;
	}

	var queryInterface$7;
	var hasRequiredQueryInterface$7;

	function requireQueryInterface$7 () {
		if (hasRequiredQueryInterface$7) return queryInterface$7;
		hasRequiredQueryInterface$7 = 1;
		var __defProp = Object.defineProperty;
		var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
		var __getOwnPropNames = Object.getOwnPropertyNames;
		var __hasOwnProp = Object.prototype.hasOwnProperty;
		var __export = (target, all) => {
		  for (var name in all)
		    __defProp(target, name, { get: all[name], enumerable: true });
		};
		var __copyProps = (to, from, except, desc) => {
		  if (from && typeof from === "object" || typeof from === "function") {
		    for (let key of __getOwnPropNames(from))
		      if (!__hasOwnProp.call(to, key) && key !== except)
		        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
		  }
		  return to;
		};
		var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
		var query_interface_exports = {};
		__export(query_interface_exports, {
		  MariaDbQueryInterface: () => MariaDbQueryInterface
		});
		queryInterface$7 = __toCommonJS(query_interface_exports);
		var import_object = object$1;
		var import_sql = sql;
		const { AbstractQueryInterface } = queryInterface$8;
		const { QueryTypes } = queryTypes;
		class MariaDbQueryInterface extends AbstractQueryInterface {
		  /**
		   * A wrapper that fixes MariaDb's inability to cleanly remove columns from existing tables if they have a foreign key constraint.
		   *
		   * @override
		   */
		  async removeColumn(tableName, columnName, options = import_object.EMPTY_OBJECT) {
		    const [results] = await this.sequelize.queryRaw(
		      this.queryGenerator.getForeignKeyQuery(tableName, columnName),
		      { raw: true, ...options }
		    );
		    if (results.length > 0 && results[0].constraintName !== "PRIMARY") {
		      await Promise.all(results.map((constraint) => this.sequelize.queryRaw(
		        this.queryGenerator.dropForeignKeyQuery(tableName, constraint.constraintName),
		        { raw: true, ...options }
		      )));
		    }
		    return this.sequelize.queryRaw(
		      this.queryGenerator.removeColumnQuery(tableName, columnName),
		      { raw: true, ...options }
		    );
		  }
		  /**
		   * @override
		   */
		  async upsert(tableName, insertValues, updateValues, where, options) {
		    if (options.bind) {
		      (0, import_sql.assertNoReservedBind)(options.bind);
		    }
		    const modelDefinition = options.model.modelDefinition;
		    options = { ...options };
		    options.type = QueryTypes.UPSERT;
		    options.updateOnDuplicate = Object.keys(updateValues);
		    options.upsertKeys = Array.from(modelDefinition.primaryKeysAttributeNames, (pkAttrName) => modelDefinition.getColumnName(pkAttrName));
		    const { query, bind } = this.queryGenerator.insertQuery(tableName, insertValues, (0, import_object.getObjectFromMap)(modelDefinition.attributes), options);
		    delete options.replacements;
		    options.bind = (0, import_sql.combineBinds)(options.bind, bind);
		    return this.sequelize.queryRaw(query, options);
		  }
		}
		
		return queryInterface$7;
	}

	var mariadb;
	var hasRequiredMariadb;

	function requireMariadb () {
		if (hasRequiredMariadb) return mariadb;
		hasRequiredMariadb = 1;
		var __create = Object.create;
		var __defProp = Object.defineProperty;
		var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
		var __getOwnPropNames = Object.getOwnPropertyNames;
		var __getProtoOf = Object.getPrototypeOf;
		var __hasOwnProp = Object.prototype.hasOwnProperty;
		var __export = (target, all) => {
		  for (var name in all)
		    __defProp(target, name, { get: all[name], enumerable: true });
		};
		var __copyProps = (to, from, except, desc) => {
		  if (from && typeof from === "object" || typeof from === "function") {
		    for (let key of __getOwnPropNames(from))
		      if (!__hasOwnProp.call(to, key) && key !== except)
		        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
		  }
		  return to;
		};
		var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
		  // If the importer is in node compatibility mode or this is not an ESM
		  // file that has been converted to a CommonJS file using a Babel-
		  // compatible transform (i.e. "__esModule" has not been set), then set
		  // "default" to the CommonJS "module.exports" for node compatibility.
		  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
		  mod
		));
		var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
		var mariadb_exports = {};
		__export(mariadb_exports, {
		  MariaDbDialect: () => MariaDbDialect
		});
		mariadb = __toCommonJS(mariadb_exports);
		var import_sql = sql;
		var import_abstract = requireAbstract();
		var import_data_types_db = requireDataTypes_db$1();
		var import_mysql_utils = requireMysqlUtils();
		var import_connection_manager = requireConnectionManager$7();
		var DataTypes = __toESM(requireDataTypes$6());
		var import_query = requireQuery$7();
		var import_query_generator = requireQueryGenerator$6();
		var import_query_interface = requireQueryInterface$7();
		const numericOptions = {
		  zerofill: true,
		  unsigned: true
		};
		class MariaDbDialect extends import_abstract.AbstractDialect {
		  static supports = import_abstract.AbstractDialect.extendSupport(
		    {
		      "VALUES ()": true,
		      "LIMIT ON UPDATE": true,
		      lock: true,
		      forShare: "LOCK IN SHARE MODE",
		      settingIsolationLevelDuringTransaction: false,
		      schemas: true,
		      inserts: {
		        ignoreDuplicates: " IGNORE",
		        updateOnDuplicate: " ON DUPLICATE KEY UPDATE"
		      },
		      index: {
		        collate: false,
		        length: true,
		        parser: true,
		        type: true,
		        using: 1
		      },
		      constraints: {
		        foreignKeyChecksDisableable: true,
		        removeOptions: { ifExists: true }
		      },
		      indexViaAlter: true,
		      indexHints: true,
		      dataTypes: {
		        COLLATE_BINARY: true,
		        GEOMETRY: true,
		        INTS: numericOptions,
		        FLOAT: { ...numericOptions, scaleAndPrecision: true },
		        REAL: { ...numericOptions, scaleAndPrecision: true },
		        DOUBLE: { ...numericOptions, scaleAndPrecision: true },
		        DECIMAL: numericOptions,
		        JSON: true
		      },
		      REGEXP: true,
		      jsonOperations: true,
		      jsonExtraction: {
		        unquoted: true,
		        quoted: true
		      },
		      globalTimeZoneConfig: true
		    }
		  );
		  TICK_CHAR_LEFT = "`";
		  TICK_CHAR_RIGHT = "`";
		  defaultVersion = "10.4.30";
		  // minimum supported version
		  dataTypesDocumentationUrl = "https://mariadb.com/kb/en/library/resultset/#field-types";
		  queryGenerator;
		  connectionManager;
		  queryInterface;
		  Query = import_query.MariaDbQuery;
		  constructor(sequelize) {
		    super(sequelize, DataTypes, "mariadb");
		    this.connectionManager = new import_connection_manager.MariaDbConnectionManager(this, sequelize);
		    this.queryGenerator = new import_query_generator.MariaDbQueryGenerator({
		      dialect: this,
		      sequelize
		    });
		    this.queryInterface = new import_query_interface.MariaDbQueryInterface(
		      sequelize,
		      this.queryGenerator
		    );
		    (0, import_data_types_db.registerMySqlDbDataTypeParsers)(this);
		    this.registerDataTypeParser(["BIGINT"], (value) => {
		      return value.string();
		    });
		  }
		  createBindCollector() {
		    return (0, import_sql.createUnspecifiedOrderedBindCollector)();
		  }
		  escapeString(value) {
		    return (0, import_mysql_utils.escapeMysqlString)(value);
		  }
		  canBackslashEscape() {
		    return true;
		  }
		  getDefaultSchema() {
		    return this.sequelize.options.database ?? "";
		  }
		  static getDefaultPort() {
		    return 3306;
		  }
		}
		
		return mariadb;
	}

	var connectionManager$6;
	var hasRequiredConnectionManager$6;

	function requireConnectionManager$6 () {
		if (hasRequiredConnectionManager$6) return connectionManager$6;
		hasRequiredConnectionManager$6 = 1;
		var __defProp = Object.defineProperty;
		var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
		var __getOwnPropNames = Object.getOwnPropertyNames;
		var __hasOwnProp = Object.prototype.hasOwnProperty;
		var __export = (target, all) => {
		  for (var name in all)
		    __defProp(target, name, { get: all[name], enumerable: true });
		};
		var __copyProps = (to, from, except, desc) => {
		  if (from && typeof from === "object" || typeof from === "function") {
		    for (let key of __getOwnPropNames(from))
		      if (!__hasOwnProp.call(to, key) && key !== except)
		        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
		  }
		  return to;
		};
		var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
		var connection_manager_exports = {};
		__export(connection_manager_exports, {
		  MsSqlConnectionManager: () => MsSqlConnectionManager
		});
		connectionManager$6 = __toCommonJS(connection_manager_exports);
		var import_errors = errors;
		var import_check = requireCheck();
		var import_logger = requireLogger();
		var import_connection_manager = requireConnectionManager$8();
		var import_async_queue = asyncQueue;
		const debug = import_logger.logger.debugContext("connection:mssql");
		const debugTedious = import_logger.logger.debugContext("connection:mssql:tedious");
		class MsSqlConnectionManager extends import_connection_manager.AbstractConnectionManager {
		  lib;
		  constructor(dialect, sequelize) {
		    super(dialect, sequelize);
		    this.lib = this._loadDialectModule("tedious");
		  }
		  async connect(config) {
		    const options = {
		      port: typeof config.port === "string" ? Number.parseInt(config.port, 10) : config.port,
		      database: config.database,
		      trustServerCertificate: true
		    };
		    const authentication = {
		      type: "default",
		      options: {
		        userName: config.username || void 0,
		        password: config.password || void 0
		      }
		    };
		    if (config.dialectOptions) {
		      if ((0, import_check.isPlainObject)(config.dialectOptions.options) && config.dialectOptions.options.instanceName) {
		        delete options.port;
		      }
		      if (config.dialectOptions.authentication) {
		        Object.assign(authentication, config.dialectOptions.authentication);
		      }
		      Object.assign(options, config.dialectOptions.options);
		    }
		    const connectionConfig = {
		      server: config.host,
		      authentication,
		      options
		    };
		    try {
		      return await new Promise((resolve, reject) => {
		        const connection = new this.lib.Connection(connectionConfig);
		        if (connection.state === connection.STATE.INITIALIZED) {
		          connection.connect();
		        }
		        connection.queue = new import_async_queue.AsyncQueue();
		        connection.lib = this.lib;
		        const connectHandler = (error) => {
		          connection.removeListener("end", endHandler);
		          connection.removeListener("error", errorHandler);
		          if (error) {
		            return void reject(error);
		          }
		          debug("connection acquired");
		          resolve(connection);
		        };
		        const endHandler = () => {
		          connection.removeListener("connect", connectHandler);
		          connection.removeListener("error", errorHandler);
		          reject(new Error("Connection was closed by remote server"));
		        };
		        const errorHandler = (error) => {
		          connection.removeListener("connect", connectHandler);
		          connection.removeListener("end", endHandler);
		          reject(error);
		        };
		        connection.once("error", errorHandler);
		        connection.once("end", endHandler);
		        connection.once("connect", connectHandler);
		        connection.on("error", (error) => {
		          if ((0, import_check.isErrorWithStringCode)(error) && (error.code === "ESOCKET" || error.code === "ECONNRESET")) {
		            void this.pool.destroy(connection);
		          }
		        });
		        if (config.dialectOptions && config.dialectOptions.debug) {
		          connection.on("debug", debugTedious.log.bind(debugTedious));
		        }
		      });
		    } catch (error) {
		      (0, import_check.assertCaughtError)(error);
		      if (!(0, import_check.isErrorWithStringCode)(error)) {
		        throw new import_errors.ConnectionError(error);
		      }
		      switch (error.code) {
		        case "ESOCKET":
		          if (error.message.includes("connect EHOSTUNREACH")) {
		            throw new import_errors.HostNotReachableError(error);
		          }
		          if (error.message.includes("connect ENETUNREACH")) {
		            throw new import_errors.HostNotReachableError(error);
		          }
		          if (error.message.includes("connect EADDRNOTAVAIL")) {
		            throw new import_errors.HostNotReachableError(error);
		          }
		          if (error.message.includes("getaddrinfo ENOTFOUND")) {
		            throw new import_errors.HostNotFoundError(error);
		          }
		          if (error.message.includes("connect ECONNREFUSED")) {
		            throw new import_errors.ConnectionRefusedError(error);
		          }
		          throw new import_errors.ConnectionError(error);
		        case "ER_ACCESS_DENIED_ERROR":
		        case "ELOGIN":
		          throw new import_errors.AccessDeniedError(error);
		        case "EINVAL":
		          throw new import_errors.InvalidConnectionError(error);
		        default:
		          throw new import_errors.ConnectionError(error);
		      }
		    }
		  }
		  async disconnect(connection) {
		    if (connection.closed) {
		      return;
		    }
		    connection.queue.close();
		    await new Promise((resolve) => {
		      connection.on("end", resolve);
		      connection.close();
		      debug("connection closed");
		    });
		  }
		  validate(connection) {
		    return connection && (connection.loggedIn || connection.state.name === "LoggedIn");
		  }
		}
		
		return connectionManager$6;
	}

	var _baseExtremum;
	var hasRequired_baseExtremum;

	function require_baseExtremum () {
		if (hasRequired_baseExtremum) return _baseExtremum;
		hasRequired_baseExtremum = 1;
		var isSymbol = requireIsSymbol();

		/**
		 * The base implementation of methods like `_.max` and `_.min` which accepts a
		 * `comparator` to determine the extremum value.
		 *
		 * @private
		 * @param {Array} array The array to iterate over.
		 * @param {Function} iteratee The iteratee invoked per iteration.
		 * @param {Function} comparator The comparator used to compare values.
		 * @returns {*} Returns the extremum value.
		 */
		function baseExtremum(array, iteratee, comparator) {
		  var index = -1,
		      length = array.length;

		  while (++index < length) {
		    var value = array[index],
		        current = iteratee(value);

		    if (current != null && (computed === undefined
		          ? (current === current && !isSymbol(current))
		          : comparator(current, computed)
		        )) {
		      var computed = current,
		          result = value;
		    }
		  }
		  return result;
		}

		_baseExtremum = baseExtremum;
		return _baseExtremum;
	}

	/**
	 * The base implementation of `_.gt` which doesn't coerce arguments.
	 *
	 * @private
	 * @param {*} value The value to compare.
	 * @param {*} other The other value to compare.
	 * @returns {boolean} Returns `true` if `value` is greater than `other`,
	 *  else `false`.
	 */

	var _baseGt;
	var hasRequired_baseGt;

	function require_baseGt () {
		if (hasRequired_baseGt) return _baseGt;
		hasRequired_baseGt = 1;
		function baseGt(value, other) {
		  return value > other;
		}

		_baseGt = baseGt;
		return _baseGt;
	}

	var maxBy_1;
	var hasRequiredMaxBy;

	function requireMaxBy () {
		if (hasRequiredMaxBy) return maxBy_1;
		hasRequiredMaxBy = 1;
		var baseExtremum = require_baseExtremum(),
		    baseGt = require_baseGt(),
		    baseIteratee = _baseIteratee;

		/**
		 * This method is like `_.max` except that it accepts `iteratee` which is
		 * invoked for each element in `array` to generate the criterion by which
		 * the value is ranked. The iteratee is invoked with one argument: (value).
		 *
		 * @static
		 * @memberOf _
		 * @since 4.0.0
		 * @category Math
		 * @param {Array} array The array to iterate over.
		 * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
		 * @returns {*} Returns the maximum value.
		 * @example
		 *
		 * var objects = [{ 'n': 1 }, { 'n': 2 }];
		 *
		 * _.maxBy(objects, function(o) { return o.n; });
		 * // => { 'n': 2 }
		 *
		 * // The `_.property` iteratee shorthand.
		 * _.maxBy(objects, 'n');
		 * // => { 'n': 2 }
		 */
		function maxBy(array, iteratee) {
		  return (array && array.length)
		    ? baseExtremum(array, baseIteratee(iteratee), baseGt)
		    : undefined;
		}

		maxBy_1 = maxBy;
		return maxBy_1;
	}

	var dataTypes$5;
	var hasRequiredDataTypes$5;

	function requireDataTypes$5 () {
		if (hasRequiredDataTypes$5) return dataTypes$5;
		hasRequiredDataTypes$5 = 1;
		var __create = Object.create;
		var __defProp = Object.defineProperty;
		var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
		var __getOwnPropNames = Object.getOwnPropertyNames;
		var __getProtoOf = Object.getPrototypeOf;
		var __hasOwnProp = Object.prototype.hasOwnProperty;
		var __export = (target, all) => {
		  for (var name in all)
		    __defProp(target, name, { get: all[name], enumerable: true });
		};
		var __copyProps = (to, from, except, desc) => {
		  if (from && typeof from === "object" || typeof from === "function") {
		    for (let key of __getOwnPropNames(from))
		      if (!__hasOwnProp.call(to, key) && key !== except)
		        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
		  }
		  return to;
		};
		var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
		  // If the importer is in node compatibility mode or this is not an ESM
		  // file that has been converted to a CommonJS file using a Babel-
		  // compatible transform (i.e. "__esModule" has not been set), then set
		  // "default" to the CommonJS "module.exports" for node compatibility.
		  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
		  mod
		));
		var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
		var data_types_exports = {};
		__export(data_types_exports, {
		  BIGINT: () => BIGINT,
		  BLOB: () => BLOB,
		  BOOLEAN: () => BOOLEAN,
		  DATE: () => DATE,
		  DECIMAL: () => DECIMAL,
		  DOUBLE: () => DOUBLE,
		  ENUM: () => ENUM,
		  FLOAT: () => FLOAT,
		  INTEGER: () => INTEGER,
		  JSON: () => JSON,
		  MEDIUMINT: () => MEDIUMINT,
		  NOW: () => NOW,
		  SMALLINT: () => SMALLINT,
		  STRING: () => STRING,
		  TEXT: () => TEXT,
		  TINYINT: () => TINYINT,
		  UUID: () => UUID
		});
		dataTypes$5 = __toCommonJS(data_types_exports);
		var import_node_util = __toESM(require$$0$1);
		var import_maxBy = __toESM(requireMaxBy());
		var import_errors = errors;
		var BaseTypes = __toESM(requireDataTypes$8());
		function removeUnsupportedIntegerOptions(dataType, dialect) {
		  if (dataType.options.length != null) {
		    dialect.warnDataTypeIssue(`${dialect.name} does not support '${dataType.constructor.name}' with length specified. This options is ignored.`);
		    delete dataType.options.length;
		  }
		}
		class BLOB extends BaseTypes.BLOB {
		  _checkOptionSupport(dialect) {
		    super._checkOptionSupport(dialect);
		    if (this.options.length != null && this.options.length.toLowerCase() !== "tiny") {
		      dialect.warnDataTypeIssue(`${dialect.name}: ${this.getDataTypeId()} cannot limit its size beyond length=tiny. This option is ignored, in favor of the highest size possible.`);
		    }
		  }
		  toSql() {
		    if (this.options.length && this.options.length.toLowerCase() === "tiny") {
		      return "VARBINARY(256)";
		    }
		    return "VARBINARY(MAX)";
		  }
		}
		class STRING extends BaseTypes.STRING {
		  toSql() {
		    return `NVARCHAR(${this.options.length ?? 255})`;
		  }
		}
		class TEXT extends BaseTypes.TEXT {
		  _checkOptionSupport(dialect) {
		    super._checkOptionSupport(dialect);
		    if (this.options.length != null && this.options.length.toLowerCase() !== "tiny") {
		      dialect.warnDataTypeIssue(`${dialect.name}: ${this.getDataTypeId()} cannot limit its size beyond length=tiny. This option is ignored, in favor of the highest size possible.`);
		    }
		  }
		  toSql() {
		    if (this.options.length && this.options.length.toLowerCase() === "tiny") {
		      return "NVARCHAR(256)";
		    }
		    return "NVARCHAR(MAX)";
		  }
		}
		class BOOLEAN extends BaseTypes.BOOLEAN {
		  escape(value) {
		    return value ? "1" : "0";
		  }
		  toBindableValue(value) {
		    return value ? 1 : 0;
		  }
		  toSql() {
		    return "BIT";
		  }
		}
		class UUID extends BaseTypes.UUID {
		  toSql() {
		    return "UNIQUEIDENTIFIER";
		  }
		}
		class NOW extends BaseTypes.NOW {
		  toSql() {
		    return "GETDATE()";
		  }
		}
		class DATE extends BaseTypes.DATE {
		  toSql() {
		    if (this.options.precision != null) {
		      return `DATETIMEOFFSET(${this.options.precision})`;
		    }
		    return "DATETIMEOFFSET";
		  }
		}
		class TINYINT extends BaseTypes.TINYINT {
		  _checkOptionSupport(dialect) {
		    super._checkOptionSupport(dialect);
		    removeUnsupportedIntegerOptions(this, dialect);
		  }
		  // TODO: add check constraint between -128 & 127 inclusive when the unsigned option is false
		  toSql() {
		    if (!this.options.unsigned) {
		      return "SMALLINT";
		    }
		    return "TINYINT";
		  }
		}
		class SMALLINT extends BaseTypes.SMALLINT {
		  _checkOptionSupport(dialect) {
		    super._checkOptionSupport(dialect);
		    removeUnsupportedIntegerOptions(this, dialect);
		  }
		  // TODO: add check constraint between 0 & 65535 inclusive when the unsigned option is true
		  toSql() {
		    if (this.options.unsigned) {
		      return "INT";
		    }
		    return "SMALLINT";
		  }
		}
		class MEDIUMINT extends BaseTypes.MEDIUMINT {
		  _checkOptionSupport(dialect) {
		    super._checkOptionSupport(dialect);
		    removeUnsupportedIntegerOptions(this, dialect);
		  }
		  // TODO: unsigned: add check constraint between 0 & 16777215 inclusive
		  // TODO: signed: add check constraint between -8388608 & 8388607 inclusive
		  toSql() {
		    return "INTEGER";
		  }
		}
		class INTEGER extends BaseTypes.INTEGER {
		  _checkOptionSupport(dialect) {
		    super._checkOptionSupport(dialect);
		    removeUnsupportedIntegerOptions(this, dialect);
		  }
		  // TODO:add check constraint between 0 & 4294967295 inclusive when the unsigned option is true
		  toSql() {
		    if (this.options.unsigned) {
		      return "BIGINT";
		    }
		    return "INTEGER";
		  }
		}
		class BIGINT extends BaseTypes.BIGINT {
		  _checkOptionSupport(dialect) {
		    super._checkOptionSupport(dialect);
		    removeUnsupportedIntegerOptions(this, dialect);
		  }
		}
		class FLOAT extends BaseTypes.FLOAT {
		  // TODO: add check constraint >= 0 if unsigned is true
		  getNumberSqlTypeName() {
		    return "REAL";
		  }
		}
		class DOUBLE extends BaseTypes.DOUBLE {
		  // TODO: add check constraint >= 0 if unsigned is true
		}
		class DECIMAL extends BaseTypes.DECIMAL {
		  // TODO: add check constraint >= 0 if unsigned is true
		}
		class JSON extends BaseTypes.JSON {
		  // TODO: add constraint
		  //  https://learn.microsoft.com/en-us/sql/t-sql/functions/isjson-transact-sql?view=sql-server-ver16
		  toBindableValue(value) {
		    return globalThis.JSON.stringify(value);
		  }
		  parseDatabaseValue(value) {
		    if (typeof value !== "string") {
		      throw new import_errors.BaseError(`DataTypes.JSON received a non-string value from the database, which it cannot parse: ${import_node_util.default.inspect(value)}.`);
		    }
		    try {
		      return globalThis.JSON.parse(value);
		    } catch (error) {
		      throw new import_errors.BaseError(`DataTypes.JSON received a value from the database that it not valid JSON: ${import_node_util.default.inspect(value)}.`, { cause: error });
		    }
		  }
		  toSql() {
		    return "NVARCHAR(MAX)";
		  }
		}
		class ENUM extends BaseTypes.ENUM {
		  // TODO: add constraint
		  toSql() {
		    var _a;
		    const minLength = ((_a = (0, import_maxBy.default)(this.options.values, (value) => value.length)) == null ? void 0 : _a.length) ?? 0;
		    return `NVARCHAR(${Math.max(minLength, 255)})`;
		  }
		}
		
		return dataTypes$5;
	}

	var dataTypes_db;
	var hasRequiredDataTypes_db;

	function requireDataTypes_db () {
		if (hasRequiredDataTypes_db) return dataTypes_db;
		hasRequiredDataTypes_db = 1;
		var __create = Object.create;
		var __defProp = Object.defineProperty;
		var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
		var __getOwnPropNames = Object.getOwnPropertyNames;
		var __getProtoOf = Object.getPrototypeOf;
		var __hasOwnProp = Object.prototype.hasOwnProperty;
		var __export = (target, all) => {
		  for (var name in all)
		    __defProp(target, name, { get: all[name], enumerable: true });
		};
		var __copyProps = (to, from, except, desc) => {
		  if (from && typeof from === "object" || typeof from === "function") {
		    for (let key of __getOwnPropNames(from))
		      if (!__hasOwnProp.call(to, key) && key !== except)
		        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
		  }
		  return to;
		};
		var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
		  // If the importer is in node compatibility mode or this is not an ESM
		  // file that has been converted to a CommonJS file using a Babel-
		  // compatible transform (i.e. "__esModule" has not been set), then set
		  // "default" to the CommonJS "module.exports" for node compatibility.
		  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
		  mod
		));
		var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
		var data_types_db_exports = {};
		__export(data_types_db_exports, {
		  registerMsSqlDbDataTypeParsers: () => registerMsSqlDbDataTypeParsers
		});
		dataTypes_db = __toCommonJS(data_types_db_exports);
		var import_dayjs = __toESM(dayjs_minExports);
		function registerMsSqlDbDataTypeParsers(dialect) {
		  dialect.registerDataTypeParser(["GUIDN"], (value) => {
		    if (typeof value !== "string") {
		      return value;
		    }
		    return value.toLowerCase();
		  });
		  dialect.registerDataTypeParser(["TIMEN"], (value) => {
		    if (value instanceof Date) {
		      return import_dayjs.default.utc(value).format("HH:mm:ss.SSS");
		    }
		    return value;
		  });
		  dialect.registerDataTypeParser(["DATETIMEOFFSETN"], (value) => {
		    if (value instanceof Date) {
		      return import_dayjs.default.utc(value).format("YYYY-MM-DD HH:mm:ss.SSS+00");
		    }
		    return value;
		  });
		  dialect.registerDataTypeParser(["DATEN"], (value) => {
		    if (value instanceof Date) {
		      return import_dayjs.default.utc(value).format("YYYY-MM-DD");
		    }
		    return value;
		  });
		  dialect.registerDataTypeParser(["DECIMAL", "DECIMALN"], (value) => {
		    return String(value);
		  });
		}
		
		return dataTypes_db;
	}

	var queryGeneratorTypescript$5;
	var hasRequiredQueryGeneratorTypescript$5;

	function requireQueryGeneratorTypescript$5 () {
		if (hasRequiredQueryGeneratorTypescript$5) return queryGeneratorTypescript$5;
		hasRequiredQueryGeneratorTypescript$5 = 1;
		var __defProp = Object.defineProperty;
		var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
		var __getOwnPropNames = Object.getOwnPropertyNames;
		var __hasOwnProp = Object.prototype.hasOwnProperty;
		var __export = (target, all) => {
		  for (var name in all)
		    __defProp(target, name, { get: all[name], enumerable: true });
		};
		var __copyProps = (to, from, except, desc) => {
		  if (from && typeof from === "object" || typeof from === "function") {
		    for (let key of __getOwnPropNames(from))
		      if (!__hasOwnProp.call(to, key) && key !== except)
		        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
		  }
		  return to;
		};
		var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
		var query_generator_typescript_exports = {};
		__export(query_generator_typescript_exports, {
		  MsSqlQueryGeneratorTypeScript: () => MsSqlQueryGeneratorTypeScript
		});
		queryGeneratorTypescript$5 = __toCommonJS(query_generator_typescript_exports);
		var import_check = requireCheck();
		var import_join_sql_fragments = joinSqlFragments;
		var import_json = requireJson();
		var import_string = string$2;
		var import_query_generator = requireQueryGenerator$8();
		var import_query_generator_typescript = requireQueryGeneratorTypescript$8();
		const REMOVE_INDEX_QUERY_SUPPORTED_OPTIONS = /* @__PURE__ */ new Set(["ifExists"]);
		class MsSqlQueryGeneratorTypeScript extends import_query_generator.AbstractQueryGenerator {
		  describeTableQuery(tableName) {
		    const table = this.extractTableDetails(tableName);
		    return (0, import_join_sql_fragments.joinSQLFragments)([
		      "SELECT",
		      `c.COLUMN_NAME AS 'Name',`,
		      `c.DATA_TYPE AS 'Type',`,
		      `c.CHARACTER_MAXIMUM_LENGTH AS 'Length',`,
		      `c.IS_NULLABLE as 'IsNull',`,
		      `COLUMN_DEFAULT AS 'Default',`,
		      `pk.CONSTRAINT_TYPE AS 'Constraint',`,
		      `COLUMNPROPERTY(OBJECT_ID(c.TABLE_SCHEMA+'.'+c.TABLE_NAME), c.COLUMN_NAME, 'IsIdentity') as 'IsIdentity',`,
		      `CAST(prop.value AS NVARCHAR) AS 'Comment'`,
		      "FROM",
		      "INFORMATION_SCHEMA.TABLES t",
		      "INNER JOIN",
		      "INFORMATION_SCHEMA.COLUMNS c ON t.TABLE_NAME = c.TABLE_NAME AND t.TABLE_SCHEMA = c.TABLE_SCHEMA",
		      "LEFT JOIN (SELECT tc.table_schema, tc.table_name,",
		      "cu.column_name, tc.CONSTRAINT_TYPE",
		      "FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS tc",
		      "JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE  cu",
		      "ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name",
		      "and tc.constraint_name=cu.constraint_name",
		      `and tc.CONSTRAINT_TYPE='PRIMARY KEY') pk`,
		      "ON pk.table_schema=c.table_schema",
		      "AND pk.table_name=c.table_name",
		      "AND pk.column_name=c.column_name",
		      "INNER JOIN sys.columns AS sc",
		      `ON sc.object_id = object_id(t.table_schema + '.' + t.table_name) AND sc.name = c.column_name`,
		      "LEFT JOIN sys.extended_properties prop ON prop.major_id = sc.object_id",
		      "AND prop.minor_id = sc.column_id",
		      `AND prop.name = 'MS_Description'`,
		      `WHERE t.TABLE_NAME = ${this.escape(table.tableName)}`,
		      `AND t.TABLE_SCHEMA = ${this.escape(table.schema)}`
		    ]);
		  }
		  showConstraintsQuery(tableName, options) {
		    const table = this.extractTableDetails(tableName);
		    return (0, import_join_sql_fragments.joinSQLFragments)([
		      "SELECT DB_NAME() AS constraintCatalog,",
		      "s.[name] AS constraintSchema,",
		      "c.constraintName,",
		      `REPLACE(LEFT(c.constraintType, CHARINDEX('_CONSTRAINT', c.constraintType) - 1), '_', ' ') AS constraintType,`,
		      "DB_NAME() AS tableCatalog,",
		      "s.[name] AS tableSchema,",
		      "t.[name] AS tableName,",
		      "c.columnNames,",
		      "c.referencedTableName,",
		      "c.referencedColumnNames,",
		      "c.deleteAction,",
		      "c.updateAction,",
		      "c.definition",
		      "FROM sys.tables t INNER JOIN sys.schemas s ON t.schema_id = s.schema_id",
		      "INNER JOIN (",
		      "SELECT [name] AS constraintName, [type_desc] AS constraintType, [parent_object_id] AS constraintTableId, null AS columnNames, null AS referencedTableName",
		      ", null AS referencedColumnNames, null AS deleteAction, null AS updateAction, null AS definition FROM sys.key_constraints UNION ALL",
		      "SELECT [name] AS constraintName, [type_desc] AS constraintType, [parent_object_id] AS constraintTableId, null AS columnNames, null AS referencedTableName",
		      ", null AS referencedColumnNames, null AS deleteAction, null AS updateAction, [definition] FROM sys.check_constraints c UNION ALL",
		      "SELECT [name] AS constraintName, [type_desc] AS constraintType, [parent_object_id] AS constraintTableId, null AS columnNames, null AS referencedTableName",
		      ", null AS referencedColumnNames, null AS deleteAction, null AS updateAction, [definition] FROM sys.default_constraints UNION ALL",
		      "SELECT k.[name] AS constraintName, k.[type_desc] AS constraintType, k.[parent_object_id] AS constraintTableId, fcol.[name] AS columnNames",
		      ", OBJECT_NAME(k.[referenced_object_id]) AS referencedTableName, rcol.[name] AS referencedColumnNames, k.[delete_referential_action_desc] AS deleteAction",
		      ", k.[update_referential_action_desc] AS updateAction, null AS definition FROM sys.foreign_keys k INNER JOIN sys.foreign_key_columns c ON k.[object_id] = c.constraint_object_id",
		      "INNER JOIN sys.columns fcol ON c.parent_column_id = fcol.column_id AND c.parent_object_id = fcol.object_id",
		      "INNER JOIN sys.columns rcol ON c.referenced_column_id = rcol.column_id AND c.referenced_object_id = rcol.object_id",
		      ") c ON t.object_id = c.constraintTableId",
		      `WHERE s.name = ${this.escape(table.schema)} AND t.name = ${this.escape(table.tableName)}`,
		      (options == null ? void 0 : options.constraintName) ? `AND c.constraintName = ${this.escape(options.constraintName)}` : "",
		      "ORDER BY c.constraintName"
		    ]);
		  }
		  showIndexesQuery(tableName) {
		    const table = this.extractTableDetails(tableName);
		    const objectId = (table == null ? void 0 : table.schema) ? `${table.schema}.${table.tableName}` : `${table.tableName}`;
		    return (0, import_join_sql_fragments.joinSQLFragments)([
		      "SELECT",
		      "I.[name] AS [index_name],",
		      "I.[type_desc] AS [index_type],",
		      "C.[name] AS [column_name],",
		      "IC.[is_descending_key],",
		      "IC.[is_included_column],",
		      "I.[is_unique],",
		      "I.[is_primary_key],",
		      "I.[is_unique_constraint]",
		      "FROM sys.indexes I",
		      "INNER JOIN sys.index_columns IC ON IC.index_id = I.index_id AND IC.object_id = I.object_id",
		      "INNER JOIN sys.columns C ON IC.object_id = C.object_id AND IC.column_id = C.column_id",
		      `WHERE I.[object_id] = OBJECT_ID(${this.escape(objectId)}) ORDER BY I.[name];`
		    ]);
		  }
		  removeIndexQuery(tableName, indexNameOrAttributes, options) {
		    if (options) {
		      (0, import_check.rejectInvalidOptions)(
		        "removeIndexQuery",
		        this.dialect.name,
		        import_query_generator_typescript.REMOVE_INDEX_QUERY_SUPPORTABLE_OPTIONS,
		        REMOVE_INDEX_QUERY_SUPPORTED_OPTIONS,
		        options
		      );
		    }
		    let indexName;
		    if (Array.isArray(indexNameOrAttributes)) {
		      const table = this.extractTableDetails(tableName);
		      indexName = (0, import_string.generateIndexName)(table, { fields: indexNameOrAttributes });
		    } else {
		      indexName = indexNameOrAttributes;
		    }
		    return (0, import_join_sql_fragments.joinSQLFragments)([
		      "DROP INDEX",
		      (options == null ? void 0 : options.ifExists) ? "IF EXISTS" : "",
		      this.quoteIdentifier(indexName),
		      "ON",
		      this.quoteTable(tableName)
		    ]);
		  }
		  getForeignKeyQuery(tableName, columnName) {
		    const table = this.extractTableDetails(tableName);
		    const catalogName = this.sequelize.config.database;
		    const escapedCatalogName = this.escape(catalogName);
		    return (0, import_join_sql_fragments.joinSQLFragments)([
		      `SELECT OBJ.NAME AS 'constraintName',`,
		      `${escapedCatalogName} AS 'constraintCatalog',`,
		      `SCHEMA_NAME(OBJ.SCHEMA_ID) AS 'constraintSchema',`,
		      `TB.NAME AS 'tableName',`,
		      `SCHEMA_NAME(TB.SCHEMA_ID) AS 'tableSchema',`,
		      `${escapedCatalogName} AS 'tableCatalog',`,
		      `COL.NAME AS 'columnName',`,
		      `SCHEMA_NAME(RTB.SCHEMA_ID) AS 'referencedTableSchema',`,
		      `${escapedCatalogName} AS 'referencedTableCatalog',`,
		      `RTB.NAME AS 'referencedTableName',`,
		      `RCOL.NAME AS 'referencedColumnName'`,
		      "FROM sys.foreign_key_columns FKC",
		      "INNER JOIN sys.objects OBJ ON OBJ.OBJECT_ID = FKC.CONSTRAINT_OBJECT_ID",
		      "INNER JOIN sys.tables TB ON TB.OBJECT_ID = FKC.PARENT_OBJECT_ID",
		      "INNER JOIN sys.columns COL ON COL.COLUMN_ID = PARENT_COLUMN_ID AND COL.OBJECT_ID = TB.OBJECT_ID",
		      "INNER JOIN sys.tables RTB ON RTB.OBJECT_ID = FKC.REFERENCED_OBJECT_ID",
		      "INNER JOIN sys.columns RCOL ON RCOL.COLUMN_ID = REFERENCED_COLUMN_ID AND RCOL.OBJECT_ID = RTB.OBJECT_ID",
		      `WHERE TB.NAME = ${this.escape(table.tableName)}`,
		      columnName && `AND COL.NAME = ${this.escape(columnName)}`,
		      `AND SCHEMA_NAME(TB.SCHEMA_ID) = ${this.escape(table.schema)}`
		    ]);
		  }
		  jsonPathExtractionQuery(sqlExpression, path, unquote) {
		    if (!unquote) {
		      throw new Error(`JSON Paths are not supported in ${this.dialect.name} without unquoting the JSON value.`);
		    }
		    return `JSON_VALUE(${sqlExpression}, ${this.escape((0, import_json.buildJsonPath)(path))})`;
		  }
		  formatUnquoteJson(arg, options) {
		    return `JSON_VALUE(${this.escape(arg, options)})`;
		  }
		  versionQuery() {
		    return `DECLARE @ms_ver NVARCHAR(20);
SET @ms_ver = REVERSE(CONVERT(NVARCHAR(20), SERVERPROPERTY('ProductVersion')));
SELECT REVERSE(SUBSTRING(@ms_ver, CHARINDEX('.', @ms_ver)+1, 20)) AS 'version'`;
		  }
		}
		
		return queryGeneratorTypescript$5;
	}

	var queryGenerator$5;
	var hasRequiredQueryGenerator$5;

	function requireQueryGenerator$5 () {
		if (hasRequiredQueryGenerator$5) return queryGenerator$5;
		hasRequiredQueryGenerator$5 = 1;
		var __defProp = Object.defineProperty;
		var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
		var __getOwnPropNames = Object.getOwnPropertyNames;
		var __hasOwnProp = Object.prototype.hasOwnProperty;
		var __export = (target, all) => {
		  for (var name in all)
		    __defProp(target, name, { get: all[name], enumerable: true });
		};
		var __copyProps = (to, from, except, desc) => {
		  if (from && typeof from === "object" || typeof from === "function") {
		    for (let key of __getOwnPropNames(from))
		      if (!__hasOwnProp.call(to, key) && key !== except)
		        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
		  }
		  return to;
		};
		var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
		var query_generator_exports = {};
		__export(query_generator_exports, {
		  MsSqlQueryGenerator: () => MsSqlQueryGenerator
		});
		queryGenerator$5 = __toCommonJS(query_generator_exports);
		var import_col = col_1;
		var import_literal = literal_1;
		var import_check = requireCheck();
		var import_join_sql_fragments = joinSqlFragments;
		var import_query_builder_utils = requireQueryBuilderUtils();
		var import_string = string$2;
		var import_data_types_utils = requireDataTypesUtils();
		var import_query_generator = requireQueryGenerator$8();
		const _ = lodashExports;
		const DataTypes = dataTypes$8;
		const { TableHints } = tableHints;
		const { MsSqlQueryGeneratorTypeScript } = requireQueryGeneratorTypescript$5();
		const randomBytes = require$$0$3.randomBytes;
		const { Op } = operators;
		function throwMethodUndefined(methodName) {
		  throw new Error(`The method "${methodName}" is not defined! Please add it to your sql dialect.`);
		}
		const CREATE_DATABASE_QUERY_SUPPORTED_OPTIONS = /* @__PURE__ */ new Set(["collate"]);
		const CREATE_SCHEMA_QUERY_SUPPORTED_OPTIONS = /* @__PURE__ */ new Set();
		const CREATE_TABLE_QUERY_SUPPORTED_OPTIONS = /* @__PURE__ */ new Set(["uniqueKeys"]);
		const DROP_TABLE_QUERY_SUPPORTED_OPTIONS = /* @__PURE__ */ new Set();
		const ADD_COLUMN_QUERY_SUPPORTED_OPTIONS = /* @__PURE__ */ new Set();
		class MsSqlQueryGenerator extends MsSqlQueryGeneratorTypeScript {
		  createDatabaseQuery(databaseName, options) {
		    if (options) {
		      (0, import_check.rejectInvalidOptions)(
		        "createDatabaseQuery",
		        this.dialect.name,
		        import_query_generator.CREATE_DATABASE_QUERY_SUPPORTABLE_OPTIONS,
		        CREATE_DATABASE_QUERY_SUPPORTED_OPTIONS,
		        options
		      );
		    }
		    const collation = (options == null ? void 0 : options.collate) ? `COLLATE ${this.escape(options.collate)}` : "";
		    return [
		      "IF NOT EXISTS (SELECT * FROM sys.databases WHERE name =",
		      this.escape(databaseName),
		      ")",
		      "BEGIN",
		      "CREATE DATABASE",
		      this.quoteIdentifier(databaseName),
		      `${collation};`,
		      "END;"
		    ].join(" ");
		  }
		  dropDatabaseQuery(databaseName) {
		    return [
		      "IF EXISTS (SELECT * FROM sys.databases WHERE name =",
		      this.escape(databaseName),
		      ")",
		      "BEGIN",
		      "DROP DATABASE",
		      this.quoteIdentifier(databaseName),
		      ";",
		      "END;"
		    ].join(" ");
		  }
		  listDatabasesQuery() {
		    return `SELECT name FROM sys.databases;`;
		  }
		  createSchemaQuery(schema, options) {
		    if (options) {
		      (0, import_check.rejectInvalidOptions)(
		        "createSchemaQuery",
		        this.dialect.name,
		        import_query_generator.CREATE_SCHEMA_QUERY_SUPPORTABLE_OPTIONS,
		        CREATE_SCHEMA_QUERY_SUPPORTED_OPTIONS,
		        options
		      );
		    }
		    return [
		      "IF NOT EXISTS (SELECT schema_name",
		      "FROM information_schema.schemata",
		      "WHERE schema_name =",
		      this.escape(schema),
		      ")",
		      "BEGIN",
		      "EXEC sp_executesql N'CREATE SCHEMA",
		      this.quoteIdentifier(schema),
		      ";'",
		      "END;"
		    ].join(" ");
		  }
		  dropSchemaQuery(schema) {
		    const quotedSchema = this.escape(schema);
		    return [
		      "IF EXISTS (SELECT schema_name",
		      "FROM information_schema.schemata",
		      "WHERE schema_name =",
		      quotedSchema,
		      ")",
		      "BEGIN",
		      "DECLARE @id INT, @ms_sql NVARCHAR(2000);",
		      "DECLARE @cascade TABLE (",
		      "id INT NOT NULL IDENTITY PRIMARY KEY,",
		      "ms_sql NVARCHAR(2000) NOT NULL );",
		      "INSERT INTO @cascade ( ms_sql )",
		      "SELECT CASE WHEN o.type IN ('F','PK')",
		      "THEN N'ALTER TABLE ['+ s.name + N'].[' + p.name + N'] DROP CONSTRAINT [' + o.name + N']'",
		      "ELSE N'DROP TABLE ['+ s.name + N'].[' + o.name + N']' END",
		      "FROM sys.objects o",
		      "JOIN sys.schemas s on o.schema_id = s.schema_id",
		      "LEFT OUTER JOIN sys.objects p on o.parent_object_id = p.object_id",
		      "WHERE o.type IN ('F', 'PK', 'U') AND s.name = ",
		      quotedSchema,
		      "ORDER BY o.type ASC;",
		      "SELECT TOP 1 @id = id, @ms_sql = ms_sql FROM @cascade ORDER BY id;",
		      "WHILE @id IS NOT NULL",
		      "BEGIN",
		      "BEGIN TRY EXEC sp_executesql @ms_sql; END TRY",
		      "BEGIN CATCH BREAK; THROW; END CATCH;",
		      "DELETE FROM @cascade WHERE id = @id;",
		      "SELECT @id = NULL, @ms_sql = NULL;",
		      "SELECT TOP 1 @id = id, @ms_sql = ms_sql FROM @cascade ORDER BY id;",
		      "END",
		      "EXEC sp_executesql N'DROP SCHEMA",
		      this.quoteIdentifier(schema),
		      ";'",
		      "END;"
		    ].join(" ");
		  }
		  listSchemasQuery(options) {
		    const schemasToSkip = ["INFORMATION_SCHEMA", "dbo", "guest", "sys", "archive"];
		    if (options == null ? void 0 : options.skip) {
		      schemasToSkip.push(...options.skip);
		    }
		    return [
		      'SELECT "name" as "schema_name" FROM sys.schemas as s',
		      'WHERE "s"."name" NOT IN (',
		      schemasToSkip.map((schema) => this.escape(schema)).join(", "),
		      `) AND "s"."name" NOT LIKE 'db_%'`
		    ].join(" ");
		  }
		  createTableQuery(tableName, attributes, options) {
		    if (options) {
		      (0, import_check.rejectInvalidOptions)(
		        "createTableQuery",
		        this.dialect.name,
		        import_query_generator.CREATE_TABLE_QUERY_SUPPORTABLE_OPTIONS,
		        CREATE_TABLE_QUERY_SUPPORTED_OPTIONS,
		        options
		      );
		    }
		    const primaryKeys = [];
		    const foreignKeys = {};
		    const attributesClauseParts = [];
		    let commentStr = "";
		    for (const attr in attributes) {
		      if (Object.hasOwn(attributes, attr)) {
		        let dataType = attributes[attr];
		        let match;
		        if (dataType.includes("COMMENT ")) {
		          const commentMatch = dataType.match(/^(.+) (COMMENT.*)$/);
		          const commentText = commentMatch[2].replace("COMMENT", "").trim();
		          commentStr += this.commentTemplate(commentText, tableName, attr);
		          dataType = commentMatch[1];
		        }
		        if (dataType.includes("PRIMARY KEY")) {
		          primaryKeys.push(attr);
		          if (dataType.includes("REFERENCES")) {
		            match = dataType.match(/^(.+) (REFERENCES.*)$/);
		            attributesClauseParts.push(`${this.quoteIdentifier(attr)} ${match[1].replace("PRIMARY KEY", "")}`);
		            foreignKeys[attr] = match[2];
		          } else {
		            attributesClauseParts.push(`${this.quoteIdentifier(attr)} ${dataType.replace("PRIMARY KEY", "")}`);
		          }
		        } else if (dataType.includes("REFERENCES")) {
		          match = dataType.match(/^(.+) (REFERENCES.*)$/);
		          attributesClauseParts.push(`${this.quoteIdentifier(attr)} ${match[1]}`);
		          foreignKeys[attr] = match[2];
		        } else {
		          attributesClauseParts.push(`${this.quoteIdentifier(attr)} ${dataType}`);
		        }
		      }
		    }
		    const pkString = primaryKeys.map((pk) => this.quoteIdentifier(pk)).join(", ");
		    if (options == null ? void 0 : options.uniqueKeys) {
		      _.each(options.uniqueKeys, (columns, indexName) => {
		        if (typeof indexName !== "string") {
		          indexName = (0, import_string.generateIndexName)(tableName, columns);
		        }
		        attributesClauseParts.push(`CONSTRAINT ${this.quoteIdentifier(indexName)} UNIQUE (${columns.fields.map((field) => this.quoteIdentifier(field)).join(", ")})`);
		      });
		    }
		    if (pkString.length > 0) {
		      attributesClauseParts.push(`PRIMARY KEY (${pkString})`);
		    }
		    for (const fkey in foreignKeys) {
		      if (Object.hasOwn(foreignKeys, fkey)) {
		        attributesClauseParts.push(`FOREIGN KEY (${this.quoteIdentifier(fkey)}) ${foreignKeys[fkey]}`);
		      }
		    }
		    const quotedTableName = this.quoteTable(tableName);
		    return (0, import_join_sql_fragments.joinSQLFragments)([
		      `IF OBJECT_ID(${this.escape(quotedTableName)}, 'U') IS NULL`,
		      `CREATE TABLE ${quotedTableName} (${attributesClauseParts.join(", ")})`,
		      ";",
		      commentStr
		    ]);
		  }
		  renameTableQuery(before, after) {
		    return `EXEC sp_rename ${this.quoteTable(before)}, ${this.quoteTable(after)};`;
		  }
		  showTablesQuery() {
		    return "SELECT TABLE_NAME, TABLE_SCHEMA FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE';";
		  }
		  tableExistsQuery(table) {
		    const tableName = table.tableName || table;
		    const schemaName = table.schema || "dbo";
		    return `SELECT TABLE_NAME, TABLE_SCHEMA FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = ${this.escape(tableName)} AND TABLE_SCHEMA = ${this.escape(schemaName)}`;
		  }
		  dropTableQuery(tableName, options) {
		    if (options) {
		      (0, import_check.rejectInvalidOptions)(
		        "dropTableQuery",
		        this.dialect.name,
		        import_query_generator.DROP_TABLE_QUERY_SUPPORTABLE_OPTIONS,
		        DROP_TABLE_QUERY_SUPPORTED_OPTIONS,
		        options
		      );
		    }
		    const quoteTbl = this.quoteTable(tableName);
		    return (0, import_join_sql_fragments.joinSQLFragments)([
		      `IF OBJECT_ID('${quoteTbl}', 'U') IS NOT NULL`,
		      "DROP TABLE",
		      quoteTbl,
		      ";"
		    ]);
		  }
		  addColumnQuery(table, key, dataType, options) {
		    if (options) {
		      (0, import_check.rejectInvalidOptions)(
		        "addColumnQuery",
		        this.dialect.name,
		        import_query_generator.ADD_COLUMN_QUERY_SUPPORTABLE_OPTIONS,
		        ADD_COLUMN_QUERY_SUPPORTED_OPTIONS,
		        options
		      );
		    }
		    dataType = {
		      ...dataType,
		      // TODO: attributeToSQL SHOULD be using attributes in addColumnQuery
		      //       but instead we need to pass the key along as the field here
		      field: key,
		      type: (0, import_data_types_utils.normalizeDataType)(dataType.type, this.dialect)
		    };
		    let commentStr = "";
		    if (dataType.comment && _.isString(dataType.comment)) {
		      commentStr = this.commentTemplate(dataType.comment, table, key);
		      delete dataType.comment;
		    }
		    return (0, import_join_sql_fragments.joinSQLFragments)([
		      "ALTER TABLE",
		      this.quoteTable(table),
		      "ADD",
		      this.quoteIdentifier(key),
		      this.attributeToSQL(dataType, { context: "addColumn" }),
		      ";",
		      commentStr
		    ]);
		  }
		  commentTemplate(comment, table, column) {
		    return ` EXEC sp_addextendedproperty @name = N'MS_Description', @value = ${this.escape(comment)}, @level0type = N'Schema', @level0name = 'dbo', @level1type = N'Table', @level1name = ${this.quoteTable(table)}, @level2type = N'Column', @level2name = ${this.quoteIdentifier(column)};`;
		  }
		  removeColumnQuery(tableName, attributeName, options = {}) {
		    const ifExists = options.ifExists ? "IF EXISTS" : "";
		    return (0, import_join_sql_fragments.joinSQLFragments)([
		      "ALTER TABLE",
		      this.quoteTable(tableName),
		      "DROP COLUMN",
		      ifExists,
		      this.quoteIdentifier(attributeName),
		      ";"
		    ]);
		  }
		  changeColumnQuery(tableName, attributes) {
		    const attrString = [];
		    const constraintString = [];
		    let commentString = "";
		    for (const attributeName in attributes) {
		      const quotedAttrName = this.quoteIdentifier(attributeName);
		      let definition = attributes[attributeName];
		      if (definition.includes("COMMENT ")) {
		        const commentMatch = definition.match(/^(.+) (COMMENT.*)$/);
		        const commentText = commentMatch[2].replace("COMMENT", "").trim();
		        commentString += this.commentTemplate(commentText, tableName, attributeName);
		        definition = commentMatch[1];
		      }
		      if (definition.includes("REFERENCES")) {
		        constraintString.push(`FOREIGN KEY (${quotedAttrName}) ${definition.replace(/.+?(?=REFERENCES)/, "")}`);
		      } else {
		        attrString.push(`${quotedAttrName} ${definition}`);
		      }
		    }
		    return (0, import_join_sql_fragments.joinSQLFragments)([
		      "ALTER TABLE",
		      this.quoteTable(tableName),
		      attrString.length && `ALTER COLUMN ${attrString.join(", ")}`,
		      constraintString.length && `ADD ${constraintString.join(", ")}`,
		      ";",
		      commentString
		    ]);
		  }
		  renameColumnQuery(tableName, attrBefore, attributes) {
		    const newName = Object.keys(attributes)[0];
		    return (0, import_join_sql_fragments.joinSQLFragments)([
		      "EXEC sp_rename",
		      `'${this.quoteTable(tableName)}.${attrBefore}',`,
		      `'${newName}',`,
		      "'COLUMN'",
		      ";"
		    ]);
		  }
		  bulkInsertQuery(tableName, attrValueHashes, options, attributes) {
		    const quotedTable = this.quoteTable(tableName);
		    options = options || {};
		    attributes = attributes || {};
		    const tuples = [];
		    const allAttributes = [];
		    const allQueries = [];
		    let needIdentityInsertWrapper = false;
		    let outputFragment = "";
		    if (options.returning) {
		      const returnValues = this.generateReturnValues(attributes, options);
		      outputFragment = returnValues.outputFragment;
		    }
		    const emptyQuery = `INSERT INTO ${quotedTable}${outputFragment} DEFAULT VALUES`;
		    for (const attrValueHash of attrValueHashes) {
		      const fields = Object.keys(attrValueHash);
		      const firstAttr = attributes[fields[0]];
		      if (fields.length === 1 && firstAttr && firstAttr.autoIncrement && attrValueHash[fields[0]] === null) {
		        allQueries.push(emptyQuery);
		        continue;
		      }
		      _.forOwn(attrValueHash, (value, key) => {
		        if (value !== null && attributes[key] && attributes[key].autoIncrement) {
		          needIdentityInsertWrapper = true;
		        }
		        if (!allAttributes.includes(key)) {
		          if (value === null && attributes[key] && attributes[key].autoIncrement) {
		            return;
		          }
		          allAttributes.push(key);
		        }
		      });
		    }
		    if (allAttributes.length > 0) {
		      for (const attrValueHash of attrValueHashes) {
		        tuples.push(`(${allAttributes.map((key) => {
	          var _a;
	          return this.escape(attrValueHash[key] ?? null, {
	            type: (_a = attributes[key]) == null ? void 0 : _a.type,
	            replacements: options.replacements
	          });
	        }).join(",")})`);
		      }
		      const quotedAttributes = allAttributes.map((attr) => this.quoteIdentifier(attr)).join(",");
		      allQueries.push((tupleStr) => `INSERT INTO ${quotedTable} (${quotedAttributes})${outputFragment} VALUES ${tupleStr}`);
		    }
		    const commands = [];
		    let offset = 0;
		    while (offset < Math.max(tuples.length, 1)) {
		      const tupleStr = tuples.slice(offset, Math.min(tuples.length, offset + 1e3));
		      let generatedQuery = allQueries.map((v) => typeof v === "string" ? v : v(tupleStr)).join(";");
		      if (needIdentityInsertWrapper) {
		        generatedQuery = `SET IDENTITY_INSERT ${quotedTable} ON; ${generatedQuery}; SET IDENTITY_INSERT ${quotedTable} OFF`;
		      }
		      commands.push(generatedQuery);
		      offset += 1e3;
		    }
		    return `${commands.join(";")};`;
		  }
		  updateQuery(tableName, attrValueHash, where, options = {}, attributes) {
		    const sql = super.updateQuery(tableName, attrValueHash, where, options, attributes);
		    if (options.limit) {
		      const updateArgs = `UPDATE TOP(${this.escape(options.limit, void 0, options)})`;
		      sql.query = sql.query.replace("UPDATE", updateArgs);
		    }
		    return sql;
		  }
		  upsertQuery(tableName, insertValues, updateValues, where, model, options) {
		    const targetTableAlias = this.quoteTable(`${tableName}_target`);
		    const sourceTableAlias = this.quoteTable(`${tableName}_source`);
		    const primaryKeysColumns = [];
		    const identityColumns = [];
		    const uniqueColumns = [];
		    const tableNameQuoted = this.quoteTable(tableName);
		    let needIdentityInsertWrapper = false;
		    const modelDefinition = model.modelDefinition;
		    for (const attribute of modelDefinition.attributes.values()) {
		      if (attribute.primaryKey) {
		        primaryKeysColumns.push(attribute.columnName);
		      }
		      if (attribute.autoIncrement) {
		        identityColumns.push(attribute.columnName);
		      }
		    }
		    for (const index of model.getIndexes()) {
		      if (index.unique && index.fields) {
		        for (const field of index.fields) {
		          const columnName = typeof field === "string" ? field : field.name || field.attribute;
		          if (!uniqueColumns.includes(columnName) && modelDefinition.attributes.has(columnName)) {
		            uniqueColumns.push(columnName);
		          }
		        }
		      }
		    }
		    const updateKeys = Object.keys(updateValues);
		    const insertKeys = Object.keys(insertValues);
		    const insertKeysQuoted = insertKeys.map((key) => this.quoteIdentifier(key)).join(", ");
		    const insertValuesEscaped = insertKeys.map((key) => {
		      return this.escape(insertValues[key], options);
		    }).join(", ");
		    const sourceTableQuery = `VALUES(${insertValuesEscaped})`;
		    let joinCondition;
		    for (const key of identityColumns) {
		      if (insertValues[key] && insertValues[key] !== null) {
		        needIdentityInsertWrapper = true;
		      }
		    }
		    const clauses = where[Op.or].filter((clause) => {
		      let valid = true;
		      for (const key of Object.keys(clause)) {
		        if (clause[key] == null) {
		          valid = false;
		          break;
		        }
		      }
		      return valid;
		    });
		    const getJoinSnippet = (array) => {
		      return array.map((key) => {
		        key = this.quoteIdentifier(key);
		        return `${targetTableAlias}.${key} = ${sourceTableAlias}.${key}`;
		      });
		    };
		    if (clauses.length === 0) {
		      throw new Error("Primary Key or Unique key should be passed to upsert query");
		    } else {
		      for (const key in clauses) {
		        const keys = Object.keys(clauses[key]);
		        const columnName = modelDefinition.getColumnNameLoose(keys[0]);
		        if (primaryKeysColumns.includes(columnName)) {
		          joinCondition = getJoinSnippet(primaryKeysColumns).join(" AND ");
		          break;
		        }
		      }
		      if (!joinCondition) {
		        joinCondition = getJoinSnippet(uniqueColumns).join(" AND ");
		      }
		    }
		    const filteredUpdateClauses = updateKeys.filter((key) => !identityColumns.includes(key)).map((key) => {
		      const value = this.escape(updateValues[key], void 0, options);
		      key = this.quoteIdentifier(key);
		      return `${targetTableAlias}.${key} = ${value}`;
		    });
		    const updateSnippet = filteredUpdateClauses.length > 0 ? `WHEN MATCHED THEN UPDATE SET ${filteredUpdateClauses.join(", ")}` : "";
		    const insertSnippet = `(${insertKeysQuoted}) VALUES(${insertValuesEscaped})`;
		    let query = `MERGE INTO ${tableNameQuoted} WITH(HOLDLOCK) AS ${targetTableAlias} USING (${sourceTableQuery}) AS ${sourceTableAlias}(${insertKeysQuoted}) ON ${joinCondition}`;
		    query += ` ${updateSnippet} WHEN NOT MATCHED THEN INSERT ${insertSnippet} OUTPUT $action, INSERTED.*;`;
		    if (needIdentityInsertWrapper) {
		      query = `SET IDENTITY_INSERT ${tableNameQuoted} ON; ${query} SET IDENTITY_INSERT ${tableNameQuoted} OFF;`;
		    }
		    return query;
		  }
		  truncateTableQuery(tableName) {
		    return `TRUNCATE TABLE ${this.quoteTable(tableName)}`;
		  }
		  deleteQuery(tableName, where, options = {}, model) {
		    const table = this.quoteTable(tableName);
		    const escapeOptions = { ...options, model };
		    const whereClause = this.whereQuery(where, escapeOptions);
		    return (0, import_join_sql_fragments.joinSQLFragments)([
		      "DELETE",
		      options.limit && `TOP(${this.escape(options.limit, escapeOptions)})`,
		      "FROM",
		      table,
		      whereClause,
		      ";",
		      "SELECT @@ROWCOUNT AS AFFECTEDROWS",
		      ";"
		    ]);
		  }
		  attributeToSQL(attribute, options) {
		    if (!_.isPlainObject(attribute)) {
		      attribute = {
		        type: attribute
		      };
		    }
		    if (attribute.references && attribute.Model && this.isSameTable(attribute.Model.tableName, attribute.references.table)) {
		      this.sequelize.log("MSSQL does not support self-referential constraints, we will remove it but we recommend restructuring your query");
		      attribute.onDelete = "";
		      attribute.onUpdate = "";
		    }
		    let template;
		    if (attribute.type instanceof DataTypes.ENUM) {
		      template = attribute.type.toSql({ dialect: this.dialect });
		      template += ` CHECK (${this.quoteIdentifier(attribute.field)} IN(${attribute.type.options.values.map((value) => {
	        return this.escape(value, options);
	      }).join(", ")}))`;
		      return template;
		    }
		    template = (0, import_data_types_utils.attributeTypeToSql)(attribute.type, { dialect: this.dialect });
		    if (attribute.allowNull === false) {
		      template += " NOT NULL";
		    } else if (!attribute.primaryKey && !(0, import_query_builder_utils.defaultValueSchemable)(attribute.defaultValue)) {
		      template += " NULL";
		    }
		    if (attribute.autoIncrement) {
		      template += " IDENTITY(1,1)";
		    }
		    if (attribute.type !== "TEXT" && attribute.type._binary !== true && (0, import_query_builder_utils.defaultValueSchemable)(attribute.defaultValue)) {
		      template += ` DEFAULT ${this.escape(attribute.defaultValue, { ...options, type: attribute.type })}`;
		    }
		    if (attribute.unique === true && ((options == null ? void 0 : options.context) !== "changeColumn" || this.dialect.supports.alterColumn.unique)) {
		      template += " UNIQUE";
		    }
		    if (attribute.primaryKey) {
		      template += " PRIMARY KEY";
		    }
		    if ((!options || !options.withoutForeignKeyConstraints) && attribute.references) {
		      template += ` REFERENCES ${this.quoteTable(attribute.references.table)}`;
		      if (attribute.references.key) {
		        template += ` (${this.quoteIdentifier(attribute.references.key)})`;
		      } else {
		        template += ` (${this.quoteIdentifier("id")})`;
		      }
		      if (attribute.onDelete) {
		        template += ` ON DELETE ${attribute.onDelete.toUpperCase()}`;
		      }
		      if (attribute.onUpdate) {
		        template += ` ON UPDATE ${attribute.onUpdate.toUpperCase()}`;
		      }
		    }
		    if (attribute.comment && typeof attribute.comment === "string") {
		      template += ` COMMENT ${attribute.comment}`;
		    }
		    return template;
		  }
		  attributesToSQL(attributes, options) {
		    const result = /* @__PURE__ */ Object.create(null);
		    const existingConstraints = [];
		    for (const key of Object.keys(attributes)) {
		      const attribute = { ...attributes[key] };
		      if (attribute.references) {
		        if (existingConstraints.includes(this.quoteTable(attribute.references.table))) {
		          attribute.onDelete = "";
		          attribute.onUpdate = "";
		        } else {
		          existingConstraints.push(this.quoteTable(attribute.references.table));
		          attribute.onUpdate = "";
		        }
		      }
		      if (key && !attribute.field) {
		        attribute.field = key;
		      }
		      result[attribute.field || key] = this.attributeToSQL(attribute, options);
		    }
		    return result;
		  }
		  createTrigger() {
		    throwMethodUndefined("createTrigger");
		  }
		  dropTrigger() {
		    throwMethodUndefined("dropTrigger");
		  }
		  renameTrigger() {
		    throwMethodUndefined("renameTrigger");
		  }
		  createFunction() {
		    throwMethodUndefined("createFunction");
		  }
		  dropFunction() {
		    throwMethodUndefined("dropFunction");
		  }
		  renameFunction() {
		    throwMethodUndefined("renameFunction");
		  }
		  getPrimaryKeyConstraintQuery(table, attributeName) {
		    const tableName = this.escape(table.tableName || table);
		    return (0, import_join_sql_fragments.joinSQLFragments)([
		      "SELECT K.TABLE_NAME AS tableName,",
		      "K.COLUMN_NAME AS columnName,",
		      "K.CONSTRAINT_NAME AS constraintName",
		      "FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS AS C",
		      "JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE AS K",
		      "ON C.TABLE_NAME = K.TABLE_NAME",
		      "AND C.CONSTRAINT_CATALOG = K.CONSTRAINT_CATALOG",
		      "AND C.CONSTRAINT_SCHEMA = K.CONSTRAINT_SCHEMA",
		      "AND C.CONSTRAINT_NAME = K.CONSTRAINT_NAME",
		      "WHERE C.CONSTRAINT_TYPE = 'PRIMARY KEY'",
		      `AND K.COLUMN_NAME = ${this.escape(attributeName)}`,
		      `AND K.TABLE_NAME = ${tableName}`,
		      ";"
		    ]);
		  }
		  dropForeignKeyQuery(tableName, foreignKey) {
		    return (0, import_join_sql_fragments.joinSQLFragments)([
		      "ALTER TABLE",
		      this.quoteTable(tableName),
		      "DROP",
		      this.quoteIdentifier(foreignKey)
		    ]);
		  }
		  getDefaultConstraintQuery(tableName, attributeName) {
		    const quotedTable = this.quoteTable(tableName);
		    return (0, import_join_sql_fragments.joinSQLFragments)([
		      "SELECT name FROM sys.default_constraints",
		      `WHERE PARENT_OBJECT_ID = OBJECT_ID('${quotedTable}', 'U')`,
		      `AND PARENT_COLUMN_ID = (SELECT column_id FROM sys.columns WHERE NAME = ('${attributeName}')`,
		      `AND object_id = OBJECT_ID('${quotedTable}', 'U'))`,
		      ";"
		    ]);
		  }
		  setIsolationLevelQuery() {
		  }
		  generateTransactionId() {
		    return randomBytes(10).toString("hex");
		  }
		  startTransactionQuery(transaction) {
		    if (transaction.parent) {
		      return `SAVE TRANSACTION ${this.quoteIdentifier(transaction.name)};`;
		    }
		    return "BEGIN TRANSACTION;";
		  }
		  commitTransactionQuery(transaction) {
		    if (transaction.parent) {
		      return;
		    }
		    return "COMMIT TRANSACTION;";
		  }
		  rollbackTransactionQuery(transaction) {
		    if (transaction.parent) {
		      return `ROLLBACK TRANSACTION ${this.quoteIdentifier(transaction.name)};`;
		    }
		    return "ROLLBACK TRANSACTION;";
		  }
		  selectFromTableFragment(options, model, attributes, tables, mainTableAs, where) {
		    this._throwOnEmptyAttributes(attributes, { modelName: model && model.name, as: mainTableAs });
		    if (options.maxExecutionTimeHintMs != null) {
		      throw new Error(`The maxExecutionTimeMs option is not supported by ${this.dialect.name}`);
		    }
		    return (0, import_join_sql_fragments.joinSQLFragments)([
		      "SELECT",
		      attributes.join(", "),
		      `FROM ${tables}`,
		      mainTableAs && `AS ${mainTableAs}`,
		      options.tableHint && TableHints[options.tableHint] && `WITH (${TableHints[options.tableHint]})`
		    ]);
		  }
		  addLimitAndOffset(options, model) {
		    const offset = options.offset || 0;
		    const isSubQuery = options.subQuery === void 0 ? options.hasIncludeWhere || options.hasIncludeRequired || options.hasMultiAssociation : options.subQuery;
		    let fragment = "";
		    let orders = {};
		    if (options.order) {
		      orders = this.getQueryOrders(options, model, isSubQuery);
		    }
		    if (options.limit || options.offset) {
		      if (!options.order || options.order.length === 0 || options.include && orders.subQueryOrder.length === 0) {
		        let primaryKey = model.primaryKeyField;
		        const tablePkFragment = `${this.quoteTable(options.tableAs || model.name)}.${this.quoteIdentifier(primaryKey)}`;
		        const aliasedAttribute = this._getAliasForFieldFromQueryOptions(primaryKey, options);
		        if (aliasedAttribute) {
		          const modelName = this.quoteIdentifier(options.tableAs || model.name);
		          const alias = this._getAliasForField(modelName, aliasedAttribute[1], options);
		          primaryKey = alias || aliasedAttribute[1];
		        }
		        if (!orders.mainQueryOrder || orders.mainQueryOrder.length === 0) {
		          fragment += ` ORDER BY ${tablePkFragment}`;
		        } else {
		          const orderFieldNames = (options.order || []).map((order) => {
		            const value = Array.isArray(order) ? order[0] : order;
		            if (value instanceof import_col.Col) {
		              return value.identifiers[0];
		            }
		            if (value instanceof import_literal.Literal) {
		              return value.val;
		            }
		            return value;
		          });
		          const primaryKeyFieldAlreadyPresent = orderFieldNames.includes(
		            primaryKey.col || primaryKey
		          );
		          if (!primaryKeyFieldAlreadyPresent) {
		            fragment += options.order && !isSubQuery ? ", " : " ORDER BY ";
		            fragment += tablePkFragment;
		          }
		        }
		      }
		      if (options.offset || options.limit) {
		        fragment += ` OFFSET ${this.escape(offset, options)} ROWS`;
		      }
		      if (options.limit) {
		        fragment += ` FETCH NEXT ${this.escape(options.limit, options)} ROWS ONLY`;
		      }
		    }
		    return fragment;
		  }
		}
		
		return queryGenerator$5;
	}

	var queryInterface$6;
	var hasRequiredQueryInterface$6;

	function requireQueryInterface$6 () {
		if (hasRequiredQueryInterface$6) return queryInterface$6;
		hasRequiredQueryInterface$6 = 1;
		var __defProp = Object.defineProperty;
		var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
		var __getOwnPropNames = Object.getOwnPropertyNames;
		var __hasOwnProp = Object.prototype.hasOwnProperty;
		var __export = (target, all) => {
		  for (var name in all)
		    __defProp(target, name, { get: all[name], enumerable: true });
		};
		var __copyProps = (to, from, except, desc) => {
		  if (from && typeof from === "object" || typeof from === "function") {
		    for (let key of __getOwnPropNames(from))
		      if (!__hasOwnProp.call(to, key) && key !== except)
		        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
		  }
		  return to;
		};
		var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
		var query_interface_exports = {};
		__export(query_interface_exports, {
		  MsSqlQueryInterface: () => MsSqlQueryInterface
		});
		queryInterface$6 = __toCommonJS(query_interface_exports);
		var import_query_builder_utils = requireQueryBuilderUtils();
		var import_sql = sql;
		const _ = lodashExports;
		const { QueryTypes } = queryTypes;
		const { Op } = operators;
		const { AbstractQueryInterface } = queryInterface$8;
		class MsSqlQueryInterface extends AbstractQueryInterface {
		  /**
		  * A wrapper that fixes MSSQL's inability to cleanly remove columns from existing tables if they have a default constraint.
		  *
		  * @override
		  */
		  async removeColumn(tableName, attributeName, options) {
		    options = { raw: true, ...options };
		    const findConstraintSql = this.queryGenerator.getDefaultConstraintQuery(tableName, attributeName);
		    const [results0] = await this.sequelize.queryRaw(findConstraintSql, options);
		    if (results0.length > 0) {
		      const dropConstraintSql = this.queryGenerator.removeConstraintQuery(tableName, results0[0].name);
		      await this.sequelize.queryRaw(dropConstraintSql, options);
		    }
		    const findForeignKeySql = this.queryGenerator.getForeignKeyQuery(tableName, attributeName);
		    const [results] = await this.sequelize.queryRaw(findForeignKeySql, options);
		    if (results.length > 0) {
		      const dropForeignKeySql = this.queryGenerator.dropForeignKeyQuery(tableName, results[0].constraintName);
		      await this.sequelize.queryRaw(dropForeignKeySql, options);
		    }
		    const primaryKeyConstraintSql = this.queryGenerator.getPrimaryKeyConstraintQuery(tableName, attributeName);
		    const [result] = await this.sequelize.queryRaw(primaryKeyConstraintSql, options);
		    if (result.length > 0) {
		      const dropConstraintSql = this.queryGenerator.removeConstraintQuery(tableName, result[0].constraintName);
		      await this.sequelize.queryRaw(dropConstraintSql, options);
		    }
		    const removeSql = this.queryGenerator.removeColumnQuery(tableName, attributeName);
		    return this.sequelize.queryRaw(removeSql, options);
		  }
		  /**
		    * @override
		    */
		  async bulkInsert(tableName, records, options, attributes) {
		    if (records.length > 1e3 && !options.transaction) {
		      throw new Error(`MSSQL doesn't allow for inserting more than 1,000 rows at a time, so Sequelize executes the insert as multiple queries. Please run this in a transaction to ensure safe rollbacks`);
		    }
		    return super.bulkInsert(tableName, records, options, attributes);
		  }
		  /**
		   * @override
		   */
		  async upsert(tableName, insertValues, updateValues, where, options) {
		    if (options.bind) {
		      (0, import_sql.assertNoReservedBind)(options.bind);
		    }
		    const model = options.model;
		    const wheres = [];
		    options = { ...options };
		    if (!(0, import_query_builder_utils.isWhereEmpty)(where)) {
		      wheres.push(where);
		    }
		    const uniqueColumnNames = Object.values(model.getIndexes()).filter((c) => c.unique && c.fields.length > 0).map((c) => c.fields);
		    const attributes = Object.keys(insertValues);
		    for (const index of uniqueColumnNames) {
		      if (_.intersection(attributes, index).length === index.length) {
		        where = {};
		        for (const field of index) {
		          where[field] = insertValues[field];
		        }
		        wheres.push(where);
		      }
		    }
		    where = { [Op.or]: wheres };
		    options.type = QueryTypes.UPSERT;
		    options.raw = true;
		    const sql = this.queryGenerator.upsertQuery(tableName, insertValues, updateValues, where, model, options);
		    delete options.replacements;
		    return await this.sequelize.queryRaw(sql, options);
		  }
		}
		
		return queryInterface$6;
	}

	var query$6;
	var hasRequiredQuery$6;

	function requireQuery$6 () {
		if (hasRequiredQuery$6) return query$6;
		hasRequiredQuery$6 = 1;
		var __defProp = Object.defineProperty;
		var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
		var __getOwnPropNames = Object.getOwnPropertyNames;
		var __hasOwnProp = Object.prototype.hasOwnProperty;
		var __export = (target, all) => {
		  for (var name in all)
		    __defProp(target, name, { get: all[name], enumerable: true });
		};
		var __copyProps = (to, from, except, desc) => {
		  if (from && typeof from === "object" || typeof from === "function") {
		    for (let key of __getOwnPropNames(from))
		      if (!__hasOwnProp.call(to, key) && key !== except)
		        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
		  }
		  return to;
		};
		var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
		var query_exports = {};
		__export(query_exports, {
		  MsSqlQuery: () => MsSqlQuery
		});
		query$6 = __toCommonJS(query_exports);
		var import_format = requireFormat();
		const { AbstractQuery } = requireQuery$8();
		const sequelizeErrors = errors;
		const _ = lodashExports;
		const { logger } = requireLogger();
		const debug = logger.debugContext("sql:mssql");
		const minSafeIntegerAsBigInt = BigInt(Number.MIN_SAFE_INTEGER);
		const maxSafeIntegerAsBigInt = BigInt(Number.MAX_SAFE_INTEGER);
		function getScale(aNum) {
		  if (!Number.isFinite(aNum)) {
		    return 0;
		  }
		  let e = 1;
		  while (Math.round(aNum * e) / e !== aNum) {
		    e *= 10;
		  }
		  return Math.log10(e);
		}
		class MsSqlQuery extends AbstractQuery {
		  getInsertIdField() {
		    return "id";
		  }
		  getSQLTypeFromJsType(value, TYPES) {
		    const paramType = { type: TYPES.NVarChar, typeOptions: {}, value };
		    if (typeof value === "number") {
		      if (Number.isInteger(value)) {
		        if (value >= -2147483648 && value <= 2147483647) {
		          paramType.type = TYPES.Int;
		        } else {
		          paramType.type = TYPES.BigInt;
		        }
		      } else {
		        paramType.type = TYPES.Numeric;
		        paramType.typeOptions = { precision: 30, scale: getScale(value) };
		      }
		    } else if (typeof value === "bigint") {
		      if (value < minSafeIntegerAsBigInt || value > maxSafeIntegerAsBigInt) {
		        paramType.type = TYPES.VarChar;
		        paramType.value = value.toString();
		      } else {
		        return this.getSQLTypeFromJsType(Number(value), TYPES);
		      }
		    } else if (typeof value === "boolean") {
		      paramType.type = TYPES.Bit;
		    }
		    if (Buffer.isBuffer(value)) {
		      paramType.type = TYPES.VarBinary;
		    }
		    return paramType;
		  }
		  async _run(connection, sql, parameters) {
		    this.sql = sql;
		    const { options } = this;
		    const complete = this._logQuery(sql, debug, parameters);
		    const query = new Promise((resolve, reject) => {
		      if (sql.startsWith("BEGIN TRANSACTION")) {
		        connection.beginTransaction((error) => error ? reject(error) : resolve([]), options.transaction.name, connection.lib.ISOLATION_LEVEL[options.isolationLevel]);
		        return;
		      }
		      if (sql.startsWith("COMMIT TRANSACTION")) {
		        connection.commitTransaction((error) => error ? reject(error) : resolve([]));
		        return;
		      }
		      if (sql.startsWith("ROLLBACK TRANSACTION")) {
		        connection.rollbackTransaction((error) => error ? reject(error) : resolve([]), options.transaction.name);
		        return;
		      }
		      if (sql.startsWith("SAVE TRANSACTION")) {
		        connection.saveTransaction((error) => error ? reject(error) : resolve([]), options.transaction.name);
		        return;
		      }
		      const rows2 = [];
		      const request = new connection.lib.Request(sql, (err, rowCount2) => err ? reject(err) : resolve([rows2, rowCount2]));
		      if (parameters) {
		        if (Array.isArray(parameters)) {
		          for (let i = 0; i < parameters.length; i++) {
		            const paramType = this.getSQLTypeFromJsType(parameters[i], connection.lib.TYPES);
		            request.addParameter(String(i + 1), paramType.type, paramType.value, paramType.typeOptions);
		          }
		        } else {
		          _.forOwn(parameters, (parameter, parameterName) => {
		            const paramType = this.getSQLTypeFromJsType(parameter, connection.lib.TYPES);
		            request.addParameter(parameterName, paramType.type, paramType.value, paramType.typeOptions);
		          });
		        }
		      }
		      request.on("row", (columns) => {
		        rows2.push(columns);
		      });
		      connection.execSql(request);
		    });
		    let rows;
		    let rowCount;
		    try {
		      [rows, rowCount] = await query;
		    } catch (error) {
		      error.sql = sql;
		      error.parameters = parameters;
		      throw this.formatError(error);
		    }
		    complete();
		    if (Array.isArray(rows)) {
		      const dialect = this.sequelize.dialect;
		      rows = rows.map((columns) => {
		        const row = {};
		        for (const column of columns) {
		          const parser = dialect.getParserForDatabaseDataType(column.metadata.type.type);
		          let value = column.value;
		          if (value != null && parser) {
		            value = parser(value);
		          }
		          row[column.metadata.colName] = value;
		        }
		        return row;
		      });
		    }
		    return this.formatResults(rows, rowCount);
		  }
		  run(sql, parameters) {
		    return this.connection.queue.enqueue(() => this._run(this.connection, sql, parameters));
		  }
		  /**
		   * High level function that handles the results of a query execution.
		   *
		   * @param {Array} data - The result of the query execution.
		   * @param {number} rowCount
		   * @private
		   * @example
		   * Example:
		   *  query.formatResults([
		   *    {
		   *      id: 1,              // this is from the main table
		   *      attr2: 'snafu',     // this is from the main table
		   *      Tasks.id: 1,        // this is from the associated table
		   *      Tasks.title: 'task' // this is from the associated table
		   *    }
		   *  ])
		   */
		  formatResults(data, rowCount) {
		    if (this.isInsertQuery(data)) {
		      this.handleInsertQuery(data);
		      return [this.instance || data, rowCount];
		    }
		    if (this.isShowTablesQuery()) {
		      return this.handleShowTablesQuery(data);
		    }
		    if (this.isDescribeQuery()) {
		      const result = {};
		      for (const _result of data) {
		        if (_result.Default) {
		          _result.Default = _result.Default.replace("('", "").replace("')", "").replaceAll("'", "");
		        }
		        result[_result.Name] = {
		          type: _result.Type.toUpperCase(),
		          allowNull: _result.IsNull === "YES",
		          defaultValue: _result.Default,
		          primaryKey: _result.Constraint === "PRIMARY KEY",
		          autoIncrement: _result.IsIdentity === 1,
		          comment: _result.Comment
		        };
		        if (result[_result.Name].type.includes("CHAR") && _result.Length) {
		          if (_result.Length === -1) {
		            result[_result.Name].type += "(MAX)";
		          } else {
		            result[_result.Name].type += `(${_result.Length})`;
		          }
		        }
		      }
		      return result;
		    }
		    if (this.isSelectQuery()) {
		      return this.handleSelectQuery(data);
		    }
		    if (this.isShowIndexesQuery()) {
		      return this.handleShowIndexesQuery(data);
		    }
		    if (this.isCallQuery()) {
		      return data[0];
		    }
		    if (this.isBulkUpdateQuery()) {
		      if (this.options.returning) {
		        return this.handleSelectQuery(data);
		      }
		      return rowCount;
		    }
		    if (this.isBulkDeleteQuery()) {
		      return data[0] ? data[0].AFFECTEDROWS : 0;
		    }
		    if (this.isForeignKeysQuery()) {
		      return data;
		    }
		    if (this.isUpsertQuery()) {
		      if (data && data.length === 0) {
		        return [this.instance || data, false];
		      }
		      this.handleInsertQuery(data);
		      return [this.instance || data, data[0].$action === "INSERT"];
		    }
		    if (this.isUpdateQuery()) {
		      return [this.instance || data, rowCount];
		    }
		    if (this.isShowConstraintsQuery()) {
		      return data;
		    }
		    if (this.isRawQuery()) {
		      return [data, rowCount];
		    }
		    return data;
		  }
		  handleShowTablesQuery(results) {
		    return results.map((resultSet) => {
		      return {
		        tableName: resultSet.TABLE_NAME,
		        schema: resultSet.TABLE_SCHEMA
		      };
		    });
		  }
		  formatError(err) {
		    let match;
		    match = err.message.match(/Violation of (?:UNIQUE|PRIMARY) KEY constraint '([^']*)'. Cannot insert duplicate key in object '.*'\.(:? The duplicate key value is \((.*)\).)?/s);
		    match = match || err.message.match(/Cannot insert duplicate key row in object .* with unique index '(.*)'\.(:? The duplicate key value is \((.*)\).)?/s);
		    if (match && match.length > 1) {
		      let fields = {};
		      const uniqueKey = this.model && this.model.getIndexes().find((index) => index.unique && index.name === match[1]);
		      let message = "Validation error";
		      if (uniqueKey && Boolean(uniqueKey.msg)) {
		        message = uniqueKey.msg;
		      }
		      if (match[3]) {
		        const values = match[3].split(",").map((part) => part.trim());
		        if (uniqueKey) {
		          fields = _.zipObject(uniqueKey.fields, values);
		        } else {
		          fields[match[1]] = match[3];
		        }
		      }
		      const errors = [];
		      _.forOwn(fields, (value, field) => {
		        errors.push(new sequelizeErrors.ValidationErrorItem(
		          this.getUniqueConstraintErrorMessage(field),
		          "unique violation",
		          // sequelizeErrors.ValidationErrorItem.Origins.DB,
		          field,
		          value,
		          this.instance,
		          "not_unique"
		        ));
		      });
		      return new sequelizeErrors.UniqueConstraintError({ message, errors, cause: err, fields });
		    }
		    match = err.message.match(/Failed on step '(.*)'.Could not create constraint. See previous errors./) || err.message.match(/The DELETE statement conflicted with the REFERENCE constraint "(.*)". The conflict occurred in database "(.*)", table "(.*)", column '(.*)'./) || err.message.match(/The (?:INSERT|MERGE|UPDATE) statement conflicted with the FOREIGN KEY constraint "(.*)". The conflict occurred in database "(.*)", table "(.*)", column '(.*)'./);
		    if (match && match.length > 0) {
		      return new sequelizeErrors.ForeignKeyConstraintError({
		        fields: null,
		        index: match[1],
		        cause: err
		      });
		    }
		    if (err.errors) {
		      for (const error of err.errors) {
		        match = error.message.match(/Could not create constraint or index. See previous errors./);
		        if (match && match.length > 0) {
		          return new sequelizeErrors.ForeignKeyConstraintError({
		            fields: null,
		            index: match[1],
		            cause: error
		          });
		        }
		      }
		    }
		    match = err.message.match(/Could not drop constraint. See previous errors./);
		    if (match && match.length > 0) {
		      let constraint = err.sql.match(/(?:constraint|index) \[(.+?)]/i);
		      constraint = constraint ? constraint[1] : void 0;
		      let table = err.sql.match(/table \[(.+?)]/i);
		      table = table ? table[1] : void 0;
		      return new sequelizeErrors.UnknownConstraintError({
		        message: match[1],
		        constraint,
		        table,
		        cause: err
		      });
		    }
		    if (err.errors) {
		      for (const error of err.errors) {
		        match = error.message.match(/Could not drop constraint. See previous errors./);
		        if (match && match.length > 0) {
		          let constraint = err.sql.match(/(?:constraint|index) \[(.+?)]/i);
		          constraint = constraint ? constraint[1] : void 0;
		          let table = err.sql.match(/table \[(.+?)]/i);
		          table = table ? table[1] : void 0;
		          return new sequelizeErrors.UnknownConstraintError({
		            message: match[1],
		            constraint,
		            table,
		            cause: error
		          });
		        }
		      }
		    }
		    return new sequelizeErrors.DatabaseError(err);
		  }
		  isShowOrDescribeQuery() {
		    let result = false;
		    result = result || this.sql.toLowerCase().startsWith("select c.column_name as 'name', c.data_type as 'type', c.is_nullable as 'isnull'");
		    result = result || this.sql.toLowerCase().startsWith("select tablename = t.name, name = ind.name,");
		    result = result || this.sql.toLowerCase().startsWith("exec sys.sp_helpindex @objname");
		    return result;
		  }
		  handleShowIndexesQuery(data) {
		    const indexes = data.reduce((acc, curr) => {
		      if (acc.has(curr.index_name)) {
		        const index = acc.get(curr.index_name);
		        if (curr.is_included_column) {
		          index.includes.push(curr.column_name);
		        } else {
		          index.fields.push({
		            attribute: curr.column_name,
		            length: void 0,
		            order: curr.is_descending_key ? "DESC" : "ASC",
		            collate: void 0
		          });
		        }
		        return acc;
		      }
		      acc.set(curr.index_name, {
		        primary: curr.is_primary_key,
		        fields: curr.is_included_column ? [] : [
		          {
		            attribute: curr.column_name,
		            length: void 0,
		            order: curr.is_descending_key ? "DESC" : "ASC",
		            collate: void 0
		          }
		        ],
		        includes: curr.is_included_column ? [curr.column_name] : [],
		        name: curr.index_name,
		        tableName: void 0,
		        unique: curr.is_unique,
		        type: null
		      });
		      return acc;
		    }, /* @__PURE__ */ new Map());
		    return Array.from(indexes.values());
		  }
		  handleInsertQuery(insertedRows, metaData) {
		    var _a;
		    if (!((_a = this.instance) == null ? void 0 : _a.dataValues)) {
		      return;
		    }
		    insertedRows = insertedRows.map((row) => {
		      const attributes = /* @__PURE__ */ Object.create(null);
		      for (const columnName of Object.keys(row)) {
		        const attributeName = (0, import_format.getAttributeName)(this.model, columnName) ?? columnName;
		        attributes[attributeName] = row[columnName];
		      }
		      return attributes;
		    });
		    insertedRows = this._parseDataArrayByType(insertedRows, this.model, this.options.includeMap);
		    const autoIncrementAttributeName = this.model.autoIncrementAttribute;
		    let id = null;
		    id = id || insertedRows && insertedRows[0][this.getInsertIdField()];
		    id = id || metaData && metaData[this.getInsertIdField()];
		    id = id || insertedRows && insertedRows[0][autoIncrementAttributeName];
		    this.instance[autoIncrementAttributeName] = id;
		    for (const attributeName of Object.keys(insertedRows[0])) {
		      this.instance.dataValues[attributeName] = insertedRows[0][attributeName];
		    }
		  }
		}
		
		return query$6;
	}

	var mssql;
	var hasRequiredMssql;

	function requireMssql () {
		if (hasRequiredMssql) return mssql;
		hasRequiredMssql = 1;
		var __create = Object.create;
		var __defProp = Object.defineProperty;
		var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
		var __getOwnPropNames = Object.getOwnPropertyNames;
		var __getProtoOf = Object.getPrototypeOf;
		var __hasOwnProp = Object.prototype.hasOwnProperty;
		var __export = (target, all) => {
		  for (var name in all)
		    __defProp(target, name, { get: all[name], enumerable: true });
		};
		var __copyProps = (to, from, except, desc) => {
		  if (from && typeof from === "object" || typeof from === "function") {
		    for (let key of __getOwnPropNames(from))
		      if (!__hasOwnProp.call(to, key) && key !== except)
		        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
		  }
		  return to;
		};
		var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
		  // If the importer is in node compatibility mode or this is not an ESM
		  // file that has been converted to a CommonJS file using a Babel-
		  // compatible transform (i.e. "__esModule" has not been set), then set
		  // "default" to the CommonJS "module.exports" for node compatibility.
		  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
		  mod
		));
		var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
		var mssql_exports = {};
		__export(mssql_exports, {
		  MssqlDialect: () => MssqlDialect
		});
		mssql = __toCommonJS(mssql_exports);
		var import_sql = sql;
		var import_abstract = requireAbstract();
		var import_connection_manager = requireConnectionManager$6();
		var DataTypes = __toESM(requireDataTypes$5());
		var import_data_types_db = requireDataTypes_db();
		var import_query_generator = requireQueryGenerator$5();
		var import_query_interface = requireQueryInterface$6();
		var import_query = requireQuery$6();
		class MssqlDialect extends import_abstract.AbstractDialect {
		  static supports = import_abstract.AbstractDialect.extendSupport({
		    "DEFAULT VALUES": true,
		    "LIMIT ON UPDATE": true,
		    migrations: false,
		    returnValues: "output",
		    schemas: true,
		    multiDatabases: true,
		    autoIncrement: {
		      identityInsert: true,
		      defaultValue: false,
		      update: false
		    },
		    alterColumn: {
		      unique: false
		    },
		    constraints: {
		      restrict: false,
		      default: true,
		      removeOptions: { ifExists: true }
		    },
		    index: {
		      collate: false,
		      type: true,
		      using: false,
		      where: true,
		      include: true
		    },
		    tmpTableTrigger: true,
		    dataTypes: {
		      JSON: true,
		      // TODO: https://learn.microsoft.com/en-us/sql/t-sql/spatial-geography/spatial-types-geography?view=sql-server-ver16
		      GEOGRAPHY: false,
		      // TODO: https://learn.microsoft.com/en-us/sql/t-sql/spatial-geometry/spatial-types-geometry-transact-sql?view=sql-server-ver16
		      GEOMETRY: false
		    },
		    jsonOperations: true,
		    jsonExtraction: {
		      unquoted: true,
		      quoted: false
		    }
		  });
		  connectionManager;
		  queryGenerator;
		  queryInterface;
		  Query = import_query.MsSqlQuery;
		  dataTypesDocumentationUrl = "https://msdn.microsoft.com/en-us/library/ms187752%28v=sql.110%29.aspx";
		  // SQL Server 2017 Express (version 14), minimum supported version, all the way
		  // up to the most recent version. When increasing this version, remember to
		  // update also the minimum version in the documentation at
		  //   https://github.com/sequelize/website/blob/main/docs/other-topics/dialect-specific-things.md
		  // and set the relevant years for the mssql Docker images in the ci.yml file at
		  //   .github/workflows/ci.yml
		  // minimum supported version
		  defaultVersion = "14.0.1000";
		  TICK_CHAR_LEFT = "[";
		  TICK_CHAR_RIGHT = "]";
		  constructor(sequelize) {
		    super(sequelize, DataTypes, "mssql");
		    this.connectionManager = new import_connection_manager.MsSqlConnectionManager(this, sequelize);
		    this.queryGenerator = new import_query_generator.MsSqlQueryGenerator({
		      dialect: this,
		      sequelize
		    });
		    this.queryInterface = new import_query_interface.MsSqlQueryInterface(
		      sequelize,
		      this.queryGenerator
		    );
		    (0, import_data_types_db.registerMsSqlDbDataTypeParsers)(this);
		  }
		  createBindCollector() {
		    return (0, import_sql.createNamedParamBindCollector)("@");
		  }
		  escapeBuffer(buffer) {
		    const hex = buffer.toString("hex");
		    return `0x${hex}`;
		  }
		  escapeString(value) {
		    value = value.replaceAll("'", "''");
		    return `N'${value}'`;
		  }
		  getDefaultSchema() {
		    return "dbo";
		  }
		  static getDefaultPort() {
		    return 1433;
		  }
		}
		
		return mssql;
	}

	var connectionManager$5;
	var hasRequiredConnectionManager$5;

	function requireConnectionManager$5 () {
		if (hasRequiredConnectionManager$5) return connectionManager$5;
		hasRequiredConnectionManager$5 = 1;
		var __create = Object.create;
		var __defProp = Object.defineProperty;
		var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
		var __getOwnPropNames = Object.getOwnPropertyNames;
		var __getProtoOf = Object.getPrototypeOf;
		var __hasOwnProp = Object.prototype.hasOwnProperty;
		var __export = (target, all) => {
		  for (var name in all)
		    __defProp(target, name, { get: all[name], enumerable: true });
		};
		var __copyProps = (to, from, except, desc) => {
		  if (from && typeof from === "object" || typeof from === "function") {
		    for (let key of __getOwnPropNames(from))
		      if (!__hasOwnProp.call(to, key) && key !== except)
		        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
		  }
		  return to;
		};
		var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
		  // If the importer is in node compatibility mode or this is not an ESM
		  // file that has been converted to a CommonJS file using a Babel-
		  // compatible transform (i.e. "__esModule" has not been set), then set
		  // "default" to the CommonJS "module.exports" for node compatibility.
		  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
		  mod
		));
		var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
		var connection_manager_exports = {};
		__export(connection_manager_exports, {
		  MySqlConnectionManager: () => MySqlConnectionManager
		});
		connectionManager$5 = __toCommonJS(connection_manager_exports);
		var import_node_assert = __toESM(require$$0$4);
		var import_node_util = require$$0$1;
		var import_dayjs = __toESM(dayjs_minExports);
		var import_errors = errors;
		var import_check = requireCheck();
		var import_logger = requireLogger();
		var import_connection_manager = requireConnectionManager$8();
		const debug = import_logger.logger.debugContext("connection:mysql");
		class MySqlConnectionManager extends import_connection_manager.AbstractConnectionManager {
		  lib;
		  constructor(dialect, sequelize) {
		    super(dialect, sequelize);
		    this.lib = this._loadDialectModule("mysql2");
		  }
		  #typecast(field, next) {
		    const dataParser = this.dialect.getParserForDatabaseDataType(field.type);
		    if (dataParser) {
		      const value = dataParser(field);
		      if (value !== void 0) {
		        return value;
		      }
		    }
		    return next();
		  }
		  /**
		   * Connect with MySQL database based on config, Handle any errors in connection
		   * Set the pool handlers on connection.error
		   * Also set proper timezone once connection is connected.
		   *
		   * @param config
		   * @returns
		   * @private
		   */
		  async connect(config) {
		    (0, import_node_assert.default)(typeof config.port === "number", "port has not been normalized");
		    const connectionConfig = {
		      bigNumberStrings: false,
		      supportBigNumbers: true,
		      flags: ["-FOUND_ROWS"],
		      ...config.dialectOptions,
		      ...config.host == null ? null : { host: config.host },
		      port: config.port,
		      ...config.username == null ? null : { user: config.username },
		      ...config.password == null ? null : { password: config.password },
		      ...config.database == null ? null : { database: config.database },
		      ...!this.sequelize.options.timezone ? null : { timezone: this.sequelize.options.timezone },
		      typeCast: (field, next) => this.#typecast(field, next)
		    };
		    try {
		      const connection = await createConnection(this.lib, connectionConfig);
		      debug("connection acquired");
		      connection.on("error", (error) => {
		        if (!(0, import_check.isNodeError)(error)) {
		          return;
		        }
		        switch (error.code) {
		          case "ESOCKET":
		          case "ECONNRESET":
		          case "EPIPE":
		          case "PROTOCOL_CONNECTION_LOST":
		            void this.pool.destroy(connection);
		            break;
		          default:
		        }
		      });
		      if (!this.sequelize.config.keepDefaultTimezone && this.sequelize.options.timezone) {
		        let tzOffset = this.sequelize.options.timezone;
		        tzOffset = tzOffset.includes("/") ? import_dayjs.default.tz(void 0, tzOffset).format("Z") : tzOffset;
		        await (0, import_node_util.promisify)((cb) => connection.query(`SET time_zone = '${tzOffset}'`, cb))();
		      }
		      return connection;
		    } catch (error) {
		      if (!(0, import_check.isError)(error)) {
		        throw error;
		      }
		      const code = (0, import_check.isNodeError)(error) ? error.code : null;
		      switch (code) {
		        case "ECONNREFUSED":
		          throw new import_errors.ConnectionRefusedError(error);
		        case "ER_ACCESS_DENIED_ERROR":
		          throw new import_errors.AccessDeniedError(error);
		        case "ENOTFOUND":
		          throw new import_errors.HostNotFoundError(error);
		        case "EHOSTUNREACH":
		          throw new import_errors.HostNotReachableError(error);
		        case "EINVAL":
		          throw new import_errors.InvalidConnectionError(error);
		        default:
		          throw new import_errors.ConnectionError(error);
		      }
		    }
		  }
		  async disconnect(connection) {
		    if (connection._closing) {
		      debug("connection tried to disconnect but was already at CLOSED state");
		      return;
		    }
		    await (0, import_node_util.promisify)((callback) => connection.end(callback))();
		  }
		  validate(connection) {
		    return connection && !connection._fatalError && !connection._protocolError && !connection._closing && !connection.stream.destroyed;
		  }
		}
		async function createConnection(lib, config) {
		  return new Promise((resolve, reject) => {
		    const connection = lib.createConnection(config);
		    const errorHandler = (e) => {
		      connection.removeListener("connect", connectHandler);
		      connection.removeListener("error", connectHandler);
		      reject(e);
		    };
		    const connectHandler = () => {
		      connection.removeListener("error", errorHandler);
		      resolve(connection);
		    };
		    connection.on("error", errorHandler);
		    connection.once("connect", connectHandler);
		  });
		}
		
		return connectionManager$5;
	}

	var query$5;
	var hasRequiredQuery$5;

	function requireQuery$5 () {
		if (hasRequiredQuery$5) return query$5;
		hasRequiredQuery$5 = 1;
		var __create = Object.create;
		var __defProp = Object.defineProperty;
		var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
		var __getOwnPropNames = Object.getOwnPropertyNames;
		var __getProtoOf = Object.getPrototypeOf;
		var __hasOwnProp = Object.prototype.hasOwnProperty;
		var __export = (target, all) => {
		  for (var name in all)
		    __defProp(target, name, { get: all[name], enumerable: true });
		};
		var __copyProps = (to, from, except, desc) => {
		  if (from && typeof from === "object" || typeof from === "function") {
		    for (let key of __getOwnPropNames(from))
		      if (!__hasOwnProp.call(to, key) && key !== except)
		        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
		  }
		  return to;
		};
		var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
		  // If the importer is in node compatibility mode or this is not an ESM
		  // file that has been converted to a CommonJS file using a Babel-
		  // compatible transform (i.e. "__esModule" has not been set), then set
		  // "default" to the CommonJS "module.exports" for node compatibility.
		  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
		  mod
		));
		var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
		var query_exports = {};
		__export(query_exports, {
		  MySqlQuery: () => MySqlQuery
		});
		query$5 = __toCommonJS(query_exports);
		var import_node_util = __toESM(require$$0$1);
		const { AbstractQuery } = requireQuery$8();
		const sequelizeErrors = errors;
		const _ = lodashExports;
		const { logger } = requireLogger();
		const ER_DUP_ENTRY = 1062;
		const ER_DEADLOCK = 1213;
		const ER_ROW_IS_REFERENCED = 1451;
		const ER_NO_REFERENCED_ROW = 1452;
		const debug = logger.debugContext("sql:mysql");
		class MySqlQuery extends AbstractQuery {
		  constructor(connection, sequelize, options) {
		    super(connection, sequelize, { showWarnings: false, ...options });
		  }
		  async run(sql, parameters) {
		    this.sql = sql;
		    const { connection, options } = this;
		    const showWarnings = this.sequelize.options.showWarnings || options.showWarnings;
		    const complete = this._logQuery(sql, debug, parameters);
		    if (parameters) {
		      debug("parameters(%j)", parameters);
		    }
		    let results;
		    try {
		      if (parameters && parameters.length > 0) {
		        results = await new Promise((resolve, reject) => {
		          connection.execute(sql, parameters, (error, result) => error ? reject(error) : resolve(result)).setMaxListeners(100);
		        });
		      } else {
		        results = await new Promise((resolve, reject) => {
		          connection.query({ sql }, (error, result) => error ? reject(error) : resolve(result)).setMaxListeners(100);
		        });
		      }
		    } catch (error) {
		      if (options.transaction && error.errno === ER_DEADLOCK) {
		        try {
		          await options.transaction.rollback();
		        } catch {
		        }
		        options.transaction.finished = "rollback";
		      }
		      error.sql = sql;
		      error.parameters = parameters;
		      throw this.formatError(error);
		    } finally {
		      complete();
		    }
		    if (showWarnings && results && results.warningStatus > 0) {
		      await this.logWarnings(results);
		    }
		    return this.formatResults(results);
		  }
		  /**
		   * High level function that handles the results of a query execution.
		   *
		   *
		   * Example:
		   *  query.formatResults([
		   *    {
		   *      id: 1,              // this is from the main table
		   *      attr2: 'snafu',     // this is from the main table
		   *      Tasks.id: 1,        // this is from the associated table
		   *      Tasks.title: 'task' // this is from the associated table
		   *    }
		   *  ])
		   *
		   * @param {Array} data - The result of the query execution.
		   * @private
		   */
		  formatResults(data) {
		    var _a;
		    let result = this.instance;
		    if (this.isInsertQuery(data)) {
		      this.handleInsertQuery(data);
		      if (!this.instance) {
		        const modelDefinition = (_a = this.model) == null ? void 0 : _a.modelDefinition;
		        if (data.constructor.name === "ResultSetHeader" && (modelDefinition == null ? void 0 : modelDefinition.autoIncrementAttributeName) && (modelDefinition == null ? void 0 : modelDefinition.autoIncrementAttributeName) === this.model.primaryKeyAttribute) {
		          const startId = data[this.getInsertIdField()];
		          result = [];
		          for (let i = BigInt(startId); i < BigInt(startId) + BigInt(data.affectedRows); i = i + 1n) {
		            result.push({ [modelDefinition.getColumnName(this.model.primaryKeyAttribute)]: typeof startId === "string" ? i.toString() : Number(i) });
		          }
		        } else {
		          result = data[this.getInsertIdField()];
		        }
		      }
		    }
		    if (this.isSelectQuery()) {
		      return this.handleSelectQuery(data);
		    }
		    if (this.isShowTablesQuery()) {
		      return this.handleShowTablesQuery(data);
		    }
		    if (this.isDescribeQuery()) {
		      result = {};
		      for (const _result of data) {
		        const enumRegex = /^enum/i;
		        result[_result.Field] = {
		          type: enumRegex.test(_result.Type) ? _result.Type.replace(enumRegex, "ENUM") : _result.Type.toUpperCase(),
		          allowNull: _result.Null === "YES",
		          defaultValue: _result.Default,
		          primaryKey: _result.Key === "PRI",
		          autoIncrement: Object.hasOwn(_result, "Extra") && _result.Extra.toLowerCase() === "auto_increment",
		          comment: _result.Comment ? _result.Comment : null
		        };
		      }
		      return result;
		    }
		    if (this.isShowIndexesQuery()) {
		      return this.handleShowIndexesQuery(data);
		    }
		    if (this.isCallQuery()) {
		      return data[0];
		    }
		    if (this.isBulkUpdateQuery() || this.isBulkDeleteQuery()) {
		      return data.affectedRows;
		    }
		    if (this.isForeignKeysQuery()) {
		      return data;
		    }
		    if (this.isUpsertQuery()) {
		      return [result, data.affectedRows === 1];
		    }
		    if (this.isInsertQuery() || this.isUpdateQuery()) {
		      return [result, data.affectedRows];
		    }
		    if (this.isShowConstraintsQuery()) {
		      return data;
		    }
		    if (this.isRawQuery()) {
		      return [data, data];
		    }
		    return result;
		  }
		  formatError(err) {
		    const errCode = err.errno || err.code;
		    switch (errCode) {
		      case ER_DUP_ENTRY: {
		        const match = err.message.match(/Duplicate entry '([\S\s]*)' for key '?((.|\s)*?)'?$/);
		        let fields = {};
		        let message = "Validation error";
		        const values = match ? match[1].split("-") : void 0;
		        const fieldKey = match ? match[2].split(".").pop() : void 0;
		        const fieldVal = match ? match[1] : void 0;
		        const uniqueKey = this.model && this.model.getIndexes().find((index) => index.unique && index.name === fieldKey);
		        if (uniqueKey) {
		          if (uniqueKey.msg) {
		            message = uniqueKey.msg;
		          }
		          fields = _.zipObject(uniqueKey.fields, values);
		        } else {
		          fields[fieldKey] = fieldVal;
		        }
		        const errors = [];
		        _.forOwn(fields, (value, field) => {
		          errors.push(new sequelizeErrors.ValidationErrorItem(
		            this.getUniqueConstraintErrorMessage(field),
		            "unique violation",
		            // sequelizeErrors.ValidationErrorItem.Origins.DB,
		            field,
		            value,
		            this.instance,
		            "not_unique"
		          ));
		        });
		        return new sequelizeErrors.UniqueConstraintError({ message, errors, cause: err, fields });
		      }
		      case ER_ROW_IS_REFERENCED:
		      case ER_NO_REFERENCED_ROW: {
		        const match = err.message.match(
		          /CONSTRAINT (["`])(.*)\1 FOREIGN KEY \(\1(.*)\1\) REFERENCES \1(.*)\1 \(\1(.*)\1\)/
		        );
		        const quoteChar = match ? match[1] : "`";
		        const fields = match ? match[3].split(new RegExp(`${quoteChar}, *${quoteChar}`)) : void 0;
		        return new sequelizeErrors.ForeignKeyConstraintError({
		          reltype: String(errCode) === String(ER_ROW_IS_REFERENCED) ? "parent" : "child",
		          table: match ? match[4] : void 0,
		          fields,
		          value: fields && fields.length && this.instance && this.instance[fields[0]] || void 0,
		          index: match ? match[2] : void 0,
		          cause: err
		        });
		      }
		      default:
		        return new sequelizeErrors.DatabaseError(err);
		    }
		  }
		  handleShowTablesQuery(results) {
		    return results.map((resultSet) => ({
		      tableName: resultSet.TABLE_NAME,
		      schema: resultSet.TABLE_SCHEMA
		    }));
		  }
		  handleShowIndexesQuery(data) {
		    data = data.reduce((acc, item) => {
		      if (!(item.Key_name in acc)) {
		        acc[item.Key_name] = item;
		        item.fields = [];
		      }
		      acc[item.Key_name].fields[item.Seq_in_index - 1] = {
		        attribute: item.Column_name,
		        length: item.Sub_part || void 0,
		        order: item.Collation === "A" ? "ASC" : item.Collation === "D" ? "DESC" : item.Collation === null ? null : (() => {
		          throw new Error(`Unknown index collation ${import_node_util.default.inspect(item.Collation)}`);
		        })()
		      };
		      delete item.column_name;
		      return acc;
		    }, {});
		    return _.map(data, (item) => {
		      return {
		        primary: item.Key_name === "PRIMARY",
		        fields: item.fields,
		        name: item.Key_name,
		        tableName: item.Table,
		        // MySQL 8 returns this as a number (Integer), MySQL 5 returns it as a string (BigInt)
		        unique: item.Non_unique !== "1" && item.Non_unique !== 1,
		        type: item.Index_type
		      };
		    });
		  }
		}
		
		return query$5;
	}

	var queryInterface$5;
	var hasRequiredQueryInterface$5;

	function requireQueryInterface$5 () {
		if (hasRequiredQueryInterface$5) return queryInterface$5;
		hasRequiredQueryInterface$5 = 1;
		var __defProp = Object.defineProperty;
		var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
		var __getOwnPropNames = Object.getOwnPropertyNames;
		var __hasOwnProp = Object.prototype.hasOwnProperty;
		var __export = (target, all) => {
		  for (var name in all)
		    __defProp(target, name, { get: all[name], enumerable: true });
		};
		var __copyProps = (to, from, except, desc) => {
		  if (from && typeof from === "object" || typeof from === "function") {
		    for (let key of __getOwnPropNames(from))
		      if (!__hasOwnProp.call(to, key) && key !== except)
		        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
		  }
		  return to;
		};
		var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
		var query_interface_exports = {};
		__export(query_interface_exports, {
		  MySqlQueryInterface: () => MySqlQueryInterface
		});
		queryInterface$5 = __toCommonJS(query_interface_exports);
		var import_object = object$1;
		var import_sql = sql;
		const sequelizeErrors = errors;
		const { AbstractQueryInterface } = queryInterface$8;
		const { QueryTypes } = queryTypes;
		class MySqlQueryInterface extends AbstractQueryInterface {
		  /**
		   * A wrapper that fixes MySQL's inability to cleanly remove columns from existing tables if they have a foreign key constraint.
		   *
		   * @override
		   */
		  async removeColumn(tableName, columnName, options) {
		    options = options || {};
		    const [results] = await this.sequelize.queryRaw(
		      this.queryGenerator.getForeignKeyQuery(tableName, columnName),
		      { raw: true, ...options }
		    );
		    if (results.length > 0 && results[0].constraintName !== "PRIMARY") {
		      await Promise.all(results.map((constraint) => this.sequelize.queryRaw(
		        this.queryGenerator.dropForeignKeyQuery(tableName, constraint.constraintName),
		        { raw: true, ...options }
		      )));
		    }
		    return await this.sequelize.queryRaw(
		      this.queryGenerator.removeColumnQuery(tableName, columnName),
		      { raw: true, ...options }
		    );
		  }
		  /**
		   * @override
		   */
		  async upsert(tableName, insertValues, updateValues, where, options) {
		    if (options.bind) {
		      (0, import_sql.assertNoReservedBind)(options.bind);
		    }
		    const modelDefinition = options.model.modelDefinition;
		    options = { ...options };
		    options.type = QueryTypes.UPSERT;
		    options.updateOnDuplicate = Object.keys(updateValues);
		    options.upsertKeys = Array.from(modelDefinition.primaryKeysAttributeNames, (pkAttrName) => modelDefinition.getColumnName(pkAttrName));
		    const { query, bind } = this.queryGenerator.insertQuery(tableName, insertValues, (0, import_object.getObjectFromMap)(modelDefinition.attributes), options);
		    delete options.replacements;
		    options.bind = (0, import_sql.combineBinds)(options.bind, bind);
		    return await this.sequelize.queryRaw(query, options);
		  }
		  /**
		   * @override
		   */
		  async removeConstraint(tableName, constraintName, options) {
		    const queryOptions = { ...options, raw: true, constraintName };
		    const constraints = await this.showConstraints(tableName, queryOptions);
		    const constraint = constraints[0];
		    if (!constraint || !constraint.constraintType) {
		      throw new sequelizeErrors.UnknownConstraintError(
		        {
		          message: `Constraint ${constraintName} on table ${tableName} does not exist`,
		          constraint: constraintName,
		          table: tableName
		        }
		      );
		    }
		    let query;
		    if (constraint.constraintType === "FOREIGN KEY") {
		      query = this.queryGenerator.dropForeignKeyQuery(tableName, constraintName);
		    } else {
		      query = this.queryGenerator.removeIndexQuery(tableName, constraint.constraintName);
		    }
		    return this.sequelize.queryRaw(query, queryOptions);
		  }
		}
		
		return queryInterface$5;
	}

	var mysql;
	var hasRequiredMysql;

	function requireMysql () {
		if (hasRequiredMysql) return mysql;
		hasRequiredMysql = 1;
		var __create = Object.create;
		var __defProp = Object.defineProperty;
		var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
		var __getOwnPropNames = Object.getOwnPropertyNames;
		var __getProtoOf = Object.getPrototypeOf;
		var __hasOwnProp = Object.prototype.hasOwnProperty;
		var __export = (target, all) => {
		  for (var name in all)
		    __defProp(target, name, { get: all[name], enumerable: true });
		};
		var __copyProps = (to, from, except, desc) => {
		  if (from && typeof from === "object" || typeof from === "function") {
		    for (let key of __getOwnPropNames(from))
		      if (!__hasOwnProp.call(to, key) && key !== except)
		        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
		  }
		  return to;
		};
		var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
		  // If the importer is in node compatibility mode or this is not an ESM
		  // file that has been converted to a CommonJS file using a Babel-
		  // compatible transform (i.e. "__esModule" has not been set), then set
		  // "default" to the CommonJS "module.exports" for node compatibility.
		  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
		  mod
		));
		var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
		var mysql_exports = {};
		__export(mysql_exports, {
		  MysqlDialect: () => MysqlDialect
		});
		mysql = __toCommonJS(mysql_exports);
		var import_sql = sql;
		var import_abstract = requireAbstract();
		var import_connection_manager = requireConnectionManager$5();
		var DataTypes = __toESM(requireDataTypes$7());
		var import_data_types_db = requireDataTypes_db$1();
		var import_mysql_utils = requireMysqlUtils();
		var import_query = requireQuery$5();
		var import_query_generator = requireQueryGenerator$7();
		var import_query_interface = requireQueryInterface$5();
		const numericOptions = {
		  zerofill: true,
		  unsigned: true
		};
		class MysqlDialect extends import_abstract.AbstractDialect {
		  static supports = import_abstract.AbstractDialect.extendSupport(
		    {
		      "VALUES ()": true,
		      "LIMIT ON UPDATE": true,
		      lock: true,
		      forShare: "LOCK IN SHARE MODE",
		      settingIsolationLevelDuringTransaction: false,
		      schemas: true,
		      inserts: {
		        ignoreDuplicates: " IGNORE",
		        updateOnDuplicate: " ON DUPLICATE KEY UPDATE"
		      },
		      index: {
		        collate: false,
		        length: true,
		        parser: true,
		        type: true,
		        using: 1
		      },
		      constraints: {
		        check: false,
		        foreignKeyChecksDisableable: true,
		        remove: false
		      },
		      indexViaAlter: true,
		      indexHints: true,
		      dataTypes: {
		        COLLATE_BINARY: true,
		        GEOMETRY: true,
		        INTS: numericOptions,
		        FLOAT: { ...numericOptions, scaleAndPrecision: true },
		        REAL: { ...numericOptions, scaleAndPrecision: true },
		        DOUBLE: { ...numericOptions, scaleAndPrecision: true },
		        DECIMAL: numericOptions,
		        JSON: true
		      },
		      jsonOperations: true,
		      jsonExtraction: {
		        unquoted: true,
		        quoted: true
		      },
		      REGEXP: true,
		      globalTimeZoneConfig: true,
		      maxExecutionTimeHint: {
		        select: true
		      }
		    }
		  );
		  connectionManager;
		  queryGenerator;
		  queryInterface;
		  Query = import_query.MySqlQuery;
		  dataTypesDocumentationUrl = "https://dev.mysql.com/doc/refman/5.7/en/data-types.html";
		  // minimum supported version
		  defaultVersion = "5.7.0";
		  TICK_CHAR_LEFT = "`";
		  TICK_CHAR_RIGHT = "`";
		  constructor(sequelize) {
		    super(sequelize, DataTypes, "mysql");
		    this.connectionManager = new import_connection_manager.MySqlConnectionManager(this, sequelize);
		    this.queryGenerator = new import_query_generator.MySqlQueryGenerator({
		      dialect: this,
		      sequelize
		    });
		    this.queryInterface = new import_query_interface.MySqlQueryInterface(
		      sequelize,
		      this.queryGenerator
		    );
		    (0, import_data_types_db.registerMySqlDbDataTypeParsers)(this);
		  }
		  createBindCollector() {
		    return (0, import_sql.createUnspecifiedOrderedBindCollector)();
		  }
		  escapeString(value) {
		    return (0, import_mysql_utils.escapeMysqlString)(value);
		  }
		  canBackslashEscape() {
		    return true;
		  }
		  getDefaultSchema() {
		    return this.sequelize.options.database ?? "";
		  }
		  static getDefaultPort() {
		    return 3306;
		  }
		}
		
		return mysql;
	}

	var _basePick;
	var hasRequired_basePick;

	function require_basePick () {
		if (hasRequired_basePick) return _basePick;
		hasRequired_basePick = 1;
		var basePickBy = _basePickBy,
		    hasIn = hasIn_1;

		/**
		 * The base implementation of `_.pick` without support for individual
		 * property identifiers.
		 *
		 * @private
		 * @param {Object} object The source object.
		 * @param {string[]} paths The property paths to pick.
		 * @returns {Object} Returns the new object.
		 */
		function basePick(object, paths) {
		  return basePickBy(object, paths, function(value, path) {
		    return hasIn(object, path);
		  });
		}

		_basePick = basePick;
		return _basePick;
	}

	var pick_1;
	var hasRequiredPick;

	function requirePick () {
		if (hasRequiredPick) return pick_1;
		hasRequiredPick = 1;
		var basePick = require_basePick(),
		    flatRest = require_flatRest();

		/**
		 * Creates an object composed of the picked `object` properties.
		 *
		 * @static
		 * @since 0.1.0
		 * @memberOf _
		 * @category Object
		 * @param {Object} object The source object.
		 * @param {...(string|string[])} [paths] The property paths to pick.
		 * @returns {Object} Returns the new object.
		 * @example
		 *
		 * var object = { 'a': 1, 'b': '2', 'c': 3 };
		 *
		 * _.pick(object, ['a', 'c']);
		 * // => { 'a': 1, 'c': 3 }
		 */
		var pick = flatRest(function(object, paths) {
		  return object == null ? {} : basePick(object, paths);
		});

		pick_1 = pick;
		return pick_1;
	}

	var connectionManager$4;
	var hasRequiredConnectionManager$4;

	function requireConnectionManager$4 () {
		if (hasRequiredConnectionManager$4) return connectionManager$4;
		hasRequiredConnectionManager$4 = 1;
		var __create = Object.create;
		var __defProp = Object.defineProperty;
		var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
		var __getOwnPropNames = Object.getOwnPropertyNames;
		var __getProtoOf = Object.getPrototypeOf;
		var __hasOwnProp = Object.prototype.hasOwnProperty;
		var __export = (target, all) => {
		  for (var name in all)
		    __defProp(target, name, { get: all[name], enumerable: true });
		};
		var __copyProps = (to, from, except, desc) => {
		  if (from && typeof from === "object" || typeof from === "function") {
		    for (let key of __getOwnPropNames(from))
		      if (!__hasOwnProp.call(to, key) && key !== except)
		        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
		  }
		  return to;
		};
		var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
		  // If the importer is in node compatibility mode or this is not an ESM
		  // file that has been converted to a CommonJS file using a Babel-
		  // compatible transform (i.e. "__esModule" has not been set), then set
		  // "default" to the CommonJS "module.exports" for node compatibility.
		  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
		  mod
		));
		var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
		var connection_manager_exports = {};
		__export(connection_manager_exports, {
		  PostgresConnectionManager: () => PostgresConnectionManager
		});
		connectionManager$4 = __toCommonJS(connection_manager_exports);
		var import_node_assert = __toESM(require$$0$4);
		var import_pick = __toESM(requirePick());
		var import_semver = __toESM(requireSemver());
		var import_errors = errors;
		var import_sequelize = requireSequelize();
		var import_dayjs = dayjs;
		var import_logger = requireLogger();
		var import_connection_manager = requireConnectionManager$8();
		const debug = import_logger.logger.debugContext("connection:pg");
		class PostgresConnectionManager extends import_connection_manager.AbstractConnectionManager {
		  lib;
		  #arrayParserLib;
		  #oidMap = /* @__PURE__ */ new Map();
		  #oidParserCache = /* @__PURE__ */ new Map();
		  constructor(dialect, sequelize) {
		    super(dialect, sequelize);
		    const pgLib = this._loadDialectModule("pg");
		    this.lib = this.sequelize.config.native ? pgLib.native : pgLib;
		    (0, import_node_assert.default)(this.lib != null, "pg-native module not found, please install it");
		    this.#arrayParserLib = this._loadDialectModule("postgres-array");
		  }
		  async connect(config) {
		    const port = Number(config.port ?? this.dialect.getDefaultPort());
		    const connectionConfig = {
		      ...config.dialectOptions && (0, import_pick.default)(config.dialectOptions, [
		        // see [http://www.postgresql.org/docs/9.3/static/runtime-config-logging.html#GUC-APPLICATION-NAME]
		        "application_name",
		        // choose the SSL mode with the PGSSLMODE environment variable
		        // object format: [https://github.com/brianc/node-postgres/blob/ee19e74ffa6309c9c5e8e01746261a8f651661f8/lib/connection.js#L79]
		        // see also [http://www.postgresql.org/docs/9.3/static/libpq-ssl.html]
		        "ssl",
		        // In addition to the values accepted by the corresponding server,
		        // you can use "auto" to determine the right encoding from the
		        // current locale in the client (LC_CTYPE environment variable on Unix systems)
		        "client_encoding",
		        // !! DO NOT SET THIS TO TRUE !!
		        // (unless you know what you're doing)
		        // see [http://www.postgresql.org/message-id/flat/bc9549a50706040852u27633f41ib1e6b09f8339d845@mail.gmail.com#bc9549a50706040852u27633f41ib1e6b09f8339d845@mail.gmail.com]
		        "binary",
		        // This should help with backends incorrectly considering idle clients to be dead and prematurely disconnecting them.
		        // this feature has been added in pg module v6.0.0, check pg/CHANGELOG.md
		        "keepAlive",
		        // Times out queries after a set time in milliseconds in the database end. Added in pg v7.3
		        "statement_timeout",
		        // Times out queries after a set time in milliseconds in client end, query would be still running in database end.
		        "query_timeout",
		        // Number of milliseconds to wait for connection, default is no timeout.
		        "connectionTimeoutMillis",
		        // Terminate any session with an open transaction that has been idle for longer than the specified duration in milliseconds. Added in pg v7.17.0 only supported in postgres >= 10
		        "idle_in_transaction_session_timeout",
		        // Maximum wait time for lock requests in milliseconds. Added in pg v8.8.0.
		        "lock_timeout",
		        // Postgres allows additional session variables to be configured in the connection string in the `options` param.
		        // see [https://www.postgresql.org/docs/14/libpq-connect.html#LIBPQ-CONNECT-OPTIONS]
		        "options",
		        // The stream acts as a user-defined socket factory for postgres. In particular, it enables IAM autentication
		        // with Google Cloud SQL. see: https://github.com/sequelize/sequelize/issues/16001#issuecomment-1561136388
		        "stream"
		      ]),
		      port,
		      ...(0, import_pick.default)(config, ["password", "host", "database"]),
		      user: config.username,
		      types: {
		        getTypeParser: (oid, format) => this.getTypeParser(oid, format)
		      }
		    };
		    const connection = new this.lib.Client(connectionConfig);
		    await new Promise((resolve, reject) => {
		      let responded = false;
		      const parameterHandler = (message) => {
		        var _a;
		        switch (message.parameterName) {
		          case "server_version": {
		            const version = (_a = import_semver.default.coerce(message.parameterValue)) == null ? void 0 : _a.version;
		            this.sequelize.options.databaseVersion = version && import_semver.default.valid(version) ? version : this.dialect.defaultVersion;
		            break;
		          }
		          case "standard_conforming_strings": {
		            connection.standard_conforming_strings = message.parameterValue === "on";
		            break;
		          }
		        }
		      };
		      const endHandler = () => {
		        debug("connection timeout");
		        if (!responded) {
		          reject(new import_errors.ConnectionTimedOutError(new Error("Connection timed out")));
		        }
		      };
		      connection.once("end", endHandler);
		      if (!this.sequelize.config.native) {
		        connection.connection.on("parameterStatus", parameterHandler);
		      }
		      connection.connect((err) => {
		        responded = true;
		        if (!this.sequelize.config.native) {
		          connection.connection.removeListener("parameterStatus", parameterHandler);
		        }
		        if (err) {
		          if (err.code) {
		            switch (err.code) {
		              case "ECONNREFUSED":
		                reject(new import_errors.ConnectionRefusedError(err));
		                break;
		              case "ENOTFOUND":
		                reject(new import_errors.HostNotFoundError(err));
		                break;
		              case "EHOSTUNREACH":
		                reject(new import_errors.HostNotReachableError(err));
		                break;
		              case "EINVAL":
		                reject(new import_errors.InvalidConnectionError(err));
		                break;
		              default:
		                reject(new import_errors.ConnectionError(err));
		                break;
		            }
		          } else {
		            reject(new import_errors.ConnectionError(err));
		          }
		        } else {
		          debug("connection acquired");
		          connection.removeListener("end", endHandler);
		          resolve(connection);
		        }
		      });
		    });
		    connection.on("error", (error) => {
		      connection._invalid = true;
		      debug(`connection error ${error.code || error.message}`);
		      void this.pool.destroy(connection);
		    });
		    let query = "";
		    if (this.sequelize.options.standardConformingStrings !== false && connection.standard_conforming_strings) {
		      query += "SET standard_conforming_strings=on;";
		    }
		    if (this.sequelize.options.clientMinMessages !== void 0) {
		      console.warn('Usage of "options.clientMinMessages" is deprecated and will be removed in v7.');
		      console.warn('Please use the sequelize option "dialectOptions.clientMinMessages" instead.');
		    }
		    if (!(config.dialectOptions && config.dialectOptions.clientMinMessages && config.dialectOptions.clientMinMessages.toLowerCase() === "ignore" || this.sequelize.options.clientMinMessages === false)) {
		      const clientMinMessages = config.dialectOptions && config.dialectOptions.clientMinMessages || this.sequelize.options.clientMinMessages || "warning";
		      query += `SET client_min_messages TO ${clientMinMessages};`;
		    }
		    if (!this.sequelize.config.keepDefaultTimezone) {
		      if (this.sequelize.options.timezone && (0, import_dayjs.isValidTimeZone)(this.sequelize.options.timezone)) {
		        query += `SET TIME ZONE '${this.sequelize.options.timezone}';`;
		      } else {
		        query += `SET TIME ZONE INTERVAL '${this.sequelize.options.timezone}' HOUR TO MINUTE;`;
		      }
		    }
		    if (query) {
		      await connection.query(query);
		    }
		    await this.#refreshOidMap(connection);
		    return connection;
		  }
		  async disconnect(connection) {
		    if (connection._ending) {
		      debug("connection tried to disconnect but was already at ENDING state");
		      return;
		    }
		    await connection.end();
		  }
		  validate(connection) {
		    return !connection._invalid && !connection._ending;
		  }
		  async #refreshOidMap(connection) {
		    const sql = `
      WITH ranges AS (SELECT pg_range.rngtypid,
                             pg_type.typname  AS rngtypname,
                             pg_type.typarray AS rngtyparray,
                             pg_range.rngsubtype
                      FROM pg_range
                             LEFT OUTER JOIN pg_type
                                             ON pg_type.oid = pg_range.rngtypid)
      SELECT pg_type.typname,
             pg_type.typtype,
             pg_type.oid,
             pg_type.typarray,
             ranges.rngtypname,
             ranges.rngtypid,
             ranges.rngtyparray
      FROM pg_type
             LEFT OUTER JOIN ranges
                             ON pg_type.oid = ranges.rngsubtype
      WHERE (pg_type.typtype IN ('b', 'e'));
    `;
		    let results;
		    if (connection instanceof import_sequelize.Sequelize) {
		      results = (await connection.query(sql)).pop();
		    } else {
		      results = await connection.query(sql);
		    }
		    if (Array.isArray(results) && results[0].command === "SET") {
		      results = results.pop();
		    }
		    const newNameOidMap = /* @__PURE__ */ new Map();
		    for (const row of results.rows) {
		      if (!newNameOidMap.has(row.oid)) {
		        newNameOidMap.set(row.oid, {
		          oid: row.oid,
		          typeName: row.typname,
		          type: "base"
		        });
		      }
		      if (row.typarray) {
		        newNameOidMap.set(row.typarray, {
		          oid: row.typarray,
		          typeName: row.typname,
		          type: "array",
		          baseOid: row.oid
		        });
		      }
		      if (row.rngtypid) {
		        newNameOidMap.set(row.rngtypid, {
		          oid: row.rngtypid,
		          typeName: row.rngtypname,
		          type: "range",
		          baseOid: row.oid
		        });
		      }
		      if (row.rngtyparray) {
		        newNameOidMap.set(row.rngtyparray, {
		          oid: row.rngtyparray,
		          typeName: row.rngtypname,
		          type: "range-array",
		          baseOid: row.oid,
		          rangeOid: row.rngtypid
		        });
		      }
		    }
		    this.#oidMap = newNameOidMap;
		  }
		  #buildArrayParser(subTypeParser) {
		    return (source) => {
		      return this.#arrayParserLib.parse(source, subTypeParser);
		    };
		  }
		  getTypeParser(oid, format) {
		    const cachedParser = this.#oidParserCache.get(oid);
		    if (cachedParser) {
		      return cachedParser;
		    }
		    const customParser = this.#getCustomTypeParser(oid, format);
		    if (customParser) {
		      this.#oidParserCache.set(oid, customParser);
		      return customParser;
		    }
		    return this.lib.types.getTypeParser(oid, format);
		  }
		  #getCustomTypeParser(oid, format) {
		    const typeData = this.#oidMap.get(oid);
		    if (!typeData) {
		      return null;
		    }
		    if (typeData.type === "range-array") {
		      return this.#buildArrayParser(this.getTypeParser(typeData.rangeOid, format));
		    }
		    if (typeData.type === "array") {
		      return this.#buildArrayParser(this.getTypeParser(typeData.baseOid, format));
		    }
		    const parser = this.dialect.getParserForDatabaseDataType(typeData.typeName);
		    return parser ?? null;
		  }
		  /**
		   * Refreshes the local registry of Custom Types (e.g. enum) OIDs
		   */
		  async refreshDynamicOids() {
		    await this.#refreshOidMap(this.sequelize);
		  }
		}
		
		return connectionManager$4;
	}

	var lib = {exports: {}};

	// Current version.
	var VERSION = '1.13.6';

	// Establish the root object, `window` (`self`) in the browser, `global`
	// on the server, or `this` in some virtual machines. We use `self`
	// instead of `window` for `WebWorker` support.
	var root = (typeof self == 'object' && self.self === self && self) ||
	          (typeof global == 'object' && global.global === global && global) ||
	          Function('return this')() ||
	          {};

	// Save bytes in the minified (but not gzipped) version:
	var ArrayProto = Array.prototype, ObjProto = Object.prototype;
	var SymbolProto = typeof Symbol !== 'undefined' ? Symbol.prototype : null;

	// Create quick reference variables for speed access to core prototypes.
	var push = ArrayProto.push,
	    slice = ArrayProto.slice,
	    toString$1 = ObjProto.toString,
	    hasOwnProperty = ObjProto.hasOwnProperty;

	// Modern feature detection.
	var supportsArrayBuffer = typeof ArrayBuffer !== 'undefined',
	    supportsDataView = typeof DataView !== 'undefined';

	// All **ECMAScript 5+** native function implementations that we hope to use
	// are declared here.
	var nativeIsArray = Array.isArray,
	    nativeKeys = Object.keys,
	    nativeCreate = Object.create,
	    nativeIsView = supportsArrayBuffer && ArrayBuffer.isView;

	// Create references to these builtin functions because we override them.
	var _isNaN = isNaN,
	    _isFinite = isFinite;

	// Keys in IE < 9 that won't be iterated by `for key in ...` and thus missed.
	var hasEnumBug = !{toString: null}.propertyIsEnumerable('toString');
	var nonEnumerableProps = ['valueOf', 'isPrototypeOf', 'toString',
	  'propertyIsEnumerable', 'hasOwnProperty', 'toLocaleString'];

	// The largest integer that can be represented exactly.
	var MAX_ARRAY_INDEX = Math.pow(2, 53) - 1;

	// Some functions take a variable number of arguments, or a few expected
	// arguments at the beginning and then a variable number of values to operate
	// on. This helper accumulates all remaining arguments past the function’s
	// argument length (or an explicit `startIndex`), into an array that becomes
	// the last argument. Similar to ES6’s "rest parameter".
	function restArguments(func, startIndex) {
	  startIndex = startIndex == null ? func.length - 1 : +startIndex;
	  return function() {
	    var length = Math.max(arguments.length - startIndex, 0),
	        rest = Array(length),
	        index = 0;
	    for (; index < length; index++) {
	      rest[index] = arguments[index + startIndex];
	    }
	    switch (startIndex) {
	      case 0: return func.call(this, rest);
	      case 1: return func.call(this, arguments[0], rest);
	      case 2: return func.call(this, arguments[0], arguments[1], rest);
	    }
	    var args = Array(startIndex + 1);
	    for (index = 0; index < startIndex; index++) {
	      args[index] = arguments[index];
	    }
	    args[startIndex] = rest;
	    return func.apply(this, args);
	  };
	}

	// Is a given variable an object?
	function isObject(obj) {
	  var type = typeof obj;
	  return type === 'function' || (type === 'object' && !!obj);
	}

	// Is a given value equal to null?
	function isNull(obj) {
	  return obj === null;
	}

	// Is a given variable undefined?
	function isUndefined(obj) {
	  return obj === void 0;
	}

	// Is a given value a boolean?
	function isBoolean(obj) {
	  return obj === true || obj === false || toString$1.call(obj) === '[object Boolean]';
	}

	// Is a given value a DOM element?
	function isElement(obj) {
	  return !!(obj && obj.nodeType === 1);
	}

	// Internal function for creating a `toString`-based type tester.
	function tagTester(name) {
	  var tag = '[object ' + name + ']';
	  return function(obj) {
	    return toString$1.call(obj) === tag;
	  };
	}

	var isString = tagTester('String');

	var isNumber = tagTester('Number');

	var isDate = tagTester('Date');

	var isRegExp = tagTester('RegExp');

	var isError = tagTester('Error');

	var isSymbol = tagTester('Symbol');

	var isArrayBuffer = tagTester('ArrayBuffer');

	var isFunction = tagTester('Function');

	// Optimize `isFunction` if appropriate. Work around some `typeof` bugs in old
	// v8, IE 11 (#1621), Safari 8 (#1929), and PhantomJS (#2236).
	var nodelist = root.document && root.document.childNodes;
	if (typeof /./ != 'function' && typeof Int8Array != 'object' && typeof nodelist != 'function') {
	  isFunction = function(obj) {
	    return typeof obj == 'function' || false;
	  };
	}

	var isFunction$1 = isFunction;

	var hasObjectTag = tagTester('Object');

	// In IE 10 - Edge 13, `DataView` has string tag `'[object Object]'`.
	// In IE 11, the most common among them, this problem also applies to
	// `Map`, `WeakMap` and `Set`.
	var hasStringTagBug = (
	      supportsDataView && hasObjectTag(new DataView(new ArrayBuffer(8)))
	    ),
	    isIE11 = (typeof Map !== 'undefined' && hasObjectTag(new Map));

	var isDataView = tagTester('DataView');

	// In IE 10 - Edge 13, we need a different heuristic
	// to determine whether an object is a `DataView`.
	function ie10IsDataView(obj) {
	  return obj != null && isFunction$1(obj.getInt8) && isArrayBuffer(obj.buffer);
	}

	var isDataView$1 = (hasStringTagBug ? ie10IsDataView : isDataView);

	// Is a given value an array?
	// Delegates to ECMA5's native `Array.isArray`.
	var isArray = nativeIsArray || tagTester('Array');

	// Internal function to check whether `key` is an own property name of `obj`.
	function has$1(obj, key) {
	  return obj != null && hasOwnProperty.call(obj, key);
	}

	var isArguments = tagTester('Arguments');

	// Define a fallback version of the method in browsers (ahem, IE < 9), where
	// there isn't any inspectable "Arguments" type.
	(function() {
	  if (!isArguments(arguments)) {
	    isArguments = function(obj) {
	      return has$1(obj, 'callee');
	    };
	  }
	}());

	var isArguments$1 = isArguments;

	// Is a given object a finite number?
	function isFinite$1(obj) {
	  return !isSymbol(obj) && _isFinite(obj) && !isNaN(parseFloat(obj));
	}

	// Is the given value `NaN`?
	function isNaN$1(obj) {
	  return isNumber(obj) && _isNaN(obj);
	}

	// Predicate-generating function. Often useful outside of Underscore.
	function constant(value) {
	  return function() {
	    return value;
	  };
	}

	// Common internal logic for `isArrayLike` and `isBufferLike`.
	function createSizePropertyCheck(getSizeProperty) {
	  return function(collection) {
	    var sizeProperty = getSizeProperty(collection);
	    return typeof sizeProperty == 'number' && sizeProperty >= 0 && sizeProperty <= MAX_ARRAY_INDEX;
	  }
	}

	// Internal helper to generate a function to obtain property `key` from `obj`.
	function shallowProperty(key) {
	  return function(obj) {
	    return obj == null ? void 0 : obj[key];
	  };
	}

	// Internal helper to obtain the `byteLength` property of an object.
	var getByteLength = shallowProperty('byteLength');

	// Internal helper to determine whether we should spend extensive checks against
	// `ArrayBuffer` et al.
	var isBufferLike = createSizePropertyCheck(getByteLength);

	// Is a given value a typed array?
	var typedArrayPattern = /\[object ((I|Ui)nt(8|16|32)|Float(32|64)|Uint8Clamped|Big(I|Ui)nt64)Array\]/;
	function isTypedArray(obj) {
	  // `ArrayBuffer.isView` is the most future-proof, so use it when available.
	  // Otherwise, fall back on the above regular expression.
	  return nativeIsView ? (nativeIsView(obj) && !isDataView$1(obj)) :
	                isBufferLike(obj) && typedArrayPattern.test(toString$1.call(obj));
	}

	var isTypedArray$1 = supportsArrayBuffer ? isTypedArray : constant(false);

	// Internal helper to obtain the `length` property of an object.
	var getLength = shallowProperty('length');

	// Internal helper to create a simple lookup structure.
	// `collectNonEnumProps` used to depend on `_.contains`, but this led to
	// circular imports. `emulatedSet` is a one-off solution that only works for
	// arrays of strings.
	function emulatedSet(keys) {
	  var hash = {};
	  for (var l = keys.length, i = 0; i < l; ++i) hash[keys[i]] = true;
	  return {
	    contains: function(key) { return hash[key] === true; },
	    push: function(key) {
	      hash[key] = true;
	      return keys.push(key);
	    }
	  };
	}

	// Internal helper. Checks `keys` for the presence of keys in IE < 9 that won't
	// be iterated by `for key in ...` and thus missed. Extends `keys` in place if
	// needed.
	function collectNonEnumProps(obj, keys) {
	  keys = emulatedSet(keys);
	  var nonEnumIdx = nonEnumerableProps.length;
	  var constructor = obj.constructor;
	  var proto = (isFunction$1(constructor) && constructor.prototype) || ObjProto;

	  // Constructor is a special case.
	  var prop = 'constructor';
	  if (has$1(obj, prop) && !keys.contains(prop)) keys.push(prop);

	  while (nonEnumIdx--) {
	    prop = nonEnumerableProps[nonEnumIdx];
	    if (prop in obj && obj[prop] !== proto[prop] && !keys.contains(prop)) {
	      keys.push(prop);
	    }
	  }
	}

	// Retrieve the names of an object's own properties.
	// Delegates to **ECMAScript 5**'s native `Object.keys`.
	function keys(obj) {
	  if (!isObject(obj)) return [];
	  if (nativeKeys) return nativeKeys(obj);
	  var keys = [];
	  for (var key in obj) if (has$1(obj, key)) keys.push(key);
	  // Ahem, IE < 9.
	  if (hasEnumBug) collectNonEnumProps(obj, keys);
	  return keys;
	}

	// Is a given array, string, or object empty?
	// An "empty" object has no enumerable own-properties.
	function isEmpty(obj) {
	  if (obj == null) return true;
	  // Skip the more expensive `toString`-based type checks if `obj` has no
	  // `.length`.
	  var length = getLength(obj);
	  if (typeof length == 'number' && (
	    isArray(obj) || isString(obj) || isArguments$1(obj)
	  )) return length === 0;
	  return getLength(keys(obj)) === 0;
	}

	// Returns whether an object has a given set of `key:value` pairs.
	function isMatch(object, attrs) {
	  var _keys = keys(attrs), length = _keys.length;
	  if (object == null) return !length;
	  var obj = Object(object);
	  for (var i = 0; i < length; i++) {
	    var key = _keys[i];
	    if (attrs[key] !== obj[key] || !(key in obj)) return false;
	  }
	  return true;
	}

	// If Underscore is called as a function, it returns a wrapped object that can
	// be used OO-style. This wrapper holds altered versions of all functions added
	// through `_.mixin`. Wrapped objects may be chained.
	function _$1(obj) {
	  if (obj instanceof _$1) return obj;
	  if (!(this instanceof _$1)) return new _$1(obj);
	  this._wrapped = obj;
	}

	_$1.VERSION = VERSION;

	// Extracts the result from a wrapped and chained object.
	_$1.prototype.value = function() {
	  return this._wrapped;
	};

	// Provide unwrapping proxies for some methods used in engine operations
	// such as arithmetic and JSON stringification.
	_$1.prototype.valueOf = _$1.prototype.toJSON = _$1.prototype.value;

	_$1.prototype.toString = function() {
	  return String(this._wrapped);
	};

	// Internal function to wrap or shallow-copy an ArrayBuffer,
	// typed array or DataView to a new view, reusing the buffer.
	function toBufferView(bufferSource) {
	  return new Uint8Array(
	    bufferSource.buffer || bufferSource,
	    bufferSource.byteOffset || 0,
	    getByteLength(bufferSource)
	  );
	}

	// We use this string twice, so give it a name for minification.
	var tagDataView = '[object DataView]';

	// Internal recursive comparison function for `_.isEqual`.
	function eq(a, b, aStack, bStack) {
	  // Identical objects are equal. `0 === -0`, but they aren't identical.
	  // See the [Harmony `egal` proposal](https://wiki.ecmascript.org/doku.php?id=harmony:egal).
	  if (a === b) return a !== 0 || 1 / a === 1 / b;
	  // `null` or `undefined` only equal to itself (strict comparison).
	  if (a == null || b == null) return false;
	  // `NaN`s are equivalent, but non-reflexive.
	  if (a !== a) return b !== b;
	  // Exhaust primitive checks
	  var type = typeof a;
	  if (type !== 'function' && type !== 'object' && typeof b != 'object') return false;
	  return deepEq(a, b, aStack, bStack);
	}

	// Internal recursive comparison function for `_.isEqual`.
	function deepEq(a, b, aStack, bStack) {
	  // Unwrap any wrapped objects.
	  if (a instanceof _$1) a = a._wrapped;
	  if (b instanceof _$1) b = b._wrapped;
	  // Compare `[[Class]]` names.
	  var className = toString$1.call(a);
	  if (className !== toString$1.call(b)) return false;
	  // Work around a bug in IE 10 - Edge 13.
	  if (hasStringTagBug && className == '[object Object]' && isDataView$1(a)) {
	    if (!isDataView$1(b)) return false;
	    className = tagDataView;
	  }
	  switch (className) {
	    // These types are compared by value.
	    case '[object RegExp]':
	      // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')
	    case '[object String]':
	      // Primitives and their corresponding object wrappers are equivalent; thus, `"5"` is
	      // equivalent to `new String("5")`.
	      return '' + a === '' + b;
	    case '[object Number]':
	      // `NaN`s are equivalent, but non-reflexive.
	      // Object(NaN) is equivalent to NaN.
	      if (+a !== +a) return +b !== +b;
	      // An `egal` comparison is performed for other numeric values.
	      return +a === 0 ? 1 / +a === 1 / b : +a === +b;
	    case '[object Date]':
	    case '[object Boolean]':
	      // Coerce dates and booleans to numeric primitive values. Dates are compared by their
	      // millisecond representations. Note that invalid dates with millisecond representations
	      // of `NaN` are not equivalent.
	      return +a === +b;
	    case '[object Symbol]':
	      return SymbolProto.valueOf.call(a) === SymbolProto.valueOf.call(b);
	    case '[object ArrayBuffer]':
	    case tagDataView:
	      // Coerce to typed array so we can fall through.
	      return deepEq(toBufferView(a), toBufferView(b), aStack, bStack);
	  }

	  var areArrays = className === '[object Array]';
	  if (!areArrays && isTypedArray$1(a)) {
	      var byteLength = getByteLength(a);
	      if (byteLength !== getByteLength(b)) return false;
	      if (a.buffer === b.buffer && a.byteOffset === b.byteOffset) return true;
	      areArrays = true;
	  }
	  if (!areArrays) {
	    if (typeof a != 'object' || typeof b != 'object') return false;

	    // Objects with different constructors are not equivalent, but `Object`s or `Array`s
	    // from different frames are.
	    var aCtor = a.constructor, bCtor = b.constructor;
	    if (aCtor !== bCtor && !(isFunction$1(aCtor) && aCtor instanceof aCtor &&
	                             isFunction$1(bCtor) && bCtor instanceof bCtor)
	                        && ('constructor' in a && 'constructor' in b)) {
	      return false;
	    }
	  }
	  // Assume equality for cyclic structures. The algorithm for detecting cyclic
	  // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.

	  // Initializing stack of traversed objects.
	  // It's done here since we only need them for objects and arrays comparison.
	  aStack = aStack || [];
	  bStack = bStack || [];
	  var length = aStack.length;
	  while (length--) {
	    // Linear search. Performance is inversely proportional to the number of
	    // unique nested structures.
	    if (aStack[length] === a) return bStack[length] === b;
	  }

	  // Add the first object to the stack of traversed objects.
	  aStack.push(a);
	  bStack.push(b);

	  // Recursively compare objects and arrays.
	  if (areArrays) {
	    // Compare array lengths to determine if a deep comparison is necessary.
	    length = a.length;
	    if (length !== b.length) return false;
	    // Deep compare the contents, ignoring non-numeric properties.
	    while (length--) {
	      if (!eq(a[length], b[length], aStack, bStack)) return false;
	    }
	  } else {
	    // Deep compare objects.
	    var _keys = keys(a), key;
	    length = _keys.length;
	    // Ensure that both objects contain the same number of properties before comparing deep equality.
	    if (keys(b).length !== length) return false;
	    while (length--) {
	      // Deep compare each member
	      key = _keys[length];
	      if (!(has$1(b, key) && eq(a[key], b[key], aStack, bStack))) return false;
	    }
	  }
	  // Remove the first object from the stack of traversed objects.
	  aStack.pop();
	  bStack.pop();
	  return true;
	}

	// Perform a deep comparison to check if two objects are equal.
	function isEqual(a, b) {
	  return eq(a, b);
	}

	// Retrieve all the enumerable property names of an object.
	function allKeys(obj) {
	  if (!isObject(obj)) return [];
	  var keys = [];
	  for (var key in obj) keys.push(key);
	  // Ahem, IE < 9.
	  if (hasEnumBug) collectNonEnumProps(obj, keys);
	  return keys;
	}

	// Since the regular `Object.prototype.toString` type tests don't work for
	// some types in IE 11, we use a fingerprinting heuristic instead, based
	// on the methods. It's not great, but it's the best we got.
	// The fingerprint method lists are defined below.
	function ie11fingerprint(methods) {
	  var length = getLength(methods);
	  return function(obj) {
	    if (obj == null) return false;
	    // `Map`, `WeakMap` and `Set` have no enumerable keys.
	    var keys = allKeys(obj);
	    if (getLength(keys)) return false;
	    for (var i = 0; i < length; i++) {
	      if (!isFunction$1(obj[methods[i]])) return false;
	    }
	    // If we are testing against `WeakMap`, we need to ensure that
	    // `obj` doesn't have a `forEach` method in order to distinguish
	    // it from a regular `Map`.
	    return methods !== weakMapMethods || !isFunction$1(obj[forEachName]);
	  };
	}

	// In the interest of compact minification, we write
	// each string in the fingerprints only once.
	var forEachName = 'forEach',
	    hasName = 'has',
	    commonInit = ['clear', 'delete'],
	    mapTail = ['get', hasName, 'set'];

	// `Map`, `WeakMap` and `Set` each have slightly different
	// combinations of the above sublists.
	var mapMethods = commonInit.concat(forEachName, mapTail),
	    weakMapMethods = commonInit.concat(mapTail),
	    setMethods = ['add'].concat(commonInit, forEachName, hasName);

	var isMap = isIE11 ? ie11fingerprint(mapMethods) : tagTester('Map');

	var isWeakMap = isIE11 ? ie11fingerprint(weakMapMethods) : tagTester('WeakMap');

	var isSet = isIE11 ? ie11fingerprint(setMethods) : tagTester('Set');

	var isWeakSet = tagTester('WeakSet');

	// Retrieve the values of an object's properties.
	function values(obj) {
	  var _keys = keys(obj);
	  var length = _keys.length;
	  var values = Array(length);
	  for (var i = 0; i < length; i++) {
	    values[i] = obj[_keys[i]];
	  }
	  return values;
	}

	// Convert an object into a list of `[key, value]` pairs.
	// The opposite of `_.object` with one argument.
	function pairs(obj) {
	  var _keys = keys(obj);
	  var length = _keys.length;
	  var pairs = Array(length);
	  for (var i = 0; i < length; i++) {
	    pairs[i] = [_keys[i], obj[_keys[i]]];
	  }
	  return pairs;
	}

	// Invert the keys and values of an object. The values must be serializable.
	function invert(obj) {
	  var result = {};
	  var _keys = keys(obj);
	  for (var i = 0, length = _keys.length; i < length; i++) {
	    result[obj[_keys[i]]] = _keys[i];
	  }
	  return result;
	}

	// Return a sorted list of the function names available on the object.
	function functions(obj) {
	  var names = [];
	  for (var key in obj) {
	    if (isFunction$1(obj[key])) names.push(key);
	  }
	  return names.sort();
	}

	// An internal function for creating assigner functions.
	function createAssigner(keysFunc, defaults) {
	  return function(obj) {
	    var length = arguments.length;
	    if (defaults) obj = Object(obj);
	    if (length < 2 || obj == null) return obj;
	    for (var index = 1; index < length; index++) {
	      var source = arguments[index],
	          keys = keysFunc(source),
	          l = keys.length;
	      for (var i = 0; i < l; i++) {
	        var key = keys[i];
	        if (!defaults || obj[key] === void 0) obj[key] = source[key];
	      }
	    }
	    return obj;
	  };
	}

	// Extend a given object with all the properties in passed-in object(s).
	var extend = createAssigner(allKeys);

	// Assigns a given object with all the own properties in the passed-in
	// object(s).
	// (https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)
	var extendOwn = createAssigner(keys);

	// Fill in a given object with default properties.
	var defaults = createAssigner(allKeys, true);

	// Create a naked function reference for surrogate-prototype-swapping.
	function ctor() {
	  return function(){};
	}

	// An internal function for creating a new object that inherits from another.
	function baseCreate(prototype) {
	  if (!isObject(prototype)) return {};
	  if (nativeCreate) return nativeCreate(prototype);
	  var Ctor = ctor();
	  Ctor.prototype = prototype;
	  var result = new Ctor;
	  Ctor.prototype = null;
	  return result;
	}

	// Creates an object that inherits from the given prototype object.
	// If additional properties are provided then they will be added to the
	// created object.
	function create(prototype, props) {
	  var result = baseCreate(prototype);
	  if (props) extendOwn(result, props);
	  return result;
	}

	// Create a (shallow-cloned) duplicate of an object.
	function clone(obj) {
	  if (!isObject(obj)) return obj;
	  return isArray(obj) ? obj.slice() : extend({}, obj);
	}

	// Invokes `interceptor` with the `obj` and then returns `obj`.
	// The primary purpose of this method is to "tap into" a method chain, in
	// order to perform operations on intermediate results within the chain.
	function tap(obj, interceptor) {
	  interceptor(obj);
	  return obj;
	}

	// Normalize a (deep) property `path` to array.
	// Like `_.iteratee`, this function can be customized.
	function toPath$1(path) {
	  return isArray(path) ? path : [path];
	}
	_$1.toPath = toPath$1;

	// Internal wrapper for `_.toPath` to enable minification.
	// Similar to `cb` for `_.iteratee`.
	function toPath(path) {
	  return _$1.toPath(path);
	}

	// Internal function to obtain a nested property in `obj` along `path`.
	function deepGet(obj, path) {
	  var length = path.length;
	  for (var i = 0; i < length; i++) {
	    if (obj == null) return void 0;
	    obj = obj[path[i]];
	  }
	  return length ? obj : void 0;
	}

	// Get the value of the (deep) property on `path` from `object`.
	// If any property in `path` does not exist or if the value is
	// `undefined`, return `defaultValue` instead.
	// The `path` is normalized through `_.toPath`.
	function get(object, path, defaultValue) {
	  var value = deepGet(object, toPath(path));
	  return isUndefined(value) ? defaultValue : value;
	}

	// Shortcut function for checking if an object has a given property directly on
	// itself (in other words, not on a prototype). Unlike the internal `has`
	// function, this public version can also traverse nested properties.
	function has(obj, path) {
	  path = toPath(path);
	  var length = path.length;
	  for (var i = 0; i < length; i++) {
	    var key = path[i];
	    if (!has$1(obj, key)) return false;
	    obj = obj[key];
	  }
	  return !!length;
	}

	// Keep the identity function around for default iteratees.
	function identity(value) {
	  return value;
	}

	// Returns a predicate for checking whether an object has a given set of
	// `key:value` pairs.
	function matcher(attrs) {
	  attrs = extendOwn({}, attrs);
	  return function(obj) {
	    return isMatch(obj, attrs);
	  };
	}

	// Creates a function that, when passed an object, will traverse that object’s
	// properties down the given `path`, specified as an array of keys or indices.
	function property(path) {
	  path = toPath(path);
	  return function(obj) {
	    return deepGet(obj, path);
	  };
	}

	// Internal function that returns an efficient (for current engines) version
	// of the passed-in callback, to be repeatedly applied in other Underscore
	// functions.
	function optimizeCb(func, context, argCount) {
	  if (context === void 0) return func;
	  switch (argCount == null ? 3 : argCount) {
	    case 1: return function(value) {
	      return func.call(context, value);
	    };
	    // The 2-argument case is omitted because we’re not using it.
	    case 3: return function(value, index, collection) {
	      return func.call(context, value, index, collection);
	    };
	    case 4: return function(accumulator, value, index, collection) {
	      return func.call(context, accumulator, value, index, collection);
	    };
	  }
	  return function() {
	    return func.apply(context, arguments);
	  };
	}

	// An internal function to generate callbacks that can be applied to each
	// element in a collection, returning the desired result — either `_.identity`,
	// an arbitrary callback, a property matcher, or a property accessor.
	function baseIteratee(value, context, argCount) {
	  if (value == null) return identity;
	  if (isFunction$1(value)) return optimizeCb(value, context, argCount);
	  if (isObject(value) && !isArray(value)) return matcher(value);
	  return property(value);
	}

	// External wrapper for our callback generator. Users may customize
	// `_.iteratee` if they want additional predicate/iteratee shorthand styles.
	// This abstraction hides the internal-only `argCount` argument.
	function iteratee(value, context) {
	  return baseIteratee(value, context, Infinity);
	}
	_$1.iteratee = iteratee;

	// The function we call internally to generate a callback. It invokes
	// `_.iteratee` if overridden, otherwise `baseIteratee`.
	function cb(value, context, argCount) {
	  if (_$1.iteratee !== iteratee) return _$1.iteratee(value, context);
	  return baseIteratee(value, context, argCount);
	}

	// Returns the results of applying the `iteratee` to each element of `obj`.
	// In contrast to `_.map` it returns an object.
	function mapObject(obj, iteratee, context) {
	  iteratee = cb(iteratee, context);
	  var _keys = keys(obj),
	      length = _keys.length,
	      results = {};
	  for (var index = 0; index < length; index++) {
	    var currentKey = _keys[index];
	    results[currentKey] = iteratee(obj[currentKey], currentKey, obj);
	  }
	  return results;
	}

	// Predicate-generating function. Often useful outside of Underscore.
	function noop(){}

	// Generates a function for a given object that returns a given property.
	function propertyOf(obj) {
	  if (obj == null) return noop;
	  return function(path) {
	    return get(obj, path);
	  };
	}

	// Run a function **n** times.
	function times(n, iteratee, context) {
	  var accum = Array(Math.max(0, n));
	  iteratee = optimizeCb(iteratee, context, 1);
	  for (var i = 0; i < n; i++) accum[i] = iteratee(i);
	  return accum;
	}

	// Return a random integer between `min` and `max` (inclusive).
	function random(min, max) {
	  if (max == null) {
	    max = min;
	    min = 0;
	  }
	  return min + Math.floor(Math.random() * (max - min + 1));
	}

	// A (possibly faster) way to get the current timestamp as an integer.
	var now = Date.now || function() {
	  return new Date().getTime();
	};

	// Internal helper to generate functions for escaping and unescaping strings
	// to/from HTML interpolation.
	function createEscaper(map) {
	  var escaper = function(match) {
	    return map[match];
	  };
	  // Regexes for identifying a key that needs to be escaped.
	  var source = '(?:' + keys(map).join('|') + ')';
	  var testRegexp = RegExp(source);
	  var replaceRegexp = RegExp(source, 'g');
	  return function(string) {
	    string = string == null ? '' : '' + string;
	    return testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string;
	  };
	}

	// Internal list of HTML entities for escaping.
	var escapeMap = {
	  '&': '&amp;',
	  '<': '&lt;',
	  '>': '&gt;',
	  '"': '&quot;',
	  "'": '&#x27;',
	  '`': '&#x60;'
	};

	// Function for escaping strings to HTML interpolation.
	var escape = createEscaper(escapeMap);

	// Internal list of HTML entities for unescaping.
	var unescapeMap = invert(escapeMap);

	// Function for unescaping strings from HTML interpolation.
	var unescape$1 = createEscaper(unescapeMap);

	// By default, Underscore uses ERB-style template delimiters. Change the
	// following template settings to use alternative delimiters.
	var templateSettings = _$1.templateSettings = {
	  evaluate: /<%([\s\S]+?)%>/g,
	  interpolate: /<%=([\s\S]+?)%>/g,
	  escape: /<%-([\s\S]+?)%>/g
	};

	// When customizing `_.templateSettings`, if you don't want to define an
	// interpolation, evaluation or escaping regex, we need one that is
	// guaranteed not to match.
	var noMatch = /(.)^/;

	// Certain characters need to be escaped so that they can be put into a
	// string literal.
	var escapes = {
	  "'": "'",
	  '\\': '\\',
	  '\r': 'r',
	  '\n': 'n',
	  '\u2028': 'u2028',
	  '\u2029': 'u2029'
	};

	var escapeRegExp = /\\|'|\r|\n|\u2028|\u2029/g;

	function escapeChar(match) {
	  return '\\' + escapes[match];
	}

	// In order to prevent third-party code injection through
	// `_.templateSettings.variable`, we test it against the following regular
	// expression. It is intentionally a bit more liberal than just matching valid
	// identifiers, but still prevents possible loopholes through defaults or
	// destructuring assignment.
	var bareIdentifier = /^\s*(\w|\$)+\s*$/;

	// JavaScript micro-templating, similar to John Resig's implementation.
	// Underscore templating handles arbitrary delimiters, preserves whitespace,
	// and correctly escapes quotes within interpolated code.
	// NB: `oldSettings` only exists for backwards compatibility.
	function template(text, settings, oldSettings) {
	  if (!settings && oldSettings) settings = oldSettings;
	  settings = defaults({}, settings, _$1.templateSettings);

	  // Combine delimiters into one regular expression via alternation.
	  var matcher = RegExp([
	    (settings.escape || noMatch).source,
	    (settings.interpolate || noMatch).source,
	    (settings.evaluate || noMatch).source
	  ].join('|') + '|$', 'g');

	  // Compile the template source, escaping string literals appropriately.
	  var index = 0;
	  var source = "__p+='";
	  text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {
	    source += text.slice(index, offset).replace(escapeRegExp, escapeChar);
	    index = offset + match.length;

	    if (escape) {
	      source += "'+\n((__t=(" + escape + "))==null?'':_.escape(__t))+\n'";
	    } else if (interpolate) {
	      source += "'+\n((__t=(" + interpolate + "))==null?'':__t)+\n'";
	    } else if (evaluate) {
	      source += "';\n" + evaluate + "\n__p+='";
	    }

	    // Adobe VMs need the match returned to produce the correct offset.
	    return match;
	  });
	  source += "';\n";

	  var argument = settings.variable;
	  if (argument) {
	    // Insure against third-party code injection. (CVE-2021-23358)
	    if (!bareIdentifier.test(argument)) throw new Error(
	      'variable is not a bare identifier: ' + argument
	    );
	  } else {
	    // If a variable is not specified, place data values in local scope.
	    source = 'with(obj||{}){\n' + source + '}\n';
	    argument = 'obj';
	  }

	  source = "var __t,__p='',__j=Array.prototype.join," +
	    "print=function(){__p+=__j.call(arguments,'');};\n" +
	    source + 'return __p;\n';

	  var render;
	  try {
	    render = new Function(argument, '_', source);
	  } catch (e) {
	    e.source = source;
	    throw e;
	  }

	  var template = function(data) {
	    return render.call(this, data, _$1);
	  };

	  // Provide the compiled source as a convenience for precompilation.
	  template.source = 'function(' + argument + '){\n' + source + '}';

	  return template;
	}

	// Traverses the children of `obj` along `path`. If a child is a function, it
	// is invoked with its parent as context. Returns the value of the final
	// child, or `fallback` if any child is undefined.
	function result(obj, path, fallback) {
	  path = toPath(path);
	  var length = path.length;
	  if (!length) {
	    return isFunction$1(fallback) ? fallback.call(obj) : fallback;
	  }
	  for (var i = 0; i < length; i++) {
	    var prop = obj == null ? void 0 : obj[path[i]];
	    if (prop === void 0) {
	      prop = fallback;
	      i = length; // Ensure we don't continue iterating.
	    }
	    obj = isFunction$1(prop) ? prop.call(obj) : prop;
	  }
	  return obj;
	}

	// Generate a unique integer id (unique within the entire client session).
	// Useful for temporary DOM ids.
	var idCounter = 0;
	function uniqueId(prefix) {
	  var id = ++idCounter + '';
	  return prefix ? prefix + id : id;
	}

	// Start chaining a wrapped Underscore object.
	function chain(obj) {
	  var instance = _$1(obj);
	  instance._chain = true;
	  return instance;
	}

	// Internal function to execute `sourceFunc` bound to `context` with optional
	// `args`. Determines whether to execute a function as a constructor or as a
	// normal function.
	function executeBound(sourceFunc, boundFunc, context, callingContext, args) {
	  if (!(callingContext instanceof boundFunc)) return sourceFunc.apply(context, args);
	  var self = baseCreate(sourceFunc.prototype);
	  var result = sourceFunc.apply(self, args);
	  if (isObject(result)) return result;
	  return self;
	}

	// Partially apply a function by creating a version that has had some of its
	// arguments pre-filled, without changing its dynamic `this` context. `_` acts
	// as a placeholder by default, allowing any combination of arguments to be
	// pre-filled. Set `_.partial.placeholder` for a custom placeholder argument.
	var partial = restArguments(function(func, boundArgs) {
	  var placeholder = partial.placeholder;
	  var bound = function() {
	    var position = 0, length = boundArgs.length;
	    var args = Array(length);
	    for (var i = 0; i < length; i++) {
	      args[i] = boundArgs[i] === placeholder ? arguments[position++] : boundArgs[i];
	    }
	    while (position < arguments.length) args.push(arguments[position++]);
	    return executeBound(func, bound, this, this, args);
	  };
	  return bound;
	});

	partial.placeholder = _$1;

	// Create a function bound to a given object (assigning `this`, and arguments,
	// optionally).
	var bind = restArguments(function(func, context, args) {
	  if (!isFunction$1(func)) throw new TypeError('Bind must be called on a function');
	  var bound = restArguments(function(callArgs) {
	    return executeBound(func, bound, context, this, args.concat(callArgs));
	  });
	  return bound;
	});

	// Internal helper for collection methods to determine whether a collection
	// should be iterated as an array or as an object.
	// Related: https://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength
	// Avoids a very nasty iOS 8 JIT bug on ARM-64. #2094
	var isArrayLike = createSizePropertyCheck(getLength);

	// Internal implementation of a recursive `flatten` function.
	function flatten$1(input, depth, strict, output) {
	  output = output || [];
	  if (!depth && depth !== 0) {
	    depth = Infinity;
	  } else if (depth <= 0) {
	    return output.concat(input);
	  }
	  var idx = output.length;
	  for (var i = 0, length = getLength(input); i < length; i++) {
	    var value = input[i];
	    if (isArrayLike(value) && (isArray(value) || isArguments$1(value))) {
	      // Flatten current level of array or arguments object.
	      if (depth > 1) {
	        flatten$1(value, depth - 1, strict, output);
	        idx = output.length;
	      } else {
	        var j = 0, len = value.length;
	        while (j < len) output[idx++] = value[j++];
	      }
	    } else if (!strict) {
	      output[idx++] = value;
	    }
	  }
	  return output;
	}

	// Bind a number of an object's methods to that object. Remaining arguments
	// are the method names to be bound. Useful for ensuring that all callbacks
	// defined on an object belong to it.
	var bindAll = restArguments(function(obj, keys) {
	  keys = flatten$1(keys, false, false);
	  var index = keys.length;
	  if (index < 1) throw new Error('bindAll must be passed function names');
	  while (index--) {
	    var key = keys[index];
	    obj[key] = bind(obj[key], obj);
	  }
	  return obj;
	});

	// Memoize an expensive function by storing its results.
	function memoize(func, hasher) {
	  var memoize = function(key) {
	    var cache = memoize.cache;
	    var address = '' + (hasher ? hasher.apply(this, arguments) : key);
	    if (!has$1(cache, address)) cache[address] = func.apply(this, arguments);
	    return cache[address];
	  };
	  memoize.cache = {};
	  return memoize;
	}

	// Delays a function for the given number of milliseconds, and then calls
	// it with the arguments supplied.
	var delay = restArguments(function(func, wait, args) {
	  return setTimeout(function() {
	    return func.apply(null, args);
	  }, wait);
	});

	// Defers a function, scheduling it to run after the current call stack has
	// cleared.
	var defer = partial(delay, _$1, 1);

	// Returns a function, that, when invoked, will only be triggered at most once
	// during a given window of time. Normally, the throttled function will run
	// as much as it can, without ever going more than once per `wait` duration;
	// but if you'd like to disable the execution on the leading edge, pass
	// `{leading: false}`. To disable execution on the trailing edge, ditto.
	function throttle(func, wait, options) {
	  var timeout, context, args, result;
	  var previous = 0;
	  if (!options) options = {};

	  var later = function() {
	    previous = options.leading === false ? 0 : now();
	    timeout = null;
	    result = func.apply(context, args);
	    if (!timeout) context = args = null;
	  };

	  var throttled = function() {
	    var _now = now();
	    if (!previous && options.leading === false) previous = _now;
	    var remaining = wait - (_now - previous);
	    context = this;
	    args = arguments;
	    if (remaining <= 0 || remaining > wait) {
	      if (timeout) {
	        clearTimeout(timeout);
	        timeout = null;
	      }
	      previous = _now;
	      result = func.apply(context, args);
	      if (!timeout) context = args = null;
	    } else if (!timeout && options.trailing !== false) {
	      timeout = setTimeout(later, remaining);
	    }
	    return result;
	  };

	  throttled.cancel = function() {
	    clearTimeout(timeout);
	    previous = 0;
	    timeout = context = args = null;
	  };

	  return throttled;
	}

	// When a sequence of calls of the returned function ends, the argument
	// function is triggered. The end of a sequence is defined by the `wait`
	// parameter. If `immediate` is passed, the argument function will be
	// triggered at the beginning of the sequence instead of at the end.
	function debounce(func, wait, immediate) {
	  var timeout, previous, args, result, context;

	  var later = function() {
	    var passed = now() - previous;
	    if (wait > passed) {
	      timeout = setTimeout(later, wait - passed);
	    } else {
	      timeout = null;
	      if (!immediate) result = func.apply(context, args);
	      // This check is needed because `func` can recursively invoke `debounced`.
	      if (!timeout) args = context = null;
	    }
	  };

	  var debounced = restArguments(function(_args) {
	    context = this;
	    args = _args;
	    previous = now();
	    if (!timeout) {
	      timeout = setTimeout(later, wait);
	      if (immediate) result = func.apply(context, args);
	    }
	    return result;
	  });

	  debounced.cancel = function() {
	    clearTimeout(timeout);
	    timeout = args = context = null;
	  };

	  return debounced;
	}

	// Returns the first function passed as an argument to the second,
	// allowing you to adjust arguments, run code before and after, and
	// conditionally execute the original function.
	function wrap(func, wrapper) {
	  return partial(wrapper, func);
	}

	// Returns a negated version of the passed-in predicate.
	function negate(predicate) {
	  return function() {
	    return !predicate.apply(this, arguments);
	  };
	}

	// Returns a function that is the composition of a list of functions, each
	// consuming the return value of the function that follows.
	function compose() {
	  var args = arguments;
	  var start = args.length - 1;
	  return function() {
	    var i = start;
	    var result = args[start].apply(this, arguments);
	    while (i--) result = args[i].call(this, result);
	    return result;
	  };
	}

	// Returns a function that will only be executed on and after the Nth call.
	function after(times, func) {
	  return function() {
	    if (--times < 1) {
	      return func.apply(this, arguments);
	    }
	  };
	}

	// Returns a function that will only be executed up to (but not including) the
	// Nth call.
	function before(times, func) {
	  var memo;
	  return function() {
	    if (--times > 0) {
	      memo = func.apply(this, arguments);
	    }
	    if (times <= 1) func = null;
	    return memo;
	  };
	}

	// Returns a function that will be executed at most one time, no matter how
	// often you call it. Useful for lazy initialization.
	var once = partial(before, 2);

	// Returns the first key on an object that passes a truth test.
	function findKey(obj, predicate, context) {
	  predicate = cb(predicate, context);
	  var _keys = keys(obj), key;
	  for (var i = 0, length = _keys.length; i < length; i++) {
	    key = _keys[i];
	    if (predicate(obj[key], key, obj)) return key;
	  }
	}

	// Internal function to generate `_.findIndex` and `_.findLastIndex`.
	function createPredicateIndexFinder(dir) {
	  return function(array, predicate, context) {
	    predicate = cb(predicate, context);
	    var length = getLength(array);
	    var index = dir > 0 ? 0 : length - 1;
	    for (; index >= 0 && index < length; index += dir) {
	      if (predicate(array[index], index, array)) return index;
	    }
	    return -1;
	  };
	}

	// Returns the first index on an array-like that passes a truth test.
	var findIndex = createPredicateIndexFinder(1);

	// Returns the last index on an array-like that passes a truth test.
	var findLastIndex = createPredicateIndexFinder(-1);

	// Use a comparator function to figure out the smallest index at which
	// an object should be inserted so as to maintain order. Uses binary search.
	function sortedIndex(array, obj, iteratee, context) {
	  iteratee = cb(iteratee, context, 1);
	  var value = iteratee(obj);
	  var low = 0, high = getLength(array);
	  while (low < high) {
	    var mid = Math.floor((low + high) / 2);
	    if (iteratee(array[mid]) < value) low = mid + 1; else high = mid;
	  }
	  return low;
	}

	// Internal function to generate the `_.indexOf` and `_.lastIndexOf` functions.
	function createIndexFinder(dir, predicateFind, sortedIndex) {
	  return function(array, item, idx) {
	    var i = 0, length = getLength(array);
	    if (typeof idx == 'number') {
	      if (dir > 0) {
	        i = idx >= 0 ? idx : Math.max(idx + length, i);
	      } else {
	        length = idx >= 0 ? Math.min(idx + 1, length) : idx + length + 1;
	      }
	    } else if (sortedIndex && idx && length) {
	      idx = sortedIndex(array, item);
	      return array[idx] === item ? idx : -1;
	    }
	    if (item !== item) {
	      idx = predicateFind(slice.call(array, i, length), isNaN$1);
	      return idx >= 0 ? idx + i : -1;
	    }
	    for (idx = dir > 0 ? i : length - 1; idx >= 0 && idx < length; idx += dir) {
	      if (array[idx] === item) return idx;
	    }
	    return -1;
	  };
	}

	// Return the position of the first occurrence of an item in an array,
	// or -1 if the item is not included in the array.
	// If the array is large and already in sort order, pass `true`
	// for **isSorted** to use binary search.
	var indexOf = createIndexFinder(1, findIndex, sortedIndex);

	// Return the position of the last occurrence of an item in an array,
	// or -1 if the item is not included in the array.
	var lastIndexOf = createIndexFinder(-1, findLastIndex);

	// Return the first value which passes a truth test.
	function find(obj, predicate, context) {
	  var keyFinder = isArrayLike(obj) ? findIndex : findKey;
	  var key = keyFinder(obj, predicate, context);
	  if (key !== void 0 && key !== -1) return obj[key];
	}

	// Convenience version of a common use case of `_.find`: getting the first
	// object containing specific `key:value` pairs.
	function findWhere(obj, attrs) {
	  return find(obj, matcher(attrs));
	}

	// The cornerstone for collection functions, an `each`
	// implementation, aka `forEach`.
	// Handles raw objects in addition to array-likes. Treats all
	// sparse array-likes as if they were dense.
	function each(obj, iteratee, context) {
	  iteratee = optimizeCb(iteratee, context);
	  var i, length;
	  if (isArrayLike(obj)) {
	    for (i = 0, length = obj.length; i < length; i++) {
	      iteratee(obj[i], i, obj);
	    }
	  } else {
	    var _keys = keys(obj);
	    for (i = 0, length = _keys.length; i < length; i++) {
	      iteratee(obj[_keys[i]], _keys[i], obj);
	    }
	  }
	  return obj;
	}

	// Return the results of applying the iteratee to each element.
	function map(obj, iteratee, context) {
	  iteratee = cb(iteratee, context);
	  var _keys = !isArrayLike(obj) && keys(obj),
	      length = (_keys || obj).length,
	      results = Array(length);
	  for (var index = 0; index < length; index++) {
	    var currentKey = _keys ? _keys[index] : index;
	    results[index] = iteratee(obj[currentKey], currentKey, obj);
	  }
	  return results;
	}

	// Internal helper to create a reducing function, iterating left or right.
	function createReduce(dir) {
	  // Wrap code that reassigns argument variables in a separate function than
	  // the one that accesses `arguments.length` to avoid a perf hit. (#1991)
	  var reducer = function(obj, iteratee, memo, initial) {
	    var _keys = !isArrayLike(obj) && keys(obj),
	        length = (_keys || obj).length,
	        index = dir > 0 ? 0 : length - 1;
	    if (!initial) {
	      memo = obj[_keys ? _keys[index] : index];
	      index += dir;
	    }
	    for (; index >= 0 && index < length; index += dir) {
	      var currentKey = _keys ? _keys[index] : index;
	      memo = iteratee(memo, obj[currentKey], currentKey, obj);
	    }
	    return memo;
	  };

	  return function(obj, iteratee, memo, context) {
	    var initial = arguments.length >= 3;
	    return reducer(obj, optimizeCb(iteratee, context, 4), memo, initial);
	  };
	}

	// **Reduce** builds up a single result from a list of values, aka `inject`,
	// or `foldl`.
	var reduce = createReduce(1);

	// The right-associative version of reduce, also known as `foldr`.
	var reduceRight = createReduce(-1);

	// Return all the elements that pass a truth test.
	function filter(obj, predicate, context) {
	  var results = [];
	  predicate = cb(predicate, context);
	  each(obj, function(value, index, list) {
	    if (predicate(value, index, list)) results.push(value);
	  });
	  return results;
	}

	// Return all the elements for which a truth test fails.
	function reject(obj, predicate, context) {
	  return filter(obj, negate(cb(predicate)), context);
	}

	// Determine whether all of the elements pass a truth test.
	function every(obj, predicate, context) {
	  predicate = cb(predicate, context);
	  var _keys = !isArrayLike(obj) && keys(obj),
	      length = (_keys || obj).length;
	  for (var index = 0; index < length; index++) {
	    var currentKey = _keys ? _keys[index] : index;
	    if (!predicate(obj[currentKey], currentKey, obj)) return false;
	  }
	  return true;
	}

	// Determine if at least one element in the object passes a truth test.
	function some(obj, predicate, context) {
	  predicate = cb(predicate, context);
	  var _keys = !isArrayLike(obj) && keys(obj),
	      length = (_keys || obj).length;
	  for (var index = 0; index < length; index++) {
	    var currentKey = _keys ? _keys[index] : index;
	    if (predicate(obj[currentKey], currentKey, obj)) return true;
	  }
	  return false;
	}

	// Determine if the array or object contains a given item (using `===`).
	function contains(obj, item, fromIndex, guard) {
	  if (!isArrayLike(obj)) obj = values(obj);
	  if (typeof fromIndex != 'number' || guard) fromIndex = 0;
	  return indexOf(obj, item, fromIndex) >= 0;
	}

	// Invoke a method (with arguments) on every item in a collection.
	var invoke = restArguments(function(obj, path, args) {
	  var contextPath, func;
	  if (isFunction$1(path)) {
	    func = path;
	  } else {
	    path = toPath(path);
	    contextPath = path.slice(0, -1);
	    path = path[path.length - 1];
	  }
	  return map(obj, function(context) {
	    var method = func;
	    if (!method) {
	      if (contextPath && contextPath.length) {
	        context = deepGet(context, contextPath);
	      }
	      if (context == null) return void 0;
	      method = context[path];
	    }
	    return method == null ? method : method.apply(context, args);
	  });
	});

	// Convenience version of a common use case of `_.map`: fetching a property.
	function pluck(obj, key) {
	  return map(obj, property(key));
	}

	// Convenience version of a common use case of `_.filter`: selecting only
	// objects containing specific `key:value` pairs.
	function where(obj, attrs) {
	  return filter(obj, matcher(attrs));
	}

	// Return the maximum element (or element-based computation).
	function max(obj, iteratee, context) {
	  var result = -Infinity, lastComputed = -Infinity,
	      value, computed;
	  if (iteratee == null || (typeof iteratee == 'number' && typeof obj[0] != 'object' && obj != null)) {
	    obj = isArrayLike(obj) ? obj : values(obj);
	    for (var i = 0, length = obj.length; i < length; i++) {
	      value = obj[i];
	      if (value != null && value > result) {
	        result = value;
	      }
	    }
	  } else {
	    iteratee = cb(iteratee, context);
	    each(obj, function(v, index, list) {
	      computed = iteratee(v, index, list);
	      if (computed > lastComputed || (computed === -Infinity && result === -Infinity)) {
	        result = v;
	        lastComputed = computed;
	      }
	    });
	  }
	  return result;
	}

	// Return the minimum element (or element-based computation).
	function min(obj, iteratee, context) {
	  var result = Infinity, lastComputed = Infinity,
	      value, computed;
	  if (iteratee == null || (typeof iteratee == 'number' && typeof obj[0] != 'object' && obj != null)) {
	    obj = isArrayLike(obj) ? obj : values(obj);
	    for (var i = 0, length = obj.length; i < length; i++) {
	      value = obj[i];
	      if (value != null && value < result) {
	        result = value;
	      }
	    }
	  } else {
	    iteratee = cb(iteratee, context);
	    each(obj, function(v, index, list) {
	      computed = iteratee(v, index, list);
	      if (computed < lastComputed || (computed === Infinity && result === Infinity)) {
	        result = v;
	        lastComputed = computed;
	      }
	    });
	  }
	  return result;
	}

	// Safely create a real, live array from anything iterable.
	var reStrSymbol = /[^\ud800-\udfff]|[\ud800-\udbff][\udc00-\udfff]|[\ud800-\udfff]/g;
	function toArray(obj) {
	  if (!obj) return [];
	  if (isArray(obj)) return slice.call(obj);
	  if (isString(obj)) {
	    // Keep surrogate pair characters together.
	    return obj.match(reStrSymbol);
	  }
	  if (isArrayLike(obj)) return map(obj, identity);
	  return values(obj);
	}

	// Sample **n** random values from a collection using the modern version of the
	// [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher–Yates_shuffle).
	// If **n** is not specified, returns a single random element.
	// The internal `guard` argument allows it to work with `_.map`.
	function sample(obj, n, guard) {
	  if (n == null || guard) {
	    if (!isArrayLike(obj)) obj = values(obj);
	    return obj[random(obj.length - 1)];
	  }
	  var sample = toArray(obj);
	  var length = getLength(sample);
	  n = Math.max(Math.min(n, length), 0);
	  var last = length - 1;
	  for (var index = 0; index < n; index++) {
	    var rand = random(index, last);
	    var temp = sample[index];
	    sample[index] = sample[rand];
	    sample[rand] = temp;
	  }
	  return sample.slice(0, n);
	}

	// Shuffle a collection.
	function shuffle(obj) {
	  return sample(obj, Infinity);
	}

	// Sort the object's values by a criterion produced by an iteratee.
	function sortBy(obj, iteratee, context) {
	  var index = 0;
	  iteratee = cb(iteratee, context);
	  return pluck(map(obj, function(value, key, list) {
	    return {
	      value: value,
	      index: index++,
	      criteria: iteratee(value, key, list)
	    };
	  }).sort(function(left, right) {
	    var a = left.criteria;
	    var b = right.criteria;
	    if (a !== b) {
	      if (a > b || a === void 0) return 1;
	      if (a < b || b === void 0) return -1;
	    }
	    return left.index - right.index;
	  }), 'value');
	}

	// An internal function used for aggregate "group by" operations.
	function group(behavior, partition) {
	  return function(obj, iteratee, context) {
	    var result = partition ? [[], []] : {};
	    iteratee = cb(iteratee, context);
	    each(obj, function(value, index) {
	      var key = iteratee(value, index, obj);
	      behavior(result, value, key);
	    });
	    return result;
	  };
	}

	// Groups the object's values by a criterion. Pass either a string attribute
	// to group by, or a function that returns the criterion.
	var groupBy = group(function(result, value, key) {
	  if (has$1(result, key)) result[key].push(value); else result[key] = [value];
	});

	// Indexes the object's values by a criterion, similar to `_.groupBy`, but for
	// when you know that your index values will be unique.
	var indexBy = group(function(result, value, key) {
	  result[key] = value;
	});

	// Counts instances of an object that group by a certain criterion. Pass
	// either a string attribute to count by, or a function that returns the
	// criterion.
	var countBy = group(function(result, value, key) {
	  if (has$1(result, key)) result[key]++; else result[key] = 1;
	});

	// Split a collection into two arrays: one whose elements all pass the given
	// truth test, and one whose elements all do not pass the truth test.
	var partition = group(function(result, value, pass) {
	  result[pass ? 0 : 1].push(value);
	}, true);

	// Return the number of elements in a collection.
	function size(obj) {
	  if (obj == null) return 0;
	  return isArrayLike(obj) ? obj.length : keys(obj).length;
	}

	// Internal `_.pick` helper function to determine whether `key` is an enumerable
	// property name of `obj`.
	function keyInObj(value, key, obj) {
	  return key in obj;
	}

	// Return a copy of the object only containing the allowed properties.
	var pick = restArguments(function(obj, keys) {
	  var result = {}, iteratee = keys[0];
	  if (obj == null) return result;
	  if (isFunction$1(iteratee)) {
	    if (keys.length > 1) iteratee = optimizeCb(iteratee, keys[1]);
	    keys = allKeys(obj);
	  } else {
	    iteratee = keyInObj;
	    keys = flatten$1(keys, false, false);
	    obj = Object(obj);
	  }
	  for (var i = 0, length = keys.length; i < length; i++) {
	    var key = keys[i];
	    var value = obj[key];
	    if (iteratee(value, key, obj)) result[key] = value;
	  }
	  return result;
	});

	// Return a copy of the object without the disallowed properties.
	var omit = restArguments(function(obj, keys) {
	  var iteratee = keys[0], context;
	  if (isFunction$1(iteratee)) {
	    iteratee = negate(iteratee);
	    if (keys.length > 1) context = keys[1];
	  } else {
	    keys = map(flatten$1(keys, false, false), String);
	    iteratee = function(value, key) {
	      return !contains(keys, key);
	    };
	  }
	  return pick(obj, iteratee, context);
	});

	// Returns everything but the last entry of the array. Especially useful on
	// the arguments object. Passing **n** will return all the values in
	// the array, excluding the last N.
	function initial(array, n, guard) {
	  return slice.call(array, 0, Math.max(0, array.length - (n == null || guard ? 1 : n)));
	}

	// Get the first element of an array. Passing **n** will return the first N
	// values in the array. The **guard** check allows it to work with `_.map`.
	function first(array, n, guard) {
	  if (array == null || array.length < 1) return n == null || guard ? void 0 : [];
	  if (n == null || guard) return array[0];
	  return initial(array, array.length - n);
	}

	// Returns everything but the first entry of the `array`. Especially useful on
	// the `arguments` object. Passing an **n** will return the rest N values in the
	// `array`.
	function rest(array, n, guard) {
	  return slice.call(array, n == null || guard ? 1 : n);
	}

	// Get the last element of an array. Passing **n** will return the last N
	// values in the array.
	function last(array, n, guard) {
	  if (array == null || array.length < 1) return n == null || guard ? void 0 : [];
	  if (n == null || guard) return array[array.length - 1];
	  return rest(array, Math.max(0, array.length - n));
	}

	// Trim out all falsy values from an array.
	function compact(array) {
	  return filter(array, Boolean);
	}

	// Flatten out an array, either recursively (by default), or up to `depth`.
	// Passing `true` or `false` as `depth` means `1` or `Infinity`, respectively.
	function flatten(array, depth) {
	  return flatten$1(array, depth, false);
	}

	// Take the difference between one array and a number of other arrays.
	// Only the elements present in just the first array will remain.
	var difference = restArguments(function(array, rest) {
	  rest = flatten$1(rest, true, true);
	  return filter(array, function(value){
	    return !contains(rest, value);
	  });
	});

	// Return a version of the array that does not contain the specified value(s).
	var without = restArguments(function(array, otherArrays) {
	  return difference(array, otherArrays);
	});

	// Produce a duplicate-free version of the array. If the array has already
	// been sorted, you have the option of using a faster algorithm.
	// The faster algorithm will not work with an iteratee if the iteratee
	// is not a one-to-one function, so providing an iteratee will disable
	// the faster algorithm.
	function uniq(array, isSorted, iteratee, context) {
	  if (!isBoolean(isSorted)) {
	    context = iteratee;
	    iteratee = isSorted;
	    isSorted = false;
	  }
	  if (iteratee != null) iteratee = cb(iteratee, context);
	  var result = [];
	  var seen = [];
	  for (var i = 0, length = getLength(array); i < length; i++) {
	    var value = array[i],
	        computed = iteratee ? iteratee(value, i, array) : value;
	    if (isSorted && !iteratee) {
	      if (!i || seen !== computed) result.push(value);
	      seen = computed;
	    } else if (iteratee) {
	      if (!contains(seen, computed)) {
	        seen.push(computed);
	        result.push(value);
	      }
	    } else if (!contains(result, value)) {
	      result.push(value);
	    }
	  }
	  return result;
	}

	// Produce an array that contains the union: each distinct element from all of
	// the passed-in arrays.
	var union = restArguments(function(arrays) {
	  return uniq(flatten$1(arrays, true, true));
	});

	// Produce an array that contains every item shared between all the
	// passed-in arrays.
	function intersection(array) {
	  var result = [];
	  var argsLength = arguments.length;
	  for (var i = 0, length = getLength(array); i < length; i++) {
	    var item = array[i];
	    if (contains(result, item)) continue;
	    var j;
	    for (j = 1; j < argsLength; j++) {
	      if (!contains(arguments[j], item)) break;
	    }
	    if (j === argsLength) result.push(item);
	  }
	  return result;
	}

	// Complement of zip. Unzip accepts an array of arrays and groups
	// each array's elements on shared indices.
	function unzip(array) {
	  var length = (array && max(array, getLength).length) || 0;
	  var result = Array(length);

	  for (var index = 0; index < length; index++) {
	    result[index] = pluck(array, index);
	  }
	  return result;
	}

	// Zip together multiple lists into a single array -- elements that share
	// an index go together.
	var zip = restArguments(unzip);

	// Converts lists into objects. Pass either a single array of `[key, value]`
	// pairs, or two parallel arrays of the same length -- one of keys, and one of
	// the corresponding values. Passing by pairs is the reverse of `_.pairs`.
	function object(list, values) {
	  var result = {};
	  for (var i = 0, length = getLength(list); i < length; i++) {
	    if (values) {
	      result[list[i]] = values[i];
	    } else {
	      result[list[i][0]] = list[i][1];
	    }
	  }
	  return result;
	}

	// Generate an integer Array containing an arithmetic progression. A port of
	// the native Python `range()` function. See
	// [the Python documentation](https://docs.python.org/library/functions.html#range).
	function range(start, stop, step) {
	  if (stop == null) {
	    stop = start || 0;
	    start = 0;
	  }
	  if (!step) {
	    step = stop < start ? -1 : 1;
	  }

	  var length = Math.max(Math.ceil((stop - start) / step), 0);
	  var range = Array(length);

	  for (var idx = 0; idx < length; idx++, start += step) {
	    range[idx] = start;
	  }

	  return range;
	}

	// Chunk a single array into multiple arrays, each containing `count` or fewer
	// items.
	function chunk(array, count) {
	  if (count == null || count < 1) return [];
	  var result = [];
	  var i = 0, length = array.length;
	  while (i < length) {
	    result.push(slice.call(array, i, i += count));
	  }
	  return result;
	}

	// Helper function to continue chaining intermediate results.
	function chainResult(instance, obj) {
	  return instance._chain ? _$1(obj).chain() : obj;
	}

	// Add your own custom functions to the Underscore object.
	function mixin(obj) {
	  each(functions(obj), function(name) {
	    var func = _$1[name] = obj[name];
	    _$1.prototype[name] = function() {
	      var args = [this._wrapped];
	      push.apply(args, arguments);
	      return chainResult(this, func.apply(_$1, args));
	    };
	  });
	  return _$1;
	}

	// Add all mutator `Array` functions to the wrapper.
	each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {
	  var method = ArrayProto[name];
	  _$1.prototype[name] = function() {
	    var obj = this._wrapped;
	    if (obj != null) {
	      method.apply(obj, arguments);
	      if ((name === 'shift' || name === 'splice') && obj.length === 0) {
	        delete obj[0];
	      }
	    }
	    return chainResult(this, obj);
	  };
	});

	// Add all accessor `Array` functions to the wrapper.
	each(['concat', 'join', 'slice'], function(name) {
	  var method = ArrayProto[name];
	  _$1.prototype[name] = function() {
	    var obj = this._wrapped;
	    if (obj != null) obj = method.apply(obj, arguments);
	    return chainResult(this, obj);
	  };
	});

	// Named Exports
	// =============

	var allExports = /*#__PURE__*/Object.freeze({
		__proto__: null,
		VERSION: VERSION,
		after: after,
		all: every,
		allKeys: allKeys,
		any: some,
		assign: extendOwn,
		before: before,
		bind: bind,
		bindAll: bindAll,
		chain: chain,
		chunk: chunk,
		clone: clone,
		collect: map,
		compact: compact,
		compose: compose,
		constant: constant,
		contains: contains,
		countBy: countBy,
		create: create,
		debounce: debounce,
		default: _$1,
		defaults: defaults,
		defer: defer,
		delay: delay,
		detect: find,
		difference: difference,
		drop: rest,
		each: each,
		escape: escape,
		every: every,
		extend: extend,
		extendOwn: extendOwn,
		filter: filter,
		find: find,
		findIndex: findIndex,
		findKey: findKey,
		findLastIndex: findLastIndex,
		findWhere: findWhere,
		first: first,
		flatten: flatten,
		foldl: reduce,
		foldr: reduceRight,
		forEach: each,
		functions: functions,
		get: get,
		groupBy: groupBy,
		has: has,
		head: first,
		identity: identity,
		include: contains,
		includes: contains,
		indexBy: indexBy,
		indexOf: indexOf,
		initial: initial,
		inject: reduce,
		intersection: intersection,
		invert: invert,
		invoke: invoke,
		isArguments: isArguments$1,
		isArray: isArray,
		isArrayBuffer: isArrayBuffer,
		isBoolean: isBoolean,
		isDataView: isDataView$1,
		isDate: isDate,
		isElement: isElement,
		isEmpty: isEmpty,
		isEqual: isEqual,
		isError: isError,
		isFinite: isFinite$1,
		isFunction: isFunction$1,
		isMap: isMap,
		isMatch: isMatch,
		isNaN: isNaN$1,
		isNull: isNull,
		isNumber: isNumber,
		isObject: isObject,
		isRegExp: isRegExp,
		isSet: isSet,
		isString: isString,
		isSymbol: isSymbol,
		isTypedArray: isTypedArray$1,
		isUndefined: isUndefined,
		isWeakMap: isWeakMap,
		isWeakSet: isWeakSet,
		iteratee: iteratee,
		keys: keys,
		last: last,
		lastIndexOf: lastIndexOf,
		map: map,
		mapObject: mapObject,
		matcher: matcher,
		matches: matcher,
		max: max,
		memoize: memoize,
		methods: functions,
		min: min,
		mixin: mixin,
		negate: negate,
		noop: noop,
		now: now,
		object: object,
		omit: omit,
		once: once,
		pairs: pairs,
		partial: partial,
		partition: partition,
		pick: pick,
		pluck: pluck,
		property: property,
		propertyOf: propertyOf,
		random: random,
		range: range,
		reduce: reduce,
		reduceRight: reduceRight,
		reject: reject,
		rest: rest,
		restArguments: restArguments,
		result: result,
		sample: sample,
		select: filter,
		shuffle: shuffle,
		size: size,
		some: some,
		sortBy: sortBy,
		sortedIndex: sortedIndex,
		tail: rest,
		take: first,
		tap: tap,
		template: template,
		templateSettings: templateSettings,
		throttle: throttle,
		times: times,
		toArray: toArray,
		toPath: toPath$1,
		transpose: unzip,
		unescape: unescape$1,
		union: union,
		uniq: uniq,
		unique: uniq,
		uniqueId: uniqueId,
		unzip: unzip,
		values: values,
		where: where,
		without: without,
		wrap: wrap,
		zip: zip
	});

	// Default Export
	// ==============
	// In this module, we mix our bundled exports into the `_` object and export
	// the result. This is analogous to setting `module.exports = _` in CommonJS.
	// Hence, this module is also the entry point of our UMD bundle and the package
	// entry point for CommonJS and AMD users. In other words, this is (the source
	// of) the module you are interfacing with when you do any of the following:
	//
	// ```js
	// // CommonJS
	// var _ = require('underscore');
	//
	// // AMD
	// define(['underscore'], function(_) {...});
	//
	// // UMD in the browser
	// // _ is available as a global variable
	// ```

	// Add all of the Underscore functions to the wrapper object.
	var _ = mixin(allExports);
	// Legacy Node.js API.
	_._ = _;

	// ESM Exports
	// ===========
	// This module is the package entry point for ES module users. In other words,
	// it is the module they are interfacing with when they import from the whole
	// package instead of from a submodule, like this:
	//
	// ```js
	// import { map } from 'underscore';
	// ```
	//
	// The difference with `./index-default`, which is the package entry point for
	// CommonJS, AMD and UMD users, is purely technical. In ES modules, named and
	// default exports are considered to be siblings, so when you have a default
	// export, its properties are not automatically available as named exports. For
	// this reason, we re-export the named exports in addition to providing the same
	// default export as in `./index-default`.

	var indexAll = /*#__PURE__*/Object.freeze({
		__proto__: null,
		VERSION: VERSION,
		after: after,
		all: every,
		allKeys: allKeys,
		any: some,
		assign: extendOwn,
		before: before,
		bind: bind,
		bindAll: bindAll,
		chain: chain,
		chunk: chunk,
		clone: clone,
		collect: map,
		compact: compact,
		compose: compose,
		constant: constant,
		contains: contains,
		countBy: countBy,
		create: create,
		debounce: debounce,
		default: _,
		defaults: defaults,
		defer: defer,
		delay: delay,
		detect: find,
		difference: difference,
		drop: rest,
		each: each,
		escape: escape,
		every: every,
		extend: extend,
		extendOwn: extendOwn,
		filter: filter,
		find: find,
		findIndex: findIndex,
		findKey: findKey,
		findLastIndex: findLastIndex,
		findWhere: findWhere,
		first: first,
		flatten: flatten,
		foldl: reduce,
		foldr: reduceRight,
		forEach: each,
		functions: functions,
		get: get,
		groupBy: groupBy,
		has: has,
		head: first,
		identity: identity,
		include: contains,
		includes: contains,
		indexBy: indexBy,
		indexOf: indexOf,
		initial: initial,
		inject: reduce,
		intersection: intersection,
		invert: invert,
		invoke: invoke,
		isArguments: isArguments$1,
		isArray: isArray,
		isArrayBuffer: isArrayBuffer,
		isBoolean: isBoolean,
		isDataView: isDataView$1,
		isDate: isDate,
		isElement: isElement,
		isEmpty: isEmpty,
		isEqual: isEqual,
		isError: isError,
		isFinite: isFinite$1,
		isFunction: isFunction$1,
		isMap: isMap,
		isMatch: isMatch,
		isNaN: isNaN$1,
		isNull: isNull,
		isNumber: isNumber,
		isObject: isObject,
		isRegExp: isRegExp,
		isSet: isSet,
		isString: isString,
		isSymbol: isSymbol,
		isTypedArray: isTypedArray$1,
		isUndefined: isUndefined,
		isWeakMap: isWeakMap,
		isWeakSet: isWeakSet,
		iteratee: iteratee,
		keys: keys,
		last: last,
		lastIndexOf: lastIndexOf,
		map: map,
		mapObject: mapObject,
		matcher: matcher,
		matches: matcher,
		max: max,
		memoize: memoize,
		methods: functions,
		min: min,
		mixin: mixin,
		negate: negate,
		noop: noop,
		now: now,
		object: object,
		omit: omit,
		once: once,
		pairs: pairs,
		partial: partial,
		partition: partition,
		pick: pick,
		pluck: pluck,
		property: property,
		propertyOf: propertyOf,
		random: random,
		range: range,
		reduce: reduce,
		reduceRight: reduceRight,
		reject: reject,
		rest: rest,
		restArguments: restArguments,
		result: result,
		sample: sample,
		select: filter,
		shuffle: shuffle,
		size: size,
		some: some,
		sortBy: sortBy,
		sortedIndex: sortedIndex,
		tail: rest,
		take: first,
		tap: tap,
		template: template,
		templateSettings: templateSettings,
		throttle: throttle,
		times: times,
		toArray: toArray,
		toPath: toPath$1,
		transpose: unzip,
		unescape: unescape$1,
		union: union,
		uniq: uniq,
		unique: uniq,
		uniqueId: uniqueId,
		unzip: unzip,
		values: values,
		where: where,
		without: without,
		wrap: wrap,
		zip: zip
	});

	var require$$0 = /*@__PURE__*/getAugmentedNamespace(indexAll);

	var hasRequiredLib;

	function requireLib () {
		if (hasRequiredLib) return lib.exports;
		hasRequiredLib = 1;
		(function () {
		  var _ = require$$0;

		  function sanitize_input(input) {
		    // http://www.postgresql.org/docs/9.0/static/sql-syntax-lexical.html [4.1.2.1-4.1.2.2]
		    // single quotes (') must be replaced with double single quotes ('')
		    input = input.replace(/'/g, '\'\'');
		    // backslashes (\) must be replaced with double backslashes (\\)
		    input = input.replace(/\\/g, '\\\\');
		    // double quotes (") must be replaced with escaped quotes (\\")
		    input = input.replace(/"/g, '\\"');
		    return input;
		  }

		  function to_string(input, sanitize) {
		    switch(typeof input) {
		      case 'boolean':
		      case 'number':
		      case 'object':
		        return String(input);
		      case 'string':
		        return sanitize ? sanitize_input(input) : input;
		      default:
		        return '';
		    }
		  }

		  lib.exports = function (options) {
		    options = _.defaults({}, options, { sanitize: false });

		    return {
		      stringify: function (data, callback) {
		        var hstore = Object.keys(data).map(function (key) {
		          if (data[key] === null) {
		            return '"'+to_string(key, options.sanitize)+'"=>NULL';
		          } else {
		            return '"'+to_string(key, options.sanitize)+'"=>"'+to_string(data[key], options.sanitize)+'"';
		          }
		        });
		        var joined = hstore.join();
		        if (!callback || callback === null) return joined;
		        callback(joined);
		      },

		      parse: function(string, callback) {
		        var result = {},
		        //using [\s\S] to match any character, including line feed and carriage return,
		            r = /(["])(?:\\\1|\\\\|[\s\S])*?\1|NULL/g,
		            matches = string.match(r),
		            i,
		            l,
		            clean = function (value) {
		                // Remove leading double quotes
		                value = value.replace(/^\"|\"$/g, "");
		                // Unescape quotes
		                value = value.replace(/\\"/g, "\"");
		                //Unescape backslashes
		                value = value.replace(/\\\\/g,"\\");
		                //Unescape single quotes
		                value = value.replace(/''/g,"'");

		                return value;
		            };

		        if(matches) {
		          for (i = 0, l = matches.length; i < l; i+= 2) {
		            if (matches[i] && matches[i + 1]) {
		              var key = clean(matches[i]);
		              var value = matches[i + 1];
		              result[key] = value=="NULL"?null:clean(value);
		            }
		          }
		        }
		        if (!callback || callback === null) return result;
		        callback(result);
		      }
		    };
		  };
		})();
		return lib.exports;
	}

	var hstore_1;
	var hasRequiredHstore;

	function requireHstore () {
		if (hasRequiredHstore) return hstore_1;
		hasRequiredHstore = 1;
		var __defProp = Object.defineProperty;
		var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
		var __getOwnPropNames = Object.getOwnPropertyNames;
		var __hasOwnProp = Object.prototype.hasOwnProperty;
		var __export = (target, all) => {
		  for (var name in all)
		    __defProp(target, name, { get: all[name], enumerable: true });
		};
		var __copyProps = (to, from, except, desc) => {
		  if (from && typeof from === "object" || typeof from === "function") {
		    for (let key of __getOwnPropNames(from))
		      if (!__hasOwnProp.call(to, key) && key !== except)
		        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
		  }
		  return to;
		};
		var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
		var hstore_exports = {};
		__export(hstore_exports, {
		  parse: () => parse,
		  stringify: () => stringify
		});
		hstore_1 = __toCommonJS(hstore_exports);
		const hstore = requireLib()({ sanitize: true });
		function stringify(data) {
		  return hstore.stringify(data);
		}
		function parse(value) {
		  return hstore.parse(value);
		}
		
		return hstore_1;
	}

	var dataTypesDb;
	var hasRequiredDataTypesDb;

	function requireDataTypesDb () {
		if (hasRequiredDataTypesDb) return dataTypesDb;
		hasRequiredDataTypesDb = 1;
		var __create = Object.create;
		var __defProp = Object.defineProperty;
		var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
		var __getOwnPropNames = Object.getOwnPropertyNames;
		var __getProtoOf = Object.getPrototypeOf;
		var __hasOwnProp = Object.prototype.hasOwnProperty;
		var __export = (target, all) => {
		  for (var name in all)
		    __defProp(target, name, { get: all[name], enumerable: true });
		};
		var __copyProps = (to, from, except, desc) => {
		  if (from && typeof from === "object" || typeof from === "function") {
		    for (let key of __getOwnPropNames(from))
		      if (!__hasOwnProp.call(to, key) && key !== except)
		        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
		  }
		  return to;
		};
		var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
		  // If the importer is in node compatibility mode or this is not an ESM
		  // file that has been converted to a CommonJS file using a Babel-
		  // compatible transform (i.e. "__esModule" has not been set), then set
		  // "default" to the CommonJS "module.exports" for node compatibility.
		  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
		  mod
		));
		var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
		var data_types_db_exports = {};
		__export(data_types_db_exports, {
		  registerPostgresDbDataTypeParsers: () => registerPostgresDbDataTypeParsers
		});
		dataTypesDb = __toCommonJS(data_types_db_exports);
		var import_node_assert = __toESM(require$$0$4);
		var import_identity = __toESM(identity_1);
		var import_wkx = __toESM(requireWkx());
		var import_data_types_utils = requireDataTypesUtils();
		var BaseTypes = __toESM(requireDataTypes$8());
		var Hstore = __toESM(requireHstore());
		var import_range = range$2;
		function registerPostgresDbDataTypeParsers(dialect) {
		  dialect.registerDataTypeParser(["date"], (value) => {
		    if (value === "infinity") {
		      return Number.POSITIVE_INFINITY;
		    }
		    if (value === "-infinity") {
		      return Number.NEGATIVE_INFINITY;
		    }
		    return value;
		  });
		  dialect.registerDataTypeParser(["timestamptz", "timestamp"], (value) => {
		    return value;
		  });
		  dialect.registerDataTypeParser(["numeric", "decimal"], (value) => {
		    if (value === "NaN") {
		      return Number.NaN;
		    }
		    return value;
		  });
		  dialect.registerDataTypeParser(["geometry"], (value) => {
		    (0, import_node_assert.default)(typeof value === "string", "Expected geometry value to be a string");
		    const b = Buffer.from(value, "hex");
		    return import_wkx.default.Geometry.parse(b).toGeoJSON({ shortCrs: true });
		  });
		  dialect.registerDataTypeParser(["geography"], (value) => {
		    (0, import_node_assert.default)(typeof value === "string", "Expected geography value to be a string");
		    const b = Buffer.from(value, "hex");
		    return import_wkx.default.Geometry.parse(b).toGeoJSON({ shortCrs: true });
		  });
		  dialect.registerDataTypeParser(["hstore"], (value) => {
		    (0, import_node_assert.default)(typeof value === "string", "Expected hstore value to be a string");
		    return Hstore.parse(value);
		  });
		  const parseInteger = (0, import_data_types_utils.getDataTypeParser)(dialect, BaseTypes.INTEGER);
		  dialect.registerDataTypeParser(["int4range"], (0, import_range.buildRangeParser)(parseInteger));
		  const parseBigInt = (0, import_data_types_utils.getDataTypeParser)(dialect, BaseTypes.BIGINT);
		  dialect.registerDataTypeParser(["int8range"], (0, import_range.buildRangeParser)(parseBigInt));
		  const parseDecimal = (0, import_data_types_utils.getDataTypeParser)(dialect, BaseTypes.DECIMAL);
		  dialect.registerDataTypeParser(["numrange"], (0, import_range.buildRangeParser)(parseDecimal));
		  dialect.registerDataTypeParser(["tstzrange", "tsrange", "daterange"], (0, import_range.buildRangeParser)(import_identity.default));
		}
		
		return dataTypesDb;
	}

	var queryGeneratorTypescript$4;
	var hasRequiredQueryGeneratorTypescript$4;

	function requireQueryGeneratorTypescript$4 () {
		if (hasRequiredQueryGeneratorTypescript$4) return queryGeneratorTypescript$4;
		hasRequiredQueryGeneratorTypescript$4 = 1;
		var __defProp = Object.defineProperty;
		var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
		var __getOwnPropNames = Object.getOwnPropertyNames;
		var __hasOwnProp = Object.prototype.hasOwnProperty;
		var __export = (target, all) => {
		  for (var name in all)
		    __defProp(target, name, { get: all[name], enumerable: true });
		};
		var __copyProps = (to, from, except, desc) => {
		  if (from && typeof from === "object" || typeof from === "function") {
		    for (let key of __getOwnPropNames(from))
		      if (!__hasOwnProp.call(to, key) && key !== except)
		        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
		  }
		  return to;
		};
		var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
		var query_generator_typescript_exports = {};
		__export(query_generator_typescript_exports, {
		  PostgresQueryGeneratorTypeScript: () => PostgresQueryGeneratorTypeScript
		});
		queryGeneratorTypescript$4 = __toCommonJS(query_generator_typescript_exports);
		var import_join_sql_fragments = joinSqlFragments;
		var import_string = string$2;
		var import_query_generator = requireQueryGenerator$8();
		class PostgresQueryGeneratorTypeScript extends import_query_generator.AbstractQueryGenerator {
		  describeTableQuery(tableName) {
		    const table = this.extractTableDetails(tableName);
		    return (0, import_join_sql_fragments.joinSQLFragments)([
		      "SELECT",
		      'pk.constraint_type as "Constraint",',
		      'c.column_name as "Field",',
		      'c.column_default as "Default",',
		      'c.is_nullable as "Null",',
		      `(CASE WHEN c.udt_name = 'hstore' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN '(' || c.character_maximum_length || ')' ELSE '' END) as "Type",`,
		      '(SELECT array_agg(e.enumlabel) FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid WHERE t.typname=c.udt_name) AS "special",',
		      '(SELECT pgd.description FROM pg_catalog.pg_statio_all_tables AS st INNER JOIN pg_catalog.pg_description pgd on (pgd.objoid=st.relid) WHERE c.ordinal_position=pgd.objsubid AND c.table_name=st.relname) AS "Comment"',
		      "FROM information_schema.columns c",
		      "LEFT JOIN (SELECT tc.table_schema, tc.table_name,",
		      "cu.column_name, tc.constraint_type",
		      "FROM information_schema.TABLE_CONSTRAINTS tc",
		      "JOIN information_schema.KEY_COLUMN_USAGE  cu",
		      "ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name",
		      "and tc.constraint_name=cu.constraint_name",
		      `and tc.constraint_type='PRIMARY KEY') pk`,
		      "ON pk.table_schema=c.table_schema",
		      "AND pk.table_name=c.table_name",
		      "AND pk.column_name=c.column_name",
		      `WHERE c.table_name = ${this.escape(table.tableName)}`,
		      `AND c.table_schema = ${this.escape(table.schema)}`
		    ]);
		  }
		  showConstraintsQuery(tableName, options) {
		    const table = this.extractTableDetails(tableName);
		    return (0, import_join_sql_fragments.joinSQLFragments)([
		      'SELECT c.constraint_catalog AS "constraintCatalog",',
		      'c.constraint_schema AS "constraintSchema",',
		      'c.constraint_name AS "constraintName",',
		      'c.constraint_type AS "constraintType",',
		      'c.table_catalog AS "tableCatalog",',
		      'c.table_schema AS "tableSchema",',
		      'c.table_name AS "tableName",',
		      'kcu.column_name AS "columnNames",',
		      'ccu.table_schema AS "referencedTableSchema",',
		      'ccu.table_name AS "referencedTableName",',
		      'ccu.column_name AS "referencedColumnNames",',
		      'r.delete_rule AS "deleteAction",',
		      'r.update_rule AS "updateAction",',
		      'ch.check_clause AS "definition",',
		      'c.is_deferrable AS "isDeferrable",',
		      'c.initially_deferred AS "initiallyDeferred"',
		      "FROM INFORMATION_SCHEMA.table_constraints c",
		      "LEFT JOIN INFORMATION_SCHEMA.referential_constraints r ON c.constraint_catalog = r.constraint_catalog AND c.constraint_schema = r.constraint_schema AND c.constraint_name = r.constraint_name",
		      "LEFT JOIN INFORMATION_SCHEMA.key_column_usage kcu ON r.constraint_catalog = kcu.constraint_catalog AND r.constraint_schema = kcu.constraint_schema AND r.constraint_name = kcu.constraint_name",
		      "LEFT JOIN information_schema.constraint_column_usage AS ccu ON r.constraint_catalog = ccu.constraint_catalog AND r.constraint_schema = ccu.constraint_schema AND r.constraint_name = ccu.constraint_name",
		      "LEFT JOIN INFORMATION_SCHEMA.check_constraints ch ON c.constraint_catalog = ch.constraint_catalog AND c.constraint_schema = ch.constraint_schema AND c.constraint_name = ch.constraint_name",
		      `WHERE c.table_name = ${this.escape(table.tableName)}`,
		      `AND c.table_schema = ${this.escape(table.schema)}`,
		      (options == null ? void 0 : options.constraintName) ? `AND c.constraint_name = ${this.escape(options.constraintName)}` : "",
		      "ORDER BY c.constraint_name, kcu.ordinal_position"
		    ]);
		  }
		  showIndexesQuery(tableName) {
		    const table = this.extractTableDetails(tableName);
		    return (0, import_join_sql_fragments.joinSQLFragments)([
		      "SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey[:ix.indnkeyatts-1] AS index_fields,",
		      "ix.indkey[ix.indnkeyatts:] AS include_fields, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names,",
		      "pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a , pg_namespace s",
		      "WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND",
		      `t.relkind = 'r' and t.relname = ${this.escape(table.tableName)}`,
		      `AND s.oid = t.relnamespace AND s.nspname = ${this.escape(table.schema)}`,
		      "GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey, ix.indnkeyatts ORDER BY i.relname;"
		    ]);
		  }
		  removeIndexQuery(tableName, indexNameOrAttributes, options) {
		    if ((options == null ? void 0 : options.cascade) && (options == null ? void 0 : options.concurrently)) {
		      throw new Error(`Cannot specify both concurrently and cascade options in removeIndexQuery for ${this.dialect.name} dialect`);
		    }
		    let indexName;
		    const table = this.extractTableDetails(tableName);
		    if (Array.isArray(indexNameOrAttributes)) {
		      indexName = (0, import_string.generateIndexName)(table, { fields: indexNameOrAttributes });
		    } else {
		      indexName = indexNameOrAttributes;
		    }
		    return (0, import_join_sql_fragments.joinSQLFragments)([
		      "DROP INDEX",
		      (options == null ? void 0 : options.concurrently) ? "CONCURRENTLY" : "",
		      (options == null ? void 0 : options.ifExists) ? "IF EXISTS" : "",
		      `${this.quoteIdentifier(table.schema)}.${this.quoteIdentifier(indexName)}`,
		      (options == null ? void 0 : options.cascade) ? "CASCADE" : ""
		    ]);
		  }
		  getForeignKeyQuery(tableName, columnName) {
		    const table = this.extractTableDetails(tableName);
		    return (0, import_join_sql_fragments.joinSQLFragments)([
		      // conkey and confkey are arrays for composite foreign keys.
		      // This splits them as matching separate rows
		      "WITH unnested_pg_constraint AS (",
		      "SELECT conname, confrelid, connamespace, conrelid, contype, oid,",
		      "unnest(conkey) AS conkey, unnest(confkey) AS confkey",
		      "FROM pg_constraint)",
		      'SELECT "constraint".conname as "constraintName",',
		      'constraint_schema.nspname as "constraintSchema",',
		      'current_database() as "constraintCatalog",',
		      '"table".relname as "tableName",',
		      'table_schema.nspname as "tableSchema",',
		      'current_database() as "tableCatalog",',
		      '"column".attname as "columnName",',
		      'referenced_table.relname as "referencedTableName",',
		      'referenced_schema.nspname as "referencedTableSchema",',
		      'current_database() as "referencedTableCatalog",',
		      '"referenced_column".attname as "referencedColumnName"',
		      'FROM unnested_pg_constraint "constraint"',
		      "INNER JOIN pg_catalog.pg_class referenced_table ON",
		      'referenced_table.oid = "constraint".confrelid',
		      "INNER JOIN pg_catalog.pg_namespace referenced_schema ON",
		      "referenced_schema.oid = referenced_table.relnamespace",
		      "INNER JOIN pg_catalog.pg_namespace constraint_schema ON",
		      '"constraint".connamespace = constraint_schema.oid',
		      'INNER JOIN pg_catalog.pg_class "table" ON "constraint".conrelid = "table".oid',
		      'INNER JOIN pg_catalog.pg_namespace table_schema ON "table".relnamespace = table_schema.oid',
		      'INNER JOIN pg_catalog.pg_attribute "column" ON',
		      '"column".attnum = "constraint".conkey AND "column".attrelid = "constraint".conrelid',
		      'INNER JOIN pg_catalog.pg_attribute "referenced_column" ON',
		      '"referenced_column".attnum = "constraint".confkey AND',
		      '"referenced_column".attrelid = "constraint".confrelid',
		      `WHERE "constraint".contype = 'f'`,
		      `AND "table".relname = ${this.escape(table.tableName)}`,
		      `AND table_schema.nspname = ${this.escape(table.schema)}`,
		      columnName && `AND "column".attname = ${this.escape(columnName)};`
		    ]);
		  }
		  jsonPathExtractionQuery(sqlExpression, path, unquote) {
		    const operator = path.length === 1 ? unquote ? "->>" : "->" : unquote ? "#>>" : "#>";
		    const pathSql = path.length === 1 ? this.escape(path[0]) : this.escape(path.map((value) => String(value)));
		    return sqlExpression + operator + pathSql;
		  }
		  formatUnquoteJson(arg, options) {
		    return `${this.escape(arg, options)}#>>ARRAY[]::TEXT[]`;
		  }
		  versionQuery() {
		    return "SHOW SERVER_VERSION";
		  }
		}
		
		return queryGeneratorTypescript$4;
	}

	var queryGenerator$4;
	var hasRequiredQueryGenerator$4;

	function requireQueryGenerator$4 () {
		if (hasRequiredQueryGenerator$4) return queryGenerator$4;
		hasRequiredQueryGenerator$4 = 1;
		var __defProp = Object.defineProperty;
		var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
		var __getOwnPropNames = Object.getOwnPropertyNames;
		var __hasOwnProp = Object.prototype.hasOwnProperty;
		var __export = (target, all) => {
		  for (var name in all)
		    __defProp(target, name, { get: all[name], enumerable: true });
		};
		var __copyProps = (to, from, except, desc) => {
		  if (from && typeof from === "object" || typeof from === "function") {
		    for (let key of __getOwnPropNames(from))
		      if (!__hasOwnProp.call(to, key) && key !== except)
		        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
		  }
		  return to;
		};
		var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
		var query_generator_exports = {};
		__export(query_generator_exports, {
		  PostgresQueryGenerator: () => PostgresQueryGenerator
		});
		queryGenerator$4 = __toCommonJS(query_generator_exports);
		var import_object = object$1;
		var import_query_builder_utils = requireQueryBuilderUtils();
		var import_string = string$2;
		var import_data_types = requireDataTypes$4();
		var import_dialect = requireDialect();
		var import_check = requireCheck();
		var import_query_generator = requireQueryGenerator$8();
		const DataTypes = dataTypes$8;
		const { PostgresQueryGeneratorTypeScript } = requireQueryGeneratorTypescript$4();
		const _ = lodashExports;
		const POSTGRES_RESERVED_WORDS = "all,analyse,analyze,and,any,array,as,asc,asymmetric,authorization,binary,both,case,cast,check,collate,collation,column,concurrently,constraint,create,cross,current_catalog,current_date,current_role,current_schema,current_time,current_timestamp,current_user,default,deferrable,desc,distinct,do,else,end,except,false,fetch,for,foreign,freeze,from,full,grant,group,having,ilike,in,initially,inner,intersect,into,is,isnull,join,lateral,leading,left,like,limit,localtime,localtimestamp,natural,not,notnull,null,offset,on,only,or,order,outer,overlaps,placing,primary,references,returning,right,select,session_user,similar,some,symmetric,table,tablesample,then,to,trailing,true,union,unique,user,using,variadic,verbose,when,where,window,with".split(",");
		const CREATE_DATABASE_QUERY_SUPPORTED_OPTIONS = /* @__PURE__ */ new Set(["encoding", "collate", "ctype", "template"]);
		const CREATE_SCHEMA_QUERY_SUPPORTED_OPTIONS = /* @__PURE__ */ new Set();
		const CREATE_TABLE_QUERY_SUPPORTED_OPTIONS = /* @__PURE__ */ new Set(["comment", "uniqueKeys"]);
		const DROP_TABLE_QUERY_SUPPORTED_OPTIONS = /* @__PURE__ */ new Set(["cascade"]);
		class PostgresQueryGenerator extends PostgresQueryGeneratorTypeScript {
		  setSearchPath(searchPath) {
		    return `SET search_path to ${searchPath};`;
		  }
		  createDatabaseQuery(databaseName, options) {
		    if (options) {
		      (0, import_check.rejectInvalidOptions)(
		        "createDatabaseQuery",
		        this.dialect.name,
		        import_query_generator.CREATE_DATABASE_QUERY_SUPPORTABLE_OPTIONS,
		        CREATE_DATABASE_QUERY_SUPPORTED_OPTIONS,
		        options
		      );
		    }
		    const quotedDatabaseName = this.quoteIdentifier(databaseName);
		    const encoding = (options == null ? void 0 : options.encoding) ? ` ENCODING = ${this.escape(options.encoding)}` : "";
		    const collation = (options == null ? void 0 : options.collate) ? ` LC_COLLATE = ${this.escape(options.collate)}` : "";
		    const ctype = (options == null ? void 0 : options.ctype) ? ` LC_CTYPE = ${this.escape(options.ctype)}` : "";
		    const template = (options == null ? void 0 : options.template) ? ` TEMPLATE = ${this.escape(options.template)}` : "";
		    return `CREATE DATABASE ${quotedDatabaseName}${encoding}${collation}${ctype}${template};`;
		  }
		  dropDatabaseQuery(databaseName) {
		    return `DROP DATABASE IF EXISTS ${this.quoteIdentifier(databaseName)};`;
		  }
		  listDatabasesQuery() {
		    return `SELECT datname AS name FROM pg_database;`;
		  }
		  createSchemaQuery(schema, options) {
		    if (options) {
		      (0, import_check.rejectInvalidOptions)(
		        "createSchemaQuery",
		        this.dialect.name,
		        import_query_generator.CREATE_SCHEMA_QUERY_SUPPORTABLE_OPTIONS,
		        CREATE_SCHEMA_QUERY_SUPPORTED_OPTIONS,
		        options
		      );
		    }
		    return `CREATE SCHEMA IF NOT EXISTS ${this.quoteIdentifier(schema)};`;
		  }
		  dropSchemaQuery(schema) {
		    return `DROP SCHEMA IF EXISTS ${this.quoteIdentifier(schema)} CASCADE;`;
		  }
		  listSchemasQuery(options) {
		    const schemasToSkip = ["information_schema", "public"];
		    if (options == null ? void 0 : options.skip) {
		      schemasToSkip.push(...options.skip);
		    }
		    return `SELECT schema_name FROM information_schema.schemata WHERE schema_name !~ E'^pg_' AND schema_name NOT IN (${schemasToSkip.map((schema) => this.escape(schema)).join(", ")});`;
		  }
		  createTableQuery(tableName, attributes, options) {
		    if (options) {
		      (0, import_check.rejectInvalidOptions)(
		        "createTableQuery",
		        this.dialect.name,
		        import_query_generator.CREATE_TABLE_QUERY_SUPPORTABLE_OPTIONS,
		        CREATE_TABLE_QUERY_SUPPORTED_OPTIONS,
		        options
		      );
		    }
		    options = { ...options };
		    const attrStr = [];
		    let comments = "";
		    let columnComments = "";
		    const quotedTable = this.quoteTable(tableName);
		    if (options.comment && typeof options.comment === "string") {
		      comments += `; COMMENT ON TABLE ${quotedTable} IS ${this.escape(options.comment)}`;
		    }
		    for (const attr in attributes) {
		      const quotedAttr = this.quoteIdentifier(attr);
		      const i = attributes[attr].indexOf("COMMENT ");
		      if (i !== -1) {
		        const escapedCommentText = this.escape(attributes[attr].slice(Math.max(0, i + 8)));
		        columnComments += `; COMMENT ON COLUMN ${quotedTable}.${quotedAttr} IS ${escapedCommentText}`;
		        attributes[attr] = attributes[attr].slice(0, Math.max(0, i));
		      }
		      const dataType = this.dataTypeMapping(tableName, attr, attributes[attr]);
		      attrStr.push(`${quotedAttr} ${dataType}`);
		    }
		    let attributesClause = attrStr.join(", ");
		    if (options.uniqueKeys) {
		      _.each(options.uniqueKeys, (index, indexName) => {
		        if (typeof indexName !== "string") {
		          indexName = (0, import_string.generateIndexName)(tableName, index);
		        }
		        attributesClause += `, CONSTRAINT ${this.quoteIdentifier(indexName)} UNIQUE (${index.fields.map((field) => this.quoteIdentifier(field)).join(", ")})`;
		      });
		    }
		    const pks = _.reduce(attributes, (acc, attribute, key) => {
		      if (attribute.includes("PRIMARY KEY")) {
		        acc.push(this.quoteIdentifier(key));
		      }
		      return acc;
		    }, []).join(", ");
		    if (pks.length > 0) {
		      attributesClause += `, PRIMARY KEY (${pks})`;
		    }
		    return `CREATE TABLE IF NOT EXISTS ${quotedTable} (${attributesClause})${comments}${columnComments};`;
		  }
		  dropTableQuery(tableName, options) {
		    if (options) {
		      (0, import_check.rejectInvalidOptions)(
		        "dropTableQuery",
		        this.dialect.name,
		        import_query_generator.DROP_TABLE_QUERY_SUPPORTABLE_OPTIONS,
		        DROP_TABLE_QUERY_SUPPORTED_OPTIONS,
		        options
		      );
		    }
		    return `DROP TABLE IF EXISTS ${this.quoteTable(tableName)}${(options == null ? void 0 : options.cascade) ? " CASCADE" : ""};`;
		  }
		  showTablesQuery() {
		    const schema = this.options.schema || "public";
		    return `SELECT table_name FROM information_schema.tables WHERE table_schema = ${this.escape(schema)} AND table_type LIKE '%TABLE' AND table_name != 'spatial_ref_sys';`;
		  }
		  tableExistsQuery(tableName) {
		    const table = tableName.tableName || tableName;
		    const schema = tableName.schema || "public";
		    return `SELECT table_name FROM information_schema.tables WHERE table_schema = ${this.escape(schema)} AND table_name = ${this.escape(table)}`;
		  }
		  addColumnQuery(table, key, attribute, options) {
		    options = options || {};
		    const dbDataType = this.attributeToSQL(attribute, { context: "addColumn", table, key });
		    const dataType = attribute.type || attribute;
		    const definition = this.dataTypeMapping(table, key, dbDataType);
		    const quotedKey = this.quoteIdentifier(key);
		    const quotedTable = this.quoteTable(table);
		    const ifNotExists = options.ifNotExists ? " IF NOT EXISTS" : "";
		    let query = `ALTER TABLE ${quotedTable} ADD COLUMN ${ifNotExists} ${quotedKey} ${definition};`;
		    if (dataType instanceof DataTypes.ENUM) {
		      query = this.pgEnum(table, key, dataType) + query;
		    } else if (dataType instanceof DataTypes.ARRAY && dataType.options.type instanceof DataTypes.ENUM) {
		      query = this.pgEnum(table, key, dataType.options.type) + query;
		    }
		    return query;
		  }
		  removeColumnQuery(tableName, attributeName, options) {
		    options = options || {};
		    const quotedTableName = this.quoteTable(tableName);
		    const quotedAttributeName = this.quoteIdentifier(attributeName);
		    const ifExists = options.ifExists ? " IF EXISTS" : "";
		    return `ALTER TABLE ${quotedTableName} DROP COLUMN ${ifExists} ${quotedAttributeName};`;
		  }
		  changeColumnQuery(tableName, attributes) {
		    const query = (subQuery) => `ALTER TABLE ${this.quoteTable(tableName)} ALTER COLUMN ${subQuery};`;
		    const sql = [];
		    for (const attributeName in attributes) {
		      let definition = this.dataTypeMapping(tableName, attributeName, attributes[attributeName]);
		      let attrSql = "";
		      if (definition.includes("NOT NULL")) {
		        attrSql += query(`${this.quoteIdentifier(attributeName)} SET NOT NULL`);
		        definition = definition.replace("NOT NULL", "").trim();
		      } else if (!definition.includes("REFERENCES")) {
		        attrSql += query(`${this.quoteIdentifier(attributeName)} DROP NOT NULL`);
		      }
		      if (definition.includes("DEFAULT")) {
		        attrSql += query(`${this.quoteIdentifier(attributeName)} SET DEFAULT ${definition.match(/DEFAULT ([^;]+)/)[1]}`);
		        definition = definition.replace(/(DEFAULT[^;]+)/, "").trim();
		      } else if (!definition.includes("REFERENCES")) {
		        attrSql += query(`${this.quoteIdentifier(attributeName)} DROP DEFAULT`);
		      }
		      if (attributes[attributeName].startsWith("ENUM(")) {
		        attrSql += this.pgEnum(tableName, attributeName, attributes[attributeName]);
		        definition = definition.replace(/^ENUM\(.+\)/, this.pgEnumName(tableName, attributeName, { schema: false }));
		        definition += ` USING (${this.quoteIdentifier(attributeName)}::${this.pgEnumName(tableName, attributeName)})`;
		      }
		      if (/UNIQUE;*$/.test(definition)) {
		        definition = definition.replace(/UNIQUE;*$/, "");
		        attrSql += query(`ADD UNIQUE (${this.quoteIdentifier(attributeName)})`).replace("ALTER COLUMN", "");
		      }
		      if (definition.includes("REFERENCES")) {
		        definition = definition.replace(/.+?(?=REFERENCES)/, "");
		        attrSql += query(`ADD FOREIGN KEY (${this.quoteIdentifier(attributeName)}) ${definition}`).replace("ALTER COLUMN", "");
		      } else {
		        attrSql += query(`${this.quoteIdentifier(attributeName)} TYPE ${definition}`);
		      }
		      sql.push(attrSql);
		    }
		    return sql.join("");
		  }
		  renameColumnQuery(tableName, attrBefore, attributes) {
		    const attrString = [];
		    for (const attributeName in attributes) {
		      attrString.push(`${this.quoteIdentifier(attrBefore)} TO ${this.quoteIdentifier(attributeName)}`);
		    }
		    return `ALTER TABLE ${this.quoteTable(tableName)} RENAME COLUMN ${attrString.join(", ")};`;
		  }
		  fn(fnName, tableName, parameters, body, returns, language) {
		    fnName = fnName || "testfunc";
		    language = language || "plpgsql";
		    returns = returns ? `RETURNS ${returns}` : "";
		    parameters = parameters || "";
		    return `CREATE OR REPLACE FUNCTION pg_temp.${fnName}(${parameters}) ${returns} AS $func$ BEGIN ${body} END; $func$ LANGUAGE ${language}; SELECT * FROM pg_temp.${fnName}();`;
		  }
		  truncateTableQuery(tableName, options = {}) {
		    return [
		      `TRUNCATE ${this.quoteTable(tableName)}`,
		      options.restartIdentity ? " RESTART IDENTITY" : "",
		      options.cascade ? " CASCADE" : ""
		    ].join("");
		  }
		  deleteQuery(tableName, where, options = import_object.EMPTY_OBJECT, model) {
		    const table = this.quoteTable(tableName);
		    const escapeOptions = {
		      replacements: options.replacements,
		      model
		    };
		    const limit = options.limit ? ` LIMIT ${this.escape(options.limit, escapeOptions)}` : "";
		    let primaryKeys = "";
		    let primaryKeysSelection = "";
		    let whereClause = this.whereQuery(where, { ...options, model });
		    if (whereClause) {
		      whereClause = ` ${whereClause}`;
		    }
		    if (options.limit) {
		      if (!model) {
		        throw new Error("Cannot LIMIT delete without a model.");
		      }
		      const pks = Object.values(model.primaryKeys).map((pk) => this.quoteIdentifier(pk.field)).join(",");
		      primaryKeys = model.primaryKeyAttributes.length > 1 ? `(${pks})` : pks;
		      primaryKeysSelection = pks;
		      return `DELETE FROM ${table} WHERE ${primaryKeys} IN (SELECT ${primaryKeysSelection} FROM ${table}${whereClause}${limit})`;
		    }
		    return `DELETE FROM ${table}${whereClause}`;
		  }
		  addLimitAndOffset(options) {
		    let fragment = "";
		    if (options.limit != null) {
		      fragment += ` LIMIT ${this.escape(options.limit, options)}`;
		    }
		    if (options.offset) {
		      fragment += ` OFFSET ${this.escape(options.offset, options)}`;
		    }
		    return fragment;
		  }
		  attributeToSQL(attribute, options) {
		    if (!_.isPlainObject(attribute)) {
		      attribute = {
		        type: attribute
		      };
		    }
		    let type;
		    if (attribute.type instanceof DataTypes.ENUM || attribute.type instanceof DataTypes.ARRAY && attribute.type.type instanceof DataTypes.ENUM) {
		      const enumType = attribute.type.type || attribute.type;
		      const values = enumType.options.values;
		      if (Array.isArray(values) && values.length > 0) {
		        type = `ENUM(${values.map((value) => this.escape(value)).join(", ")})`;
		        if (attribute.type instanceof DataTypes.ARRAY) {
		          type += "[]";
		        }
		      } else {
		        throw new Error("Values for ENUM haven't been defined.");
		      }
		    }
		    if (!type) {
		      type = attribute.type;
		    }
		    let sql = type.toString();
		    if (attribute.allowNull === false) {
		      sql += " NOT NULL";
		    }
		    if (attribute.autoIncrement) {
		      if (attribute.autoIncrementIdentity) {
		        sql += " GENERATED BY DEFAULT AS IDENTITY";
		      } else {
		        sql += " SERIAL";
		      }
		    }
		    if ((0, import_query_builder_utils.defaultValueSchemable)(attribute.defaultValue)) {
		      sql += ` DEFAULT ${this.escape(attribute.defaultValue, { type: attribute.type })}`;
		    }
		    if (attribute.unique === true) {
		      sql += " UNIQUE";
		    }
		    if (attribute.primaryKey) {
		      sql += " PRIMARY KEY";
		    }
		    if (attribute.references) {
		      let schema;
		      if (options.schema) {
		        schema = options.schema;
		      } else if ((!attribute.references.table || typeof attribute.references.table === "string") && options.table && options.table.schema) {
		        schema = options.table.schema;
		      }
		      const referencesTable = this.extractTableDetails(attribute.references.table, { schema });
		      let referencesKey;
		      if (!options.withoutForeignKeyConstraints) {
		        if (attribute.references.key) {
		          referencesKey = this.quoteIdentifiers(attribute.references.key);
		        } else {
		          referencesKey = this.quoteIdentifier("id");
		        }
		        sql += ` REFERENCES ${this.quoteTable(referencesTable)} (${referencesKey})`;
		        if (attribute.onDelete) {
		          sql += ` ON DELETE ${attribute.onDelete.toUpperCase()}`;
		        }
		        if (attribute.onUpdate) {
		          sql += ` ON UPDATE ${attribute.onUpdate.toUpperCase()}`;
		        }
		        if (attribute.references.deferrable) {
		          sql += ` ${this._getDeferrableConstraintSnippet(attribute.references.deferrable)}`;
		        }
		      }
		    }
		    if (attribute.comment && typeof attribute.comment === "string") {
		      if (options && ["addColumn", "changeColumn"].includes(options.context)) {
		        const quotedAttr = this.quoteIdentifier(options.key);
		        const escapedCommentText = this.escape(attribute.comment);
		        sql += `; COMMENT ON COLUMN ${this.quoteTable(options.table)}.${quotedAttr} IS ${escapedCommentText}`;
		      } else {
		        sql += ` COMMENT ${attribute.comment}`;
		      }
		    }
		    return sql;
		  }
		  attributesToSQL(attributes, options) {
		    const result = {};
		    for (const key in attributes) {
		      const attribute = attributes[key];
		      result[attribute.field || key] = this.attributeToSQL(attribute, { key, ...options });
		    }
		    return result;
		  }
		  createTrigger(tableName, triggerName, eventType, fireOnSpec, functionName, functionParams, optionsArray) {
		    const decodedEventType = this.decodeTriggerEventType(eventType);
		    const eventSpec = this.expandTriggerEventSpec(fireOnSpec);
		    const expandedOptions = this.expandOptions(optionsArray);
		    const paramList = this._expandFunctionParamList(functionParams);
		    return `CREATE ${this.triggerEventTypeIsConstraint(eventType)}TRIGGER ${this.quoteIdentifier(triggerName)} ${decodedEventType} ${eventSpec} ON ${this.quoteTable(tableName)}${expandedOptions ? ` ${expandedOptions}` : ""} EXECUTE PROCEDURE ${functionName}(${paramList});`;
		  }
		  dropTrigger(tableName, triggerName) {
		    return `DROP TRIGGER ${this.quoteIdentifier(triggerName)} ON ${this.quoteTable(tableName)} RESTRICT;`;
		  }
		  renameTrigger(tableName, oldTriggerName, newTriggerName) {
		    return `ALTER TRIGGER ${this.quoteIdentifier(oldTriggerName)} ON ${this.quoteTable(tableName)} RENAME TO ${this.quoteIdentifier(newTriggerName)};`;
		  }
		  createFunction(functionName, params, returnType, language, body, optionsArray, options) {
		    if (!functionName || !returnType || !language || !body) {
		      throw new Error("createFunction missing some parameters. Did you pass functionName, returnType, language and body?");
		    }
		    const paramList = this._expandFunctionParamList(params);
		    const variableList = options && options.variables ? this._expandFunctionVariableList(options.variables) : "";
		    const expandedOptionsArray = this.expandOptions(optionsArray);
		    const statement = options && options.force ? "CREATE OR REPLACE FUNCTION" : "CREATE FUNCTION";
		    return `${statement} ${functionName}(${paramList}) RETURNS ${returnType} AS $func$ ${variableList} BEGIN ${body} END; $func$ language '${language}'${expandedOptionsArray};`;
		  }
		  dropFunction(functionName, params) {
		    if (!functionName) {
		      throw new Error("requires functionName");
		    }
		    const paramList = this._expandFunctionParamList(params);
		    return `DROP FUNCTION ${functionName}(${paramList}) RESTRICT;`;
		  }
		  renameFunction(oldFunctionName, params, newFunctionName) {
		    const paramList = this._expandFunctionParamList(params);
		    return `ALTER FUNCTION ${oldFunctionName}(${paramList}) RENAME TO ${newFunctionName};`;
		  }
		  _expandFunctionParamList(params) {
		    if (params === void 0 || !Array.isArray(params)) {
		      throw new Error("_expandFunctionParamList: function parameters array required, including an empty one for no arguments");
		    }
		    const paramList = [];
		    for (const curParam of params) {
		      const paramDef = [];
		      if (curParam.type) {
		        if (curParam.direction) {
		          paramDef.push(curParam.direction);
		        }
		        if (curParam.name) {
		          paramDef.push(curParam.name);
		        }
		        paramDef.push(curParam.type);
		      } else {
		        throw new Error("function or trigger used with a parameter without any type");
		      }
		      const joined = paramDef.join(" ");
		      if (joined) {
		        paramList.push(joined);
		      }
		    }
		    return paramList.join(", ");
		  }
		  _expandFunctionVariableList(variables) {
		    if (!Array.isArray(variables)) {
		      throw new TypeError("_expandFunctionVariableList: function variables must be an array");
		    }
		    const variableDefinitions = [];
		    for (const variable of variables) {
		      if (!variable.name || !variable.type) {
		        throw new Error("function variable must have a name and type");
		      }
		      let variableDefinition = `DECLARE ${variable.name} ${variable.type}`;
		      if (variable.default) {
		        variableDefinition += ` := ${variable.default}`;
		      }
		      variableDefinition += ";";
		      variableDefinitions.push(variableDefinition);
		    }
		    return variableDefinitions.join(" ");
		  }
		  expandOptions(options) {
		    return options === void 0 || _.isEmpty(options) ? "" : options.join(" ");
		  }
		  decodeTriggerEventType(eventSpecifier) {
		    const EVENT_DECODER = {
		      after: "AFTER",
		      before: "BEFORE",
		      instead_of: "INSTEAD OF",
		      after_constraint: "AFTER"
		    };
		    if (!EVENT_DECODER[eventSpecifier]) {
		      throw new Error(`Invalid trigger event specified: ${eventSpecifier}`);
		    }
		    return EVENT_DECODER[eventSpecifier];
		  }
		  triggerEventTypeIsConstraint(eventSpecifier) {
		    return eventSpecifier === "after_constraint" ? "CONSTRAINT " : "";
		  }
		  expandTriggerEventSpec(fireOnSpec) {
		    if (_.isEmpty(fireOnSpec)) {
		      throw new Error("no table change events specified to trigger on");
		    }
		    return _.map(fireOnSpec, (fireValue, fireKey) => {
		      const EVENT_MAP = {
		        insert: "INSERT",
		        update: "UPDATE",
		        delete: "DELETE",
		        truncate: "TRUNCATE"
		      };
		      if (!EVENT_MAP[fireValue]) {
		        throw new Error(`parseTriggerEventSpec: undefined trigger event ${fireKey}`);
		      }
		      let eventSpec = EVENT_MAP[fireValue];
		      if (eventSpec === "UPDATE" && Array.isArray(fireValue) && fireValue.length > 0) {
		        eventSpec += ` OF ${fireValue.join(", ")}`;
		      }
		      return eventSpec;
		    }).join(" OR ");
		  }
		  pgEnumName(tableName, columnName, options = {}) {
		    const tableDetails = this.extractTableDetails(tableName, options);
		    const enumName = `enum_${tableDetails.tableName}_${columnName}`;
		    if (options.noEscape) {
		      return enumName;
		    }
		    const escapedEnumName = this.quoteIdentifier(enumName);
		    if (options.schema !== false && tableDetails.schema) {
		      return this.quoteIdentifier(tableDetails.schema) + tableDetails.delimiter + escapedEnumName;
		    }
		    return escapedEnumName;
		  }
		  pgListEnums(tableName, attrName, options) {
		    let enumName = "";
		    const tableDetails = tableName != null ? this.extractTableDetails(tableName, options) : { schema: this.options.schema || this.dialect.getDefaultSchema() };
		    if (tableDetails.tableName && attrName) {
		      enumName = ` AND t.typname=${this.escape(this.pgEnumName(tableDetails.tableName, attrName, { noEscape: true }))}`;
		    }
		    return `SELECT t.typname enum_name, array_agg(e.enumlabel ORDER BY enumsortorder) enum_value FROM pg_type t JOIN pg_enum e ON t.oid = e.enumtypid JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = ${this.escape(tableDetails.schema)}${enumName} GROUP BY 1`;
		  }
		  pgEnum(tableName, attr, dataType, options) {
		    const enumName = this.pgEnumName(tableName, attr, options);
		    let values;
		    if (dataType instanceof import_data_types.ENUM && dataType.options.values) {
		      values = `ENUM(${dataType.options.values.map((value) => this.escape(value)).join(", ")})`;
		    } else {
		      values = dataType.toString().match(/^ENUM\(.+\)/)[0];
		    }
		    let sql = `DO ${this.escape(`BEGIN CREATE TYPE ${enumName} AS ${values}; EXCEPTION WHEN duplicate_object THEN null; END`)};`;
		    if (Boolean(options) && options.force === true) {
		      sql = this.pgEnumDrop(tableName, attr) + sql;
		    }
		    return sql;
		  }
		  pgEnumAdd(tableName, attr, value, options) {
		    const enumName = this.pgEnumName(tableName, attr);
		    let sql = `ALTER TYPE ${enumName} ADD VALUE IF NOT EXISTS `;
		    sql += this.escape(value);
		    if (options.before) {
		      sql += ` BEFORE ${this.escape(options.before)}`;
		    } else if (options.after) {
		      sql += ` AFTER ${this.escape(options.after)}`;
		    }
		    return sql;
		  }
		  pgEnumDrop(tableName, attr, enumName) {
		    enumName = enumName || this.pgEnumName(tableName, attr);
		    return `DROP TYPE IF EXISTS ${enumName}; `;
		  }
		  fromArray(text) {
		    if (Array.isArray(text)) {
		      return text;
		    }
		    text = text.replace(/^{/, "").replace(/}$/, "");
		    let matches = text.match(/("(?:\\.|[^"\\])*"|[^,]*)(?:\s*,\s*|\s*$)/gi);
		    if (matches.length === 0) {
		      return [];
		    }
		    matches = matches.map((m) => m.replace(/",$/, "").replace(/,$/, "").replaceAll(/(^"|"$)/g, ""));
		    return matches.slice(0, -1);
		  }
		  dataTypeMapping(tableName, attr, dataType) {
		    if (dataType.includes("PRIMARY KEY")) {
		      dataType = dataType.replace("PRIMARY KEY", "");
		    }
		    if (dataType.includes("SERIAL")) {
		      if (dataType.includes("BIGINT")) {
		        dataType = dataType.replace("SERIAL", "BIGSERIAL");
		        dataType = dataType.replace("BIGINT", "");
		      } else if (dataType.includes("SMALLINT")) {
		        dataType = dataType.replace("SERIAL", "SMALLSERIAL");
		        dataType = dataType.replace("SMALLINT", "");
		      } else {
		        dataType = dataType.replace("INTEGER", "");
		      }
		      dataType = dataType.replace("NOT NULL", "");
		    }
		    if (dataType.startsWith("ENUM(")) {
		      dataType = dataType.replace(/^ENUM\(.+\)/, this.pgEnumName(tableName, attr));
		    }
		    return dataType;
		  }
		  /**
		   * Generate common SQL prefix for getForeignKeyReferencesQuery.
		   *
		   * @returns {string}
		   */
		  _getForeignKeyReferencesQueryPrefix() {
		    return "SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name ";
		  }
		  /**
		   * Generates an SQL query that returns all foreign keys details of a table.
		   *
		   * As for getForeignKeyQuery is not compatible with getForeignKeyReferencesQuery, so add a new function.
		   *
		   * @param {string} tableName
		   * @param {string} catalogName
		   * @param {string} schemaName
		   */
		  getForeignKeyReferencesQuery(tableName, catalogName, schemaName) {
		    return `${this._getForeignKeyReferencesQueryPrefix()}WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = '${tableName}'${catalogName ? ` AND tc.table_catalog = '${catalogName}'` : ""}${schemaName ? ` AND tc.table_schema = '${schemaName}'` : ""}`;
		  }
		  getForeignKeyReferenceQuery(table, columnName) {
		    const tableName = table.tableName || table;
		    const schema = table.schema;
		    return `${this._getForeignKeyReferencesQueryPrefix()}WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name='${tableName}' AND  kcu.column_name = '${columnName}'${schema ? ` AND tc.table_schema = '${schema}'` : ""}`;
		  }
		  /**
		   * Generates an SQL query that removes a foreign key from a table.
		   *
		   * @param  {string} tableName  The name of the table.
		   * @param  {string} foreignKey The name of the foreign key constraint.
		   * @returns {string}            The generated sql query.
		   * @private
		   */
		  dropForeignKeyQuery(tableName, foreignKey) {
		    return `ALTER TABLE ${this.quoteTable(tableName)} DROP CONSTRAINT ${this.quoteIdentifier(foreignKey)};`;
		  }
		  /**
		   * Quote identifier in sql clause
		   *
		   * @param {string} identifier
		   * @param {boolean} force
		   *
		   * @returns {string}
		   */
		  quoteIdentifier(identifier, force) {
		    const optForceQuote = force || false;
		    const optQuoteIdentifiers = this.options.quoteIdentifiers !== false;
		    if (optForceQuote === true || optQuoteIdentifiers !== false || identifier.includes(".") || identifier.includes("->") || POSTGRES_RESERVED_WORDS.includes(identifier.toLowerCase())) {
		      return (0, import_dialect.quoteIdentifier)(identifier, this.dialect.TICK_CHAR_LEFT, this.dialect.TICK_CHAR_RIGHT);
		    }
		    return identifier;
		  }
		}
		
		return queryGenerator$4;
	}

	var dataTypes$4;
	var hasRequiredDataTypes$4;

	function requireDataTypes$4 () {
		if (hasRequiredDataTypes$4) return dataTypes$4;
		hasRequiredDataTypes$4 = 1;
		var __create = Object.create;
		var __defProp = Object.defineProperty;
		var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
		var __getOwnPropNames = Object.getOwnPropertyNames;
		var __getProtoOf = Object.getPrototypeOf;
		var __hasOwnProp = Object.prototype.hasOwnProperty;
		var __export = (target, all) => {
		  for (var name in all)
		    __defProp(target, name, { get: all[name], enumerable: true });
		};
		var __copyProps = (to, from, except, desc) => {
		  if (from && typeof from === "object" || typeof from === "function") {
		    for (let key of __getOwnPropNames(from))
		      if (!__hasOwnProp.call(to, key) && key !== except)
		        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
		  }
		  return to;
		};
		var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
		  // If the importer is in node compatibility mode or this is not an ESM
		  // file that has been converted to a CommonJS file using a Babel-
		  // compatible transform (i.e. "__esModule" has not been set), then set
		  // "default" to the CommonJS "module.exports" for node compatibility.
		  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
		  mod
		));
		var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
		var data_types_exports = {};
		__export(data_types_exports, {
		  ARRAY: () => ARRAY,
		  BIGINT: () => BIGINT,
		  BLOB: () => BLOB,
		  DATE: () => DATE,
		  DATEONLY: () => DATEONLY,
		  DECIMAL: () => DECIMAL,
		  DOUBLE: () => DOUBLE,
		  ENUM: () => ENUM,
		  FLOAT: () => FLOAT,
		  GEOGRAPHY: () => GEOGRAPHY,
		  GEOMETRY: () => GEOMETRY,
		  HSTORE: () => HSTORE,
		  INTEGER: () => INTEGER,
		  MEDIUMINT: () => MEDIUMINT,
		  RANGE: () => RANGE,
		  SMALLINT: () => SMALLINT,
		  TEXT: () => TEXT,
		  TINYINT: () => TINYINT
		});
		dataTypes$4 = __toCommonJS(data_types_exports);
		var import_node_assert = __toESM(require$$0$4);
		var import_wkx = __toESM(requireWkx());
		var import_check = requireCheck();
		var BaseTypes = __toESM(requireDataTypes$8());
		var import_data_types_utils = requireDataTypesUtils();
		var Hstore = __toESM(requireHstore());
		var import_query_generator = requireQueryGenerator$4();
		var RangeParser = __toESM(range$2);
		function removeUnsupportedIntegerOptions(dataType, dialect) {
		  if (dataType.options.length != null) {
		    dialect.warnDataTypeIssue(`${dialect.name} does not support ${dataType.getDataTypeId()} with length specified. This options is ignored.`);
		    delete dataType.options.length;
		  }
		}
		class DATEONLY extends BaseTypes.DATEONLY {
		  toBindableValue(value) {
		    if (value === Number.POSITIVE_INFINITY) {
		      return "infinity";
		    }
		    if (value === Number.NEGATIVE_INFINITY) {
		      return "-infinity";
		    }
		    return super.toBindableValue(value);
		  }
		  sanitize(value) {
		    if (value === Number.POSITIVE_INFINITY || value === Number.NEGATIVE_INFINITY) {
		      return value;
		    }
		    if (typeof value === "string") {
		      const lower = value.toLowerCase();
		      if (lower === "infinity") {
		        return Number.POSITIVE_INFINITY;
		      }
		      if (lower === "-infinity") {
		        return Number.NEGATIVE_INFINITY;
		      }
		    }
		    return super.sanitize(value);
		  }
		}
		class DECIMAL extends BaseTypes.DECIMAL {
		  // TODO: add check constraint >= 0 if unsigned is true
		}
		class TEXT extends BaseTypes.TEXT {
		  _checkOptionSupport(dialect) {
		    super._checkOptionSupport(dialect);
		    if (this.options.length) {
		      dialect.warnDataTypeIssue(
		        `${dialect.name} does not support TEXT with options. Plain TEXT will be used instead.`
		      );
		      this.options.length = void 0;
		    }
		  }
		}
		class DATE extends BaseTypes.DATE {
		  toSql() {
		    if (this.options.precision != null) {
		      return `TIMESTAMP(${this.options.precision}) WITH TIME ZONE`;
		    }
		    return "TIMESTAMP WITH TIME ZONE";
		  }
		  validate(value) {
		    if (value === Number.POSITIVE_INFINITY || value === Number.NEGATIVE_INFINITY) {
		      return;
		    }
		    super.validate(value);
		  }
		  toBindableValue(value) {
		    if (value === Number.POSITIVE_INFINITY) {
		      return "infinity";
		    }
		    if (value === Number.NEGATIVE_INFINITY) {
		      return "-infinity";
		    }
		    return super.toBindableValue(value);
		  }
		  sanitize(value) {
		    if (value == null) {
		      return value;
		    }
		    if (value === Number.POSITIVE_INFINITY || value === Number.NEGATIVE_INFINITY) {
		      return value;
		    }
		    if (value instanceof Date) {
		      return value;
		    }
		    if (typeof value === "string") {
		      const lower = value.toLowerCase();
		      if (lower === "infinity") {
		        return Number.POSITIVE_INFINITY;
		      }
		      if (lower === "-infinity") {
		        return Number.NEGATIVE_INFINITY;
		      }
		    }
		    return super.sanitize(value);
		  }
		}
		class TINYINT extends BaseTypes.TINYINT {
		  _checkOptionSupport(dialect) {
		    super._checkOptionSupport(dialect);
		    removeUnsupportedIntegerOptions(this, dialect);
		  }
		  // TODO: add >= 0 =< 2^8-1 check when the unsigned option is true
		  // TODO: add >= -2^7 =< 2^7-1 check when the unsigned option is false
		  toSql() {
		    return "SMALLINT";
		  }
		}
		class SMALLINT extends BaseTypes.SMALLINT {
		  _checkOptionSupport(dialect) {
		    super._checkOptionSupport(dialect);
		    removeUnsupportedIntegerOptions(this, dialect);
		  }
		  // TODO: add >= 0 =< 2^16-1 check when the unsigned option is true
		  toSql() {
		    if (this.options.unsigned) {
		      return "INTEGER";
		    }
		    return "SMALLINT";
		  }
		}
		class MEDIUMINT extends BaseTypes.MEDIUMINT {
		  _checkOptionSupport(dialect) {
		    super._checkOptionSupport(dialect);
		    removeUnsupportedIntegerOptions(this, dialect);
		  }
		  // TODO: add >= 0 =< 2^24-1 check when the unsigned option is true
		  // TODO: add >= -2^23 =< 2^23-1 check when the unsigned option is false
		  toSql() {
		    return "INTEGER";
		  }
		}
		class INTEGER extends BaseTypes.INTEGER {
		  _checkOptionSupport(dialect) {
		    super._checkOptionSupport(dialect);
		    removeUnsupportedIntegerOptions(this, dialect);
		  }
		  // TODO: add >= 0 =< 2^32-1 check when the unsigned option is true
		  toSql() {
		    if (this.options.unsigned) {
		      return "BIGINT";
		    }
		    return "INTEGER";
		  }
		}
		class BIGINT extends BaseTypes.BIGINT {
		  _checkOptionSupport(dialect) {
		    super._checkOptionSupport(dialect);
		    removeUnsupportedIntegerOptions(this, dialect);
		  }
		}
		class DOUBLE extends BaseTypes.DOUBLE {
		  // TODO: add check constraint >= 0 if unsigned is true
		}
		class FLOAT extends BaseTypes.FLOAT {
		  // TODO: add check constraint >= 0 if unsigned is true
		  getNumberSqlTypeName() {
		    return "REAL";
		  }
		}
		class BLOB extends BaseTypes.BLOB {
		  _checkOptionSupport(dialect) {
		    super._checkOptionSupport(dialect);
		    if (this.options.length) {
		      dialect.warnDataTypeIssue(
		        `${dialect.name} does not support BLOB (BYTEA) with options. Plain BYTEA will be used instead.`
		      );
		      this.options.length = void 0;
		    }
		  }
		  toSql() {
		    return "BYTEA";
		  }
		}
		class GEOMETRY extends BaseTypes.GEOMETRY {
		  toSql() {
		    let result = "GEOMETRY";
		    if (this.options.type) {
		      result += `(${this.options.type.toUpperCase()}`;
		      if (this.options.srid) {
		        result += `,${this.options.srid}`;
		      }
		      result += ")";
		    }
		    return result;
		  }
		  parse(value) {
		    const b = Buffer.from(value, "hex");
		    return import_wkx.default.Geometry.parse(b).toGeoJSON({ shortCrs: true });
		  }
		  toBindableValue(value) {
		    return `ST_GeomFromGeoJSON(${this._getDialect().escapeString(JSON.stringify(value))})`;
		  }
		  getBindParamSql(value, options) {
		    return `ST_GeomFromGeoJSON(${options.bindParam(value)})`;
		  }
		}
		class GEOGRAPHY extends BaseTypes.GEOGRAPHY {
		  toSql() {
		    let result = "GEOGRAPHY";
		    if (this.options.type) {
		      result += `(${this.options.type}`;
		      if (this.options.srid) {
		        result += `,${this.options.srid}`;
		      }
		      result += ")";
		    }
		    return result;
		  }
		  toBindableValue(value) {
		    return `ST_GeomFromGeoJSON(${this._getDialect().escapeString(JSON.stringify(value))})`;
		  }
		  getBindParamSql(value, options) {
		    return `ST_GeomFromGeoJSON(${options.bindParam(value)})`;
		  }
		}
		class HSTORE extends BaseTypes.HSTORE {
		  toBindableValue(value) {
		    if (value == null) {
		      return value;
		    }
		    return Hstore.stringify(value);
		  }
		}
		class RANGE extends BaseTypes.RANGE {
		  toBindableValue(values) {
		    if (!Array.isArray(values)) {
		      throw new TypeError("Range values must be an array");
		    }
		    return RangeParser.stringify(values, (rangePart) => {
		      let out = this.options.subtype.toBindableValue(rangePart);
		      if ((0, import_check.isNumber)(out) || (0, import_check.isBigInt)(out)) {
		        out = String(out);
		      }
		      if (!(0, import_check.isString)(out)) {
		        throw new Error("DataTypes.RANGE only accepts types that are represented by either strings, numbers or bigints.");
		      }
		      return out;
		    });
		  }
		  escape(values) {
		    const value = this.toBindableValue(values);
		    const dialect = this._getDialect();
		    return `${dialect.escapeString(value)}::${this.toSql()}`;
		  }
		  getBindParamSql(values, options) {
		    const value = this.toBindableValue(values);
		    return `${options.bindParam(value)}::${this.toSql()}`;
		  }
		  toSql() {
		    const subTypeClass = this.options.subtype.constructor;
		    return RANGE.typeMap[subTypeClass.getDataTypeId().toLowerCase()];
		  }
		  static typeMap = {
		    integer: "int4range",
		    decimal: "numrange",
		    date: "tstzrange",
		    dateonly: "daterange",
		    bigint: "int8range"
		  };
		}
		class ARRAY extends BaseTypes.ARRAY {
		  escape(values) {
		    const type = this.options.type;
		    const mappedValues = (0, import_check.isString)(type) ? values : values.map((value) => type.escape(value));
		    const unambiguousType = type instanceof BaseTypes.STRING || type instanceof BaseTypes.TEXT || type instanceof BaseTypes.INTEGER;
		    const cast = mappedValues.length === 0 || !unambiguousType ? `::${(0, import_data_types_utils.attributeTypeToSql)(type)}[]` : "";
		    return `ARRAY[${mappedValues.join(",")}]${cast}`;
		  }
		  getBindParamSql(values, options) {
		    if ((0, import_check.isString)(this.options.type)) {
		      return options.bindParam(values);
		    }
		    const subType = this.options.type;
		    return options.bindParam(values.map((value) => {
		      return subType.toBindableValue(value);
		    }));
		  }
		}
		class ENUM extends BaseTypes.ENUM {
		  toSql() {
		    const context = this.usageContext;
		    if (context == null) {
		      throw new Error("Could not determine the name of this enum because it is not attached to an attribute or a column.");
		    }
		    let tableName;
		    let columnName;
		    if ("model" in context) {
		      tableName = context.model.getTableName();
		      const attribute = context.model.getAttributes()[context.attributeName];
		      columnName = attribute.field ?? context.attributeName;
		    } else {
		      tableName = context.tableName;
		      columnName = context.columnName;
		    }
		    const queryGenerator = context.sequelize.dialect.queryGenerator;
		    (0, import_node_assert.default)(queryGenerator instanceof import_query_generator.PostgresQueryGenerator, "expected queryGenerator to be PostgresQueryGenerator");
		    return queryGenerator.pgEnumName(tableName, columnName);
		  }
		}
		
		return dataTypes$4;
	}

	var query$4;
	var hasRequiredQuery$4;

	function requireQuery$4 () {
		if (hasRequiredQuery$4) return query$4;
		hasRequiredQuery$4 = 1;
		var __defProp = Object.defineProperty;
		var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
		var __getOwnPropNames = Object.getOwnPropertyNames;
		var __hasOwnProp = Object.prototype.hasOwnProperty;
		var __export = (target, all) => {
		  for (var name in all)
		    __defProp(target, name, { get: all[name], enumerable: true });
		};
		var __copyProps = (to, from, except, desc) => {
		  if (from && typeof from === "object" || typeof from === "function") {
		    for (let key of __getOwnPropNames(from))
		      if (!__hasOwnProp.call(to, key) && key !== except)
		        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
		  }
		  return to;
		};
		var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
		var query_exports = {};
		__export(query_exports, {
		  PostgresQuery: () => PostgresQuery
		});
		query$4 = __toCommonJS(query_exports);
		const { AbstractQuery } = requireQuery$8();
		const { QueryTypes } = queryTypes;
		const sequelizeErrors = errors;
		const _ = lodashExports;
		const { logger } = requireLogger();
		const debug = logger.debugContext("sql:pg");
		class PostgresQuery extends AbstractQuery {
		  async run(sql, parameters, options) {
		    const { connection } = this;
		    if (!_.isEmpty(this.options.searchPath)) {
		      sql = this.sequelize.getQueryInterface().queryGenerator.setSearchPath(this.options.searchPath) + sql;
		    }
		    if ((options == null ? void 0 : options.minifyAliases) && this.options.includeAliases) {
		      for (const [alias, original] of _.toPairs(this.options.includeAliases).sort((a, b) => b[1].length - a[1].length)) {
		        const reg = new RegExp(_.escapeRegExp(original), "g");
		        sql = sql.replace(reg, alias);
		      }
		    }
		    this.sql = sql;
		    const query = new Promise((resolve, reject) => {
		      if (parameters && parameters.length > 0) {
		        connection.query(sql, parameters, (error, result) => error ? reject(error) : resolve(result));
		      } else {
		        connection.query(sql, (error, result) => error ? reject(error) : resolve(result));
		      }
		    });
		    const complete = this._logQuery(sql, debug, parameters);
		    let queryResult;
		    try {
		      queryResult = await query;
		    } catch (error) {
		      if (error.code === "ECONNRESET" || /Unable to set non-blocking to true/i.test(error) || /SSL SYSCALL error: EOF detected/i.test(error) || /Local: Authentication failure/i.test(error) || error.message === "Query read timeout") {
		        connection._invalid = true;
		      }
		      error.sql = sql;
		      error.parameters = parameters;
		      throw this.formatError(error);
		    }
		    complete();
		    let rows = Array.isArray(queryResult) ? queryResult.reduce((allRows, r) => allRows.concat(r.rows || []), []) : queryResult.rows;
		    const rowCount = Array.isArray(queryResult) ? queryResult.reduce(
		      (count, r) => Number.isFinite(r.rowCount) ? count + r.rowCount : count,
		      0
		    ) : queryResult.rowCount || 0;
		    if ((options == null ? void 0 : options.minifyAliases) && this.options.aliasesMapping) {
		      rows = rows.map((row) => _.toPairs(row).reduce((acc, [key, value]) => {
		        const mapping = this.options.aliasesMapping.get(key);
		        acc[mapping || key] = value;
		        return acc;
		      }, {}));
		    }
		    const isTableNameQuery = sql.startsWith("SELECT table_name FROM information_schema.tables");
		    const isRelNameQuery = sql.startsWith("SELECT relname FROM pg_class WHERE oid IN");
		    if (isRelNameQuery) {
		      return rows.map((row) => ({
		        name: row.relname,
		        tableName: row.relname.split("_")[0]
		      }));
		    }
		    if (isTableNameQuery) {
		      return rows.map((row) => Object.values(row));
		    }
		    if (rows[0] && rows[0].sequelize_caught_exception !== void 0) {
		      if (rows[0].sequelize_caught_exception !== null) {
		        throw this.formatError({
		          sql,
		          parameters,
		          code: "23505",
		          detail: rows[0].sequelize_caught_exception
		        });
		      }
		      for (const row of rows) {
		        delete row.sequelize_caught_exception;
		      }
		    }
		    if (this.isShowIndexesQuery()) {
		      for (const row of rows) {
		        let attributes;
		        if (/include \(([^]*)\)/gi.test(row.definition)) {
		          attributes = /on .*? (?:using .*?\s)?\(([^]*)\) include \(([^]*)\)/gi.exec(row.definition)[1].split(",");
		        } else {
		          attributes = /on .*? (?:using .*?\s)?\(([^]*)\)/gi.exec(row.definition)[1].split(",");
		        }
		        const columns = _.zipObject(
		          row.column_indexes,
		          this.sequelize.getQueryInterface().queryGenerator.fromArray(row.column_names)
		        );
		        delete row.column_indexes;
		        delete row.column_names;
		        let field;
		        let attribute;
		        row.fields = row.index_fields.map((indKey, index) => {
		          field = columns[indKey];
		          if (!field) {
		            return null;
		          }
		          attribute = attributes[index];
		          return {
		            attribute: field,
		            collate: /COLLATE "(.*?)"/.test(attribute) ? /COLLATE "(.*?)"/.exec(attribute)[1] : void 0,
		            order: attribute.includes("DESC") ? "DESC" : attribute.includes("ASC") ? "ASC" : void 0,
		            length: void 0
		          };
		        }).filter((n) => n !== null);
		        row.includes = row.include_fields.map((indKey) => {
		          field = columns[indKey];
		          if (!field) {
		            return null;
		          }
		          return field;
		        }).filter((n) => n !== null);
		        delete row.columns;
		        delete row.definition;
		        delete row.index_fields;
		        delete row.include_fields;
		      }
		      return rows;
		    }
		    if (this.isForeignKeysQuery()) {
		      const result = [];
		      for (const row of rows) {
		        let defParts;
		        if (row.condef !== void 0 && (defParts = row.condef.match(/FOREIGN KEY \((.+)\) REFERENCES (.+)\((.+)\)( ON (UPDATE|DELETE) (CASCADE|RESTRICT))?( ON (UPDATE|DELETE) (CASCADE|RESTRICT))?/))) {
		          row.id = row.constraintName;
		          row.table = defParts[2];
		          row.from = defParts[1];
		          row.to = defParts[3];
		          let i;
		          for (i = 5; i <= 8; i += 3) {
		            if (/(UPDATE|DELETE)/.test(defParts[i])) {
		              row[`on_${defParts[i].toLowerCase()}`] = defParts[i + 1];
		            }
		          }
		        }
		        result.push(row);
		      }
		      return result;
		    }
		    if (this.isSelectQuery()) {
		      let result = rows;
		      if (this.options.raw === false && this.sequelize.options.quoteIdentifiers === false) {
		        const attrsMap = /* @__PURE__ */ Object.create(null);
		        for (const attrName of this.model.modelDefinition.attributes.keys()) {
		          attrsMap[attrName.toLowerCase()] = attrName;
		        }
		        result = rows.map((row) => {
		          return _.mapKeys(row, (value, key) => {
		            const targetAttr = attrsMap[key];
		            if (typeof targetAttr === "string" && targetAttr !== key) {
		              return targetAttr;
		            }
		            return key;
		          });
		        });
		      }
		      return this.handleSelectQuery(result);
		    }
		    if (QueryTypes.DESCRIBE === this.options.type) {
		      const result = {};
		      for (const row of rows) {
		        result[row.Field] = {
		          type: row.Type.toUpperCase(),
		          allowNull: row.Null === "YES",
		          defaultValue: row.Default,
		          comment: row.Comment,
		          special: row.special ? this.sequelize.getQueryInterface().queryGenerator.fromArray(row.special) : [],
		          primaryKey: row.Constraint === "PRIMARY KEY"
		        };
		        if (result[row.Field].type === "BOOLEAN") {
		          result[row.Field].defaultValue = { false: false, true: true }[result[row.Field].defaultValue];
		          if (result[row.Field].defaultValue === void 0) {
		            result[row.Field].defaultValue = null;
		          }
		        }
		        if (typeof result[row.Field].defaultValue === "string") {
		          result[row.Field].defaultValue = result[row.Field].defaultValue.replaceAll("'", "");
		          if (result[row.Field].defaultValue.includes("::")) {
		            const split = result[row.Field].defaultValue.split("::");
		            if (split[1].toLowerCase() !== "regclass)") {
		              result[row.Field].defaultValue = split[0];
		            }
		          }
		        }
		      }
		      return result;
		    }
		    if (this.isShowOrDescribeQuery()) {
		      return rows;
		    }
		    if (QueryTypes.BULKUPDATE === this.options.type) {
		      if (!this.options.returning) {
		        return Number.parseInt(rowCount, 10);
		      }
		      return this.handleSelectQuery(rows);
		    }
		    if (QueryTypes.BULKDELETE === this.options.type) {
		      return Number.parseInt(rowCount, 10);
		    }
		    if (this.isInsertQuery() || this.isUpdateQuery() || this.isUpsertQuery()) {
		      if (this.instance && this.instance.dataValues) {
		        if (this.isInsertQuery() && !this.isUpsertQuery() && rowCount === 0) {
		          throw new sequelizeErrors.EmptyResultError();
		        }
		        if (rows[0]) {
		          for (const attributeOrColumnName of Object.keys(rows[0])) {
		            const modelDefinition = this.model.modelDefinition;
		            const attribute = modelDefinition.attributes.get(attributeOrColumnName) ?? modelDefinition.columns.get(attributeOrColumnName);
		            const updatedValue = this._parseDatabaseValue(rows[0][attributeOrColumnName], attribute == null ? void 0 : attribute.type);
		            this.instance.set((attribute == null ? void 0 : attribute.fieldName) ?? attributeOrColumnName, updatedValue, {
		              raw: true,
		              comesFromDatabase: true
		            });
		          }
		        }
		      }
		      if (this.isUpsertQuery()) {
		        return [
		          this.instance,
		          null
		        ];
		      }
		      return [
		        this.instance || rows && (this.options.plain && rows[0] || rows) || void 0,
		        rowCount
		      ];
		    }
		    if (this.isShowConstraintsQuery()) {
		      return rows;
		    }
		    if (this.isRawQuery()) {
		      return [rows, queryResult];
		    }
		    return rows;
		  }
		  formatError(err) {
		    let match;
		    let table;
		    let index;
		    let fields;
		    let errors;
		    let message;
		    const code = err.code || err.sqlState;
		    const errMessage = err.message || err.messagePrimary;
		    const errDetail = err.detail || err.messageDetail;
		    switch (code) {
		      case "23503":
		        index = errMessage.match(/violates foreign key constraint "(.+?)"/);
		        index = index ? index[1] : void 0;
		        table = errMessage.match(/on table "(.+?)"/);
		        table = table ? table[1] : void 0;
		        return new sequelizeErrors.ForeignKeyConstraintError({
		          message: errMessage,
		          fields: null,
		          index,
		          table,
		          cause: err
		        });
		      case "23505":
		        if (errDetail && (match = errDetail.replaceAll('"', "").match(/Key \((.*?)\)=\((.*?)\)/))) {
		          fields = _.zipObject(match[1].split(", "), match[2].split(", "));
		          errors = [];
		          message = "Validation error";
		          _.forOwn(fields, (value, field) => {
		            errors.push(new sequelizeErrors.ValidationErrorItem(
		              this.getUniqueConstraintErrorMessage(field),
		              "unique violation",
		              // sequelizeErrors.ValidationErrorItem.Origins.DB,
		              field,
		              value,
		              this.instance,
		              "not_unique"
		            ));
		          });
		          if (this.model) {
		            for (const index2 of this.model.getIndexes()) {
		              if (index2.unique && _.isEqual(index2.fields, Object.keys(fields)) && index2.msg) {
		                message = index2.msg;
		                break;
		              }
		            }
		          }
		          return new sequelizeErrors.UniqueConstraintError({ message, errors, cause: err, fields });
		        }
		        return new sequelizeErrors.UniqueConstraintError({
		          message: errMessage,
		          cause: err
		        });
		      case "23P01":
		        match = errDetail.match(/Key \((.*?)\)=\((.*?)\)/);
		        if (match) {
		          fields = _.zipObject(match[1].split(", "), match[2].split(", "));
		        }
		        message = "Exclusion constraint error";
		        return new sequelizeErrors.ExclusionConstraintError({
		          message,
		          constraint: err.constraint,
		          fields,
		          table: err.table,
		          cause: err
		        });
		      case "42704":
		        if (err.sql && /(constraint|index)/gi.test(err.sql)) {
		          message = "Unknown constraint error";
		          index = errMessage.match(/(?:constraint|index) "(.+?)"/i);
		          index = index ? index[1] : void 0;
		          table = errMessage.match(/relation "(.+?)"/i);
		          table = table ? table[1] : void 0;
		          throw new sequelizeErrors.UnknownConstraintError({
		            message,
		            constraint: index,
		            fields,
		            table,
		            cause: err
		          });
		        }
		      default:
		        return new sequelizeErrors.DatabaseError(err);
		    }
		  }
		  isForeignKeysQuery() {
		    return /SELECT conname as constraintName, pg_catalog\.pg_get_constraintdef\(r\.oid, true\) as condef FROM pg_catalog\.pg_constraint r WHERE r\.conrelid = \(SELECT oid FROM pg_class WHERE relname = '.*' LIMIT 1\) AND r\.contype = 'f' ORDER BY 1;/.test(this.sql);
		  }
		  getInsertIdField() {
		    return "id";
		  }
		}
		
		return query$4;
	}

	var queryInterfaceTypescript$1;
	var hasRequiredQueryInterfaceTypescript$1;

	function requireQueryInterfaceTypescript$1 () {
		if (hasRequiredQueryInterfaceTypescript$1) return queryInterfaceTypescript$1;
		hasRequiredQueryInterfaceTypescript$1 = 1;
		var __defProp = Object.defineProperty;
		var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
		var __getOwnPropNames = Object.getOwnPropertyNames;
		var __hasOwnProp = Object.prototype.hasOwnProperty;
		var __export = (target, all) => {
		  for (var name in all)
		    __defProp(target, name, { get: all[name], enumerable: true });
		};
		var __copyProps = (to, from, except, desc) => {
		  if (from && typeof from === "object" || typeof from === "function") {
		    for (let key of __getOwnPropNames(from))
		      if (!__hasOwnProp.call(to, key) && key !== except)
		        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
		  }
		  return to;
		};
		var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
		var query_interface_typescript_exports = {};
		__export(query_interface_typescript_exports, {
		  PostgresQueryInterfaceTypescript: () => PostgresQueryInterfaceTypescript
		});
		queryInterfaceTypescript$1 = __toCommonJS(query_interface_typescript_exports);
		var import_query_interface_internal = queryInterfaceInternal;
		var import_query_interface = queryInterface$8;
		class PostgresQueryInterfaceTypescript extends import_query_interface.AbstractQueryInterface {
		  #internalQueryInterface;
		  constructor(sequelize, queryGenerator, internalQueryInterface) {
		    internalQueryInterface ??= new import_query_interface_internal.AbstractQueryInterfaceInternal(sequelize, queryGenerator);
		    super(sequelize, queryGenerator, internalQueryInterface);
		    this.#internalQueryInterface = internalQueryInterface;
		  }
		  async fetchDatabaseVersion(options) {
		    const payload = await this.#internalQueryInterface.fetchDatabaseVersionRaw(options);
		    return payload.server_version;
		  }
		}
		
		return queryInterfaceTypescript$1;
	}

	var queryInterface$4;
	var hasRequiredQueryInterface$4;

	function requireQueryInterface$4 () {
		if (hasRequiredQueryInterface$4) return queryInterface$4;
		hasRequiredQueryInterface$4 = 1;
		var __defProp = Object.defineProperty;
		var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
		var __getOwnPropNames = Object.getOwnPropertyNames;
		var __hasOwnProp = Object.prototype.hasOwnProperty;
		var __export = (target, all) => {
		  for (var name in all)
		    __defProp(target, name, { get: all[name], enumerable: true });
		};
		var __copyProps = (to, from, except, desc) => {
		  if (from && typeof from === "object" || typeof from === "function") {
		    for (let key of __getOwnPropNames(from))
		      if (!__hasOwnProp.call(to, key) && key !== except)
		        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
		  }
		  return to;
		};
		var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
		var query_interface_exports = {};
		__export(query_interface_exports, {
		  PostgresQueryInterface: () => PostgresQueryInterface
		});
		queryInterface$4 = __toCommonJS(query_interface_exports);
		var import_deferrable = deferrable;
		var import_object = object$1;
		var import_query_interface_typescript = requireQueryInterfaceTypescript$1();
		const DataTypes = dataTypes$8;
		const { QueryTypes } = queryTypes;
		class PostgresQueryInterface extends import_query_interface_typescript.PostgresQueryInterfaceTypescript {
		  /**
		   * Ensure enum and their values.
		   *
		   * @param {string} tableName  Name of table to create
		   * @param {object} attributes Object representing a list of normalized table attributes
		   * @param {object} [options]
		   * @param {Model}  [model]
		   *
		   * @protected
		   */
		  async ensureEnums(tableName, attributes, options, model) {
		    const keys = Object.keys(attributes);
		    const keyLen = keys.length;
		    let sql = "";
		    let promises = [];
		    let i = 0;
		    for (i = 0; i < keyLen; i++) {
		      const attribute = attributes[keys[i]];
		      const type = attribute.type;
		      if (type instanceof DataTypes.ENUM || type instanceof DataTypes.ARRAY && type.options.type instanceof DataTypes.ENUM) {
		        sql = this.queryGenerator.pgListEnums(tableName, attribute.field || keys[i], options);
		        promises.push(this.sequelize.queryRaw(
		          sql,
		          { ...options, plain: true, raw: true, type: QueryTypes.SELECT }
		        ));
		      }
		    }
		    const results = await Promise.all(promises);
		    promises = [];
		    let enumIdx = 0;
		    const addEnumValue = (field, value, relativeValue, position = "before", spliceStart = promises.length) => {
		      const valueOptions = { ...options };
		      valueOptions.before = null;
		      valueOptions.after = null;
		      switch (position) {
		        case "after":
		          valueOptions.after = relativeValue;
		          break;
		        case "before":
		        default:
		          valueOptions.before = relativeValue;
		          break;
		      }
		      promises.splice(spliceStart, 0, () => {
		        return this.sequelize.queryRaw(this.queryGenerator.pgEnumAdd(
		          tableName,
		          field,
		          value,
		          valueOptions
		        ), valueOptions);
		      });
		    };
		    for (i = 0; i < keyLen; i++) {
		      const attribute = attributes[keys[i]];
		      const type = attribute.type;
		      const enumType = type instanceof DataTypes.ARRAY ? type.options.type : type;
		      const field = attribute.field || keys[i];
		      if (type instanceof DataTypes.ENUM || type instanceof DataTypes.ARRAY && enumType instanceof DataTypes.ENUM) {
		        if (!results[enumIdx]) {
		          promises.push(() => {
		            return this.sequelize.queryRaw(this.queryGenerator.pgEnum(tableName, field, enumType, options), { ...options, raw: true });
		          });
		        } else if (Boolean(results[enumIdx]) && Boolean(model)) {
		          const enumVals = this.queryGenerator.fromArray(results[enumIdx].enum_value);
		          const vals = enumType.options.values;
		          let lastOldEnumValue;
		          let rightestPosition = -1;
		          for (let oldIndex = 0; oldIndex < enumVals.length; oldIndex++) {
		            const enumVal = enumVals[oldIndex];
		            const newIdx = vals.indexOf(enumVal);
		            lastOldEnumValue = enumVal;
		            if (newIdx === -1) {
		              continue;
		            }
		            const newValuesBefore = vals.slice(0, newIdx);
		            const promisesLength = promises.length;
		            for (let reverseIdx = newValuesBefore.length - 1; reverseIdx >= 0; reverseIdx--) {
		              if (~enumVals.indexOf(newValuesBefore[reverseIdx])) {
		                break;
		              }
		              addEnumValue(field, newValuesBefore[reverseIdx], lastOldEnumValue, "before", promisesLength);
		            }
		            if (newIdx > rightestPosition) {
		              rightestPosition = newIdx;
		            }
		          }
		          if (lastOldEnumValue && rightestPosition < vals.length - 1) {
		            const remainingEnumValues = vals.slice(rightestPosition + 1);
		            for (let reverseIdx = remainingEnumValues.length - 1; reverseIdx >= 0; reverseIdx--) {
		              addEnumValue(field, remainingEnumValues[reverseIdx], lastOldEnumValue, "after");
		            }
		          }
		          enumIdx++;
		        }
		      }
		    }
		    const result = await promises.reduce(async (promise, asyncFunction) => await asyncFunction(await promise), Promise.resolve());
		    if (promises.length > 0) {
		      await this.sequelize.dialect.connectionManager.refreshDynamicOids();
		    }
		    return result;
		  }
		  /**
		   * @override
		   */
		  async getForeignKeyReferencesForTable(table, options) {
		    const queryOptions = {
		      ...options,
		      type: QueryTypes.FOREIGNKEYS
		    };
		    const query = this.queryGenerator.getForeignKeyReferencesQuery(table.tableName || table, this.sequelize.config.database);
		    const result = await this.sequelize.queryRaw(query, queryOptions);
		    return result.map((fkMeta) => {
		      const { initiallyDeferred, isDeferrable, ...remaining } = (0, import_object.camelizeObjectKeys)(fkMeta);
		      return {
		        ...remaining,
		        deferrable: isDeferrable === "NO" ? import_deferrable.Deferrable.NOT : initiallyDeferred === "NO" ? import_deferrable.Deferrable.INITIALLY_IMMEDIATE : import_deferrable.Deferrable.INITIALLY_DEFERRED
		      };
		    });
		  }
		  /**
		   * Drop specified enum from database (Postgres only)
		   *
		   * @param {string} [enumName]  Enum name to drop
		   * @param {object} options Query options
		   *
		   * @returns {Promise}
		   */
		  async dropEnum(enumName, options) {
		    options = options || {};
		    return this.sequelize.queryRaw(
		      this.queryGenerator.pgEnumDrop(null, null, this.queryGenerator.quoteIdentifier(enumName)),
		      { ...options, raw: true }
		    );
		  }
		  /**
		   * Drop all enums from database (Postgres only)
		   *
		   * @param {object} options Query options
		   *
		   * @returns {Promise}
		   */
		  async dropAllEnums(options) {
		    options = options || {};
		    const enums = await this.pgListEnums(null, options);
		    return await Promise.all(enums.map((result) => this.sequelize.queryRaw(
		      this.queryGenerator.pgEnumDrop(null, null, this.queryGenerator.quoteIdentifier(result.enum_name)),
		      { ...options, raw: true }
		    )));
		  }
		  /**
		   * List all enums (Postgres only)
		   *
		   * @param {string} [tableName]  Table whose enum to list
		   * @param {object} [options]    Query options
		   *
		   * @returns {Promise}
		   */
		  async pgListEnums(tableName, options) {
		    options = options || {};
		    const sql = this.queryGenerator.pgListEnums(tableName);
		    return this.sequelize.queryRaw(sql, { ...options, plain: false, raw: true, type: QueryTypes.SELECT });
		  }
		  /**
		   * Since postgres has a special case for enums, we should drop the related
		   * enum type within the table and attribute
		   *
		   * @override
		   */
		  async dropTable(tableName, options) {
		    await super.dropTable(tableName, options);
		    const promises = [];
		    const model = this.sequelize.modelManager.findModel((model2) => this.queryGenerator.isSameTable(model2.table, tableName));
		    if (!model) {
		      return;
		    }
		    const getTableName = (!options || !options.schema || options.schema === "public" ? "" : `${options.schema}_`) + tableName;
		    const attributes = model.modelDefinition.attributes;
		    for (const attribute of attributes.values()) {
		      if (!(attribute.type instanceof DataTypes.ENUM)) {
		        continue;
		      }
		      const sql = this.queryGenerator.pgEnumDrop(getTableName, attribute.attributeName);
		      promises.push(this.sequelize.queryRaw(sql, {
		        ...options,
		        raw: true,
		        supportsSearchPath: false
		      }));
		    }
		    await Promise.all(promises);
		  }
		}
		
		return queryInterface$4;
	}

	var postgres;
	var hasRequiredPostgres;

	function requirePostgres () {
		if (hasRequiredPostgres) return postgres;
		hasRequiredPostgres = 1;
		var __create = Object.create;
		var __defProp = Object.defineProperty;
		var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
		var __getOwnPropNames = Object.getOwnPropertyNames;
		var __getProtoOf = Object.getPrototypeOf;
		var __hasOwnProp = Object.prototype.hasOwnProperty;
		var __export = (target, all) => {
		  for (var name in all)
		    __defProp(target, name, { get: all[name], enumerable: true });
		};
		var __copyProps = (to, from, except, desc) => {
		  if (from && typeof from === "object" || typeof from === "function") {
		    for (let key of __getOwnPropNames(from))
		      if (!__hasOwnProp.call(to, key) && key !== except)
		        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
		  }
		  return to;
		};
		var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
		  // If the importer is in node compatibility mode or this is not an ESM
		  // file that has been converted to a CommonJS file using a Babel-
		  // compatible transform (i.e. "__esModule" has not been set), then set
		  // "default" to the CommonJS "module.exports" for node compatibility.
		  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
		  mod
		));
		var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
		var postgres_exports = {};
		__export(postgres_exports, {
		  PostgresDialect: () => PostgresDialect
		});
		postgres = __toCommonJS(postgres_exports);
		var import_sql = sql;
		var import_abstract = requireAbstract();
		var import_connection_manager = requireConnectionManager$4();
		var import_data_types_db = requireDataTypesDb();
		var DataTypes = __toESM(requireDataTypes$4());
		var import_query = requireQuery$4();
		var import_query_generator = requireQueryGenerator$4();
		var import_query_interface = requireQueryInterface$4();
		class PostgresDialect extends import_abstract.AbstractDialect {
		  static supports = import_abstract.AbstractDialect.extendSupport({
		    "DEFAULT VALUES": true,
		    EXCEPTION: true,
		    "ON DUPLICATE KEY": false,
		    "ORDER NULLS": true,
		    returnValues: "returning",
		    bulkDefault: true,
		    schemas: true,
		    multiDatabases: true,
		    lock: true,
		    lockOf: true,
		    lockKey: true,
		    lockOuterJoinFailure: true,
		    skipLocked: true,
		    forShare: "FOR SHARE",
		    constraints: {
		      deferrable: true,
		      removeOptions: { cascade: true, ifExists: true }
		    },
		    index: {
		      concurrently: true,
		      using: 2,
		      where: true,
		      functionBased: true,
		      operator: true,
		      include: true
		    },
		    inserts: {
		      onConflictDoNothing: " ON CONFLICT DO NOTHING",
		      updateOnDuplicate: " ON CONFLICT DO UPDATE SET",
		      conflictFields: true,
		      onConflictWhere: true
		    },
		    dataTypes: {
		      ARRAY: true,
		      RANGE: true,
		      GEOMETRY: true,
		      GEOGRAPHY: true,
		      JSON: true,
		      JSONB: true,
		      HSTORE: true,
		      TSVECTOR: true,
		      CITEXT: true,
		      DATETIME: { infinity: true },
		      DATEONLY: { infinity: true },
		      FLOAT: { NaN: true, infinity: true },
		      REAL: { NaN: true, infinity: true },
		      DOUBLE: { NaN: true, infinity: true },
		      DECIMAL: { unconstrained: true, NaN: true, infinity: true },
		      CIDR: true,
		      MACADDR: true,
		      INET: true
		    },
		    jsonOperations: true,
		    jsonExtraction: {
		      unquoted: true,
		      quoted: true
		    },
		    REGEXP: true,
		    IREGEXP: true,
		    searchPath: true,
		    escapeStringConstants: true,
		    globalTimeZoneConfig: true,
		    dropTable: {
		      cascade: true
		    },
		    truncate: {
		      cascade: true
		    }
		  });
		  connectionManager;
		  queryGenerator;
		  queryInterface;
		  Query = import_query.PostgresQuery;
		  dataTypesDocumentationUrl = "https://www.postgresql.org/docs/current/datatype.html";
		  // minimum supported version
		  defaultVersion = "11.0.0";
		  TICK_CHAR_LEFT = '"';
		  TICK_CHAR_RIGHT = '"';
		  constructor(sequelize) {
		    super(sequelize, DataTypes, "postgres");
		    this.connectionManager = new import_connection_manager.PostgresConnectionManager(this, sequelize);
		    this.queryGenerator = new import_query_generator.PostgresQueryGenerator({
		      dialect: this,
		      sequelize
		    });
		    this.queryInterface = new import_query_interface.PostgresQueryInterface(
		      sequelize,
		      this.queryGenerator
		    );
		    (0, import_data_types_db.registerPostgresDbDataTypeParsers)(this);
		  }
		  createBindCollector() {
		    return (0, import_sql.createSpecifiedOrderedBindCollector)();
		  }
		  escapeBuffer(buffer) {
		    const hex = buffer.toString("hex");
		    return `'\\x${hex}'`;
		  }
		  escapeString(value) {
		    value = value.replaceAll("'", "''").replaceAll("\0", "\\0");
		    return `'${value}'`;
		  }
		  canBackslashEscape() {
		    return !this.sequelize.options.standardConformingStrings;
		  }
		  getDefaultSchema() {
		    return "public";
		  }
		  static getDefaultPort() {
		    return 5432;
		  }
		}
		
		return postgres;
	}

	var connectionManager$3;
	var hasRequiredConnectionManager$3;

	function requireConnectionManager$3 () {
		if (hasRequiredConnectionManager$3) return connectionManager$3;
		hasRequiredConnectionManager$3 = 1;
		var __create = Object.create;
		var __defProp = Object.defineProperty;
		var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
		var __getOwnPropNames = Object.getOwnPropertyNames;
		var __getProtoOf = Object.getPrototypeOf;
		var __hasOwnProp = Object.prototype.hasOwnProperty;
		var __export = (target, all) => {
		  for (var name in all)
		    __defProp(target, name, { get: all[name], enumerable: true });
		};
		var __copyProps = (to, from, except, desc) => {
		  if (from && typeof from === "object" || typeof from === "function") {
		    for (let key of __getOwnPropNames(from))
		      if (!__hasOwnProp.call(to, key) && key !== except)
		        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
		  }
		  return to;
		};
		var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
		  // If the importer is in node compatibility mode or this is not an ESM
		  // file that has been converted to a CommonJS file using a Babel-
		  // compatible transform (i.e. "__esModule" has not been set), then set
		  // "default" to the CommonJS "module.exports" for node compatibility.
		  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
		  mod
		));
		var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
		var connection_manager_exports = {};
		__export(connection_manager_exports, {
		  SqliteConnectionManager: () => SqliteConnectionManager
		});
		connectionManager$3 = __toCommonJS(connection_manager_exports);
		var import_node_fs = __toESM(require$$0$c);
		var import_node_path = __toESM(require$$0$7);
		var import_node_util = require$$0$1;
		var import_errors = errors;
		var import_iterators = requireIterators();
		var import_logger = requireLogger();
		var import_connection_manager = requireConnectionManager$8();
		const debug = import_logger.logger.debugContext("connection:sqlite");
		class SqliteConnectionManager extends import_connection_manager.AbstractConnectionManager {
		  lib;
		  connections = /* @__PURE__ */ new Map();
		  constructor(dialect, sequelize) {
		    super(dialect, sequelize);
		    if (this.sequelize.options.host === "localhost") {
		      delete this.sequelize.options.host;
		    }
		    this.lib = this._loadDialectModule("sqlite3");
		  }
		  async _onProcessExit() {
		    await Promise.all(
		      (0, import_iterators.map)(this.connections.values(), async (connection) => {
		        return (0, import_node_util.promisify)(connection.close.bind(connection))();
		      })
		    );
		    return super._onProcessExit();
		  }
		  async getConnection(options) {
		    var _a;
		    const connectionUuid = options.uuid || "default";
		    const storage = this.sequelize.options.storage ?? this.sequelize.options.host ?? ":memory:";
		    const inMemory = storage === ":memory:";
		    const defaultReadWriteMode = this.lib.OPEN_READWRITE | this.lib.OPEN_CREATE;
		    const readWriteMode = ((_a = this.sequelize.options.dialectOptions) == null ? void 0 : _a.mode) || defaultReadWriteMode;
		    const connectionCacheKey = inMemory ? ":memory:" : connectionUuid;
		    if (this.connections.has(connectionCacheKey)) {
		      return this.connections.get(connectionCacheKey);
		    }
		    const storageDir = import_node_path.default.dirname(storage);
		    if (!inMemory && (readWriteMode & this.lib.OPEN_CREATE) !== 0 && !import_node_fs.default.existsSync(storageDir)) {
		      import_node_fs.default.mkdirSync(storageDir, { recursive: true });
		    }
		    const connection = await new Promise((resolve, reject) => {
		      const connectionInstance = new this.lib.Database(
		        storage,
		        readWriteMode,
		        (err) => {
		          if (err) {
		            return void reject(new import_errors.ConnectionError(err));
		          }
		          debug(`connection acquired ${connectionUuid}`);
		          this.connections.set(connectionCacheKey, connectionInstance);
		          resolve(connectionInstance);
		        }
		      );
		    });
		    await this._initDatabaseVersion(connection);
		    if (this.sequelize.config.password) {
		      connection.run(`PRAGMA KEY=${this.sequelize.escape(this.sequelize.config.password)}`);
		    }
		    if (this.sequelize.options.foreignKeys !== false) {
		      connection.run("PRAGMA FOREIGN_KEYS=ON");
		    }
		    return connection;
		  }
		  async disconnect(_connection) {
		  }
		  async releaseConnection(connection, force) {
		    if (connection.filename === ":memory:" && force !== true) {
		      return;
		    }
		    if (connection.uuid) {
		      connection.close();
		      debug(`connection released ${connection.uuid}`);
		      this.connections.delete(connection.uuid);
		    }
		  }
		}
		
		return connectionManager$3;
	}

	var dataTypes$3;
	var hasRequiredDataTypes$3;

	function requireDataTypes$3 () {
		if (hasRequiredDataTypes$3) return dataTypes$3;
		hasRequiredDataTypes$3 = 1;
		var __create = Object.create;
		var __defProp = Object.defineProperty;
		var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
		var __getOwnPropNames = Object.getOwnPropertyNames;
		var __getProtoOf = Object.getPrototypeOf;
		var __hasOwnProp = Object.prototype.hasOwnProperty;
		var __export = (target, all) => {
		  for (var name in all)
		    __defProp(target, name, { get: all[name], enumerable: true });
		};
		var __copyProps = (to, from, except, desc) => {
		  if (from && typeof from === "object" || typeof from === "function") {
		    for (let key of __getOwnPropNames(from))
		      if (!__hasOwnProp.call(to, key) && key !== except)
		        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
		  }
		  return to;
		};
		var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
		  // If the importer is in node compatibility mode or this is not an ESM
		  // file that has been converted to a CommonJS file using a Babel-
		  // compatible transform (i.e. "__esModule" has not been set), then set
		  // "default" to the CommonJS "module.exports" for node compatibility.
		  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
		  mod
		));
		var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
		var data_types_exports = {};
		__export(data_types_exports, {
		  BIGINT: () => BIGINT,
		  BLOB: () => BLOB,
		  BOOLEAN: () => BOOLEAN,
		  CITEXT: () => CITEXT,
		  DATE: () => DATE,
		  DATEONLY: () => DATEONLY,
		  DOUBLE: () => DOUBLE,
		  ENUM: () => ENUM,
		  FLOAT: () => FLOAT,
		  INTEGER: () => INTEGER,
		  JSON: () => JSON,
		  MEDIUMINT: () => MEDIUMINT,
		  REAL: () => REAL,
		  SMALLINT: () => SMALLINT,
		  STRING: () => STRING,
		  TEXT: () => TEXT,
		  TIME: () => TIME,
		  TINYINT: () => TINYINT,
		  UUID: () => UUID
		});
		dataTypes$3 = __toCommonJS(data_types_exports);
		var import_node_util = __toESM(require$$0$1);
		var import_errors = errors;
		var BaseTypes = __toESM(requireDataTypes$8());
		function removeUnsupportedIntegerOptions(dataType, dialect) {
		  if (dataType.options.length != null) {
		    dialect.warnDataTypeIssue(`${dialect.name} does not support '${dataType.getDataTypeId()}' with length. This option will be ignored.`);
		    delete dataType.options.length;
		  }
		}
		function removeUnsupportedDecimalNumberOptions(dataType, dialect) {
		  if (dataType.options.scale != null || dataType.options.precision != null) {
		    dialect.warnDataTypeIssue(`${dialect.name} does not support '${dataType.getDataTypeId()}' with "scale" or "precision" specified. These options will be ignored.`);
		    dataType.options.scale = void 0;
		    dataType.options.precision = void 0;
		  }
		}
		class BOOLEAN extends BaseTypes.BOOLEAN {
		  // Note: the BOOLEAN type is SQLite maps to NUMERIC, but we still use BOOLEAN because introspecting the table
		  // still indicates that the column is a BOOLEAN column - which we may be able to exploit in the future to parse the value
		  // in raw queries where the DataType is not available.
		  escape(value) {
		    return value ? "1" : "0";
		  }
		  toBindableValue(value) {
		    return value ? 1 : 0;
		  }
		  toSql() {
		    return "INTEGER";
		  }
		}
		class STRING extends BaseTypes.STRING {
		  // TODO: add length check constraint
		  //  check(length(col) <= 5))
		  toSql() {
		    if (this.options.binary) {
		      return `TEXT COLLATE BINARY`;
		    }
		    return "TEXT";
		  }
		}
		class TEXT extends BaseTypes.TEXT {
		  _checkOptionSupport(dialect) {
		    super._checkOptionSupport(dialect);
		    if (this.options.length) {
		      dialect.warnDataTypeIssue(`${dialect.name} does not support TEXT with options. Plain 'TEXT' will be used instead.`);
		      this.options.length = void 0;
		    }
		  }
		}
		class CITEXT extends BaseTypes.CITEXT {
		  toSql() {
		    return "TEXT COLLATE NOCASE";
		  }
		}
		class TINYINT extends BaseTypes.TINYINT {
		  _checkOptionSupport(dialect) {
		    super._checkOptionSupport(dialect);
		    removeUnsupportedIntegerOptions(this, dialect);
		  }
		  // TODO: add >= 0 =< 2^8-1 check when the unsigned option is true
		  // TODO: add >= -2^7 =< 2^7-1 check when the unsigned option is false
		  toSql() {
		    return "INTEGER";
		  }
		}
		class SMALLINT extends BaseTypes.SMALLINT {
		  _checkOptionSupport(dialect) {
		    super._checkOptionSupport(dialect);
		    removeUnsupportedIntegerOptions(this, dialect);
		  }
		  // TODO: add >= 0 =< 2^16-1 check when the unsigned option is true
		  // TODO: add >= -2^15 =< 2^15-1 check when the unsigned option is false
		  toSql() {
		    return "INTEGER";
		  }
		}
		class MEDIUMINT extends BaseTypes.MEDIUMINT {
		  _checkOptionSupport(dialect) {
		    super._checkOptionSupport(dialect);
		    removeUnsupportedIntegerOptions(this, dialect);
		  }
		  // TODO: add >= 0 =< 2^24-1 check when the unsigned option is true
		  // TODO: add >= -2^23 =< 2^23-1 check when the unsigned option is false
		  toSql() {
		    return "INTEGER";
		  }
		}
		class INTEGER extends BaseTypes.INTEGER {
		  _checkOptionSupport(dialect) {
		    super._checkOptionSupport(dialect);
		    removeUnsupportedIntegerOptions(this, dialect);
		  }
		  // TODO: add >= 0 =< 2^32-1 check when the unsigned option is true
		  // TODO: add >= -2^31 =< 2^31-1 check when the unsigned option is false
		  toSql() {
		    return "INTEGER";
		  }
		}
		class BIGINT extends BaseTypes.BIGINT {
		  _checkOptionSupport(dialect) {
		    super._checkOptionSupport(dialect);
		    removeUnsupportedIntegerOptions(this, dialect);
		  }
		  toSql() {
		    return "INTEGER";
		  }
		}
		class FLOAT extends BaseTypes.FLOAT {
		  _checkOptionSupport(dialect) {
		    super._checkOptionSupport(dialect);
		    removeUnsupportedDecimalNumberOptions(this, dialect);
		    dialect.warnDataTypeIssue(`${dialect.name} does not support single-precision floating point numbers. SQLite's REAL type will be used instead, which in SQLite is a double-precision floating point type.`);
		  }
		  // TODO: add check constraint >= 0 if unsigned is true
		  getNumberSqlTypeName() {
		    return "REAL";
		  }
		}
		class DOUBLE extends BaseTypes.DOUBLE {
		  _checkOptionSupport(dialect) {
		    super._checkOptionSupport(dialect);
		    removeUnsupportedDecimalNumberOptions(this, dialect);
		  }
		  // TODO: add check constraint >= 0 if unsigned is true
		  getNumberSqlTypeName() {
		    return "REAL";
		  }
		}
		class REAL extends BaseTypes.REAL {
		  _checkOptionSupport(dialect) {
		    super._checkOptionSupport(dialect);
		    removeUnsupportedDecimalNumberOptions(this, dialect);
		  }
		  getNumberSqlTypeName() {
		    return "REAL";
		  }
		}
		class TIME extends BaseTypes.TIME {
		  // TODO: add CHECK constraint
		  //  https://github.com/sequelize/sequelize/pull/14505#issuecomment-1259279743
		  toSql() {
		    return "TEXT";
		  }
		}
		class DATE extends BaseTypes.DATE {
		  // TODO: add CHECK constraint
		  //  https://github.com/sequelize/sequelize/pull/14505#issuecomment-1259279743
		  toSql() {
		    return "TEXT";
		  }
		}
		class DATEONLY extends BaseTypes.DATEONLY {
		  // TODO: add CHECK constraint
		  //  https://github.com/sequelize/sequelize/pull/14505#issuecomment-1259279743
		  toSql() {
		    return "TEXT";
		  }
		}
		class BLOB extends BaseTypes.BLOB {
		  _checkOptionSupport(dialect) {
		    super._checkOptionSupport(dialect);
		    if (this.options.length) {
		      dialect.warnDataTypeIssue(`${dialect.name} does not support '${this.getDataTypeId()}' with length. This option will be ignored.`);
		      delete this.options.length;
		    }
		  }
		  toSql() {
		    return "BLOB";
		  }
		}
		class JSON extends BaseTypes.JSON {
		  toBindableValue(value) {
		    return globalThis.JSON.stringify(value);
		  }
		  parseDatabaseValue(value) {
		    if (typeof value === "number") {
		      return value;
		    }
		    if (typeof value !== "string") {
		      throw new Error(`DataTypes.JSON received a non-string value from the database, which it cannot parse: ${import_node_util.default.inspect(value)}.`);
		    }
		    try {
		      return globalThis.JSON.parse(value);
		    } catch (error) {
		      throw new import_errors.BaseError(`DataTypes.JSON received a value from the database that it not valid JSON: ${import_node_util.default.inspect(value)}.`, { cause: error });
		    }
		  }
		  // TODO: add check constraint
		  //  https://www.sqlite.org/json1.html#jvalid
		  toSql() {
		    return "TEXT";
		  }
		}
		class UUID extends BaseTypes.UUID {
		  // TODO: add check constraint to enforce GUID format
		  toSql() {
		    return "TEXT";
		  }
		}
		class ENUM extends BaseTypes.ENUM {
		  // TODO: add check constraint to enforce list of accepted values
		  toSql() {
		    return "TEXT";
		  }
		}
		
		return dataTypes$3;
	}

	var query$3;
	var hasRequiredQuery$3;

	function requireQuery$3 () {
		if (hasRequiredQuery$3) return query$3;
		hasRequiredQuery$3 = 1;
		var __create = Object.create;
		var __defProp = Object.defineProperty;
		var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
		var __getOwnPropNames = Object.getOwnPropertyNames;
		var __getProtoOf = Object.getPrototypeOf;
		var __hasOwnProp = Object.prototype.hasOwnProperty;
		var __export = (target, all) => {
		  for (var name in all)
		    __defProp(target, name, { get: all[name], enumerable: true });
		};
		var __copyProps = (to, from, except, desc) => {
		  if (from && typeof from === "object" || typeof from === "function") {
		    for (let key of __getOwnPropNames(from))
		      if (!__hasOwnProp.call(to, key) && key !== except)
		        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
		  }
		  return to;
		};
		var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
		  // If the importer is in node compatibility mode or this is not an ESM
		  // file that has been converted to a CommonJS file using a Babel-
		  // compatible transform (i.e. "__esModule" has not been set), then set
		  // "default" to the CommonJS "module.exports" for node compatibility.
		  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
		  mod
		));
		var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
		var query_exports = {};
		__export(query_exports, {
		  SqliteQuery: () => SqliteQuery
		});
		query$3 = __toCommonJS(query_exports);
		var import_isPlainObject = __toESM(isPlainObject_1);
		const _ = lodashExports;
		const { AbstractQuery } = requireQuery$8();
		const { QueryTypes } = queryTypes;
		const sequelizeErrors = errors;
		const { logger } = requireLogger();
		const debug = logger.debugContext("sql:sqlite");
		function stringifyIfBigint(value) {
		  if (typeof value === "bigint") {
		    return value.toString();
		  }
		  return value;
		}
		class SqliteQuery extends AbstractQuery {
		  getInsertIdField() {
		    return "lastID";
		  }
		  _collectModels(include, prefix) {
		    const ret = {};
		    if (include) {
		      for (const _include of include) {
		        let key;
		        if (!prefix) {
		          key = _include.as;
		        } else {
		          key = `${prefix}.${_include.as}`;
		        }
		        ret[key] = _include.model;
		        if (_include.include) {
		          _.merge(ret, this._collectModels(_include.include, key));
		        }
		      }
		    }
		    return ret;
		  }
		  _handleQueryResponse(metaData, results) {
		    var _a;
		    let result = this.instance;
		    if (this.isInsertQuery(results, metaData) || this.isUpsertQuery()) {
		      this.handleInsertQuery(results, metaData);
		      if (!this.instance) {
		        const modelDefinition = (_a = this.model) == null ? void 0 : _a.modelDefinition;
		        if (metaData.constructor.name === "Statement" && (modelDefinition == null ? void 0 : modelDefinition.autoIncrementAttributeName) && (modelDefinition == null ? void 0 : modelDefinition.autoIncrementAttributeName) === this.model.primaryKeyAttribute) {
		          const startId = metaData[this.getInsertIdField()] - metaData.changes + 1;
		          result = [];
		          for (let i = startId; i < startId + metaData.changes; i++) {
		            result.push({ [modelDefinition.getColumnName(this.model.primaryKeyAttribute)]: i });
		          }
		        } else {
		          result = metaData[this.getInsertIdField()];
		        }
		      }
		    }
		    if (this.isShowTablesQuery()) {
		      return results.map((row) => row.name);
		    }
		    if (this.isShowConstraintsQuery()) {
		      return result;
		    }
		    if (this.isSelectQuery()) {
		      return this.handleSelectQuery(results);
		    }
		    if (this.isShowOrDescribeQuery()) {
		      return results;
		    }
		    if (this.sql.includes("PRAGMA INDEX_LIST")) {
		      return this.handleShowIndexesQuery(results);
		    }
		    if (this.sql.includes("PRAGMA INDEX_INFO")) {
		      return results;
		    }
		    if (this.sql.includes("PRAGMA TABLE_INFO")) {
		      result = {};
		      let defaultValue;
		      for (const _result of results) {
		        if (_result.dflt_value === null) {
		          defaultValue = void 0;
		        } else if (_result.dflt_value === "NULL") {
		          defaultValue = null;
		        } else {
		          defaultValue = _result.dflt_value;
		        }
		        result[_result.name] = {
		          type: _result.type,
		          allowNull: _result.notnull === 0,
		          defaultValue,
		          primaryKey: _result.pk !== 0
		        };
		        if (result[_result.name].type === "TINYINT(1)") {
		          result[_result.name].defaultValue = { 0: false, 1: true }[result[_result.name].defaultValue];
		        }
		        if (typeof result[_result.name].defaultValue === "string") {
		          result[_result.name].defaultValue = result[_result.name].defaultValue.replaceAll("'", "");
		        }
		      }
		      return result;
		    }
		    if (this.sql.includes("PRAGMA foreign_keys;")) {
		      return results[0];
		    }
		    if (this.sql.includes("PRAGMA foreign_keys")) {
		      return results;
		    }
		    if (this.options.type === QueryTypes.FOREIGNKEYS) {
		      return results;
		    }
		    if ([QueryTypes.BULKUPDATE, QueryTypes.BULKDELETE].includes(this.options.type)) {
		      return metaData.changes;
		    }
		    if (this.options.type === QueryTypes.RAW) {
		      return [results, metaData];
		    }
		    if (this.isUpsertQuery()) {
		      return [result, null];
		    }
		    if (this.isUpdateQuery() || this.isInsertQuery()) {
		      return [result, metaData.changes];
		    }
		    return result;
		  }
		  async run(sql, parameters) {
		    const conn = this.connection;
		    this.sql = sql;
		    const method = this.getDatabaseMethod();
		    const complete = this._logQuery(sql, debug, parameters);
		    const columnTypes = {};
		    const executeSql = async () => {
		      if (sql.startsWith("-- ")) {
		        return;
		      }
		      const query = this;
		      if (!parameters) {
		        parameters = [];
		      }
		      if ((0, import_isPlainObject.default)(parameters)) {
		        const newParameters = /* @__PURE__ */ Object.create(null);
		        for (const key of Object.keys(parameters)) {
		          newParameters[`$${key}`] = stringifyIfBigint(parameters[key]);
		        }
		        parameters = newParameters;
		      } else {
		        parameters = parameters.map(stringifyIfBigint);
		      }
		      let response;
		      try {
		        if (method === "run") {
		          response = await this.#runSeries(conn, sql, parameters);
		        } else {
		          response = await this.#allSeries(conn, sql, parameters);
		        }
		      } catch (error) {
		        error.sql = this.sql;
		        throw this.formatError(error);
		      }
		      complete();
		      return query._handleQueryResponse(response.statement, response.results);
		    };
		    if (method === "all") {
		      let tableNames = [];
		      if (this.options && this.options.tableNames) {
		        tableNames = this.options.tableNames;
		      } else if (/from `(.*?)`/i.test(this.sql)) {
		        tableNames.push(/from `(.*?)`/i.exec(this.sql)[1]);
		      }
		      tableNames = tableNames.filter((tableName) => !(tableName in columnTypes) && tableName !== "sqlite_master");
		      if (tableNames.length === 0) {
		        return executeSql();
		      }
		      await Promise.all(tableNames.map(async (tableName) => {
		        tableName = tableName.replaceAll("`", "");
		        columnTypes[tableName] = {};
		        const { results } = await this.#allSeries(conn, `PRAGMA table_info(\`${tableName}\`)`);
		        for (const result of results) {
		          columnTypes[tableName][result.name] = result.type;
		        }
		      }));
		    }
		    return executeSql();
		  }
		  #allSeries(connection, query, parameters) {
		    return new Promise((resolve, reject) => {
		      connection.serialize(() => {
		        connection.all(query, parameters, function(err, results) {
		          if (err) {
		            reject(err);
		            return;
		          }
		          resolve({ statement: this, results });
		        });
		      });
		    });
		  }
		  #runSeries(connection, query, parameters) {
		    return new Promise((resolve, reject) => {
		      connection.serialize(() => {
		        connection.run(query, parameters, function(err, results) {
		          if (err) {
		            reject(err);
		            return;
		          }
		          resolve({ statement: this, results });
		        });
		      });
		    });
		  }
		  formatError(err) {
		    switch (err.code) {
		      case "SQLITE_CONSTRAINT_UNIQUE":
		      case "SQLITE_CONSTRAINT_PRIMARYKEY":
		      case "SQLITE_CONSTRAINT_TRIGGER":
		      case "SQLITE_CONSTRAINT_FOREIGNKEY":
		      case "SQLITE_CONSTRAINT": {
		        if (err.message.includes("FOREIGN KEY constraint failed")) {
		          return new sequelizeErrors.ForeignKeyConstraintError({
		            cause: err
		          });
		        }
		        let fields = [];
		        let match = err.message.match(/columns (.*?) are/);
		        if (match !== null && match.length >= 2) {
		          fields = match[1].split(", ");
		        } else {
		          match = err.message.match(/UNIQUE constraint failed: (.*)/);
		          if (match !== null && match.length >= 2) {
		            fields = match[1].split(", ").map((columnWithTable) => columnWithTable.split(".")[1]);
		          }
		        }
		        const errors = [];
		        let message = "Validation error";
		        for (const field of fields) {
		          errors.push(new sequelizeErrors.ValidationErrorItem(
		            this.getUniqueConstraintErrorMessage(field),
		            "unique violation",
		            // sequelizeErrors.ValidationErrorItem.Origins.DB,
		            field,
		            this.instance && this.instance[field],
		            this.instance,
		            "not_unique"
		          ));
		        }
		        if (this.model) {
		          for (const index of this.model.getIndexes()) {
		            if (index.unique && _.isEqual(index.fields, fields) && index.msg) {
		              message = index.msg;
		              break;
		            }
		          }
		        }
		        return new sequelizeErrors.UniqueConstraintError({ message, errors, cause: err, fields });
		      }
		      case "SQLITE_BUSY":
		        return new sequelizeErrors.TimeoutError(err);
		      default:
		        return new sequelizeErrors.DatabaseError(err);
		    }
		  }
		  async handleShowIndexesQuery(data) {
		    return Promise.all(data.reverse().map(async (item) => {
		      item.fields = [];
		      item.primary = false;
		      item.unique = Boolean(item.unique);
		      item.constraintName = item.name;
		      const columns = await this.run(`PRAGMA INDEX_INFO(\`${item.name}\`)`);
		      for (const column of columns) {
		        item.fields[column.seqno] = {
		          attribute: column.name,
		          length: void 0,
		          order: void 0
		        };
		      }
		      return item;
		    }));
		  }
		  getDatabaseMethod() {
		    if (this.isInsertQuery() || this.isUpdateQuery() || this.isUpsertQuery() || this.isBulkUpdateQuery() || this.sql.toLowerCase().includes("CREATE TEMPORARY TABLE".toLowerCase()) || this.options.type === QueryTypes.BULKDELETE) {
		      return "run";
		    }
		    return "all";
		  }
		}
		
		return query$3;
	}

	var queryGeneratorTypescript$3;
	var hasRequiredQueryGeneratorTypescript$3;

	function requireQueryGeneratorTypescript$3 () {
		if (hasRequiredQueryGeneratorTypescript$3) return queryGeneratorTypescript$3;
		hasRequiredQueryGeneratorTypescript$3 = 1;
		var __defProp = Object.defineProperty;
		var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
		var __getOwnPropNames = Object.getOwnPropertyNames;
		var __hasOwnProp = Object.prototype.hasOwnProperty;
		var __export = (target, all) => {
		  for (var name in all)
		    __defProp(target, name, { get: all[name], enumerable: true });
		};
		var __copyProps = (to, from, except, desc) => {
		  if (from && typeof from === "object" || typeof from === "function") {
		    for (let key of __getOwnPropNames(from))
		      if (!__hasOwnProp.call(to, key) && key !== except)
		        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
		  }
		  return to;
		};
		var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
		var query_generator_typescript_exports = {};
		__export(query_generator_typescript_exports, {
		  SqliteQueryGeneratorTypeScript: () => SqliteQueryGeneratorTypeScript
		});
		queryGeneratorTypescript$3 = __toCommonJS(query_generator_typescript_exports);
		var import_node_crypto = require$$0$3;
		var import_check = requireCheck();
		var import_join_sql_fragments = joinSqlFragments;
		var import_string = string$2;
		var import_query_generator_typescript = requireQueryGeneratorTypescript$8();
		var import_query_generator = requireQueryGenerator$7();
		const REMOVE_INDEX_QUERY_SUPPORTED_OPTIONS = /* @__PURE__ */ new Set(["ifExists"]);
		class SqliteQueryGeneratorTypeScript extends import_query_generator.MySqlQueryGenerator {
		  createSchemaQuery() {
		    throw new Error(`Schemas are not supported in ${this.dialect.name}.`);
		  }
		  dropSchemaQuery() {
		    throw new Error(`Schemas are not supported in ${this.dialect.name}.`);
		  }
		  listSchemasQuery() {
		    throw new Error(`Schemas are not supported in ${this.dialect.name}.`);
		  }
		  describeTableQuery(tableName) {
		    return `PRAGMA TABLE_INFO(${this.quoteTable(tableName)})`;
		  }
		  describeCreateTableQuery(tableName) {
		    return `SELECT sql FROM sqlite_master WHERE tbl_name = ${this.escapeTable(tableName)};`;
		  }
		  showConstraintsQuery(tableName, _options) {
		    return (0, import_join_sql_fragments.joinSQLFragments)([
		      "SELECT sql FROM sqlite_master",
		      `WHERE tbl_name = ${this.escapeTable(tableName)}`
		    ]);
		  }
		  showIndexesQuery(tableName) {
		    return `PRAGMA INDEX_LIST(${this.quoteTable(tableName)})`;
		  }
		  getToggleForeignKeyChecksQuery(enable) {
		    return `PRAGMA foreign_keys = ${enable ? "ON" : "OFF"}`;
		  }
		  removeIndexQuery(tableName, indexNameOrAttributes, options) {
		    if (options) {
		      (0, import_check.rejectInvalidOptions)(
		        "removeIndexQuery",
		        this.dialect.name,
		        import_query_generator_typescript.REMOVE_INDEX_QUERY_SUPPORTABLE_OPTIONS,
		        REMOVE_INDEX_QUERY_SUPPORTED_OPTIONS,
		        options
		      );
		    }
		    let indexName;
		    if (Array.isArray(indexNameOrAttributes)) {
		      const table = this.extractTableDetails(tableName);
		      indexName = (0, import_string.generateIndexName)(table, { fields: indexNameOrAttributes });
		    } else {
		      indexName = indexNameOrAttributes;
		    }
		    return (0, import_join_sql_fragments.joinSQLFragments)([
		      "DROP INDEX",
		      (options == null ? void 0 : options.ifExists) ? "IF EXISTS" : "",
		      this.quoteIdentifier(indexName)
		    ]);
		  }
		  getForeignKeyQuery(tableName, columnName) {
		    if (columnName) {
		      throw new Error(`Providing a columnName in getForeignKeyQuery is not supported by ${this.dialect.name}.`);
		    }
		    const escapedTable = this.escapeTable(tableName);
		    return (0, import_join_sql_fragments.joinSQLFragments)([
		      "SELECT id as `constraintName`,",
		      `${escapedTable} as \`tableName\`,`,
		      "pragma.`from` AS `columnName`,",
		      "pragma.`table` AS `referencedTableName`,",
		      "pragma.`to` AS `referencedColumnName`,",
		      "pragma.`on_update`,",
		      "pragma.`on_delete`",
		      `FROM pragma_foreign_key_list(${escapedTable}) AS pragma;`
		    ]);
		  }
		  _replaceTableQuery(tableName, attributes, createTableSql) {
		    const table = this.extractTableDetails(tableName);
		    const backupTable = this.extractTableDetails(`${table.tableName}_${(0, import_node_crypto.randomBytes)(8).toString("hex")}`, table);
		    const quotedTableName = this.quoteTable(table);
		    const quotedBackupTableName = this.quoteTable(backupTable);
		    const tableAttributes = this.attributesToSQL(attributes);
		    const attributeNames = Object.keys(tableAttributes).map((attr) => this.quoteIdentifier(attr)).join(", ");
		    const backupTableSql = createTableSql ? `${createTableSql.replace(`CREATE TABLE ${quotedTableName}`, `CREATE TABLE ${quotedBackupTableName}`)};` : this.createTableQuery(backupTable, tableAttributes);
		    return (0, import_join_sql_fragments.joinSQLFragments)([
		      backupTableSql,
		      `INSERT INTO ${quotedBackupTableName} SELECT ${attributeNames} FROM ${quotedTableName};`,
		      `DROP TABLE ${quotedTableName};`,
		      `ALTER TABLE ${quotedBackupTableName} RENAME TO ${quotedTableName};`
		    ]);
		  }
		  escapeTable(tableName) {
		    const table = this.extractTableDetails(tableName);
		    if (table.schema) {
		      return this.escape(`${table.schema}${table.delimiter}${table.tableName}`);
		    }
		    return this.escape(table.tableName);
		  }
		  versionQuery() {
		    return "SELECT sqlite_version() as `version`";
		  }
		}
		
		return queryGeneratorTypescript$3;
	}

	var queryGenerator$3;
	var hasRequiredQueryGenerator$3;

	function requireQueryGenerator$3 () {
		if (hasRequiredQueryGenerator$3) return queryGenerator$3;
		hasRequiredQueryGenerator$3 = 1;
		var __defProp = Object.defineProperty;
		var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
		var __getOwnPropNames = Object.getOwnPropertyNames;
		var __hasOwnProp = Object.prototype.hasOwnProperty;
		var __export = (target, all) => {
		  for (var name in all)
		    __defProp(target, name, { get: all[name], enumerable: true });
		};
		var __copyProps = (to, from, except, desc) => {
		  if (from && typeof from === "object" || typeof from === "function") {
		    for (let key of __getOwnPropNames(from))
		      if (!__hasOwnProp.call(to, key) && key !== except)
		        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
		  }
		  return to;
		};
		var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
		var query_generator_exports = {};
		__export(query_generator_exports, {
		  SqliteQueryGenerator: () => SqliteQueryGenerator
		});
		queryGenerator$3 = __toCommonJS(query_generator_exports);
		var import_format = requireFormat();
		var import_object = object$1;
		var import_query_builder_utils = requireQueryBuilderUtils();
		var import_check = requireCheck();
		var import_query_generator = requireQueryGenerator$8();
		const { Transaction } = transaction;
		const _ = lodashExports;
		const { SqliteQueryGeneratorTypeScript } = requireQueryGeneratorTypescript$3();
		const ADD_COLUMN_QUERY_SUPPORTED_OPTIONS = /* @__PURE__ */ new Set();
		const REMOVE_COLUMN_QUERY_SUPPORTED_OPTIONS = /* @__PURE__ */ new Set();
		const CREATE_TABLE_QUERY_SUPPORTED_OPTIONS = /* @__PURE__ */ new Set();
		class SqliteQueryGenerator extends SqliteQueryGeneratorTypeScript {
		  createTableQuery(tableName, attributes, options) {
		    if (options) {
		      (0, import_check.rejectInvalidOptions)(
		        "createTableQuery",
		        this.dialect.name,
		        import_query_generator.CREATE_TABLE_QUERY_SUPPORTABLE_OPTIONS,
		        CREATE_TABLE_QUERY_SUPPORTED_OPTIONS,
		        options
		      );
		    }
		    options = options || {};
		    const primaryKeys = [];
		    const needsMultiplePrimaryKeys = Object.values(attributes).filter((definition) => definition.includes("PRIMARY KEY")).length > 1;
		    const attrArray = [];
		    for (const attr in attributes) {
		      if (Object.hasOwn(attributes, attr)) {
		        const dataType = attributes[attr];
		        const containsAutoIncrement = dataType.includes("AUTOINCREMENT");
		        let dataTypeString = dataType;
		        if (dataType.includes("PRIMARY KEY")) {
		          if (dataType.includes("INT")) {
		            dataTypeString = containsAutoIncrement ? "INTEGER PRIMARY KEY AUTOINCREMENT" : "INTEGER PRIMARY KEY";
		            if (dataType.includes(" REFERENCES")) {
		              dataTypeString += dataType.slice(dataType.indexOf(" REFERENCES"));
		            }
		          }
		          if (needsMultiplePrimaryKeys) {
		            primaryKeys.push(attr);
		            if (dataType.includes("NOT NULL")) {
		              dataTypeString = dataType.replace(" PRIMARY KEY", "");
		            } else {
		              dataTypeString = dataType.replace("PRIMARY KEY", "NOT NULL");
		            }
		          }
		        }
		        attrArray.push(`${this.quoteIdentifier(attr)} ${dataTypeString}`);
		      }
		    }
		    const table = this.quoteTable(tableName);
		    let attrStr = attrArray.join(", ");
		    const pkString = primaryKeys.map((pk) => this.quoteIdentifier(pk)).join(", ");
		    if (pkString.length > 0) {
		      attrStr += `, PRIMARY KEY (${pkString})`;
		    }
		    const sql = `CREATE TABLE IF NOT EXISTS ${table} (${attrStr});`;
		    return this.replaceBooleanDefaults(sql);
		  }
		  addLimitAndOffset(options, model) {
		    let fragment = "";
		    if (options.limit != null) {
		      fragment += ` LIMIT ${this.escape(options.limit, options)}`;
		    } else if (options.offset) {
		      fragment += ` LIMIT -1`;
		    }
		    if (options.offset) {
		      fragment += ` OFFSET ${this.escape(options.offset, options)}`;
		    }
		    return fragment;
		  }
		  addColumnQuery(table, key, dataType, options) {
		    if (options) {
		      (0, import_check.rejectInvalidOptions)(
		        "addColumnQuery",
		        this.dialect.name,
		        import_query_generator.ADD_COLUMN_QUERY_SUPPORTABLE_OPTIONS,
		        ADD_COLUMN_QUERY_SUPPORTED_OPTIONS,
		        options
		      );
		    }
		    const attributes = {};
		    attributes[key] = dataType;
		    const fields = this.attributesToSQL(attributes, { context: "addColumn" });
		    const attribute = `${this.quoteIdentifier(key)} ${fields[key]}`;
		    const sql = `ALTER TABLE ${this.quoteTable(table)} ADD ${attribute};`;
		    return this.replaceBooleanDefaults(sql);
		  }
		  showTablesQuery() {
		    return "SELECT name FROM `sqlite_master` WHERE type='table' and name!='sqlite_sequence';";
		  }
		  updateQuery(tableName, attrValueHash, where, options, attributes) {
		    var _a;
		    options = options || {};
		    _.defaults(options, this.options);
		    attrValueHash = (0, import_format.removeNullishValuesFromHash)(attrValueHash, options.omitNull, options);
		    const modelAttributeMap = /* @__PURE__ */ Object.create(null);
		    const values = [];
		    const bind = /* @__PURE__ */ Object.create(null);
		    const bindParam = options.bindParam === void 0 ? this.bindParam(bind) : options.bindParam;
		    if (attributes) {
		      _.each(attributes, (attribute, key) => {
		        modelAttributeMap[key] = attribute;
		        if (attribute.field) {
		          modelAttributeMap[attribute.field] = attribute;
		        }
		      });
		    }
		    for (const key in attrValueHash) {
		      const value = attrValueHash[key] ?? null;
		      const escapedValue = this.escape(value, {
		        replacements: options.replacements,
		        bindParam,
		        type: (_a = modelAttributeMap[key]) == null ? void 0 : _a.type
		        // TODO: model,
		      });
		      values.push(`${this.quoteIdentifier(key)}=${escapedValue}`);
		    }
		    let query;
		    const whereOptions = { ...options, bindParam };
		    if (options.limit) {
		      query = `UPDATE ${this.quoteTable(tableName)} SET ${values.join(",")} WHERE rowid IN (SELECT rowid FROM ${this.quoteTable(tableName)} ${this.whereQuery(where, whereOptions)} LIMIT ${this.escape(options.limit, void 0, options)})`.trim();
		    } else {
		      query = `UPDATE ${this.quoteTable(tableName)} SET ${values.join(",")} ${this.whereQuery(where, whereOptions)}`.trim();
		    }
		    const result = { query };
		    if (options.bindParam !== false) {
		      result.bind = bind;
		    }
		    return result;
		  }
		  truncateTableQuery(tableName, options = {}) {
		    return [
		      `DELETE FROM ${this.quoteTable(tableName)}`,
		      options.restartIdentity ? `; DELETE FROM ${this.quoteTable("sqlite_sequence")} WHERE ${this.quoteIdentifier("name")} = ${this.quoteTable(tableName)};` : ""
		    ].join("");
		  }
		  deleteQuery(tableName, where, options = import_object.EMPTY_OBJECT, model) {
		    _.defaults(options, this.options);
		    let whereClause = this.whereQuery(where, { ...options, model });
		    if (whereClause) {
		      whereClause = ` ${whereClause}`;
		    }
		    if (options.limit) {
		      whereClause = `WHERE rowid IN (SELECT rowid FROM ${this.quoteTable(tableName)} ${whereClause} LIMIT ${this.escape(options.limit, options)})`;
		    }
		    return `DELETE FROM ${this.quoteTable(tableName)} ${whereClause}`.trim();
		  }
		  attributesToSQL(attributes, options) {
		    const result = {};
		    for (const name in attributes) {
		      const attribute = attributes[name];
		      const columnName = attribute.field || attribute.columnName || name;
		      if (_.isObject(attribute)) {
		        let sql = attribute.type.toString();
		        if (attribute.allowNull === false) {
		          sql += " NOT NULL";
		        }
		        if ((0, import_query_builder_utils.defaultValueSchemable)(attribute.defaultValue)) {
		          sql += ` DEFAULT ${this.escape(attribute.defaultValue, { ...options, type: attribute.type })}`;
		        }
		        if (attribute.unique === true) {
		          sql += " UNIQUE";
		        }
		        if (attribute.primaryKey) {
		          sql += " PRIMARY KEY";
		          if (attribute.autoIncrement) {
		            sql += " AUTOINCREMENT";
		          }
		        }
		        if (attribute.references) {
		          const referencesTable = this.quoteTable(attribute.references.table);
		          let referencesKey;
		          if (attribute.references.key) {
		            referencesKey = this.quoteIdentifier(attribute.references.key);
		          } else {
		            referencesKey = this.quoteIdentifier("id");
		          }
		          sql += ` REFERENCES ${referencesTable} (${referencesKey})`;
		          if (attribute.onDelete) {
		            sql += ` ON DELETE ${attribute.onDelete.toUpperCase()}`;
		          }
		          if (attribute.onUpdate) {
		            sql += ` ON UPDATE ${attribute.onUpdate.toUpperCase()}`;
		          }
		        }
		        result[columnName] = sql;
		      } else {
		        result[columnName] = attribute;
		      }
		    }
		    return result;
		  }
		  // TODO: this should not implement `removeColumnQuery` but a new sqlite specific function possibly called `replaceTableQuery`
		  removeColumnQuery(tableName, attributes, options) {
		    if (options) {
		      (0, import_check.rejectInvalidOptions)(
		        "removeColumnQuery",
		        this.dialect.name,
		        import_query_generator.REMOVE_COLUMN_QUERY_SUPPORTABLE_OPTIONS,
		        REMOVE_COLUMN_QUERY_SUPPORTED_OPTIONS,
		        options
		      );
		    }
		    attributes = this.attributesToSQL(attributes);
		    const table = this.extractTableDetails(tableName);
		    const backupTableName = {
		      tableName: `${table.tableName}_backup`,
		      schema: table.schema,
		      delimiter: table.delimiter
		    };
		    const quotedTableName = this.quoteTable(tableName);
		    const quotedBackupTableName = this.quoteTable(backupTableName);
		    const attributeNames = Object.keys(attributes).map((attr) => this.quoteIdentifier(attr)).join(", ");
		    return `${this.createTableQuery(backupTableName, attributes)}INSERT INTO ${quotedBackupTableName} SELECT ${attributeNames} FROM ${quotedTableName};DROP TABLE ${quotedTableName};ALTER TABLE ${quotedBackupTableName} RENAME TO ${quotedTableName};`;
		  }
		  renameColumnQuery(tableName, attrNameBefore, attrNameAfter, attributes) {
		    let backupTableName;
		    attributes = this.attributesToSQL(attributes);
		    if (typeof tableName === "object") {
		      backupTableName = {
		        tableName: `${tableName.tableName}_backup`,
		        schema: tableName.schema
		      };
		    } else {
		      backupTableName = `${tableName}_backup`;
		    }
		    const quotedTableName = this.quoteTable(tableName);
		    const quotedBackupTableName = this.quoteTable(backupTableName);
		    const attributeNamesImport = Object.keys(attributes).map((attr) => attrNameAfter === attr ? `${this.quoteIdentifier(attrNameBefore)} AS ${this.quoteIdentifier(attr)}` : this.quoteIdentifier(attr)).join(", ");
		    const attributeNamesExport = Object.keys(attributes).map((attr) => this.quoteIdentifier(attr)).join(", ");
		    return `${this.createTableQuery(backupTableName, attributes)}INSERT INTO ${quotedBackupTableName} SELECT ${attributeNamesImport} FROM ${quotedTableName};DROP TABLE ${quotedTableName};${this.createTableQuery(tableName, attributes)}INSERT INTO ${quotedTableName} SELECT ${attributeNamesExport} FROM ${quotedBackupTableName};DROP TABLE ${quotedBackupTableName};`;
		  }
		  startTransactionQuery(transaction) {
		    if (transaction.parent) {
		      return `SAVEPOINT ${this.quoteIdentifier(transaction.name)};`;
		    }
		    return `BEGIN ${transaction.options.type} TRANSACTION;`;
		  }
		  setIsolationLevelQuery(value) {
		    switch (value) {
		      case Transaction.ISOLATION_LEVELS.REPEATABLE_READ:
		        return "-- SQLite is not able to choose the isolation level REPEATABLE READ.";
		      case Transaction.ISOLATION_LEVELS.READ_UNCOMMITTED:
		        return "PRAGMA read_uncommitted = ON;";
		      case Transaction.ISOLATION_LEVELS.READ_COMMITTED:
		        return "PRAGMA read_uncommitted = OFF;";
		      case Transaction.ISOLATION_LEVELS.SERIALIZABLE:
		        return "-- SQLite's default isolation level is SERIALIZABLE. Nothing to do.";
		      default:
		        throw new Error(`Unknown isolation level: ${value}`);
		    }
		  }
		  replaceBooleanDefaults(sql) {
		    return sql.replaceAll(/DEFAULT '?false'?/g, "DEFAULT 0").replaceAll(/DEFAULT '?true'?/g, "DEFAULT 1");
		  }
		  tableExistsQuery(tableName) {
		    return `SELECT name FROM sqlite_master WHERE type='table' AND name=${this.escape(this.extractTableDetails(tableName).tableName)};`;
		  }
		  /**
		   * Generates an SQL query to check if there are any foreign key violations in the db schema
		   *
		   * @param {string} tableName  The name of the table
		   */
		  foreignKeyCheckQuery(tableName) {
		    return `PRAGMA foreign_key_check(${this.quoteTable(tableName)});`;
		  }
		}
		
		return queryGenerator$3;
	}

	var queryInterface_types;
	var hasRequiredQueryInterface_types;

	function requireQueryInterface_types () {
		if (hasRequiredQueryInterface_types) return queryInterface_types;
		hasRequiredQueryInterface_types = 1;
		var __defProp = Object.defineProperty;
		var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
		var __getOwnPropNames = Object.getOwnPropertyNames;
		var __hasOwnProp = Object.prototype.hasOwnProperty;
		var __copyProps = (to, from, except, desc) => {
		  if (from && typeof from === "object" || typeof from === "function") {
		    for (let key of __getOwnPropNames(from))
		      if (!__hasOwnProp.call(to, key) && key !== except)
		        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
		  }
		  return to;
		};
		var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
		var query_interface_types_exports = {};
		queryInterface_types = __toCommonJS(query_interface_types_exports);
		
		return queryInterface_types;
	}

	var queryInterfaceTypescript;
	var hasRequiredQueryInterfaceTypescript;

	function requireQueryInterfaceTypescript () {
		if (hasRequiredQueryInterfaceTypescript) return queryInterfaceTypescript;
		hasRequiredQueryInterfaceTypescript = 1;
		var __defProp = Object.defineProperty;
		var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
		var __getOwnPropNames = Object.getOwnPropertyNames;
		var __hasOwnProp = Object.prototype.hasOwnProperty;
		var __export = (target, all) => {
		  for (var name in all)
		    __defProp(target, name, { get: all[name], enumerable: true });
		};
		var __copyProps = (to, from, except, desc) => {
		  if (from && typeof from === "object" || typeof from === "function") {
		    for (let key of __getOwnPropNames(from))
		      if (!__hasOwnProp.call(to, key) && key !== except)
		        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
		  }
		  return to;
		};
		var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
		var query_interface_typescript_exports = {};
		__export(query_interface_typescript_exports, {
		  SqliteQueryInterfaceTypeScript: () => SqliteQueryInterfaceTypeScript
		});
		queryInterfaceTypescript = __toCommonJS(query_interface_typescript_exports);
		var import_errors = errors;
		var import_query_types = queryTypes;
		var import_query_interface = queryInterface$8;
		class SqliteQueryInterfaceTypeScript extends import_query_interface.AbstractQueryInterface {
		  sequelize;
		  queryGenerator;
		  constructor(sequelize, queryGenerator) {
		    super(sequelize, queryGenerator);
		    this.sequelize = sequelize;
		    this.queryGenerator = queryGenerator;
		  }
		  async addConstraint(tableName, options) {
		    if (!options.fields) {
		      throw new Error("Fields must be specified through options.fields");
		    }
		    if (!options.type) {
		      throw new Error("Constraint type must be specified through options.type");
		    }
		    const constraintOptions = { ...options };
		    const constraintSnippet = this.queryGenerator._getConstraintSnippet(tableName, constraintOptions);
		    const describeCreateTableSql = this.queryGenerator.describeCreateTableQuery(tableName);
		    const describeCreateTable = await this.sequelize.queryRaw(describeCreateTableSql, {
		      ...options,
		      raw: true,
		      type: import_query_types.QueryTypes.SELECT
		    });
		    if (!describeCreateTable.length || !("sql" in describeCreateTable[0])) {
		      throw new Error("Unable to find constraints for table. Perhaps the table does not exist?");
		    }
		    let { sql: createTableSql } = describeCreateTable[0];
		    createTableSql = createTableSql.replaceAll('"', "`").replace(/\);?$/, `, ${constraintSnippet});`);
		    const fields = await this.describeTable(tableName, options);
		    const sql = this.queryGenerator._replaceTableQuery(tableName, fields, createTableSql);
		    const subQueries = sql.split(";").filter((q) => q !== "");
		    for (const subQuery of subQueries) {
		      await this.sequelize.queryRaw(`${subQuery};`, { ...options, raw: true });
		    }
		  }
		  async removeConstraint(tableName, constraintName, options) {
		    const describeCreateTableSql = this.queryGenerator.describeCreateTableQuery(tableName);
		    const describeCreateTable = await this.sequelize.queryRaw(describeCreateTableSql, {
		      ...options,
		      raw: true,
		      type: import_query_types.QueryTypes.SELECT
		    });
		    if (!describeCreateTable.length || !("sql" in describeCreateTable[0])) {
		      throw new Error("Unable to find constraints for table. Perhaps the table does not exist?");
		    }
		    const { sql: createTableSql } = describeCreateTable[0];
		    const constraints = await this.showConstraints(tableName, options);
		    const constraint = constraints.find((c) => c.constraintName === constraintName);
		    if (!constraint) {
		      const table = this.queryGenerator.extractTableDetails(tableName);
		      throw new import_errors.UnknownConstraintError({
		        message: `Constraint ${constraintName} on table ${table.tableName} does not exist`,
		        constraint: constraintName,
		        table: table.tableName
		      });
		    }
		    constraint.constraintName = this.queryGenerator.quoteIdentifier(constraint.constraintName);
		    let constraintSnippet = `, CONSTRAINT ${constraint.constraintName} ${constraint.constraintType} ${constraint.definition}`;
		    if (constraint.constraintType === "FOREIGN KEY") {
		      constraintSnippet = `, CONSTRAINT ${constraint.constraintName} FOREIGN KEY`;
		      const columns = constraint.columnNames.map((columnName) => this.queryGenerator.quoteIdentifier(columnName)).join(", ");
		      const referenceTableName = this.queryGenerator.quoteTable(constraint.referencedTableName);
		      const referenceTableColumns = constraint.referencedColumnNames.map((columnName) => this.queryGenerator.quoteIdentifier(columnName)).join(", ");
		      constraintSnippet += ` (${columns})`;
		      constraintSnippet += ` REFERENCES ${referenceTableName} (${referenceTableColumns})`;
		      constraintSnippet += constraint.updateAction ? ` ON UPDATE ${constraint.updateAction}` : "";
		      constraintSnippet += constraint.deleteAction ? ` ON DELETE ${constraint.deleteAction}` : "";
		    } else if (constraint.constraintType === "PRIMARY KEY") {
		      constraintSnippet = `, CONSTRAINT ${constraint.constraintName} PRIMARY KEY`;
		      const columns = constraint.columnNames.map((columnName) => this.queryGenerator.quoteIdentifier(columnName)).join(", ");
		      constraintSnippet += ` (${columns})`;
		    }
		    const fields = await this.describeTable(tableName, options);
		    const sql = this.queryGenerator._replaceTableQuery(tableName, fields, `${createTableSql.replaceAll('"', "`").replace(constraintSnippet, "")};`);
		    const subQueries = sql.split(";").filter((q) => q !== "");
		    for (const subQuery of subQueries) {
		      await this.sequelize.queryRaw(`${subQuery};`, { ...options, raw: true });
		    }
		  }
		  async showConstraints(tableName, options) {
		    const describeCreateTableSql = this.queryGenerator.describeCreateTableQuery(tableName);
		    const describeCreateTable = await this.sequelize.queryRaw(describeCreateTableSql, {
		      ...options,
		      raw: true,
		      type: import_query_types.QueryTypes.SELECT
		    });
		    if (!describeCreateTable.length || !("sql" in describeCreateTable[0])) {
		      throw new Error("Unable to find constraints for table. Perhaps the table does not exist?");
		    }
		    const { sql: createTableSql } = describeCreateTable[0];
		    const match = /CREATE TABLE (?:`|'|")(\S+)(?:`|'|") \((.+)\)/.exec(createTableSql);
		    const data = [];
		    if (match) {
		      const [, constraintTableName, attributeSQL] = match;
		      const keys = [];
		      const attributes = [];
		      const constraints = [];
		      const sqlAttributes = attributeSQL.split(/,(?![^(]*\))/).map((attr) => attr.trim());
		      for (const attribute of sqlAttributes) {
		        if (attribute.startsWith("CONSTRAINT")) {
		          constraints.push(attribute);
		        } else if (attribute.startsWith("PRIMARY KEY") || attribute.startsWith("FOREIGN KEY")) {
		          keys.push(attribute);
		        } else {
		          attributes.push(attribute);
		        }
		      }
		      for (const attribute of attributes) {
		        if (/\bPRIMARY KEY\b/.test(attribute)) {
		          const columnNames = attribute.match(/`(\S+)`/);
		          data.push({
		            constraintSchema: "",
		            constraintName: "PRIMARY",
		            constraintType: "PRIMARY KEY",
		            tableSchema: "",
		            tableName: constraintTableName,
		            columnNames: columnNames ? columnNames[1].split(",") : []
		          });
		        } else if (/\bREFERENCES\b/.test(attribute)) {
		          const columnNames = attribute.match(/`(\S+)`/);
		          const deleteAction = attribute.match(/ON DELETE (\w+)/);
		          const updateAction = attribute.match(/ON UPDATE (\w+)/);
		          const references = attribute.match(/REFERENCES `(\S+)` \(`(\S+)`\)/);
		          data.push({
		            constraintSchema: "",
		            constraintName: "FOREIGN",
		            constraintType: "FOREIGN KEY",
		            tableSchema: "",
		            tableName: constraintTableName,
		            columnNames: columnNames ? columnNames[1].split(",") : [],
		            referencedTableName: references ? references[1] : "",
		            referencedColumnNames: references ? references[2].split(",") : [],
		            deleteAction: deleteAction ? deleteAction[1] : "",
		            updateAction: updateAction ? updateAction[1] : ""
		          });
		        } else if (/\bUNIQUE\b/.test(attribute)) {
		          const columnNames = attribute.match(/`(\S+)`/);
		          data.push({
		            constraintSchema: "",
		            constraintName: "UNIQUE",
		            constraintType: "UNIQUE",
		            tableSchema: "",
		            tableName: constraintTableName,
		            columnNames: columnNames ? columnNames[1].split(",") : []
		          });
		        } else if (/\bCHECK\b/.test(attribute)) {
		          const columnNames = attribute.match(/`(\S+)`/);
		          const definition = attribute.match(/CHECK (.+)/);
		          data.push({
		            constraintSchema: "",
		            constraintName: "CHECK",
		            constraintType: "CHECK",
		            tableSchema: "",
		            tableName: constraintTableName,
		            columnNames: columnNames ? columnNames[1].split(",") : [],
		            definition: definition ? definition[1] : ""
		          });
		        }
		      }
		      for (const constraint of constraints) {
		        const [, constraintName, constraintType, definition] = constraint.match(/CONSTRAINT (?:`|'|")(\S+)(?:`|'|") (\w+) (.+)/) || [];
		        if (/\bPRIMARY KEY\b/.test(constraint)) {
		          const columnNames = definition.match(/`(\S+)`/);
		          data.push({
		            constraintSchema: "",
		            constraintName,
		            constraintType: "PRIMARY KEY",
		            tableSchema: "",
		            tableName: constraintTableName,
		            columnNames: columnNames ? columnNames[1].split(",") : []
		          });
		        } else if (/\bREFERENCES\b/.test(constraint)) {
		          const columnNames = definition.match(/`(\S+)`/);
		          const deleteAction = definition.match(/ON DELETE (\w+)/);
		          const updateAction = definition.match(/ON UPDATE (\w+)/);
		          const references = definition.match(/REFERENCES `(\S+)` \(`(\S+)`\)/);
		          data.push({
		            constraintSchema: "",
		            constraintName,
		            constraintType: "FOREIGN KEY",
		            tableSchema: "",
		            tableName: constraintTableName,
		            columnNames: columnNames ? columnNames[1].split(",") : [],
		            referencedTableName: references ? references[1] : "",
		            referencedColumnNames: references ? references[2].split(",") : [],
		            deleteAction: deleteAction ? deleteAction[1] : "",
		            updateAction: updateAction ? updateAction[1] : ""
		          });
		        } else if (["CHECK", "DEFAULT", "UNIQUE"].includes(constraintType)) {
		          data.push({
		            constraintSchema: "",
		            constraintName,
		            constraintType,
		            tableSchema: "",
		            tableName: constraintTableName,
		            definition
		          });
		        }
		      }
		      for (const key of keys) {
		        if (key.startsWith("PRIMARY KEY")) {
		          const columnNames = key.match(/PRIMARY KEY(?:\b|\s+)\(`(\S+)`\)/);
		          data.push({
		            constraintSchema: "",
		            constraintName: "PRIMARY",
		            constraintType: "PRIMARY KEY",
		            tableSchema: "",
		            tableName: constraintTableName,
		            columnNames: columnNames ? columnNames[1].split(",") : []
		          });
		        } else if (key.startsWith("FOREIGN KEY")) {
		          const columnNames = key.match(/FOREIGN KEY(?:\b|\s+)\(`(\S+)`\)/);
		          const deleteAction = key.match(/ON DELETE (\w+)/);
		          const updateAction = key.match(/ON UPDATE (\w+)/);
		          const references = key.match(/REFERENCES `(\S+)` \(`(\S+)`\)/);
		          data.push({
		            constraintSchema: "",
		            constraintName: "FOREIGN",
		            constraintType: "FOREIGN KEY",
		            tableSchema: "",
		            tableName: constraintTableName,
		            columnNames: columnNames ? columnNames[1].split(",") : [],
		            referencedTableName: references ? references[1] : "",
		            referencedColumnNames: references ? references[2].split(",") : [],
		            deleteAction: deleteAction ? deleteAction[1] : "",
		            updateAction: updateAction ? updateAction[1] : ""
		          });
		        }
		      }
		    } else {
		      throw new Error(`Could not parse constraints from SQL: ${createTableSql}`);
		    }
		    if (options == null ? void 0 : options.constraintName) {
		      return data.filter((constraint) => constraint.constraintName === options.constraintName);
		    }
		    return data;
		  }
		}
		
		return queryInterfaceTypescript;
	}

	var queryInterface$3;
	var hasRequiredQueryInterface$3;

	function requireQueryInterface$3 () {
		if (hasRequiredQueryInterface$3) return queryInterface$3;
		hasRequiredQueryInterface$3 = 1;
		var __defProp = Object.defineProperty;
		var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
		var __getOwnPropNames = Object.getOwnPropertyNames;
		var __hasOwnProp = Object.prototype.hasOwnProperty;
		var __export = (target, all) => {
		  for (var name in all)
		    __defProp(target, name, { get: all[name], enumerable: true });
		};
		var __copyProps = (to, from, except, desc) => {
		  if (from && typeof from === "object" || typeof from === "function") {
		    for (let key of __getOwnPropNames(from))
		      if (!__hasOwnProp.call(to, key) && key !== except)
		        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
		  }
		  return to;
		};
		var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
		var query_interface_exports = {};
		__export(query_interface_exports, {
		  SqliteQueryInterface: () => SqliteQueryInterface
		});
		queryInterface$3 = __toCommonJS(query_interface_exports);
		var import_deprecations = deprecations;
		const sequelizeErrors = errors;
		const { QueryTypes } = queryTypes;
		requireQueryInterface_types();
		const { SqliteQueryInterfaceTypeScript } = requireQueryInterfaceTypescript();
		const _ = lodashExports;
		const crypto = require$$0$3;
		class SqliteQueryInterface extends SqliteQueryInterfaceTypeScript {
		  /**
		   * A wrapper that fixes SQLite's inability to remove columns from existing tables.
		   * It will create a backup of the table, drop the table afterwards and create a
		   * new table with the same name but without the obsolete column.
		   *
		   * @override
		   */
		  async removeColumn(tableName, attributeName, options) {
		    options = options || {};
		    const fields = await this.describeTable(tableName, options);
		    delete fields[attributeName];
		    return this.alterTableInternal(tableName, fields, options);
		  }
		  /**
		   * A wrapper that fixes SQLite's inability to change columns from existing tables.
		   * It will create a backup of the table, drop the table afterwards and create a
		   * new table with the same name but with a modified version of the respective column.
		   *
		   * @override
		   */
		  async changeColumn(tableName, columnName, dataTypeOrOptions, options) {
		    options = options || {};
		    const columns = await this.describeTable(tableName, options);
		    for (const column of Object.values(columns)) {
		      delete column.unique;
		    }
		    Object.assign(columns[columnName], this.normalizeAttribute(dataTypeOrOptions));
		    return this.alterTableInternal(tableName, columns, options);
		  }
		  /**
		   * A wrapper that fixes SQLite's inability to rename columns from existing tables.
		   * It will create a backup of the table, drop the table afterwards and create a
		   * new table with the same name but with a renamed version of the respective column.
		   *
		   * @override
		   */
		  async renameColumn(tableName, attrNameBefore, attrNameAfter, options) {
		    options = options || {};
		    const fields = await this.assertTableHasColumn(tableName, attrNameBefore, options);
		    fields[attrNameAfter] = { ...fields[attrNameBefore] };
		    delete fields[attrNameBefore];
		    const sql = this.queryGenerator.renameColumnQuery(tableName, attrNameBefore, attrNameAfter, fields);
		    const subQueries = sql.split(";").filter((q) => q !== "");
		    for (const subQuery of subQueries) {
		      await this.sequelize.queryRaw(`${subQuery};`, { raw: true, ...options });
		    }
		  }
		  /**
		   * @override
		   */
		  async getForeignKeyReferencesForTable(tableName, options) {
		    const queryOptions = {
		      ...options,
		      type: QueryTypes.FOREIGNKEYS
		    };
		    const query = this.queryGenerator.getForeignKeyQuery(tableName);
		    const result = await this.sequelize.queryRaw(query, queryOptions);
		    return result.map((row) => ({
		      tableName: row.tableName,
		      constraintName: row.constraintName,
		      columnName: row.columnName,
		      referencedTableName: row.referencedTableName,
		      referencedColumnName: row.referencedColumnName,
		      constraints: {
		        onUpdate: row.on_update,
		        onDelete: row.on_delete
		      }
		    }));
		  }
		  /**
		   * @override
		   */
		  async dropAllTables(options) {
		    options = options || {};
		    const skip = options.skip || [];
		    const tableNames = await this.showAllTables(options);
		    await this.sequelize.queryRaw("PRAGMA foreign_keys = OFF", options);
		    await this._dropAllTables(tableNames, skip, options);
		    await this.sequelize.queryRaw("PRAGMA foreign_keys = ON", options);
		  }
		  /**
		   * @override
		   */
		  async describeTable(tableName, options) {
		    let table = {};
		    if (typeof tableName === "string") {
		      table.tableName = tableName;
		    }
		    if (typeof tableName === "object" && tableName !== null) {
		      table = tableName;
		    }
		    if (typeof options === "string") {
		      (0, import_deprecations.noSchemaParameter)();
		      table.schema = options;
		    }
		    if (typeof options === "object" && options !== null) {
		      if (options.schema) {
		        (0, import_deprecations.noSchemaParameter)();
		        table.schema = options.schema;
		      }
		      if (options.schemaDelimiter) {
		        (0, import_deprecations.noSchemaDelimiterParameter)();
		        table.delimiter = options.schemaDelimiter;
		      }
		    }
		    const sql = this.queryGenerator.describeTableQuery(table);
		    const sqlIndexes = this.queryGenerator.showIndexesQuery(table);
		    try {
		      const data = await this.sequelize.queryRaw(sql, { ...options, type: QueryTypes.DESCRIBE });
		      if (_.isEmpty(data)) {
		        throw new Error(`No description found for table ${table.tableName}${table.schema ? ` in schema ${table.schema}` : ""}. Check the table name and schema; remember, they _are_ case sensitive.`);
		      }
		      const indexes = await this.sequelize.queryRaw(sqlIndexes, { ...options, type: QueryTypes.SHOWINDEXES });
		      for (const prop in data) {
		        data[prop].unique = false;
		      }
		      for (const index of indexes) {
		        for (const field of index.fields) {
		          if (index.unique !== void 0) {
		            data[field.attribute].unique = index.unique;
		          }
		        }
		      }
		      const foreignKeys = await this.getForeignKeyReferencesForTable(tableName, options);
		      for (const foreignKey of foreignKeys) {
		        data[foreignKey.columnName].references = {
		          table: foreignKey.referencedTableName,
		          key: foreignKey.referencedColumnName
		        };
		        Object.assign(data[foreignKey.columnName], {
		          onUpdate: foreignKey.constraints.onUpdate,
		          onDelete: foreignKey.constraints.onDelete
		        });
		      }
		      return data;
		    } catch (error) {
		      if (error.cause && error.cause.code === "ER_NO_SUCH_TABLE") {
		        throw new Error(`No description found for table ${table.tableName}${table.schema ? ` in schema ${table.schema}` : ""}. Check the table name and schema; remember, they _are_ case sensitive.`);
		      }
		      throw error;
		    }
		  }
		  /**
		   * Alters a table in sqlite.
		   * Workaround for sqlite's limited alter table support.
		   *
		   * @param {string} tableName - The table's name
		   * @param {ColumnsDescription} columns - The table's description
		   * @param {QueryOptions} options - Query options
		   * @private
		   */
		  async alterTableInternal(tableName, columns, options) {
		    return this.withForeignKeysOff(options, async () => {
		      const savepointName = this.getSavepointName();
		      await this.sequelize.query(`SAVEPOINT ${savepointName};`, options);
		      try {
		        const indexes = await this.showIndex(tableName, options);
		        for (const index of indexes) {
		          if (!index.constraintName.startsWith("sqlite_autoindex_")) {
		            continue;
		          }
		          if (!index.unique) {
		            continue;
		          }
		          for (const field of index.fields) {
		            if (columns[field.attribute]) {
		              columns[field.attribute].unique = true;
		            }
		          }
		        }
		        const sql = this.queryGenerator.removeColumnQuery(tableName, columns);
		        const subQueries = sql.split(";").filter((q) => q !== "");
		        for (const subQuery of subQueries) {
		          await this.sequelize.query(`${subQuery};`, { raw: true, ...options });
		        }
		        const foreignKeyCheckResult = await this.sequelize.query(this.queryGenerator.foreignKeyCheckQuery(tableName), {
		          ...options,
		          type: QueryTypes.SELECT
		        });
		        if (foreignKeyCheckResult.length > 0) {
		          throw new sequelizeErrors.ForeignKeyConstraintError({
		            message: `Foreign key violations detected: ${JSON.stringify(foreignKeyCheckResult, null, 2)}`,
		            table: tableName
		          });
		        }
		        await Promise.all(indexes.map(async (index) => {
		          if (index.constraintName.startsWith("sqlite_autoindex_")) {
		            return;
		          }
		          return this.addIndex(tableName, index);
		        }));
		        await this.sequelize.query(`RELEASE ${savepointName};`, options);
		      } catch (error) {
		        await this.sequelize.query(`ROLLBACK TO ${savepointName};`, options);
		        throw error;
		      }
		    });
		  }
		  /**
		   * Runs the provided callback with foreign keys disabled.
		   *
		   * @param {QueryOptions} [options]
		   * @param {Function<Promise<any>>} cb
		   * @private
		   */
		  async withForeignKeysOff(options, cb) {
		    await this.sequelize.query("PRAGMA foreign_keys = OFF;", options);
		    try {
		      return await cb();
		    } finally {
		      await this.sequelize.query("PRAGMA foreign_keys = ON;", options);
		    }
		  }
		  /**
		   * Returns a randomly generated savepoint name
		   *
		   * @param {string} prefix
		   * @returns {string}
		   */
		  getSavepointName(prefix = "sequelize") {
		    const suffix = crypto.randomUUID().replaceAll("-", "_");
		    return `${prefix}_${suffix}`;
		  }
		}
		
		return queryInterface$3;
	}

	var sqlite;
	var hasRequiredSqlite;

	function requireSqlite () {
		if (hasRequiredSqlite) return sqlite;
		hasRequiredSqlite = 1;
		var __create = Object.create;
		var __defProp = Object.defineProperty;
		var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
		var __getOwnPropNames = Object.getOwnPropertyNames;
		var __getProtoOf = Object.getPrototypeOf;
		var __hasOwnProp = Object.prototype.hasOwnProperty;
		var __export = (target, all) => {
		  for (var name in all)
		    __defProp(target, name, { get: all[name], enumerable: true });
		};
		var __copyProps = (to, from, except, desc) => {
		  if (from && typeof from === "object" || typeof from === "function") {
		    for (let key of __getOwnPropNames(from))
		      if (!__hasOwnProp.call(to, key) && key !== except)
		        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
		  }
		  return to;
		};
		var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
		  // If the importer is in node compatibility mode or this is not an ESM
		  // file that has been converted to a CommonJS file using a Babel-
		  // compatible transform (i.e. "__esModule" has not been set), then set
		  // "default" to the CommonJS "module.exports" for node compatibility.
		  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
		  mod
		));
		var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
		var sqlite_exports = {};
		__export(sqlite_exports, {
		  SqliteDialect: () => SqliteDialect
		});
		sqlite = __toCommonJS(sqlite_exports);
		var import_sql = sql;
		var import_abstract = requireAbstract();
		var import_connection_manager = requireConnectionManager$3();
		var DataTypes = __toESM(requireDataTypes$3());
		var import_query = requireQuery$3();
		var import_query_generator = requireQueryGenerator$3();
		var import_query_interface = requireQueryInterface$3();
		class SqliteDialect extends import_abstract.AbstractDialect {
		  static supports = import_abstract.AbstractDialect.extendSupport({
		    DEFAULT: false,
		    "DEFAULT VALUES": true,
		    "UNION ALL": false,
		    "RIGHT JOIN": false,
		    inserts: {
		      ignoreDuplicates: " OR IGNORE",
		      updateOnDuplicate: " ON CONFLICT DO UPDATE SET",
		      conflictFields: true,
		      onConflictWhere: true
		    },
		    index: {
		      using: false,
		      where: true,
		      functionBased: true
		    },
		    transactionOptions: {
		      type: true
		    },
		    constraints: {
		      foreignKeyChecksDisableable: true,
		      add: false,
		      remove: false
		    },
		    groupedLimit: false,
		    dataTypes: {
		      CHAR: false,
		      COLLATE_BINARY: true,
		      CITEXT: true,
		      DECIMAL: false,
		      JSON: true
		    },
		    // TODO: add support for JSON operations https://www.sqlite.org/json1.html (bundled in sqlite3)
		    //  be careful: json_extract, ->, and ->> don't have the exact same meanings as mysql & mariadb
		    jsonOperations: false,
		    jsonExtraction: {
		      unquoted: false,
		      quoted: false
		    }
		  });
		  defaultVersion = "3.8.0";
		  Query = import_query.SqliteQuery;
		  TICK_CHAR_LEFT = "`";
		  TICK_CHAR_RIGHT = "`";
		  connectionManager;
		  queryGenerator;
		  queryInterface;
		  dataTypesDocumentationUrl = "https://www.sqlite.org/datatype3.html";
		  constructor(sequelize) {
		    super(sequelize, DataTypes, "sqlite");
		    this.connectionManager = new import_connection_manager.SqliteConnectionManager(this, sequelize);
		    this.queryGenerator = new import_query_generator.SqliteQueryGenerator({
		      dialect: this,
		      sequelize
		    });
		    this.queryInterface = new import_query_interface.SqliteQueryInterface(
		      sequelize,
		      this.queryGenerator
		    );
		  }
		  createBindCollector() {
		    return (0, import_sql.createNamedParamBindCollector)("$");
		  }
		  getDefaultSchema() {
		    return "";
		  }
		  static getDefaultPort() {
		    return 0;
		  }
		}
		
		return sqlite;
	}

	var connectionManager$2;
	var hasRequiredConnectionManager$2;

	function requireConnectionManager$2 () {
		if (hasRequiredConnectionManager$2) return connectionManager$2;
		hasRequiredConnectionManager$2 = 1;
		var __defProp = Object.defineProperty;
		var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
		var __getOwnPropNames = Object.getOwnPropertyNames;
		var __hasOwnProp = Object.prototype.hasOwnProperty;
		var __export = (target, all) => {
		  for (var name in all)
		    __defProp(target, name, { get: all[name], enumerable: true });
		};
		var __copyProps = (to, from, except, desc) => {
		  if (from && typeof from === "object" || typeof from === "function") {
		    for (let key of __getOwnPropNames(from))
		      if (!__hasOwnProp.call(to, key) && key !== except)
		        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
		  }
		  return to;
		};
		var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
		var connection_manager_exports = {};
		__export(connection_manager_exports, {
		  IBMiConnectionManager: () => IBMiConnectionManager
		});
		connectionManager$2 = __toCommonJS(connection_manager_exports);
		var import_errors = errors;
		var import_logger = requireLogger();
		var import_connection_manager = requireConnectionManager$8();
		const debug = import_logger.logger.debugContext("connection:ibmi");
		class IBMiConnectionManager extends import_connection_manager.AbstractConnectionManager {
		  lib;
		  constructor(dialect, sequelize) {
		    super(dialect, sequelize);
		    this.lib = this._loadDialectModule("odbc");
		  }
		  async connect(config) {
		    const connectionKeywords = [];
		    if (config.dialectOptions && config.dialectOptions.odbcConnectionString) {
		      connectionKeywords.push(config.dialectOptions.odbcConnectionString);
		    }
		    if (config.database) {
		      connectionKeywords.push(`DSN=${config.database}`);
		    }
		    if (config.username) {
		      connectionKeywords.push(`UID=${config.username}`);
		    }
		    if (config.password) {
		      connectionKeywords.push(`PWD=${config.password}`);
		    }
		    if (config.host) {
		      connectionKeywords.push(`SYSTEM=${config.host}`);
		    }
		    let connectionString = connectionKeywords.join(";");
		    if (!connectionString.endsWith(";")) {
		      connectionString += ";";
		    }
		    let connection;
		    try {
		      connection = await this.lib.connect(connectionString);
		    } catch (error) {
		      if (!(error instanceof Error)) {
		        throw error;
		      }
		      if (error.toString().includes("Error connecting to the database")) {
		        throw new import_errors.ConnectionRefusedError(error);
		      }
		      throw error;
		    }
		    return connection;
		  }
		  async disconnect(connection) {
		    if (!this.validate(connection)) {
		      debug("Tried to disconnect, but connection was already closed.");
		      return;
		    }
		    await new Promise((resolve, reject) => {
		      connection.close((error) => {
		        if (error) {
		          return void reject(error);
		        }
		        resolve();
		        return void 0;
		      });
		    });
		  }
		  validate(connection) {
		    return connection.connected;
		  }
		}
		
		return connectionManager$2;
	}

	var dataTypes$2;
	var hasRequiredDataTypes$2;

	function requireDataTypes$2 () {
		if (hasRequiredDataTypes$2) return dataTypes$2;
		hasRequiredDataTypes$2 = 1;
		var __create = Object.create;
		var __defProp = Object.defineProperty;
		var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
		var __getOwnPropNames = Object.getOwnPropertyNames;
		var __getProtoOf = Object.getPrototypeOf;
		var __hasOwnProp = Object.prototype.hasOwnProperty;
		var __export = (target, all) => {
		  for (var name in all)
		    __defProp(target, name, { get: all[name], enumerable: true });
		};
		var __copyProps = (to, from, except, desc) => {
		  if (from && typeof from === "object" || typeof from === "function") {
		    for (let key of __getOwnPropNames(from))
		      if (!__hasOwnProp.call(to, key) && key !== except)
		        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
		  }
		  return to;
		};
		var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
		  // If the importer is in node compatibility mode or this is not an ESM
		  // file that has been converted to a CommonJS file using a Babel-
		  // compatible transform (i.e. "__esModule" has not been set), then set
		  // "default" to the CommonJS "module.exports" for node compatibility.
		  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
		  mod
		));
		var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
		var data_types_exports = {};
		__export(data_types_exports, {
		  BIGINT: () => BIGINT,
		  BLOB: () => BLOB,
		  CHAR: () => CHAR,
		  DATE: () => DATE,
		  DECIMAL: () => DECIMAL,
		  DOUBLE: () => DOUBLE,
		  ENUM: () => ENUM,
		  FLOAT: () => FLOAT,
		  INTEGER: () => INTEGER,
		  MEDIUMINT: () => MEDIUMINT,
		  NOW: () => NOW,
		  SMALLINT: () => SMALLINT,
		  STRING: () => STRING,
		  TEXT: () => TEXT,
		  TINYINT: () => TINYINT,
		  UUID: () => UUID
		});
		dataTypes$2 = __toCommonJS(data_types_exports);
		var import_dayjs = __toESM(dayjs_minExports);
		var import_maxBy = __toESM(requireMaxBy());
		var BaseTypes = __toESM(requireDataTypes$8());
		function removeUnsupportedIntegerOptions(dataType, dialect) {
		  if (dataType.options.length != null) {
		    dialect.warnDataTypeIssue(`${dialect.name} does not support ${dataType.getDataTypeId()} with length specified. This options is ignored.`);
		    delete dataType.options.length;
		  }
		}
		class BLOB extends BaseTypes.BLOB {
		  toSql() {
		    if (this.options.length != null) {
		      if (this.options.length.toLowerCase() === "tiny") {
		        return "BLOB(255)";
		      }
		      if (this.options.length.toLowerCase() === "medium") {
		        return "BLOB(16M)";
		      }
		      if (this.options.length.toLowerCase() === "long") {
		        return "BLOB(2G)";
		      }
		      return `BLOB(${this.options.length})`;
		    }
		    return "BLOB(1M)";
		  }
		}
		class STRING extends BaseTypes.STRING {
		  toSql() {
		    const length = this.options.length ?? 255;
		    if (this.options.binary) {
		      if (length <= 4e3) {
		        return `VARCHAR(${length}) FOR BIT DATA`;
		      }
		      throw new Error(`${this._getDialect().name} does not support the BINARY option for data types with a length greater than 4000.`);
		    }
		    if (length <= 4e3) {
		      return `VARCHAR(${length})`;
		    }
		    return `CLOB(${length})`;
		  }
		}
		class CHAR extends BaseTypes.CHAR {
		  toSql() {
		    if (this.options.binary) {
		      return `CHAR(${this.options.length ?? 255}) FOR BIT DATA`;
		    }
		    return super.toSql();
		  }
		}
		class TEXT extends BaseTypes.TEXT {
		  toSql() {
		    let len = 2147483647;
		    if (typeof this.options.length === "string") {
		      switch (this.options.length.toLowerCase()) {
		        case "tiny":
		          len = 2 ** 8;
		          break;
		        case "medium":
		          len = 2 ** 24;
		          break;
		        case "long":
		          len = 2147483647;
		          break;
		        default:
		          throw new Error(`LENGTH value ${this.options.length} is not supported. Expected a number of one of the following strings: tiny, medium, long.`);
		      }
		    }
		    if (len > 32672) {
		      return `CLOB(${len})`;
		    }
		    return `VARCHAR(${len})`;
		  }
		}
		class UUID extends BaseTypes.UUID {
		  toSql() {
		    return "CHAR(36) FOR BIT DATA";
		  }
		}
		class NOW extends BaseTypes.NOW {
		  toSql() {
		    return "CURRENT TIME";
		  }
		}
		class DATE extends BaseTypes.DATE {
		  _checkOptionSupport(dialect) {
		    super._checkOptionSupport(dialect);
		    if (this.options.precision != null && this.options.precision > 6) {
		      this.options.precision = 6;
		    }
		  }
		  toSql() {
		    return `TIMESTAMP${this.options.precision != null ? `(${this.options.precision})` : ""}`;
		  }
		  toBindableValue(date) {
		    date = (0, import_dayjs.default)(date).utc(false);
		    return date.format("YYYY-MM-DD HH:mm:ss.SSS");
		  }
		}
		class TINYINT extends BaseTypes.TINYINT {
		  _checkOptionSupport(dialect) {
		    super._checkOptionSupport(dialect);
		    removeUnsupportedIntegerOptions(this, dialect);
		  }
		  // TODO: add >= 0 =< 2^8-1 check when the unsigned option is true
		  // TODO: add >= -2^7 =< 2^7-1 check when the unsigned option is false
		  toSql() {
		    return "SMALLINT";
		  }
		}
		class SMALLINT extends BaseTypes.SMALLINT {
		  _checkOptionSupport(dialect) {
		    super._checkOptionSupport(dialect);
		    removeUnsupportedIntegerOptions(this, dialect);
		  }
		  // TODO: add >= 0 =< 2^16-1 check when the unsigned option is true
		  toSql() {
		    if (this.options.unsigned) {
		      return "INTEGER";
		    }
		    return "SMALLINT";
		  }
		}
		class MEDIUMINT extends BaseTypes.MEDIUMINT {
		  _checkOptionSupport(dialect) {
		    super._checkOptionSupport(dialect);
		    removeUnsupportedIntegerOptions(this, dialect);
		  }
		  // TODO: add >= 0 =< 2^24-1 check when the unsigned option is true
		  // TODO: add >= -2^23 =< 2^23-1 check when the unsigned option is false
		  toSql() {
		    return "INTEGER";
		  }
		}
		class INTEGER extends BaseTypes.INTEGER {
		  _checkOptionSupport(dialect) {
		    super._checkOptionSupport(dialect);
		    removeUnsupportedIntegerOptions(this, dialect);
		  }
		  // TODO: add >= 0 =< 2^32-1 check when the unsigned option is true
		  toSql() {
		    if (this.options.unsigned) {
		      return "BIGINT";
		    }
		    return "INTEGER";
		  }
		}
		class BIGINT extends BaseTypes.BIGINT {
		  _checkOptionSupport(dialect) {
		    super._checkOptionSupport(dialect);
		    removeUnsupportedIntegerOptions(this, dialect);
		  }
		}
		class FLOAT extends BaseTypes.FLOAT {
		  // TODO: add check constraint >= 0 if unsigned is true
		  getNumberSqlTypeName() {
		    return "REAL";
		  }
		}
		class DOUBLE extends BaseTypes.DOUBLE {
		  // TODO: add check constraint >= 0 if unsigned is true
		  getNumberSqlTypeName() {
		    return "DOUBLE";
		  }
		}
		class DECIMAL extends BaseTypes.DECIMAL {
		  // TODO: add check constraint >= 0 if unsigned is true
		}
		class ENUM extends BaseTypes.ENUM {
		  toSql() {
		    var _a;
		    const minLength = ((_a = (0, import_maxBy.default)(this.options.values, (value) => value.length)) == null ? void 0 : _a.length) ?? 0;
		    return `VARCHAR(${Math.max(minLength, 255)})`;
		  }
		}
		
		return dataTypes$2;
	}

	var dataTypes$1;
	var hasRequiredDataTypes$1;

	function requireDataTypes$1 () {
		if (hasRequiredDataTypes$1) return dataTypes$1;
		hasRequiredDataTypes$1 = 1;
		var __create = Object.create;
		var __defProp = Object.defineProperty;
		var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
		var __getOwnPropNames = Object.getOwnPropertyNames;
		var __getProtoOf = Object.getPrototypeOf;
		var __hasOwnProp = Object.prototype.hasOwnProperty;
		var __export = (target, all) => {
		  for (var name in all)
		    __defProp(target, name, { get: all[name], enumerable: true });
		};
		var __copyProps = (to, from, except, desc) => {
		  if (from && typeof from === "object" || typeof from === "function") {
		    for (let key of __getOwnPropNames(from))
		      if (!__hasOwnProp.call(to, key) && key !== except)
		        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
		  }
		  return to;
		};
		var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
		  // If the importer is in node compatibility mode or this is not an ESM
		  // file that has been converted to a CommonJS file using a Babel-
		  // compatible transform (i.e. "__esModule" has not been set), then set
		  // "default" to the CommonJS "module.exports" for node compatibility.
		  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
		  mod
		));
		var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
		var data_types_exports = {};
		__export(data_types_exports, {
		  BIGINT: () => import_data_types.BIGINT,
		  BLOB: () => import_data_types.BLOB,
		  BOOLEAN: () => BOOLEAN,
		  CHAR: () => import_data_types.CHAR,
		  DATE: () => import_data_types.DATE,
		  DECIMAL: () => import_data_types.DECIMAL,
		  DOUBLE: () => import_data_types.DOUBLE,
		  ENUM: () => import_data_types.ENUM,
		  FLOAT: () => import_data_types.FLOAT,
		  INTEGER: () => import_data_types.INTEGER,
		  MEDIUMINT: () => import_data_types.MEDIUMINT,
		  SMALLINT: () => import_data_types.SMALLINT,
		  STRING: () => import_data_types.STRING,
		  TEXT: () => import_data_types.TEXT,
		  TINYINT: () => import_data_types.TINYINT,
		  UUID: () => UUID
		});
		dataTypes$1 = __toCommonJS(data_types_exports);
		var BaseTypes = __toESM(requireDataTypes$8());
		var import_data_types = requireDataTypes$2();
		class UUID extends BaseTypes.UUID {
		  toSql() {
		    return "CHAR(36)";
		  }
		}
		class BOOLEAN extends BaseTypes.BOOLEAN {
		  escape(value) {
		    return value ? "1" : "0";
		  }
		  toBindableValue(value) {
		    return value ? 1 : 0;
		  }
		  toSql() {
		    return "SMALLINT";
		  }
		}
		
		return dataTypes$1;
	}

	var query$2;
	var hasRequiredQuery$2;

	function requireQuery$2 () {
		if (hasRequiredQuery$2) return query$2;
		hasRequiredQuery$2 = 1;
		var __defProp = Object.defineProperty;
		var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
		var __getOwnPropNames = Object.getOwnPropertyNames;
		var __hasOwnProp = Object.prototype.hasOwnProperty;
		var __export = (target, all) => {
		  for (var name in all)
		    __defProp(target, name, { get: all[name], enumerable: true });
		};
		var __copyProps = (to, from, except, desc) => {
		  if (from && typeof from === "object" || typeof from === "function") {
		    for (let key of __getOwnPropNames(from))
		      if (!__hasOwnProp.call(to, key) && key !== except)
		        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
		  }
		  return to;
		};
		var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
		var query_exports = {};
		__export(query_exports, {
		  IBMiQuery: () => IBMiQuery
		});
		query$2 = __toCommonJS(query_exports);
		var import_iterators = requireIterators();
		const { AbstractQuery } = requireQuery$8();
		const sequelizeErrors = errors;
		const { logger } = requireLogger();
		const debug = logger.debugContext("sql:ibmi");
		class IBMiQuery extends AbstractQuery {
		  getInsertIdField() {
		    return "id";
		  }
		  async run(sql, parameters) {
		    this.sql = sql.replace(/;$/, "");
		    const complete = this._logQuery(sql, debug, parameters);
		    let results;
		    try {
		      results = await this.connection.query(this.sql, parameters);
		    } catch (error) {
		      throw this.formatError(error);
		    }
		    complete();
		    for (const result of results) {
		      for (const column of results.columns) {
		        const value = result[column.name];
		        if (value == null) {
		          continue;
		        }
		        const parse = this.sequelize.dialect.getParserForDatabaseDataType(column.dataType);
		        if (parse) {
		          result[column.name] = parse(value);
		        }
		      }
		    }
		    return this.formatResults(results);
		  }
		  /**
		   * High level function that handles the results of a query execution.
		   *
		   *
		   * Example:
		   *  query.formatResults([
		   *    {
		   *      id: 1,              // this is from the main table
		   *      attr2: 'snafu',     // this is from the main table
		   *      Tasks.id: 1,        // this is from the associated table
		   *      Tasks.title: 'task' // this is from the associated table
		   *    }
		   *  ])
		   *
		   * @param {Array} data - The result of the query execution.
		   * @private
		   */
		  formatResults(data) {
		    let result = this.instance;
		    if (this.isInsertQuery() || this.isUpdateQuery() || this.isUpsertQuery()) {
		      if (this.instance && this.instance.dataValues) {
		        for (const key in data[0]) {
		          if (Object.hasOwn(data[0], key)) {
		            const record = data[0][key];
		            const attributes = this.model.modelDefinition.attributes;
		            const attr = (0, import_iterators.find)(attributes.values(), (attribute) => attribute.attributeName === key || attribute.columnName === key);
		            this.instance.dataValues[(attr == null ? void 0 : attr.attributeName) || key] = record;
		          }
		        }
		      }
		      if (this.isUpsertQuery()) {
		        return [
		          this.instance,
		          null
		        ];
		      }
		      return [
		        this.instance || data && (this.options.plain && data[0] || data) || void 0,
		        data.count
		      ];
		    }
		    if (this.isSelectQuery()) {
		      return this.handleSelectQuery(data);
		    }
		    if (this.isShowTablesQuery()) {
		      return this.handleShowTablesQuery(data);
		    }
		    if (this.isShowIndexesQuery()) {
		      return this.handleShowIndexesQuery(data);
		    }
		    if (this.isDescribeQuery()) {
		      result = {};
		      for (const _result of data) {
		        const enumRegex = /^enum/i;
		        result[_result.COLUMN_NAME] = {
		          type: enumRegex.test(_result.Type) ? _result.Type.replace(enumRegex, "ENUM") : _result.DATA_TYPE.toUpperCase(),
		          allowNull: _result.IS_NULLABLE === "Y",
		          defaultValue: _result.COLUMN_DEFAULT,
		          primaryKey: _result.CONSTRAINT_TYPE === "PRIMARY KEY",
		          autoIncrement: _result.IS_GENERATED !== "IDENTITY_GENERATION"
		        };
		      }
		      return result;
		    }
		    if (this.isCallQuery()) {
		      return data[0];
		    }
		    if (this.isBulkUpdateQuery() || this.isBulkDeleteQuery() || this.isUpsertQuery()) {
		      return data.count;
		    }
		    if (this.isForeignKeysQuery()) {
		      return data;
		    }
		    if (this.isInsertQuery(data)) {
		      return [result, data.length];
		    }
		    if (this.isUpdateQuery()) {
		      return [result, data.count];
		    }
		    if (this.isShowConstraintsQuery()) {
		      return data;
		    }
		    if (this.isRawQuery()) {
		      return [data, data];
		    }
		    if (this.isShowIndexesQuery()) {
		      return data;
		    }
		    return result;
		  }
		  handleInsertQuery(results, metaData) {
		    if (this.instance) {
		      const autoIncrementAttribute = this.model.autoIncrementAttribute.field;
		      let id = null;
		      id = id || results && results[autoIncrementAttribute];
		      id = id || metaData && metaData[autoIncrementAttribute];
		      this.instance[this.model.autoIncrementAttribute] = id;
		    }
		  }
		  handleShowIndexesQuery(data) {
		    const indexes = /* @__PURE__ */ Object.create(null);
		    data.forEach((item) => {
		      if (Object.hasOwn(indexes, item.NAME)) {
		        indexes[item.NAME].fields.push({ attribute: item.COLUMN_NAME, length: void 0, order: void 0, collate: void 0 });
		      } else {
		        indexes[item.NAME] = {
		          primary: item.CONSTRAINT_TYPE === "PRIMARY KEY",
		          fields: [{ attribute: item.COLUMN_NAME, length: void 0, order: void 0, collate: void 0 }],
		          name: item.NAME,
		          tableName: item.TABLE_NAME,
		          unique: item.CONSTRAINT_TYPE === "PRIMARY KEY" || item.CONSTRAINT_TYPE === "UNIQUE",
		          type: item.CONSTRAINT_TYPE
		        };
		      }
		    });
		    return Object.values(indexes);
		  }
		  formatError(err) {
		    if (err.toString().includes("Error connecting to the database")) {
		      return new sequelizeErrors.ConnectionRefusedError(err);
		    }
		    if (Object.hasOwn(err, "odbcErrors") && err.odbcErrors.length > 0) {
		      const odbcError = err.odbcErrors[0];
		      const foreignKeyConstraintCodes = [
		        -530,
		        // The insert or update value of a foreign key is invalid.
		        -531,
		        // The update or delete of a parent key is prevented by a NO ACTION update or delete rule.
		        -532
		        // The update or delete of a parent key is prevented by a NO ACTION update or delete rule.
		      ];
		      const uniqueConstraintCodes = [
		        -803
		        // A violation of the constraint imposed by a unique index or a unique constraint occurred.
		      ];
		      if (foreignKeyConstraintCodes.includes(odbcError.code)) {
		        return new sequelizeErrors.ForeignKeyConstraintError({
		          cause: err,
		          sql: {},
		          fields: {}
		        });
		      }
		      if (uniqueConstraintCodes.includes(odbcError.code)) {
		        return new sequelizeErrors.UniqueConstraintError({
		          errors: err.odbcErrors,
		          cause: err,
		          sql: {},
		          fields: {}
		        });
		      }
		      if (odbcError.code === -204) {
		        let constraintName;
		        let type;
		        const constraintNameRegex = /"([^)]+?)" in [^]+? type (\*\w+?) not found./;
		        const constraintNameRegexMatches = odbcError.message.match(constraintNameRegex);
		        if (constraintNameRegexMatches && constraintNameRegexMatches.length === 3) {
		          constraintName = constraintNameRegexMatches[1];
		          type = constraintNameRegexMatches[2];
		          if (type === "*N") {
		            return new sequelizeErrors.UnknownConstraintError({
		              cause: err,
		              constraint: constraintName
		            });
		          }
		        }
		      }
		      return new sequelizeErrors.DatabaseError(odbcError);
		    }
		    return err;
		  }
		}
		
		return query$2;
	}

	var queryGeneratorTypescript$2;
	var hasRequiredQueryGeneratorTypescript$2;

	function requireQueryGeneratorTypescript$2 () {
		if (hasRequiredQueryGeneratorTypescript$2) return queryGeneratorTypescript$2;
		hasRequiredQueryGeneratorTypescript$2 = 1;
		var __defProp = Object.defineProperty;
		var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
		var __getOwnPropNames = Object.getOwnPropertyNames;
		var __hasOwnProp = Object.prototype.hasOwnProperty;
		var __export = (target, all) => {
		  for (var name in all)
		    __defProp(target, name, { get: all[name], enumerable: true });
		};
		var __copyProps = (to, from, except, desc) => {
		  if (from && typeof from === "object" || typeof from === "function") {
		    for (let key of __getOwnPropNames(from))
		      if (!__hasOwnProp.call(to, key) && key !== except)
		        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
		  }
		  return to;
		};
		var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
		var query_generator_typescript_exports = {};
		__export(query_generator_typescript_exports, {
		  IBMiQueryGeneratorTypeScript: () => IBMiQueryGeneratorTypeScript
		});
		queryGeneratorTypescript$2 = __toCommonJS(query_generator_typescript_exports);
		var import_check = requireCheck();
		var import_join_sql_fragments = joinSqlFragments;
		var import_string = string$2;
		var import_query_generator = requireQueryGenerator$8();
		var import_query_generator_typescript = requireQueryGeneratorTypescript$8();
		const REMOVE_INDEX_QUERY_SUPPORTED_OPTIONS = /* @__PURE__ */ new Set(["ifExists"]);
		class IBMiQueryGeneratorTypeScript extends import_query_generator.AbstractQueryGenerator {
		  describeTableQuery(tableName) {
		    const table = this.extractTableDetails(tableName);
		    return (0, import_join_sql_fragments.joinSQLFragments)([
		      "SELECT",
		      "QSYS2.SYSCOLUMNS.*,",
		      "QSYS2.SYSCST.CONSTRAINT_NAME,",
		      "QSYS2.SYSCST.CONSTRAINT_TYPE",
		      "FROM QSYS2.SYSCOLUMNS",
		      "LEFT OUTER JOIN QSYS2.SYSCSTCOL",
		      "ON QSYS2.SYSCOLUMNS.TABLE_SCHEMA = QSYS2.SYSCSTCOL.TABLE_SCHEMA",
		      "AND QSYS2.SYSCOLUMNS.TABLE_NAME = QSYS2.SYSCSTCOL.TABLE_NAME",
		      "AND QSYS2.SYSCOLUMNS.COLUMN_NAME = QSYS2.SYSCSTCOL.COLUMN_NAME",
		      "LEFT JOIN QSYS2.SYSCST",
		      "ON QSYS2.SYSCSTCOL.CONSTRAINT_NAME = QSYS2.SYSCST.CONSTRAINT_NAME",
		      "WHERE QSYS2.SYSCOLUMNS.TABLE_SCHEMA =",
		      table.schema ? this.escape(table.schema) : "CURRENT SCHEMA",
		      "AND QSYS2.SYSCOLUMNS.TABLE_NAME =",
		      this.escape(table.tableName)
		    ]);
		  }
		  showConstraintsQuery(tableName, options) {
		    const table = this.extractTableDetails(tableName);
		    return (0, import_join_sql_fragments.joinSQLFragments)([
		      'SELECT c.CONSTRAINT_SCHEMA AS "constraintSchema",',
		      'c.CONSTRAINT_NAME AS "constraintName",',
		      'c.CONSTRAINT_TYPE AS "constraintType",',
		      'c.TABLE_SCHEMA AS "tableSchema",',
		      'c.TABLE_NAME AS "tableName",',
		      'k.COLUMN_NAME AS "columnNames",',
		      'fk.TABLE_SCHEMA AS "referencedTableSchema",',
		      'fk.TABLE_NAME AS "referencedTableName",',
		      'fk.COLUMN_NAME AS "referencedColumnNames",',
		      'r.DELETE_RULE AS "deleteRule",',
		      'r.UPDATE_RULE AS "updateRule",',
		      'ch.CHECK_CLAUSE AS "definition",',
		      'c.IS_DEFERRABLE AS "isDeferrable",',
		      'c.INITIALLY_DEFERRED AS "initiallyDeferred"',
		      "FROM QSYS2.SYSCST c",
		      "LEFT JOIN QSYS2.SYSREFCST r ON c.CONSTRAINT_NAME = r.CONSTRAINT_NAME AND c.CONSTRAINT_SCHEMA = r.CONSTRAINT_SCHEMA",
		      "LEFT JOIN QSYS2.SYSKEYCST k ON r.CONSTRAINT_NAME = k.CONSTRAINT_NAME AND r.CONSTRAINT_SCHEMA = k.CONSTRAINT_SCHEMA",
		      "LEFT JOIN QSYS2.SYSKEYCST fk ON r.UNIQUE_CONSTRAINT_NAME = k.CONSTRAINT_NAME AND r.UNIQUE_CONSTRAINT_SCHEMA = k.CONSTRAINT_SCHEMA",
		      "LEFT JOIN QSYS2.SYSCHKCST ch ON c.CONSTRAINT_NAME = ch.CONSTRAINT_NAME AND c.CONSTRAINT_SCHEMA = ch.CONSTRAINT_SCHEMA",
		      `WHERE c.TABLE_NAME = ${this.escape(table.tableName)}`,
		      "AND c.TABLE_SCHEMA =",
		      table.schema ? this.escape(table.schema) : "CURRENT SCHEMA",
		      (options == null ? void 0 : options.constraintName) ? `AND c.CONSTRAINT_NAME = ${this.escape(options.constraintName)}` : "",
		      "ORDER BY c.CONSTRAINT_NAME"
		    ]);
		  }
		  showIndexesQuery(tableName) {
		    const table = this.extractTableDetails(tableName);
		    return (0, import_join_sql_fragments.joinSQLFragments)([
		      "select QSYS2.SYSCSTCOL.CONSTRAINT_NAME as NAME, QSYS2.SYSCSTCOL.COLUMN_NAME, QSYS2.SYSCST.CONSTRAINT_TYPE, QSYS2.SYSCST.TABLE_SCHEMA,",
		      "QSYS2.SYSCST.TABLE_NAME from QSYS2.SYSCSTCOL left outer join QSYS2.SYSCST on QSYS2.SYSCSTCOL.TABLE_SCHEMA = QSYS2.SYSCST.TABLE_SCHEMA and",
		      "QSYS2.SYSCSTCOL.TABLE_NAME = QSYS2.SYSCST.TABLE_NAME and QSYS2.SYSCSTCOL.CONSTRAINT_NAME = QSYS2.SYSCST.CONSTRAINT_NAME where",
		      "QSYS2.SYSCSTCOL.TABLE_SCHEMA =",
		      table.schema ? this.escape(table.schema) : "CURRENT SCHEMA",
		      `and QSYS2.SYSCSTCOL.TABLE_NAME = ${this.escape(table.tableName)} union select QSYS2.SYSKEYS.INDEX_NAME AS NAME,`,
		      `QSYS2.SYSKEYS.COLUMN_NAME, CAST('INDEX' AS VARCHAR(11)), QSYS2.SYSINDEXES.TABLE_SCHEMA, QSYS2.SYSINDEXES.TABLE_NAME from QSYS2.SYSKEYS`,
		      "left outer join QSYS2.SYSINDEXES on QSYS2.SYSKEYS.INDEX_NAME = QSYS2.SYSINDEXES.INDEX_NAME where QSYS2.SYSINDEXES.TABLE_SCHEMA =",
		      table.schema ? this.escape(table.schema) : "CURRENT SCHEMA",
		      "and QSYS2.SYSINDEXES.TABLE_NAME =",
		      this.escape(table.tableName)
		    ]);
		  }
		  removeIndexQuery(tableName, indexNameOrAttributes, options) {
		    if (options) {
		      (0, import_check.rejectInvalidOptions)(
		        "removeIndexQuery",
		        this.dialect.name,
		        import_query_generator_typescript.REMOVE_INDEX_QUERY_SUPPORTABLE_OPTIONS,
		        REMOVE_INDEX_QUERY_SUPPORTED_OPTIONS,
		        options
		      );
		    }
		    let indexName;
		    if (Array.isArray(indexNameOrAttributes)) {
		      const table = this.extractTableDetails(tableName);
		      indexName = (0, import_string.generateIndexName)(table, { fields: indexNameOrAttributes });
		    } else {
		      indexName = indexNameOrAttributes;
		    }
		    return (0, import_join_sql_fragments.joinSQLFragments)([
		      "BEGIN",
		      (options == null ? void 0 : options.ifExists) ? `IF EXISTS (SELECT * FROM QSYS2.SYSINDEXES WHERE INDEX_NAME = ${this.quoteIdentifier(indexName)}) THEN` : "",
		      `DROP INDEX ${this.quoteIdentifier(indexName)};`,
		      "COMMIT;",
		      (options == null ? void 0 : options.ifExists) ? "END IF;" : "",
		      "END"
		    ]);
		  }
		  getForeignKeyQuery(tableName, columnName) {
		    const table = this.extractTableDetails(tableName);
		    return (0, import_join_sql_fragments.joinSQLFragments)([
		      'SELECT FK_CAT AS "constraintCatalog",',
		      'FK_SCHEM AS "constraintSchema",',
		      'FK_NAME AS "constraintName",',
		      'PKTABLE_CAT AS "referencedTableCatalog",',
		      'PKTABLE_SCHEM AS "referencedTableSchema",',
		      'PKTABLE_NAME AS "referencedTableName",',
		      'PKCOLUMN_NAME AS "referencedColumnName",',
		      'FKTABLE_CAT AS "tableCatalog",',
		      'FKTABLE_SCHEM AS "tableSchema",',
		      'FKTABLE_NAME AS "tableName",',
		      'FKCOLUMN_NAME AS "columnName"',
		      "FROM SYSIBM.SQLFOREIGNKEYS",
		      "WHERE FKTABLE_SCHEM =",
		      table.schema ? this.escape(table.schema) : "CURRENT SCHEMA",
		      `AND FKTABLE_NAME = ${this.escape(table.tableName)}`,
		      columnName && `AND FKCOLUMN_NAME = ${this.escape(columnName)}`
		    ]);
		  }
		  // Version queries
		  versionQuery() {
		    return `SELECT CONCAT(OS_VERSION, CONCAT('.', OS_RELEASE)) AS "version" FROM SYSIBMADM.ENV_SYS_INFO`;
		  }
		}
		
		return queryGeneratorTypescript$2;
	}

	var queryGenerator$2;
	var hasRequiredQueryGenerator$2;

	function requireQueryGenerator$2 () {
		if (hasRequiredQueryGenerator$2) return queryGenerator$2;
		hasRequiredQueryGenerator$2 = 1;
		var __defProp = Object.defineProperty;
		var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
		var __getOwnPropNames = Object.getOwnPropertyNames;
		var __hasOwnProp = Object.prototype.hasOwnProperty;
		var __export = (target, all) => {
		  for (var name in all)
		    __defProp(target, name, { get: all[name], enumerable: true });
		};
		var __copyProps = (to, from, except, desc) => {
		  if (from && typeof from === "object" || typeof from === "function") {
		    for (let key of __getOwnPropNames(from))
		      if (!__hasOwnProp.call(to, key) && key !== except)
		        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
		  }
		  return to;
		};
		var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
		var query_generator_exports = {};
		__export(query_generator_exports, {
		  IBMiQueryGenerator: () => IBMiQueryGenerator
		});
		queryGenerator$2 = __toCommonJS(query_generator_exports);
		var import_base_sql_expression = baseSqlExpression;
		var import_model_internals = requireModelInternals();
		var import_check = requireCheck();
		var import_string = string$2;
		var import_query_builder_utils = requireQueryBuilderUtils();
		var import_data_types_utils = requireDataTypesUtils();
		var import_query_generator = requireQueryGenerator$8();
		const util = require$$0$1;
		const _ = lodashExports;
		const { IBMiQueryGeneratorTypeScript } = requireQueryGeneratorTypescript$2();
		const DataTypes = dataTypes$8;
		const typeWithoutDefault = /* @__PURE__ */ new Set(["BLOB"]);
		const CREATE_SCHEMA_QUERY_SUPPORTED_OPTIONS = /* @__PURE__ */ new Set();
		const CREATE_TABLE_QUERY_SUPPORTED_OPTIONS = /* @__PURE__ */ new Set(["uniqueKeys"]);
		const DROP_TABLE_QUERY_SUPPORTED_OPTIONS = /* @__PURE__ */ new Set();
		const ADD_COLUMN_QUERY_SUPPORTED_OPTIONS = /* @__PURE__ */ new Set();
		const REMOVE_COLUMN_QUERY_SUPPORTED_OPTIONS = /* @__PURE__ */ new Set();
		class IBMiQueryGenerator extends IBMiQueryGeneratorTypeScript {
		  // Schema queries
		  createSchemaQuery(schema, options) {
		    if (options) {
		      (0, import_check.rejectInvalidOptions)(
		        "createSchemaQuery",
		        this.dialect.name,
		        import_query_generator.CREATE_SCHEMA_QUERY_SUPPORTABLE_OPTIONS,
		        CREATE_SCHEMA_QUERY_SUPPORTED_OPTIONS,
		        options
		      );
		    }
		    return `CREATE SCHEMA "${schema}"`;
		  }
		  dropSchemaQuery(schema) {
		    return `BEGIN IF EXISTS (SELECT * FROM SYSIBM.SQLSCHEMAS WHERE TABLE_SCHEM = ${schema ? `'${schema}'` : "CURRENT SCHEMA"}) THEN SET TRANSACTION ISOLATION LEVEL NO COMMIT; DROP SCHEMA "${schema ? `${schema}` : "CURRENT SCHEMA"}"; COMMIT; END IF; END`;
		  }
		  listSchemasQuery(options) {
		    let skippedSchemas = "";
		    if (options == null ? void 0 : options.skip) {
		      for (let i = 0; i < options.skip.length; i++) {
		        skippedSchemas += ` AND SCHEMA_NAME != ${this.escape(options.skip[i])}`;
		      }
		    }
		    return `SELECT DISTINCT SCHEMA_NAME AS "schema_name" FROM QSYS2.SYSSCHEMAAUTH WHERE GRANTEE = CURRENT USER${skippedSchemas}`;
		  }
		  // Table queries
		  createTableQuery(tableName, attributes, options) {
		    if (options) {
		      (0, import_check.rejectInvalidOptions)(
		        "createTableQuery",
		        this.dialect.name,
		        import_query_generator.CREATE_TABLE_QUERY_SUPPORTABLE_OPTIONS,
		        CREATE_TABLE_QUERY_SUPPORTED_OPTIONS,
		        options
		      );
		    }
		    const primaryKeys = [];
		    const foreignKeys = /* @__PURE__ */ Object.create(null);
		    const attrStr = [];
		    for (const attr in attributes) {
		      if (!Object.hasOwn(attributes, attr)) {
		        continue;
		      }
		      const dataType = attributes[attr];
		      if (dataType.includes("PRIMARY KEY")) {
		        primaryKeys.push(attr);
		        attrStr.push(`${this.quoteIdentifier(attr)} ${dataType.replace("PRIMARY KEY", "")}`);
		      } else {
		        attrStr.push(`${this.quoteIdentifier(attr)} ${dataType}`);
		      }
		    }
		    let attributesClause = attrStr.join(", ");
		    const pkString = primaryKeys.map((pk) => this.quoteIdentifier(pk)).join(", ");
		    if (options == null ? void 0 : options.uniqueKeys) {
		      const sortedPrimaryKeys = [...primaryKeys];
		      sortedPrimaryKeys.sort();
		      _.each(options.uniqueKeys, (columns, indexName) => {
		        const sortedColumnFields = [...columns.fields];
		        sortedColumnFields.sort();
		        const uniqueIsPrimary = sortedColumnFields.length === primaryKeys.length && sortedColumnFields.every((value, index) => {
		          return value === sortedPrimaryKeys[index];
		        });
		        if (uniqueIsPrimary) {
		          return true;
		        }
		        if (typeof indexName !== "string") {
		          indexName = `uniq_${tableName}_${columns.fields.join("_")}`;
		        }
		        attributesClause += `, CONSTRAINT ${this.quoteIdentifier(indexName)} UNIQUE (${columns.fields.map((field) => this.quoteIdentifier(field)).join(", ")})`;
		      });
		    }
		    if (pkString.length > 0) {
		      attributesClause += `, PRIMARY KEY (${pkString})`;
		    }
		    for (const fkey in foreignKeys) {
		      if (Object.hasOwn(foreignKeys, fkey)) {
		        attributesClause += `, FOREIGN KEY (${this.quoteIdentifier(fkey)}) ${foreignKeys[fkey]}`;
		      }
		    }
		    const quotedTable = this.quoteTable(tableName);
		    return `BEGIN
    DECLARE CONTINUE HANDLER FOR SQLSTATE VALUE '42710'
      BEGIN END;
      CREATE TABLE ${quotedTable} (${attributesClause});
      END`;
		  }
		  dropTableQuery(tableName, options) {
		    if (options) {
		      (0, import_check.rejectInvalidOptions)(
		        "dropTableQuery",
		        this.dialect.name,
		        import_query_generator.DROP_TABLE_QUERY_SUPPORTABLE_OPTIONS,
		        DROP_TABLE_QUERY_SUPPORTED_OPTIONS,
		        options
		      );
		    }
		    return `DROP TABLE IF EXISTS ${this.quoteTable(tableName)}`;
		  }
		  showTablesQuery(schema) {
		    return `SELECT TABLE_NAME FROM SYSIBM.SQLTABLES WHERE TABLE_TYPE = 'TABLE' AND TABLE_SCHEM = ${schema ? `'${schema}'` : "CURRENT SCHEMA"}`;
		  }
		  addColumnQuery(table, key, dataType, options) {
		    if (options) {
		      (0, import_check.rejectInvalidOptions)(
		        "addColumnQuery",
		        this.dialect.name,
		        import_query_generator.ADD_COLUMN_QUERY_SUPPORTABLE_OPTIONS,
		        ADD_COLUMN_QUERY_SUPPORTED_OPTIONS,
		        options
		      );
		    }
		    dataType = {
		      ...dataType,
		      // TODO: attributeToSQL SHOULD be using attributes in addColumnQuery
		      //       but instead we need to pass the key along as the field here
		      field: key,
		      type: (0, import_data_types_utils.normalizeDataType)(dataType.type, this.dialect)
		    };
		    const definition = this.attributeToSQL(dataType, {
		      context: "addColumn",
		      tableName: table,
		      foreignKey: key
		    });
		    return `ALTER TABLE ${this.quoteTable(table)} ADD ${this.quoteIdentifier(key)} ${definition}`;
		  }
		  removeColumnQuery(tableName, attributeName, options) {
		    if (options) {
		      (0, import_check.rejectInvalidOptions)(
		        "removeColumnQuery",
		        this.dialect.name,
		        import_query_generator.REMOVE_COLUMN_QUERY_SUPPORTABLE_OPTIONS,
		        REMOVE_COLUMN_QUERY_SUPPORTED_OPTIONS,
		        options
		      );
		    }
		    return `ALTER TABLE ${this.quoteTable(tableName)} DROP COLUMN ${this.quoteIdentifier(attributeName)}`;
		  }
		  changeColumnQuery(tableName, attributes) {
		    const attrString = [];
		    const constraintString = [];
		    for (const attributeName in attributes) {
		      let definition = attributes[attributeName];
		      if (definition.includes("REFERENCES")) {
		        const attrName = this.quoteIdentifier(attributeName);
		        definition = definition.replace(/.+?(?=REFERENCES)/, "");
		        const foreignKey = this.quoteIdentifier(`${attributeName}`);
		        constraintString.push(`${foreignKey} FOREIGN KEY (${attrName}) ${definition}`);
		      } else {
		        attrString.push(`"${attributeName}" SET DATA TYPE ${definition}`);
		      }
		    }
		    let finalQuery = "";
		    if (attrString.length) {
		      finalQuery += `ALTER COLUMN ${attrString.join(", ")}`;
		      finalQuery += constraintString.length ? " " : "";
		    }
		    if (constraintString.length) {
		      finalQuery += `ADD CONSTRAINT ${constraintString.join(", ")}`;
		    }
		    return `ALTER TABLE ${this.quoteTable(tableName)} ${finalQuery}`;
		  }
		  renameTableQuery(before, after) {
		    return `RENAME TABLE ${this.quoteTable(before)} TO ${this.quoteTable(after)}`;
		  }
		  renameColumnQuery(tableName, attrBefore, attributes) {
		    const attrString = [];
		    for (const attrName in attributes) {
		      const definition = attributes[attrName];
		      attrString.push(`\`${attrBefore}\` \`${attrName}\` ${definition}`);
		    }
		    return `ALTER TABLE ${this.quoteTable(tableName)} RENAME COLUMN ${attrString.join(", ")};`;
		  }
		  /*
		    Returns an add index query.
		    Parameters:
		      - tableName -> Name of an existing table, possibly with schema.
		      - options:
		        - type: UNIQUE|FULLTEXT|SPATIAL
		        - name: The name of the index. Default is <table>_<attr1>_<attr2>
		        - fields: An array of attributes as string or as hash.
		                  If the attribute is a hash, it must have the following content:
		                  - name: The name of the attribute/column
		                  - length: An integer. Optional
		                  - order: 'ASC' or 'DESC'. Optional
		        - parser
		        - using
		        - operator
		        - concurrently: Pass CONCURRENT so other operations run while the index is created
		      - rawTablename, the name of the table, without schema. Used to create the name of the index
		   @private
		  */
		  addIndexQuery(tableName, _attributes, _options, rawTablename) {
		    let options = _options || /* @__PURE__ */ Object.create(null);
		    if (!Array.isArray(_attributes)) {
		      options = _attributes;
		    } else {
		      options.fields = _attributes;
		    }
		    options.prefix = options.prefix || rawTablename || tableName;
		    if (options.prefix && typeof options.prefix === "string") {
		      options.prefix = options.prefix.replaceAll(".", "_");
		    }
		    const fieldsSql = options.fields.map((field) => {
		      if (typeof field === "string") {
		        return this.quoteIdentifier(field);
		      }
		      if (field instanceof import_base_sql_expression.BaseSqlExpression) {
		        return this.formatSqlExpression(field);
		      }
		      let result = "";
		      if (field.attribute) {
		        field.name = field.attribute;
		      }
		      if (!field.name) {
		        throw new Error(`The following index field has no name: ${util.inspect(field)}`);
		      }
		      result += this.quoteIdentifier(field.name);
		      if (this.dialect.supports.index.length && field.length) {
		        result += `(${field.length})`;
		      }
		      if (field.order) {
		        result += ` ${field.order}`;
		      }
		      return result;
		    });
		    if (options.include) {
		      throw new Error(`The include attribute for indexes is not supported by ${this.dialect.name} dialect`);
		    }
		    if (!options.name) {
		      options = (0, import_string.nameIndex)(options, options.prefix);
		    }
		    options = (0, import_model_internals.conformIndex)(options);
		    if (!this.dialect.supports.index.type) {
		      delete options.type;
		    }
		    if (options.where) {
		      options.where = this.whereQuery(options.where);
		    }
		    tableName = this.quoteTable(tableName);
		    let schema;
		    if (typeof options.schema === "string") {
		      schema = this.quoteIdentifiers(options.schema);
		    }
		    if (options.unique) {
		      return `BEGIN
      DECLARE CONTINUE HANDLER FOR SQLSTATE VALUE '42891'
        BEGIN END;
        ALTER TABLE ${tableName} ADD CONSTRAINT ${this.quoteIdentifiers(options.name)} UNIQUE (${fieldsSql.join(", ")}${options.operator ? ` ${options.operator}` : ""})${options.where ? ` ${options.where}` : ""};
      END`;
		    }
		    return `CREATE${options.unique ? " UNIQUE" : ""} INDEX ${schema ? ` ${schema}.` : ""}${this.quoteIdentifiers(options.name)} ON ${tableName} (${fieldsSql.join(", ")}${options.operator ? ` ${options.operator}` : ""})${options.where ? ` ${options.where}` : ""}`;
		  }
		  updateQuery(tableName, attrValueHash, where, options, columnDefinitions) {
		    const out = super.updateQuery(tableName, attrValueHash, where, options, columnDefinitions);
		    out.query = (0, import_string.removeTrailingSemicolon)(out.query);
		    return out;
		  }
		  arithmeticQuery(operator, tableName, where, incrementAmountsByField, extraAttributesToBeUpdated, options) {
		    return (0, import_string.removeTrailingSemicolon)(super.arithmeticQuery(operator, tableName, where, incrementAmountsByField, extraAttributesToBeUpdated, options));
		  }
		  upsertQuery(tableName, insertValues, updateValues, where, model, options) {
		    const aliasTable = `temp_${this.quoteTable(tableName)}`;
		    let query = `MERGE INTO ${this.quoteTable(tableName)} `;
		    const usingClause = `USING (
      SELECT * FROM (${this.quoteTable(tableName)}
      VALUES(42)
      ) AS ${aliasTable}("id") ON (${aliasTable}."id" = ${this.quoteTable(tableName)}."id")`;
		    query += usingClause;
		    query += ` WHEN MATCHED THEN ${this.updateQuery(tableName, tableName, where, options, updateValues)}
    WHEN NOT MATCHED THEN ${this.insertQuery(tableName, insertValues, model, options).sql}`;
		    return query;
		  }
		  insertQuery(table, valueHash, modelAttributes, options) {
		    const query = super.insertQuery(table, valueHash, modelAttributes, options);
		    if (query.query.at(-1) === ";") {
		      query.query = query.query.slice(0, -1);
		      query.query = `SELECT * FROM FINAL TABLE (${query.query})`;
		    }
		    return query;
		  }
		  selectQuery(tableName, options, model) {
		    let query = super.selectQuery(tableName, options, model);
		    if (query.at(-1) === ";") {
		      query = query.slice(0, -1);
		    }
		    return query;
		  }
		  bulkInsertQuery(tableName, fieldValueHashes, options, fieldMappedAttributes) {
		    let query = super.bulkInsertQuery(tableName, fieldValueHashes, options, fieldMappedAttributes);
		    if (query.at(-1) === ";") {
		      query = query.slice(0, -1);
		      query = `SELECT * FROM FINAL TABLE (${query})`;
		    }
		    return query;
		  }
		  truncateTableQuery(tableName) {
		    return `TRUNCATE TABLE ${this.quoteTable(tableName)} IMMEDIATE`;
		  }
		  deleteQuery(tableName, where, options = {}, model) {
		    let query = `DELETE FROM ${this.quoteTable(tableName)}`;
		    const whereSql = this.whereQuery(where, { ...options, model });
		    if (whereSql) {
		      query += ` ${whereSql}`;
		    }
		    if (options.offset || options.limit) {
		      query += this.addLimitAndOffset(options, model);
		    }
		    return query;
		  }
		  /**
		   * Returns an SQL fragment for adding result constraints.
		   *
		   * @param  {object} options An object with selectQuery options.
		   * @returns {string}         The generated sql query.
		   * @private
		   */
		  addLimitAndOffset(options) {
		    let fragment = "";
		    if (options.offset) {
		      fragment += ` OFFSET ${this.escape(options.offset, options)} ROWS`;
		    }
		    if (options.limit) {
		      fragment += ` FETCH NEXT ${this.escape(options.limit, options)} ROWS ONLY`;
		    }
		    return fragment;
		  }
		  // bindParam(bind) {
		  //   return value => {
		  //     bind.push(value);
		  //     return '?';
		  //   };
		  // }
		  attributeToSQL(attribute, options) {
		    if (!_.isPlainObject(attribute)) {
		      attribute = {
		        type: attribute
		      };
		    }
		    const attributeString = attribute.type.toString({ escape: this.escape.bind(this), dialect: this.dialect });
		    let template = attributeString;
		    if (attribute.type instanceof DataTypes.ENUM) {
		      template = attribute.type.toSql({ dialect: this.dialect });
		      if (options && options.context) {
		        template += options.context === "changeColumn" ? " ADD" : "";
		      }
		      template += ` CHECK (${this.quoteIdentifier(attribute.field)} IN(${attribute.type.options.values.map((value) => {
	        return this.escape(value);
	      }).join(", ")}))`;
		    } else {
		      template = (0, import_data_types_utils.attributeTypeToSql)(attribute.type, { dialect: this.dialect });
		    }
		    if (attribute.allowNull === false) {
		      template += " NOT NULL";
		    } else if (attribute.allowNull === true && (options && options.context === "changeColumn")) {
		      template += " DROP NOT NULL";
		    }
		    if (attribute.autoIncrement) {
		      template += " GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1)";
		    }
		    if (!typeWithoutDefault.has(attributeString) && attribute.type._binary !== true && (0, import_query_builder_utils.defaultValueSchemable)(attribute.defaultValue)) {
		      if (attribute.defaultValue === true) {
		        attribute.defaultValue = 1;
		      } else if (attribute.defaultValue === false) {
		        attribute.defaultValue = 0;
		      }
		      template += ` DEFAULT ${this.escape(attribute.defaultValue)}`;
		    }
		    if (attribute.unique === true && !attribute.primaryKey) {
		      template += " UNIQUE";
		    }
		    if (attribute.primaryKey) {
		      template += " PRIMARY KEY";
		    }
		    if (attribute.first) {
		      template += " FIRST";
		    }
		    if (attribute.after) {
		      template += ` AFTER ${this.quoteIdentifier(attribute.after)}`;
		    }
		    if (attribute.references) {
		      if (options && options.context === "addColumn" && options.foreignKey) {
		        const attrName = this.quoteIdentifier(options.foreignKey);
		        const fkName = this.quoteIdentifier(`${options.tableName}_${attrName}_foreign_idx`);
		        template += ` ADD CONSTRAINT ${fkName} FOREIGN KEY (${attrName})`;
		      }
		      template += ` REFERENCES ${this.quoteTable(attribute.references.table)}`;
		      if (attribute.references.key) {
		        template += ` (${this.quoteIdentifier(attribute.references.key)})`;
		      } else {
		        template += ` (${this.quoteIdentifier("id")})`;
		      }
		      if (attribute.onDelete) {
		        template += ` ON DELETE ${attribute.onDelete.toUpperCase()}`;
		      }
		      if (attribute.onUpdate && attribute.onUpdate.toUpperCase() !== "CASCADE") {
		        template += ` ON UPDATE ${attribute.onUpdate.toUpperCase()}`;
		      }
		    }
		    return template;
		  }
		  attributesToSQL(attributes, options) {
		    const result = /* @__PURE__ */ Object.create(null);
		    for (const key of Object.keys(attributes)) {
		      const attribute = {
		        ...attributes[key],
		        field: attributes[key].field || key
		      };
		      result[attribute.field || key] = this.attributeToSQL(attribute, options);
		    }
		    return result;
		  }
		  /**
		   * Generates an SQL query that removes a foreign key from a table.
		   *
		   * @param  {string} tableName  The name of the table.
		   * @param  {string} foreignKey The name of the foreign key constraint.
		   * @returns {string}            The generated sql query.
		   * @private
		   */
		  dropForeignKeyQuery(tableName, foreignKey) {
		    return `ALTER TABLE ${this.quoteTable(tableName)}
      DROP FOREIGN KEY ${this.quoteIdentifier(foreignKey)}`;
		  }
		}
		
		return queryGenerator$2;
	}

	var queryInterface$2;
	var hasRequiredQueryInterface$2;

	function requireQueryInterface$2 () {
		if (hasRequiredQueryInterface$2) return queryInterface$2;
		hasRequiredQueryInterface$2 = 1;
		var __defProp = Object.defineProperty;
		var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
		var __getOwnPropNames = Object.getOwnPropertyNames;
		var __hasOwnProp = Object.prototype.hasOwnProperty;
		var __export = (target, all) => {
		  for (var name in all)
		    __defProp(target, name, { get: all[name], enumerable: true });
		};
		var __copyProps = (to, from, except, desc) => {
		  if (from && typeof from === "object" || typeof from === "function") {
		    for (let key of __getOwnPropNames(from))
		      if (!__hasOwnProp.call(to, key) && key !== except)
		        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
		  }
		  return to;
		};
		var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
		var query_interface_exports = {};
		__export(query_interface_exports, {
		  IBMiQueryInterface: () => IBMiQueryInterface
		});
		queryInterface$2 = __toCommonJS(query_interface_exports);
		const { Transaction } = transaction;
		const { AbstractQueryInterface } = queryInterface$8;
		class IBMiQueryInterface extends AbstractQueryInterface {
		  startTransaction(transaction, options) {
		    if (!(transaction instanceof Transaction)) {
		      throw new TypeError("Unable to start a transaction without transaction object!");
		    }
		    options = { ...options, transaction: transaction.parent || transaction };
		    options.transaction.name = transaction.parent ? transaction.name : void 0;
		    return transaction.getConnection().beginTransaction();
		  }
		  commitTransaction(transaction) {
		    if (!(transaction instanceof Transaction)) {
		      throw new TypeError("Unable to commit a transaction without transaction object!");
		    }
		    if (transaction.parent) {
		      throw new Error("Unable to commit a transaction that has a parent transaction!");
		    }
		    const promise = transaction.getConnection().commit();
		    transaction.finished = "commit";
		    return promise;
		  }
		  rollbackTransaction(transaction, options) {
		    if (!(transaction instanceof Transaction)) {
		      throw new TypeError("Unable to rollback a transaction without transaction object!");
		    }
		    options = {
		      ...options,
		      transaction: transaction.parent || transaction,
		      supportsSearchPath: false,
		      completesTransaction: true
		    };
		    options.transaction.name = transaction.parent ? transaction.name : void 0;
		    const promise = transaction.getConnection().rollback();
		    transaction.finished = "commit";
		    return promise;
		  }
		}
		
		return queryInterface$2;
	}

	var ibmi;
	var hasRequiredIbmi;

	function requireIbmi () {
		if (hasRequiredIbmi) return ibmi;
		hasRequiredIbmi = 1;
		var __create = Object.create;
		var __defProp = Object.defineProperty;
		var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
		var __getOwnPropNames = Object.getOwnPropertyNames;
		var __getProtoOf = Object.getPrototypeOf;
		var __hasOwnProp = Object.prototype.hasOwnProperty;
		var __export = (target, all) => {
		  for (var name in all)
		    __defProp(target, name, { get: all[name], enumerable: true });
		};
		var __copyProps = (to, from, except, desc) => {
		  if (from && typeof from === "object" || typeof from === "function") {
		    for (let key of __getOwnPropNames(from))
		      if (!__hasOwnProp.call(to, key) && key !== except)
		        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
		  }
		  return to;
		};
		var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
		  // If the importer is in node compatibility mode or this is not an ESM
		  // file that has been converted to a CommonJS file using a Babel-
		  // compatible transform (i.e. "__esModule" has not been set), then set
		  // "default" to the CommonJS "module.exports" for node compatibility.
		  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
		  mod
		));
		var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
		var ibmi_exports = {};
		__export(ibmi_exports, {
		  IBMiDialect: () => IBMiDialect
		});
		ibmi = __toCommonJS(ibmi_exports);
		var import_sql = sql;
		var import_abstract = requireAbstract();
		var import_connection_manager = requireConnectionManager$2();
		var DataTypes = __toESM(requireDataTypes$1());
		var import_query = requireQuery$2();
		var import_query_generator = requireQueryGenerator$2();
		var import_query_interface = requireQueryInterface$2();
		class IBMiDialect extends import_abstract.AbstractDialect {
		  static supports = import_abstract.AbstractDialect.extendSupport(
		    {
		      "VALUES ()": true,
		      "ON DUPLICATE KEY": false,
		      transactions: false,
		      bulkDefault: true,
		      index: {
		        using: false,
		        where: true,
		        functionBased: true,
		        collate: false,
		        include: false
		      },
		      constraints: {
		        onUpdate: false
		      },
		      groupedLimit: false,
		      upserts: false,
		      schemas: true,
		      dataTypes: {
		        COLLATE_BINARY: true
		      }
		    }
		  );
		  connectionManager;
		  queryGenerator;
		  queryInterface;
		  dataTypesDocumentationUrl = "https://www.ibm.com/support/knowledgecenter/en/ssw_ibm_i_73/db2/rbafzch2data.htm";
		  defaultVersion = "7.3.0";
		  Query = import_query.IBMiQuery;
		  TICK_CHAR_LEFT = '"';
		  TICK_CHAR_RIGHT = '"';
		  constructor(sequelize) {
		    super(sequelize, DataTypes, "ibmi");
		    this.connectionManager = new import_connection_manager.IBMiConnectionManager(this, sequelize);
		    this.queryGenerator = new import_query_generator.IBMiQueryGenerator({
		      dialect: this,
		      sequelize
		    });
		    this.queryInterface = new import_query_interface.IBMiQueryInterface(this.sequelize, this.queryGenerator);
		  }
		  createBindCollector() {
		    return (0, import_sql.createUnspecifiedOrderedBindCollector)();
		  }
		  escapeBuffer(buffer) {
		    return `BLOB(X'${buffer.toString("hex")}')`;
		  }
		  getDefaultSchema() {
		    return "";
		  }
		  static getDefaultPort() {
		    return 25e3;
		  }
		}
		
		return ibmi;
	}

	var connectionManager$1;
	var hasRequiredConnectionManager$1;

	function requireConnectionManager$1 () {
		if (hasRequiredConnectionManager$1) return connectionManager$1;
		hasRequiredConnectionManager$1 = 1;
		var __create = Object.create;
		var __defProp = Object.defineProperty;
		var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
		var __getOwnPropNames = Object.getOwnPropertyNames;
		var __getProtoOf = Object.getPrototypeOf;
		var __hasOwnProp = Object.prototype.hasOwnProperty;
		var __export = (target, all) => {
		  for (var name in all)
		    __defProp(target, name, { get: all[name], enumerable: true });
		};
		var __copyProps = (to, from, except, desc) => {
		  if (from && typeof from === "object" || typeof from === "function") {
		    for (let key of __getOwnPropNames(from))
		      if (!__hasOwnProp.call(to, key) && key !== except)
		        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
		  }
		  return to;
		};
		var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
		  // If the importer is in node compatibility mode or this is not an ESM
		  // file that has been converted to a CommonJS file using a Babel-
		  // compatible transform (i.e. "__esModule" has not been set), then set
		  // "default" to the CommonJS "module.exports" for node compatibility.
		  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
		  mod
		));
		var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
		var connection_manager_exports = {};
		__export(connection_manager_exports, {
		  Db2ConnectionManager: () => Db2ConnectionManager
		});
		connectionManager$1 = __toCommonJS(connection_manager_exports);
		var import_node_assert = __toESM(require$$0$4);
		var import_node_util = __toESM(require$$0$1);
		var import_errors = errors;
		var import_connection_manager = requireConnectionManager$8();
		class Db2ConnectionManager extends import_connection_manager.AbstractConnectionManager {
		  lib;
		  constructor(dialect, sequelize) {
		    super(dialect, sequelize);
		    this.lib = this._loadDialectModule("ibm_db");
		  }
		  /**
		   * Connect with DB2 database based on config, Handle any errors in connection
		   * Set the pool handlers on connection.error
		   *
		   * @param config
		   * @returns
		   * @private
		   */
		  async connect(config) {
		    const connectionConfig = {
		      // @ts-expect-error -- Bad typings
		      DATABASE: config.database,
		      // @ts-expect-error -- Bad typings
		      HOSTNAME: config.host,
		      // @ts-expect-error -- Bad typings
		      PORT: config.port,
		      // @ts-expect-error -- Bad typings
		      UID: config.username,
		      // @ts-expect-error -- Bad typings
		      PWD: config.password,
		      ...config.ssl ? { SECURITY: config.ssl } : void 0,
		      // TODO: pass this property through dialectOptions
		      // @ts-expect-error -- DB2 specific option that should not be at the top level
		      ...config.sslcertificate ? { SSLServerCertificate: config.ssl } : void 0,
		      ...config.dialectOptions
		    };
		    try {
		      return await new Promise((resolve, reject) => {
		        const connection = new this.lib.Database();
		        connection.lib = this.lib;
		        connection.open(connectionConfig, (error) => {
		          if (error) {
		            if (error.message && error.message.includes("SQL30081N")) {
		              return void reject(new import_errors.ConnectionRefusedError(error));
		            }
		            return void reject(new import_errors.ConnectionError(error));
		          }
		          return void resolve(connection);
		        });
		      });
		    } catch (error) {
		      (0, import_node_assert.default)(error instanceof Error, `DB2 threw a non-error value: ${import_node_util.default.inspect(error)}`);
		      throw new import_errors.ConnectionError(error);
		    }
		  }
		  async disconnect(connection) {
		    if (!connection.connected) {
		      return;
		    }
		    await connection.close();
		  }
		  validate(connection) {
		    return connection.connected;
		  }
		}
		
		return connectionManager$1;
	}

	var query$1;
	var hasRequiredQuery$1;

	function requireQuery$1 () {
		if (hasRequiredQuery$1) return query$1;
		hasRequiredQuery$1 = 1;
		var __create = Object.create;
		var __defProp = Object.defineProperty;
		var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
		var __getOwnPropNames = Object.getOwnPropertyNames;
		var __getProtoOf = Object.getPrototypeOf;
		var __hasOwnProp = Object.prototype.hasOwnProperty;
		var __export = (target, all) => {
		  for (var name in all)
		    __defProp(target, name, { get: all[name], enumerable: true });
		};
		var __copyProps = (to, from, except, desc) => {
		  if (from && typeof from === "object" || typeof from === "function") {
		    for (let key of __getOwnPropNames(from))
		      if (!__hasOwnProp.call(to, key) && key !== except)
		        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
		  }
		  return to;
		};
		var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
		  // If the importer is in node compatibility mode or this is not an ESM
		  // file that has been converted to a CommonJS file using a Babel-
		  // compatible transform (i.e. "__esModule" has not been set), then set
		  // "default" to the CommonJS "module.exports" for node compatibility.
		  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
		  mod
		));
		var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
		var query_exports = {};
		__export(query_exports, {
		  Db2Query: () => Db2Query
		});
		query$1 = __toCommonJS(query_exports);
		var import_node_assert = __toESM(require$$0$4);
		var import_query = requireQuery$8();
		var import_logger = requireLogger();
		const sequelizeErrors = errors;
		const _ = lodashExports;
		const debug = import_logger.logger.debugContext("sql:db2");
		class Db2Query extends import_query.AbstractQuery {
		  getInsertIdField() {
		    return "id";
		  }
		  getSQLTypeFromJsType(value) {
		    if (Buffer.isBuffer(value)) {
		      return { ParamType: "INPUT", DataType: "BLOB", Data: value };
		    }
		    if (typeof value === "bigint") {
		      return value.toString();
		    }
		    return value;
		  }
		  async _run(connection, sql, parameters) {
		    (0, import_node_assert.default)(typeof sql === "string", `sql parameter must be a string`);
		    this.sql = sql;
		    const complete = this._logQuery(sql, debug, parameters);
		    if (this.sql.startsWith("BEGIN TRANSACTION")) {
		      try {
		        await connection.beginTransaction();
		      } catch (error) {
		        throw this.formatError(error);
		      }
		      return this.formatResults();
		    }
		    if (this.sql.startsWith("COMMIT TRANSACTION")) {
		      try {
		        await connection.commitTransaction();
		      } catch (error) {
		        throw this.formatError(error);
		      }
		      return this.formatResults();
		    }
		    if (this.sql.startsWith("ROLLBACK TRANSACTION")) {
		      try {
		        await connection.rollbackTransaction();
		      } catch (error) {
		        throw this.formatError(error);
		      }
		      return this.formatResults();
		    }
		    if (this.sql.startsWith("SAVE TRANSACTION")) {
		      try {
		        await connection.commitTransaction();
		        await connection.beginTransaction();
		      } catch (error) {
		        throw this.formatError(error);
		      }
		      return this.formatResults();
		    }
		    const params = [];
		    if (parameters) {
		      _.forOwn(parameters, (value, key) => {
		        const param = this.getSQLTypeFromJsType(value, key);
		        params.push(param);
		      });
		    }
		    const SQL = this.sql.toUpperCase();
		    let newSql = this.sql;
		    if ((this.isSelectQuery() || SQL.startsWith("SELECT ")) && !SQL.includes(" FROM ", 8)) {
		      if (this.sql.at(-1) === ";") {
		        newSql = this.sql.slice(0, -1);
		      }
		      newSql += " FROM SYSIBM.SYSDUMMY1;";
		    }
		    let stmt;
		    try {
		      stmt = await connection.prepare(newSql);
		    } catch (error) {
		      throw this.formatError(error);
		    }
		    let res;
		    try {
		      res = await this.#execute(stmt, params);
		    } catch (error) {
		      if (error.message) {
		        error = this.filterSQLError(error, this.sql, connection);
		        if (error === null) {
		          stmt.closeSync();
		          return this.formatResults([], 0);
		        }
		      }
		      error.sql = sql;
		      stmt.closeSync();
		      throw this.formatError(error, connection, parameters);
		    }
		    const { result, outparams } = res;
		    complete();
		    if (outparams && this.options.bindParameterOrder && this.options._unsafe_db2Outparams) {
		      for (let i = 0; i < this.options.bindParameterOrder.length; i++) {
		        const paramName = this.options.bindParameterOrder[i];
		        const paramValue = outparams[i];
		        this.options._unsafe_db2Outparams.set(paramName, paramValue);
		      }
		    }
		    let data = [];
		    let metadata = [];
		    let affectedRows = 0;
		    if (typeof result === "object") {
		      if (this.sql.startsWith("DELETE FROM ")) {
		        affectedRows = result.getAffectedRowsSync();
		      } else {
		        data = result.fetchAllSync();
		        metadata = result.getColumnMetadataSync();
		      }
		      result.closeSync();
		    }
		    stmt.closeSync();
		    const datalen = data.length;
		    if (datalen > 0) {
		      const coltypes = {};
		      for (const metadatum of metadata) {
		        coltypes[metadatum.SQL_DESC_NAME] = metadatum.SQL_DESC_TYPE_NAME;
		      }
		      for (let i = 0; i < datalen; i++) {
		        for (const column in data[i]) {
		          const value = data[i][column];
		          if (value === null) {
		            continue;
		          }
		          const parse = this.sequelize.dialect.getParserForDatabaseDataType(coltypes[column]);
		          if (parse) {
		            data[i][column] = parse(value);
		          }
		        }
		      }
		      if (outparams && outparams.length > 0) {
		        data.unshift(outparams);
		      }
		      return this.formatResults(data, datalen, metadata, connection);
		    }
		    return this.formatResults(data, affectedRows);
		  }
		  async run(sql, parameters) {
		    return await this._run(this.connection, sql, parameters);
		  }
		  #execute(stmt, params) {
		    return new Promise((resolve, reject) => {
		      stmt.execute(params, (err, result, outparams) => {
		        if (err) {
		          reject(err);
		        } else {
		          resolve({ result, outparams });
		        }
		      });
		    });
		  }
		  filterSQLError(err, sql, connection) {
		    if (err.message.search("SQL0605W") !== -1) {
		      return null;
		    }
		    return err;
		  }
		  /**
		   * High level function that handles the results of a query execution.
		   *
		   *
		   * Example:
		   *  query.formatResults([
		   *    {
		   *      id: 1,              // this is from the main table
		   *      attr2: 'snafu',     // this is from the main table
		   *      Tasks.id: 1,        // this is from the associated table
		   *      Tasks.title: 'task' // this is from the associated table
		   *    }
		   *  ])
		   *
		   * @param {Array} data - The result of the query execution.
		   * @param {Integer} rowCount - The number of affected rows.
		   * @param {Array} metadata - Metadata of the returned result set.
		   * @param {object} conn - The connection object.
		   * @private
		   */
		  formatResults(data, rowCount, metadata, conn) {
		    let result = this.instance;
		    if (this.isInsertQuery(data, metadata)) {
		      this.handleInsertQuery(data, metadata);
		      if (!this.instance) {
		        if (this.options.plain) {
		          const record = data[0];
		          result = record[Object.keys(record)[0]];
		        } else {
		          result = data;
		        }
		      }
		    }
		    if (this.isShowTablesQuery()) {
		      result = data;
		    } else if (this.isDescribeQuery()) {
		      result = {};
		      for (const _result of data) {
		        if (_result.Default) {
		          _result.Default = _result.Default.replace("('", "").replace("')", "").replaceAll("'", "");
		        }
		        result[_result.Name] = {
		          type: _result.Type.toUpperCase(),
		          allowNull: _result.IsNull === "Y",
		          defaultValue: _result.Default,
		          primaryKey: _result.KeySeq > 0,
		          autoIncrement: _result.IsIdentity === "Y",
		          comment: _result.Comment
		        };
		      }
		    } else if (this.isShowIndexesQuery()) {
		      result = this.handleShowIndexesQuery(data);
		    } else if (this.isSelectQuery()) {
		      result = this.handleSelectQuery(data);
		    } else if (this.isUpsertQuery()) {
		      result = data;
		    } else if (this.isDropSchemaQuery()) {
		      result = data[0];
		      if (conn) {
		        const query = "DROP TABLE ERRORSCHEMA.ERRORTABLE";
		        conn.querySync(query);
		      }
		    } else if (this.isCallQuery()) {
		      result = data;
		    } else if (this.isBulkUpdateQuery()) {
		      result = data.length;
		    } else if (this.isBulkDeleteQuery()) {
		      result = rowCount;
		    } else if (this.isForeignKeysQuery()) {
		      result = data;
		    } else if (this.isInsertQuery() || this.isUpdateQuery()) {
		      result = [result, rowCount];
		    } else if (this.isShowConstraintsQuery()) {
		      result = data;
		    } else if (this.isRawQuery()) {
		      result = [data, metadata];
		    } else {
		      result = data;
		    }
		    return result;
		  }
		  handleShowTablesQuery(results) {
		    return results.map((resultSet) => {
		      return {
		        tableName: resultSet.TABLE_NAME,
		        schema: resultSet.TABLE_SCHEMA
		      };
		    });
		  }
		  formatError(err, conn, parameters) {
		    let match;
		    if (!(err && err.message)) {
		      err.message = "No error message found.";
		    }
		    match = err.message.match(/SQL0803N {2}One or more values in the INSERT statement, UPDATE statement, or foreign key update caused by a DELETE statement are not valid because the primary key, unique constraint or unique index identified by "(\d)+" constrains table "(.*)\.(.*)" from having duplicate values for the index key./);
		    if (match && match.length > 0) {
		      let uniqueIndexName = "";
		      let uniqueKey = "";
		      const fields = {};
		      let message = err.message;
		      const query = `SELECT INDNAME FROM SYSCAT.INDEXES  WHERE IID = ${match[1]} AND TABSCHEMA = '${match[2]}' AND TABNAME = '${match[3]}'`;
		      if (Boolean(conn) && match.length > 3) {
		        uniqueIndexName = conn.querySync(query);
		        uniqueIndexName = uniqueIndexName[0].INDNAME;
		      }
		      if (this.model && Boolean(uniqueIndexName)) {
		        uniqueKey = this.model.getIndexes().find((index) => index.unique && index.name === uniqueIndexName);
		      }
		      if (!uniqueKey && this.options.fields) {
		        uniqueKey = this.options.fields[match[1] - 1];
		      }
		      if (uniqueKey) {
		        if (this.options.where && this.options.where[uniqueKey.column] !== void 0) {
		          fields[uniqueKey.column] = this.options.where[uniqueKey.column];
		        } else if (this.options.instance && this.options.instance.dataValues && this.options.instance.dataValues[uniqueKey.column]) {
		          fields[uniqueKey.column] = this.options.instance.dataValues[uniqueKey.column];
		        } else if (parameters) {
		          fields[uniqueKey.column] = parameters["0"];
		        }
		      }
		      if (uniqueKey && Boolean(uniqueKey.msg)) {
		        message = uniqueKey.msg;
		      }
		      const errors = [];
		      _.forOwn(fields, (value, field) => {
		        errors.push(new sequelizeErrors.ValidationErrorItem(
		          this.getUniqueConstraintErrorMessage(field),
		          "unique violation",
		          // sequelizeErrors.ValidationErrorItem.Origins.DB,
		          field,
		          value,
		          this.instance,
		          "not_unique"
		        ));
		      });
		      return new sequelizeErrors.UniqueConstraintError({ message, errors, cause: err, fields });
		    }
		    match = err.message.match(/SQL0532N {2}A parent row cannot be deleted because the relationship "(.*)" restricts the deletion/) || err.message.match(/SQL0530N/) || err.message.match(/SQL0531N/);
		    if (match && match.length > 0) {
		      return new sequelizeErrors.ForeignKeyConstraintError({
		        fields: null,
		        index: match[1],
		        cause: err
		      });
		    }
		    match = err.message.match(/SQL0204N {2}"(.*)" is an undefined name./);
		    if (match && match.length > 1) {
		      const constraint = match[1];
		      let table = err.sql.match(/table "(.+?)"/i);
		      table = table ? table[1] : void 0;
		      return new sequelizeErrors.UnknownConstraintError({
		        message: match[0],
		        constraint,
		        table,
		        cause: err
		      });
		    }
		    return new sequelizeErrors.DatabaseError(err);
		  }
		  isDropSchemaQuery() {
		    let result = false;
		    if (this.sql.startsWith("CALL SYSPROC.ADMIN_DROP_SCHEMA")) {
		      result = true;
		    }
		    return result;
		  }
		  isShowOrDescribeQuery() {
		    let result = false;
		    result = result || this.sql.toLowerCase().startsWith("select c.column_name as 'name', c.data_type as 'type', c.is_nullable as 'isnull'");
		    result = result || this.sql.toLowerCase().startsWith("select tablename = t.name, name = ind.name,");
		    result = result || this.sql.toLowerCase().startsWith("exec sys.sp_helpindex @objname");
		    return result;
		  }
		  handleShowIndexesQuery(data) {
		    const indexes = data.reduce((acc, curr) => {
		      if (acc.has(curr.name)) {
		        const index = acc.get(curr.name);
		        if (curr.columnOrder === "I") {
		          index.includes.push(curr.columnName);
		        } else {
		          index.fields.push({
		            attribute: curr.columnName,
		            length: void 0,
		            order: curr.columnOrder === "D" ? "DESC" : curr.columnOrder === "A" ? "ASC" : void 0,
		            collate: void 0
		          });
		        }
		        return acc;
		      }
		      acc.set(curr.name, {
		        primary: curr.keyType === "P",
		        fields: curr.columnOrder === "I" ? [] : [{
		          attribute: curr.columnName,
		          length: void 0,
		          order: curr.columnOrder === "D" ? "DESC" : "ASC",
		          collate: void 0
		        }],
		        includes: curr.columnOrder === "I" ? [curr.columnName] : [],
		        name: curr.name,
		        tableName: curr.tableName,
		        unique: curr.keyType === "U",
		        type: curr.type
		      });
		      return acc;
		    }, /* @__PURE__ */ new Map());
		    return Array.from(indexes.values());
		  }
		  handleInsertQuery(results, metaData) {
		    if (!this.instance) {
		      return;
		    }
		    const modelDefinition = this.model.modelDefinition;
		    if (!modelDefinition.autoIncrementAttributeName) {
		      return;
		    }
		    const autoIncrementAttribute = modelDefinition.attributes.get(modelDefinition.autoIncrementAttributeName);
		    const id = (results == null ? void 0 : results[0][this.getInsertIdField()]) ?? (metaData == null ? void 0 : metaData[this.getInsertIdField()]) ?? (results == null ? void 0 : results[0][autoIncrementAttribute.columnName]);
		    this.instance[autoIncrementAttribute.attributeName] = id;
		  }
		}
		
		return query$1;
	}

	var queryGeneratorTypescript$1;
	var hasRequiredQueryGeneratorTypescript$1;

	function requireQueryGeneratorTypescript$1 () {
		if (hasRequiredQueryGeneratorTypescript$1) return queryGeneratorTypescript$1;
		hasRequiredQueryGeneratorTypescript$1 = 1;
		var __defProp = Object.defineProperty;
		var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
		var __getOwnPropNames = Object.getOwnPropertyNames;
		var __hasOwnProp = Object.prototype.hasOwnProperty;
		var __export = (target, all) => {
		  for (var name in all)
		    __defProp(target, name, { get: all[name], enumerable: true });
		};
		var __copyProps = (to, from, except, desc) => {
		  if (from && typeof from === "object" || typeof from === "function") {
		    for (let key of __getOwnPropNames(from))
		      if (!__hasOwnProp.call(to, key) && key !== except)
		        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
		  }
		  return to;
		};
		var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
		var query_generator_typescript_exports = {};
		__export(query_generator_typescript_exports, {
		  Db2QueryGeneratorTypeScript: () => Db2QueryGeneratorTypeScript
		});
		queryGeneratorTypescript$1 = __toCommonJS(query_generator_typescript_exports);
		var import_check = requireCheck();
		var import_join_sql_fragments = joinSqlFragments;
		var import_string = string$2;
		var import_query_generator = requireQueryGenerator$8();
		var import_query_generator_typescript = requireQueryGeneratorTypescript$8();
		const REMOVE_INDEX_QUERY_SUPPORTED_OPTIONS = /* @__PURE__ */ new Set();
		class Db2QueryGeneratorTypeScript extends import_query_generator.AbstractQueryGenerator {
		  describeTableQuery(tableName) {
		    const table = this.extractTableDetails(tableName);
		    return (0, import_join_sql_fragments.joinSQLFragments)([
		      'SELECT NAME AS "Name", TBNAME AS "Table", TBCREATOR AS "Schema",',
		      'TRIM(COLTYPE) AS "Type", LENGTH AS "Length", SCALE AS "Scale",',
		      'NULLS AS "IsNull", DEFAULT AS "Default", COLNO AS "Colno",',
		      'IDENTITY AS "IsIdentity", KEYSEQ AS "KeySeq", REMARKS AS "Comment"',
		      "FROM",
		      "SYSIBM.SYSCOLUMNS",
		      `WHERE TBNAME = ${this.escape(table.tableName)}`,
		      "AND TBCREATOR =",
		      table.schema ? this.escape(table.schema) : "USER",
		      ";"
		    ]);
		  }
		  showConstraintsQuery(tableName, options) {
		    const table = this.extractTableDetails(tableName);
		    return (0, import_join_sql_fragments.joinSQLFragments)([
		      'SELECT c.TABSCHEMA AS "constraintSchema",',
		      'c.CONSTNAME AS "constraintName",',
		      `CASE c.TYPE WHEN 'P' THEN 'PRIMARY KEY' WHEN 'F' THEN 'FOREIGN KEY' WHEN 'K' THEN 'CHECK' WHEN 'U' THEN 'UNIQUE' ELSE NULL END AS "constraintType",`,
		      'c.TABSCHEMA AS "tableSchema",',
		      'c.TABNAME AS "tableName",',
		      'k.COLNAME AS "columnNames",',
		      'r.REFTABSCHEMA AS "referencedTableSchema",',
		      'r.REFTABNAME AS "referencedTableName",',
		      'fk.COLNAME AS "referencedColumnNames",',
		      `CASE r.DELETERULE WHEN 'A' THEN 'NO ACTION' WHEN 'C' THEN 'CASCADE' WHEN 'N' THEN 'SET NULL' WHEN 'R' THEN 'RESTRICT' ELSE NULL END AS "deleteRule",`,
		      `CASE r.UPDATERULE WHEN 'A' THEN 'NO ACTION' WHEN 'R' THEN 'RESTRICT' ELSE NULL END AS "updateRule",`,
		      'ck.TEXT AS "definition"',
		      "FROM SYSCAT.TABCONST c",
		      "LEFT JOIN SYSCAT.REFERENCES r ON c.CONSTNAME = r.CONSTNAME AND c.TABNAME = r.TABNAME AND c.TABSCHEMA = r.TABSCHEMA",
		      "LEFT JOIN SYSCAT.KEYCOLUSE k ON r.CONSTNAME = k.CONSTNAME AND r.TABNAME = k.TABNAME AND r.TABSCHEMA = k.TABSCHEMA",
		      "LEFT JOIN SYSCAT.KEYCOLUSE fk ON r.REFKEYNAME = fk.CONSTNAME",
		      "LEFT JOIN SYSCAT.CHECKS ck ON c.CONSTNAME = ck.CONSTNAME AND c.TABNAME = ck.TABNAME AND c.TABSCHEMA = ck.TABSCHEMA",
		      `WHERE c.TABNAME = ${this.escape(table.tableName)}`,
		      "AND c.TABSCHEMA =",
		      table.schema ? this.escape(table.schema) : "USER",
		      (options == null ? void 0 : options.constraintName) ? `AND c.CONSTNAME = ${this.escape(options.constraintName)}` : "",
		      "ORDER BY c.CONSTNAME"
		    ]);
		  }
		  showIndexesQuery(tableName) {
		    const table = this.extractTableDetails(tableName);
		    return (0, import_join_sql_fragments.joinSQLFragments)([
		      "SELECT",
		      'i.INDNAME AS "name",',
		      'i.TABNAME AS "tableName",',
		      'i.UNIQUERULE AS "keyType",',
		      'i.INDEXTYPE AS "type",',
		      'c.COLNAME AS "columnName",',
		      'c.COLORDER AS "columnOrder"',
		      "FROM SYSCAT.INDEXES i",
		      "INNER JOIN SYSCAT.INDEXCOLUSE c ON i.INDNAME = c.INDNAME AND i.INDSCHEMA = c.INDSCHEMA",
		      `WHERE TABNAME = ${this.escape(table.tableName)}`,
		      "AND TABSCHEMA =",
		      table.schema ? this.escape(table.schema) : "USER",
		      "ORDER BY i.INDNAME, c.COLSEQ;"
		    ]);
		  }
		  removeIndexQuery(tableName, indexNameOrAttributes, options) {
		    if (options) {
		      (0, import_check.rejectInvalidOptions)(
		        "removeIndexQuery",
		        this.dialect.name,
		        import_query_generator_typescript.REMOVE_INDEX_QUERY_SUPPORTABLE_OPTIONS,
		        REMOVE_INDEX_QUERY_SUPPORTED_OPTIONS,
		        options
		      );
		    }
		    let indexName;
		    if (Array.isArray(indexNameOrAttributes)) {
		      const table = this.extractTableDetails(tableName);
		      indexName = (0, import_string.generateIndexName)(table, { fields: indexNameOrAttributes });
		    } else {
		      indexName = indexNameOrAttributes;
		    }
		    return `DROP INDEX ${this.quoteIdentifier(indexName)}`;
		  }
		  getForeignKeyQuery(tableName, columnName) {
		    const table = this.extractTableDetails(tableName);
		    return (0, import_join_sql_fragments.joinSQLFragments)([
		      'SELECT R.CONSTNAME AS "constraintName",',
		      'TRIM(R.TABSCHEMA) AS "constraintSchema",',
		      'R.TABNAME AS "tableName",',
		      `TRIM(R.TABSCHEMA) AS "tableSchema", LISTAGG(C.COLNAME,', ')`,
		      'WITHIN GROUP (ORDER BY C.COLNAME) AS "columnName",',
		      'TRIM(R.REFTABSCHEMA) AS "referencedTableSchema",',
		      'R.REFTABNAME AS "referencedTableName",',
		      'TRIM(R.PK_COLNAMES) AS "referencedColumnName"',
		      "FROM SYSCAT.REFERENCES R, SYSCAT.KEYCOLUSE C",
		      "WHERE R.CONSTNAME = C.CONSTNAME AND R.TABSCHEMA = C.TABSCHEMA",
		      "AND R.TABNAME = C.TABNAME",
		      `AND R.TABNAME = ${this.escape(table.tableName)}`,
		      "AND R.TABSCHEMA =",
		      table.schema ? this.escape(table.schema) : "CURRENT SCHEMA",
		      columnName && `AND C.COLNAME = ${this.escape(columnName)}`,
		      "GROUP BY R.REFTABSCHEMA,",
		      "R.REFTABNAME, R.TABSCHEMA, R.TABNAME, R.CONSTNAME, R.PK_COLNAMES"
		    ]);
		  }
		  versionQuery() {
		    return 'select service_level as "version" from TABLE (sysproc.env_get_inst_info()) as A';
		  }
		}
		
		return queryGeneratorTypescript$1;
	}

	var queryGenerator$1;
	var hasRequiredQueryGenerator$1;

	function requireQueryGenerator$1 () {
		if (hasRequiredQueryGenerator$1) return queryGenerator$1;
		hasRequiredQueryGenerator$1 = 1;
		var __defProp = Object.defineProperty;
		var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
		var __getOwnPropNames = Object.getOwnPropertyNames;
		var __hasOwnProp = Object.prototype.hasOwnProperty;
		var __export = (target, all) => {
		  for (var name in all)
		    __defProp(target, name, { get: all[name], enumerable: true });
		};
		var __copyProps = (to, from, except, desc) => {
		  if (from && typeof from === "object" || typeof from === "function") {
		    for (let key of __getOwnPropNames(from))
		      if (!__hasOwnProp.call(to, key) && key !== except)
		        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
		  }
		  return to;
		};
		var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
		var query_generator_exports = {};
		__export(query_generator_exports, {
		  Db2QueryGenerator: () => Db2QueryGenerator
		});
		queryGenerator$1 = __toCommonJS(query_generator_exports);
		var import_check = requireCheck();
		var import_format = requireFormat();
		var import_string = string$2;
		var import_query_builder_utils = requireQueryBuilderUtils();
		var import_data_types_utils = requireDataTypesUtils();
		var import_query_generator = requireQueryGenerator$8();
		var import_query_generator_typescript = requireQueryGeneratorTypescript$1();
		const _ = lodashExports;
		const DataTypes = dataTypes$8;
		const randomBytes = require$$0$3.randomBytes;
		const { Op } = operators;
		const CREATE_SCHEMA_QUERY_SUPPORTED_OPTIONS = /* @__PURE__ */ new Set();
		const ADD_COLUMN_QUERY_SUPPORTED_OPTIONS = /* @__PURE__ */ new Set();
		const REMOVE_COLUMN_QUERY_SUPPORTED_OPTIONS = /* @__PURE__ */ new Set();
		const CREATE_TABLE_QUERY_SUPPORTED_OPTIONS = /* @__PURE__ */ new Set(["uniqueKeys"]);
		function throwMethodUndefined(methodName) {
		  throw new Error(`The method "${methodName}" is not defined! Please add it to your sql dialect.`);
		}
		class Db2QueryGenerator extends import_query_generator_typescript.Db2QueryGeneratorTypeScript {
		  constructor(options) {
		    super(options);
		    this.whereSqlBuilder.setOperatorKeyword(Op.regexp, "REGEXP_LIKE");
		    this.whereSqlBuilder.setOperatorKeyword(Op.notRegexp, "NOT REGEXP_LIKE");
		    this.autoGenValue = 1;
		  }
		  createSchemaQuery(schema, options) {
		    if (options) {
		      (0, import_check.rejectInvalidOptions)(
		        "createSchemaQuery",
		        this.dialect.name,
		        import_query_generator.CREATE_SCHEMA_QUERY_SUPPORTABLE_OPTIONS,
		        CREATE_SCHEMA_QUERY_SUPPORTED_OPTIONS,
		        options
		      );
		    }
		    return `CREATE SCHEMA ${this.quoteIdentifier(schema)};`;
		  }
		  _errorTableCount = 0;
		  dropSchemaQuery(schema) {
		    const query = `CALL SYSPROC.ADMIN_DROP_SCHEMA(${this.escape(schema.trim())}, NULL, $sequelize_errorSchema, $sequelize_errorTable)`;
		    if (this._errorTableCount >= Number.MAX_SAFE_INTEGER) {
		      this._errorTableCount = 0;
		    }
		    return {
		      query,
		      bind: {
		        sequelize_errorSchema: { ParamType: "INOUT", Data: "ERRORSCHEMA" },
		        sequelize_errorTable: { ParamType: "INOUT", Data: `ERRORTABLE${this._errorTableCount++}` }
		      }
		    };
		  }
		  listSchemasQuery(options) {
		    const schemasToSkip = ["NULLID", "SQLJ", "ERRORSCHEMA"];
		    if (options == null ? void 0 : options.skip) {
		      schemasToSkip.push(...options.skip);
		    }
		    return `SELECT SCHEMANAME AS "schema_name" FROM SYSCAT.SCHEMATA WHERE (SCHEMANAME NOT LIKE 'SYS%') AND SCHEMANAME NOT IN (${schemasToSkip.map((schema) => this.escape(schema)).join(", ")});`;
		  }
		  createTableQuery(tableName, attributes, options) {
		    if (options) {
		      (0, import_check.rejectInvalidOptions)(
		        "createTableQuery",
		        this.dialect.name,
		        import_query_generator.CREATE_TABLE_QUERY_SUPPORTABLE_OPTIONS,
		        CREATE_TABLE_QUERY_SUPPORTED_OPTIONS,
		        options
		      );
		    }
		    const query = "CREATE TABLE IF NOT EXISTS <%= table %> (<%= attributes %>)";
		    const primaryKeys = [];
		    const foreignKeys = {};
		    const attrStr = [];
		    const commentTemplate = " -- <%= comment %>, TableName = <%= table %>, ColumnName = <%= column %>;";
		    let commentStr = "";
		    for (const attr in attributes) {
		      if (Object.hasOwn(attributes, attr)) {
		        let dataType = attributes[attr];
		        let match;
		        if (dataType.includes("COMMENT ")) {
		          const commentMatch = dataType.match(/^(.+) (COMMENT.*)$/);
		          if (commentMatch && commentMatch.length > 2) {
		            const commentText = commentMatch[2].replace(/COMMENT/, "").trim();
		            commentStr += _.template(commentTemplate, this._templateSettings)({
		              table: this.quoteTable(tableName),
		              comment: this.escape(commentText),
		              column: this.quoteIdentifier(attr)
		            });
		            dataType = commentMatch[1];
		          }
		        }
		        if (_.includes(dataType, "PRIMARY KEY")) {
		          primaryKeys.push(attr);
		          if (_.includes(dataType, "REFERENCES")) {
		            match = dataType.match(/^(.+) (REFERENCES.*)$/);
		            attrStr.push(`${this.quoteIdentifier(attr)} ${match[1].replace(/PRIMARY KEY/, "")}`);
		            foreignKeys[attr] = match[2];
		          } else {
		            attrStr.push(`${this.quoteIdentifier(attr)} ${dataType.replace(/PRIMARY KEY/, "")}`);
		          }
		        } else if (_.includes(dataType, "REFERENCES")) {
		          match = dataType.match(/^(.+) (REFERENCES.*)$/);
		          attrStr.push(`${this.quoteIdentifier(attr)} ${match[1]}`);
		          foreignKeys[attr] = match[2];
		        } else {
		          if (options && options.uniqueKeys) {
		            for (const ukey in options.uniqueKeys) {
		              if (options.uniqueKeys[ukey].fields.includes(attr) && !_.includes(dataType, "NOT NULL")) {
		                dataType += " NOT NULL";
		                break;
		              }
		            }
		          }
		          attrStr.push(`${this.quoteIdentifier(attr)} ${dataType}`);
		        }
		      }
		    }
		    const values = {
		      table: this.quoteTable(tableName),
		      attributes: attrStr.join(", ")
		    };
		    const pkString = primaryKeys.map((pk) => {
		      return this.quoteIdentifier(pk);
		    }).join(", ");
		    if (options && options.uniqueKeys) {
		      _.each(options.uniqueKeys, (columns, indexName) => {
		        if (!_.isString(indexName)) {
		          indexName = `uniq_${tableName}_${columns.fields.join("_")}`;
		        }
		        values.attributes += `, CONSTRAINT ${this.quoteIdentifier(indexName)} UNIQUE (${columns.fields.map((field) => this.quoteIdentifier(field)).join(", ")})`;
		      });
		    }
		    if (pkString.length > 0) {
		      values.attributes += `, PRIMARY KEY (${pkString})`;
		    }
		    for (const fkey in foreignKeys) {
		      if (Object.hasOwn(foreignKeys, fkey)) {
		        values.attributes += `, FOREIGN KEY (${this.quoteIdentifier(fkey)}) ${foreignKeys[fkey]}`;
		      }
		    }
		    return `${_.template(query, this._templateSettings)(values).trim()};${commentStr}`;
		  }
		  renameTableQuery(before, after) {
		    const query = "RENAME TABLE <%= before %> TO <%= after %>;";
		    return _.template(query, this._templateSettings)({
		      before: this.quoteTable(before),
		      after: this.quoteTable(after)
		    });
		  }
		  showTablesQuery() {
		    return `SELECT TABNAME AS "tableName", TRIM(TABSCHEMA) AS "tableSchema" FROM SYSCAT.TABLES WHERE TABSCHEMA = USER AND TYPE = 'T' ORDER BY TABSCHEMA, TABNAME`;
		  }
		  tableExistsQuery(table) {
		    const tableName = table.tableName || table;
		    const schemaName = table.schema || this.sequelize.config.username.toUpperCase();
		    return `SELECT name FROM sysibm.systables WHERE NAME = ${this.escape(tableName)} AND CREATOR = ${this.escape(schemaName)}`;
		  }
		  addColumnQuery(table, key, dataType, options) {
		    if (options) {
		      (0, import_check.rejectInvalidOptions)(
		        "addColumnQuery",
		        this.dialect.name,
		        import_query_generator.ADD_COLUMN_QUERY_SUPPORTABLE_OPTIONS,
		        ADD_COLUMN_QUERY_SUPPORTED_OPTIONS,
		        options
		      );
		    }
		    dataType = {
		      ...dataType,
		      // TODO: attributeToSQL SHOULD be using attributes in addColumnQuery
		      //       but instead we need to pass the key along as the field here
		      field: key,
		      type: (0, import_data_types_utils.normalizeDataType)(dataType.type, this.dialect)
		    };
		    const query = "ALTER TABLE <%= table %> ADD <%= attribute %>;";
		    const attribute = _.template("<%= key %> <%= definition %>", this._templateSettings)({
		      key: this.quoteIdentifier(key),
		      definition: this.attributeToSQL(dataType, {
		        context: "addColumn"
		      })
		    });
		    return _.template(query, this._templateSettings)({
		      table: this.quoteTable(table),
		      attribute
		    });
		  }
		  removeColumnQuery(tableName, attributeName, options) {
		    if (options) {
		      (0, import_check.rejectInvalidOptions)(
		        "removeColumnQuery",
		        this.dialect.name,
		        import_query_generator.REMOVE_COLUMN_QUERY_SUPPORTABLE_OPTIONS,
		        REMOVE_COLUMN_QUERY_SUPPORTED_OPTIONS,
		        options
		      );
		    }
		    const query = "ALTER TABLE <%= tableName %> DROP COLUMN <%= attributeName %>;";
		    return _.template(query, this._templateSettings)({
		      tableName: this.quoteTable(tableName),
		      attributeName: this.quoteIdentifier(attributeName)
		    });
		  }
		  changeColumnQuery(tableName, attributes) {
		    const query = "ALTER TABLE <%= tableName %> <%= query %>;";
		    const attrString = [];
		    const constraintString = [];
		    for (const attributeName in attributes) {
		      const attrValue = attributes[attributeName];
		      let defs = [attrValue];
		      if (Array.isArray(attrValue)) {
		        defs = attrValue;
		      }
		      for (const definition of defs) {
		        if (/REFERENCES/.test(definition)) {
		          constraintString.push(_.template("<%= fkName %> FOREIGN KEY (<%= attrName %>) <%= definition %>", this._templateSettings)({
		            fkName: this.quoteIdentifier(`${attributeName}_foreign_idx`),
		            attrName: this.quoteIdentifier(attributeName),
		            definition: definition.replace(/.+?(?=REFERENCES)/, "")
		          }));
		        } else if (_.startsWith(definition, "DROP ")) {
		          attrString.push(_.template("<%= attrName %> <%= definition %>", this._templateSettings)({
		            attrName: this.quoteIdentifier(attributeName),
		            definition
		          }));
		        } else {
		          attrString.push(_.template("<%= attrName %> SET <%= definition %>", this._templateSettings)({
		            attrName: this.quoteIdentifier(attributeName),
		            definition
		          }));
		        }
		      }
		    }
		    let finalQuery = "";
		    if (attrString.length > 0) {
		      finalQuery += `ALTER COLUMN ${attrString.join(" ALTER COLUMN ")}`;
		      finalQuery += constraintString.length > 0 ? " " : "";
		    }
		    if (constraintString.length > 0) {
		      finalQuery += `ADD CONSTRAINT ${constraintString.join(" ADD CONSTRAINT ")}`;
		    }
		    return _.template(query, this._templateSettings)({
		      tableName: this.quoteTable(tableName),
		      query: finalQuery
		    });
		  }
		  renameColumnQuery(tableName, attrBefore, attributes) {
		    const query = "ALTER TABLE <%= tableName %> RENAME COLUMN <%= before %> TO <%= after %>;";
		    const newName = Object.keys(attributes)[0];
		    return _.template(query, this._templateSettings)({
		      tableName: this.quoteTable(tableName),
		      before: this.quoteIdentifier(attrBefore),
		      after: this.quoteIdentifier(newName)
		    });
		  }
		  bulkInsertQuery(tableName, attrValueHashes, options, attributes) {
		    options = options || {};
		    attributes = attributes || {};
		    let query = "INSERT INTO <%= table %> (<%= attributes %>)<%= output %> VALUES <%= tuples %>;";
		    if (options.returning) {
		      query = "SELECT * FROM FINAL TABLE (INSERT INTO <%= table %> (<%= attributes %>)<%= output %> VALUES <%= tuples %>);";
		    }
		    const emptyQuery = "INSERT INTO <%= table %>";
		    const tuples = [];
		    const allAttributes = [];
		    const allQueries = [];
		    let outputFragment;
		    const valuesForEmptyQuery = [];
		    if (options.returning) {
		      outputFragment = "";
		    }
		    _.forEach(attrValueHashes, (attrValueHash) => {
		      const fields = Object.keys(attrValueHash);
		      const firstAttr = attributes[fields[0]];
		      if (fields.length === 1 && firstAttr && firstAttr.autoIncrement && attrValueHash[fields[0]] === null) {
		        valuesForEmptyQuery.push(`(${this.autoGenValue++})`);
		        return;
		      }
		      _.forOwn(attrValueHash, (value, key) => {
		        if (!allAttributes.includes(key)) {
		          if (value === null && attributes[key] && attributes[key].autoIncrement) {
		            return;
		          }
		          allAttributes.push(key);
		        }
		      });
		    });
		    if (valuesForEmptyQuery.length > 0) {
		      allQueries.push(`${emptyQuery} VALUES ${valuesForEmptyQuery.join(",")}`);
		    }
		    if (allAttributes.length > 0) {
		      _.forEach(attrValueHashes, (attrValueHash) => {
		        tuples.push(`(${// TODO: pass type of attribute & model
	        allAttributes.map((key) => this.escape(attrValueHash[key] ?? null, { replacements: options.replacements })).join(",")})`);
		      });
		      allQueries.push(query);
		    }
		    const replacements = {
		      table: this.quoteTable(tableName),
		      attributes: allAttributes.map((attr) => this.quoteIdentifier(attr)).join(","),
		      tuples,
		      output: outputFragment
		    };
		    const generatedQuery = _.template(allQueries.join(";"), this._templateSettings)(replacements);
		    return generatedQuery;
		  }
		  updateQuery(tableName, attrValueHash, where, options, attributes) {
		    var _a;
		    const sql = super.updateQuery(tableName, attrValueHash, where, options, attributes);
		    options = options || {};
		    _.defaults(options, this.options);
		    if (!options.limit) {
		      sql.query = `SELECT * FROM FINAL TABLE (${(0, import_string.removeTrailingSemicolon)(sql.query)});`;
		      return sql;
		    }
		    attrValueHash = (0, import_format.removeNullishValuesFromHash)(attrValueHash, options.omitNull, options);
		    const modelAttributeMap = {};
		    const values = [];
		    const bind = {};
		    const bindParam = options.bindParam || this.bindParam(bind);
		    if (attributes) {
		      _.each(attributes, (attribute, key) => {
		        modelAttributeMap[key] = attribute;
		        if (attribute.field) {
		          modelAttributeMap[attribute.field] = attribute;
		        }
		      });
		    }
		    for (const key in attrValueHash) {
		      const value = attrValueHash[key] ?? null;
		      const escapedValue = this.escape(value, {
		        // TODO: pass model
		        type: (_a = modelAttributeMap[key]) == null ? void 0 : _a.type,
		        replacements: options.replacements,
		        bindParam
		      });
		      values.push(`${this.quoteIdentifier(key)}=${escapedValue}`);
		    }
		    let query;
		    const whereOptions = _.defaults({ bindParam }, options);
		    query = `UPDATE (SELECT * FROM ${this.quoteTable(tableName)} ${this.whereQuery(where, whereOptions)} FETCH NEXT ${this.escape(options.limit, void 0, { replacements: options.replacements })} ROWS ONLY) SET ${values.join(",")}`;
		    query = `SELECT * FROM FINAL TABLE (${query});`;
		    return { query, bind };
		  }
		  upsertQuery(tableName, insertValues, updateValues, where, model, options) {
		    const targetTableAlias = this.quoteTable(`${tableName}_target`);
		    const sourceTableAlias = this.quoteTable(`${tableName}_source`);
		    const primaryKeysColumns = [];
		    const identityColumns = [];
		    const uniqueAttrs = [];
		    const tableNameQuoted = this.quoteTable(tableName);
		    const modelDefinition = model.modelDefinition;
		    const attributes = modelDefinition.attributes;
		    for (const attribute of attributes.values()) {
		      if (attribute.primaryKey) {
		        primaryKeysColumns.push(attribute.columnName);
		      }
		      if (attribute.autoIncrement) {
		        identityColumns.push(attribute.columnName);
		      }
		    }
		    for (const index of model.getIndexes()) {
		      if (index.unique && index.fields) {
		        for (const field of index.fields) {
		          const fieldName = typeof field === "string" ? field : field.name || field.attribute;
		          if (!uniqueAttrs.includes(fieldName) && attributes.has(fieldName)) {
		            uniqueAttrs.push(fieldName);
		          }
		        }
		      }
		    }
		    const updateKeys = Object.keys(updateValues);
		    const insertKeys = Object.keys(insertValues);
		    const insertKeysQuoted = insertKeys.map((key) => this.quoteIdentifier(key)).join(", ");
		    const insertValuesEscaped = insertKeys.map((key) => {
		      return this.escape(insertValues[key], {
		        // TODO: pass type
		        // TODO: bind param
		        replacements: options.replacements,
		        model
		      });
		    }).join(", ");
		    const sourceTableQuery = `VALUES(${insertValuesEscaped})`;
		    let joinCondition;
		    const clauses = where[Op.or].filter((clause) => {
		      let valid = true;
		      for (const key of Object.keys(clause)) {
		        if (clause[key] == null) {
		          valid = false;
		          break;
		        }
		      }
		      return valid;
		    });
		    const getJoinSnippet = (array) => {
		      return array.map((key) => {
		        key = this.quoteIdentifier(key);
		        return `${targetTableAlias}.${key} = ${sourceTableAlias}.${key}`;
		      });
		    };
		    if (clauses.length === 0) {
		      throw new Error("Primary Key or Unique key should be passed to upsert query");
		    } else {
		      for (const key in clauses) {
		        const keys = Object.keys(clauses[key]);
		        const columnName = modelDefinition.getColumnNameLoose(keys[0]);
		        if (primaryKeysColumns.includes(columnName)) {
		          joinCondition = getJoinSnippet(primaryKeysColumns).join(" AND ");
		          break;
		        }
		      }
		      if (!joinCondition) {
		        joinCondition = getJoinSnippet(uniqueAttrs).join(" AND ");
		      }
		    }
		    const filteredUpdateClauses = updateKeys.filter((key) => {
		      if (!identityColumns.includes(key)) {
		        return true;
		      }
		      return false;
		    }).map((key) => {
		      const value = this.escape(updateValues[key], void 0, { replacements: options.replacements });
		      key = this.quoteIdentifier(key);
		      return `${targetTableAlias}.${key} = ${value}`;
		    }).join(", ");
		    const updateSnippet = filteredUpdateClauses.length > 0 ? `WHEN MATCHED THEN UPDATE SET ${filteredUpdateClauses}` : "";
		    const insertSnippet = `(${insertKeysQuoted}) VALUES(${insertValuesEscaped})`;
		    let query = `MERGE INTO ${tableNameQuoted} AS ${targetTableAlias} USING (${sourceTableQuery}) AS ${sourceTableAlias}(${insertKeysQuoted}) ON ${joinCondition}`;
		    query += ` ${updateSnippet} WHEN NOT MATCHED THEN INSERT ${insertSnippet};`;
		    return query;
		  }
		  truncateTableQuery(tableName) {
		    return `TRUNCATE TABLE ${this.quoteTable(tableName)} IMMEDIATE`;
		  }
		  deleteQuery(tableName, where, options = {}, model) {
		    const table = this.quoteTable(tableName);
		    let query = `DELETE FROM ${table}`;
		    const whereSql = this.whereQuery(where, { ...options, model });
		    if (whereSql) {
		      query += ` ${whereSql}`;
		    }
		    query += this.addLimitAndOffset(options);
		    return query;
		  }
		  addIndexQuery(tableName, attributes, options, rawTablename) {
		    if ("include" in attributes && !attributes.unique) {
		      throw new Error("DB2 does not support non-unique indexes with INCLUDE syntax.");
		    }
		    return super.addIndexQuery(tableName, attributes, options, rawTablename);
		  }
		  attributeToSQL(attribute, options) {
		    if (!_.isPlainObject(attribute)) {
		      attribute = {
		        type: attribute
		      };
		    }
		    let template;
		    let changeNull = 1;
		    if (attribute.type instanceof DataTypes.ENUM) {
		      template = attribute.type.toSql({ dialect: this.dialect });
		      template += ` CHECK (${this.quoteIdentifier(attribute.field)} IN(${attribute.type.options.values.map((value) => {
	        return this.escape(value, void 0, { replacements: options == null ? void 0 : options.replacements });
	      }).join(", ")}))`;
		    } else {
		      template = (0, import_data_types_utils.attributeTypeToSql)(attribute.type, { dialect: this.dialect });
		    }
		    if (options && options.context === "changeColumn" && attribute.type) {
		      template = `DATA TYPE ${template}`;
		    } else if (attribute.allowNull === false || attribute.primaryKey === true) {
		      template += " NOT NULL";
		      changeNull = 0;
		    }
		    if (attribute.autoIncrement) {
		      let initialValue = 1;
		      if (attribute.initialAutoIncrement) {
		        initialValue = attribute.initialAutoIncrement;
		      }
		      template += ` GENERATED BY DEFAULT AS IDENTITY(START WITH ${initialValue}, INCREMENT BY 1)`;
		    }
		    if (attribute.type !== "TEXT" && attribute.type._binary !== true && (0, import_query_builder_utils.defaultValueSchemable)(attribute.defaultValue)) {
		      template += ` DEFAULT ${this.escape(attribute.defaultValue, { replacements: options == null ? void 0 : options.replacements, type: attribute.type })}`;
		    }
		    if (attribute.unique === true && ((options == null ? void 0 : options.context) !== "changeColumn" || this.dialect.supports.alterColumn.unique)) {
		      template += " UNIQUE";
		    }
		    if (attribute.primaryKey) {
		      template += " PRIMARY KEY";
		    }
		    if ((!options || !options.withoutForeignKeyConstraints) && attribute.references) {
		      if (options && options.context === "addColumn" && options.foreignKey) {
		        const attrName = this.quoteIdentifier(options.foreignKey);
		        const fkName = `${options.tableName}_${attrName}_fidx`;
		        template += `, CONSTRAINT ${fkName} FOREIGN KEY (${attrName})`;
		      }
		      template += ` REFERENCES ${this.quoteTable(attribute.references.table)}`;
		      if (attribute.references.key) {
		        template += ` (${this.quoteIdentifier(attribute.references.key)})`;
		      } else {
		        template += ` (${this.quoteIdentifier("id")})`;
		      }
		      if (attribute.onDelete) {
		        template += ` ON DELETE ${attribute.onDelete.toUpperCase()}`;
		      }
		      if (attribute.onUpdate && attribute.onUpdate.toUpperCase() !== "CASCADE") {
		        template += ` ON UPDATE ${attribute.onUpdate.toUpperCase()}`;
		      }
		    }
		    if (options && options.context === "changeColumn" && changeNull === 1 && attribute.allowNull !== void 0) {
		      template = [template];
		      if (attribute.allowNull) {
		        template.push("DROP NOT NULL");
		      } else {
		        template.push("NOT NULL");
		      }
		    }
		    if (attribute.comment && typeof attribute.comment === "string") {
		      template += ` COMMENT ${attribute.comment}`;
		    }
		    return template;
		  }
		  attributesToSQL(attributes, options) {
		    const result = {};
		    const existingConstraints = [];
		    let key;
		    let attribute;
		    for (key in attributes) {
		      attribute = attributes[key];
		      if (attribute.references) {
		        if (existingConstraints.includes(this.quoteTable(attribute.references.table))) {
		          attribute.onDelete = "";
		          attribute.onUpdate = "";
		        } else if (attribute.unique && attribute.unique === true) {
		          attribute.onDelete = "";
		          attribute.onUpdate = "";
		        } else {
		          existingConstraints.push(this.quoteTable(attribute.references.table));
		        }
		      }
		      if (key && !attribute.field && typeof attribute === "object") {
		        attribute.field = key;
		      }
		      result[attribute.field || key] = this.attributeToSQL(attribute, options);
		    }
		    return result;
		  }
		  createTrigger() {
		    throwMethodUndefined("createTrigger");
		  }
		  dropTrigger() {
		    throwMethodUndefined("dropTrigger");
		  }
		  renameTrigger() {
		    throwMethodUndefined("renameTrigger");
		  }
		  createFunction() {
		    throwMethodUndefined("createFunction");
		  }
		  dropFunction() {
		    throwMethodUndefined("dropFunction");
		  }
		  renameFunction() {
		    throwMethodUndefined("renameFunction");
		  }
		  dropForeignKeyQuery(tableName, foreignKey) {
		    return _.template("ALTER TABLE <%= table %> DROP FOREIGN KEY <%= key %>;", this._templateSettings)({
		      table: this.quoteTable(tableName),
		      key: this.quoteIdentifier(foreignKey)
		    });
		  }
		  setAutocommitQuery() {
		    return "";
		  }
		  setIsolationLevelQuery() {
		  }
		  generateTransactionId() {
		    return randomBytes(10).toString("hex");
		  }
		  startTransactionQuery(transaction) {
		    if (transaction.parent) {
		      return `SAVE TRANSACTION ${this.quoteIdentifier(transaction.name)};`;
		    }
		    return "BEGIN TRANSACTION;";
		  }
		  commitTransactionQuery(transaction) {
		    if (transaction.parent) {
		      return;
		    }
		    return "COMMIT TRANSACTION;";
		  }
		  rollbackTransactionQuery(transaction) {
		    if (transaction.parent) {
		      return `ROLLBACK TRANSACTION ${this.quoteIdentifier(transaction.name)};`;
		    }
		    return "ROLLBACK TRANSACTION;";
		  }
		  addLimitAndOffset(options) {
		    const offset = options.offset || 0;
		    let fragment = "";
		    if (offset) {
		      fragment += ` OFFSET ${this.escape(offset, { replacements: options.replacements })} ROWS`;
		    }
		    if (options.limit) {
		      fragment += ` FETCH NEXT ${this.escape(options.limit, { replacements: options.replacements })} ROWS ONLY`;
		    }
		    return fragment;
		  }
		  addUniqueFields(dataValues, rawAttributes, uniqno) {
		    uniqno = uniqno === void 0 ? 1 : uniqno;
		    for (const key in rawAttributes) {
		      if (rawAttributes[key].unique && dataValues[key] === void 0) {
		        if (rawAttributes[key].type instanceof DataTypes.DATE) {
		          dataValues[key] = /* @__PURE__ */ new Date();
		        } else if (rawAttributes[key].type instanceof DataTypes.STRING) {
		          dataValues[key] = `unique${uniqno++}`;
		        } else if (rawAttributes[key].type instanceof DataTypes.INTEGER) {
		          dataValues[key] = uniqno++;
		        } else if (rawAttributes[key].type instanceof DataTypes.BOOLEAN) {
		          dataValues[key] = new DataTypes.BOOLEAN(false);
		        }
		      }
		    }
		    return uniqno;
		  }
		}
		
		return queryGenerator$1;
	}

	var queryInterface$1;
	var hasRequiredQueryInterface$1;

	function requireQueryInterface$1 () {
		if (hasRequiredQueryInterface$1) return queryInterface$1;
		hasRequiredQueryInterface$1 = 1;
		var __defProp = Object.defineProperty;
		var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
		var __getOwnPropNames = Object.getOwnPropertyNames;
		var __hasOwnProp = Object.prototype.hasOwnProperty;
		var __export = (target, all) => {
		  for (var name in all)
		    __defProp(target, name, { get: all[name], enumerable: true });
		};
		var __copyProps = (to, from, except, desc) => {
		  if (from && typeof from === "object" || typeof from === "function") {
		    for (let key of __getOwnPropNames(from))
		      if (!__hasOwnProp.call(to, key) && key !== except)
		        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
		  }
		  return to;
		};
		var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
		var query_interface_exports = {};
		__export(query_interface_exports, {
		  Db2QueryInterface: () => Db2QueryInterface
		});
		queryInterface$1 = __toCommonJS(query_interface_exports);
		var import_errors = errors;
		var import_query_builder_utils = requireQueryBuilderUtils();
		var import_sql = sql;
		const _ = lodashExports;
		const { Op } = operators;
		const { AbstractQueryInterface } = queryInterface$8;
		const { QueryTypes } = queryTypes;
		class Db2QueryInterface extends AbstractQueryInterface {
		  async getForeignKeyReferencesForTable(tableName, options) {
		    const queryOptions = {
		      ...options,
		      type: QueryTypes.FOREIGNKEYS
		    };
		    const query = this.queryGenerator.getForeignKeyQuery(tableName);
		    return this.sequelize.queryRaw(query, queryOptions);
		  }
		  async upsert(tableName, insertValues, updateValues, where, options) {
		    if (options.bind) {
		      (0, import_sql.assertNoReservedBind)(options.bind);
		    }
		    options = { ...options };
		    const model = options.model;
		    const wheres = [];
		    const attributes = Object.keys(insertValues);
		    let indexFields;
		    options = _.clone(options);
		    if (!(0, import_query_builder_utils.isWhereEmpty)(where)) {
		      wheres.push(where);
		    }
		    const indexes = [];
		    for (const value of model.getIndexes()) {
		      if (value.unique) {
		        indexFields = value.fields.map((field) => {
		          if (_.isPlainObject(field)) {
		            return field.attribute;
		          }
		          return field;
		        });
		        indexes.push(indexFields);
		      }
		    }
		    for (const index of indexes) {
		      if (_.intersection(attributes, index).length === index.length) {
		        where = {};
		        for (const field of index) {
		          where[field] = insertValues[field];
		        }
		        wheres.push(where);
		      }
		    }
		    where = { [Op.or]: wheres };
		    options.type = QueryTypes.UPSERT;
		    options.raw = true;
		    const sql = this.queryGenerator.upsertQuery(tableName, insertValues, updateValues, where, model, options);
		    delete options.replacements;
		    const result = await this.sequelize.queryRaw(sql, options);
		    return [result, void 0];
		  }
		  async dropSchema(schema, options) {
		    const outParams = /* @__PURE__ */ new Map();
		    const response = await super.dropSchema(schema, {
		      ...options,
		      // TODO: db2 supports out parameters. We don't have a proper API for it yet
		      //   for now, this temporary API will have to do.
		      _unsafe_db2Outparams: outParams
		    });
		    const errorTable = outParams.get("sequelize_errorTable");
		    if (errorTable != null) {
		      const errorSchema = outParams.get("sequelize_errorSchema");
		      const errorData = await this.sequelize.queryRaw(`SELECT * FROM "${errorSchema}"."${errorTable}"`, {
		        type: QueryTypes.SELECT
		      });
		      const error = new Error(errorData[0].DIAGTEXT);
		      error.sqlcode = errorData[0].SQLCODE;
		      error.sql = errorData[0].STATEMENT;
		      error.state = errorData[0].SQLSTATE;
		      const wrappedError = new import_errors.DatabaseError(error);
		      try {
		        await this.dropTable({
		          tableName: errorTable,
		          schema: errorSchema
		        });
		      } catch (dropError) {
		        throw new import_errors.AggregateError([
		          wrappedError,
		          new import_errors.BaseError(`An error occurred while cleaning up table ${errorSchema}.${errorTable}`, { cause: dropError })
		        ]);
		      }
		      if (error.sqlcode === -204 && error.state === "42704") {
		        return response;
		      }
		      throw wrappedError;
		    }
		    return response;
		  }
		  // TODO: drop "schema" options from the option bag, it must be passed through tableName instead.
		  async createTable(tableName, attributes, options, model) {
		    let sql = "";
		    options = { ...options };
		    if (model) {
		      options.uniqueKeys = options.uniqueKeys || model.uniqueKeys;
		    }
		    attributes = _.mapValues(
		      attributes,
		      (attribute) => this.sequelize.normalizeAttribute(attribute)
		    );
		    const modelTable = model == null ? void 0 : model.table;
		    if (!tableName.schema && (options.schema || (modelTable == null ? void 0 : modelTable.schema))) {
		      tableName = this.queryGenerator.extractTableDetails(tableName);
		      tableName.schema = (modelTable == null ? void 0 : modelTable.schema) || options.schema || tableName.schema;
		    }
		    attributes = this.queryGenerator.attributesToSQL(attributes, { table: tableName, context: "createTable", withoutForeignKeyConstraints: options.withoutForeignKeyConstraints });
		    sql = this.queryGenerator.createTableQuery(tableName, attributes, options);
		    return await this.sequelize.queryRaw(sql, options);
		  }
		  async addConstraint(tableName, options) {
		    try {
		      await super.addConstraint(tableName, options);
		    } catch (error) {
		      if (!error.cause) {
		        throw error;
		      }
		      if (error.cause.sqlcode !== -668 || error.cause.state !== "57007") {
		        throw error;
		      }
		      await this.executeTableReorg(tableName);
		      await super.addConstraint(tableName, options);
		    }
		  }
		  /**
		   * DB2 can put tables in the "reorg pending" state after a structure change (e.g. ALTER)
		   * Other changes cannot be done to these tables until the reorg has been completed.
		   *
		   * This method forces a reorg to happen now.
		   *
		   * @param {TableName} tableName - The name of the table to reorg
		   */
		  async executeTableReorg(tableName) {
		    return await this.sequelize.query(`CALL SYSPROC.ADMIN_CMD('REORG TABLE ${this.queryGenerator.quoteTable(tableName)}')`);
		  }
		}
		
		return queryInterface$1;
	}

	var db2;
	var hasRequiredDb2;

	function requireDb2 () {
		if (hasRequiredDb2) return db2;
		hasRequiredDb2 = 1;
		var __create = Object.create;
		var __defProp = Object.defineProperty;
		var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
		var __getOwnPropNames = Object.getOwnPropertyNames;
		var __getProtoOf = Object.getPrototypeOf;
		var __hasOwnProp = Object.prototype.hasOwnProperty;
		var __export = (target, all) => {
		  for (var name in all)
		    __defProp(target, name, { get: all[name], enumerable: true });
		};
		var __copyProps = (to, from, except, desc) => {
		  if (from && typeof from === "object" || typeof from === "function") {
		    for (let key of __getOwnPropNames(from))
		      if (!__hasOwnProp.call(to, key) && key !== except)
		        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
		  }
		  return to;
		};
		var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
		  // If the importer is in node compatibility mode or this is not an ESM
		  // file that has been converted to a CommonJS file using a Babel-
		  // compatible transform (i.e. "__esModule" has not been set), then set
		  // "default" to the CommonJS "module.exports" for node compatibility.
		  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
		  mod
		));
		var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
		var db2_exports = {};
		__export(db2_exports, {
		  Db2Dialect: () => Db2Dialect
		});
		db2 = __toCommonJS(db2_exports);
		var import_sql = sql;
		var import_abstract = requireAbstract();
		var import_connection_manager = requireConnectionManager$1();
		var DataTypes = __toESM(requireDataTypes$2());
		var import_query = requireQuery$1();
		var import_query_generator = requireQueryGenerator$1();
		var import_query_interface = requireQueryInterface$1();
		class Db2Dialect extends import_abstract.AbstractDialect {
		  static supports = import_abstract.AbstractDialect.extendSupport({
		    migrations: false,
		    schemas: true,
		    finalTable: true,
		    autoIncrement: {
		      defaultValue: false
		    },
		    alterColumn: {
		      unique: false
		    },
		    index: {
		      collate: false,
		      using: false,
		      where: true,
		      include: true
		    },
		    constraints: {
		      onUpdate: false
		    },
		    tmpTableTrigger: true,
		    dataTypes: {
		      COLLATE_BINARY: true,
		      TIME: {
		        precision: false
		      }
		    }
		  });
		  defaultVersion = "1.0.0";
		  dataTypesDocumentationUrl = "https://www.ibm.com/support/knowledgecenter/SSEPGG_11.1.0/com.ibm.db2.luw.sql.ref.doc/doc/r0008478.html";
		  connectionManager;
		  queryGenerator;
		  queryInterface;
		  Query = import_query.Db2Query;
		  TICK_CHAR_LEFT = '"';
		  TICK_CHAR_RIGHT = '"';
		  constructor(sequelize) {
		    super(sequelize, DataTypes, "db2");
		    this.connectionManager = new import_connection_manager.Db2ConnectionManager(this, sequelize);
		    this.queryGenerator = new import_query_generator.Db2QueryGenerator({
		      dialect: this,
		      sequelize
		    });
		    this.queryInterface = new import_query_interface.Db2QueryInterface(sequelize, this.queryGenerator);
		    this.registerDataTypeParser(["CHAR () FOR BIT DATA", "VARCHAR () FOR BIT DATA"], (value) => {
		      return value.toString();
		    });
		    this.registerDataTypeParser(["TIMESTAMP"], (value) => {
		      return `${value}+00`;
		    });
		  }
		  createBindCollector() {
		    return (0, import_sql.createUnspecifiedOrderedBindCollector)();
		  }
		  escapeBuffer(buffer) {
		    return `BLOB(${this.queryGenerator.escape(buffer.toString())})`;
		  }
		  getDefaultSchema() {
		    return "";
		  }
		  static getDefaultPort() {
		    return 3306;
		  }
		}
		
		return db2;
	}

	var connectionManager;
	var hasRequiredConnectionManager;

	function requireConnectionManager () {
		if (hasRequiredConnectionManager) return connectionManager;
		hasRequiredConnectionManager = 1;
		var __defProp = Object.defineProperty;
		var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
		var __getOwnPropNames = Object.getOwnPropertyNames;
		var __hasOwnProp = Object.prototype.hasOwnProperty;
		var __export = (target, all) => {
		  for (var name in all)
		    __defProp(target, name, { get: all[name], enumerable: true });
		};
		var __copyProps = (to, from, except, desc) => {
		  if (from && typeof from === "object" || typeof from === "function") {
		    for (let key of __getOwnPropNames(from))
		      if (!__hasOwnProp.call(to, key) && key !== except)
		        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
		  }
		  return to;
		};
		var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
		var connection_manager_exports = {};
		__export(connection_manager_exports, {
		  SnowflakeConnectionManager: () => SnowflakeConnectionManager
		});
		connectionManager = __toCommonJS(connection_manager_exports);
		var import_errors = errors;
		var import_check = requireCheck();
		var import_logger = requireLogger();
		var import_connection_manager = requireConnectionManager$8();
		const debug = import_logger.logger.debugContext("connection:snowflake");
		class SnowflakeConnectionManager extends import_connection_manager.AbstractConnectionManager {
		  lib;
		  constructor(dialect, sequelize) {
		    super(dialect, sequelize);
		    this.lib = this._loadDialectModule("snowflake-sdk");
		  }
		  /**
		   * Connect with a snowflake database based on config, Handle any errors in connection
		   * Set the pool handlers on connection.error
		   * Also set proper timezone once connection is connected.
		   *
		   * @param config
		   * @returns
		   * @private
		   */
		  async connect(config) {
		    const connectionConfig = {
		      account: config.host,
		      username: config.username,
		      password: config.password,
		      database: config.database,
		      // @ts-expect-error -- snowflake specific options. They should be in dialectOptions. Do not declare them in ConnectionOptions.
		      warehouse: config.warehouse,
		      // @ts-expect-error -- snowflake specific options. They should be in dialectOptions. Do not declare them in ConnectionOptions.
		      role: config.role,
		      ...config.dialectOptions
		    };
		    try {
		      const connection = this.lib.createConnection(connectionConfig);
		      await new Promise((resolve, reject) => {
		        connection.connect((err) => {
		          if (err) {
		            return void reject(err);
		          }
		          resolve();
		        });
		      });
		      debug("connection acquired");
		      if (!this.sequelize.config.keepDefaultTimezone) {
		        const tzOffset = this.sequelize.options.timezone === "+00:00" ? "Etc/UTC" : this.sequelize.options.timezone;
		        const isNamedTzOffset = tzOffset.includes("/");
		        if (!isNamedTzOffset) {
		          throw new Error('Snowflake only supports named timezones for the sequelize "timezone" option.');
		        }
		        await new Promise((resolve, reject) => {
		          connection.execute({
		            sqlText: `ALTER SESSION SET timezone = '${tzOffset}'`,
		            complete(err) {
		              if (err) {
		                return void reject(err);
		              }
		              resolve();
		            }
		          });
		        });
		      }
		      return connection;
		    } catch (error) {
		      if (!(0, import_check.isErrorWithStringCode)(error)) {
		        throw error;
		      }
		      switch (error.code) {
		        case "ECONNREFUSED":
		          throw new import_errors.ConnectionRefusedError(error);
		        case "ER_ACCESS_DENIED_ERROR":
		          throw new import_errors.AccessDeniedError(error);
		        case "ENOTFOUND":
		          throw new import_errors.HostNotFoundError(error);
		        case "EHOSTUNREACH":
		          throw new import_errors.HostNotReachableError(error);
		        case "EINVAL":
		          throw new import_errors.InvalidConnectionError(error);
		        default:
		          throw new import_errors.ConnectionError(error);
		      }
		    }
		  }
		  async disconnect(connection) {
		    if (!connection.isUp()) {
		      debug("connection tried to disconnect but was already at CLOSED state");
		      return;
		    }
		    await new Promise((resolve, reject) => {
		      connection.destroy((err) => {
		        if (err) {
		          console.error(`Unable to disconnect: ${err.message}`);
		          reject(err);
		        } else {
		          console.error(`Disconnected connection with id: ${connection.getId()}`);
		          resolve(connection.getId());
		        }
		      });
		    });
		  }
		  validate(connection) {
		    return connection.isUp();
		  }
		}
		
		return connectionManager;
	}

	var dataTypes;
	var hasRequiredDataTypes;

	function requireDataTypes () {
		if (hasRequiredDataTypes) return dataTypes;
		hasRequiredDataTypes = 1;
		var __create = Object.create;
		var __defProp = Object.defineProperty;
		var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
		var __getOwnPropNames = Object.getOwnPropertyNames;
		var __getProtoOf = Object.getPrototypeOf;
		var __hasOwnProp = Object.prototype.hasOwnProperty;
		var __export = (target, all) => {
		  for (var name in all)
		    __defProp(target, name, { get: all[name], enumerable: true });
		};
		var __copyProps = (to, from, except, desc) => {
		  if (from && typeof from === "object" || typeof from === "function") {
		    for (let key of __getOwnPropNames(from))
		      if (!__hasOwnProp.call(to, key) && key !== except)
		        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
		  }
		  return to;
		};
		var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
		  // If the importer is in node compatibility mode or this is not an ESM
		  // file that has been converted to a CommonJS file using a Babel-
		  // compatible transform (i.e. "__esModule" has not been set), then set
		  // "default" to the CommonJS "module.exports" for node compatibility.
		  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
		  mod
		));
		var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
		var data_types_exports = {};
		__export(data_types_exports, {
		  BIGINT: () => BIGINT,
		  DATE: () => DATE,
		  DOUBLE: () => DOUBLE,
		  ENUM: () => ENUM,
		  FLOAT: () => FLOAT,
		  INTEGER: () => INTEGER,
		  JSON: () => JSON,
		  MEDIUMINT: () => MEDIUMINT,
		  REAL: () => REAL,
		  SMALLINT: () => SMALLINT,
		  TEXT: () => TEXT,
		  TINYINT: () => TINYINT,
		  UUID: () => UUID
		});
		dataTypes = __toCommonJS(data_types_exports);
		var import_maxBy = __toESM(requireMaxBy());
		var BaseTypes = __toESM(requireDataTypes$8());
		class DATE extends BaseTypes.DATE {
		  toSql() {
		    return `TIMESTAMP${this.options.precision != null ? `(${this.options.precision})` : ""}`;
		  }
		  toBindableValue(date) {
		    date = this._applyTimezone(date);
		    return date.format("YYYY-MM-DD HH:mm:ss.SSS");
		  }
		}
		class UUID extends BaseTypes.UUID {
		  toSql() {
		    return "VARCHAR(36)";
		  }
		}
		class ENUM extends BaseTypes.ENUM {
		  toSql() {
		    var _a;
		    const minLength = ((_a = (0, import_maxBy.default)(this.options.values, (value) => value.length)) == null ? void 0 : _a.length) ?? 0;
		    return `VARCHAR(${Math.max(minLength, 255)})`;
		  }
		}
		class TEXT extends BaseTypes.TEXT {
		  toSql() {
		    return "TEXT";
		  }
		}
		class JSON extends BaseTypes.JSON {
		  escape(value) {
		    return globalThis.JSON.stringify(value);
		  }
		}
		class REAL extends BaseTypes.REAL {
		  toSql() {
		    return "REAL";
		  }
		}
		class FLOAT extends BaseTypes.FLOAT {
		  // TODO: warn that FLOAT is not supported in Snowflake, only DOUBLE is
		  toSql() {
		    return "FLOAT";
		  }
		}
		class DOUBLE extends BaseTypes.DOUBLE {
		  toSql() {
		    return "FLOAT";
		  }
		}
		class TINYINT extends BaseTypes.TINYINT {
		  toSql() {
		    return "INTEGER";
		  }
		}
		class SMALLINT extends BaseTypes.SMALLINT {
		  toSql() {
		    return "INTEGER";
		  }
		}
		class MEDIUMINT extends BaseTypes.MEDIUMINT {
		  toSql() {
		    return "INTEGER";
		  }
		}
		class INTEGER extends BaseTypes.INTEGER {
		  toSql() {
		    return "INTEGER";
		  }
		}
		class BIGINT extends BaseTypes.BIGINT {
		  // not really true, but snowflake allows INT values up to 99999999999999999999999999999999999999,
		  // which is more than enough to cover a 64-bit unsigned integer (0 - 18446744073709551615)
		  _supportsNativeUnsigned(_dialect) {
		    return true;
		  }
		  toSql() {
		    return "INTEGER";
		  }
		}
		
		return dataTypes;
	}

	var query;
	var hasRequiredQuery;

	function requireQuery () {
		if (hasRequiredQuery) return query;
		hasRequiredQuery = 1;
		var __defProp = Object.defineProperty;
		var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
		var __getOwnPropNames = Object.getOwnPropertyNames;
		var __hasOwnProp = Object.prototype.hasOwnProperty;
		var __export = (target, all) => {
		  for (var name in all)
		    __defProp(target, name, { get: all[name], enumerable: true });
		};
		var __copyProps = (to, from, except, desc) => {
		  if (from && typeof from === "object" || typeof from === "function") {
		    for (let key of __getOwnPropNames(from))
		      if (!__hasOwnProp.call(to, key) && key !== except)
		        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
		  }
		  return to;
		};
		var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
		var query_exports = {};
		__export(query_exports, {
		  SnowflakeQuery: () => SnowflakeQuery
		});
		query = __toCommonJS(query_exports);
		const { AbstractQuery } = requireQuery$8();
		const sequelizeErrors = errors;
		const _ = lodashExports;
		const { logger } = requireLogger();
		const ER_DUP_ENTRY = 1062;
		const ER_DEADLOCK = 1213;
		const ER_ROW_IS_REFERENCED = 1451;
		const ER_NO_REFERENCED_ROW = 1452;
		const debug = logger.debugContext("sql:snowflake");
		class SnowflakeQuery extends AbstractQuery {
		  async run(sql, parameters) {
		    this.sql = sql;
		    const { connection, options } = this;
		    const showWarnings = this.sequelize.options.showWarnings || options.showWarnings;
		    const complete = this._logQuery(sql, debug, parameters);
		    if (parameters) {
		      debug("parameters(%j)", parameters);
		    }
		    let results;
		    try {
		      results = await new Promise((resolve, reject) => {
		        connection.execute({
		          sqlText: sql,
		          binds: parameters,
		          complete(err, _stmt, rows) {
		            if (err) {
		              reject(err);
		            } else {
		              resolve(rows);
		            }
		          }
		        });
		      });
		    } catch (error) {
		      if (options.transaction && error.errno === ER_DEADLOCK) {
		        try {
		          await options.transaction.rollback();
		        } catch {
		        }
		        options.transaction.finished = "rollback";
		      }
		      error.sql = sql;
		      error.parameters = parameters;
		      throw this.formatError(error);
		    } finally {
		      complete();
		    }
		    if (showWarnings && results && results.warningStatus > 0) {
		      await this.logWarnings(results);
		    }
		    return this.formatResults(results);
		  }
		  /**
		   * High level function that handles the results of a query execution.
		   *
		   *
		   * Example:
		   *  query.formatResults([
		   *    {
		   *      id: 1,              // this is from the main table
		   *      attr2: 'snafu',     // this is from the main table
		   *      Tasks.id: 1,        // this is from the associated table
		   *      Tasks.title: 'task' // this is from the associated table
		   *    }
		   *  ])
		   *
		   * @param {Array} data - The result of the query execution.
		   * @private
		   */
		  formatResults(data) {
		    var _a;
		    let result = this.instance;
		    if (this.isInsertQuery(data)) {
		      this.handleInsertQuery(data);
		      if (!this.instance) {
		        const modelDefinition = (_a = this.model) == null ? void 0 : _a.modelDefinition;
		        if (data.constructor.name === "ResultSetHeader" && (modelDefinition == null ? void 0 : modelDefinition.autoIncrementAttributeName) && (modelDefinition == null ? void 0 : modelDefinition.autoIncrementAttributeName) === this.model.primaryKeyAttribute) {
		          const startId = data[this.getInsertIdField()];
		          result = [];
		          for (let i = startId; i < startId + data.affectedRows; i++) {
		            result.push({ [modelDefinition.getColumnName(this.model.primaryKeyAttribute)]: i });
		          }
		        } else {
		          result = data[this.getInsertIdField()];
		        }
		      }
		    }
		    if (this.isSelectQuery()) {
		      if (this.options.raw === false && this.sequelize.options.quoteIdentifiers === false) {
		        const attrsMap = /* @__PURE__ */ Object.create(null);
		        for (const attrName of this.model.modelDefinition.attributes.keys()) {
		          attrsMap[attrName.toLowerCase()] = attrName;
		        }
		        data = data.map((data2) => _.reduce(data2, (prev, value, key) => {
		          if (value !== void 0 && attrsMap[key]) {
		            prev[attrsMap[key]] = value;
		            delete prev[key];
		          }
		          return prev;
		        }, data2));
		      }
		      this.options.fieldMap = _.mapKeys(this.options.fieldMap, (v, k) => {
		        return k.toUpperCase();
		      });
		      return this.handleSelectQuery(data);
		    }
		    if (this.isShowTablesQuery()) {
		      return this.handleShowTablesQuery(data);
		    }
		    if (this.isDescribeQuery()) {
		      result = {};
		      for (const _result of data) {
		        result[_result.Field] = {
		          type: _result.Type.toUpperCase(),
		          allowNull: _result.Null === "YES",
		          defaultValue: _result.Default,
		          primaryKey: _result.Key === "PRI",
		          autoIncrement: Object.hasOwn(_result, "Extra") && _result.Extra.toLowerCase() === "auto_increment",
		          comment: _result.Comment ? _result.Comment : null
		        };
		      }
		      return result;
		    }
		    if (this.isShowIndexesQuery()) {
		      return this.handleShowIndexesQuery(data);
		    }
		    if (this.isCallQuery()) {
		      return data[0];
		    }
		    if (this.isBulkUpdateQuery() || this.isBulkDeleteQuery()) {
		      return data[0]["number of rows updated"];
		    }
		    if (this.isForeignKeysQuery()) {
		      return data;
		    }
		    if (this.isUpsertQuery()) {
		      return [result, data.affectedRows === 1];
		    }
		    if (this.isInsertQuery() || this.isUpdateQuery()) {
		      return [result, data.affectedRows];
		    }
		    if (this.isShowConstraintsQuery()) {
		      return data;
		    }
		    if (this.isRawQuery()) {
		      return [data, data];
		    }
		    return result;
		  }
		  formatError(err) {
		    const errCode = err.errno || err.code;
		    switch (errCode) {
		      case ER_DUP_ENTRY: {
		        const match = err.message.match(/Duplicate entry '([\S\s]*)' for key '?((.|\s)*?)'?$/);
		        let fields = {};
		        let message = "Validation error";
		        const values = match ? match[1].split("-") : void 0;
		        const fieldKey = match ? match[2] : void 0;
		        const fieldVal = match ? match[1] : void 0;
		        const uniqueKey = this.model && this.model.getIndexes().find((index) => index.unique && index.name === fieldKey);
		        if (uniqueKey) {
		          if (uniqueKey.msg) {
		            message = uniqueKey.msg;
		          }
		          fields = _.zipObject(uniqueKey.fields, values);
		        } else {
		          fields[fieldKey] = fieldVal;
		        }
		        const errors = [];
		        _.forOwn(fields, (value, field) => {
		          errors.push(new sequelizeErrors.ValidationErrorItem(
		            this.getUniqueConstraintErrorMessage(field),
		            "unique violation",
		            // sequelizeErrors.ValidationErrorItem.Origins.DB,
		            field,
		            value,
		            this.instance,
		            "not_unique"
		          ));
		        });
		        return new sequelizeErrors.UniqueConstraintError({ message, errors, cause: err, fields });
		      }
		      case ER_ROW_IS_REFERENCED:
		      case ER_NO_REFERENCED_ROW: {
		        const match = err.message.match(
		          /CONSTRAINT (["`])(.*)\1 FOREIGN KEY \(\1(.*)\1\) REFERENCES \1(.*)\1 \(\1(.*)\1\)/
		        );
		        const quoteChar = match ? match[1] : "`";
		        const fields = match ? match[3].split(new RegExp(`${quoteChar}, *${quoteChar}`)) : void 0;
		        return new sequelizeErrors.ForeignKeyConstraintError({
		          reltype: String(errCode) === String(ER_ROW_IS_REFERENCED) ? "parent" : "child",
		          table: match ? match[4] : void 0,
		          fields,
		          value: fields && fields.length && this.instance && this.instance[fields[0]] || void 0,
		          index: match ? match[2] : void 0,
		          cause: err
		        });
		      }
		      default:
		        return new sequelizeErrors.DatabaseError(err);
		    }
		  }
		  handleShowIndexesQuery(data) {
		    data = data.reduce((acc, item) => {
		      if (!(item.Key_name in acc)) {
		        acc[item.Key_name] = item;
		        item.fields = [];
		      }
		      acc[item.Key_name].fields[item.Seq_in_index - 1] = {
		        attribute: item.Column_name,
		        length: item.Sub_part || void 0,
		        order: item.Collation === "A" ? "ASC" : void 0
		      };
		      delete item.column_name;
		      return acc;
		    }, {});
		    return _.map(data, (item) => ({
		      primary: item.Key_name === "PRIMARY",
		      fields: item.fields,
		      name: item.Key_name,
		      tableName: item.Table,
		      unique: item.Non_unique !== 1,
		      type: item.Index_type
		    }));
		  }
		}
		
		return query;
	}

	var queryGeneratorTypescript;
	var hasRequiredQueryGeneratorTypescript;

	function requireQueryGeneratorTypescript () {
		if (hasRequiredQueryGeneratorTypescript) return queryGeneratorTypescript;
		hasRequiredQueryGeneratorTypescript = 1;
		var __defProp = Object.defineProperty;
		var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
		var __getOwnPropNames = Object.getOwnPropertyNames;
		var __hasOwnProp = Object.prototype.hasOwnProperty;
		var __export = (target, all) => {
		  for (var name in all)
		    __defProp(target, name, { get: all[name], enumerable: true });
		};
		var __copyProps = (to, from, except, desc) => {
		  if (from && typeof from === "object" || typeof from === "function") {
		    for (let key of __getOwnPropNames(from))
		      if (!__hasOwnProp.call(to, key) && key !== except)
		        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
		  }
		  return to;
		};
		var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
		var query_generator_typescript_exports = {};
		__export(query_generator_typescript_exports, {
		  SnowflakeQueryGeneratorTypeScript: () => SnowflakeQueryGeneratorTypeScript
		});
		queryGeneratorTypescript = __toCommonJS(query_generator_typescript_exports);
		var import_join_sql_fragments = joinSqlFragments;
		var import_query_generator = requireQueryGenerator$8();
		class SnowflakeQueryGeneratorTypeScript extends import_query_generator.AbstractQueryGenerator {
		  describeTableQuery(tableName) {
		    return `SHOW FULL COLUMNS FROM ${this.quoteTable(tableName)};`;
		  }
		  showConstraintsQuery(tableName, options) {
		    const table = this.extractTableDetails(tableName);
		    return (0, import_join_sql_fragments.joinSQLFragments)([
		      "SELECT c.CONSTRAINT_CATALOG AS constraintCatalog,",
		      "c.CONSTRAINT_SCHEMA AS constraintSchema,",
		      "c.CONSTRAINT_NAME AS constraintName,",
		      "c.CONSTRAINT_TYPE AS constraintType,",
		      "c.TABLE_CATALOG AS tableCatalog,",
		      "c.TABLE_SCHEMA AS tableSchema,",
		      "c.TABLE_NAME AS tableName,",
		      "fk.TABLE_SCHEMA AS referencedTableSchema,",
		      "fk.TABLE_NAME AS referencedTableName,",
		      "r.DELETE_RULE AS deleteAction,",
		      "r.UPDATE_RULE AS updateAction,",
		      "c.IS_DEFERRABLE AS isDeferrable,",
		      "c.INITIALLY_DEFERRED AS initiallyDeferred",
		      "FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS c",
		      "LEFT JOIN INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS r ON c.CONSTRAINT_CATALOG = r.CONSTRAINT_CATALOG AND c.CONSTRAINT_SCHEMA = r.CONSTRAINT_SCHEMA AND c.CONSTRAINT_NAME = r.CONSTRAINT_NAME",
		      "LEFT JOIN INFORMATION_SCHEMA.TABLE_CONSTRAINTS fk ON r.UNIQUE_CONSTRAINT_CATALOG = fk.CONSTRAINT_CATALOG AND r.UNIQUE_CONSTRAINT_SCHEMA = fk.CONSTRAINT_SCHEMA AND r.UNIQUE_CONSTRAINT_NAME = fk.CONSTRAINT_NAME",
		      `WHERE c.TABLE_NAME = ${this.escape(table.tableName)}`,
		      `AND c.TABLE_SCHEMA = ${this.escape(table.schema)}`,
		      (options == null ? void 0 : options.constraintName) ? `AND c.CONSTRAINT_NAME = ${this.escape(options.constraintName)}` : "",
		      "ORDER BY c.CONSTRAINT_NAME"
		    ]);
		  }
		  showIndexesQuery() {
		    return `SELECT '' FROM DUAL`;
		  }
		  versionQuery() {
		    return 'SELECT CURRENT_VERSION() AS "version"';
		  }
		}
		
		return queryGeneratorTypescript;
	}

	var queryGenerator;
	var hasRequiredQueryGenerator;

	function requireQueryGenerator () {
		if (hasRequiredQueryGenerator) return queryGenerator;
		hasRequiredQueryGenerator = 1;
		var __defProp = Object.defineProperty;
		var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
		var __getOwnPropNames = Object.getOwnPropertyNames;
		var __hasOwnProp = Object.prototype.hasOwnProperty;
		var __export = (target, all) => {
		  for (var name in all)
		    __defProp(target, name, { get: all[name], enumerable: true });
		};
		var __copyProps = (to, from, except, desc) => {
		  if (from && typeof from === "object" || typeof from === "function") {
		    for (let key of __getOwnPropNames(from))
		      if (!__hasOwnProp.call(to, key) && key !== except)
		        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
		  }
		  return to;
		};
		var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
		var query_generator_exports = {};
		__export(query_generator_exports, {
		  SnowflakeQueryGenerator: () => SnowflakeQueryGenerator
		});
		queryGenerator = __toCommonJS(query_generator_exports);
		var import_join_sql_fragments = joinSqlFragments;
		var import_object = object$1;
		var import_query_builder_utils = requireQueryBuilderUtils();
		var import_dialect = requireDialect();
		var import_check = requireCheck();
		var import_query_generator = requireQueryGenerator$8();
		const _ = lodashExports;
		const { SnowflakeQueryGeneratorTypeScript } = requireQueryGeneratorTypescript();
		const { Op } = operators;
		const SNOWFLAKE_RESERVED_WORDS = "account,all,alter,and,any,as,between,by,case,cast,check,column,connect,connections,constraint,create,cross,current,current_date,current_time,current_timestamp,current_user,database,delete,distinct,drop,else,exists,false,following,for,from,full,grant,group,gscluster,having,ilike,in,increment,inner,insert,intersect,into,is,issue,join,lateral,left,like,localtime,localtimestamp,minus,natural,not,null,of,on,or,order,organization,qualify,regexp,revoke,right,rlike,row,rows,sample,schema,select,set,some,start,table,tablesample,then,to,trigger,true,try_cast,union,unique,update,using,values,view,when,whenever,where,with".split(",");
		const typeWithoutDefault = /* @__PURE__ */ new Set(["BLOB", "TEXT", "GEOMETRY", "JSON"]);
		const ADD_COLUMN_QUERY_SUPPORTED_OPTIONS = /* @__PURE__ */ new Set();
		const CREATE_DATABASE_QUERY_SUPPORTED_OPTIONS = /* @__PURE__ */ new Set(["charset", "collate"]);
		const CREATE_SCHEMA_QUERY_SUPPORTED_OPTIONS = /* @__PURE__ */ new Set();
		const LIST_SCHEMAS_QUERY_SUPPORTED_OPTIONS = /* @__PURE__ */ new Set();
		const REMOVE_COLUMN_QUERY_SUPPORTED_OPTIONS = /* @__PURE__ */ new Set();
		const CREATE_TABLE_QUERY_SUPPORTED_OPTIONS = /* @__PURE__ */ new Set(["collate", "charset", "rowFormat", "comment", "uniqueKeys"]);
		class SnowflakeQueryGenerator extends SnowflakeQueryGeneratorTypeScript {
		  constructor(options) {
		    super(options);
		    this.whereSqlBuilder.setOperatorKeyword(Op.regexp, "REGEXP");
		    this.whereSqlBuilder.setOperatorKeyword(Op.notRegexp, "NOT REGEXP");
		  }
		  createDatabaseQuery(databaseName, options) {
		    if (options) {
		      (0, import_check.rejectInvalidOptions)(
		        "createDatabaseQuery",
		        this.dialect.name,
		        import_query_generator.CREATE_DATABASE_QUERY_SUPPORTABLE_OPTIONS,
		        CREATE_DATABASE_QUERY_SUPPORTED_OPTIONS,
		        options
		      );
		    }
		    return (0, import_join_sql_fragments.joinSQLFragments)([
		      "CREATE DATABASE IF NOT EXISTS",
		      this.quoteIdentifier(databaseName),
		      (options == null ? void 0 : options.charset) && `DEFAULT CHARACTER SET ${this.escape(options.charset)}`,
		      (options == null ? void 0 : options.collate) && `DEFAULT COLLATE ${this.escape(options.collate)}`,
		      ";"
		    ]);
		  }
		  dropDatabaseQuery(databaseName) {
		    return `DROP DATABASE IF EXISTS ${this.quoteIdentifier(databaseName)};`;
		  }
		  listDatabasesQuery() {
		    return `SHOW DATABASES;`;
		  }
		  createSchemaQuery(schema, options) {
		    if (options) {
		      (0, import_check.rejectInvalidOptions)(
		        "createSchemaQuery",
		        this.dialect.name,
		        import_query_generator.CREATE_SCHEMA_QUERY_SUPPORTABLE_OPTIONS,
		        CREATE_SCHEMA_QUERY_SUPPORTED_OPTIONS,
		        options
		      );
		    }
		    return `CREATE SCHEMA IF NOT EXISTS ${this.quoteIdentifier(schema)};`;
		  }
		  dropSchemaQuery(schema) {
		    return `DROP SCHEMA IF EXISTS ${this.quoteIdentifier(schema)} CASCADE;`;
		  }
		  listSchemasQuery(options) {
		    if (options) {
		      (0, import_check.rejectInvalidOptions)(
		        "listSchemasQuery",
		        this.dialect.name,
		        import_query_generator.LIST_SCHEMAS_QUERY_SUPPORTABLE_OPTIONS,
		        LIST_SCHEMAS_QUERY_SUPPORTED_OPTIONS,
		        options
		      );
		    }
		    return `SHOW SCHEMAS;`;
		  }
		  createTableQuery(tableName, attributes, options) {
		    if (options) {
		      (0, import_check.rejectInvalidOptions)(
		        "createTableQuery",
		        this.dialect.name,
		        import_query_generator.CREATE_TABLE_QUERY_SUPPORTABLE_OPTIONS,
		        CREATE_TABLE_QUERY_SUPPORTED_OPTIONS,
		        options
		      );
		    }
		    options = {
		      charset: null,
		      rowFormat: null,
		      ...options
		    };
		    const primaryKeys = [];
		    const foreignKeys = {};
		    const attrStr = [];
		    for (const attr in attributes) {
		      if (!Object.hasOwn(attributes, attr)) {
		        continue;
		      }
		      const dataType = attributes[attr];
		      let match;
		      if (dataType.includes("PRIMARY KEY")) {
		        primaryKeys.push(attr);
		        if (dataType.includes("REFERENCES")) {
		          match = dataType.match(/^(.+) (REFERENCES.*)$/);
		          attrStr.push(`${this.quoteIdentifier(attr)} ${match[1].replace("PRIMARY KEY", "")}`);
		          foreignKeys[attr] = match[2];
		        } else {
		          attrStr.push(`${this.quoteIdentifier(attr)} ${dataType.replace("PRIMARY KEY", "")}`);
		        }
		      } else if (dataType.includes("REFERENCES")) {
		        match = dataType.match(/^(.+) (REFERENCES.*)$/);
		        attrStr.push(`${this.quoteIdentifier(attr)} ${match[1]}`);
		        foreignKeys[attr] = match[2];
		      } else {
		        attrStr.push(`${this.quoteIdentifier(attr)} ${dataType}`);
		      }
		    }
		    const table = this.quoteTable(tableName);
		    let attributesClause = attrStr.join(", ");
		    const pkString = primaryKeys.map((pk) => this.quoteIdentifier(pk)).join(", ");
		    if (options.uniqueKeys) {
		      _.each(options.uniqueKeys, (columns, indexName) => {
		        if (typeof indexName !== "string") {
		          indexName = `uniq_${tableName}_${columns.fields.join("_")}`;
		        }
		        attributesClause += `, UNIQUE ${this.quoteIdentifier(indexName)} (${columns.fields.map((field) => this.quoteIdentifier(field)).join(", ")})`;
		      });
		    }
		    if (pkString.length > 0) {
		      attributesClause += `, PRIMARY KEY (${pkString})`;
		    }
		    for (const fkey in foreignKeys) {
		      if (Object.hasOwn(foreignKeys, fkey)) {
		        attributesClause += `, FOREIGN KEY (${this.quoteIdentifier(fkey)}) ${foreignKeys[fkey]}`;
		      }
		    }
		    return (0, import_join_sql_fragments.joinSQLFragments)([
		      "CREATE TABLE IF NOT EXISTS",
		      table,
		      `(${attributesClause})`,
		      options.comment && typeof options.comment === "string" && `COMMENT ${this.escape(options.comment)}`,
		      options.charset && `DEFAULT CHARSET=${options.charset}`,
		      options.collate && `COLLATE ${options.collate}`,
		      options.rowFormat && `ROW_FORMAT=${options.rowFormat}`,
		      ";"
		    ]);
		  }
		  showTablesQuery(database) {
		    return (0, import_join_sql_fragments.joinSQLFragments)([
		      "SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE'",
		      database ? `AND TABLE_SCHEMA = ${this.escape(database)}` : "AND TABLE_SCHEMA NOT IN ( 'INFORMATION_SCHEMA', 'PERFORMANCE_SCHEMA', 'SYS')",
		      ";"
		    ]);
		  }
		  tableExistsQuery(table) {
		    const tableName = table.tableName ?? table;
		    const schema = table.schema;
		    return (0, import_join_sql_fragments.joinSQLFragments)([
		      "SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE'",
		      `AND TABLE_SCHEMA = ${schema !== void 0 ? this.escape(schema) : "CURRENT_SCHEMA()"}`,
		      `AND TABLE_NAME = ${this.escape(tableName)}`,
		      ";"
		    ]);
		  }
		  addColumnQuery(table, key, dataType, options) {
		    if (options) {
		      (0, import_check.rejectInvalidOptions)(
		        "addColumnQuery",
		        this.dialect.name,
		        import_query_generator.ADD_COLUMN_QUERY_SUPPORTABLE_OPTIONS,
		        ADD_COLUMN_QUERY_SUPPORTED_OPTIONS,
		        options
		      );
		    }
		    return (0, import_join_sql_fragments.joinSQLFragments)([
		      "ALTER TABLE",
		      this.quoteTable(table),
		      "ADD",
		      this.quoteIdentifier(key),
		      this.attributeToSQL(dataType, {
		        context: "addColumn",
		        tableName: table,
		        foreignKey: key
		      }),
		      ";"
		    ]);
		  }
		  removeColumnQuery(tableName, attributeName, options) {
		    if (options) {
		      (0, import_check.rejectInvalidOptions)(
		        "removeColumnQuery",
		        this.dialect.name,
		        import_query_generator.REMOVE_COLUMN_QUERY_SUPPORTABLE_OPTIONS,
		        REMOVE_COLUMN_QUERY_SUPPORTED_OPTIONS,
		        options
		      );
		    }
		    return (0, import_join_sql_fragments.joinSQLFragments)([
		      "ALTER TABLE",
		      this.quoteTable(tableName),
		      "DROP",
		      this.quoteIdentifier(attributeName),
		      ";"
		    ]);
		  }
		  changeColumnQuery(tableName, attributes) {
		    const query = (...subQuerys) => (0, import_join_sql_fragments.joinSQLFragments)([
		      "ALTER TABLE",
		      this.quoteTable(tableName),
		      "ALTER COLUMN",
		      ...subQuerys,
		      ";"
		    ]);
		    const sql = [];
		    for (const attributeName in attributes) {
		      let definition = this.dataTypeMapping(tableName, attributeName, attributes[attributeName]);
		      const attrSql = [];
		      if (definition.includes("NOT NULL")) {
		        attrSql.push(query(this.quoteIdentifier(attributeName), "SET NOT NULL"));
		        definition = definition.replace("NOT NULL", "").trim();
		      } else if (!definition.includes("REFERENCES")) {
		        attrSql.push(query(this.quoteIdentifier(attributeName), "DROP NOT NULL"));
		      }
		      if (definition.includes("DEFAULT")) {
		        attrSql.push(query(this.quoteIdentifier(attributeName), "SET DEFAULT", definition.match(/DEFAULT ([^;]+)/)[1]));
		        definition = definition.replace(/(DEFAULT[^;]+)/, "").trim();
		      } else if (!definition.includes("REFERENCES")) {
		        attrSql.push(query(this.quoteIdentifier(attributeName), "DROP DEFAULT"));
		      }
		      if (/UNIQUE;*$/.test(definition)) {
		        definition = definition.replace(/UNIQUE;*$/, "");
		        attrSql.push(query("ADD UNIQUE (", this.quoteIdentifier(attributeName), ")").replace("ALTER COLUMN", ""));
		      }
		      if (definition.includes("REFERENCES")) {
		        definition = definition.replace(/.+?(?=REFERENCES)/, "");
		        attrSql.push(query("ADD FOREIGN KEY (", this.quoteIdentifier(attributeName), ")", definition).replace("ALTER COLUMN", ""));
		      } else {
		        attrSql.push(query(this.quoteIdentifier(attributeName), "TYPE", definition));
		      }
		      sql.push(attrSql.join(""));
		    }
		    return sql.join("");
		  }
		  renameColumnQuery(tableName, attrBefore, attributes) {
		    const attrString = [];
		    for (const attrName in attributes) {
		      const definition = attributes[attrName];
		      attrString.push(`'${attrBefore}' '${attrName}' ${definition}`);
		    }
		    return (0, import_join_sql_fragments.joinSQLFragments)([
		      "ALTER TABLE",
		      this.quoteTable(tableName),
		      "RENAME COLUMN",
		      attrString.join(" to "),
		      ";"
		    ]);
		  }
		  truncateTableQuery(tableName) {
		    return (0, import_join_sql_fragments.joinSQLFragments)([
		      "TRUNCATE",
		      this.quoteTable(tableName)
		    ]);
		  }
		  deleteQuery(tableName, where, options = import_object.EMPTY_OBJECT, model) {
		    const escapeOptions = { ...options, model };
		    const table = this.quoteTable(tableName);
		    const limit = options.limit && ` LIMIT ${this.escape(options.limit, escapeOptions)}`;
		    let primaryKeys = "";
		    let primaryKeysSelection = "";
		    let whereClause = this.whereQuery(where, escapeOptions);
		    if (whereClause) {
		      whereClause = ` ${whereClause}`;
		    }
		    if (limit) {
		      if (!model) {
		        throw new Error("Cannot LIMIT delete without a model.");
		      }
		      const pks = Object.values(model.primaryKeys).map((pk) => this.quoteIdentifier(pk.field)).join(",");
		      primaryKeys = model.primaryKeyAttributes.length > 1 ? `(${pks})` : pks;
		      primaryKeysSelection = pks;
		      return (0, import_join_sql_fragments.joinSQLFragments)([
		        "DELETE FROM",
		        table,
		        "WHERE",
		        primaryKeys,
		        "IN (SELECT",
		        primaryKeysSelection,
		        "FROM",
		        table,
		        whereClause,
		        limit,
		        ")"
		      ]);
		    }
		    return (0, import_join_sql_fragments.joinSQLFragments)([
		      "DELETE FROM",
		      table,
		      whereClause
		    ]);
		  }
		  attributeToSQL(attribute, options) {
		    if (!_.isPlainObject(attribute)) {
		      attribute = {
		        type: attribute
		      };
		    }
		    const attributeString = attribute.type.toString({ dialect: this.dialect });
		    let template = attributeString;
		    if (attribute.allowNull === false) {
		      template += " NOT NULL";
		    }
		    if (attribute.autoIncrement) {
		      template += " AUTOINCREMENT";
		    }
		    if (!typeWithoutDefault.has(attributeString) && attribute.type._binary !== true && (0, import_query_builder_utils.defaultValueSchemable)(attribute.defaultValue)) {
		      template += ` DEFAULT ${this.escape(attribute.defaultValue, { ...options, type: attribute.type })}`;
		    }
		    if (attribute.unique === true) {
		      template += " UNIQUE";
		    }
		    if (attribute.primaryKey) {
		      template += " PRIMARY KEY";
		    }
		    if (attribute.comment) {
		      template += ` COMMENT ${this.escape(attribute.comment, options)}`;
		    }
		    if (attribute.first) {
		      template += " FIRST";
		    }
		    if (attribute.after) {
		      template += ` AFTER ${this.quoteIdentifier(attribute.after)}`;
		    }
		    if (attribute.references) {
		      if (options && options.context === "addColumn" && options.foreignKey) {
		        const attrName = this.quoteIdentifier(options.foreignKey);
		        const fkName = this.quoteIdentifier(`${options.tableName}_${attrName}_foreign_idx`);
		        template += `, ADD CONSTRAINT ${fkName} FOREIGN KEY (${attrName})`;
		      }
		      template += ` REFERENCES ${this.quoteTable(attribute.references.table)}`;
		      if (attribute.references.key) {
		        template += ` (${this.quoteIdentifier(attribute.references.key)})`;
		      } else {
		        template += ` (${this.quoteIdentifier("id")})`;
		      }
		      if (attribute.onDelete) {
		        template += ` ON DELETE ${attribute.onDelete.toUpperCase()}`;
		      }
		      if (attribute.onUpdate) {
		        template += ` ON UPDATE ${attribute.onUpdate.toUpperCase()}`;
		      }
		    }
		    return template;
		  }
		  attributesToSQL(attributes, options) {
		    const result = {};
		    for (const key in attributes) {
		      const attribute = attributes[key];
		      result[attribute.field || key] = this.attributeToSQL(attribute, options);
		    }
		    return result;
		  }
		  dataTypeMapping(tableName, attr, dataType) {
		    if (dataType.includes("PRIMARY KEY")) {
		      dataType = dataType.replace("PRIMARY KEY", "");
		    }
		    if (dataType.includes("SERIAL")) {
		      if (dataType.includes("BIGINT")) {
		        dataType = dataType.replace("SERIAL", "BIGSERIAL");
		        dataType = dataType.replace("BIGINT", "");
		      } else if (dataType.includes("SMALLINT")) {
		        dataType = dataType.replace("SERIAL", "SMALLSERIAL");
		        dataType = dataType.replace("SMALLINT", "");
		      } else {
		        dataType = dataType.replace("INTEGER", "");
		      }
		      dataType = dataType.replace("NOT NULL", "");
		    }
		    return dataType;
		  }
		  /**
		   * Generates an SQL query that removes a foreign key from a table.
		   *
		   * @param  {string} tableName  The name of the table.
		   * @param  {string} foreignKey The name of the foreign key constraint.
		   * @returns {string}            The generated sql query.
		   * @private
		   */
		  dropForeignKeyQuery(tableName, foreignKey) {
		    return (0, import_join_sql_fragments.joinSQLFragments)([
		      "ALTER TABLE",
		      this.quoteTable(tableName),
		      "DROP FOREIGN KEY",
		      this.quoteIdentifier(foreignKey),
		      ";"
		    ]);
		  }
		  addLimitAndOffset(options) {
		    if (options.offset) {
		      return ` LIMIT ${this.escape(options.limit ?? null, options)} OFFSET ${this.escape(options.offset, options)}`;
		    }
		    if (options.limit != null) {
		      return ` LIMIT ${this.escape(options.limit, options)}`;
		    }
		    return "";
		  }
		  /**
		   * Quote identifier in sql clause
		   *
		   * @param {string} identifier
		   * @param {boolean} force
		   *
		   * @returns {string}
		   */
		  quoteIdentifier(identifier, force) {
		    const optForceQuote = force || false;
		    const optQuoteIdentifiers = this.options.quoteIdentifiers !== false;
		    if (optForceQuote === true || optQuoteIdentifiers !== false || identifier.includes(".") || identifier.includes("->") || SNOWFLAKE_RESERVED_WORDS.includes(identifier.toLowerCase())) {
		      return (0, import_dialect.quoteIdentifier)(identifier, this.dialect.TICK_CHAR_LEFT, this.dialect.TICK_CHAR_RIGHT);
		    }
		    return identifier;
		  }
		}
		
		return queryGenerator;
	}

	var queryInterface;
	var hasRequiredQueryInterface;

	function requireQueryInterface () {
		if (hasRequiredQueryInterface) return queryInterface;
		hasRequiredQueryInterface = 1;
		var __defProp = Object.defineProperty;
		var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
		var __getOwnPropNames = Object.getOwnPropertyNames;
		var __hasOwnProp = Object.prototype.hasOwnProperty;
		var __export = (target, all) => {
		  for (var name in all)
		    __defProp(target, name, { get: all[name], enumerable: true });
		};
		var __copyProps = (to, from, except, desc) => {
		  if (from && typeof from === "object" || typeof from === "function") {
		    for (let key of __getOwnPropNames(from))
		      if (!__hasOwnProp.call(to, key) && key !== except)
		        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
		  }
		  return to;
		};
		var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
		var query_interface_exports = {};
		__export(query_interface_exports, {
		  SnowflakeQueryInterface: () => SnowflakeQueryInterface
		});
		queryInterface = __toCommonJS(query_interface_exports);
		var import_object = object$1;
		var import_sql = sql;
		const { AbstractQueryInterface } = queryInterface$8;
		const { QueryTypes } = queryTypes;
		class SnowflakeQueryInterface extends AbstractQueryInterface {
		  /** @override */
		  async upsert(tableName, insertValues, updateValues, where, options) {
		    if (options.bind) {
		      (0, import_sql.assertNoReservedBind)(options.bind);
		    }
		    options = { ...options };
		    options.type = QueryTypes.UPSERT;
		    options.updateOnDuplicate = Object.keys(updateValues);
		    const model = options.model;
		    const modelDefinition = model.modelDefinition;
		    const { query, bind } = this.queryGenerator.insertQuery(tableName, insertValues, (0, import_object.getObjectFromMap)(modelDefinition.attributes), options);
		    delete options.replacements;
		    options.bind = (0, import_sql.combineBinds)(options.bind, bind);
		    return await this.sequelize.queryRaw(query, options);
		  }
		}
		
		return queryInterface;
	}

	var snowflake;
	var hasRequiredSnowflake;

	function requireSnowflake () {
		if (hasRequiredSnowflake) return snowflake;
		hasRequiredSnowflake = 1;
		var __create = Object.create;
		var __defProp = Object.defineProperty;
		var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
		var __getOwnPropNames = Object.getOwnPropertyNames;
		var __getProtoOf = Object.getPrototypeOf;
		var __hasOwnProp = Object.prototype.hasOwnProperty;
		var __export = (target, all) => {
		  for (var name in all)
		    __defProp(target, name, { get: all[name], enumerable: true });
		};
		var __copyProps = (to, from, except, desc) => {
		  if (from && typeof from === "object" || typeof from === "function") {
		    for (let key of __getOwnPropNames(from))
		      if (!__hasOwnProp.call(to, key) && key !== except)
		        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
		  }
		  return to;
		};
		var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
		  // If the importer is in node compatibility mode or this is not an ESM
		  // file that has been converted to a CommonJS file using a Babel-
		  // compatible transform (i.e. "__esModule" has not been set), then set
		  // "default" to the CommonJS "module.exports" for node compatibility.
		  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
		  mod
		));
		var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
		var snowflake_exports = {};
		__export(snowflake_exports, {
		  SnowflakeDialect: () => SnowflakeDialect
		});
		snowflake = __toCommonJS(snowflake_exports);
		var import_sql = sql;
		var import_abstract = requireAbstract();
		var import_connection_manager = requireConnectionManager();
		var DataTypes = __toESM(requireDataTypes());
		var import_query = requireQuery();
		var import_query_generator = requireQueryGenerator();
		var import_query_interface = requireQueryInterface();
		class SnowflakeDialect extends import_abstract.AbstractDialect {
		  static supports = import_abstract.AbstractDialect.extendSupport({
		    "VALUES ()": true,
		    "LIMIT ON UPDATE": true,
		    lock: true,
		    forShare: "LOCK IN SHARE MODE",
		    settingIsolationLevelDuringTransaction: false,
		    inserts: {
		      ignoreDuplicates: " IGNORE"
		      // disable for now, but could be enable by approach below
		      // https://stackoverflow.com/questions/54828745/how-to-migrate-on-conflict-do-nothing-from-postgresql-to-snowflake
		      // updateOnDuplicate: true
		    },
		    index: {
		      collate: false,
		      length: true,
		      parser: true,
		      type: true,
		      using: 1
		    },
		    constraints: {
		      deferrable: true,
		      check: false,
		      removeOptions: { cascade: true }
		    },
		    indexViaAlter: true,
		    indexHints: true,
		    schemas: true,
		    multiDatabases: true,
		    dataTypes: {
		      COLLATE_BINARY: true
		    },
		    REGEXP: true,
		    globalTimeZoneConfig: true
		  });
		  dataTypesDocumentationUrl = "https://docs.snowflake.com/en/sql-reference/data-types.html";
		  // TODO: fix the minimum supported version
		  defaultVersion = "5.7.0";
		  Query = import_query.SnowflakeQuery;
		  TICK_CHAR_LEFT = '"';
		  TICK_CHAR_RIGHT = '"';
		  connectionManager;
		  queryGenerator;
		  queryInterface;
		  constructor(sequelize) {
		    super(sequelize, DataTypes, "snowflake");
		    this.connectionManager = new import_connection_manager.SnowflakeConnectionManager(this, sequelize);
		    this.queryGenerator = new import_query_generator.SnowflakeQueryGenerator({
		      dialect: this,
		      sequelize
		    });
		    this.queryInterface = new import_query_interface.SnowflakeQueryInterface(sequelize, this.queryGenerator);
		  }
		  createBindCollector() {
		    return (0, import_sql.createUnspecifiedOrderedBindCollector)();
		  }
		  getDefaultSchema() {
		    return "PUBLIC";
		  }
		  static getDefaultPort() {
		    return 3306;
		  }
		}
		
		return snowflake;
	}

	var name = "@sequelize/core";
	var description = "Sequelize is a promise-based Node.js ORM tool for Postgres, MySQL, MariaDB, SQLite, Microsoft SQL Server, Amazon Redshift, Snowflake’s Data Cloud, Db2, and IBM i. It features solid transaction support, relations, eager and lazy loading, read replication and more.";
	var version = "0.0.0-development";
	var funding = [
		{
			type: "opencollective",
			url: "https://opencollective.com/sequelize"
		}
	];
	var repository = {
		type: "git",
		url: "git@github.com:sequelize/sequelize.git"
	};
	var bugs = {
		url: "https://github.com/sequelize/sequelize/issues"
	};
	var homepage = "https://sequelize.org/";
	var main = "./lib/index.js";
	var types = "./types/index.d.ts";
	var type = "commonjs";
	var exports$1 = {
		".": {
			types: "./types/index.d.ts",
			"import": "./lib/index.mjs",
			require: "./lib/index.js"
		},
		"./decorators-legacy": {
			types: "./types/decorators/legacy/index.d.ts",
			"import": "./lib/decorators/legacy/index.mjs",
			require: "./lib/decorators/legacy/index.js"
		},
		"./_non-semver-use-at-your-own-risk_/*": {
			types: "./types/*",
			"default": "./lib/*"
		},
		"./package.json": "./package.json"
	};
	var engines = {
		node: ">=16.0.0"
	};
	var files = [
		"lib",
		"types",
		"index.js"
	];
	var license = "MIT";
	var dependencies = {
		"@rollup/plugin-node-resolve": "^15.1.0",
		"@rollup/plugin-replace": "^5.0.2",
		"@types/debug": "^4.1.7",
		"@types/validator": "^13.7.5",
		"bnf-parser": "3.1.6",
		dayjs: "^1.11.5",
		debug: "^4.3.4",
		dottie: "^2.0.2",
		"fast-glob": "^3.2.12",
		inflection: "^2.0.0",
		lodash: "^4.17.21",
		"pg-connection-string": "^2.5.0",
		"pg-hstore": "^2.3.4",
		"retry-as-promised": "^7.0.3",
		rollup: "^3.25.3",
		semver: "^7.3.7",
		"sequelize-pool": "^8.0.0",
		"toposort-class": "^1.0.1",
		"type-fest": "^3.0.0",
		uuid: "^9.0.0",
		validator: "^13.7.0",
		wkx: "^0.5.0"
	};
	var devDependencies = {
		"@rollup/plugin-commonjs": "^25.0.2",
		"@rollup/plugin-json": "^6.0.0",
		"@types/chai": "4.3.5",
		"@types/chai-as-promised": "7.1.5",
		"@types/chai-datetime": "0.0.37",
		"@types/ibm_db": "2.0.12",
		"@types/lodash": "4.14.195",
		"@types/mocha": "10.0.1",
		"@types/pg": "8.10.2",
		"@types/semver": "7.5.0",
		"@types/sinon": "10.0.15",
		"@types/sinon-chai": "3.2.9",
		"@types/snowflake-sdk": "1.6.13",
		"@types/tedious": "4.0.9",
		"@types/uuid": "9.0.2",
		chai: "4.3.7",
		"chai-as-promised": "7.1.1",
		"chai-datetime": "1.8.0",
		delay: "5.0.0",
		"expect-type": "0.13.0",
		"fs-jetpack": "5.1.0",
		ibm_db: "3.2.1",
		"lcov-result-merger": "4.1.0",
		mariadb: "3.2.0",
		mocha: "10.2.0",
		moment: "2.29.4",
		mysql2: "3.4.2",
		nanoid: "^4.0.2",
		nyc: "15.1.0",
		odbc: "2.4.8",
		"p-map": "4.0.0",
		"p-props": "4.0.0",
		"p-settle": "4.1.1",
		"p-timeout": "4.1.0",
		pg: "8.11.1",
		rimraf: "5.0.1",
		sinon: "15.2.0",
		"sinon-chai": "3.7.0",
		"snowflake-sdk": "1.6.23",
		sqlite3: "5.1.6",
		tedious: "16.1.0"
	};
	var peerDependenciesMeta = {
		ibm_db: {
			optional: true
		},
		mariadb: {
			optional: true
		},
		mysql2: {
			optional: true
		},
		odbc: {
			optional: true
		},
		pg: {
			optional: true
		},
		"snowflake-sdk": {
			optional: true
		},
		sqlite3: {
			optional: true
		},
		tedious: {
			optional: true
		}
	};
	var keywords = [
		"mysql",
		"mariadb",
		"sqlite",
		"postgresql",
		"postgres",
		"pg",
		"mssql",
		"db2",
		"ibm_db",
		"sql",
		"sqlserver",
		"snowflake",
		"orm",
		"nodejs",
		"object relational mapper",
		"database",
		"db"
	];
	var publishConfig = {
		access: "public",
		tag: "alpha"
	};
	var scripts = {
		"----------------------------------------- static analysis -----------------------------------------": "",
		"test-typings": "tsc --noEmit && tsc -b test/tsconfig.json",
		"----------------------------------------- tests ---------------------------------------------------": "",
		mocha: "mocha -r ../../test/register-esbuild.js",
		"_test-unit": "yarn mocha \"test/unit/**/*.test.[tj]s\"",
		"test-integration": "yarn mocha \"test/integration/**/*.test.[tj]s\"",
		"test-smoke": "yarn mocha \"test/smoke/**/*.test.[tj]s\" --timeout 600000",
		teaser: "ts-node test/teaser.ts",
		test: "yarn build && yarn test-typings && yarn teaser && yarn _test-unit && yarn test-integration",
		"----------------------------------------- coverage ------------------------------------------------": "",
		cover: "rimraf coverage && yarn teaser && yarn cover-integration && yarn cover-unit && yarn merge-coverage",
		"cover-integration": "cross-env COVERAGE=true nyc --reporter=lcovonly yarn mocha \"test/integration/**/*.test.[tj]s\" && node -e \"require('fs').renameSync('coverage/lcov.info', 'coverage/integration.info')\"",
		"cover-unit": "cross-env COVERAGE=true nyc --reporter=lcovonly yarn mocha \"test/unit/**/*.test.[tj]s\" && node -e \"require('fs').renameSync('coverage/lcov.info', 'coverage/unit.info')\"",
		"merge-coverage": "lcov-result-merger \"coverage/*.info\" \"coverage/lcov.info\"",
		"----------------------------------------- unit tests ---------------------------------------------": "",
		"test-unit-mariadb": "cross-env DIALECT=mariadb yarn _test-unit",
		"test-unit-mysql": "cross-env DIALECT=mysql yarn _test-unit",
		"test-unit-postgres": "cross-env DIALECT=postgres yarn _test-unit",
		"test-unit-sqlite": "cross-env DIALECT=sqlite yarn _test-unit",
		"test-unit-mssql": "cross-env DIALECT=mssql yarn _test-unit",
		"test-unit-db2": "cross-env DIALECT=db2 yarn _test-unit",
		"test-unit-ibmi": "cross-env DIALECT=ibmi yarn _test-unit",
		"test-unit-snowflake": "cross-env DIALECT=snowflake yarn _test-unit",
		"test-unit-all": "yarn test-unit-mariadb && yarn test-unit-mysql && yarn test-unit-postgres && yarn test-unit-mssql && yarn test-unit-sqlite && yarn test-unit-snowflake && yarn test-unit-db2 && yarn test-unit-ibmi",
		"test-unit": "yarn test-unit-all",
		"----------------------------------------- integration tests ---------------------------------------------": "",
		"test-integration-mariadb": "cross-env DIALECT=mariadb yarn test-integration",
		"test-integration-mysql": "cross-env DIALECT=mysql yarn test-integration",
		"test-integration-postgres": "cross-env DIALECT=postgres yarn test-integration",
		"test-integration-postgres-native": "cross-env DIALECT=postgres-native yarn test-integration",
		"test-integration-sqlite": "cross-env DIALECT=sqlite yarn test-integration",
		"test-integration-mssql": "cross-env DIALECT=mssql yarn test-integration",
		"test-integration-db2": "cross-env DIALECT=db2 yarn test-integration",
		"test-integration-ibmi": "cross-env DIALECT=ibmi yarn test-integration",
		"test-integration-snowflake": "cross-env DIALECT=snowflake yarn test-integration",
		"test-integration-all": "yarn test-integration-mariadb && yarn test-integration-mysql && yarn test-integration-postgres && yarn test-integration-postgres-native && yarn test-integration-sqlite && yarn test-integration-mssql && yarn test-integration-db2 && yarn test-integration-ibmi && yarn test-integration-snowflake",
		"----------------------------------------- all tests ---------------------------------------------": "",
		"test-mariadb": "cross-env DIALECT=mariadb yarn test",
		"test-mysql": "cross-env DIALECT=mysql yarn test",
		"test-sqlite": "cross-env DIALECT=sqlite yarn test",
		"test-postgres": "cross-env DIALECT=postgres yarn test",
		"test-postgres-native": "cross-env DIALECT=postgres-native yarn test",
		"test-mssql": "cross-env DIALECT=mssql yarn test",
		"test-db2": "cross-env DIALECT=db2 yarn test",
		"test-ibmi": "cross-env DIALECT=ibmi yarn test",
		"----------------------------------------- development ---------------------------------------------": "",
		build: "node ../../build-packages.mjs core",
		"build-browser": "rollup --config build/rollup.config.mjs"
	};
	var support = true;
	var require$$53 = {
		name: name,
		description: description,
		version: version,
		funding: funding,
		repository: repository,
		bugs: bugs,
		homepage: homepage,
		main: main,
		types: types,
		type: type,
		exports: exports$1,
		engines: engines,
		files: files,
		license: license,
		dependencies: dependencies,
		devDependencies: devDependencies,
		peerDependenciesMeta: peerDependenciesMeta,
		keywords: keywords,
		publishConfig: publishConfig,
		scripts: scripts,
		support: support
	};

	var sequelize;
	var hasRequiredSequelize;

	function requireSequelize () {
		if (hasRequiredSequelize) return sequelize;
		hasRequiredSequelize = 1;
		var __create = Object.create;
		var __defProp = Object.defineProperty;
		var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
		var __getOwnPropNames = Object.getOwnPropertyNames;
		var __getProtoOf = Object.getPrototypeOf;
		var __hasOwnProp = Object.prototype.hasOwnProperty;
		var __export = (target, all) => {
		  for (var name in all)
		    __defProp(target, name, { get: all[name], enumerable: true });
		};
		var __copyProps = (to, from, except, desc) => {
		  if (from && typeof from === "object" || typeof from === "function") {
		    for (let key of __getOwnPropNames(from))
		      if (!__hasOwnProp.call(to, key) && key !== except)
		        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
		  }
		  return to;
		};
		var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
		  // If the importer is in node compatibility mode or this is not an ESM
		  // file that has been converted to a CommonJS file using a Babel-
		  // compatible transform (i.e. "__esModule" has not been set), then set
		  // "default" to the CommonJS "module.exports" for node compatibility.
		  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
		  mod
		));
		var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
		var sequelize_exports = {};
		__export(sequelize_exports, {
		  Sequelize: () => Sequelize,
		  and: () => and,
		  or: () => or
		});
		sequelize = __toCommonJS(sequelize_exports);
		var import_isPlainObject = __toESM(isPlainObject_1);
		var import_retry_as_promised = __toESM(dist);
		var import_data_types_utils = requireDataTypesUtils();
		var import_association_path = associationPath;
		var import_attribute = requireAttribute();
		var import_identifier = identifier_1;
		var import_json_path = jsonPath_1;
		var import_value = value;
		var import_list = list_1;
		var import_sql = sql_1;
		var import_cast = requireCast();
		var import_col = col_1;
		var import_fn = fn_1;
		var import_json = json_1;
		var import_literal = literal_1;
		var import_where = requireWhere();
		var import_model_internals = requireModelInternals();
		var import_sequelize_typescript = sequelizeTypescript;
		var import_sqlite_utils = sqliteUtils;
		var import_transaction = transaction;
		var import_check = requireCheck();
		var import_deprecations = deprecations;
		var import_model_utils = requireModelUtils();
		var import_sql2 = sql;
		var import_string = string$2;
		var import_url = url;
		var import_import_models = importModels_1;
		const _ = lodashExports;
		const { Model } = requireModel();
		const DataTypes = dataTypes$8;
		const { ConstraintChecking, Deferrable } = deferrable;
		const { ModelManager } = modelManager;
		const { QueryTypes } = queryTypes;
		const { TableHints } = tableHints;
		const { IndexHints } = indexHints;
		const sequelizeErrors = errors;
		const { Association } = requireAssociations();
		const Validator = validatorExtras.validator;
		const { Op } = operators;
		const deprecations$1 = deprecations;
		const { AbstractQueryInterface } = queryInterface$8;
		const { BelongsTo } = requireBelongsTo();
		const { HasOne } = requireHasOne();
		const { BelongsToMany } = requireBelongsToMany();
		const { HasMany } = requireHasMany();

		class Sequelize extends import_sequelize_typescript.SequelizeTypeScript {
		  /**
		   * Instantiate sequelize with name of database, username and password.
		   *
		   * @example
		   * // without password / with blank password
		   * const sequelize = new Sequelize('database', 'username', null, {
		   *   dialect: 'mysql'
		   * })
		   *
		   * // with password and options
		   * const sequelize = new Sequelize('my_database', 'john', 'doe', {
		   *   dialect: 'postgres'
		   * })
		   *
		   * // with database, username, and password in the options object
		   * const sequelize = new Sequelize({ database, username, password, dialect: 'mssql' });
		   *
		   * // with uri
		   * const sequelize = new Sequelize('mysql://localhost:3306/database', {})
		   *
		   * // option examples
		   * const sequelize = new Sequelize('database', 'username', 'password', {
		   *   // the sql dialect of the database
		   *   // currently supported: 'mysql', 'sqlite', 'postgres', 'mssql'
		   *   dialect: 'mysql',
		   *
		   *   // custom host; default: localhost
		   *   host: 'my.server.tld',
		   *   // for postgres, you can also specify an absolute path to a directory
		   *   // containing a UNIX socket to connect over
		   *   // host: '/sockets/psql_sockets'.
		   *
		   *   // custom port; default: dialect default
		   *   port: 12345,
		   *
		   *   // custom protocol; default: 'tcp'
		   *   // postgres only, useful for Heroku
		   *   protocol: null,
		   *
		   *   // disable logging or provide a custom logging function; default: console.log
		   *   logging: false,
		   *
		   *   // you can also pass any dialect options to the underlying dialect library
		   *   // - default is empty
		   *   // - currently supported: 'mysql', 'postgres', 'mssql'
		   *   dialectOptions: {
		   *     socketPath: '/Applications/MAMP/tmp/mysql/mysql.sock',
		   *   },
		   *
		   *   // the storage engine for sqlite
		   *   // - default ':memory:'
		   *   storage: 'path/to/database.sqlite',
		   *
		   *   // disable inserting undefined values as NULL
		   *   // - default: false
		   *   omitNull: true,
		   *
		   *   // a flag for using a native library or not.
		   *   // in the case of 'pg' -- set this to true will allow SSL support
		   *   // - default: false
		   *   native: true,
		   *
		   *   // A flag that defines if connection should be over ssl or not
		   *   // - default: undefined
		   *   ssl: true,
		   *
		   *   // Specify options, which are used when sequelize.define is called.
		   *   // The following example:
		   *   //   define: { timestamps: false }
		   *   // is basically the same as:
		   *   //   Model.init(attributes, { timestamps: false });
		   *   //   sequelize.define(name, attributes, { timestamps: false });
		   *   // so defining the timestamps for each model will be not necessary
		   *   define: {
		   *     underscored: false,
		   *     freezeTableName: false,
		   *     charset: 'utf8',
		   *     dialectOptions: {
		   *       collate: 'utf8_general_ci'
		   *     },
		   *     timestamps: true
		   *   },
		   *
		   *   // similar for sync: you can define this to always force sync for models
		   *   sync: { force: true },
		   *
		   *   // pool configuration used to pool database connections
		   *   pool: {
		   *     max: 5,
		   *     idle: 30000,
		   *     acquire: 60000,
		   *   },
		   *
		   *   // isolation level of each transaction
		   *   // defaults to dialect default
		   *   isolationLevel: Transaction.ISOLATION_LEVELS.REPEATABLE_READ
		   * })
		   *
		   * @param {string}   [database] The name of the database
		   * @param {string}   [username=null] The username which is used to authenticate against the database.
		   * @param {string}   [password=null] The password which is used to authenticate against the database. Supports SQLCipher encryption for SQLite.
		   * @param {object}   [options={}] An object with options.
		   * @param {string}   [options.host='localhost'] The host of the relational database.
		   * @param {number}   [options.port] The port of the relational database.
		   * @param {string}   [options.username=null] The username which is used to authenticate against the database.
		   * @param {string}   [options.password=null] The password which is used to authenticate against the database.
		   * @param {string}   [options.database=null] The name of the database.
		   * @param {string}   [options.dialect] The dialect of the database you are connecting to. One of mysql, postgres, sqlite, db2, mariadb and mssql.
		   * @param {string}   [options.dialectModule=null] If specified, use this dialect library. For example, if you want to use pg.js instead of pg when connecting to a pg database, you should specify 'require("pg.js")' here
		   * @param {string}   [options.dialectModulePath=null] If specified, load the dialect library from this path. For example, if you want to use pg.js instead of pg when connecting to a pg database, you should specify '/path/to/pg.js' here
		   * @param {object}   [options.dialectOptions] An object of additional options, which are passed directly to the connection library
		   * @param {string}   [options.storage] Only used by sqlite. Defaults to ':memory:'
		   * @param {string}   [options.protocol='tcp'] The protocol of the relational database.
		   * @param {object}   [options.define={}] Default options for model definitions. See {@link Model.init}.
		   * @param {object}   [options.query={}] Default options for sequelize.query
		   * @param {string}   [options.schema=null] A schema to use
		   * @param {object}   [options.set={}] Default options for sequelize.set
		   * @param {object}   [options.sync={}] Default options for sequelize.sync
		   * @param {string}   [options.timezone='+00:00'] The timezone used when converting a date from the database into a JavaScript date. The timezone is also used to SET TIMEZONE when connecting to the server, to ensure that the result of NOW, CURRENT_TIMESTAMP and other time related functions have in the right timezone. For best cross platform performance use the format +/-HH:MM. Will also accept string versions of timezones supported by Intl.Locale (e.g. 'America/Los_Angeles'); this is useful to capture daylight savings time changes.
		   * @param {boolean}  [options.keepDefaultTimezone=false] A flag that defines if the default timezone is used to convert dates from the database.
		   * @param {string|boolean} [options.clientMinMessages='warning'] (Deprecated) The PostgreSQL `client_min_messages` session parameter. Set to `false` to not override the database's default.
		   * @param {boolean}  [options.standardConformingStrings=true] The PostgreSQL `standard_conforming_strings` session parameter. Set to `false` to not set the option. WARNING: Setting this to false may expose vulnerabilities and is not recommended!
		   * @param {Function} [options.logging=console.log] A function that gets executed every time Sequelize would log something. Function may receive multiple parameters but only first one is printed by `console.log`. To print all values use `(...msg) => console.log(msg)`
		   * @param {boolean}  [options.benchmark=false] Pass query execution time in milliseconds as second argument to logging function (options.logging).
		   * @param {string}   [options.queryLabel] A label to annotate queries in log output.
		   * @param {boolean}  [options.omitNull=false] A flag that defines if null values should be passed as values to CREATE/UPDATE SQL queries or not.
		   * @param {boolean}  [options.native=false] A flag that defines if native library shall be used or not. Currently only has an effect for postgres
		   * @param {boolean}  [options.ssl=undefined] A flag that defines if connection should be over ssl or not
		   * @param {boolean}  [options.replication=false] Use read / write replication. To enable replication, pass an object, with two properties, read and write. Write should be an object (a single server for handling writes), and read an array of object (several servers to handle reads). Each read/write server can have the following properties: `host`, `port`, `username`, `password`, `database`.  Connection strings can be used instead of objects.
		   * @param {object}   [options.pool] sequelize connection pool configuration
		   * @param {number}   [options.pool.max=5] Maximum number of connection in pool
		   * @param {number}   [options.pool.min=0] Minimum number of connection in pool
		   * @param {number}   [options.pool.idle=10000] The maximum time, in milliseconds, that a connection can be idle before being released.
		   * @param {number}   [options.pool.acquire=60000] The maximum time, in milliseconds, that pool will try to get connection before throwing error
		   * @param {number}   [options.pool.evict=1000] The time interval, in milliseconds, after which sequelize-pool will remove idle connections.
		   * @param {Function} [options.pool.validate] A function that validates a connection. Called with client. The default function checks that client is an object, and that its state is not disconnected
		   * @param {number}   [options.pool.maxUses=Infinity] The number of times a connection can be used before discarding it for a replacement, [`used for eventual cluster rebalancing`](https://github.com/sequelize/sequelize-pool).
		   * @param {boolean}  [options.quoteIdentifiers=true] Set to `false` to make table names and attributes case-insensitive on Postgres and skip double quoting of them.  WARNING: Setting this to false may expose vulnerabilities and is not recommended!
		   * @param {string}   [options.transactionType='DEFERRED'] Set the default transaction type. See `Sequelize.Transaction.TYPES` for possible options. Sqlite only.
		   * @param {string}   [options.isolationLevel] Set the default transaction isolation level. See `Sequelize.Transaction.ISOLATION_LEVELS` for possible options.
		   * @param {object}   [options.retry] Set of flags that control when a query is automatically retried. Accepts all options for [`retry-as-promised`](https://github.com/mickhansen/retry-as-promised).
		   * @param {Array}    [options.retry.match] Only retry a query if the error matches one of these strings.
		   * @param {number}   [options.retry.max] How many times a failing query is automatically retried.  Set to 0 to disable retrying on SQL_BUSY error.
		   * @param {number}   [options.retry.timeout] Maximum duration, in milliseconds, to retry until an error is thrown.
		   * @param {number}   [options.retry.backoffBase=100] Initial backoff duration, in milliseconds.
		   * @param {number}   [options.retry.backoffExponent=1.1] Exponent to increase backoff duration after each retry.
		   * @param {Function} [options.retry.report] Function that is executed after each retry, called with a message and the current retry options.
		   * @param {string}   [options.retry.name='unknown'] Name used when composing error/reporting messages.
		   * @param {boolean}  [options.noTypeValidation=false] Run built-in type validators on insert and update, and select with where clause, e.g. validate that arguments passed to integer fields are integer-like.
		   * @param {object}   [options.hooks] An object of global hook functions that are called before and after certain lifecycle events. Global hooks will run after any model-specific hooks defined for the same event (See `Sequelize.Model.init()` for a list).  Additionally, `beforeConnect()`, `afterConnect()`, `beforeDisconnect()`, and `afterDisconnect()` hooks may be defined here.
		   * @param {boolean}  [options.minifyAliases=false] A flag that defines if aliases should be minified (mostly useful to avoid Postgres alias character limit of 64)
		   * @param {boolean}  [options.logQueryParameters=false] A flag that defines if show bind parameters in log.
		   */
		  constructor(database, username, password, options) {
		    super();
		    if (arguments.length === 1 && _.isPlainObject(database)) {
		      options = database;
		    } else if (arguments.length === 1 && typeof database === "string" || arguments.length === 2 && _.isPlainObject(username)) {
		      options = username ? { ...username } : /* @__PURE__ */ Object.create(null);
		      _.defaultsDeep(options, (0, import_url.parseConnectionString)(arguments[0]));
		    } else {
		      options = options ? { ...options } : /* @__PURE__ */ Object.create(null);
		      _.defaults(options, {
		        database,
		        username,
		        password
		      });
		    }
		    Sequelize.hooks.runSync("beforeInit", options);
		    if (options.pool === false) {
		      throw new Error("Support for pool:false was removed in v4.0");
		    }
		    this.options = {
		      dialect: null,
		      dialectModule: null,
		      dialectModulePath: null,
		      dialectOptions: /* @__PURE__ */ Object.create(null),
		      host: "localhost",
		      protocol: "tcp",
		      define: {},
		      query: {},
		      sync: {},
		      timezone: "+00:00",
		      keepDefaultTimezone: false,
		      standardConformingStrings: true,
		      logging: console.debug,
		      omitNull: false,
		      native: false,
		      replication: false,
		      ssl: void 0,
		      // TODO [>7]: remove this option
		      quoteIdentifiers: true,
		      hooks: {},
		      retry: {
		        max: 5,
		        match: [
		          "SQLITE_BUSY: database is locked"
		        ]
		      },
		      transactionType: import_transaction.TransactionType.DEFERRED,
		      isolationLevel: null,
		      databaseVersion: null,
		      noTypeValidation: false,
		      benchmark: false,
		      minifyAliases: false,
		      logQueryParameters: false,
		      disableClsTransactions: false,
		      defaultTransactionNestMode: import_transaction.TransactionNestMode.reuse,
		      ...options,
		      pool: _.defaults(options.pool || {}, {
		        max: 5,
		        min: 0,
		        idle: 1e4,
		        acquire: 6e4,
		        evict: 1e3
		      })
		    };
		    if (!this.options.disableClsTransactions) {
		      this._setupTransactionCls();
		    }
		    if (!this.options.dialect) {
		      throw new Error("Dialect needs to be explicitly supplied as of v4.0.0");
		    }
		    if (this.options.dialect === "postgresql") {
		      this.options.dialect = "postgres";
		    }
		    if (this.options.logging === true) {
		      deprecations$1.noTrueLogging();
		      this.options.logging = console.debug;
		    }
		    if (this.options.quoteIdentifiers === false) {
		      deprecations$1.alwaysQuoteIdentifiers();
		    }
		    if (options.hooks) {
		      this.hooks.addListeners(options.hooks);
		    }
		    let Dialect;
		    switch (this.getDialect()) {
		      case "mariadb":
		        Dialect = requireMariadb().MariaDbDialect;
		        break;
		      case "mssql":
		        Dialect = requireMssql().MssqlDialect;
		        break;
		      case "mysql":
		        Dialect = requireMysql().MysqlDialect;
		        break;
		      case "postgres":
		        Dialect = requirePostgres().PostgresDialect;
		        break;
		      case "sqlite":
		        Dialect = requireSqlite().SqliteDialect;
		        break;
		      case "ibmi":
		        Dialect = requireIbmi().IBMiDialect;
		        break;
		      case "db2":
		        Dialect = requireDb2().Db2Dialect;
		        break;
		      case "snowflake":
		        Dialect = requireSnowflake().SnowflakeDialect;
		        break;
		      default:
		        throw new Error(`The dialect ${this.getDialect()} is not supported. Supported dialects: mariadb, mssql, mysql, postgres, sqlite, ibmi, db2 and snowflake.`);
		    }
		    if (!this.options.port) {
		      this.options.port = Dialect.getDefaultPort();
		    } else {
		      this.options.port = Number(this.options.port);
		    }
		    const connectionConfig = {
		      database: this.options.database,
		      username: this.options.username,
		      password: this.options.password || null,
		      host: this.options.host,
		      port: this.options.port,
		      protocol: this.options.protocol,
		      ssl: this.options.ssl,
		      dialectOptions: this.options.dialectOptions
		    };
		    if (!this.options.replication) {
		      this.options.replication = /* @__PURE__ */ Object.create(null);
		    }
		    if ((0, import_check.isString)(this.options.replication.write)) {
		      this.options.replication.write = (0, import_url.parseConnectionString)(this.options.replication.write);
		    }
		    this.options.replication.write = _.defaults(this.options.replication.write ?? {}, connectionConfig);
		    this.options.replication.write.port = Number(this.options.replication.write.port);
		    if (!this.options.replication.read) {
		      this.options.replication.read = [];
		    } else if (!Array.isArray(this.options.replication.read)) {
		      this.options.replication.read = [this.options.replication.read];
		    }
		    this.options.replication.read = this.options.replication.read.map((readEntry) => {
		      if ((0, import_check.isString)(readEntry)) {
		        readEntry = (0, import_url.parseConnectionString)(readEntry);
		      }
		      readEntry.port = Number(readEntry.port);
		      return _.defaults(readEntry, connectionConfig);
		    });
		    this.config = {
		      ...connectionConfig,
		      pool: this.options.pool,
		      native: this.options.native,
		      replication: this.options.replication,
		      dialectModule: this.options.dialectModule,
		      dialectModulePath: this.options.dialectModulePath,
		      keepDefaultTimezone: this.options.keepDefaultTimezone
		    };
		    this.dialect = new Dialect(this);
		    if ("typeValidation" in options) {
		      throw new Error("The typeValidation has been renamed to noTypeValidation, and is false by default");
		    }
		    if (!this.dialect.supports.globalTimeZoneConfig && this.options.timezone !== "+00:00") {
		      throw new Error(`Setting a custom timezone is not supported by ${this.dialect.name}, dates are always returned as UTC. Please remove the custom timezone option.`);
		    }
		    if (this.options.operatorsAliases) {
		      throw new Error("String based operators have been removed. Please use Symbol operators, read more at https://sequelize.org/docs/v7/core-concepts/model-querying-basics/#deprecated-operator-aliases");
		    }
		    this.models = {};
		    this.modelManager = new ModelManager(this);
		    this.connectionManager = this.dialect.connectionManager;
		    if (options.models) {
		      this.addModels(options.models);
		    }
		    Sequelize.hooks.runSync("afterInit", this);
		  }
		  /**
		   * Returns the specified dialect.
		   *
		   * @returns {string} The specified dialect.
		   */
		  // TODO [>=8]: rename to getDialectName or remove
		  getDialect() {
		    return this.options.dialect;
		  }
		  /**
		   * Returns the database name.
		   *
		   * @returns {string} The database name.
		   */
		  getDatabaseName() {
		    return this.config.database;
		  }
		  /**
		   * Returns an instance of AbstractQueryInterface.
		   *
		   * @returns {AbstractQueryInterface} An instance (singleton) of AbstractQueryInterface.
		   */
		  // TODO [>=8]: deprecate & remove
		  getQueryInterface() {
		    return this.queryInterface;
		  }
		  /**
		   * Define a new model, representing a table in the database.
		   *
		   * The table columns are defined by the object that is given as the second argument. Each key of the object represents a column
		   *
		   * @param {string} modelName The name of the model. The model will be stored in `sequelize.models` under this name
		   * @param {object} attributes An object, where each attribute is a column of the table. See {@link Model.init}
		   * @param {object} [options] These options are merged with the default define options provided to the Sequelize constructor and passed to Model.init()
		   *
		   * @see
		   * {@link Model.init} for a more comprehensive specification of the `options` and `attributes` objects.
		   * @see
		   * <a href="/master/manual/model-basics.html">Model Basics</a> guide
		   *
		   * @returns {Model} Newly defined model
		   *
		   * @example
		   * sequelize.define('modelName', {
		   *   columnA: {
		   *       type: DataTypes.BOOLEAN,
		   *       validate: {
		   *         is: ["[a-z]",'i'],        // will only allow letters
		   *         max: 23,                  // only allow values <= 23
		   *         isIn: {
		   *           args: [['en', 'zh']],
		   *           msg: "Must be English or Chinese"
		   *         }
		   *       },
		   *       field: 'column_a'
		   *   },
		   *   columnB: DataTypes.STRING,
		   *   columnC: 'MY VERY OWN COLUMN TYPE'
		   * });
		   *
		   * sequelize.models.modelName // The model will now be available in models under the name given to define
		   */
		  define(modelName, attributes = {}, options = {}) {
		    options.modelName = modelName;
		    options.sequelize = this;
		    const model = class extends Model {
		    };
		    model.init(attributes, options);
		    return model;
		  }
		  /**
		   * Fetch a Model which is already defined
		   *
		   * @param {string} modelName The name of a model defined with Sequelize.define
		   *
		   * @throws Will throw an error if the model is not defined (that is, if sequelize#isDefined returns false)
		   * @returns {Model} Specified model
		   */
		  model(modelName) {
		    if (!this.isDefined(modelName)) {
		      throw new Error(`${modelName} has not been defined`);
		    }
		    return this.modelManager.getModel(modelName);
		  }
		  /**
		   * Checks whether a model with the given name is defined
		   *
		   * @param {string} modelName The name of a model defined with Sequelize.define
		   *
		   * @returns {boolean} Returns true if model is already defined, otherwise false
		   */
		  isDefined(modelName) {
		    return this.modelManager.models.some((model) => model.name === modelName);
		  }
		  /**
		   * Execute a query on the DB, optionally bypassing all the Sequelize goodness.
		   *
		   * By default, the function will return two arguments: an array of results, and a metadata object, containing number of affected rows etc.
		   *
		   * If you are running a type of query where you don't need the metadata, for example a `SELECT` query, you can pass in a query type to make sequelize format the results:
		   *
		   * ```js
		   * const [results, metadata] = await sequelize.query('SELECT...'); // Raw query - use array destructuring
		   *
		   * const results = await sequelize.query('SELECT...', { type: sequelize.QueryTypes.SELECT }); // SELECT query - no destructuring
		   * ```
		   *
		   * @param {string}          sql
		   * @param {object}          [options={}] Query options.
		   * @param {boolean}         [options.raw] If true, sequelize will not try to format the results of the query, or build an instance of a model from the result
		   * @param {Transaction}     [options.transaction=null] The transaction that the query should be executed under
		   * @param {QueryTypes}      [options.type='RAW'] The type of query you are executing. The query type affects how results are formatted before they are passed back. The type is a string, but `Sequelize.QueryTypes` is provided as convenience shortcuts.
		   * @param {boolean}         [options.nest=false] If true, transforms objects with `.` separated property names into nested objects using [dottie.js](https://github.com/mickhansen/dottie.js). For example { 'user.username': 'john' } becomes { user: { username: 'john' }}. When `nest` is true, the query type is assumed to be `'SELECT'`, unless otherwise specified
		   * @param {boolean}         [options.plain=false] Sets the query type to `SELECT` and return a single row
		   * @param {object|Array}    [options.replacements] Either an object of named parameter replacements in the format `:param` or an array of unnamed replacements to replace `?` in your SQL.
		   * @param {object|Array}    [options.bind] Either an object of named bind parameter in the format `_param` or an array of unnamed bind parameter to replace `$1, $2, ...` in your SQL.
		   * @param {boolean}         [options.useMaster=false] Force the query to use the write pool, regardless of the query type.
		   * @param {Function}        [options.logging=false] A function that gets executed while running the query to log the sql.
		   * @param {Model}           [options.instance] A sequelize model instance whose Model is to be used to build the query result
		   * @param {ModelStatic<Model>}    [options.model] A sequelize model used to build the returned model instances
		   * @param {object}          [options.retry] Set of flags that control when a query is automatically retried. Accepts all options for [`retry-as-promised`](https://github.com/mickhansen/retry-as-promised).
		   * @param {Array}           [options.retry.match] Only retry a query if the error matches one of these strings.
		   * @param {Integer}         [options.retry.max] How many times a failing query is automatically retried.
		   * @param {number}          [options.retry.timeout] Maximum duration, in milliseconds, to retry until an error is thrown.
		   * @param {number}          [options.retry.backoffBase=100] Initial backoff duration, in milliseconds.
		   * @param {number}          [options.retry.backoffExponent=1.1] Exponent to increase backoff duration after each retry.
		   * @param {Function}        [options.retry.report] Function that is executed after each retry, called with a message and the current retry options.
		   * @param {string}          [options.retry.name='unknown'] Name used when composing error/reporting messages.
		   * @param {string}          [options.searchPath=DEFAULT] An optional parameter to specify the schema search_path (Postgres only)
		   * @param {boolean}         [options.supportsSearchPath] If false do not prepend the query with the search_path (Postgres only)
		   * @param {boolean}         [options.mapToModel=false] Map returned fields to model's fields if `options.model` or `options.instance` is present. Mapping will occur before building the model instance.
		   * @param {object}          [options.fieldMap] Map returned fields to arbitrary names for `SELECT` query type.
		   * @param {boolean}         [options.rawErrors=false] Set to `true` to cause errors coming from the underlying connection/database library to be propagated unmodified and unformatted. Else, the default behavior (=false) is to reinterpret errors as sequelize.errors.BaseError objects.
		   *
		   * @returns {Promise}
		   *
		   * @see {@link Model.build} for more information about instance option.
		   */
		  async query(sql2, options) {
		    options = { ...this.options.query, ...options };
		    if (typeof sql2 === "object") {
		      throw new TypeError('"sql" cannot be an object. Pass a string instead, and pass bind and replacement parameters through the "options" parameter');
		    }
		    sql2 = sql2.trim();
		    if (options.replacements) {
		      sql2 = (0, import_sql2.injectReplacements)(sql2, this.dialect, options.replacements);
		    }
		    delete options.replacements;
		    return this.queryRaw(sql2, options);
		  }
		  async queryRaw(sql2, options) {
		    var _a;
		    if (typeof sql2 !== "string") {
		      throw new TypeError("Sequelize#rawQuery requires a string as the first parameter.");
		    }
		    if (options != null && "replacements" in options) {
		      throw new TypeError(`Sequelize#rawQuery does not accept the "replacements" options.
Only bind parameters can be provided, in the dialect-specific syntax.
Use Sequelize#query if you wish to use replacements.`);
		    }
		    options = { ...this.options.query, ...options, bindParameterOrder: null };
		    let bindParameters;
		    if (options.bind != null) {
		      const isBindArray = Array.isArray(options.bind);
		      if (!(0, import_isPlainObject.default)(options.bind) && !isBindArray) {
		        throw new TypeError("options.bind must be either a plain object (for named parameters) or an array (for numeric parameters)");
		      }
		      const mappedResult = (0, import_sql2.mapBindParameters)(sql2, this.dialect);
		      for (const parameterName of mappedResult.parameterSet) {
		        if (isBindArray) {
		          if (!/[1-9][0-9]*/.test(parameterName) || options.bind.length < Number(parameterName)) {
		            throw new Error(`Query includes bind parameter "$${parameterName}", but no value has been provided for that bind parameter.`);
		          }
		        } else if (!(parameterName in options.bind)) {
		          throw new Error(`Query includes bind parameter "$${parameterName}", but no value has been provided for that bind parameter.`);
		        }
		      }
		      sql2 = mappedResult.sql;
		      options.bindParameterOrder = mappedResult.bindOrder;
		      if (mappedResult.bindOrder == null) {
		        bindParameters = options.bind;
		      } else {
		        bindParameters = mappedResult.bindOrder.map((key) => {
		          if (isBindArray) {
		            return options.bind[key - 1];
		          }
		          return options.bind[key];
		        });
		      }
		    }
		    if (options.instance && !options.model) {
		      options.model = options.instance.constructor;
		    }
		    if (!options.instance && !options.model) {
		      options.raw = true;
		    }
		    if (options.mapToModel) {
		      options.fieldMap = (_a = options.model) == null ? void 0 : _a.fieldAttributeMap;
		    }
		    options = _.defaults(options, {
		      logging: Object.hasOwn(this.options, "logging") ? this.options.logging : console.debug,
		      searchPath: Object.hasOwn(this.options, "searchPath") ? this.options.searchPath : "DEFAULT"
		    });
		    if (!options.type) {
		      if (options.model || options.nest || options.plain) {
		        options.type = QueryTypes.SELECT;
		      } else {
		        options.type = QueryTypes.RAW;
		      }
		    }
		    if (!this.dialect.supports.searchPath || !this.options.dialectOptions || !this.options.dialectOptions.prependSearchPath || options.supportsSearchPath === false) {
		      delete options.searchPath;
		    } else if (!options.searchPath) {
		      options.searchPath = "DEFAULT";
		    }
		    const checkTransaction = () => {
		      if (options.transaction && options.transaction.finished && !options.completesTransaction) {
		        const error = new Error(`${options.transaction.finished} has been called on this transaction(${options.transaction.id}), you can no longer use it. (The rejected query is attached as the 'sql' property of this error)`);
		        error.sql = sql2;
		        throw error;
		      }
		    };
		    (0, import_model_internals.setTransactionFromCls)(options, this);
		    const retryOptions = { ...this.options.retry, ...options.retry };
		    return await (0, import_retry_as_promised.default)(async () => {
		      checkTransaction();
		      const connection = options.transaction ? options.transaction.getConnection() : options.connection ? options.connection : await this.connectionManager.getConnection({
		        useMaster: options.useMaster,
		        type: options.type === "SELECT" ? "read" : "write"
		      });
		      if (this.options.dialect === "db2" && options.alter && options.alter.drop === false) {
		        connection.dropTable = false;
		      }
		      const query = new this.dialect.Query(connection, this, options);
		      try {
		        await this.hooks.runAsync("beforeQuery", options, query);
		        checkTransaction();
		        return await query.run(sql2, bindParameters, { minifyAliases: options.minifyAliases });
		      } finally {
		        await this.hooks.runAsync("afterQuery", options, query);
		        if (!options.transaction && !options.connection) {
		          this.connectionManager.releaseConnection(connection);
		        }
		      }
		    }, retryOptions);
		  }
		  /**
		   * Execute a query which would set an environment or user variable. The variables are set per connection, so this function needs a transaction.
		   * Only works for MySQL or MariaDB.
		   *
		   * @param {object} variables Object with multiple variables.
		   * @param {object} [options] query options.
		   *
		   * @returns {Promise}
		   */
		  async setSessionVariables(variables, options) {
		    options = { ...this.options.setSessionVariables, ...options };
		    if (!["mysql", "mariadb"].includes(this.options.dialect)) {
		      throw new Error("sequelize.setSessionVariables is only supported for mysql or mariadb");
		    }
		    (0, import_model_internals.setTransactionFromCls)(options, this);
		    if ((!options.transaction || !(options.transaction instanceof import_transaction.Transaction)) && !options.connection) {
		      throw new Error("You must specify either options.transaction or options.connection, as sequelize.setSessionVariables is used to set the session options of a connection");
		    }
		    options.raw = true;
		    options.plain = true;
		    options.type = "SET";
		    const query = `SET ${_.map(variables, (v, k) => `@${k} := ${typeof v === "string" ? `"${v}"` : v}`).join(", ")}`;
		    return await this.query(query, options);
		  }
		  /**
		   * Sync all defined models to the DB.
		   *
		   * @param {object} [options={}] sync options
		   * @param {boolean} [options.force=false] If force is true, each Model will run `DROP TABLE IF EXISTS`, before it tries to create its own table
		   * @param {RegExp} [options.match] Match a regex against the database name before syncing, a safety check for cases where force: true is used in tests but not live code
		   * @param {boolean|Function} [options.logging=console.log] A function that logs sql queries, or false for no logging
		   * @param {string} [options.schema='public'] The schema that the tables should be created in. This can be overridden for each table in sequelize.define
		   * @param {string} [options.searchPath=DEFAULT] An optional parameter to specify the schema search_path (Postgres only)
		   * @param {boolean} [options.hooks=true] If hooks is true then beforeSync, afterSync, beforeBulkSync, afterBulkSync hooks will be called
		   * @param {boolean|object} [options.alter=false] Alters tables to fit models. Provide an object for additional configuration. Not recommended for production use. If not further configured deletes data in columns that were removed or had their type changed in the model.
		   * @param {boolean} [options.alter.drop=true] Prevents any drop statements while altering a table when set to `false`
		   *
		   * @returns {Promise}
		   */
		  async sync(options) {
		    options = {
		      ...this.options,
		      ...this.options.sync,
		      ...options,
		      hooks: options ? options.hooks !== false : true
		    };
		    if (options.match && !options.match.test(this.config.database)) {
		      throw new Error(`Database "${this.config.database}" does not match sync match parameter "${options.match}"`);
		    }
		    if (options.hooks) {
		      await this.hooks.runAsync("beforeBulkSync", options);
		    }
		    if (options.force) {
		      await this.drop(options);
		    }
		    if (this.modelManager.models.length === 0) {
		      await this.authenticate(options);
		    } else {
		      const models = this.modelManager.getModelsTopoSortedByForeignKey();
		      if (models == null) {
		        return this._syncModelsWithCyclicReferences(options);
		      }
		      models.reverse();
		      for (const model of models) {
		        await model.sync(options);
		      }
		    }
		    if (options.hooks) {
		      await this.hooks.runAsync("afterBulkSync", options);
		    }
		    return this;
		  }
		  /**
		   * Used instead of sync() when two models reference each-other, so their foreign keys cannot be created immediately.
		   *
		   * @param {object} options - sync options
		   * @private
		   */
		  async _syncModelsWithCyclicReferences(options) {
		    if (this.dialect.name === "sqlite") {
		      await (0, import_sqlite_utils.withSqliteForeignKeysOff)(this, options, async () => {
		        for (const model of this.modelManager.models) {
		          await model.sync(options);
		        }
		      });
		      return;
		    }
		    for (const model of this.modelManager.models) {
		      await model.sync({ ...options, withoutForeignKeyConstraints: true });
		    }
		    for (const model of this.modelManager.models) {
		      await model.sync({ ...options, force: false, alter: true });
		    }
		  }
		  /**
		   * Drop all tables defined through this sequelize instance.
		   * This is done by calling {@link Model.drop} on each model.
		   *
		   * @param {object} [options] The options passed to each call to Model.drop
		   * @param {boolean|Function} [options.logging] A function that logs sql queries, or false for no logging
		   *
		   * @returns {Promise}
		   */
		  async drop(options) {
		    if (options && options.cascade) {
		      for (const model of this.modelManager.models) {
		        await model.drop(options);
		      }
		    }
		    const sortedModels = this.modelManager.getModelsTopoSortedByForeignKey();
		    if (sortedModels) {
		      for (const model of sortedModels) {
		        await model.drop(options);
		      }
		    }
		    if (this.dialect.name === "sqlite") {
		      await (0, import_sqlite_utils.withSqliteForeignKeysOff)(this, options, async () => {
		        for (const model of this.modelManager.models) {
		          await model.drop(options);
		        }
		      });
		      return;
		    }
		    for (const model of this.modelManager.models) {
		      const tableName = model.getTableName();
		      const foreignKeys = await this.queryInterface.getForeignKeyReferencesForTable(tableName, options);
		      await Promise.all(foreignKeys.map((foreignKey) => {
		        return this.queryInterface.removeConstraint(tableName, foreignKey.constraintName, options);
		      }));
		    }
		    for (const model of this.modelManager.models) {
		      await model.drop(options);
		    }
		  }
		  /**
		   * Test the connection by trying to authenticate. It runs `SELECT 1+1 AS result` query.
		   *
		   * @param {object} [options={}] query options
		   *
		   * @returns {Promise}
		   */
		  async authenticate(options) {
		    options = {
		      raw: true,
		      plain: true,
		      type: QueryTypes.SELECT,
		      ...options
		    };
		    await this.query(`SELECT 1+1 AS result${this.options.dialect === "ibmi" ? " FROM SYSIBM.SYSDUMMY1" : ""}`, options);
		  }
		  /**
		   * Get the fn for random based on the dialect
		   *
		   * @returns {Fn}
		   */
		  random() {
		    if (["postgres", "sqlite", "snowflake"].includes(this.getDialect())) {
		      return (0, import_fn.fn)("RANDOM");
		    }
		    return (0, import_fn.fn)("RAND");
		  }
		  // Global exports
		  static Fn = import_fn.Fn;
		  static Col = import_col.Col;
		  static Cast = import_cast.Cast;
		  static Literal = import_literal.Literal;
		  static Where = import_where.Where;
		  static List = import_list.List;
		  static Identifier = import_identifier.Identifier;
		  static Attribute = import_attribute.Attribute;
		  static Value = import_value.Value;
		  static AssociationPath = import_association_path.AssociationPath;
		  static JsonPath = import_json_path.JsonPath;
		  static sql = import_sql.sql;
		  // these are all available on the "sql" object, but are exposed for backwards compatibility
		  static fn = import_fn.fn;
		  static col = import_col.col;
		  static cast = import_cast.cast;
		  static literal = import_literal.literal;
		  static json = import_json.json;
		  static where = import_where.where;
		  static and = and;
		  static or = or;
		  static isModelStatic = import_model_utils.isModelStatic;
		  static isSameInitialModel = import_model_utils.isSameInitialModel;
		  static importModels = import_import_models.importModels;
		  static TransactionNestMode = import_transaction.TransactionNestMode;
		  static TransactionType = import_transaction.TransactionType;
		  static Lock = import_transaction.Lock;
		  static IsolationLevel = import_transaction.IsolationLevel;
		  log(...args) {
		    let options;
		    const last = args.at(-1);
		    if (last && _.isPlainObject(last) && Object.hasOwn(last, "logging")) {
		      options = last;
		      if (options.logging === console.log || options.logging === console.debug) {
		        args.splice(-1, 1);
		      }
		    } else {
		      options = this.options;
		    }
		    if (options.logging) {
		      if (options.logging === true) {
		        deprecations$1.noTrueLogging();
		        options.logging = console.debug;
		      }
		      if ((this.options.benchmark || options.benchmark) && options.logging === console.debug) {
		        args = [`${args[0]} Elapsed time: ${args[1]}ms`];
		      }
		      options.logging(...args);
		    }
		  }
		  /**
		   * Close all connections used by this sequelize instance, and free all references so the instance can be garbage collected.
		   *
		   * Normally this is done on process exit, so you only need to call this method if you are creating multiple instances, and want
		   * to garbage collect some of them.
		   *
		   * @returns {Promise}
		   */
		  close() {
		    return this.connectionManager.close();
		  }
		  normalizeDataType(Type) {
		    return (0, import_data_types_utils.normalizeDataType)(Type, this.dialect);
		  }
		  normalizeAttribute(attribute) {
		    if (!_.isPlainObject(attribute)) {
		      attribute = { type: attribute };
		    } else {
		      attribute = { ...attribute };
		    }
		    if (attribute.values) {
		      throw new TypeError(`
The "values" property has been removed from column definitions. The following is no longer supported:

sequelize.define('MyModel', {
  roles: {
    type: DataTypes.ENUM,
    values: ['admin', 'user'],
  },
});

Instead, define enum values like this:

sequelize.define('MyModel', {
  roles: {
    type: DataTypes.ENUM(['admin', 'user']),
  },
});

Remove the "values" property to resolve this issue.
        `.trim());
		    }
		    if (!attribute.type) {
		      return attribute;
		    }
		    attribute.type = this.normalizeDataType(attribute.type);
		    return attribute;
		  }
		}
		Sequelize.prototype.fn = Sequelize.fn;
		Sequelize.prototype.col = Sequelize.col;
		Sequelize.prototype.cast = Sequelize.cast;
		Sequelize.prototype.literal = Sequelize.literal;
		Sequelize.prototype.and = Sequelize.and;
		Sequelize.prototype.or = Sequelize.or;
		Sequelize.prototype.json = Sequelize.json;
		Sequelize.prototype.where = Sequelize.where;
		Sequelize.prototype.validate = Sequelize.prototype.authenticate;
		Object.defineProperty(Sequelize, "version", {
		  enumerable: true,
		  get() {
		    return require$$53.version;
		  }
		});
		Sequelize.Op = Op;
		Sequelize.TableHints = TableHints;
		Sequelize.IndexHints = IndexHints;
		Sequelize.Transaction = import_transaction.Transaction;
		Sequelize.GeoJsonType = requireGeoJson().GeoJsonType;
		Sequelize.prototype.Sequelize = Sequelize;
		Sequelize.prototype.QueryTypes = Sequelize.QueryTypes = QueryTypes;
		Sequelize.prototype.Validator = Sequelize.Validator = Validator;
		Sequelize.Model = Model;
		Sequelize.AbstractQueryInterface = AbstractQueryInterface;
		Sequelize.BelongsTo = BelongsTo;
		Sequelize.HasOne = HasOne;
		Sequelize.HasMany = HasMany;
		Sequelize.BelongsToMany = BelongsToMany;
		Sequelize.DataTypes = DataTypes;
		for (const dataTypeName in DataTypes) {
		  Object.defineProperty(Sequelize, dataTypeName, {
		    get() {
		      (0, import_deprecations.noSequelizeDataType)();
		      return DataTypes[dataTypeName];
		    }
		  });
		}
		Sequelize.Deferrable = Deferrable;
		Sequelize.ConstraintChecking = ConstraintChecking;
		Sequelize.prototype.Association = Sequelize.Association = Association;
		Sequelize.useInflection = import_string.useInflection;
		for (const error of Object.keys(sequelizeErrors)) {
		  Sequelize[error] = sequelizeErrors[error];
		}
		function and(...args) {
		  return { [Op.and]: args };
		}
		function or(...args) {
		  if (args.length === 1) {
		    return { [Op.or]: args[0] };
		  }
		  return { [Op.or]: args };
		}
		
		return sequelize;
	}

	const { Sequelize } = requireSequelize();
	lib$2.exports = Sequelize;
	var Sequelize_1 = lib$2.exports.Sequelize = Sequelize;
	lib$2.exports.default = Sequelize;


	var libExports = lib$2.exports;
	var index = /*@__PURE__*/getDefaultExportFromCjs(libExports);

	exports.Sequelize = Sequelize_1;
	exports.default = index;

	Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=sequelize.min.js.map
