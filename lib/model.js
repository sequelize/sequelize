'use strict';

var Utils = require('./utils')
  , BelongsTo = require('./associations/belongs-to')
  , BelongsToMany = require('./associations/belongs-to-many')
  , InstanceValidator = require('./instance-validator')
  , QueryTypes = require('./query-types')
  , sequelizeErrors = require('./errors')
  , Dottie = require('dottie')
  , Promise = require('./promise')
  , _ = require('lodash')
  , Association = require('./associations/base')
  , HasMany = require('./associations/has-many')
  , DataTypes = require('./data-types')
  , Hooks = require('./hooks')
  , associationsMixin = require('./associations/mixin')
  , defaultsOptions = { raw: true };

/**
 * A Model represents a table in the database. Instances of this class represent a database row.
 *
 * Model instances operate with the concept of a `dataValues` property, which stores the actual values represented by the instance.
 * By default, the values from dataValues can also be accessed directly from the Instance, that is:
 * ```js
 * instance.field
 * // is the same as
 * instance.get('field')
 * // is the same as
 * instance.getDataValue('field')
 * ```
 * However, if getters and/or setters are defined for `field` they will be invoked, instead of returning the value from `dataValues`.
 * Accessing properties directly or using `get` is preferred for regular use, `getDataValue` should only be used for custom getters.
 *
 * @see {Sequelize#define} for more information about getters and setters
 * @class Model
 * @mixes Hooks
 * @mixes Associations
 */
class Model {

  static get QueryInterface() {
    return this.modelManager.sequelize.getQueryInterface();
  }

  static get QueryGenerator() {
    return this.QueryInterface.QueryGenerator;
  }

  static toString() {
    return '[object SequelizeModel:'+this.name+']';
  }

  // validateIncludedElements should have been called before this method
  static _paranoidClause(model, options) {
    options = options || {};

    // Apply on each include
    // This should be handled before handling where conditions because of logic with returns
    // otherwise this code will never run on includes of a already conditionable where
    if (options.include) {
      options.include.forEach(function(include) {
        this._paranoidClause(include.model, include);
      }.bind(this));
    }

    if (!model.options.timestamps || !model.options.paranoid || options.paranoid === false) {
      // This model is not paranoid, nothing to do here;
      return options;
    }

    var deletedAtCol = model._timestampAttributes.deletedAt
      , deletedAtAttribute = model.rawAttributes[deletedAtCol]
      , deletedAtObject = {}
      , deletedAtDefaultValue = deletedAtAttribute.hasOwnProperty('defaultValue') ? deletedAtAttribute.defaultValue : null;

    deletedAtDefaultValue = deletedAtDefaultValue || { $or: { $gte: model.sequelize.literal('CURRENT_TIMESTAMP'), $eq: null } };

    deletedAtObject[deletedAtAttribute.field || deletedAtCol] = deletedAtDefaultValue;

    if (Utils._.isEmpty(options.where)) {
      options.where = deletedAtObject;
    } else {
      options.where = { $and: [deletedAtObject, options.where] };
    }

    return options;
  }

  static _addOptionalClassMethods() {
    var self = this;
    Utils._.each(this.options.classMethods || {}, function(fct, name) { self[name] = fct; });
  }

  static _addDefaultAttributes() {
    var self = this
      , tail = {}
      , head = {};

    // Add id if no primary key was manually added to definition
    // Can't use this.primaryKeys here, since this function is called before PKs are identified
    if (!_.some(this.rawAttributes, 'primaryKey')) {
      if ('id' in this.rawAttributes) {
        // Something is fishy here!
        throw new Error(`A column called 'id' was added to the attributes of \'${this.tableName}\' but not marked with 'primaryKey: true'`);
      }

      head = {
        id: {
          type: new DataTypes.INTEGER(),
          allowNull: false,
          primaryKey: true,
          autoIncrement: true,
          _autoGenerated: true
        }
      };
    }

    if (this._timestampAttributes.createdAt) {
      tail[this._timestampAttributes.createdAt] = {
        type: DataTypes.DATE,
        allowNull: false,
        _autoGenerated: true
      };
    }
    if (this._timestampAttributes.updatedAt) {
      tail[this._timestampAttributes.updatedAt] = {
        type: DataTypes.DATE,
        allowNull: false,
        _autoGenerated: true
      };
    }
    if (this._timestampAttributes.deletedAt) {
      tail[this._timestampAttributes.deletedAt] = {
        type: DataTypes.DATE,
        _autoGenerated: true
      };
    }

    var existingAttributes = Utils._.clone(self.rawAttributes);
    self.rawAttributes = {};

    Utils._.each(head, function(value, attr) {
      self.rawAttributes[attr] = value;
    });

    Utils._.each(existingAttributes, function(value, attr) {
      self.rawAttributes[attr] = value;
    });

    Utils._.each(tail, function(value, attr) {
      if (Utils._.isUndefined(self.rawAttributes[attr])) {
        self.rawAttributes[attr] = value;
      }
    });

    if (!Object.keys(this.primaryKeys).length) {
      self.primaryKeys.id = self.rawAttributes.id;
    }
  }

  static _findAutoIncrementField() {
    var fields = this.QueryGenerator.findAutoIncrementField(this);

    this.autoIncrementField = null;

    fields.forEach(function(field) {
      if (this.autoIncrementField) {
        throw new Error('Invalid Instance definition. Only one autoincrement field allowed.');
      } else {
        this.autoIncrementField = field;
      }
    }.bind(this));
  }

  static _conformOptions(options, self) {
    if (self) {
      self.$expandAttributes(options);
    }

    if (!options.include) {
      return;
    }
    // if include is not an array, wrap in an array
    if (!Array.isArray(options.include)) {
      options.include = [options.include];
    } else if (!options.include.length) {
      delete options.include;
      return;
    }

    // convert all included elements to { model: Model } form
    options.include = options.include.map(function(include) {
      include = this._conformInclude(include, self);

      return include;
    }.bind(this));
  }

  static _conformInclude(include, self) {
    var model;

    if (include._pseudo) return include;

    if (include instanceof Association) {
      if (self && include.target.name === self.name) {
        model = include.source;
      } else {
        model = include.target;
      }

      include = { model: model, association: include, as: include.as };
    } else if (include.prototype && include.prototype instanceof Model) {
      include = { model: include };
    } else if (_.isPlainObject(include)) {
      if (include.association) {
        if (self && include.association.target.name === self.name) {
          model = include.association.source;
        } else {
          model = include.association.target;
        }

        if (!include.model) {
          include.model = model;
        }
        if (!include.as) {
          include.as = include.association.as;
        }
      } else {
        model = include.model;
      }

      this._conformOptions(include, model);
    } else {
      throw new Error('Include unexpected. Element has to be either a Model, an Association or an object.');
    }

    return include;
  }

  static _expandIncludeAllElement(includes, include) {
    // check 'all' attribute provided is valid
    var all = include.all;
    delete include.all;

    if (all !== true) {
      if (!Array.isArray(all)) {
        all = [all];
      }

      var validTypes = {
        BelongsTo: true,
        HasOne: true,
        HasMany: true,
        One: ['BelongsTo', 'HasOne'],
        Has: ['HasOne', 'HasMany'],
        Many: ['HasMany']
      };

      for (var i = 0; i < all.length; i++) {
        var type = all[i];
        if (type === 'All') {
          all = true;
          break;
        }

        var types = validTypes[type];
        if (!types) {
          throw new Error('include all \'' + type + '\' is not valid - must be BelongsTo, HasOne, HasMany, One, Has, Many or All');
        }

        if (types !== true) {
          // replace type placeholder e.g. 'One' with it's constituent types e.g. 'HasOne', 'BelongsTo'
          all.splice(i, 1);
          i--;
          for (var j = 0; j < types.length; j++) {
            if (all.indexOf(types[j]) === -1) {
              all.unshift(types[j]);
              i++;
            }
          }
        }
      }
    }

    // add all associations of types specified to includes
    var nested = include.nested;
    if (nested) {
      delete include.nested;

      if (!include.include) {
        include.include = [];
      } else if (!Array.isArray(include.include)) {
        include.include = [include.include];
      }
    }

    var used = [];
    (function addAllIncludes(parent, includes) {
      Utils._.forEach(parent.associations, function(association) {
        if (all !== true && all.indexOf(association.associationType) === -1) {
          return;
        }

        // check if model already included, and skip if so
        var model = association.target;
        var as = association.options.as;

        var predicate = {model: model};
        if (as) {
          // We only add 'as' to the predicate if it actually exists
          predicate.as = as;
        }

        if (Utils._.find(includes, predicate)) {
          return;
        }

        // skip if recursing over a model already nested
        if (nested && used.indexOf(model) !== -1) {
          return;
        }
        used.push(parent);

        // include this model
        var thisInclude = Utils.cloneDeep(include);
        thisInclude.model = model;
        if (as) {
          thisInclude.as = as;
        }
        includes.push(thisInclude);

        // run recursively if nested
        if (nested) {
          addAllIncludes(model, thisInclude.include);
          if (thisInclude.include.length === 0) delete thisInclude.include;
        }
      });
      used.pop();
    })(this, includes);
  }

  static _validateIncludedElements(options, tableNames) {
    if (!options.model) options.model = this;

    tableNames = tableNames || {};
    options.includeNames = [];
    options.includeMap = {};

    /* Legacy */
    options.hasSingleAssociation = false;
    options.hasMultiAssociation = false;

    if (!options.parent) {
      options.topModel = options.model;
      options.topLimit = options.limit;
    }

    options.include = options.include.map(function (include) {
      include = this._conformInclude(include);
      include.parent = options;

      this._validateIncludedElement.call(options.model, include, tableNames, options);

      if (include.duplicating === undefined) {
        include.duplicating = include.association.isMultiAssociation;
      }

      include.hasDuplicating = include.hasDuplicating || include.duplicating;
      include.hasRequired = include.hasRequired || include.required;

      options.hasDuplicating = options.hasDuplicating || include.hasDuplicating;
      options.hasRequired = options.hasRequired || include.required;

      options.hasWhere = options.hasWhere || include.hasWhere || !!include.where;
      return include;
    }.bind(this));

    options.include.forEach(function (include) {
      include.hasParentWhere = options.hasParentWhere || !!options.where;
      include.hasParentRequired = options.hasParentRequired || !!options.required;

      if (include.subQuery !== false && options.hasDuplicating && options.topLimit) {
        if (include.duplicating) {
          include.subQuery = false;
          include.subQueryFilter = include.hasRequired;
        } else {
          include.subQuery = include.hasRequired;
          include.subQueryFilter = false;
        }
      } else {
        include.subQuery = include.subQuery || false;
        if (include.duplicating) {
          include.subQueryFilter = include.subQuery;
          include.subQuery = false;
        } else {
          include.subQueryFilter = false;
          include.subQuery = include.subQuery || (include.hasParentRequired && include.hasRequired);
        }
      }

      options.includeMap[include.as] = include;
      options.includeNames.push(include.as);

      // Set top level options
      if (options.topModel === options.model && options.subQuery === undefined && options.topLimit) {
        if (include.subQuery) {
          options.subQuery = include.subQuery;
        } else if (include.hasDuplicating) {
          options.subQuery = true;
        }
      }

      /* Legacy */
      options.hasIncludeWhere = options.hasIncludeWhere || include.hasIncludeWhere || !!include.where;
      options.hasIncludeRequired = options.hasIncludeRequired || include.hasIncludeRequired || !!include.required;

      if (include.association.isMultiAssociation || include.hasMultiAssociation) {
        options.hasMultiAssociation = true;
      }
      if (include.association.isSingleAssociation || include.hasSingleAssociation) {
        options.hasSingleAssociation = true;
      }

      return include;
    });

    if (options.topModel === options.model && options.subQuery === undefined) {
      options.subQuery = false;
    }
    return options;
  }

  static _validateIncludedElement(include, tableNames, options) {
    tableNames[include.model.getTableName()] = true;

    if (include.attributes && !options.raw) {
      include.model.$expandAttributes(include);

      // Need to make sure virtuals are mapped before setting originalAttributes
      include = Utils.mapFinderOptions(include, include.model);

      include.originalAttributes = include.attributes.slice(0);

      if (include.attributes.length) {
        _.each(include.model.primaryKeys, function (attr, key) {
          // Include the primary key if its not already take - take into account that the pk might be aliassed (due to a .field prop)
          if (!_.some(include.attributes, function (includeAttr) {
            if (attr.field !== key) {
              return Array.isArray(includeAttr) && includeAttr[0] === attr.field && includeAttr[1] === key;
            }
            return includeAttr === key;
          })) {
            include.attributes.unshift(key);
          }
        });
      }
    } else {
      include = Utils.mapFinderOptions(include, include.model);
    }

    // pseudo include just needed the attribute logic, return
    if (include._pseudo) {
      include.attributes = Object.keys(include.model.tableAttributes);
      return Utils.mapFinderOptions(include, include.model);
    }

    // check if the current Model is actually associated with the passed Model - or it's a pseudo include
    var association = include.association || this.getAssociation(include.model, include.as);

    if (!association) {
      var msg = include.model.name;

      if (include.as) {
        msg += ' (' + include.as + ')';
      }

      msg += ' is not associated to ' + this.name + '!';

      throw new Error(msg);
    }

    include.association = association;
    include.as = association.as;

    // If through, we create a pseudo child include, to ease our parsing later on
    if (include.association.through && Object(include.association.through.model) === include.association.through.model) {
      if (!include.include) include.include = [];
      var through = include.association.through;

      include.through = Utils._.defaults(include.through || {}, {
        model: through.model,
        as: through.model.name,
        association: {
          isSingleAssociation: true
        },
        _pseudo: true,
        parent: include
      });


      if (through.scope) {
        include.through.where = include.through.where ? { $and: [include.through.where, through.scope]} :  through.scope;
      }

      include.include.push(include.through);
      tableNames[through.tableName] = true;
    }

    // include.model may be the main model, while the association target may be scoped - thus we need to look at association.target/source
    var model;
    if (include.model.scoped === true) {
      // If the passed model is already scoped, keep that
      model = include.model;
    } else {
      // Otherwise use the model that was originally passed to the association
      model = include.association.target.name === include.model.name ? include.association.target : include.association.source;
    }

    model.$injectScope(include);

    // This check should happen after injecting the scope, since the scope may contain a .attributes
    if (!include.attributes) {
      include.attributes = Object.keys(include.model.tableAttributes);
    }

    include = Utils.mapFinderOptions(include, include.model);

    if (include.required === undefined) {
      include.required = !!include.where;
    }

    if (include.association.scope) {
      include.where = include.where ? { $and: [include.where, include.association.scope] }:  include.association.scope;
    }

    if (include.limit && include.separate === undefined) {
      include.separate = true;
    }

    if (include.separate === true && !(include.association instanceof HasMany)) {
      throw new Error('Only HasMany associations support include.separate');
    }

    if (include.separate === true) {
      include.duplicating = false;
    }

    if (include.separate === true && options.attributes && options.attributes.length && !_.includes(options.attributes, association.source.primaryKeyAttribute)) {
      options.attributes.push(association.source.primaryKeyAttribute);
    }

    // Validate child includes
    if (include.hasOwnProperty('include')) {
      this._validateIncludedElements.call(include.model, include, tableNames, options);
    }

    return include;
  }

  static _expandIncludeAll(options) {
    var includes = options.include;
    if (!includes) {
      return;
    }

    for (var index = 0; index < includes.length; index++) {
      var include = includes[index];

      if (include.all) {
        includes.splice(index, 1);
        index--;

        this._expandIncludeAllElement.call(this, includes, include);
      }
    }

    Utils._.forEach(includes, function(include) {
      this._expandIncludeAll.call(include.model, include);
    }.bind(this));
  }

  static init(attributes, options, modelManager) {
    var self = this;

    this.options = Utils._.extend({
      timestamps: true,
      instanceMethods: {},
      classMethods: {},
      validate: {},
      freezeTableName: false,
      underscored: false,
      underscoredAll: false,
      paranoid: false,
      rejectOnEmpty: false,
      whereCollection: null,
      schema: null,
      schemaDelimiter: '',
      defaultScope: {},
      scopes: [],
      hooks: {},
      indexes: []
    }, options || {});

    this.associations = {};
    this.modelManager = null;
    this.options.hooks = _.mapValues(this.replaceHookAliases(this.options.hooks), function (hooks) {
      if (!Array.isArray(hooks)) hooks = [hooks];
      return hooks;
    });

    this.sequelize = options.sequelize;
    this.underscored = this.underscored || this.underscoredAll;

    if (!this.options.tableName) {
      this.tableName = this.options.freezeTableName ? this.name : Utils.underscoredIf(Utils.pluralize(this.name), this.options.underscoredAll);
    } else {
      this.tableName = this.options.tableName;
    }

    this.$schema = this.options.schema;
    this.$schemaDelimiter = this.options.schemaDelimiter;

    // error check options
    _.each(options.validate, function(validator, validatorType) {
      if (_.includes(Utils._.keys(attributes), validatorType)) {
        throw new Error('A model validator function must not have the same name as a field. Model: ' + this.name + ', field/validation name: ' + validatorType);
      }

      if (!_.isFunction(validator)) {
        throw new Error('Members of the validate option must be functions. Model: ' + this.name + ', error with validate member ' + validatorType);
      }
    }.bind(this));

    this.attributes = this.rawAttributes = _.mapValues(attributes, function(attribute, name) {
      if (!Utils._.isPlainObject(attribute)) {
        attribute = { type: attribute };
      }


      attribute = this.sequelize.normalizeAttribute(attribute);

      if (attribute.references && attribute.references.model && attribute.references.model.prototype instanceof Model) {
        attribute.references.model = attribute.references.model.tableName;
      }

      if (attribute.type === undefined) {
        throw new Error('Unrecognized data type for field ' + name);
      }

      return attribute;
    }.bind(this));

    this.modelManager = modelManager;
    this.primaryKeys = {};

    // Setup names of timestamp attributes
    this._timestampAttributes = {};
    if (this.options.timestamps) {
      if (this.options.createdAt !== false) {
        this._timestampAttributes.createdAt = this.options.createdAt || Utils.underscoredIf('createdAt', this.options.underscored);
      }
      if (this.options.updatedAt !== false) {
        this._timestampAttributes.updatedAt = this.options.updatedAt || Utils.underscoredIf('updatedAt', this.options.underscored);
      }
      if (this.options.paranoid && this.options.deletedAt !== false) {
        this._timestampAttributes.deletedAt = this.options.deletedAt || Utils.underscoredIf('deletedAt', this.options.underscored);
      }
    }

    // Add head and tail default attributes (id, timestamps)
    this._addOptionalClassMethods();

    this._readOnlyAttributes = Utils._.values(this._timestampAttributes);
    this._hasReadOnlyAttributes = this._readOnlyAttributes && this._readOnlyAttributes.length;
    this._isReadOnlyAttribute = Utils._.memoize(function(key) {
      return self._hasReadOnlyAttributes && self._readOnlyAttributes.indexOf(key) !== -1;
    });

    if (this.options.instanceMethods) {
      Utils._.each(this.options.instanceMethods, function(fct, name) {
        self.prototype[name] = fct;
      });
    }

    this._addDefaultAttributes();
    this.refreshAttributes();

    this._findAutoIncrementField();

    this.$scope = this.options.defaultScope;

    if (_.isPlainObject(this.$scope)) {
      this._conformOptions(this.$scope, this);
    }

    _.each(this.options.scopes, function (scope) {
      if (_.isPlainObject(scope)) {
        this._conformOptions(scope, this);
      }
    }.bind(this));

    this.options.indexes = this.options.indexes.map(this.$conformIndex);

    return this;
  }

  static $conformIndex(index) {
    index = _.defaults(index, {
      type: '',
      parser: null
    });

    if (index.type && index.type.toLowerCase() === 'unique') {
      index.unique = true;
      delete index.type;
    }
    return index;
  }

  static refreshAttributes() {
    var self = this
      , attributeManipulation = {};

    this.prototype._customGetters = {};
    this.prototype._customSetters = {};

    Utils._.each(['get', 'set'], function(type) {
      var opt = type + 'terMethods'
        , funcs = Utils._.clone(Utils._.isObject(self.options[opt]) ? self.options[opt] : {})
        , _custom = type === 'get' ? self.prototype._customGetters : self.prototype._customSetters;

      Utils._.each(funcs, function(method, attribute) {
        _custom[attribute] = method;

        if (type === 'get') {
          funcs[attribute] = function() {
            return this.get(attribute);
          };
        }
        if (type === 'set') {
          funcs[attribute] = function(value) {
            return this.set(attribute, value);
          };
        }
      });

      Utils._.each(self.rawAttributes, function(options, attribute) {
        if (options.hasOwnProperty(type)) {
          _custom[attribute] = options[type];
        }

        if (type === 'get') {
          funcs[attribute] = function() {
            return this.get(attribute);
          };
        }
        if (type === 'set') {
          funcs[attribute] = function(value) {
            return this.set(attribute, value);
          };
        }
      });

      Utils._.each(funcs, function(fct, name) {
        if (!attributeManipulation[name]) {
          attributeManipulation[name] = {
            configurable: true
          };
        }
        attributeManipulation[name][type] = fct;
      });
    });

    this._booleanAttributes = [];
    this._dateAttributes = [];
    this._hstoreAttributes = [];
    this._rangeAttributes = [];
    this._jsonAttributes = [];
    this._geometryAttributes = [];
    this._virtualAttributes = [];
    this._defaultValues = {};
    this.prototype.validators = {};

    this.fieldRawAttributesMap = {};

    this.primaryKeys = {};
    self.options.uniqueKeys = {};

    _.each(this.rawAttributes, function(definition, name) {
      definition.type = self.sequelize.normalizeDataType(definition.type);

      definition.Model = self;
      definition.fieldName = name;
      definition._modelAttribute = true;

      if (definition.field === undefined) {
        definition.field = name;
      }

      if (definition.primaryKey === true) {
        self.primaryKeys[name] = definition;
      }

      self.fieldRawAttributesMap[definition.field] = definition;

      if (definition.type instanceof DataTypes.BOOLEAN) {
        self._booleanAttributes.push(name);
      } else if (definition.type instanceof DataTypes.DATE || definition.type instanceof DataTypes.DATEONLY) {
        self._dateAttributes.push(name);
      } else if (definition.type instanceof DataTypes.HSTORE || DataTypes.ARRAY.is(definition.type, DataTypes.HSTORE)) {
        self._hstoreAttributes.push(name);
      } else if (definition.type instanceof DataTypes.RANGE || DataTypes.ARRAY.is(definition.type, DataTypes.RANGE)) {
        self._rangeAttributes.push(name);
      } else if (definition.type instanceof DataTypes.JSON) {
        self._jsonAttributes.push(name);
      } else if (definition.type instanceof DataTypes.VIRTUAL) {
        self._virtualAttributes.push(name);
      } else if (definition.type instanceof DataTypes.GEOMETRY) {
        self._geometryAttributes.push(name);
      }

      if (definition.hasOwnProperty('defaultValue')) {
        self._defaultValues[name] = Utils._.partial(Utils.toDefaultValue, definition.defaultValue);
      }

      if (definition.hasOwnProperty('unique') && definition.unique !== false) {
        var idxName;
        if (typeof definition.unique === 'object' && definition.unique.hasOwnProperty('name')) {
          idxName = definition.unique.name;
        } else if (typeof definition.unique === 'string') {
          idxName = definition.unique;
        } else {
          idxName = self.tableName + '_' + name + '_unique';
        }

        var idx = self.options.uniqueKeys[idxName] || { fields: [] };
        idx = idx || {fields: [], msg: null};
        idx.fields.push(definition.field);
        idx.msg = idx.msg || definition.unique.msg || null;
        idx.name = idxName || false;
        idx.column = name;

        self.options.uniqueKeys[idxName] = idx;
      }

      if (definition.hasOwnProperty('validate')) {
        self.prototype.validators[name] = definition.validate;
      }

      if (definition.index === true && definition.type instanceof DataTypes.JSONB) {
        self.options.indexes.push({
          fields: [definition.field || name],
          using: 'gin'
        });

        delete definition.index;
      }
    });
    // Create a map of field to attribute names
    this.fieldAttributeMap = Utils._.reduce(this.fieldRawAttributesMap, function(map, value, key) {
      if (key !== value.fieldName) {
        map[key] = value.fieldName;
      }
      return map;
    }, {});

    this.uniqueKeys = this.options.uniqueKeys;

    this._hasBooleanAttributes = !!this._booleanAttributes.length;
    this._isBooleanAttribute = Utils._.memoize(function(key) {
      return self._booleanAttributes.indexOf(key) !== -1;
    });

    this._hasDateAttributes = !!this._dateAttributes.length;
    this._isDateAttribute = Utils._.memoize(function(key) {
      return self._dateAttributes.indexOf(key) !== -1;
    });

    this._hasHstoreAttributes = !!this._hstoreAttributes.length;
    this._isHstoreAttribute = Utils._.memoize(function(key) {
      return self._hstoreAttributes.indexOf(key) !== -1;
    });

    this._hasRangeAttributes = !!this._rangeAttributes.length;
    this._isRangeAttribute = Utils._.memoize(function(key) {
      return self._rangeAttributes.indexOf(key) !== -1;
    });

    this._hasJsonAttributes = !!this._jsonAttributes.length;
    this._isJsonAttribute = Utils._.memoize(function(key) {
      return self._jsonAttributes.indexOf(key) !== -1;
    });

    this._hasVirtualAttributes = !!this._virtualAttributes.length;
    this._isVirtualAttribute = Utils._.memoize(function(key) {
      return self._virtualAttributes.indexOf(key) !== -1;
    });

    this._hasGeometryAttributes = !!this._geometryAttributes.length;
    this._isGeometryAttribute = Utils._.memoize(function(key) {
      return self._geometryAttributes.indexOf(key) !== -1;
    });

    this._hasDefaultValues = !Utils._.isEmpty(this._defaultValues);

    this.attributes = this.rawAttributes;
    this.tableAttributes = Utils._.omit(this.rawAttributes, this._virtualAttributes);

    this.prototype._hasCustomGetters = Object.keys(this.prototype._customGetters).length;
    this.prototype._hasCustomSetters = Object.keys(this.prototype._customSetters).length;

    Object.keys(attributeManipulation).forEach((function(key){
      if (Model.prototype.hasOwnProperty(key)) {
        this.sequelize.log('Not overriding built-in method from model attribute: ' + key);
        return;
      }
      Object.defineProperty(this.prototype, key, attributeManipulation[key]);
    }).bind(this));


    this.prototype.rawAttributes = this.rawAttributes;
    this.prototype.attributes = Object.keys(this.prototype.rawAttributes);
    this.prototype._isAttribute = Utils._.memoize(function(key) {
      return self.prototype.attributes.indexOf(key) !== -1;
    });

    // Primary key convenience variables
    this.primaryKeyAttributes = Object.keys(this.primaryKeys);
    this.primaryKeyAttribute = this.primaryKeyAttributes[0];
    if (this.primaryKeyAttribute) {
      this.primaryKeyField = this.rawAttributes[this.primaryKeyAttribute].field || this.primaryKeyAttribute;
    }

    this.primaryKeyCount = this.primaryKeyAttributes.length;
    this._hasPrimaryKeys = this.options.hasPrimaryKeys = this.hasPrimaryKeys = this.primaryKeyCount > 0;

    this._isPrimaryKey = Utils._.memoize(function(key) {
      return self.primaryKeyAttributes.indexOf(key) !== -1;
    });

  }

  /**
   * Remove attribute from model definition
   * @param {String} [attribute]
   */
  static removeAttribute(attribute) {
    delete this.rawAttributes[attribute];
    this.refreshAttributes();
  }

  /**
   * Sync this Model to the DB, that is create the table. Upon success, the callback will be called with the model instance (this)
   * @see {Sequelize#sync} for options
   * @return {Promise<this>}
   */
  static sync(options) {
    options = _.extend({}, this.options, options);
    options.hooks = options.hooks === undefined ? true : !!options.hooks;

    var self = this
      , attributes = this.tableAttributes;

    return Promise.try(function () {
      if (options.hooks) {
        return self.runHooks('beforeSync', options);
      }
    }).then(function () {
      if (options.force) {
        return self.drop(options);
      }
    }).then(function () {
      return self.QueryInterface.createTable(self.getTableName(options), attributes, options, self);
    }).then(function () {
      return self.QueryInterface.showIndex(self.getTableName(options), options);
    }).then(function (indexes) {
      // Assign an auto-generated name to indexes which are not named by the user
      self.options.indexes = self.QueryInterface.nameIndexes(self.options.indexes, self.tableName);

      indexes = _.filter(self.options.indexes, function (item1) {
        return !_.some(indexes, function (item2) {
          return item1.name === item2.name;
        });
      });

      return Promise.map(indexes, function (index) {
        return self.QueryInterface.addIndex(
                  self.getTableName(options),
                  _.assign({logging: options.logging,
                            benchmark: options.benchmark,
                            transaction: options.transaction}, index),
                  self.tableName);
      });
    }).then(function () {
      if (options.hooks) {
        return self.runHooks('afterSync', options);
      }
    }).return(this);
  }

  /**
   * Drop the table represented by this Model
   * @param {Object}   [options]
   * @param {Boolean}  [options.cascade=false]   Also drop all objects depending on this table, such as views. Only works in postgres
   * @param {Function} [options.logging=false]   A function that gets executed while running the query to log the sql.
   * @param {Boolean}  [options.benchmark=false] Pass query execution time in milliseconds as second argument to logging function (options.logging).
   * @return {Promise}
   */
  static drop(options) {
    return this.QueryInterface.dropTable(this.getTableName(options), options);
  }

  static dropSchema(schema) {
    return this.QueryInterface.dropSchema(schema);
  }

  /**
   * Apply a schema to this model. For postgres, this will actually place the schema in front of the table name - `"schema"."tableName"`,
   * while the schema will be prepended to the table name for mysql and sqlite - `'schema.tablename'`.
   *
   * This method is intended for use cases where the same model is needed in multiple schemas. In such a use case it is important
   * to call `model.schema(schema, [options]).sync()` for each model to ensure the models are created in the correct schema.
   *
   * If a single default schema per model is needed, set the `options.schema='schema'` parameter during the `define()` call
   * for the model.
   *
   * @param {String} schema The name of the schema
   * @param {Object} [options]
   * @param {String} [options.schemaDelimiter='.'] The character(s) that separates the schema name from the table name
   * @param {Function} [options.logging=false] A function that gets executed while running the query to log the sql.
   * @param {Boolean}  [options.benchmark=false] Pass query execution time in milliseconds as second argument to logging function (options.logging).
   *
   * @see {Sequelize#define} for more information about setting a default schema.
   *
   * @return {this}
   */
  static schema(schema, options) { // testhint options:none

    var clone = class extends this {};
    Object.defineProperty(clone, 'name', {value: this.name});

    clone.$schema = schema;

    if (!!options) {
      if (typeof options === 'string') {
        clone.$schemaDelimiter = options;
      } else {
        if (!!options.schemaDelimiter) {
          clone.$schemaDelimiter = options.schemaDelimiter;
        }
      }
    }

    return clone;
  }

  /**
   * Get the tablename of the model, taking schema into account. The method will return The name as a string if the model has no schema,
   * or an object with `tableName`, `schema` and `delimiter` properties.
   *
   * @param {Object}   [options] The hash of options from any query. You can use one model to access tables with matching schemas by overriding `getTableName` and using custom key/values to alter the name of the table. (eg. subscribers_1, subscribers_2)
   * @param {Function} [options.logging=false] A function that gets executed while running the query to log the sql.
   * @param {Boolean}  [options.benchmark=false] Pass query execution time in milliseconds as second argument to logging function (options.logging).
   * @return {String|Object}
   */
  static getTableName(options) { // testhint options:none
    return this.QueryGenerator.addSchema(this);
  }

  /**
   * @return {Model}
   */
  static unscoped() {
    return this.scope();
  }

  /**
   * Add a new scope to the model. This is especially useful for adding scopes with includes, when the model you want to include is not available at the time this model is defined.
   *
   * By default this will throw an error if a scope with that name already exists. Pass `override: true` in the options object to silence this error.
   *
   * @param {String}          name The name of the scope. Use `defaultScope` to override the default scope
   * @param {Object|Function} scope
   * @param {Object}          [options]
   * @param {Boolean}         [options.override=false]
   */
  static addScope(name, scope, options) {
    options = _.assign({
      override: false
    }, options);

    if ((name === 'defaultScope' || name in this.options.scopes) && options.override === false) {
      throw new Error('The scope ' + name + ' already exists. Pass { override: true } as options to silence this error');
    }

    this._conformOptions(scope, this);

    if (name === 'defaultScope') {
      this.options.defaultScope = this.$scope = scope;
    } else {
      this.options.scopes[name] = scope;
    }
  }

  /**
   * Apply a scope created in `define` to the model. First let's look at how to create scopes:
   * ```js
   * var Model = sequelize.define('model', attributes, {
   *   defaultScope: {
   *     where: {
   *       username: 'dan'
   *     },
   *     limit: 12
   *   },
   *   scopes: {
   *     isALie: {
   *       where: {
   *         stuff: 'cake'
   *       }
   *     },
   *     complexFunction: function(email, accessLevel) {
   *       return {
   *         where: {
   *           email: {
   *             $like: email
   *           },
   *           accesss_level {
   *             $gte: accessLevel
   *           }
   *         }
   *       }
   *     }
   *   }
   * })
   * ```
   * Now, since you defined a default scope, every time you do Model.find, the default scope is appended to your query. Here's a couple of examples:
   * ```js
   * Model.findAll() // WHERE username = 'dan'
   * Model.findAll({ where: { age: { gt: 12 } } }) // WHERE age > 12 AND username = 'dan'
   * ```
   *
   * To invoke scope functions you can do:
   * ```js
   * Model.scope({ method: ['complexFunction' 'dan@sequelize.com', 42]}).findAll()
   * // WHERE email like 'dan@sequelize.com%' AND access_level >= 42
   * ```
   *
   * @param {Array|Object|String|null}    options* The scope(s) to apply. Scopes can either be passed as consecutive arguments, or as an array of arguments. To apply simple scopes and scope functions with no arguments, pass them as strings. For scope function, pass an object, with a `method` property. The value can either be a string, if the method does not take any arguments, or an array, where the first element is the name of the method, and consecutive elements are arguments to that method. Pass null to remove all scopes, including the default.
   * @return {Model}                      A reference to the model, with the scope(s) applied. Calling scope again on the returned model will clear the previous scope.
   */
  static scope(option) {
    var self = class extends this {}
      , options
      , scope
      , scopeName;
    Object.defineProperty(self, 'name', {value: this.name});

    self.$scope = {};
    self.scoped = true;

    if (!option) {
      return self;
    }

    options = _.flatten(arguments);
    options.forEach(function(option) {
      scope = null;
      scopeName = null;

      if (_.isPlainObject(option)) {
        if (!!option.method) {
          if (Array.isArray(option.method) && !!self.options.scopes[option.method[0]]) {
            scopeName = option.method[0];
            scope = self.options.scopes[scopeName].apply(self, option.method.splice(1));
          }
          else if (!!self.options.scopes[option.method]) {
            scopeName = option.method;
            scope = self.options.scopes[scopeName].apply(self);
          }
        } else {
          scope = option;
        }
      } else {
        if (option === 'defaultScope' && _.isPlainObject(self.options.defaultScope)) {
          scope = self.options.defaultScope;
        } else {
          scopeName = option;
          scope = self.options.scopes[scopeName];

          if (_.isFunction(scope)) {
            scope = scope();
            this._conformOptions(scope, self);
          }
        }
      }

      if (!!scope) {
        _.assignWith(self.$scope, scope, function scopeCustomizer(objectValue, sourceValue, key) {
          if (key === 'where') {
            return Array.isArray(sourceValue) ? sourceValue : _.assign(objectValue || {}, sourceValue);
          } else if ( (['attributes','include'].indexOf(key) >= 0) && Array.isArray(objectValue) && Array.isArray(sourceValue)) {
            return objectValue.concat(sourceValue);
          }

          return objectValue ? objectValue : sourceValue;
        });
      } else {
        throw new Error('Invalid scope ' + scopeName + ' called.');
      }
    }.bind(this));

    return self;
  }

  static all(options) {
    return this.findAll(options);
  }

  /**
   * Search for multiple instances.
   *
   * __Simple search using AND and =__
   * ```js
   * Model.findAll({
   *   where: {
   *     attr1: 42,
   *     attr2: 'cake'
   *   }
   * })
   * ```
   * ```sql
   * WHERE attr1 = 42 AND attr2 = 'cake'
   *```
   *
   * __Using greater than, less than etc.__
   * ```js
   *
   * Model.findAll({
   *   where: {
   *     attr1: {
   *       gt: 50
   *     },
   *     attr2: {
   *       lte: 45
   *     },
   *     attr3: {
   *       in: [1,2,3]
   *     },
   *     attr4: {
   *       ne: 5
   *     }
   *   }
   * })
   * ```
   * ```sql
   * WHERE attr1 > 50 AND attr2 <= 45 AND attr3 IN (1,2,3) AND attr4 != 5
   * ```
   * Possible options are: `$ne, $in, $not, $notIn, $gte, $gt, $lte, $lt, $like, $ilike/$iLike, $notLike, $notILike, '..'/$between, '!..'/$notBetween, '&&'/$overlap, '@>'/$contains, '<@'/$contained`
   *
   * __Queries using OR__
   * ```js
   * Model.findAll({
   *   where: {
   *     name: 'a project',
   *     $or: [
   *       {id: [1, 2, 3]},
   *       {
   *         $and: [
   *           {id: {gt: 10}},
   *           {id: {lt: 100}}
   *         ]
   *       }
   *     ]
   *   }
   * });
   * ```
   * ```sql
   * WHERE `Model`.`name` = 'a project' AND (`Model`.`id` IN (1, 2, 3) OR (`Model`.`id` > 10 AND `Model`.`id` < 100));
   * ```
   *
   * The success listener is called with an array of instances if the query succeeds.
   *
   * @param  {Object}                    [options] A hash of options to describe the scope of the search
   * @param  {Object}                    [options.where] A hash of attributes to describe your search. See above for examples.
   * @param  {Array<String>|Object}      [options.attributes] A list of the attributes that you want to select, or an object with `include` and `exclude` keys. To rename an attribute, you can pass an array, with two elements - the first is the name of the attribute in the DB (or some kind of expression such as `Sequelize.literal`, `Sequelize.fn` and so on), and the second is the name you want the attribute to have in the returned instance
   * @param  {Array<String>}             [options.attributes.include] Select all the attributes of the model, plus some additional ones. Useful for aggregations, e.g. `{ attributes: { include: [[sequelize.fn('COUNT', sequelize.col('id')), 'total']] }`
   * @param  {Array<String>}             [options.attributes.exclude] Select all the attributes of the model, except some few. Useful for security purposes e.g. `{ attributes: { exclude: ['password'] } }`
   * @param  {Boolean}                   [options.paranoid=true] If true, only non-deleted records will be returned. If false, both deleted and non-deleted records will be returned. Only applies if `options.paranoid` is true for the model.
   * @param  {Array<Object|Model>}       [options.include] A list of associations to eagerly load using a left join. Supported is either `{ include: [ Model1, Model2, ...]}` or `{ include: [{ model: Model1, as: 'Alias' }]}`. If your association are set up with an `as` (eg. `X.hasMany(Y, { as: 'Z }`, you need to specify Z in the as attribute when eager loading Y).
   * @param  {Model}                     [options.include[].model] The model you want to eagerly load
   * @param  {String}                    [options.include[].as] The alias of the relation, in case the model you want to eagerly load is aliased. For `hasOne` / `belongsTo`, this should be the singular name, and for `hasMany`, it should be the plural
   * @param  {Association}               [options.include[].association] The association you want to eagerly load. (This can be used instead of providing a model/as pair)
   * @param  {Object}                    [options.include[].where] Where clauses to apply to the child models. Note that this converts the eager load to an inner join, unless you explicitly set `required: false`
   * @param  {Boolean}                   [options.include[].or=false] Whether to bind the ON and WHERE clause together by OR instead of AND.
   * @param  {Object}                    [options.include[].on] Supply your own ON condition for the join.
   * @param  {Array<String>}             [options.include[].attributes] A list of attributes to select from the child model
   * @param  {Boolean}                   [options.include[].required] If true, converts to an inner join, which means that the parent model will only be loaded if it has any matching children. True if `include.where` is set, false otherwise.
   * @param  {Boolean}                   [options.include[].separate] If true, runs a separate query to fetch the associated instances, only supported for hasMany associations
   * @param  {Number}                    [options.include[].limit] Limit the joined rows, only supported with include.separate=true
   * @param  {Object}                    [options.include[].through.where] Filter on the join model for belongsToMany relations
   * @param  {Array}                     [options.include[].through.attributes] A list of attributes to select from the join model for belongsToMany relations
   * @param  {Array<Object|Model>}       [options.include[].include] Load further nested related models
   * @param  {String|Array|Sequelize.fn} [options.order] Specifies an ordering. If a string is provided, it will be escaped. Using an array, you can provide several columns / functions to order by. Each element can be further wrapped in a two-element array. The first element is the column / function to order by, the second is the direction. For example: `order: [['name', 'DESC']]`. In this way the column will be escaped, but the direction will not.
   * @param  {Number}                    [options.limit]
   * @param  {Number}                    [options.offset]
   * @param  {Transaction}               [options.transaction] Transaction to run query under
   * @param  {String|Object}             [options.lock] Lock the selected rows. Possible options are transaction.LOCK.UPDATE and transaction.LOCK.SHARE. Postgres also supports transaction.LOCK.KEY_SHARE, transaction.LOCK.NO_KEY_UPDATE and specific model locks with joins. See [transaction.LOCK for an example](transaction#lock)
   * @param  {Boolean}                   [options.raw] Return raw result. See sequelize.query for more information.
   * @param  {Function}                  [options.logging=false] A function that gets executed while running the query to log the sql.
   * @param  {Boolean}                   [options.benchmark=false] Pass query execution time in milliseconds as second argument to logging function (options.logging).
   * @param  {Object}                    [options.having]
   * @param  {String}                    [options.searchPath=DEFAULT] An optional parameter to specify the schema search_path (Postgres only)
   * @param  {Boolean|Error}    [options.rejectOnEmpty=false] Throws an error when no records found
   *
   * @see    {Sequelize#query}
   * @return {Promise<Array<Instance>>}
   * @alias all
   */

  static findAll(options) {
    if (options !== undefined && !_.isPlainObject(options)) {
      throw new Error('The argument passed to findAll must be an options object, use findById if you wish to pass a single primary key value');
    }
    // TODO: Remove this in the next major version (4.0)
    if (arguments.length > 1) {
      throw new Error('Please note that find* was refactored and uses only one options object from now on.');
    }
    var tableNames = {}
      , originalOptions;

    tableNames[this.getTableName(options)] = true;
    options = Utils.cloneDeep(options);

    _.defaults(options, { hooks: true, rejectOnEmpty: this.options.rejectOnEmpty });

      //set rejectOnEmpty option from model config
    options.rejectOnEmpty = options.rejectOnEmpty || this.options.rejectOnEmpty;

    return Promise.bind(this).then(function() {
      this._conformOptions(options, this);
      this.$injectScope(options);

      if (options.hooks) {
        return this.runHooks('beforeFind', options);
      }
    }).then(function() {
      this._expandIncludeAll.call(this, options);

      if (options.hooks) {
        return this.runHooks('beforeFindAfterExpandIncludeAll', options);
      }
    }).then(function() {
      if (options.include) {
        options.hasJoin = true;

        this._validateIncludedElements(options, tableNames);

        // If we're not raw, we have to make sure we include the primary key for deduplication
        if (options.attributes && !options.raw && this.primaryKeyAttribute &&  options.attributes.indexOf(this.primaryKeyAttribute) === -1) {
          options.originalAttributes = options.attributes;
          options.attributes = [this.primaryKeyAttribute].concat(options.attributes);
        }
      }

      if (!options.attributes) {
        options.attributes = Object.keys(this.tableAttributes);
      }

      // whereCollection is used for non-primary key updates
      this.options.whereCollection = options.where || null;

      Utils.mapFinderOptions(options, this);

      options = this._paranoidClause(this, options);

      if (options.hooks) {
        return this.runHooks('beforeFindAfterOptions', options);
      }
    }).then(function() {
      originalOptions = Utils.cloneDeep(options);
      options.tableNames = Object.keys(tableNames);
      return this.QueryInterface.select(this, this.getTableName(options), options);
    }).tap(function(results) {
      if (options.hooks) {
        return this.runHooks('afterFind', results, options);
      }
    }).then(function (results) {

      //rejectOnEmpty mode
      if (_.isEmpty(results) && options.rejectOnEmpty) {
        if (typeof options.rejectOnEmpty === 'function') {
          throw new options.rejectOnEmpty();
        } else if (typeof options.rejectOnEmpty === 'object') {
          throw options.rejectOnEmpty;
        } else {
          throw new sequelizeErrors.EmptyResultError();
        }
      }

      return Model.$findSeparate(results, originalOptions);
    });
  }

  static $findSeparate(results, options) {
    if (!options.include || options.raw || !results) return Promise.resolve(results);

    var original = results;
    if (options.plain) results = [results];

    if (!results.length) return original;

    return Promise.map(options.include, function (include) {
      if (!include.separate) {
        return Model.$findSeparate(
          results.reduce(function (memo, result) {
            var associations = result.get(include.association.as);

            // Might be an empty belongsTo relation
            if (!associations) return memo;

            // Force array so we can concat no matter if it's 1:1 or :M
            if (!Array.isArray(associations)) associations = [associations];

            return memo.concat(associations);
          }, []),
          _.assign(
            {},
            _.omit(options, 'include', 'attributes', 'order', 'where', 'limit', 'plain', 'scope'),
            {include: include.include || []}
          )
        );
      }

      return include.association.get(results, _.assign(
        {},
        _.omit(options, 'include', 'attributes', 'order', 'where', 'limit', 'plain'),
        _.omit(include, 'parent', 'association', 'as')
      )).then(function (map) {
        results.forEach(function (result) {
          result.set(
            include.association.as,
            map[result.get(include.association.source.primaryKeyAttribute)],
            {
              raw: true
            }
          );
        });
      });
    }).return(original);
  }

  /**
   * Search for a single instance by its primary key.
   *
   * @param  {Number|String|Buffer}      id The value of the desired instance's primary key.
   * @param  {Object}                    [options]
   * @param  {Transaction}               [options.transaction] Transaction to run query under
   * @param  {String}                    [options.searchPath=DEFAULT] An optional parameter to specify the schema search_path (Postgres only)
   *
   * @see {Model#findAll}           for a full explanation of options
   * @return {Promise<Instance>}
   * @alias findByPrimary
   */
  static findById(param, options) {
    // return Promise resolved with null if no arguments are passed
    if ([null, undefined].indexOf(param) !== -1) {
      return Promise.resolve(null);
    }

    options = Utils.cloneDeep(options) || {};

    if (typeof param === 'number' || typeof param === 'string' || Buffer.isBuffer(param)) {
      options.where = {};
      options.where[this.primaryKeyAttribute] = param;
    } else {
      throw new Error('Argument passed to findById is invalid: '+param);
    }

    // Bypass a possible overloaded findOne
    return this.findOne(options);
  }

  /**
   * Search for a single instance. This applies LIMIT 1, so the listener will always be called with a single instance.
   *
   * @param  {Object}                    [options] A hash of options to describe the scope of the search
   * @param  {Transaction}               [options.transaction] Transaction to run query under
   * @param  {String}                    [options.searchPath=DEFAULT] An optional parameter to specify the schema search_path (Postgres only)
   *
   * @see {Model#findAll}           for an explanation of options
   * @return {Promise<Instance>}
   * @alias find
   */
  static findOne(options) {
    if (options !== undefined && !_.isPlainObject(options)) {
      throw new Error('The argument passed to findOne must be an options object, use findById if you wish to pass a single primary key value');
    }
    options = Utils.cloneDeep(options);

    if (options.limit === undefined) {
      var pkVal = options.where && options.where[this.primaryKeyAttribute];

      // Don't add limit if querying directly on the pk
      if (!options.where || !(Utils.isPrimitive(pkVal) || Buffer.isBuffer(pkVal))) {
        options.limit = 1;
      }
    }

    // Bypass a possible overloaded findAll.
    return this.findAll(_.defaults(options, {
      plain: true,
      rejectOnEmpty: false
    }));
  }

  /**
   * Run an aggregation method on the specified field
   *
   * @param {String}          field The field to aggregate over. Can be a field name or *
   * @param {String}          aggregateFunction The function to use for aggregation, e.g. sum, max etc.
   * @param {Object}          [options] Query options. See sequelize.query for full options
   * @param {Object}          [options.where] A hash of search attributes.
   * @param {Function}        [options.logging=false] A function that gets executed while running the query to log the sql.
   * @param {Boolean}         [options.benchmark=false] Pass query execution time in milliseconds as second argument to logging function (options.logging).
   * @param {DataType|String} [options.dataType] The type of the result. If `field` is a field in this Model, the default will be the type of that field, otherwise defaults to float.
   * @param {boolean}         [options.distinct] Applies DISTINCT to the field being aggregated over
   * @param {Transaction}     [options.transaction] Transaction to run query under
   * @param {Boolean}         [options.plain] When `true`, the first returned value of `aggregateFunction` is cast to `dataType` and returned. If additional attributes are specified, along with `group` clauses, set `plain` to `false` to return all values of all returned rows.  Defaults to `true`
   *
   * @return {Promise<options.dataType|object>}                Returns the aggregate result cast to `options.dataType`, unless `options.plain` is false, in which case the complete data result is returned.
   */
  static aggregate(attribute, aggregateFunction, options) {
    options = Utils.cloneDeep(options);
    options = _.defaults(options, { attributes: [] });
    this._conformOptions(options, this);
    this.$injectScope(options);

    if (options.include) {
      this._expandIncludeAll(options);
      this._validateIncludedElements(options);
    }

    var attrOptions = this.rawAttributes[attribute]
      , field = attrOptions && attrOptions.field || attribute
      , aggregateColumn = this.sequelize.col(field);

    if (options.distinct) {
      aggregateColumn = this.sequelize.fn('DISTINCT', aggregateColumn);
    }
    options.attributes.push([this.sequelize.fn(aggregateFunction, aggregateColumn), aggregateFunction]);

    if (!options.dataType) {
      if (attrOptions) {
        options.dataType = attrOptions.type;
      } else {
        // Use FLOAT as fallback
        options.dataType = new DataTypes.FLOAT();
      }
    } else {
      options.dataType = this.sequelize.normalizeDataType(options.dataType);
    }

    Utils.mapOptionFieldNames(options, this);
    options = this._paranoidClause(this, options);

    return this.QueryInterface.rawSelect(this.getTableName(options), options, aggregateFunction, this);
  }

  /**
   * Count the number of records matching the provided where clause.
   *
   * If you provide an `include` option, the number of matching associations will be counted instead.
   *
   * @param {Object}        [options]
   * @param {Object}        [options.where] A hash of search attributes.
   * @param {Object}        [options.include] Include options. See `find` for details
   * @param {boolean}       [options.distinct] Apply COUNT(DISTINCT(col)) on primary key, `Model.aggregate` should be used for other columns
   * @param {Object}        [options.attributes] Used in conjunction with `group`
   * @param {Object}        [options.group] For creating complex counts. Will return multiple rows as needed.
   * @param {Transaction}   [options.transaction] Transaction to run query under
   * @param {Function}      [options.logging=false] A function that gets executed while running the query to log the sql.
   * @param {Boolean}       [options.benchmark=false] Pass query execution time in milliseconds as second argument to logging function (options.logging).
   * @param {String}        [options.searchPath=DEFAULT] An optional parameter to specify the schema search_path (Postgres only)
   *
   * @return {Promise<Integer>}
   */
  static count(options) {
    options = Utils.cloneDeep(options);
    _.defaults(options, { hooks: true });

    var col = '*';

    return Promise.bind(this).then(function() {
      this._conformOptions(options, this);
      this.$injectScope(options);

      if (options.hooks) {
        return this.runHooks('beforeCount', options);
      }
    }).then(function() {
      if (options.include) {
        col = this.name + '.' + this.primaryKeyField;
        this._expandIncludeAll(options);
        this._validateIncludedElements(options);
      }

      Utils.mapOptionFieldNames(options, this);

      options.plain = options.group ? false : true;
      options.dataType = new DataTypes.INTEGER();
      options.includeIgnoreAttributes = false;
      options.limit = null;
      options.offset = null;
      options.order = null;
      options.attributes = [];

      return this.aggregate(col, 'count', options);
    });
  }

  /**
   * Find all the rows matching your query, within a specified offset / limit, and get the total number of rows matching your query. This is very useful for paging
   *
   * ```js
   * Model.findAndCountAll({
   *   where: ...,
   *   limit: 12,
   *   offset: 12
   * }).then(function (result) {
   *   ...
   * })
   * ```
   * In the above example, `result.rows` will contain rows 13 through 24, while `result.count` will return the total number of rows that matched your query.
   *
   * When you add includes, only those which are required (either because they have a where clause, or because `required` is explicitly set to true on the include) will be added to the count part.
   *
   * Suppose you want to find all users who have a profile attached:
   * ```js
   * User.findAndCountAll({
   *   include: [
   *      { model: Profile, required: true}
   *   ],
   *   limit 3
   * });
   * ```
   * Because the include for `Profile` has `required` set it will result in an inner join, and only the users who have a profile will be counted. If we remove `required` from the include, both users with and without profiles will be counted
   *
   * @param {Object} [findOptions] See findAll
   *
   * @see {Model#findAll} for a specification of find and query options
   * @return {Promise<Object>}
   * @alias findAndCountAll
   */
  static findAndCount(options) {
    if (options !== undefined && !_.isPlainObject(options)) {
      throw new Error('The argument passed to findAndCount must be an options object, use findById if you wish to pass a single primary key value');
    }

    var self = this
      // no limit, offset, order, attributes for the options given to count()
      , countOptions = _.omit(_.clone(options), ['offset', 'limit', 'order', 'attributes']);

    this._conformOptions(countOptions, this);

    if (countOptions.include) {
      countOptions.include = _.cloneDeepWith(countOptions.include, function (element) {
        if (element instanceof Model) return element;
        if (element instanceof Association) return element;
        return undefined;
      });

      this._expandIncludeAll(countOptions);

      this._validateIncludedElements(countOptions);

      var keepNeeded = function(includes) {
        return includes.filter(function (include) {
          if (include.include) include.include = keepNeeded(include.include);

          return include.required || include.hasIncludeRequired;
        });
      };
      countOptions.include = keepNeeded(countOptions.include);

      if (countOptions.include.length) {
        // Use distinct to count the number of parent rows, instead of the number of matched includes
        countOptions.distinct = true;
      }
    }

    return self.count(countOptions).then(function(count) {
      if (count === 0) {
        return {
          count: count || 0,
          rows: []
        };
      }
      return self.findAll(options).then(function(results) {
        return {
          count: count || 0,
          rows: (results && Array.isArray(results) ? results : [])
        };
      });
    });
  }

  /**
   * Find the maximum value of field
   *
   * @param {String} field
   * @param {Object} [options] See aggregate
   * @see {Model#aggregate} for options
   *
   * @return {Promise<Any>}
   */
  static max(field, options) {
    return this.aggregate(field, 'max', options);
  }

  /**
   * Find the minimum value of field
   *
   * @param {String} field
   * @param {Object} [options] See aggregate
   * @see {Model#aggregate} for options
   *
   * @return {Promise<Any>}
   */
  static min(field, options) {
    return this.aggregate(field, 'min', options);
  }

  /**
   * Find the sum of field
   *
   * @param {String} field
   * @param {Object} [options] See aggregate
   * @see {Model#aggregate} for options
   *
   * @return {Promise<Number>}
   */
  static sum(field, options) {
    return this.aggregate(field, 'sum', options);
  }

  /**
   * Builds a new model instance. Values is an object of key value pairs, must be defined but can be empty.

   * @param {Object}  values
   * @param {Object}  [options]
   * @param {Boolean} [options.raw=false] If set to true, values will ignore field and virtual setters.
   * @param {Boolean} [options.isNewRecord=true]
   * @param {Array}   [options.include] an array of include options - Used to build prefetched/included model instances. See `set`
   *
   * @return {Instance}
   */
  static build(values, options) { // testhint options:none
    if (Array.isArray(values)) {
      return this.bulkBuild(values, options);
    }
    options = _.extend({
      isNewRecord: true,
      $schema: this.$schema,
      $schemaDelimiter: this.$schemaDelimiter
    }, options || {});

    if (options.attributes) {
      options.attributes = options.attributes.map(function(attribute) {
        return Array.isArray(attribute) ? attribute[1] : attribute;
      });
    }

    if (!options.includeValidated) {
      this._conformOptions(options, this);
      if (options.include) {
        this._expandIncludeAll(options);
        this._validateIncludedElements(options);
      }
    }

    return new this(values, options);
  }

  static bulkBuild(valueSets, options) { // testhint options:none
    options = _.extend({
      isNewRecord: true
    }, options || {});

    if (!options.includeValidated) {
      this._conformOptions(options, this);
      if (options.include) {
        this._expandIncludeAll(options);
        this._validateIncludedElements(options);
      }
    }

    if (options.attributes) {
      options.attributes = options.attributes.map(function(attribute) {
        return Array.isArray(attribute) ? attribute[1] : attribute;
      });
    }

    return valueSets.map(function(values) {
      return this.build(values, options);
    }.bind(this));
  }

  /**
   * Builds a new model instance and calls save on it.

   * @see {Instance#build}
   * @see {Instance#save}
   *
   * @param {Object}        values
   * @param {Object}        [options]
   * @param {Boolean}       [options.raw=false] If set to true, values will ignore field and virtual setters.
   * @param {Boolean}       [options.isNewRecord=true]
   * @param {Array}         [options.fields] If set, only columns matching those in fields will be saved
   * @param {Array}         [options.include] an array of include options - Used to build prefetched/included model instances
   * @param {String}        [options.onDuplicate]
   * @param {Transaction}   [options.transaction] Transaction to run query under
   * @param {Function}      [options.logging=false] A function that gets executed while running the query to log the sql.
   * @param {Boolean}       [options.benchmark=false] Pass query execution time in milliseconds as second argument to logging function (options.logging).
   * @param {String}        [options.searchPath=DEFAULT] An optional parameter to specify the schema search_path (Postgres only)
   *
   * @return {Promise<Instance>}
   */
  static create(values, options) {
    options = Utils.cloneDeep(options || {});

    return this.build(values, {
      isNewRecord: true,
      attributes: options.fields,
      include: options.include,
      raw: options.raw,
      silent: options.silent
    }).save(options);
  }

  /**
   * Find a row that matches the query, or build (but don't save) the row if none is found.
   * The successful result of the promise will be (instance, initialized) - Make sure to use .spread()
   *
   * @param {Object}   options
   * @param {Object}   options.where A hash of search attributes.
   * @param {Object}   [options.defaults] Default values to use if building a new instance
   * @param {Object}   [options.transaction] Transaction to run query under
   * @param {Function} [options.logging=false] A function that gets executed while running the query to log the sql.
   * @param {Boolean}  [options.benchmark=false] Pass query execution time in milliseconds as second argument to logging function (options.logging).
   *
   * @return {Promise<Instance,initialized>}
   * @alias findOrBuild
   */
  static findOrBuild(options) {
    if (!options || !options.where || arguments.length > 1) {
      throw new Error(
        'Missing where attribute in the options parameter passed to findOrInitialize. ' +
        'Please note that the API has changed, and is now options only (an object with where, defaults keys, transaction etc.)'
      );
    }

    var self = this
      , values;

    return self.find(options).then(function(instance) {
      if (instance === null) {
        values = Utils._.clone(options.defaults) || {};
        if (Utils._.isPlainObject(options.where)) {
          values = Utils._.defaults(values, options.where);
        }

        instance = self.build(values);

        return Promise.resolve([instance, true]);
      }

      return Promise.resolve([instance, false]);
    });
  }

  /**
   * Find a row that matches the query, or build and save the row if none is found
   * The successful result of the promise will be (instance, created) - Make sure to use .spread()
   *
   * If no transaction is passed in the `options` object, a new transaction will be created internally, to prevent the race condition where a matching row is created by another connection after the find but before the insert call.
   * However, it is not always possible to handle this case in SQLite, specifically if one transaction inserts and another tries to select before the first one has committed. In this case, an instance of sequelize.TimeoutError will be thrown instead.
   * If a transaction is created, a savepoint will be created instead, and any unique constraint violation will be handled internally.
   *
   * @param {Object}      options
   * @param {Object}      options.where where A hash of search attributes.
   * @param {Object}      [options.defaults] Default values to use if creating a new instance
   * @param {Transaction} [options.transaction] Transaction to run query under
   * @see {Model#findAll} for a full specification of find and options
   * @return {Promise<Instance,created>}
   */
  static findOrCreate(options) {
    if (!options || !options.where || arguments.length > 1) {
      throw new Error(
        'Missing where attribute in the options parameter passed to findOrCreate. '+
        'Please note that the API has changed, and is now options only (an object with where, defaults keys, transaction etc.)'
      );
    }

    options = _.assign({}, options);

    if (options.transaction === undefined && this.sequelize.constructor.cls) {
      var t = this.sequelize.constructor.cls.get('transaction');
      if (t) {
        options.transaction = t;
      }
    }

    var self = this
      , internalTransaction = !options.transaction
      , values
      , whereFields = Object.keys(options.where)
      , defaultFields
      , transaction;

    if (options.defaults) defaultFields = Object.keys(options.defaults);

    // Create a transaction or a savepoint, depending on whether a transaction was passed in
    return self.sequelize.transaction(options).bind({}).then(function (t) {
      transaction = t;
      options.transaction = t;

      return self.findOne(_.defaults({
        transaction: transaction
      }, options));
    }).then(function(instance) {
      if (instance !== null) {
        return [instance, false];
      }

      values = Utils._.clone(options.defaults) || {};
      if (Utils._.isPlainObject(options.where)) {
        values = _.defaults(values, options.where);
      }

      options.exception = true;

      return self.create(values, options).bind(this).then(function(instance) {
        if (instance.get(self.primaryKeyAttribute, { raw: true }) === null) {
          // If the query returned an empty result for the primary key, we know that this was actually a unique constraint violation
          throw new self.sequelize.UniqueConstraintError();
        }

        return [instance, true];
      }).catch(self.sequelize.UniqueConstraintError, function (err) {
        if (defaultFields) {
          if (!_.intersection(err.fields, whereFields).length && _.intersection(err.fields, defaultFields).length) {
            throw err;
          }
        }

        // Someone must have created a matching instance inside the same transaction since we last did a find. Let's find it!
        return self.findOne(_.defaults({
          transaction: internalTransaction ? null : transaction
        }, options)).then(function(instance) {
          // Sanity check, ideally we caught this at the defaultFeilds/err.fields check
          // But if we didn't and instance is null, we will throw
          if (instance === null) throw err;
          return [instance, false];
        });
      });
    }).finally(function () {
      if (internalTransaction && transaction) {
        // If we created a transaction internally (and not just a savepoint), we should clean it up
        return transaction.commit();
      }
    });
  }

  /**
   * A more performant findOrCreate that will not work under a transaction (at least not in postgres)
   * Will execute a find call, if empty then attempt to create, if unique constraint then attempt to find again
   *
   * @param {Object}      options
   * @param {Object}      options.where where A hash of search attributes.
   * @param {Object}      [options.defaults] Default values to use if creating a new instance
   * @see {Model#findAll} for a full specification of find and options
   * @return {Promise<Instance,created>}
   */
  static findCreateFind(options) {
    if (!options || !options.where) {
      throw new Error(
        'Missing where attribute in the options parameter passed to findOrCreate.'
      );
    }

    var values = Utils._.clone(options.defaults) || {};
    if (Utils._.isPlainObject(options.where)) {
      values = _.defaults(values, options.where);
    }


    return this.findOne(options).bind(this).then(function (result) {
      if (result) return [result, false];

      return this.create(values, options).bind(this).then(function (result) {
        return [result, true];
      }).catch(this.sequelize.UniqueConstraintError, function (err) {
        return this.findOne(options).then(function (result) {
          return [result, false];
        });
      });
    });
  }

  /**
   * Insert or update a single row. An update will be executed if a row which matches the supplied values on either the primary key or a unique key is found. Note that the unique index must be defined in your sequelize model and not just in the table. Otherwise you may experience a unique constraint violation, because sequelize fails to identify the row that should be updated.
   *
   * **Implementation details:**
   *
   * * MySQL - Implemented as a single query `INSERT values ON DUPLICATE KEY UPDATE values`
   * * PostgreSQL - Implemented as a temporary function with exception handling: INSERT EXCEPTION WHEN unique_constraint UPDATE
   * * SQLite - Implemented as two queries `INSERT; UPDATE`. This means that the update is executed regardless of whether the row already existed or not
   *
   * **Note** that SQLite returns undefined for created, no matter if the row was created or updated. This is because SQLite always runs INSERT OR IGNORE + UPDATE, in a single query, so there is no way to know whether the row was inserted or not.
   *
   * @param  {Object}       values
   * @param  {Object}       [options]
   * @param  {Boolean}      [options.validate=true] Run validations before the row is inserted
   * @param  {Array}        [options.fields=Object.keys(this.attributes)] The fields to insert / update. Defaults to all fields
   * @param  {Transaction}  [options.transaction] Transaction to run query under
   * @param  {Function}     [options.logging=false] A function that gets executed while running the query to log the sql.
   * @param  {Boolean}      [options.benchmark=false] Pass query execution time in milliseconds as second argument to logging function (options.logging).
   * @param  {String}       [options.searchPath=DEFAULT] An optional parameter to specify the schema search_path (Postgres only)
   *
   * @alias insertOrUpdate
   * @return {Promise<created>} Returns a boolean indicating whether the row was created or updated.
   */
  static upsert(values, options) {
    options = Utils.cloneDeep(options) || {};

    if (!options.fields) {
      options.fields = Object.keys(this.attributes);
    }

    var createdAtAttr = this._timestampAttributes.createdAt
      , updatedAtAttr = this._timestampAttributes.updatedAt
      , hadPrimary = this.primaryKeyField in values || this.primaryKeyAttribute in values
      , instance = this.build(values);

    return instance.validate(options).bind(this).then(function () {
      // Map field names
      var updatedDataValues = _.pick(instance.dataValues, Object.keys(instance._changed))
        , insertValues = Utils.mapValueFieldNames(instance.dataValues, options.fields, this)
        , updateValues = Utils.mapValueFieldNames(updatedDataValues, options.fields, this)
        , now = Utils.now(this.sequelize.options.dialect);

      // Attach createdAt
      if (createdAtAttr && !updateValues[createdAtAttr]) {
        insertValues[createdAtAttr] = this.$getDefaultTimestamp(createdAtAttr) || now;
      }
      if (updatedAtAttr && !insertValues[updatedAtAttr]) {
        insertValues[updatedAtAttr] = updateValues[updatedAtAttr] = this.$getDefaultTimestamp(updatedAtAttr) || now;
      }

      // Build adds a null value for the primary key, if none was given by the user.
      // We need to remove that because of some Postgres technicalities.
      if (!hadPrimary && this.primaryKeyAttribute && !this.rawAttributes[this.primaryKeyAttribute].defaultValue) {
        delete insertValues[this.primaryKeyField];
        delete updateValues[this.primaryKeyField];
      }

      return this.QueryInterface.upsert(this.getTableName(options), insertValues, updateValues, instance.where(), this, options);
    });
  }

  /**
   * Create and insert multiple instances in bulk.
   *
   * The success handler is passed an array of instances, but please notice that these may not completely represent the state of the rows in the DB. This is because MySQL
   * and SQLite do not make it easy to obtain back automatically generated IDs and other default values in a way that can be mapped to multiple records.
   * To obtain Instances for the newly created values, you will need to query for them again.
   *
   * If validation fails, the promise is rejected with an array-like [AggregateError](http://bluebirdjs.com/docs/api/aggregateerror.html)
   *
   * @param  {Array}        records                          List of objects (key/value pairs) to create instances from
   * @param  {Object}       [options]
   * @param  {Array}        [options.fields]                 Fields to insert (defaults to all fields)
   * @param  {Boolean}      [options.validate=false]         Should each row be subject to validation before it is inserted. The whole insert will fail if one row fails validation
   * @param  {Boolean}      [options.hooks=true]             Run before / after bulk create hooks?
   * @param  {Boolean}      [options.individualHooks=false]  Run before / after create hooks for each individual Instance? BulkCreate hooks will still be run if options.hooks is true.
   * @param  {Boolean}      [options.ignoreDuplicates=false] Ignore duplicate values for primary keys? (not supported by postgres)
   * @param  {Array}        [options.updateOnDuplicate]      Fields to update if row key already exists (on duplicate key update)? (only supported by mysql). By default, all fields are updated.
   * @param  {Transaction}  [options.transaction] Transaction to run query under
   * @param  {Function}     [options.logging=false]          A function that gets executed while running the query to log the sql.
   * @param  {Boolean}      [options.benchmark=false] Pass query execution time in milliseconds as second argument to logging function (options.logging).
   * @param  {Boolean}      [options.returning=false] Append RETURNING * to get back auto generated values (Postgres only)
   * @param  {String}       [options.searchPath=DEFAULT] An optional parameter to specify the schema search_path (Postgres only)
   *
   * @return {Promise<Array<Instance>>}
   */
  static bulkCreate(records, options) {
    if (!records.length) {
      return Promise.resolve([]);
    }

    options = Utils._.extend({
      validate: false,
      hooks: true,
      individualHooks: false,
      ignoreDuplicates: false
    }, options || {});

    options.fields = options.fields || Object.keys(this.tableAttributes);

    var dialect = this.sequelize.options.dialect;
    if (options.ignoreDuplicates && ['postgres', 'mssql'].indexOf(dialect) !== -1) {
      return Promise.reject(new Error(dialect + ' does not support the \'ignoreDuplicates\' option.'));
    }
    if (options.updateOnDuplicate && dialect !== 'mysql') {
      return Promise.reject(new Error(dialect + ' does not support the \'updateOnDuplicate\' option.'));
    }

    if (options.updateOnDuplicate) {
      // By default, all attributes except 'createdAt' can be updated
      var updatableFields = Utils._.pull(Object.keys(this.tableAttributes), 'createdAt');
      if (Utils._.isArray(options.updateOnDuplicate) && !Utils._.isEmpty(options.updateOnDuplicate)) {
        updatableFields = Utils._.intersection(updatableFields, options.updateOnDuplicate);
      }
      options.updateOnDuplicate = updatableFields;
    }

    options.model = this;

    var self = this
      , createdAtAttr = this._timestampAttributes.createdAt
      , updatedAtAttr = this._timestampAttributes.updatedAt
      , now = Utils.now(self.modelManager.sequelize.options.dialect);

    var instances = records.map(function(values) {
      return self.build(values, {isNewRecord: true});
    });

    return Promise.try(function() {
      // Run before hook
      if (options.hooks) {
        return self.runHooks('beforeBulkCreate', instances, options);
      }
    }).then(function() {
      // Validate
      if (options.validate) {
        var errors = new Promise.AggregateError()
          , validateOptions = _.clone(options);
        validateOptions.hooks = options.individualHooks;

        return Promise.map(instances, function(instance) {
          return instance.validate(validateOptions).catch(function (err) {
            errors.push({record: instance, errors: err});
          });
        }).then(function() {
          delete options.skip;
          if (errors.length) {
            throw errors;
          }
        });
      }
    }).then(function() {
      instances.forEach(function(instance) {
        var values = Utils.mapValueFieldNames(instance.dataValues, options.fields, self);

        // set createdAt/updatedAt attributes
        if (createdAtAttr && !values[createdAtAttr]) {
          values[createdAtAttr] = now;
        }
        if (updatedAtAttr && !values[updatedAtAttr]) {
          values[updatedAtAttr] = now;
        }

        instance.dataValues = values;
      });

      if (options.individualHooks) {
        // Create each instance individually
        return Promise.map(instances, function(instance) {
          var individualOptions = Utils._.clone(options);
          delete individualOptions.fields;
          delete individualOptions.individualHooks;
          delete individualOptions.ignoreDuplicates;
          individualOptions.validate = false;
          individualOptions.hooks = true;

          return instance.save(individualOptions);
        }).then(function(_instances) {
          instances = _instances;
        });
      } else {
        // Create all in one query
        // Recreate records from instances to represent any changes made in hooks or validation
        records = instances.map(function(instance) {
          return Utils._.omit(instance.dataValues, self._virtualAttributes);
        });

        // Map attributes for serial identification
        var attributes = {};
        for (var attr in self.tableAttributes) {
          attributes[attr] = self.rawAttributes[attr];
          if (self.rawAttributes[attr].field) {
            attributes[self.rawAttributes[attr].field] = self.rawAttributes[attr];
          }
        }

        return self.QueryInterface.bulkInsert(self.getTableName(options), records, options, attributes).then(function (results) {
          if (Array.isArray(results)) {
            results.forEach(function (result, i) {
              instances[i].set(self.primaryKeyAttribute, result[self.rawAttributes[self.primaryKeyAttribute].field], {raw: true});
              instances[i].isNewRecord = false;
            });
          }
          return results;
        });
      }
    }).then(function() {
      // Run after hook
      if (options.hooks) {
        return self.runHooks('afterBulkCreate', instances, options);
      }
    }).then(function() {
      return instances;
    });
  }

  /**
   * Truncate all instances of the model. This is a convenient method for Model.destroy({ truncate: true }).
   *
   * @param {object} [options] The options passed to Model.destroy in addition to truncate
   * @param {Boolean|function} [options.transaction] Transaction to run query under
   * @param {Boolean|function} [options.cascade = false] Only used in conjunction with TRUNCATE. Truncates  all tables that have foreign-key references to the named table, or to any tables added to the group due to CASCADE.
   * @param {Transaction}      [options.transaction] Transaction to run query under
   * @param {Boolean|function} [options.logging] A function that logs sql queries, or false for no logging
   * @param {Boolean}          [options.benchmark=false] Pass query execution time in milliseconds as second argument to logging function (options.logging).
   * @param {String}           [options.searchPath=DEFAULT] An optional parameter to specify the schema search_path (Postgres only)
   *
   * @return {Promise}
   *
   * @see {Model#destroy} for more information
   */
  static truncate(options) {
    options = Utils.cloneDeep(options) || {};
    options.truncate = true;
    return this.destroy(options);
  }

  /**
   * Delete multiple instances, or set their deletedAt timestamp to the current time if `paranoid` is enabled.
   *
   * @param  {Object}       options
   * @param  {Object}       [options.where]                 Filter the destroy
   * @param  {Boolean}      [options.hooks=true]            Run before / after bulk destroy hooks?
   * @param  {Boolean}      [options.individualHooks=false] If set to true, destroy will SELECT all records matching the where parameter and will execute before / after destroy hooks on each row
   * @param  {Number}       [options.limit]                 How many rows to delete
   * @param  {Boolean}      [options.force=false]           Delete instead of setting deletedAt to current timestamp (only applicable if `paranoid` is enabled)
   * @param  {Boolean}      [options.truncate=false]        If set to true, dialects that support it will use TRUNCATE instead of DELETE FROM. If a table is truncated the where and limit options are ignored
   * @param  {Boolean}      [options.cascade=false]         Only used in conjunction with TRUNCATE. Truncates  all tables that have foreign-key references to the named table, or to any tables added to the group due to CASCADE.
   * @param  {Transaction}  [options.transaction] Transaction to run query under
   * @param  {Function}     [options.logging=false]         A function that gets executed while running the query to log the sql.
   * @param  {Boolean}      [options.benchmark=false]       Pass query execution time in milliseconds as second argument to logging function (options.logging).
   * @return {Promise<Integer>} The number of destroyed rows
   */
  static destroy(options) {
    var self = this
      , instances;

    if (!options || !(options.where || options.truncate)) {
      throw new Error('Missing where or truncate attribute in the options parameter of model.destroy.');
    }

    if (!options.truncate && !_.isPlainObject(options.where) && !_.isArray(options.where) && options.where._isSequelizeMethod !== true) {
      throw new Error('Expected plain object, array or sequelize method in the options.where parameter of model.destroy.');
    }

    options = Utils.cloneDeep(options);
    options = _.defaults(options, {
      hooks: true,
      individualHooks: false,
      force: false,
      cascade: false
    });

    options.type = QueryTypes.BULKDELETE;
    this.$injectScope(options);

    Utils.mapOptionFieldNames(options, this);
    options.model = self;

    return Promise.try(function() {
      // Run before hook
      if (options.hooks) {
        return self.runHooks('beforeBulkDestroy', options);
      }
    }).then(function() {
      // Get daos and run beforeDestroy hook on each record individually
      if (options.individualHooks) {
        return self.findAll({where: options.where, transaction: options.transaction, logging: options.logging, benchmark: options.benchmark}).map(function(instance) {
          return self.runHooks('beforeDestroy', instance, options).then(function() {
            return instance;
          });
        }).then(function(_instances) {
          instances = _instances;
        });
      }
    }).then(function() {
      // Run delete query (or update if paranoid)
      if (self._timestampAttributes.deletedAt && !options.force) {
        var attrValueHash = {}
          , deletedAtAttribute = self.rawAttributes[self._timestampAttributes.deletedAt]
          , field = self.rawAttributes[self._timestampAttributes.deletedAt].field
          , where = {};

        where[field] = deletedAtAttribute.hasOwnProperty('defaultValue') ? deletedAtAttribute.defaultValue : null;

        attrValueHash[field] = Utils.now(self.modelManager.sequelize.options.dialect);
        return self.QueryInterface.bulkUpdate(self.getTableName(options), attrValueHash, _.defaults(where, options.where), options, self.rawAttributes);
      } else {
        return self.QueryInterface.bulkDelete(self.getTableName(options), options.where, options, self);
      }
    }).tap(function() {
      // Run afterDestroy hook on each record individually
      if (options.individualHooks) {
        return Promise.map(instances, function(instance) {
          return self.runHooks('afterDestroy', instance, options);
        });
      }
    }).tap(function() {
      // Run after hook
      if (options.hooks) {
        return self.runHooks('afterBulkDestroy', options);
      }
    }).then(function(affectedRows) {
      return affectedRows;
    });
  }

  /**
   * Restore multiple instances if `paranoid` is enabled.
   *
   * @param  {Object}       options
   * @param  {Object}       [options.where]                 Filter the restore
   * @param  {Boolean}      [options.hooks=true]            Run before / after bulk restore hooks?
   * @param  {Boolean}      [options.individualHooks=false] If set to true, restore will find all records within the where parameter and will execute before / after bulkRestore hooks on each row
   * @param  {Number}       [options.limit]                 How many rows to undelete (only for mysql)
   * @param  {Function}     [options.logging=false]         A function that gets executed while running the query to log the sql.
   * @param  {Boolean}      [options.benchmark=false]       Pass query execution time in milliseconds as second argument to logging function (options.logging).
   * @param  {Transaction}  [options.transaction] Transaction to run query under
   *
   * @return {Promise<undefined>}
   */
  static restore(options) {
    if (!this._timestampAttributes.deletedAt) throw new Error('Model is not paranoid');

    options = Utils._.extend({
      hooks: true,
      individualHooks: false
    }, options || {});

    options.type = QueryTypes.RAW;
    options.model = this;

    var self = this
      , instances;

    Utils.mapOptionFieldNames(options, this);

    return Promise.try(function() {
      // Run before hook
      if (options.hooks) {
        return self.runHooks('beforeBulkRestore', options);
      }
    }).then(function() {
      // Get daos and run beforeRestore hook on each record individually
      if (options.individualHooks) {
        return self.findAll({where: options.where, transaction: options.transaction, logging: options.logging, benchmark: options.benchmark, paranoid: false}).map(function(instance) {
          return self.runHooks('beforeRestore', instance, options).then(function() {
            return instance;
          });
        }).then(function(_instances) {
          instances = _instances;
        });
      }
    }).then(function() {
      // Run undelete query
      var attrValueHash = {}
        , deletedAtCol = self._timestampAttributes.deletedAt
        , deletedAtAttribute = self.rawAttributes[deletedAtCol]
        , deletedAtDefaultValue = deletedAtAttribute.hasOwnProperty('defaultValue') ? deletedAtAttribute.defaultValue : null;

      attrValueHash[deletedAtCol] = deletedAtDefaultValue;
      options.omitNull = false;
      return self.QueryInterface.bulkUpdate(self.getTableName(options), attrValueHash, options.where, options, self._timestampAttributes.deletedAt);
    }).tap(function() {
      // Run afterDestroy hook on each record individually
      if (options.individualHooks) {
        return Promise.map(instances, function(instance) {
          return self.runHooks('afterRestore', instance, options);
        });
      }
    }).tap(function() {
      // Run after hook
      if (options.hooks) {
        return self.runHooks('afterBulkRestore', options);
      }
    }).then(function(affectedRows) {
      return affectedRows;
    });
  }

  /**
   * Update multiple instances that match the where options. The promise returns an array with one or two elements. The first element is always the number
   * of affected rows, while the second element is the actual affected rows (only supported in postgres with `options.returning` true.)
   *
   * @param  {Object}       values
   * @param  {Object}       options
   * @param  {Object}       options.where                   Options to describe the scope of the search.
   * @param  {Array}        [options.fields]                Fields to update (defaults to all fields)
   * @param  {Boolean}      [options.validate=true]         Should each row be subject to validation before it is inserted. The whole insert will fail if one row fails validation
   * @param  {Boolean}      [options.hooks=true]            Run before / after bulk update hooks?
   * @param  {Boolean}      [options.sideEffects=true] Whether or not to update the side effects of any virtual setters.
   * @param  {Boolean}      [options.individualHooks=false] Run before / after update hooks?. If true, this will execute a SELECT followed by individual UPDATEs. A select is needed, because the row data needs to be passed to the hooks
   * @param  {Boolean}      [options.returning=false]       Return the affected rows (only for postgres)
   * @param  {Number}       [options.limit]                 How many rows to update (only for mysql and mariadb)
   * @param  {Function}     [options.logging=false] A function that gets executed while running the query to log the sql.
   * @param  {Boolean}      [options.benchmark=false] Pass query execution time in milliseconds as second argument to logging function (options.logging).
   * @param  {Transaction}  [options.transaction] Transaction to run query under
   * @param  {Boolean}      [options.silent=false] If true, the updatedAt timestamp will not be updated.
   *
   * @return {Promise<Array<affectedCount,affectedRows>>}
   */
  static update(values, options) {
    var self = this;

    if (!options || !options.where) {
      throw new Error('Missing where attribute in the options parameter passed to update.');
    }

    if (!_.isPlainObject(options.where) && !_.isArray(options.where) && options.where._isSequelizeMethod !== true) {
      throw new Error('Expected plain object, array or sequelize method in the options.where parameter of model.update.');
    }

    options = Utils.cloneDeep(options);
    options = _.defaults(options, {
      validate: true,
      hooks: true,
      individualHooks: false,
      returning: false,
      force: false,
      sideEffects: true
    });

    options.type = QueryTypes.BULKUPDATE;

    this.$injectScope(options);

    // Clone values so it doesn't get modified for caller scope
    values = _.clone(values);

    // Remove values that are not in the options.fields
    if (options.fields && options.fields instanceof Array) {
      Object.keys(values).forEach(function(key) {
        if (options.fields.indexOf(key) < 0) {
          delete values[key];
        }
      });
    } else {
      var updatedAtAttr = this._timestampAttributes.updatedAt;
      options.fields = _.intersection(Object.keys(values), Object.keys(this.tableAttributes));
      if (updatedAtAttr && options.fields.indexOf(updatedAtAttr) === -1) {
        options.fields.push(updatedAtAttr);
      }
    }

    if (this._timestampAttributes.updatedAt && !options.silent) {
      values[this._timestampAttributes.updatedAt] = this.$getDefaultTimestamp(this._timestampAttributes.updatedAt) || Utils.now(this.sequelize.options.dialect);
    }

    options.model = this;

    var instances
      , valuesUse;

    return Promise.try(function() {
      // Validate
      if (options.validate) {
        var build = self.build(values);
        build.set(self._timestampAttributes.updatedAt, values[self._timestampAttributes.updatedAt], { raw: true });

        if (options.sideEffects) {
          values = Utils._.assign(values, Utils._.pick(build.get(), build.changed()));
          options.fields = Utils._.union(options.fields, Object.keys(values));
        }

        // We want to skip validations for all other fields
        options.skip = Utils._.difference(Object.keys(self.attributes), Object.keys(values));
        return build.validate(options).then(function(attributes) {
          options.skip = undefined;
          if (attributes && attributes.dataValues) {
            values = Utils._.pick(attributes.dataValues, Object.keys(values));
          }
        });
      }
      return null;
    }).then(function() {
      // Run before hook
      if (options.hooks) {
        options.attributes = values;
        return self.runHooks('beforeBulkUpdate', options).then(function() {
          values = options.attributes;
          delete options.attributes;
        });
      }
      return null;
    }).then(function() {
      valuesUse = values;

      // Get instances and run beforeUpdate hook on each record individually
      if (options.individualHooks) {
        return self.findAll({where: options.where, transaction: options.transaction, logging: options.logging, benchmark: options.benchmark}).then(function(_instances) {
          instances = _instances;
          if (!instances.length) {
            return [];
          }

          // Run beforeUpdate hooks on each record and check whether beforeUpdate hook changes values uniformly
          // i.e. whether they change values for each record in the same way
          var changedValues
            , different = false;

          return Promise.map(instances, function(instance) {
            // Record updates in instances dataValues
            Utils._.extend(instance.dataValues, values);
            // Set the changed fields on the instance
            Utils._.forIn(valuesUse, function(newValue, attr) {
              if (newValue !== instance._previousDataValues[attr]) {
                instance.setDataValue(attr, newValue);
              }
            });

            // Run beforeUpdate hook
            return self.runHooks('beforeUpdate', instance, options).then(function() {
              if (!different) {
                var thisChangedValues = {};
                Utils._.forIn(instance.dataValues, function(newValue, attr) {
                  if (newValue !== instance._previousDataValues[attr]) {
                    thisChangedValues[attr] = newValue;
                  }
                });

                if (!changedValues) {
                  changedValues = thisChangedValues;
                } else {
                  different = !Utils._.isEqual(changedValues, thisChangedValues);
                }
              }

              return instance;
            });
          }).then(function(_instances) {
            instances = _instances;

            if (!different) {
              var keys = Object.keys(changedValues);
              // Hooks do not change values or change them uniformly
              if (keys.length) {
                // Hooks change values - record changes in valuesUse so they are executed
                valuesUse = changedValues;
                options.fields = Utils._.union(options.fields, keys);
              }
              return;
            } else {
              // Hooks change values in a different way for each record
              // Do not run original query but save each record individually
              return Promise.map(instances, function(instance) {
                var individualOptions = Utils._.clone(options);
                delete individualOptions.individualHooks;
                individualOptions.hooks = false;
                individualOptions.validate = false;

                return instance.save(individualOptions);
              }).tap(function(_instances) {
                instances = _instances;
              });
            }
          });
        });
      }
    }).then(function(results) {
      if (results) {
        // Update already done row-by-row - exit
        return [results.length, results];
      }

      valuesUse = Utils.mapValueFieldNames(valuesUse, options.fields, self);
      options = Utils.mapOptionFieldNames(options, self);
      options.hasTrigger =  self.options ? self.options.hasTrigger : false;

      // Run query to update all rows
      return self.QueryInterface.bulkUpdate(self.getTableName(options), valuesUse, options.where, options, self.tableAttributes).then(function(affectedRows) {
        if (options.returning) {
          instances = affectedRows;
          return [affectedRows.length, affectedRows];
        }

        return [affectedRows];
      });
    }).tap(function(result) {
      if (options.individualHooks) {
        return Promise.map(instances, function(instance) {
          return self.runHooks('afterUpdate', instance, options);
        }).then(function() {
          result[1] = instances;
        });
      }
    }).tap(function() {
      // Run after hook
      if (options.hooks) {
        options.attributes = values;
        return self.runHooks('afterBulkUpdate', options).then(function() {
          delete options.attributes;
        });
      }
    }).then(function(result) {
      // Return result in form [affectedRows, instances] (instances missed off if options.individualHooks != true)
      return result;
    });
  }

  /**
   * Run a describe query on the table. The result will be return to the listener as a hash of attributes and their types.
   *
   * @return {Promise}
   */
  static describe(schema, options) {
    return this.QueryInterface.describeTable(this.tableName, _.assign({schema: schema || this.$schema || undefined}, options));
  }

  static $getDefaultTimestamp(attr) {
    if (!!this.rawAttributes[attr] && !!this.rawAttributes[attr].defaultValue) {
      return Utils.toDefaultValue(this.rawAttributes[attr].defaultValue);
    }
    return undefined;
  }

  static $expandAttributes(options) {
    if (_.isPlainObject(options.attributes)) {
      var attributes = Object.keys(this.rawAttributes);

      if (options.attributes.exclude) {
        attributes = attributes.filter(function (elem) {
          return options.attributes.exclude.indexOf(elem) === -1;
        });
      }
      if (options.attributes.include) {
        attributes = attributes.concat(options.attributes.include);
      }

      options.attributes = attributes;
    }
  }

  // Inject $scope into options. Includes should have been conformed (conformOptions) before calling this
  static $injectScope(options) {
    var self = this;
    var scope = Utils.cloneDeep(this.$scope);

    var filteredScope = _.omit(scope, 'include'); // Includes need special treatment

    _.defaults(options, filteredScope);
    _.defaults(options.where, filteredScope.where);

    if (scope.include) {
      options.include = options.include || [];

      // Reverse so we consider the latest include first.
      // This is used if several scopes specify the same include - the last scope should take precedence
      scope.include.reverse().forEach(function (scopeInclude) {
        if (scopeInclude.all || !options.include.some(function matchesModelAndAlias(item) {
          var isSameModel = item.model && item.model.name === scopeInclude.model.name;
          if (!isSameModel || !item.as) return isSameModel;

          if (scopeInclude.as) {
            return item.as === scopeInclude.as;
          } else {
            var association = scopeInclude.association || self.getAssociation(scopeInclude.model, scopeInclude.as);
            return association ? item.as === association.as : false;
          }
        })) {
          options.include.push(scopeInclude);
        }
      });
    }
  }

  static inspect() {
    return this.name;
  }

  constructor(values, options) {
    this.dataValues = {};
    this._previousDataValues = {};
    this._changed = {};
    this.$modelOptions = this.constructor.options;
    this.$options = options || {};
    this.hasPrimaryKeys = this.constructor.options.hasPrimaryKeys;
    this.__eagerlyLoadedAssociations = [];
    /**
     * Returns true if this instance has not yet been persisted to the database
     * @property isNewRecord
     * @return {Boolean}
     */
    this.isNewRecord = options.isNewRecord;

    /**
     * Returns the Model the instance was created from.
     * @see {Model}
     * @property Model
     * @return {Model}
     */

    this._initValues(values, options);
  }

  _initValues(values, options) {
    var defaults
      , key;

    values = values && _.clone(values) || {};

    if (options.isNewRecord) {
      defaults = {};

      if (this.constructor._hasDefaultValues) {
        defaults = _.mapValues(this.constructor._defaultValues, function(valueFn) {
          var value = valueFn();
          return (value && value._isSequelizeMethod) ? value : _.cloneDeep(value);
        });
      }

      // set id to null if not passed as value, a newly created dao has no id
      // removing this breaks bulkCreate
      // do after default values since it might have UUID as a default value
      if (!defaults.hasOwnProperty(this.constructor.primaryKeyAttribute)) {
        defaults[this.constructor.primaryKeyAttribute] = null;
      }

      if (this.constructor._timestampAttributes.createdAt && defaults[this.constructor._timestampAttributes.createdAt]) {
        this.dataValues[this.constructor._timestampAttributes.createdAt] = Utils.toDefaultValue(defaults[this.constructor._timestampAttributes.createdAt]);
        delete defaults[this.constructor._timestampAttributes.createdAt];
      }

      if (this.constructor._timestampAttributes.updatedAt && defaults[this.constructor._timestampAttributes.updatedAt]) {
        this.dataValues[this.constructor._timestampAttributes.updatedAt] = Utils.toDefaultValue(defaults[this.constructor._timestampAttributes.updatedAt]);
        delete defaults[this.constructor._timestampAttributes.updatedAt];
      }

      if (this.constructor._timestampAttributes.deletedAt && defaults[this.constructor._timestampAttributes.deletedAt]) {
        this.dataValues[this.constructor._timestampAttributes.deletedAt] = Utils.toDefaultValue(defaults[this.constructor._timestampAttributes.deletedAt]);
        delete defaults[this.constructor._timestampAttributes.deletedAt];
      }

      if (Object.keys(defaults).length) {
        for (key in defaults) {
          if (values[key] === undefined) {
            this.set(key, Utils.toDefaultValue(defaults[key]), defaultsOptions);
            delete values[key];
          }
        }
      }
    }

    this.set(values, options);
  }

  /**
   * A reference to the sequelize instance
   * @see {Sequelize}
   * @property sequelize
   * @return {Sequelize}
   */
  get sequelize() {
    return this.constructor.modelManager.sequelize;
  }

  /**
   * Get an object representing the query for this instance, use with `options.where`
   *
   * @property where
   * @return {Object}
   */
  where() {
    var where;

    where = this.constructor.primaryKeyAttributes.reduce(function (result, attribute) {
      result[attribute] = this.get(attribute, {raw: true});
      return result;
    }.bind(this), {});

    if (_.size(where) === 0) {
      return this.$modelOptions.whereCollection;
    }
    return Utils.mapWhereFieldNames(where, this.constructor);
  }

  toString() {
    return '[object SequelizeInstance:'+this.constructor.name+']';
  }

  /**
   * Get the value of the underlying data value
   *
   * @param {String} key
   * @return {any}
   */
  getDataValue(key) {
    return this.dataValues[key];
  }

  /**
   * Update the underlying data value
   *
   * @param {String} key
   * @param {any} value
   */
  setDataValue(key, value) {
    var originalValue = this._previousDataValues[key];
    if (!Utils.isPrimitive(value) || value !== originalValue) {
      this.changed(key, true);
    }

    this.dataValues[key] = value;
  }

  /**
   * If no key is given, returns all values of the instance, also invoking virtual getters.
   *
   * If key is given and a field or virtual getter is present for the key it will call that getter - else it will return the value for key.
   *
   * @param {String}  [key]
   * @param {Object}  [options]
   * @param {Boolean} [options.plain=false] If set to true, included instances will be returned as plain objects
   * @param {Boolean} [options.raw=false] If set to true, field and virtual setters will be ignored
   * @return {Object|any}
   */
  get(key, options) { // testhint options:none
    if (options === undefined && typeof key === 'object') {
      options = key;
      key = undefined;
    }

    options = options || {};

    if (key) {
      if (this._customGetters[key] && !options.raw) {
        return this._customGetters[key].call(this, key);
      }
      if (options.plain && this.$options.include && this.$options.includeNames.indexOf(key) !== -1) {
        if (Array.isArray(this.dataValues[key])) {
          return this.dataValues[key].map(function (instance) {
            return instance.get({plain: options.plain});
          });
        } else if (this.dataValues[key] instanceof Model) {
          return this.dataValues[key].get({plain: options.plain});
        } else {
          return this.dataValues[key];
        }
      }
      return this.dataValues[key];
    }

    if (this._hasCustomGetters || (options.plain && this.$options.include) || options.clone) {
      var values = {}
        , _key;

      if (this._hasCustomGetters) {
        for (_key in this._customGetters) {
          if (this._customGetters.hasOwnProperty(_key)) {
            values[_key] = this.get(_key, options);
          }
        }
      }

      for (_key in this.dataValues) {
        if (!values.hasOwnProperty(_key) && this.dataValues.hasOwnProperty(_key)) {
          values[_key] = this.get(_key, options);
        }
      }
      return values;
    }
    return this.dataValues;
  }

  /**
   * Set is used to update values on the instance (the sequelize representation of the instance that is, remember that nothing will be persisted before you actually call `save`).
   * In its most basic form `set` will update a value stored in the underlying `dataValues` object. However, if a custom setter function is defined for the key, that function
   * will be called instead. To bypass the setter, you can pass `raw: true` in the options object.
   *
   * If set is called with an object, it will loop over the object, and call set recursively for each key, value pair. If you set raw to true, the underlying dataValues will either be
   * set directly to the object passed, or used to extend dataValues, if dataValues already contain values.
   *
   * When set is called, the previous value of the field is stored and sets a changed flag(see `changed`).
   *
   * Set can also be used to build instances for associations, if you have values for those.
   * When using set with associations you need to make sure the property key matches the alias of the association
   * while also making sure that the proper include options have been set (from .build() or .find())
   *
   * If called with a dot.separated key on a JSON/JSONB attribute it will set the value nested and flag the entire object as changed.
   *
   * @see {Model#find} for more information about includes
   * @param {String|Object} key
   * @param {any} value
   * @param {Object} [options]
   * @param {Boolean} [options.raw=false] If set to true, field and virtual setters will be ignored
   * @param {Boolean} [options.reset=false] Clear all previously set data values
   * @alias setAttributes
   */
  set(key, value, options) { // testhint options:none
    var values
      , originalValue
      , keys
      , i
      , length;

    if (typeof key === 'object' && key !== null) {
      values = key;
      options = value || {};

      if (options.reset) {
        this.dataValues = {};
      }

      // If raw, and we're not dealing with includes or special attributes, just set it straight on the dataValues object
      if (options.raw && !(this.$options && this.$options.include) && !(options && options.attributes) && !this.constructor._hasBooleanAttributes && !this.constructor._hasDateAttributes) {
        if (Object.keys(this.dataValues).length) {
          this.dataValues = _.extend(this.dataValues, values);
        } else {
          this.dataValues = values;
        }
        // If raw, .changed() shouldn't be true
        this._previousDataValues = _.clone(this.dataValues);
      } else {
        // Loop and call set

        if (options.attributes) {
          keys = options.attributes;
          if (this.constructor._hasVirtualAttributes) {
            keys = keys.concat(this.constructor._virtualAttributes);
          }

          if (this.$options.includeNames) {
            keys = keys.concat(this.$options.includeNames);
          }

          for (i = 0, length = keys.length; i < length; i++) {
            if (values[keys[i]] !== undefined) {
              this.set(keys[i], values[keys[i]], options);
            }
          }
        } else {
          for (key in values) {
            this.set(key, values[key], options);
          }
        }

        if (options.raw) {
          // If raw, .changed() shouldn't be true
          this._previousDataValues = _.clone(this.dataValues);
        }
      }
    } else {
      if (!options)
        options = {};
      if (!options.raw) {
        originalValue = this.dataValues[key];
      }

      // If not raw, and there's a customer setter
      if (!options.raw && this._customSetters[key]) {
        this._customSetters[key].call(this, value, key);
      } else {
        // Check if we have included models, and if this key matches the include model names/aliases

        if (this.$options && this.$options.include && this.$options.includeNames.indexOf(key) !== -1) {
          // Pass it on to the include handler
          this._setInclude(key, value, options);
          return this;
        } else {
          // Bunch of stuff we won't do when its raw
          if (!options.raw) {
            // If attribute is not in model definition, return
            if (!this._isAttribute(key)) {
              if (key.indexOf('.') > -1 && this.constructor._isJsonAttribute(key.split('.')[0])) {
                var previousDottieValue = Dottie.get(this.dataValues, key);
                if (!_.isEqual(previousDottieValue, value)) {
                  Dottie.set(this.dataValues, key, value);
                  this.changed(key.split('.')[0], true);
                }
              }
              return this;
            }

            // If attempting to set primary key and primary key is already defined, return
            if (this.constructor._hasPrimaryKeys && originalValue && this.constructor._isPrimaryKey(key)) {
              return this;
            }

            // If attempting to set read only attributes, return
            if (!this.isNewRecord && this.constructor._hasReadOnlyAttributes && this.constructor._isReadOnlyAttribute(key)) {
              return this;
            }

            // Convert date fields to real date objects
            if (this.constructor._hasDateAttributes && this.constructor._isDateAttribute(key) && !!value && !value._isSequelizeMethod) {
              if (!(value instanceof Date)) {
                value = new Date(value);
              }
              if (!(originalValue instanceof Date)) {
                originalValue = new Date(originalValue);
              }
              if (originalValue && value.getTime() === originalValue.getTime()) {
                return this;
              }
            }
          }

          // Convert boolean-ish values to booleans
          if (this.constructor._hasBooleanAttributes && this.constructor._isBooleanAttribute(key) && value !== null && value !== undefined && !value._isSequelizeMethod) {
            if (Buffer.isBuffer(value) && value.length === 1) {
              // Bit fields are returned as buffers
              value = value[0];
            }

            if (_.isString(value)) {
              // Only take action on valid boolean strings.
              value = (value === 'true') ? true : (value === 'false') ? false : value;

            } else if (_.isNumber(value)) {
              // Only take action on valid boolean integers.
              value = (value === 1) ? true : (value === 0) ? false : value;
            }
          }

          if (!options.raw && ((!Utils.isPrimitive(value) && value !== null) || value !== originalValue)) {
            this._previousDataValues[key] = originalValue;
            this.changed(key, true);
          }
          this.dataValues[key] = value;
        }
      }
    }

    return this;
  }

  setAttributes(updates) {
    return this.set(updates);
  }

  /**
   * If changed is called with a string it will return a boolean indicating whether the value of that key in `dataValues` is different from the value in `_previousDataValues`.
   *
   * If changed is called without an argument, it will return an array of keys that have changed.
   *
   * If changed is called without an argument and no keys have changed, it will return `false`.
   *
   * @param {String} [key]
   * @return {Boolean|Array}
   */
  changed(key, value) {
    if (key) {
      if (value !== undefined) {
        this._changed[key] = value;
        return this;
      }
      return this._changed[key] || false;
    }

    var changed = Object.keys(this.dataValues).filter(function(key) {
      return this.changed(key);
    }.bind(this));

    return changed.length ? changed : false;
  }

  /**
   * Returns the previous value for key from `_previousDataValues`.
   *
   * If called without a key, returns the previous values for all values which have changed
   *
   * @param {String} [key]
   * @return {any|Array<any>}
   */
  previous(key) {
    if (key) {
      return this._previousDataValues[key];
    }

    return _.pickBy(this._previousDataValues, function(value, key) {
      return this.changed(key);
    }.bind(this));
  }

  _setInclude(key, value, options) {
    if (!Array.isArray(value)) value = [value];
    if (value[0] instanceof Model) {
      value = value.map(function(instance) {
        return instance.dataValues;
      });
    }

    var include = this.$options.includeMap[key]
      , association = include.association
      , self = this
      , accessor = key
      , childOptions
      , primaryKeyAttribute  = include.model.primaryKeyAttribute
      , isEmpty;

    if (!isEmpty) {
      childOptions = {
        isNewRecord: this.isNewRecord,
        include: include.include,
        includeNames: include.includeNames,
        includeMap: include.includeMap,
        includeValidated: true,
        raw: options.raw,
        attributes: include.originalAttributes
      };
    }
    if (include.originalAttributes === undefined || include.originalAttributes.length) {
      if (association.isSingleAssociation) {
        if (Array.isArray(value)) {
          value = value[0];
        }

        isEmpty = (value && value[primaryKeyAttribute] === null) || (value === null);
        self[accessor] = self.dataValues[accessor] = isEmpty ? null : include.model.build(value, childOptions);
      } else {
        isEmpty = value[0] && value[0][primaryKeyAttribute] === null;
        self[accessor] = self.dataValues[accessor] = isEmpty ? [] : include.model.bulkBuild(value, childOptions);
      }
    }
  }

  /**
   * Validate this instance, and if the validation passes, persist it to the database. It will only save changed fields, and do nothing if no fields have changed.
   *
   * On success, the callback will be called with this instance. On validation error, the callback will be called with an instance of `Sequelize.ValidationError`.
   * This error will have a property for each of the fields for which validation failed, with the error message for that field.
   *
   * @param {Object}      [options]
   * @param {string[]}    [options.fields] An optional array of strings, representing database columns. If fields is provided, only those columns will be validated and saved.
   * @param {Boolean}     [options.silent=false] If true, the updatedAt timestamp will not be updated.
   * @param {Boolean}     [options.validate=true] If false, validations won't be run.
   * @param {Boolean}     [options.hooks=true] Run before and after create / update + validate hooks
   * @param {Function}    [options.logging=false] A function that gets executed while running the query to log the sql.
   * @param {Transaction} [options.transaction]
   * @param  {String}     [options.searchPath=DEFAULT] An optional parameter to specify the schema search_path (Postgres only)
   *
   * @return {Promise<this|Errors.ValidationError>}
   */
  save(options) {
    if (arguments.length > 1) {
      throw new Error('The second argument was removed in favor of the options object.');
    }

    options = Utils.cloneDeep(options);
    options = _.defaults(options, {
      hooks: true,
      validate: true
    });

    if (!options.fields) {
      if (this.isNewRecord) {
        options.fields = Object.keys(this.constructor.attributes);
      } else {
        options.fields = _.intersection(this.changed(), Object.keys(this.constructor.attributes));
      }

      options.defaultFields = options.fields;
    }

    if (options.returning === undefined) {
      if (options.association) {
        options.returning = false;
      } else if (this.isNewRecord) {
        options.returning = true;
      }
    }

    var self = this
      , primaryKeyName = this.constructor.primaryKeyAttribute
      , primaryKeyAttribute = primaryKeyName && this.constructor.rawAttributes[primaryKeyName]
      , updatedAtAttr = this.constructor._timestampAttributes.updatedAt
      , createdAtAttr = this.constructor._timestampAttributes.createdAt
      , hook = self.isNewRecord ? 'Create' : 'Update'
      , wasNewRecord = this.isNewRecord
      , now = Utils.now(this.sequelize.options.dialect);

    if (updatedAtAttr && options.fields.length >= 1 && options.fields.indexOf(updatedAtAttr) === -1) {
      options.fields.push(updatedAtAttr);
    }

    if (options.silent === true && !(this.isNewRecord && this.get(updatedAtAttr, {raw: true}))) {
      // UpdateAtAttr might have been added as a result of Object.keys(Model.attributes). In that case we have to remove it again
      Utils._.remove(options.fields, function(val) {
        return val === updatedAtAttr;
      });
      updatedAtAttr = false;
    }

    if (this.isNewRecord === true) {
      if (createdAtAttr && options.fields.indexOf(createdAtAttr) === -1) {
        options.fields.push(createdAtAttr);
      }

      if (primaryKeyAttribute && primaryKeyAttribute.defaultValue && options.fields.indexOf(primaryKeyName) < 0) {
        options.fields.unshift(primaryKeyName);
      }
    }

    if (this.isNewRecord === false) {
      if (primaryKeyName && this.get(primaryKeyName, {raw: true}) === undefined) {
        throw new Error('You attempted to save an instance with no primary key, this is not allowed since it would result in a global update');
      }
    }

    if (updatedAtAttr && !options.silent && options.fields.indexOf(updatedAtAttr) !== -1) {
      this.dataValues[updatedAtAttr] = this.constructor.$getDefaultTimestamp(updatedAtAttr) || now;
    }

    if (this.isNewRecord && createdAtAttr && !this.dataValues[createdAtAttr]) {
      this.dataValues[createdAtAttr] = this.constructor.$getDefaultTimestamp(createdAtAttr) || now;
    }

    return Promise.bind(this).then(function() {
      // Validate
      if (options.validate) {
        return this.validate(options);
      }
    }).then(function() {
      return Promise.bind(this).then(function() {
        // Run before hook
        if (options.hooks) {
          var beforeHookValues = _.pick(this.dataValues, options.fields)
            , afterHookValues
            , hookChanged
            , ignoreChanged = _.difference(this.changed(), options.fields); // In case of update where it's only supposed to update the passed values and the hook values

          if (updatedAtAttr && options.fields.indexOf(updatedAtAttr) !== -1) {
            ignoreChanged = _.without(ignoreChanged, updatedAtAttr);
          }

          return this.constructor.runHooks('before' + hook, this, options).bind(this).then(function() {
            if (options.defaultFields && !this.isNewRecord) {
              afterHookValues = _.pick(this.dataValues, _.difference(this.changed(), ignoreChanged));

              hookChanged = [];
              Object.keys(afterHookValues).forEach(function (key) {
                if (afterHookValues[key] !== beforeHookValues[key]) {
                  hookChanged.push(key);
                }
              });

              options.fields = _.uniq(options.fields.concat(hookChanged));
            }

            if (hookChanged) {
              if (options.validate) {
                // Validate again

                options.skip = _.difference(Object.keys(this.constructor.rawAttributes), hookChanged);
                return this.validate(options).then(function() {
                  delete options.skip;
                });
              }
            }
          });
        }
      }).then(function() {
        if (!options.fields.length) return this;
        if (!this.isNewRecord) return this;
        if (!this.$options.include || !this.$options.include.length) return this;

        // Nested creation for BelongsTo relations
        return Promise.map(this.$options.include.filter(function (include) {
          return include.association instanceof BelongsTo;
        }), function (include) {
          var instance = self.get(include.as);
          if (!instance) return Promise.resolve();

          var includeOptions =  _(Utils.cloneDeep(include))
            .omit(['association'])
            .defaults({
              transaction: options.transaction,
              logging: options.logging,
              parentRecord: self
            }).value();

          return instance.save(includeOptions).then(function () {
            return self[include.association.accessors.set](instance, {save: false, logging: options.logging});
          });
        });
      })
      .then(function() {
        if (!options.fields.length) return this;
        if (!this.changed() && !this.isNewRecord) return this;

        var values = Utils.mapValueFieldNames(this.dataValues, options.fields, this.constructor)
          , query = null
          , args = [];

        if (self.isNewRecord) {
          query = 'insert';
          args = [self, self.constructor.getTableName(options), values, options];
        } else {
          var where = this.where();

          where = Utils.mapValueFieldNames(where, Object.keys(where), this.constructor);

          query = 'update';
          args = [self, self.constructor.getTableName(options), values, where, options];
        }

        return self.sequelize.getQueryInterface()[query].apply(self.sequelize.getQueryInterface(), args)
          .then(function(result) {
            // Transfer database generated values (defaults, autoincrement, etc)
            Object.keys(self.constructor.rawAttributes).forEach(function (attr) {
              if (self.constructor.rawAttributes[attr].field &&
                  values[self.constructor.rawAttributes[attr].field] !== undefined &&
                  self.constructor.rawAttributes[attr].field !== attr
              ) {
                values[attr] = values[self.constructor.rawAttributes[attr].field];
                delete values[self.constructor.rawAttributes[attr].field];
              }
            });
            values = _.extend(values, result.dataValues);

            result.dataValues = _.extend(result.dataValues, values);
            return result;
          })
          .tap(function(result) {
            if (!wasNewRecord) return self;
            if (!self.$options.include || !self.$options.include.length) return self;

            // Nested creation for HasOne/HasMany/BelongsToMany relations
            return Promise.map(self.$options.include.filter(function (include) {
              return !(include.association instanceof BelongsTo);
            }), function (include) {
              var instances = self.get(include.as);

              if (!instances) return Promise.resolve();
              if (!Array.isArray(instances)) instances = [instances];
              if (!instances.length) return Promise.resolve();

              var includeOptions =  _(Utils.cloneDeep(include))
                .omit(['association'])
                .defaults({
                  transaction: options.transaction,
                  logging: options.logging,
                  parentRecord: self
                }).value();

              // Instances will be updated in place so we can safely treat HasOne like a HasMany
              return Promise.map(instances, function (instance) {
                if (include.association instanceof BelongsToMany) {
                  return instance.save(includeOptions).then(function () {
                    var values = {};
                    values[include.association.foreignKey] = self.get(self.constructor.primaryKeyAttribute, {raw: true});
                    values[include.association.otherKey] = instance.get(instance.constructor.primaryKeyAttribute, {raw: true});
                    return include.association.throughModel.create(values, includeOptions);
                  });
                } else {
                  instance.set(include.association.foreignKey, self.get(self.constructor.primaryKeyAttribute, {raw: true}));
                  return instance.save(includeOptions);
                }
              });
            });
          })
          .tap(function(result) {
            // Run after hook
            if (options.hooks) {
              return self.constructor.runHooks('after' + hook, result, options);
            }
          })
          .then(function(result) {
            options.fields.forEach(function (field) {
              result._previousDataValues[field] = result.dataValues[field];
              self.changed(field, false);
            });
            self.isNewRecord = false;
            return result;
          });
      });
    });
  }

  /*
  * Refresh the current instance in-place, i.e. update the object with current data from the DB and return the same object.
  * This is different from doing a `find(Instance.id)`, because that would create and return a new instance. With this method,
  * all references to the Instance are updated with the new data and no new objects are created.
  *
  * @see {Model#find}
  * @param {Object} [options] Options that are passed on to `Model.find`
  * @param {Function} [options.logging=false] A function that gets executed while running the query to log the sql.
  * @return {Promise<this>}
  */
  reload(options) {
    options = _.defaults({}, options, {
      where: this.where(),
      include: this.$options.include || null
    });

    return this.constructor.findOne(options).bind(this)
    .tap(function (reload) {
      if (!reload) {
        throw new sequelizeErrors.InstanceError(
          'Instance could not be reloaded because it does not exist anymore (find call returned null)'
        );
      }
    })
    .then(function(reload) {
      // update the internal options of the instance
      this.$options = reload.$options;
      // re-set instance values
      this.set(reload.dataValues, {
        raw: true,
        reset: true && !options.attributes
      });
    }).return(this);
  }

  /*
  * Validate the attribute of this instance according to validation rules set in the model definition.
  *
  * Emits null if and only if validation successful; otherwise an Error instance containing { field name : [error msgs] } entries.
  *
  * @param {Object} [options] Options that are passed to the validator
  * @param {Array} [options.skip] An array of strings. All properties that are in this array will not be validated
  * @param {Boolean} [options.hooks=true] Run before and after validate hooks
  * @see {InstanceValidator}
  *
  * @return {Promise<undefined|Errors.ValidationError>}
  */
  validate(options) {
    return new InstanceValidator(this, options).validate();
  }

  /**
   * This is the same as calling `set` and then calling `save` but it only saves the
   * exact values passed to it, making it more atomic and safer.
   *
   * @see {Instance#set}
   * @see {Instance#save}
   * @param {Object} updates See `set`
   * @param {Object} options See `save`
   *
   * @return {Promise<this>}
   * @alias updateAttributes
   */
  update(values, options) {
    var changedBefore = this.changed() || []
      , sideEffects
      , fields
      , setOptions;

    options = options || {};
    if (Array.isArray(options)) options = {fields: options};

    options = Utils.cloneDeep(options);
    setOptions = Utils.cloneDeep(options);
    setOptions.attributes = options.fields;
    this.set(values, setOptions);

    // Now we need to figure out which fields were actually affected by the setter.
    sideEffects = _.without.apply(this, [this.changed() || []].concat(changedBefore));
    fields = _.union(Object.keys(values), sideEffects);

    if (!options.fields) {
      options.fields = _.intersection(fields, this.changed());
      options.defaultFields = options.fields;
    }

    return this.save(options);
  }

  /**
   * Destroy the row corresponding to this instance. Depending on your setting for paranoid, the row will either be completely deleted, or have its deletedAt timestamp set to the current time.
   *
   * @param {Object}      [options={}]
   * @param {Boolean}     [options.force=false] If set to true, paranoid models will actually be deleted
   * @param {Function}    [options.logging=false] A function that gets executed while running the query to log the sql.
   * @param {Transaction} [options.transaction]
   * @param  {String}       [options.searchPath=DEFAULT] An optional parameter to specify the schema search_path (Postgres only)
   *
   * @return {Promise<undefined>}
   */

  destroy(options) {
    options = Utils._.extend({
      hooks: true,
      force: false
    }, options);

    return Promise.bind(this).then(function() {
      // Run before hook
      if (options.hooks) {
        return this.constructor.runHooks('beforeDestroy', this, options);
      }
    }).then(function() {
      var where = this.where();

      if (this.constructor._timestampAttributes.deletedAt && options.force === false) {
        var attribute = this.constructor.rawAttributes[this.constructor._timestampAttributes.deletedAt]
          , field = attribute.field || this.constructor._timestampAttributes.deletedAt
          , values = {};

        values[field] = new Date();
        where[field] = attribute.hasOwnProperty('defaultValue') ? attribute.defaultValue : null;

        this.setDataValue(field, values[field]);

        return this.sequelize.getQueryInterface().update(this, this.constructor.getTableName(options), values, where, _.defaults({ hooks: false }, options));
      } else {
        return this.sequelize.getQueryInterface().delete(this, this.constructor.getTableName(options), where, _.assign({ type: QueryTypes.DELETE, limit: null }, options));
      }
    }).tap(function() {
      // Run after hook
      if (options.hooks) {
        return this.constructor.runHooks('afterDestroy', this, options);
      }
    }).then(function(result) {
      return result;
    });
  }

  /**
   * Restore the row corresponding to this instance. Only available for paranoid models.
   *
   * @param {Object}      [options={}]
   * @param {Function}    [options.logging=false] A function that gets executed while running the query to log the sql.
   * @param {Transaction} [options.transaction]
   *
   * @return {Promise<undefined>}
   */
  restore(options) {
    if (!this.constructor._timestampAttributes.deletedAt) throw new Error('Model is not paranoid');

    options = Utils._.extend({
      hooks: true,
      force: false
    }, options);

    return Promise.bind(this).then(function() {
      // Run before hook
      if (options.hooks) {
        return this.constructor.runHooks('beforeRestore', this, options);
      }
    }).then(function() {
      var deletedAtCol = this.constructor._timestampAttributes.deletedAt
        , deletedAtAttribute = this.constructor.rawAttributes[deletedAtCol]
        , deletedAtDefaultValue = deletedAtAttribute.hasOwnProperty('defaultValue') ? deletedAtAttribute.defaultValue : null;

      this.setDataValue(deletedAtCol, deletedAtDefaultValue);
      return this.save(_.extend({}, options, {hooks : false, omitNull : false}));
    }).tap(function() {
      // Run after hook
      if (options.hooks) {
        return this.constructor.runHooks('afterRestore', this, options);
      }
    });
  }

  /**
   * Increment the value of one or more columns. This is done in the database, which means it does not use the values currently stored on the Instance. The increment is done using a
   * ```sql
   * SET column = column + X
   * ```
   * query. To get the correct value after an increment into the Instance you should do a reload.
   *
   *```js
  * instance.increment('number') // increment number by 1
  * instance.increment(['number', 'count'], { by: 2 }) // increment number and count by 2
  * instance.increment({ answer: 42, tries: 1}, { by: 2 }) // increment answer by 42, and tries by 1.
  *                                                        // `by` is ignored, since each column has its own value
  * ```
  *
  * @see {Instance#reload}
  * @param {String|Array|Object} fields If a string is provided, that column is incremented by the value of `by` given in options. If an array is provided, the same is true for each column. If and object is provided, each column is incremented by the value given.
  * @param {Object} [options]
  * @param {Integer} [options.by=1] The number to increment by
  * @param {Function} [options.logging=false] A function that gets executed while running the query to log the sql.
  * @param {Transaction} [options.transaction]
  * @param  {String}       [options.searchPath=DEFAULT] An optional parameter to specify the schema search_path (Postgres only)
  *
  * @return {Promise<this>}
  */
  increment(fields, options) {
    var identifier = this.where()
      , updatedAtAttr = this.constructor._timestampAttributes.updatedAt
      , values = {}
      , where;

    options = _.defaults({}, options, {
      by: 1,
      attributes: {},
      where: {}
    });

    where = _.extend({}, options.where, identifier);

    if (Utils._.isString(fields)) {
      values[fields] = options.by;
    } else if (Utils._.isArray(fields)) {
      Utils._.each(fields, function(field) {
        values[field] = options.by;
      });
    } else { // Assume fields is key-value pairs
      values = fields;
    }

    if (updatedAtAttr && !values[updatedAtAttr]) {
      options.attributes[updatedAtAttr] = this.constructor.$getDefaultTimestamp(updatedAtAttr) || Utils.now(this.sequelize.options.dialect);
    }

    Object.keys(values).forEach(function(attr) {
      // Field name mapping
      if (this.constructor.rawAttributes[attr] && this.constructor.rawAttributes[attr].field && this.constructor.rawAttributes[attr].field !== attr) {
        values[this.constructor.rawAttributes[attr].field] = values[attr];
        delete values[attr];
      }
    }, this);

    return this.sequelize.getQueryInterface().increment(this, this.constructor.getTableName(options), values, where, options).return(this);
  }

  /**
   * Decrement the value of one or more columns. This is done in the database, which means it does not use the values currently stored on the Instance. The decrement is done using a
   * ```sql
   * SET column = column - X
   * ```
   * query. To get the correct value after an decrement into the Instance you should do a reload.
   *
   * ```js
   * instance.decrement('number') // decrement number by 1
   * instance.decrement(['number', 'count'], { by: 2 }) // decrement number and count by 2
   * instance.decrement({ answer: 42, tries: 1}, { by: 2 }) // decrement answer by 42, and tries by 1.
   *                                                        // `by` is ignored, since each column has its own value
   * ```
   *
   * @see {Instance#reload}
   * @param {String|Array|Object} fields If a string is provided, that column is decremented by the value of `by` given in options. If an array is provided, the same is true for each column. If and object is provided, each column is decremented by the value given
   * @param {Object} [options]
   * @param {Integer} [options.by=1] The number to decrement by
   * @param {Function} [options.logging=false] A function that gets executed while running the query to log the sql.
   * @param {Transaction} [options.transaction]
   * @param  {String}       [options.searchPath=DEFAULT] An optional parameter to specify the schema search_path (Postgres only)
   *
   * @return {Promise}
   */
  decrement(fields, options) {
    options = _.defaults({}, options, {
      by: 1
    });

    if (!Utils._.isString(fields) && !Utils._.isArray(fields)) { // Assume fields is key-value pairs
      Utils._.each(fields, function(value, field) {
        fields[field] = -value;
      });
    }

    options.by = 0 - options.by;

    return this.increment(fields, options);
  }

  /**
   * Check whether this and `other` Instance refer to the same row
   *
   * @param {Instance} other
   * @return {Boolean}
   */
  equals(other) {
    var self = this;

    if (!other || !other.constructor) {
      return false;
    }

    if (!(other instanceof self.constructor)) {
      return false;
    }

    return Utils._.every(this.constructor.primaryKeyAttributes, function(attribute) {
      return self.get(attribute, {raw: true}) === other.get(attribute, {raw: true});
    });
  }

  /**
   * Check if this is equal to one of `others` by calling equals
   *
   * @param {Array} others
   * @return {Boolean}
   */
  equalsOneOf(others) {
    var self = this;

    return _.some(others, function(other) {
      return self.equals(other);
    });
  }

  setValidators(attribute, validators) {
    this.validators[attribute] = validators;
  }

  /**
   * Convert the instance to a JSON representation. Proxies to calling `get` with no keys. This means get all values gotten from the DB, and apply all custom getters.
   *
   * @see {Instance#get}
   * @return {object}
   */
  toJSON() {
    return this.get({
      plain: true
    });
  }
}

// Aliases
Model.prototype.updateAttributes = Model.prototype.update;

Model.$conformOptions = Model._conformOptions;
Model.$validateIncludedElements = Model._validateIncludedElements;
Model.$expandIncludeAll = Model._expandIncludeAll;
Model.findByPrimary = Model.findById;
Model.find = Model.findOne;
Model.findAndCountAll = Model.findAndCount;
Model.findOrInitialize = Model.findOrBuild;
Model.insertOrUpdate = Model.upsert;

Utils._.extend(Model, associationsMixin);
Hooks.applyTo(Model);

module.exports = Model;
