name: CI
on:
  push:
    branches:
      - v7
  pull_request:

env:
  SEQ_DB: sequelize_test
  SEQ_USER: sequelize_test
  SEQ_PW: sequelize_test

# This configuration cancels previous runs if a new run is started on the same PR. Only one run at a time per PR.
# This does not affect pushes to the v7 branch itself, only PRs.
# from https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#example-using-a-fallback-value
concurrency:
  group: ${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  install-and-build:
    strategy:
      fail-fast: false
      matrix:
        node-version: [14, 16]
    name: Upload install and build artifact (Node ${{ matrix.node-version }})
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: yarn
      - name: Install dependencies and build sequelize
        run: yarn install --frozen-lockfile
      - name: Compress artifact
        run: tar -cf install-build-node-${{ matrix.node-version }}.tar ./lib ./node_modules ./types
      - uses: actions/upload-artifact@v3
        with:
          name: install-build-artifact-node-${{ matrix.node-version }}
          path: install-build-node-${{ matrix.node-version }}.tar
          retention-days: 1
  lint:
    name: Lint code
    runs-on: ubuntu-latest
    needs: install-and-build
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 16.x
          cache: yarn
      - uses: actions/download-artifact@v3
        with:
          name: install-build-artifact-node-16
      - name: Extract artifact
        run: tar -xf install-build-node-16.tar
      - run: yarn lint-no-fix
  unit-test:
    strategy:
      fail-fast: false
      matrix:
        node-version: [14, 16]
    name: Unit test all dialects (Node ${{ matrix.node-version }})
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: yarn
      - uses: actions/download-artifact@v3
        with:
          name: install-build-artifact-node-${{ matrix.node-version }}
      - name: Extract artifact
        run: tar -xf install-build-node-${{ matrix.node-version }}.tar
      - name: Unit tests (mariadb)
        run: yarn test-unit-mariadb
      - name: Unit tests (mysql)
        run: yarn test-unit-mysql
      - name: Unit tests (postgres)
        run: yarn test-unit-postgres
      - name: Unit tests (postgres-native)
        run: yarn test-unit-postgres-native
      - name: Unit tests (mssql)
        run: yarn test-unit-mssql
      - name: Unit tests (db2)
        run: yarn test-unit-db2
      - name: Unit tests (ibmi)
        run: yarn test-unit-ibmi
      - name: Unit tests (snowflake)
        run: yarn test-unit-snowflake
  docs:
    name: Generate TypeDoc
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 16.x
          cache: yarn
      - uses: actions/download-artifact@v3
        with:
          name: install-build-artifact-node-16
      - name: Extract artifact
        run: tar -xf install-build-node-16.tar
      - run: yarn docs
  test-typings:
    strategy:
      fail-fast: false
      matrix:
        ts-version: ["4.4", "4.5", "4.6"]
    name: TS Typings (${{ matrix.ts-version }})
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 16.x
          cache: yarn
      - uses: actions/download-artifact@v3
        with:
          name: install-build-artifact-node-16
      - name: Extract artifact
        run: tar -xf install-build-node-16.tar
      # This step uses npm instead of yarn to minimize the time needed. See #14171
      - name: Install TypeScript
        run: npm install --no-save --no-audit typescript@~${{ matrix.ts-version }}
      - name: Typing Tests
        run: yarn test-typings
  test-db2:
    strategy:
      fail-fast: false
      matrix:
        node-version: [14, 16]
    name: DB2 (Node ${{ matrix.node-version }})
    runs-on: ubuntu-latest
    needs: [ unit-test, test-typings ]
    env:
      DIALECT: db2
      SEQ_DB: testdb
      SEQ_USER: db2inst1
      SEQ_PW: password
      SEQ_TEST_CLEANUP_TIMEOUT: 1200000
      SEQ_PORT: 50000
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: yarn
      - uses: actions/download-artifact@v3
        with:
          name: install-build-artifact-node-${{ matrix.node-version }}
      - name: Extract artifact
        run: tar -xf install-build-node-${{ matrix.node-version }}.tar
      - name: Install Local DB2 Copy
        run: yarn start-db2
      - name: Integration Tests
        run: yarn test-integration
  test-sqlite:
    strategy:
      fail-fast: false
      matrix:
        node-version: [14, 16]
    name: SQLite (Node ${{ matrix.node-version }})
    runs-on: ubuntu-latest
    needs: [ unit-test, test-typings ]
    env:
      DIALECT: sqlite
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: yarn
      - uses: actions/download-artifact@v3
        with:
          name: install-build-artifact-node-${{ matrix.node-version }}
      - name: Extract artifact
        run: tar -xf install-build-node-${{ matrix.node-version }}.tar
      - name: Integration Tests
        run: yarn test-integration
  test-postgres:
    strategy:
      fail-fast: false
      matrix:
        node-version: [14, 16]
        postgres-version: [9.5, 10]
        minify-aliases: [true, false]
        native: [true, false]
    name: Postgres ${{ matrix.postgres-version }}${{ matrix.native && ' (native)' || '' }} (Node ${{ matrix.node-version }})${{ matrix.minify-aliases && ' (minified aliases)' || '' }}
    runs-on: ubuntu-latest
    needs: [ unit-test, test-typings ]
    services:
      postgres:
        image: sushantdhiman/postgres:${{ matrix.postgres-version }}
        env:
          POSTGRES_USER: sequelize_test
          POSTGRES_DB: sequelize_test
          POSTGRES_PASSWORD: sequelize_test
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    env:
      SEQ_PORT: 5432
      DIALECT: ${{ matrix.native && 'postgres-native' || 'postgres' }}
      SEQ_PG_MINIFY_ALIASES: ${{ matrix.minify-aliases && '1' || '' }}
    steps:
      - run: PGPASSWORD=sequelize_test psql -h localhost -p 5432 -U sequelize_test sequelize_test -c '\l'
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: yarn
      - uses: actions/download-artifact@v3
        with:
          name: install-build-artifact-node-${{ matrix.node-version }}
      - name: Extract artifact
        run: tar -xf install-build-node-${{ matrix.node-version }}.tar
      - name: Install pg-native (Node 14)
        run: yarn add pg-native --ignore-engines
        if: matrix.native && matrix.node-version == 14
      # This step uses npm instead of yarn to minimize the time needed. See #14171
      - name: Install pg-native (Node 16)
        run: npm install --no-save --no-audit pg-native
        if: matrix.native && matrix.node-version == 16
      - name: Integration Tests
        run: yarn test-integration
  test-mysql-mariadb:
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: MySQL 5.7
            image: mysql:5.7.37
            dialect: mysql
            node-version: 14
          - name: MySQL 5.7
            image: mysql:5.7.37
            dialect: mysql
            node-version: 16
          - name: MySQL 8.0
            image: mysql:8.0.28
            dialect: mysql
            node-version: 14
          - name: MySQL 8.0
            image: mysql:8.0.28
            dialect: mysql
            node-version: 16
          - name: MariaDB 10.3
            image: mariadb:10.3.34
            dialect: mariadb
            node-version: 14
          - name: MariaDB 10.3
            image: mariadb:10.3.34
            dialect: mariadb
            node-version: 16
          - name: MariaDB 10.5
            image: mariadb:10.5
            dialect: mariadb
            node-version: 14
          - name: MariaDB 10.5
            image: mariadb:10.5
            dialect: mariadb
            node-version: 16
    name: ${{ matrix.name }} (Node ${{ matrix.node-version }})
    runs-on: ubuntu-latest
    needs: [ unit-test, test-typings ]
    services:
      mysql:
        image: ${{ matrix.image }}
        env:
          MYSQL_DATABASE: sequelize_test
          MYSQL_USER: sequelize_test
          MYSQL_PASSWORD: sequelize_test
          MYSQL_ROOT_PASSWORD: sequelize_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin -usequelize_test -psequelize_test status" --health-interval 10s --health-timeout 5s --health-retries 5 --tmpfs /var/lib/mysql:rw
    env:
      SEQ_PORT: 3306
      DIALECT: ${{ matrix.dialect }}
    steps:
      - run: mysql --host 127.0.0.1 --port 3306 -uroot -psequelize_test -e "GRANT ALL ON *.* TO 'sequelize_test'@'%' with grant option; FLUSH PRIVILEGES;"
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: yarn
      - uses: actions/download-artifact@v3
        with:
          name: install-build-artifact-node-${{ matrix.node-version }}
      - name: Extract artifact
        run: tar -xf install-build-node-${{ matrix.node-version }}.tar
      - name: Integration Tests
        run: yarn test-integration
  test-mssql:
    strategy:
      fail-fast: false
      matrix:
        node-version: [14, 16]
        mssql-version: [2017, 2019]
    name: MSSQL ${{ matrix.mssql-version }} (Node ${{ matrix.node-version }})
    runs-on: ubuntu-latest
    needs: [ unit-test, test-typings ]
    services:
      mssql:
        image: mcr.microsoft.com/mssql/server:${{ matrix.mssql-version }}-latest
        env:
          ACCEPT_EULA: Y
          SA_PASSWORD: Password12!
        ports:
          - 1433:1433
        options: >-
          --health-cmd="/opt/mssql-tools/bin/sqlcmd -S localhost -U SA -P \"Password12!\" -l 30 -Q \"SELECT 1\""
          --health-start-period 10s
          --health-interval 10s
          --health-timeout 5s
          --health-retries 10
    env:
      DIALECT: mssql
      SEQ_USER: SA
      SEQ_PW: Password12!
      SEQ_PORT: 1433
    steps:
      - run: /opt/mssql-tools/bin/sqlcmd -S localhost -U SA -P "Password12!" -Q "CREATE DATABASE sequelize_test; ALTER DATABASE sequelize_test SET READ_COMMITTED_SNAPSHOT ON;"
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: yarn
      - uses: actions/download-artifact@v3
        with:
          name: install-build-artifact-node-${{ matrix.node-version }}
      - name: Extract artifact
        run: tar -xf install-build-node-${{ matrix.node-version }}.tar
      - name: Integration Tests
        run: yarn test-integration
  release:
    name: Release
    runs-on: ubuntu-latest
    needs:
      [
        docs,
        test-sqlite,
        test-postgres,
        test-mysql-mariadb,
        test-mssql,
      ]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/v6' || github.ref == 'refs/heads/v7')
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 16.x
          cache: yarn
      - uses: actions/download-artifact@v3
        with:
          name: install-build-artifact-node-16
      - name: Extract artifact
        run: tar -xf install-build-node-16.tar
      - run: yarn semantic-release
      - id: sequelize
        uses: sdepold/github-action-get-latest-release@master
        with:
          repository: sequelize/sequelize
      - name: Notify channels
        run: |
          curl -XPOST -u "sdepold:${{ secrets.GH_TOKEN }}" -H "Accept: application/vnd.github.v3+json" -H "Content-Type: application/json" https://api.github.com/repos/sequelize/sequelize/dispatches --data '{"event_type":"Release notifier","client_payload":{"release-id": ${{ steps.sequelize.outputs.id }}}}'
      - name: Notify docs repo
        run: |
          curl -XPOST -u "sdepold:${{ secrets.GH_TOKEN }}" -H "Accept: application/vnd.github.v3+json" -H "Content-Type: application/json" https://api.github.com/repos/sequelize/website/dispatches --data '{"event_type":"Build website"}'
