{
  "name": "sequelize",
  "description": "Multi dialect ORM for Node.JS/io.js",
  "version": "3.22.0",
  "author": "Sascha Depold <sascha@depold.com>",
  "contributors": [
    {
      "name": "Sascha Depold",
      "email": "sascha@depold.com"
    },
    {
      "name": "Jan Aagaard Meier",
      "email": [
        "janzeh@gmail.com",
        "jmei@itu.dk"
      ]
    },
    {
      "name": "Daniel Durante",
      "email": "me@danieldurante.com"
    },
    {
      "name": "Mick Hansen",
      "email": "mick.kasper.hansen@gmail.com"
    }
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/sequelize/sequelize.git"
  },
  "bugs": {
    "url": "https://github.com/sequelize/sequelize/issues"
  },
  "dependencies": {
    "bluebird": "^3.3.4",
    "depd": "^1.1.0",
    "dottie": "^1.0.0",
    "generic-pool": "2.4.2",
    "inflection": "^1.6.0",
    "lodash": "4.11.1",
    "moment": "^2.13.0",
    "moment-timezone": "^0.5.3",
    "node-uuid": "~1.4.4",
    "retry-as-promised": "^2.0.0",
    "semver": "^5.0.1",
    "shimmer": "1.1.0",
    "terraformer-wkt-parser": "^1.1.0",
    "toposort-class": "^1.0.1",
    "validator": "^4.6.1",
    "wkx": "0.2.0"
  },
  "devDependencies": {
    "babel-core": "^6.6.5",
    "babel-preset-es2015": "^6.6.0",
    "chai": "^3.5.0",
    "chai-as-promised": "^5.1.0",
    "chai-datetime": "^1.4.0",
    "chai-spies": "^0.7.0",
    "commander": "^2.6.0",
    "continuation-local-storage": "^3.1.4",
    "dox": "~0.8.0",
    "git": "^0.1.5",
    "hints": "^0.2.0",
    "istanbul": "^0.4.3",
    "jshint": "^2.9.2",
    "lcov-result-merger": "^1.2.0",
    "mocha": "^2.4.2",
    "mysql": "~2.10.1",
    "pg": "^4.4.6",
    "pg-hstore": "^2.3.1",
    "pg-native": "^1.8.0",
    "pg-types": "^1.11.0",
    "oracledb": "^1.3.0",
    "sinon": "^1.17.3",
    "sinon-chai": "^2.8.0",
    "sqlite3": "^3.1.2",
    "tedious": "^1.13.2",
    "watchr": "~2.4.11"
  },
  "keywords": [
    "mysql",
    "sqlite",
    "postgresql",
    "postgres",
    "mssql",
    "orm",
    "nodejs",
    "object relational mapper"
  ],
  "main": "index",
  "scripts": {
    "test": "if [ $COVERAGE ]; then npm run codeclimate; else npm run jshint && npm run teaser && npm run test-unit && npm run test-integration; fi",
    "test-docker": "docker-compose run sequelize /bin/sh -c \"npm run test-all\"",
    "test-docker-unit": "docker-compose run sequelize /bin/sh -c \"npm run test-unit-all\"",
    "build-docker": "docker-compose build",
    "docs": "node docs/docs-generator.js",
    "jshint": "./node_modules/.bin/jshint lib test",
    "teaser": "echo ''; node -pe \"Array(20 + process.env.DIALECT.length + 3).join('#')\"; echo '# Running tests for '$DIALECT' #'; node -pe \"Array(20 + process.env.DIALECT.length + 3).join('#')\";echo '';",
    "test-unit": "./node_modules/.bin/mocha --globals setImmediate,clearImmediate --ui tdd --check-leaks --colors -t 15000 --reporter spec 'test/unit/**/*.js'",
    "test-unit-mysql": "DIALECT=mysql npm run test-unit",
    "test-unit-postgres": "DIALECT=postgres npm run test-unit",
    "test-unit-postgres-native": "DIALECT=postgres-native npm run test-unit",
    "test-unit-mariadb": "DIALECT=mariadb npm run test-unit",
    "test-unit-sqlite": "DIALECT=sqlite npm run test-unit",
    "test-unit-oracle":"DIALECT=oracle npm run test-unit",
    "test-unit-mssql": "DIALECT=mssql npm run test-unit",
    "test-unit-all": "npm run test-unit-mysql && npm run test-unit-postgres && npm run test-unit-postgres-native && npm run test-unit-mssql && npm run test-unit-sqlite && npm run test-unit-mariadb",
    "test-integration": "./node_modules/.bin/mocha --globals setImmediate,clearImmediate --ui tdd --check-leaks --colors -t 15000 --reporter spec --grep \"$GREP\" 'test/integration/**/*.test.js'",
    "test-integration-mysql": "DIALECT=mysql npm run test-integration",
    "test-integration-postgres": "DIALECT=postgres npm run test-integration",
    "test-integration-postgres-native": "DIALECT=postgres-native npm run test-integration",
    "test-integration-mariadb": "DIALECT=mariadb npm run test-integration",
    "test-integration-sqlite": "DIALECT=sqlite npm run test-integration",
    "test-integration-oracle":"DIALECT=oracle npm run test-integration",
    "test-integration-mssql": "DIALECT=mssql npm run test-integration",
    "test-integration-all": "npm run test-integration-mysql && npm run test-integration-postgres && npm run test-integration-postgres-native && npm run test-integration-mssql && npm run test-integration-sqlite && npm run test-integration-mariadb",
    "test-mysql": "DIALECT=mysql npm test",
    "test-sqlite": "DIALECT=sqlite npm test",
    "test-postgres": "DIALECT=postgres npm test",
    "test-pgsql": "npm run test-postgres",
    "test-postgres-native": "DIALECT=postgres-native npm test",
    "test-postgresn": "npm run test-postgres-native",
    "test-mariadb": "DIALECT=mariadb npm test",
    "test-oracle": "DIALECT=oracle npm test",
    "test-mssql": "DIALECT=mssql npm test",
    "test-all": "npm run test-mysql && npm run test-sqlite && npm run test-oracle && npm run test-postgres && npm run test-postgres-native && npm run test-mariadb && npm run test-mssql",
    "cover": "rm -rf coverage && npm run teaser && COVERAGE=true ./node_modules/.bin/istanbul cover ./node_modules/.bin/_mocha --report lcovonly -- -t 30000 --ui tdd 'test/integration/**/*.test.js'",
    "cover-mysql": "DIALECT=mysql npm run cover && mv coverage coverage-mysql",
    "cover-sqlite": "DIALECT=sqlite npm run cover && mv coverage coverage-sqlite",
    "cover-postgres": "DIALECT=postgres npm run cover && mv coverage coverage-postgres",
    "cover-postgres-native": "DIALECT=postgres-native npm run cover && mv coverage coverage-postgres-native",
    "cover-mariadb": "DIALECT=mariadb npm run cover && mv coverage coverage-mariadb",
    "cover-mssql": "DIALECT=mssql npm run cover && mv coverage coverage-mssql",
    "cover-oracle": "DIALECT=oracle npm run cover && mv coverage coverage-oracle",
    "cover-all": "npm run cover-mysql && npm run cover-oracle && npm run cover-postgres && npm run cover-postgres-native && npm run cover-mssql && npm run cover-sqlite && npm run cover-mariadb && npm run merge-coverage",
    "merge-coverage": "rm -rf coverage && mkdir coverage && ./node_modules/.bin/lcov-result-merger 'coverage-*/lcov.info' 'coverage/lcov.info'",
    "codeclimate-send": "npm install -g codeclimate-test-reporter && CODECLIMATE_REPO_TOKEN=ce835a510bbf423a5ab5400a9bdcc2ec2d189d840b31657c6ee7cb9916b161d6 codeclimate-test-reporter < coverage/lcov.info",
    "codeclimate": "npm run cover-all && npm run codeclimate-send",
    "sscce": "docker-compose run sequelize /bin/sh -c \"node sscce.js\"",
    "sscce-mysql": "DIALECT=mysql npm run sscce",
    "sscce-postgres": "DIALECT=postgres npm run sscce",
    "sscce-sqlite": "DIALECT=sqlite npm run sscce"
  },
  "engines": {
    "node": ">=0.6.21"
  },
  "license": "MIT"
}
