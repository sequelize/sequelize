{
  "name": "sequelize",
  "description": "Sequelize is a promise-based Node.js ORM tool for Postgres, MySQL, MariaDB, SQLite, Microsoft SQL Server, Amazon Redshift and Snowflakeâ€™s Data Cloud. It features solid transaction support, relations, eager and lazy loading, read replication and more.",
  "version": "0.0.0-development",
  "funding": [
    {
      "type": "opencollective",
      "url": "https://opencollective.com/sequelize"
    }
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/sequelize/sequelize.git"
  },
  "bugs": {
    "url": "https://github.com/sequelize/sequelize/issues"
  },
  "homepage": "https://sequelize.org/",
  "main": "./dist/index.js",
  "types": "./dist",
  "type": "commonjs",
  "exports": {
    ".": {
      "import": "./dist/index.mjs",
      "require": "./dist/index.js"
    },
    "./lib/*": "./dist/lib/*.js",
    "./lib/errors": "./dist/lib/errors/index.js",
    "./*": "./*"
  },
  "engines": {
    "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
  },
  "files": [
    "dist",
    "lib",
    "index.js",
    "types/index.d.ts",
    "types/lib",
    "types/type-helpers"
  ],
  "license": "MIT",
  "dependencies": {
    "@types/debug": "^4.1.7",
    "debug": "^4.3.3",
    "dottie": "^2.0.2",
    "inflection": "^1.13.1",
    "lodash": "^4.17.21",
    "moment": "^2.29.1",
    "moment-timezone": "^0.5.34",
    "pg-connection-string": "^2.5.0",
    "retry-as-promised": "^5.0.0",
    "semver": "^7.3.5",
    "sequelize-pool": "^7.1.0",
    "toposort-class": "^1.0.1",
    "uuid": "^8.3.2",
    "validator": "^13.7.0",
    "wkx": "^0.5.0"
  },
  "devDependencies": {
    "@commitlint/cli": "^15.0.0",
    "@commitlint/config-angular": "^15.0.0",
    "@types/chai": "^4.2.22",
    "@types/mocha": "^9.0.0",
    "@types/node": "^16.11.11",
    "@types/sinon": "^10.0.6",
    "@types/validator": "^13.7.0",
    "@typescript-eslint/eslint-plugin": "^5.5.0",
    "@typescript-eslint/parser": "^5.5.0",
    "acorn": "^8.6.0",
    "chai": "^4.3.4",
    "chai-as-promised": "^7.1.1",
    "chai-datetime": "^1.8.0",
    "cheerio": "^1.0.0-rc.10",
    "cls-hooked": "^4.2.2",
    "copyfiles": "^2.4.1",
    "cross-env": "^7.0.3",
    "delay": "^5.0.0",
    "esbuild": "^0.14.1",
    "esdoc": "^1.1.0",
    "esdoc-ecmascript-proposal-plugin": "^1.0.0",
    "esdoc-inject-style-plugin": "^1.0.0",
    "esdoc-standard-plugin": "^1.0.0",
    "eslint": "^8.3.0",
    "eslint-plugin-jsdoc": "^37.0.3",
    "eslint-plugin-mocha": "^9.0.0",
    "expect-type": "^0.12.0",
    "fast-glob": "^3.2.7",
    "fs-jetpack": "^4.3.0",
    "husky": "^7.0.4",
    "js-combinatorics": "^0.6.1",
    "lcov-result-merger": "^3.1.0",
    "lint-staged": "^12.1.2",
    "mariadb": "^2.5.5",
    "markdownlint-cli": "^0.30.0",
    "mocha": "^7.2.0",
    "module-alias": "^2.2.2",
    "ibm_db": "^2.8.0",
    "mysql2": "^2.3.3",
    "node-hook": "^1.0.0",
    "nyc": "^15.1.0",
    "p-map": "^4.0.0",
    "p-props": "^4.0.0",
    "p-settle": "^4.1.1",
    "p-timeout": "^4.0.0",
    "pg": "^8.7.1",
    "pg-hstore": "^2.3.4",
    "rimraf": "^3.0.2",
    "semantic-release": "^18.0.1",
    "semantic-release-fail-on-major-bump": "^1.0.0",
    "sinon": "^12.0.1",
    "sinon-chai": "^3.7.0",
    "snowflake-sdk": "^1.6.1",
    "source-map-support": "^0.5.21",
    "sqlite3": "npm:@vscode/sqlite3@^5.0.7",
    "tedious": "8.3.0",
    "typescript": "^4.5.2"
  },
  "peerDependenciesMeta": {
    "pg": {
      "optional": true
    },
    "pg-hstore": {
      "optional": true
    },
    "mysql2": {
      "optional": true
    },
    "ibm_db": {
      "optional": true
    },
    "snowflake-sdk": {
      "optional": true
    },
    "mariadb": {
      "optional": true
    },
    "sqlite3": {
      "optional": true
    },
    "tedious": {
      "optional": true
    }
  },
  "keywords": [
    "mysql",
    "mariadb",
    "sqlite",
    "postgresql",
    "postgres",
    "pg",
    "mssql",
    "db2",
    "ibm_db",
    "sql",
    "sqlserver",
    "snowflake",
    "orm",
    "nodejs",
    "object relational mapper",
    "database",
    "db"
  ],
  "commitlint": {
    "extends": [
      "@commitlint/config-angular"
    ],
    "rules": {
      "type-enum": [
        2,
        "always",
        [
          "build",
          "ci",
          "docs",
          "feat",
          "fix",
          "perf",
          "refactor",
          "revert",
          "style",
          "test",
          "meta"
        ]
      ]
    }
  },
  "lint-staged": {
    "*!(d).[tj]s": "eslint"
  },
  "release": {
    "plugins": [
      "@semantic-release/commit-analyzer",
      "semantic-release-fail-on-major-bump",
      "@semantic-release/release-notes-generator",
      "@semantic-release/npm",
      "@semantic-release/github"
    ],
    "branches": [
      "v6",
      {
        "name": "v6-beta",
        "prerelease": "beta"
      },
      {
        "name": "v7",
        "prerelease": "alpha"
      }
    ]
  },
  "publishConfig": {
    "tag": "latest"
  },
  "scripts": {
    "----------------------------------------- static analysis -----------------------------------------": "",
    "lint": "eslint lib test --quiet --fix",
    "lint-docs": "markdownlint docs",
    "test-typings": "tsc -b types/tsconfig.json && tsc -b types/test/tsconfig.json && tsc --noEmit --emitDeclarationOnly false && tsc -b test/tsconfig.json",
    "----------------------------------------- documentation -------------------------------------------": "",
    "docs": "rimraf esdoc && esdoc -c docs/esdoc-config.js && cp docs/favicon.ico esdoc/favicon.ico && cp docs/ROUTER.txt esdoc/ROUTER && node docs/run-docs-transforms.js && node docs/redirects/create-redirects.js && rimraf esdoc/file esdoc/source.html",
    "----------------------------------------- tests ---------------------------------------------------": "",
    "mocha": "mocha -r ./test/registerEsbuild",
    "test-unit": "yarn mocha \"test/unit/**/*.test.[tj]s\"",
    "test-integration": "yarn mocha \"test/integration/**/*.test.[tj]s\"",
    "teaser": "node test/teaser.js",
    "test": "npm run prepare && npm run test-typings && npm run teaser && npm run test-unit && npm run test-integration",
    "----------------------------------------- coverage ------------------------------------------------": "",
    "cover": "rimraf coverage && npm run teaser && npm run cover-integration && npm run cover-unit && npm run merge-coverage",
    "cover-integration": "cross-env COVERAGE=true nyc --reporter=lcovonly yarn mocha \"test/integration/**/*.test.[tj]s\" && node -e \"require('fs').renameSync('coverage/lcov.info', 'coverage/integration.info')\"",
    "cover-unit": "cross-env COVERAGE=true nyc --reporter=lcovonly yarn mocha \"test/unit/**/*.test.[tj]s\" && node -e \"require('fs').renameSync('coverage/lcov.info', 'coverage/unit.info')\"",
    "merge-coverage": "lcov-result-merger \"coverage/*.info\" \"coverage/lcov.info\"",
    "----------------------------------------- local test dbs ------------------------------------------": "",
    "start-mariadb": "bash dev/mariadb/10.3/start.sh",
    "start-mysql": "bash dev/mysql/5.7/start.sh",
    "start-mysql-8": "bash dev/mysql/8.0/start.sh",
    "start-postgres": "bash dev/postgres/10/start.sh",
    "start-mssql": "bash dev/mssql/2019/start.sh",
    "start-db2": "bash dev/db2/11.5/start.sh",
    "stop-mariadb": "bash dev/mariadb/10.3/stop.sh",
    "stop-mysql": "bash dev/mysql/5.7/stop.sh",
    "stop-postgres": "bash dev/postgres/10/stop.sh",
    "stop-mssql": "bash dev/mssql/2019/stop.sh",
    "stop-db2": "bash dev/db2/11.5/stop.sh",
    "restart-mariadb": "npm run start-mariadb",
    "restart-mysql": "npm run start-mysql",
    "restart-postgres": "npm run start-postgres",
    "restart-mssql": "npm run start-mssql",
    "restart-db2": "npm run start-db2",
    "----------------------------------------- local tests ---------------------------------------------": "",
    "test-unit-mariadb": "cross-env DIALECT=mariadb npm run test-unit",
    "test-unit-mysql": "cross-env DIALECT=mysql npm run test-unit",
    "test-unit-postgres": "cross-env DIALECT=postgres npm run test-unit",
    "test-unit-postgres-native": "cross-env DIALECT=postgres-native npm run test-unit",
    "test-unit-sqlite": "cross-env DIALECT=sqlite npm run test-unit",
    "test-unit-mssql": "cross-env DIALECT=mssql npm run test-unit",
    "test-unit-db2": "cross-env DIALECT=db2 npm run test-unit",
    "test-unit-snowflake": "cross-env DIALECT=snowflake npm run test-unit",
    "test-unit-all": "npm run test-unit-mariadb && npm run test-unit-mysql && npm run test-unit-postgres && npm run test-unit-postgres-native && npm run test-unit-mssql && npm run test-unit-sqlite && npm run test-unit-snowflake && npm run test-unit-db2",
    "test-integration-mariadb": "cross-env DIALECT=mariadb npm run test-integration",
    "test-integration-mysql": "cross-env DIALECT=mysql npm run test-integration",
    "test-integration-postgres": "cross-env DIALECT=postgres npm run test-integration",
    "test-integration-postgres-native": "cross-env DIALECT=postgres-native npm run test-integration",
    "test-integration-sqlite": "cross-env DIALECT=sqlite npm run test-integration",
    "test-integration-mssql": "cross-env DIALECT=mssql npm run test-integration",
    "test-integration-db2": "cross-env DIALECT=db2 npm run test-integration",
    "test-integration-snowflake": "cross-env DIALECT=snowflake npm run test-integration",
    "test-mariadb": "cross-env DIALECT=mariadb npm test",
    "test-mysql": "cross-env DIALECT=mysql npm test",
    "test-sqlite": "cross-env DIALECT=sqlite npm test",
    "test-postgres": "cross-env DIALECT=postgres npm test",
    "test-postgres-native": "cross-env DIALECT=postgres-native npm test",
    "test-mssql": "cross-env DIALECT=mssql npm test",
    "test-db2": "cross-env DIALECT=db2 npm test",
    "----------------------------------------- development ---------------------------------------------": "",
    "sscce": "node sscce.js",
    "sscce-mariadb": "cross-env DIALECT=mariadb node sscce.js",
    "sscce-mysql": "cross-env DIALECT=mysql node sscce.js",
    "sscce-postgres": "cross-env DIALECT=postgres node sscce.js",
    "sscce-postgres-native": "cross-env DIALECT=postgres-native node sscce.js",
    "sscce-sqlite": "cross-env DIALECT=sqlite node sscce.js",
    "sscce-mssql": "cross-env DIALECT=mssql node sscce.js",
    "sscce-db2": "cross-env DIALECT=db2 node sscce.js",
    "prepare": "npm run build && husky install",
    "build": "node ./build.js",
    "---------------------------------------------------------------------------------------------------": ""
  },
  "support": true
}
